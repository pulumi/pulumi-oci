# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ManagedDatabaseGroupManagedDatabase',
    'ManagedDatabasesChangeDatabaseParameterCredentials',
    'ManagedDatabasesChangeDatabaseParameterParameter',
    'ManagedDatabasesResetDatabaseParameterCredentials',
    'GetDbManagementPrivateEndpointAssociatedDatabaseItemResult',
    'GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionResult',
    'GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItemResult',
    'GetDbManagementPrivateEndpointAssociatedDatabasesFilterResult',
    'GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionResult',
    'GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItemResult',
    'GetDbManagementPrivateEndpointsFilterResult',
    'GetJobExecutionsStatusItemResult',
    'GetJobExecutionsStatusesFilterResult',
    'GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionResult',
    'GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItemResult',
    'GetManagedDatabaseGroupManagedDatabaseResult',
    'GetManagedDatabaseGroupsFilterResult',
    'GetManagedDatabaseGroupsManagedDatabaseGroupCollectionResult',
    'GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult',
    'GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult',
    'GetManagedDatabaseManagedDatabaseGroupResult',
    'GetManagedDatabaseSqlTuningAdvisorTaskItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisonModifiedResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisonOriginalResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFilterResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFindingItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFindingsFilterResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsFilterResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlanResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItemResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportIndexFindingResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportObjectStatFindingResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefitResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCountResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCountResult',
    'GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportTaskInfoResult',
    'GetManagedDatabaseUserConsumerGroupPrivilegeItemResult',
    'GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionResult',
    'GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItemResult',
    'GetManagedDatabaseUserConsumerGroupPrivilegesFilterResult',
    'GetManagedDatabaseUserDataAccessContainerItemResult',
    'GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionResult',
    'GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItemResult',
    'GetManagedDatabaseUserDataAccessContainersFilterResult',
    'GetManagedDatabaseUserObjectPrivilegeItemResult',
    'GetManagedDatabaseUserObjectPrivilegesFilterResult',
    'GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionResult',
    'GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItemResult',
    'GetManagedDatabaseUserProxiedForUserItemResult',
    'GetManagedDatabaseUserProxiedForUsersFilterResult',
    'GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionResult',
    'GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItemResult',
    'GetManagedDatabaseUserRoleItemResult',
    'GetManagedDatabaseUserRolesFilterResult',
    'GetManagedDatabaseUserRolesRoleCollectionResult',
    'GetManagedDatabaseUserRolesRoleCollectionItemResult',
    'GetManagedDatabaseUsersFilterResult',
    'GetManagedDatabaseUsersUserCollectionResult',
    'GetManagedDatabaseUsersUserCollectionItemResult',
    'GetManagedDatabasesAsmPropertiesAsmPropertyCollectionResult',
    'GetManagedDatabasesAsmPropertiesAsmPropertyCollectionItemResult',
    'GetManagedDatabasesAsmPropertiesFilterResult',
    'GetManagedDatabasesAsmPropertyItemResult',
    'GetManagedDatabasesDatabaseParameterItemResult',
    'GetManagedDatabasesDatabaseParameterItemAllowedValueResult',
    'GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionResult',
    'GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult',
    'GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult',
    'GetManagedDatabasesDatabaseParametersFilterResult',
    'GetManagedDatabasesFilterResult',
    'GetManagedDatabasesManagedDatabaseCollectionResult',
    'GetManagedDatabasesManagedDatabaseCollectionItemResult',
    'GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult',
    'GetManagedDatabasesUserProxyUserItemResult',
    'GetManagedDatabasesUserProxyUsersFilterResult',
    'GetManagedDatabasesUserProxyUsersProxyUserCollectionResult',
    'GetManagedDatabasesUserProxyUsersProxyUserCollectionItemResult',
    'GetManagedDatabasesUserSystemPrivilegeItemResult',
    'GetManagedDatabasesUserSystemPrivilegesFilterResult',
    'GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionResult',
    'GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItemResult',
]

@pulumi.output_type
class ManagedDatabaseGroupManagedDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "databaseSubType":
            suggest = "database_sub_type"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "deploymentType":
            suggest = "deployment_type"
        elif key == "timeAdded":
            suggest = "time_added"
        elif key == "workloadType":
            suggest = "workload_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabaseGroupManagedDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabaseGroupManagedDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabaseGroupManagedDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_sub_type: Optional[str] = None,
                 database_type: Optional[str] = None,
                 deployment_type: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 time_added: Optional[str] = None,
                 workload_type: Optional[str] = None):
        """
        :param str compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str deployment_type: The infrastructure used to deploy the Oracle Database.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed database that needs to be added to the Managed Database Group.
        :param str name: The name of the Managed Database Group. Valid characters are uppercase or lowercase letters, numbers, and "_". The name of the Managed Database Group cannot be modified. It must be unique in the compartment and must begin with an alphabetic character.
        :param str time_added: The date and time the Managed Database was added to the group.
        :param str workload_type: The workload type of the Autonomous Database.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_sub_type is not None:
            pulumi.set(__self__, "database_sub_type", database_sub_type)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_added is not None:
            pulumi.set(__self__, "time_added", time_added)
        if workload_type is not None:
            pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> Optional[str]:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        """
        The infrastructure used to deploy the Oracle Database.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the managed database that needs to be added to the Managed Database Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the Managed Database Group. Valid characters are uppercase or lowercase letters, numbers, and "_". The name of the Managed Database Group cannot be modified. It must be unique in the compartment and must begin with an alphabetic character.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> Optional[str]:
        """
        The date and time the Managed Database was added to the group.
        """
        return pulumi.get(self, "time_added")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> Optional[str]:
        """
        The workload type of the Autonomous Database.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class ManagedDatabasesChangeDatabaseParameterCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretId":
            suggest = "secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabasesChangeDatabaseParameterCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabasesChangeDatabaseParameterCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabasesChangeDatabaseParameterCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: Optional[str] = None,
                 role: Optional[str] = None,
                 secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str password: The password for the database user name.
        :param str role: The role of the database user. Indicates whether the database user is a normal user or sysdba.
        :param str secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret containing the user password.
        :param str user_name: The database user name used to perform management activity.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password for the database user name.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        The role of the database user. Indicates whether the database user is a normal user or sysdba.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret containing the user password.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        The database user name used to perform management activity.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class ManagedDatabasesChangeDatabaseParameterParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updateComment":
            suggest = "update_comment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabasesChangeDatabaseParameterParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabasesChangeDatabaseParameterParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabasesChangeDatabaseParameterParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 value: str,
                 update_comment: Optional[str] = None):
        """
        :param str name: The parameter name.
        :param str value: The parameter value.
        :param str update_comment: A comment string to associate with the change in parameter value. It cannot contain control characters or a line break.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if update_comment is not None:
            pulumi.set(__self__, "update_comment", update_comment)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="updateComment")
    def update_comment(self) -> Optional[str]:
        """
        A comment string to associate with the change in parameter value. It cannot contain control characters or a line break.
        """
        return pulumi.get(self, "update_comment")


@pulumi.output_type
class ManagedDatabasesResetDatabaseParameterCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretId":
            suggest = "secret_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManagedDatabasesResetDatabaseParameterCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManagedDatabasesResetDatabaseParameterCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManagedDatabasesResetDatabaseParameterCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: Optional[str] = None,
                 role: Optional[str] = None,
                 secret_id: Optional[str] = None,
                 user_name: Optional[str] = None):
        """
        :param str password: The password for the database user name.
        :param str role: The role of the database user. Indicates whether the database user is a normal user or sysdba.
        :param str secret_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret containing the user password.
        :param str user_name: The database user name used to perform management activity.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password for the database user name.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        The role of the database user. Indicates whether the database user is a normal user or sysdba.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the secret containing the user password.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        """
        The database user name used to perform management activity.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDbManagementPrivateEndpointAssociatedDatabaseItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 name: str,
                 time_registered: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        :param str name: The name of the database.
        :param str time_registered: The time when Database Management was enabled for the database.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_registered", time_registered)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeRegistered")
    def time_registered(self) -> str:
        """
        The time when Database Management was enabled for the database.
        """
        return pulumi.get(self, "time_registered")


@pulumi.output_type
class GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItemResult']):
        """
        :param Sequence['GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItemArgs'] items: A list of databases using a Database Management private endpoint.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItemResult']:
        """
        A list of databases using a Database Management private endpoint.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDbManagementPrivateEndpointAssociatedDatabasesAssociatedDatabaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 name: str,
                 time_registered: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        :param str name: The name of the database.
        :param str time_registered: The time when Database Management was enabled for the database.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_registered", time_registered)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeRegistered")
    def time_registered(self) -> str:
        """
        The time when Database Management was enabled for the database.
        """
        return pulumi.get(self, "time_registered")


@pulumi.output_type
class GetDbManagementPrivateEndpointAssociatedDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the database.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDbManagementPrivateEndpointsDbManagementPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 description: str,
                 id: str,
                 is_cluster: bool,
                 name: str,
                 nsg_ids: Sequence[str],
                 private_ip: str,
                 state: str,
                 subnet_id: str,
                 time_created: str,
                 vcn_id: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str description: The description of the Database Management private endpoint.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint.
        :param bool is_cluster: The option to filter Database Management private endpoints that can used for Oracle Databases in a cluster. This should be used along with the vcnId query parameter.
        :param str name: A filter to return only resources that match the entire name.
        :param Sequence[str] nsg_ids: The OCIDs of the Network Security Groups to which the Database Management private endpoint belongs.
        :param str private_ip: The IP addresses assigned to the Database Management private endpoint.
        :param str state: The lifecycle state of a resource.
        :param str subnet_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet.
        :param str time_created: The date and time the Database Managament private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str vcn_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cluster", is_cluster)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Database Management private endpoint.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Management private endpoint.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> bool:
        """
        The option to filter Database Management private endpoints that can used for Oracle Databases in a cluster. This should be used along with the vcnId query parameter.
        """
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[str]:
        """
        The OCIDs of the Network Security Groups to which the Database Management private endpoint belongs.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The IP addresses assigned to the Database Management private endpoint.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The lifecycle state of a resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the Database Managament private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VCN.
        """
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetDbManagementPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobExecutionsStatusItemResult(dict):
    def __init__(__self__, *,
                 count: int,
                 status: str):
        """
        :param int count: The number of job executions of a particular status.
        :param str status: The status of the job execution.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of job executions of a particular status.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the job execution.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetJobExecutionsStatusesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItemResult']):
        """
        :param Sequence['GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItemArgs'] items: A list of JobExecutionsSummary objects.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItemResult']:
        """
        A list of JobExecutionsSummary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetJobExecutionsStatusesJobExecutionsStatusSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 count: int,
                 status: str):
        """
        :param int count: The number of job executions of a particular status.
        :param str status: The status of the job execution.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        The number of job executions of a particular status.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the job execution.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetManagedDatabaseGroupManagedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 database_sub_type: str,
                 database_type: str,
                 deployment_type: str,
                 id: str,
                 name: str,
                 time_added: str,
                 workload_type: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str deployment_type: The infrastructure used to deploy the Oracle Database.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
        :param str name: The name of the Managed Database Group.
        :param str time_added: The date and time the Managed Database was added to the group.
        :param str workload_type: The workload type of the Autonomous Database.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_sub_type", database_sub_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_added", time_added)
        pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database resides.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> str:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        The infrastructure used to deploy the Oracle Database.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Managed Database Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> str:
        """
        The date and time the Managed Database was added to the group.
        """
        return pulumi.get(self, "time_added")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> str:
        """
        The workload type of the Autonomous Database.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetManagedDatabaseGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseGroupsManagedDatabaseGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 description: str,
                 id: str,
                 managed_databases: Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult'],
                 name: str,
                 state: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str description: The information specified by the user about the Managed Database Group.
        :param str id: The identifier of the resource. Only one of the parameters, id or name should be provided.
        :param Sequence['GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseArgs'] managed_databases: A list of Managed Databases in the Managed Database Group.
        :param str name: A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        :param str state: The lifecycle state of a resource.
        :param str time_created: The date and time the Managed Database Group was created.
        :param str time_updated: The date and time the Managed Database Group was last updated.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "managed_databases", managed_databases)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The information specified by the user about the Managed Database Group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the resource. Only one of the parameters, id or name should be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="managedDatabases")
    def managed_databases(self) -> Sequence['outputs.GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult']:
        """
        A list of Managed Databases in the Managed Database Group.
        """
        return pulumi.get(self, "managed_databases")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The lifecycle state of a resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the Managed Database Group was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the Managed Database Group was last updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetManagedDatabaseGroupsManagedDatabaseGroupCollectionItemManagedDatabaseResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 database_sub_type: str,
                 database_type: str,
                 deployment_type: str,
                 id: str,
                 name: str,
                 time_added: str,
                 workload_type: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str deployment_type: The infrastructure used to deploy the Oracle Database.
        :param str id: The identifier of the resource. Only one of the parameters, id or name should be provided.
        :param str name: A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        :param str time_added: The date and time the Managed Database was added to the group.
        :param str workload_type: The workload type of the Autonomous Database.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_sub_type", database_sub_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_added", time_added)
        pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> str:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        The infrastructure used to deploy the Oracle Database.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the resource. Only one of the parameters, id or name should be provided.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name. Only one of the parameters, id or name should be provided
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeAdded")
    def time_added(self) -> str:
        """
        The date and time the Managed Database was added to the group.
        """
        return pulumi.get(self, "time_added")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> str:
        """
        The workload type of the Autonomous Database.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetManagedDatabaseManagedDatabaseGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 name: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database Group.
        :param str name: The name of the Managed Database.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Managed Database Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Managed Database.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTaskItemResult(dict):
    def __init__(__self__, *,
                 days_to_expire: int,
                 description: str,
                 instance_id: int,
                 name: str,
                 owner: str,
                 recommendation_count: int,
                 sql_tuning_advisor_task_id: str,
                 task_status: str,
                 time_created: str,
                 time_execution_ended: str,
                 time_execution_started: str,
                 total_sql_statements: int):
        """
        :param int days_to_expire: The number of days left before the task expires. If the value equals -1, then the task has no expiration time (UNLIMITED).
        :param str description: The description of the SQL Tuning Advisor task.
        :param int instance_id: The instance ID of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str name: The optional query parameter to filter the SQL Tuning Advisor task list by name.
        :param str owner: The owner of the SQL Tuning Advisor task.
        :param int recommendation_count: The number of recommendations provided for the SQL Tuning Advisor task.
        :param str sql_tuning_advisor_task_id: The unique identifier of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str task_status: The status of the SQL Tuning Advisor task.
        :param str time_created: The Creation date of the SQL Tuning Advisor task.
        :param str time_execution_ended: The end time of the task execution.
        :param str time_execution_started: The start time of the task execution.
        :param int total_sql_statements: The total number of SQL statements related to the SQL Tuning Advisor task.
        """
        pulumi.set(__self__, "days_to_expire", days_to_expire)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "recommendation_count", recommendation_count)
        pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_execution_ended", time_execution_ended)
        pulumi.set(__self__, "time_execution_started", time_execution_started)
        pulumi.set(__self__, "total_sql_statements", total_sql_statements)

    @property
    @pulumi.getter(name="daysToExpire")
    def days_to_expire(self) -> int:
        """
        The number of days left before the task expires. If the value equals -1, then the task has no expiration time (UNLIMITED).
        """
        return pulumi.get(self, "days_to_expire")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> int:
        """
        The instance ID of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The optional query parameter to filter the SQL Tuning Advisor task list by name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The owner of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="recommendationCount")
    def recommendation_count(self) -> int:
        """
        The number of recommendations provided for the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "recommendation_count")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> str:
        """
        The unique identifier of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        """
        The status of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The Creation date of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExecutionEnded")
    def time_execution_ended(self) -> str:
        """
        The end time of the task execution.
        """
        return pulumi.get(self, "time_execution_ended")

    @property
    @pulumi.getter(name="timeExecutionStarted")
    def time_execution_started(self) -> str:
        """
        The start time of the task execution.
        """
        return pulumi.get(self, "time_execution_started")

    @property
    @pulumi.getter(name="totalSqlStatements")
    def total_sql_statements(self) -> int:
        """
        The total number of SQL statements related to the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "total_sql_statements")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisonModifiedResult(dict):
    def __init__(__self__, *,
                 plan_stats: Mapping[str, Any],
                 plan_status: str,
                 plan_type: str):
        """
        :param Mapping[str, Any] plan_stats: A map contains the statistics for the SQL execution using the plan. The key of the map is the metric's name. The value of the map is the metric's value.
        :param str plan_status: The status of the execution using the plan.
        :param str plan_type: The type of the original or modified plan with profile, index, and so on.
        """
        pulumi.set(__self__, "plan_stats", plan_stats)
        pulumi.set(__self__, "plan_status", plan_status)
        pulumi.set(__self__, "plan_type", plan_type)

    @property
    @pulumi.getter(name="planStats")
    def plan_stats(self) -> Mapping[str, Any]:
        """
        A map contains the statistics for the SQL execution using the plan. The key of the map is the metric's name. The value of the map is the metric's value.
        """
        return pulumi.get(self, "plan_stats")

    @property
    @pulumi.getter(name="planStatus")
    def plan_status(self) -> str:
        """
        The status of the execution using the plan.
        """
        return pulumi.get(self, "plan_status")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> str:
        """
        The type of the original or modified plan with profile, index, and so on.
        """
        return pulumi.get(self, "plan_type")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisonOriginalResult(dict):
    def __init__(__self__, *,
                 plan_stats: Mapping[str, Any],
                 plan_status: str,
                 plan_type: str):
        """
        :param Mapping[str, Any] plan_stats: A map contains the statistics for the SQL execution using the plan. The key of the map is the metric's name. The value of the map is the metric's value.
        :param str plan_status: The status of the execution using the plan.
        :param str plan_type: The type of the original or modified plan with profile, index, and so on.
        """
        pulumi.set(__self__, "plan_stats", plan_stats)
        pulumi.set(__self__, "plan_status", plan_status)
        pulumi.set(__self__, "plan_type", plan_type)

    @property
    @pulumi.getter(name="planStats")
    def plan_stats(self) -> Mapping[str, Any]:
        """
        A map contains the statistics for the SQL execution using the plan. The key of the map is the metric's name. The value of the map is the metric's value.
        """
        return pulumi.get(self, "plan_stats")

    @property
    @pulumi.getter(name="planStatus")
    def plan_status(self) -> str:
        """
        The status of the execution using the plan.
        """
        return pulumi.get(self, "plan_status")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> str:
        """
        The type of the original or modified plan with profile, index, and so on.
        """
        return pulumi.get(self, "plan_type")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The optional query parameter to filter the SQL Tuning Advisor task list by name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The optional query parameter to filter the SQL Tuning Advisor task list by name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFindingItemResult(dict):
    def __init__(__self__, *,
                 db_time_benefit: float,
                 is_alternative_plan_finding_present: bool,
                 is_error_finding_present: bool,
                 is_index_finding_present: bool,
                 is_miscellaneous_finding_present: bool,
                 is_restructure_sql_finding_present: bool,
                 is_sql_profile_finding_implemented: bool,
                 is_sql_profile_finding_present: bool,
                 is_stats_finding_present: bool,
                 is_timeout_finding_present: bool,
                 parsing_schema: str,
                 per_execution_percentage: int,
                 sql_key: str,
                 sql_text: str,
                 sql_tuning_advisor_task_id: str,
                 sql_tuning_advisor_task_object_execution_id: str,
                 sql_tuning_advisor_task_object_id: str):
        """
        :param float db_time_benefit: The time benefit (in seconds) for the highest-rated finding for this object.
        :param bool is_alternative_plan_finding_present: Indicates whether an alternative execution plan was reported for this SQL statement.
        :param bool is_error_finding_present: Indicates whether there is an error in this SQL statement.
        :param bool is_index_finding_present: Indicates whether an index recommendation was reported for this SQL statement.
        :param bool is_miscellaneous_finding_present: Indicates whether a miscellaneous finding was reported for this SQL statement.
        :param bool is_restructure_sql_finding_present: Indicates whether a restructure SQL recommendation was reported for this SQL statement.
        :param bool is_sql_profile_finding_implemented: Indicates whether a SQL Profile recommendation has been implemented for this SQL statement.
        :param bool is_sql_profile_finding_present: Indicates whether a SQL Profile recommendation was reported for this SQL statement.
        :param bool is_stats_finding_present: Indicates whether a statistics recommendation was reported for this SQL statement.
        :param bool is_timeout_finding_present: Indicates whether the task timed out.
        :param str parsing_schema: The parsing schema of the object.
        :param int per_execution_percentage: The per-execution percentage benefit.
        :param str sql_key: The unique key of this SQL statement.
        :param str sql_text: The text of the SQL statement.
        :param str sql_tuning_advisor_task_id: The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str sql_tuning_advisor_task_object_execution_id: The execution id of the analyzed SQL object. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str sql_tuning_advisor_task_object_id: The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        pulumi.set(__self__, "db_time_benefit", db_time_benefit)
        pulumi.set(__self__, "is_alternative_plan_finding_present", is_alternative_plan_finding_present)
        pulumi.set(__self__, "is_error_finding_present", is_error_finding_present)
        pulumi.set(__self__, "is_index_finding_present", is_index_finding_present)
        pulumi.set(__self__, "is_miscellaneous_finding_present", is_miscellaneous_finding_present)
        pulumi.set(__self__, "is_restructure_sql_finding_present", is_restructure_sql_finding_present)
        pulumi.set(__self__, "is_sql_profile_finding_implemented", is_sql_profile_finding_implemented)
        pulumi.set(__self__, "is_sql_profile_finding_present", is_sql_profile_finding_present)
        pulumi.set(__self__, "is_stats_finding_present", is_stats_finding_present)
        pulumi.set(__self__, "is_timeout_finding_present", is_timeout_finding_present)
        pulumi.set(__self__, "parsing_schema", parsing_schema)
        pulumi.set(__self__, "per_execution_percentage", per_execution_percentage)
        pulumi.set(__self__, "sql_key", sql_key)
        pulumi.set(__self__, "sql_text", sql_text)
        pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        pulumi.set(__self__, "sql_tuning_advisor_task_object_execution_id", sql_tuning_advisor_task_object_execution_id)
        pulumi.set(__self__, "sql_tuning_advisor_task_object_id", sql_tuning_advisor_task_object_id)

    @property
    @pulumi.getter(name="dbTimeBenefit")
    def db_time_benefit(self) -> float:
        """
        The time benefit (in seconds) for the highest-rated finding for this object.
        """
        return pulumi.get(self, "db_time_benefit")

    @property
    @pulumi.getter(name="isAlternativePlanFindingPresent")
    def is_alternative_plan_finding_present(self) -> bool:
        """
        Indicates whether an alternative execution plan was reported for this SQL statement.
        """
        return pulumi.get(self, "is_alternative_plan_finding_present")

    @property
    @pulumi.getter(name="isErrorFindingPresent")
    def is_error_finding_present(self) -> bool:
        """
        Indicates whether there is an error in this SQL statement.
        """
        return pulumi.get(self, "is_error_finding_present")

    @property
    @pulumi.getter(name="isIndexFindingPresent")
    def is_index_finding_present(self) -> bool:
        """
        Indicates whether an index recommendation was reported for this SQL statement.
        """
        return pulumi.get(self, "is_index_finding_present")

    @property
    @pulumi.getter(name="isMiscellaneousFindingPresent")
    def is_miscellaneous_finding_present(self) -> bool:
        """
        Indicates whether a miscellaneous finding was reported for this SQL statement.
        """
        return pulumi.get(self, "is_miscellaneous_finding_present")

    @property
    @pulumi.getter(name="isRestructureSqlFindingPresent")
    def is_restructure_sql_finding_present(self) -> bool:
        """
        Indicates whether a restructure SQL recommendation was reported for this SQL statement.
        """
        return pulumi.get(self, "is_restructure_sql_finding_present")

    @property
    @pulumi.getter(name="isSqlProfileFindingImplemented")
    def is_sql_profile_finding_implemented(self) -> bool:
        """
        Indicates whether a SQL Profile recommendation has been implemented for this SQL statement.
        """
        return pulumi.get(self, "is_sql_profile_finding_implemented")

    @property
    @pulumi.getter(name="isSqlProfileFindingPresent")
    def is_sql_profile_finding_present(self) -> bool:
        """
        Indicates whether a SQL Profile recommendation was reported for this SQL statement.
        """
        return pulumi.get(self, "is_sql_profile_finding_present")

    @property
    @pulumi.getter(name="isStatsFindingPresent")
    def is_stats_finding_present(self) -> bool:
        """
        Indicates whether a statistics recommendation was reported for this SQL statement.
        """
        return pulumi.get(self, "is_stats_finding_present")

    @property
    @pulumi.getter(name="isTimeoutFindingPresent")
    def is_timeout_finding_present(self) -> bool:
        """
        Indicates whether the task timed out.
        """
        return pulumi.get(self, "is_timeout_finding_present")

    @property
    @pulumi.getter(name="parsingSchema")
    def parsing_schema(self) -> str:
        """
        The parsing schema of the object.
        """
        return pulumi.get(self, "parsing_schema")

    @property
    @pulumi.getter(name="perExecutionPercentage")
    def per_execution_percentage(self) -> int:
        """
        The per-execution percentage benefit.
        """
        return pulumi.get(self, "per_execution_percentage")

    @property
    @pulumi.getter(name="sqlKey")
    def sql_key(self) -> str:
        """
        The unique key of this SQL statement.
        """
        return pulumi.get(self, "sql_key")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> str:
        """
        The text of the SQL statement.
        """
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> str:
        """
        The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectExecutionId")
    def sql_tuning_advisor_task_object_execution_id(self) -> str:
        """
        The execution id of the analyzed SQL object. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_object_execution_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectId")
    def sql_tuning_advisor_task_object_id(self) -> str:
        """
        The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_object_id")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFindingsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItemArgs'] items: An array of the findings for a tuning task.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItemResult']:
        """
        An array of the findings for a tuning task.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksFindingsSqlTuningAdvisorTaskFindingCollectionItemResult(dict):
    def __init__(__self__, *,
                 db_time_benefit: float,
                 is_alternative_plan_finding_present: bool,
                 is_error_finding_present: bool,
                 is_index_finding_present: bool,
                 is_miscellaneous_finding_present: bool,
                 is_restructure_sql_finding_present: bool,
                 is_sql_profile_finding_implemented: bool,
                 is_sql_profile_finding_present: bool,
                 is_stats_finding_present: bool,
                 is_timeout_finding_present: bool,
                 parsing_schema: str,
                 per_execution_percentage: int,
                 sql_key: str,
                 sql_text: str,
                 sql_tuning_advisor_task_id: str,
                 sql_tuning_advisor_task_object_execution_id: str,
                 sql_tuning_advisor_task_object_id: str):
        """
        :param float db_time_benefit: The time benefit (in seconds) for the highest-rated finding for this object.
        :param bool is_alternative_plan_finding_present: Indicates whether an alternative execution plan was reported for this SQL statement.
        :param bool is_error_finding_present: Indicates whether there is an error in this SQL statement.
        :param bool is_index_finding_present: Indicates whether an index recommendation was reported for this SQL statement.
        :param bool is_miscellaneous_finding_present: Indicates whether a miscellaneous finding was reported for this SQL statement.
        :param bool is_restructure_sql_finding_present: Indicates whether a restructure SQL recommendation was reported for this SQL statement.
        :param bool is_sql_profile_finding_implemented: Indicates whether a SQL Profile recommendation has been implemented for this SQL statement.
        :param bool is_sql_profile_finding_present: Indicates whether a SQL Profile recommendation was reported for this SQL statement.
        :param bool is_stats_finding_present: Indicates whether a statistics recommendation was reported for this SQL statement.
        :param bool is_timeout_finding_present: Indicates whether the task timed out.
        :param str parsing_schema: The parsing schema of the object.
        :param int per_execution_percentage: The per-execution percentage benefit.
        :param str sql_key: The unique key of this SQL statement.
        :param str sql_text: The text of the SQL statement.
        :param str sql_tuning_advisor_task_id: The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str sql_tuning_advisor_task_object_execution_id: The execution id of the analyzed SQL object. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str sql_tuning_advisor_task_object_id: The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        pulumi.set(__self__, "db_time_benefit", db_time_benefit)
        pulumi.set(__self__, "is_alternative_plan_finding_present", is_alternative_plan_finding_present)
        pulumi.set(__self__, "is_error_finding_present", is_error_finding_present)
        pulumi.set(__self__, "is_index_finding_present", is_index_finding_present)
        pulumi.set(__self__, "is_miscellaneous_finding_present", is_miscellaneous_finding_present)
        pulumi.set(__self__, "is_restructure_sql_finding_present", is_restructure_sql_finding_present)
        pulumi.set(__self__, "is_sql_profile_finding_implemented", is_sql_profile_finding_implemented)
        pulumi.set(__self__, "is_sql_profile_finding_present", is_sql_profile_finding_present)
        pulumi.set(__self__, "is_stats_finding_present", is_stats_finding_present)
        pulumi.set(__self__, "is_timeout_finding_present", is_timeout_finding_present)
        pulumi.set(__self__, "parsing_schema", parsing_schema)
        pulumi.set(__self__, "per_execution_percentage", per_execution_percentage)
        pulumi.set(__self__, "sql_key", sql_key)
        pulumi.set(__self__, "sql_text", sql_text)
        pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        pulumi.set(__self__, "sql_tuning_advisor_task_object_execution_id", sql_tuning_advisor_task_object_execution_id)
        pulumi.set(__self__, "sql_tuning_advisor_task_object_id", sql_tuning_advisor_task_object_id)

    @property
    @pulumi.getter(name="dbTimeBenefit")
    def db_time_benefit(self) -> float:
        """
        The time benefit (in seconds) for the highest-rated finding for this object.
        """
        return pulumi.get(self, "db_time_benefit")

    @property
    @pulumi.getter(name="isAlternativePlanFindingPresent")
    def is_alternative_plan_finding_present(self) -> bool:
        """
        Indicates whether an alternative execution plan was reported for this SQL statement.
        """
        return pulumi.get(self, "is_alternative_plan_finding_present")

    @property
    @pulumi.getter(name="isErrorFindingPresent")
    def is_error_finding_present(self) -> bool:
        """
        Indicates whether there is an error in this SQL statement.
        """
        return pulumi.get(self, "is_error_finding_present")

    @property
    @pulumi.getter(name="isIndexFindingPresent")
    def is_index_finding_present(self) -> bool:
        """
        Indicates whether an index recommendation was reported for this SQL statement.
        """
        return pulumi.get(self, "is_index_finding_present")

    @property
    @pulumi.getter(name="isMiscellaneousFindingPresent")
    def is_miscellaneous_finding_present(self) -> bool:
        """
        Indicates whether a miscellaneous finding was reported for this SQL statement.
        """
        return pulumi.get(self, "is_miscellaneous_finding_present")

    @property
    @pulumi.getter(name="isRestructureSqlFindingPresent")
    def is_restructure_sql_finding_present(self) -> bool:
        """
        Indicates whether a restructure SQL recommendation was reported for this SQL statement.
        """
        return pulumi.get(self, "is_restructure_sql_finding_present")

    @property
    @pulumi.getter(name="isSqlProfileFindingImplemented")
    def is_sql_profile_finding_implemented(self) -> bool:
        """
        Indicates whether a SQL Profile recommendation has been implemented for this SQL statement.
        """
        return pulumi.get(self, "is_sql_profile_finding_implemented")

    @property
    @pulumi.getter(name="isSqlProfileFindingPresent")
    def is_sql_profile_finding_present(self) -> bool:
        """
        Indicates whether a SQL Profile recommendation was reported for this SQL statement.
        """
        return pulumi.get(self, "is_sql_profile_finding_present")

    @property
    @pulumi.getter(name="isStatsFindingPresent")
    def is_stats_finding_present(self) -> bool:
        """
        Indicates whether a statistics recommendation was reported for this SQL statement.
        """
        return pulumi.get(self, "is_stats_finding_present")

    @property
    @pulumi.getter(name="isTimeoutFindingPresent")
    def is_timeout_finding_present(self) -> bool:
        """
        Indicates whether the task timed out.
        """
        return pulumi.get(self, "is_timeout_finding_present")

    @property
    @pulumi.getter(name="parsingSchema")
    def parsing_schema(self) -> str:
        """
        The parsing schema of the object.
        """
        return pulumi.get(self, "parsing_schema")

    @property
    @pulumi.getter(name="perExecutionPercentage")
    def per_execution_percentage(self) -> int:
        """
        The per-execution percentage benefit.
        """
        return pulumi.get(self, "per_execution_percentage")

    @property
    @pulumi.getter(name="sqlKey")
    def sql_key(self) -> str:
        """
        The unique key of this SQL statement.
        """
        return pulumi.get(self, "sql_key")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> str:
        """
        The text of the SQL statement.
        """
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> str:
        """
        The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectExecutionId")
    def sql_tuning_advisor_task_object_execution_id(self) -> str:
        """
        The execution id of the analyzed SQL object. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_object_execution_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectId")
    def sql_tuning_advisor_task_object_id(self) -> str:
        """
        The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_object_id")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationItemResult(dict):
    def __init__(__self__, *,
                 benefit: float,
                 finding: str,
                 implement_action_sql: str,
                 rationale: str,
                 recommendation: str,
                 recommendation_key: int,
                 recommendation_type: str,
                 sql_tuning_advisor_task_id: str,
                 sql_tuning_advisor_task_object_id: str):
        """
        :param float benefit: The percentage benefit of this implementation.
        :param str finding: Summary of the issue found in the SQL statement.
        :param str implement_action_sql: Action sql to be implemented based on the recommendation result.
        :param str rationale: Describes the reasoning behind the recommendation and how it relates to the finding.
        :param str recommendation: The recommendation for a specific finding.
        :param int recommendation_key: The unique identifier of the recommendation in the scope of the task.
        :param str recommendation_type: Type of recommendation.
        :param str sql_tuning_advisor_task_id: The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str sql_tuning_advisor_task_object_id: The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        pulumi.set(__self__, "benefit", benefit)
        pulumi.set(__self__, "finding", finding)
        pulumi.set(__self__, "implement_action_sql", implement_action_sql)
        pulumi.set(__self__, "rationale", rationale)
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "recommendation_key", recommendation_key)
        pulumi.set(__self__, "recommendation_type", recommendation_type)
        pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        pulumi.set(__self__, "sql_tuning_advisor_task_object_id", sql_tuning_advisor_task_object_id)

    @property
    @pulumi.getter
    def benefit(self) -> float:
        """
        The percentage benefit of this implementation.
        """
        return pulumi.get(self, "benefit")

    @property
    @pulumi.getter
    def finding(self) -> str:
        """
        Summary of the issue found in the SQL statement.
        """
        return pulumi.get(self, "finding")

    @property
    @pulumi.getter(name="implementActionSql")
    def implement_action_sql(self) -> str:
        """
        Action sql to be implemented based on the recommendation result.
        """
        return pulumi.get(self, "implement_action_sql")

    @property
    @pulumi.getter
    def rationale(self) -> str:
        """
        Describes the reasoning behind the recommendation and how it relates to the finding.
        """
        return pulumi.get(self, "rationale")

    @property
    @pulumi.getter
    def recommendation(self) -> str:
        """
        The recommendation for a specific finding.
        """
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="recommendationKey")
    def recommendation_key(self) -> int:
        """
        The unique identifier of the recommendation in the scope of the task.
        """
        return pulumi.get(self, "recommendation_key")

    @property
    @pulumi.getter(name="recommendationType")
    def recommendation_type(self) -> str:
        """
        Type of recommendation.
        """
        return pulumi.get(self, "recommendation_type")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> str:
        """
        The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectId")
    def sql_tuning_advisor_task_object_id(self) -> str:
        """
        The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_object_id")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItemArgs'] items: A list of SQL Tuning Advisor recommendations.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItemResult']:
        """
        A list of SQL Tuning Advisor recommendations.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksRecommendationsSqlTuningAdvisorTaskRecommendationCollectionItemResult(dict):
    def __init__(__self__, *,
                 benefit: float,
                 finding: str,
                 implement_action_sql: str,
                 rationale: str,
                 recommendation: str,
                 recommendation_key: int,
                 recommendation_type: str,
                 sql_tuning_advisor_task_id: str,
                 sql_tuning_advisor_task_object_id: str):
        """
        :param float benefit: The percentage benefit of this implementation.
        :param str finding: Summary of the issue found in the SQL statement.
        :param str implement_action_sql: Action sql to be implemented based on the recommendation result.
        :param str rationale: Describes the reasoning behind the recommendation and how it relates to the finding.
        :param str recommendation: The recommendation for a specific finding.
        :param int recommendation_key: The unique identifier of the recommendation in the scope of the task.
        :param str recommendation_type: Type of recommendation.
        :param str sql_tuning_advisor_task_id: The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str sql_tuning_advisor_task_object_id: The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        pulumi.set(__self__, "benefit", benefit)
        pulumi.set(__self__, "finding", finding)
        pulumi.set(__self__, "implement_action_sql", implement_action_sql)
        pulumi.set(__self__, "rationale", rationale)
        pulumi.set(__self__, "recommendation", recommendation)
        pulumi.set(__self__, "recommendation_key", recommendation_key)
        pulumi.set(__self__, "recommendation_type", recommendation_type)
        pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        pulumi.set(__self__, "sql_tuning_advisor_task_object_id", sql_tuning_advisor_task_object_id)

    @property
    @pulumi.getter
    def benefit(self) -> float:
        """
        The percentage benefit of this implementation.
        """
        return pulumi.get(self, "benefit")

    @property
    @pulumi.getter
    def finding(self) -> str:
        """
        Summary of the issue found in the SQL statement.
        """
        return pulumi.get(self, "finding")

    @property
    @pulumi.getter(name="implementActionSql")
    def implement_action_sql(self) -> str:
        """
        Action sql to be implemented based on the recommendation result.
        """
        return pulumi.get(self, "implement_action_sql")

    @property
    @pulumi.getter
    def rationale(self) -> str:
        """
        Describes the reasoning behind the recommendation and how it relates to the finding.
        """
        return pulumi.get(self, "rationale")

    @property
    @pulumi.getter
    def recommendation(self) -> str:
        """
        The recommendation for a specific finding.
        """
        return pulumi.get(self, "recommendation")

    @property
    @pulumi.getter(name="recommendationKey")
    def recommendation_key(self) -> int:
        """
        The unique identifier of the recommendation in the scope of the task.
        """
        return pulumi.get(self, "recommendation_key")

    @property
    @pulumi.getter(name="recommendationType")
    def recommendation_type(self) -> str:
        """
        Type of recommendation.
        """
        return pulumi.get(self, "recommendation_type")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> str:
        """
        The SQL tuning task identifier. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskObjectId")
    def sql_tuning_advisor_task_object_id(self) -> str:
        """
        The key of the object to which these recommendations apply. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_object_id")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanPlanResult(dict):
    def __init__(__self__, *,
                 access_predicates: str,
                 attribute: str,
                 bytes: str,
                 cardinality: str,
                 cost: float,
                 cpu_cost: float,
                 filter_predicates: str,
                 io_cost: float,
                 number_of_search_column: int,
                 object: str,
                 object_node: str,
                 object_owner: str,
                 object_position: int,
                 object_type: str,
                 operation: str,
                 optimizer_mode: str,
                 options: str,
                 other: str,
                 other_tag: str,
                 parent_step_id: int,
                 partition_id: int,
                 partition_start: str,
                 partition_stop: str,
                 plan_hash_value: str,
                 position: int,
                 remarks: str,
                 step_id: int,
                 temp_space: str,
                 time: str):
        """
        :param str access_predicates: The predicates used to locate rows in an access structure. For example, start or stop predicates for an index range scan.
        :param str attribute: The attribute of the SQL execution plan.
        :param str bytes: The number of bytes returned by the current operation.
        :param str cardinality: The number of rows returned by the current operation (estimated by the CBO).
        :param float cost: The cost of the current operation estimated by the cost-based optimizer (CBO).
        :param float cpu_cost: The CPU cost of the current operation.
        :param str filter_predicates: The predicates used to filter rows before producing them.
        :param float io_cost: The I/O cost of the current operation.
        :param int number_of_search_column: Number of index columns with start and stop keys (that is, the number of columns with matching predicates).
        :param str object: The name of the object.
        :param str object_node: The name of the database link used to reference the object.
        :param str object_owner: The owner of the object.
        :param int object_position: The numbered position of the object name in the original SQL statement.
        :param str object_type: The descriptive modifier that further describes the type of object.
        :param str operation: The name of the operation performed at this step.
        :param str optimizer_mode: The current mode of the optimizer, such as all_rows, first_rows_n (where n = 1, 10, 100, 1000, and so on).
        :param str options: The options used for the operation performed at this step.
        :param str other: Information about parallel execution servers and parallel queries
        :param str other_tag: Describes the function of the SQL text in the OTHER column.
        :param int parent_step_id: The ID of the next step that operates on the results of this step. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param int partition_id: The ID of the step in the execution plan that has computed the pair of values of partitionStart and partitionStop.
        :param str partition_start: A step may get data from a range of partitions of a partitioned object, such as table or index, based on predicates and sorting order. The partionStart is the starting partition of the range. The partitionStop is the ending partition of the range.
        :param str partition_stop: A step may get data from a range of partitions of a partitioned object, such as table or index, based on predicates and sorting order. The partionStart is the starting partition of the range. The partitionStop is the ending partition of the range.
        :param str plan_hash_value: The numerical representation of the SQL execution plan.
        :param int position: The order of processing for steps with the same parent ID.
        :param str remarks: The place for comments that can be added to the steps of the execution plan.
        :param int step_id: The identification number of a step in the SQL execution plan. This is unique within the SQL execution plan. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str temp_space: The temporary space usage (in bytes) of the operation (sort or hash-join) as estimated by the CBO.
        :param str time: The elapsed time (in seconds) of the operation as estimated by the CBO.
        """
        pulumi.set(__self__, "access_predicates", access_predicates)
        pulumi.set(__self__, "attribute", attribute)
        pulumi.set(__self__, "bytes", bytes)
        pulumi.set(__self__, "cardinality", cardinality)
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "cpu_cost", cpu_cost)
        pulumi.set(__self__, "filter_predicates", filter_predicates)
        pulumi.set(__self__, "io_cost", io_cost)
        pulumi.set(__self__, "number_of_search_column", number_of_search_column)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_node", object_node)
        pulumi.set(__self__, "object_owner", object_owner)
        pulumi.set(__self__, "object_position", object_position)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "optimizer_mode", optimizer_mode)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "other", other)
        pulumi.set(__self__, "other_tag", other_tag)
        pulumi.set(__self__, "parent_step_id", parent_step_id)
        pulumi.set(__self__, "partition_id", partition_id)
        pulumi.set(__self__, "partition_start", partition_start)
        pulumi.set(__self__, "partition_stop", partition_stop)
        pulumi.set(__self__, "plan_hash_value", plan_hash_value)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "step_id", step_id)
        pulumi.set(__self__, "temp_space", temp_space)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="accessPredicates")
    def access_predicates(self) -> str:
        """
        The predicates used to locate rows in an access structure. For example, start or stop predicates for an index range scan.
        """
        return pulumi.get(self, "access_predicates")

    @property
    @pulumi.getter
    def attribute(self) -> str:
        """
        The attribute of the SQL execution plan.
        """
        return pulumi.get(self, "attribute")

    @property
    @pulumi.getter
    def bytes(self) -> str:
        """
        The number of bytes returned by the current operation.
        """
        return pulumi.get(self, "bytes")

    @property
    @pulumi.getter
    def cardinality(self) -> str:
        """
        The number of rows returned by the current operation (estimated by the CBO).
        """
        return pulumi.get(self, "cardinality")

    @property
    @pulumi.getter
    def cost(self) -> float:
        """
        The cost of the current operation estimated by the cost-based optimizer (CBO).
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="cpuCost")
    def cpu_cost(self) -> float:
        """
        The CPU cost of the current operation.
        """
        return pulumi.get(self, "cpu_cost")

    @property
    @pulumi.getter(name="filterPredicates")
    def filter_predicates(self) -> str:
        """
        The predicates used to filter rows before producing them.
        """
        return pulumi.get(self, "filter_predicates")

    @property
    @pulumi.getter(name="ioCost")
    def io_cost(self) -> float:
        """
        The I/O cost of the current operation.
        """
        return pulumi.get(self, "io_cost")

    @property
    @pulumi.getter(name="numberOfSearchColumn")
    def number_of_search_column(self) -> int:
        """
        Number of index columns with start and stop keys (that is, the number of columns with matching predicates).
        """
        return pulumi.get(self, "number_of_search_column")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The name of the object.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectNode")
    def object_node(self) -> str:
        """
        The name of the database link used to reference the object.
        """
        return pulumi.get(self, "object_node")

    @property
    @pulumi.getter(name="objectOwner")
    def object_owner(self) -> str:
        """
        The owner of the object.
        """
        return pulumi.get(self, "object_owner")

    @property
    @pulumi.getter(name="objectPosition")
    def object_position(self) -> int:
        """
        The numbered position of the object name in the original SQL statement.
        """
        return pulumi.get(self, "object_position")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        The descriptive modifier that further describes the type of object.
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        The name of the operation performed at this step.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="optimizerMode")
    def optimizer_mode(self) -> str:
        """
        The current mode of the optimizer, such as all_rows, first_rows_n (where n = 1, 10, 100, 1000, and so on).
        """
        return pulumi.get(self, "optimizer_mode")

    @property
    @pulumi.getter
    def options(self) -> str:
        """
        The options used for the operation performed at this step.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def other(self) -> str:
        """
        Information about parallel execution servers and parallel queries
        """
        return pulumi.get(self, "other")

    @property
    @pulumi.getter(name="otherTag")
    def other_tag(self) -> str:
        """
        Describes the function of the SQL text in the OTHER column.
        """
        return pulumi.get(self, "other_tag")

    @property
    @pulumi.getter(name="parentStepId")
    def parent_step_id(self) -> int:
        """
        The ID of the next step that operates on the results of this step. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "parent_step_id")

    @property
    @pulumi.getter(name="partitionId")
    def partition_id(self) -> int:
        """
        The ID of the step in the execution plan that has computed the pair of values of partitionStart and partitionStop.
        """
        return pulumi.get(self, "partition_id")

    @property
    @pulumi.getter(name="partitionStart")
    def partition_start(self) -> str:
        """
        A step may get data from a range of partitions of a partitioned object, such as table or index, based on predicates and sorting order. The partionStart is the starting partition of the range. The partitionStop is the ending partition of the range.
        """
        return pulumi.get(self, "partition_start")

    @property
    @pulumi.getter(name="partitionStop")
    def partition_stop(self) -> str:
        """
        A step may get data from a range of partitions of a partitioned object, such as table or index, based on predicates and sorting order. The partionStart is the starting partition of the range. The partitionStop is the ending partition of the range.
        """
        return pulumi.get(self, "partition_stop")

    @property
    @pulumi.getter(name="planHashValue")
    def plan_hash_value(self) -> str:
        """
        The numerical representation of the SQL execution plan.
        """
        return pulumi.get(self, "plan_hash_value")

    @property
    @pulumi.getter
    def position(self) -> int:
        """
        The order of processing for steps with the same parent ID.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def remarks(self) -> str:
        """
        The place for comments that can be added to the steps of the execution plan.
        """
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> int:
        """
        The identification number of a step in the SQL execution plan. This is unique within the SQL execution plan. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="tempSpace")
    def temp_space(self) -> str:
        """
        The temporary space usage (in bytes) of the operation (sort or hash-join) as estimated by the CBO.
        """
        return pulumi.get(self, "temp_space")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        The elapsed time (in seconds) of the operation as estimated by the CBO.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItemArgs'] items: A list of SQL Tuning Advisor tasks.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItemResult']:
        """
        A list of SQL Tuning Advisor tasks.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSqlTuningAdvisorTaskCollectionItemResult(dict):
    def __init__(__self__, *,
                 days_to_expire: int,
                 description: str,
                 instance_id: int,
                 name: str,
                 owner: str,
                 recommendation_count: int,
                 sql_tuning_advisor_task_id: str,
                 task_status: str,
                 time_created: str,
                 time_execution_ended: str,
                 time_execution_started: str,
                 total_sql_statements: int):
        """
        :param int days_to_expire: The number of days left before the task expires. If the value equals -1, then the task has no expiration time (UNLIMITED).
        :param str description: The description of the SQL Tuning Advisor task.
        :param int instance_id: The instance ID of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str name: The optional query parameter to filter the SQL Tuning Advisor task list by name.
        :param str owner: The owner of the SQL Tuning Advisor task.
        :param int recommendation_count: The number of recommendations provided for the SQL Tuning Advisor task.
        :param str sql_tuning_advisor_task_id: The unique identifier of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str task_status: The status of the SQL Tuning Advisor task.
        :param str time_created: The Creation date of the SQL Tuning Advisor task.
        :param str time_execution_ended: The end time of the task execution.
        :param str time_execution_started: The start time of the task execution.
        :param int total_sql_statements: The total number of SQL statements related to the SQL Tuning Advisor task.
        """
        pulumi.set(__self__, "days_to_expire", days_to_expire)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "recommendation_count", recommendation_count)
        pulumi.set(__self__, "sql_tuning_advisor_task_id", sql_tuning_advisor_task_id)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_execution_ended", time_execution_ended)
        pulumi.set(__self__, "time_execution_started", time_execution_started)
        pulumi.set(__self__, "total_sql_statements", total_sql_statements)

    @property
    @pulumi.getter(name="daysToExpire")
    def days_to_expire(self) -> int:
        """
        The number of days left before the task expires. If the value equals -1, then the task has no expiration time (UNLIMITED).
        """
        return pulumi.get(self, "days_to_expire")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> int:
        """
        The instance ID of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The optional query parameter to filter the SQL Tuning Advisor task list by name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The owner of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="recommendationCount")
    def recommendation_count(self) -> int:
        """
        The number of recommendations provided for the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "recommendation_count")

    @property
    @pulumi.getter(name="sqlTuningAdvisorTaskId")
    def sql_tuning_advisor_task_id(self) -> str:
        """
        The unique identifier of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "sql_tuning_advisor_task_id")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        """
        The status of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The Creation date of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExecutionEnded")
    def time_execution_ended(self) -> str:
        """
        The end time of the task execution.
        """
        return pulumi.get(self, "time_execution_ended")

    @property
    @pulumi.getter(name="timeExecutionStarted")
    def time_execution_started(self) -> str:
        """
        The start time of the task execution.
        """
        return pulumi.get(self, "time_execution_started")

    @property
    @pulumi.getter(name="totalSqlStatements")
    def total_sql_statements(self) -> int:
        """
        The total number of SQL statements related to the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "total_sql_statements")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportIndexFindingResult(dict):
    def __init__(__self__, *,
                 index_columns: Sequence[str],
                 index_hash_value: str,
                 index_name: str,
                 reference_count: int,
                 schema: str,
                 table_name: str):
        """
        :param Sequence[str] index_columns: Columns of the index.
        :param str index_hash_value: Numerical representation of the index.
        :param str index_name: Name of the index.
        :param int reference_count: The number of the times the object is referenced within the SQL Tuning advisor task findings.
        :param str schema: Schema of the object.
        :param str table_name: Table's name related to the index.
        """
        pulumi.set(__self__, "index_columns", index_columns)
        pulumi.set(__self__, "index_hash_value", index_hash_value)
        pulumi.set(__self__, "index_name", index_name)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="indexColumns")
    def index_columns(self) -> Sequence[str]:
        """
        Columns of the index.
        """
        return pulumi.get(self, "index_columns")

    @property
    @pulumi.getter(name="indexHashValue")
    def index_hash_value(self) -> str:
        """
        Numerical representation of the index.
        """
        return pulumi.get(self, "index_hash_value")

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> str:
        """
        Name of the index.
        """
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        """
        The number of the times the object is referenced within the SQL Tuning advisor task findings.
        """
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter
    def schema(self) -> str:
        """
        Schema of the object.
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        Table's name related to the index.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportObjectStatFindingResult(dict):
    def __init__(__self__, *,
                 object: str,
                 object_hash_value: str,
                 object_type: str,
                 problem_type: str,
                 reference_count: int,
                 schema: str):
        """
        :param str object: Name of the object.
        :param str object_hash_value: Numerical representation of the object.
        :param str object_type: Type of the object.
        :param str problem_type: Type of statistics problem related to the object.
        :param int reference_count: The number of the times the object is referenced within the SQL Tuning advisor task findings.
        :param str schema: Schema of the object.
        """
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_hash_value", object_hash_value)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "problem_type", problem_type)
        pulumi.set(__self__, "reference_count", reference_count)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        Name of the object.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectHashValue")
    def object_hash_value(self) -> str:
        """
        Numerical representation of the object.
        """
        return pulumi.get(self, "object_hash_value")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        Type of the object.
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="problemType")
    def problem_type(self) -> str:
        """
        Type of statistics problem related to the object.
        """
        return pulumi.get(self, "problem_type")

    @property
    @pulumi.getter(name="referenceCount")
    def reference_count(self) -> int:
        """
        The number of the times the object is referenced within the SQL Tuning advisor task findings.
        """
        return pulumi.get(self, "reference_count")

    @property
    @pulumi.getter
    def schema(self) -> str:
        """
        Schema of the object.
        """
        return pulumi.get(self, "schema")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticResult(dict):
    def __init__(__self__, *,
                 finding_benefits: Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefitResult'],
                 finding_counts: Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCountResult'],
                 statement_counts: Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCountResult']):
        """
        :param Sequence['GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefitArgs'] finding_benefits: The benefits of the findings in the SQL Tuning Advisor summary report.
        :param Sequence['GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCountArgs'] finding_counts: The number of findings in the SQL Tuning Advisor summary report.
        :param Sequence['GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCountArgs'] statement_counts: The number of statements in the SQL Tuning Advisor summary report.
        """
        pulumi.set(__self__, "finding_benefits", finding_benefits)
        pulumi.set(__self__, "finding_counts", finding_counts)
        pulumi.set(__self__, "statement_counts", statement_counts)

    @property
    @pulumi.getter(name="findingBenefits")
    def finding_benefits(self) -> Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefitResult']:
        """
        The benefits of the findings in the SQL Tuning Advisor summary report.
        """
        return pulumi.get(self, "finding_benefits")

    @property
    @pulumi.getter(name="findingCounts")
    def finding_counts(self) -> Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCountResult']:
        """
        The number of findings in the SQL Tuning Advisor summary report.
        """
        return pulumi.get(self, "finding_counts")

    @property
    @pulumi.getter(name="statementCounts")
    def statement_counts(self) -> Sequence['outputs.GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCountResult']:
        """
        The number of statements in the SQL Tuning Advisor summary report.
        """
        return pulumi.get(self, "statement_counts")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingBenefitResult(dict):
    def __init__(__self__, *,
                 db_time_after_implemented: int,
                 db_time_after_recommended: int,
                 db_time_before_implemented: int,
                 db_time_before_recommended: int):
        """
        :param int db_time_after_implemented: The actual database time of the SQL statements for which SQL Tuning Advisor recommendations are implemented.
        :param int db_time_after_recommended: The estimated database time of the above SQL statements, if SQL Tuning Advisor recommendations are implemented.
        :param int db_time_before_implemented: The actual database time of the above SQL statements, before SQL Tuning Advisor recommendations are implemented.
        :param int db_time_before_recommended: The actual database time of the SQL statements for which SQL Tuning Advisor recommendations are not implemented.
        """
        pulumi.set(__self__, "db_time_after_implemented", db_time_after_implemented)
        pulumi.set(__self__, "db_time_after_recommended", db_time_after_recommended)
        pulumi.set(__self__, "db_time_before_implemented", db_time_before_implemented)
        pulumi.set(__self__, "db_time_before_recommended", db_time_before_recommended)

    @property
    @pulumi.getter(name="dbTimeAfterImplemented")
    def db_time_after_implemented(self) -> int:
        """
        The actual database time of the SQL statements for which SQL Tuning Advisor recommendations are implemented.
        """
        return pulumi.get(self, "db_time_after_implemented")

    @property
    @pulumi.getter(name="dbTimeAfterRecommended")
    def db_time_after_recommended(self) -> int:
        """
        The estimated database time of the above SQL statements, if SQL Tuning Advisor recommendations are implemented.
        """
        return pulumi.get(self, "db_time_after_recommended")

    @property
    @pulumi.getter(name="dbTimeBeforeImplemented")
    def db_time_before_implemented(self) -> int:
        """
        The actual database time of the above SQL statements, before SQL Tuning Advisor recommendations are implemented.
        """
        return pulumi.get(self, "db_time_before_implemented")

    @property
    @pulumi.getter(name="dbTimeBeforeRecommended")
    def db_time_before_recommended(self) -> int:
        """
        The actual database time of the SQL statements for which SQL Tuning Advisor recommendations are not implemented.
        """
        return pulumi.get(self, "db_time_before_recommended")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticFindingCountResult(dict):
    def __init__(__self__, *,
                 alternate_plan: int,
                 implemented_sql_profile: int,
                 index: int,
                 recommended_sql_profile: int,
                 restructure: int,
                 statistics: int):
        """
        :param int alternate_plan: The number of distinct SQL statements with alternative plan recommendations.
        :param int implemented_sql_profile: The number of distinct SQL statements with implemented SQL profiles.
        :param int index: The number of distinct SQL statements with index recommendations.
        :param int recommended_sql_profile: The number of distinct SQL statements with recommended SQL profiles.
        :param int restructure: The number of distinct SQL statements with restructured SQL recommendations.
        :param int statistics: The number of distinct SQL statements with stale or missing optimizer statistics recommendations.
        """
        pulumi.set(__self__, "alternate_plan", alternate_plan)
        pulumi.set(__self__, "implemented_sql_profile", implemented_sql_profile)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "recommended_sql_profile", recommended_sql_profile)
        pulumi.set(__self__, "restructure", restructure)
        pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter(name="alternatePlan")
    def alternate_plan(self) -> int:
        """
        The number of distinct SQL statements with alternative plan recommendations.
        """
        return pulumi.get(self, "alternate_plan")

    @property
    @pulumi.getter(name="implementedSqlProfile")
    def implemented_sql_profile(self) -> int:
        """
        The number of distinct SQL statements with implemented SQL profiles.
        """
        return pulumi.get(self, "implemented_sql_profile")

    @property
    @pulumi.getter
    def index(self) -> int:
        """
        The number of distinct SQL statements with index recommendations.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="recommendedSqlProfile")
    def recommended_sql_profile(self) -> int:
        """
        The number of distinct SQL statements with recommended SQL profiles.
        """
        return pulumi.get(self, "recommended_sql_profile")

    @property
    @pulumi.getter
    def restructure(self) -> int:
        """
        The number of distinct SQL statements with restructured SQL recommendations.
        """
        return pulumi.get(self, "restructure")

    @property
    @pulumi.getter
    def statistics(self) -> int:
        """
        The number of distinct SQL statements with stale or missing optimizer statistics recommendations.
        """
        return pulumi.get(self, "statistics")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportStatisticStatementCountResult(dict):
    def __init__(__self__, *,
                 distinct_sql: int,
                 error_count: int,
                 finding_count: int,
                 total_sql: int):
        """
        :param int distinct_sql: The number of distinct SQL statements.
        :param int error_count: The number of distinct SQL statements with errors.
        :param int finding_count: The number of distinct SQL statements with findings.
        :param int total_sql: The total number of SQL statements.
        """
        pulumi.set(__self__, "distinct_sql", distinct_sql)
        pulumi.set(__self__, "error_count", error_count)
        pulumi.set(__self__, "finding_count", finding_count)
        pulumi.set(__self__, "total_sql", total_sql)

    @property
    @pulumi.getter(name="distinctSql")
    def distinct_sql(self) -> int:
        """
        The number of distinct SQL statements.
        """
        return pulumi.get(self, "distinct_sql")

    @property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> int:
        """
        The number of distinct SQL statements with errors.
        """
        return pulumi.get(self, "error_count")

    @property
    @pulumi.getter(name="findingCount")
    def finding_count(self) -> int:
        """
        The number of distinct SQL statements with findings.
        """
        return pulumi.get(self, "finding_count")

    @property
    @pulumi.getter(name="totalSql")
    def total_sql(self) -> int:
        """
        The total number of SQL statements.
        """
        return pulumi.get(self, "total_sql")


@pulumi.output_type
class GetManagedDatabaseSqlTuningAdvisorTasksSummaryReportTaskInfoResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 name: str,
                 owner: str,
                 running_time: int,
                 status: str,
                 time_ended: str,
                 time_started: str):
        """
        :param str description: The description of the SQL Tuning Advisor task. This is not defined for Auto SQL Tuning tasks.
        :param str id: The ID of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        :param str name: The name of the SQL Tuning Advisor task.
        :param str owner: The owner of the SQL Tuning Advisor task.
        :param int running_time: The total running time in seconds. This is not defined for Auto SQL Tuning tasks.
        :param str status: The status of the SQL Tuning Advisor task. This is not defined for Auto SQL Tuning tasks.
        :param str time_ended: The end time of the task execution.
        :param str time_started: The start time of the task execution.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "running_time", running_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the SQL Tuning Advisor task. This is not defined for Auto SQL Tuning tasks.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the SQL Tuning Advisor task. This is not the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The owner of the SQL Tuning Advisor task.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="runningTime")
    def running_time(self) -> int:
        """
        The total running time in seconds. This is not defined for Auto SQL Tuning tasks.
        """
        return pulumi.get(self, "running_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the SQL Tuning Advisor task. This is not defined for Auto SQL Tuning tasks.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> str:
        """
        The end time of the task execution.
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The start time of the task execution.
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetManagedDatabaseUserConsumerGroupPrivilegeItemResult(dict):
    def __init__(__self__, *,
                 grant_option: str,
                 initial_group: str,
                 name: str):
        """
        :param str grant_option: Indicates whether the privilege is granted with the GRANT option (YES) or not (NO).
        :param str initial_group: Indicates whether the consumer group is designated as the default for this user or role (YES) or not (NO).
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "grant_option", grant_option)
        pulumi.set(__self__, "initial_group", initial_group)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> str:
        """
        Indicates whether the privilege is granted with the GRANT option (YES) or not (NO).
        """
        return pulumi.get(self, "grant_option")

    @property
    @pulumi.getter(name="initialGroup")
    def initial_group(self) -> str:
        """
        Indicates whether the consumer group is designated as the default for this user or role (YES) or not (NO).
        """
        return pulumi.get(self, "initial_group")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItemArgs'] items: An array of consumer group privileges.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItemResult']:
        """
        An array of consumer group privileges.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserConsumerGroupPrivilegesConsumerGroupPrivilegeCollectionItemResult(dict):
    def __init__(__self__, *,
                 grant_option: str,
                 initial_group: str,
                 name: str):
        """
        :param str grant_option: Indicates whether the privilege is granted with the GRANT option (YES) or not (NO).
        :param str initial_group: Indicates whether the consumer group is designated as the default for this user or role (YES) or not (NO).
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "grant_option", grant_option)
        pulumi.set(__self__, "initial_group", initial_group)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> str:
        """
        Indicates whether the privilege is granted with the GRANT option (YES) or not (NO).
        """
        return pulumi.get(self, "grant_option")

    @property
    @pulumi.getter(name="initialGroup")
    def initial_group(self) -> str:
        """
        Indicates whether the consumer group is designated as the default for this user or role (YES) or not (NO).
        """
        return pulumi.get(self, "initial_group")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserConsumerGroupPrivilegesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserDataAccessContainerItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItemArgs'] items: An array of container resources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItemResult']:
        """
        An array of container resources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserDataAccessContainersDataAccessContainerCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserDataAccessContainersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserObjectPrivilegeItemResult(dict):
    def __init__(__self__, *,
                 common: str,
                 grant_option: str,
                 grantor: str,
                 hierarchy: str,
                 inherited: str,
                 name: str,
                 object: str,
                 owner: str,
                 schema_type: str):
        """
        :param str common: Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
        :param str grant_option: Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
        :param str grantor: The name of the user who granted the object privilege.
        :param str hierarchy: Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
        :param str inherited: Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
        :param str name: A filter to return only resources that match the entire name.
        :param str object: The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
        :param str owner: The owner of the object.
        :param str schema_type: The type of object.
        """
        pulumi.set(__self__, "common", common)
        pulumi.set(__self__, "grant_option", grant_option)
        pulumi.set(__self__, "grantor", grantor)
        pulumi.set(__self__, "hierarchy", hierarchy)
        pulumi.set(__self__, "inherited", inherited)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema_type", schema_type)

    @property
    @pulumi.getter
    def common(self) -> str:
        """
        Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
        """
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> str:
        """
        Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
        """
        return pulumi.get(self, "grant_option")

    @property
    @pulumi.getter
    def grantor(self) -> str:
        """
        The name of the user who granted the object privilege.
        """
        return pulumi.get(self, "grantor")

    @property
    @pulumi.getter
    def hierarchy(self) -> str:
        """
        Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
        """
        return pulumi.get(self, "hierarchy")

    @property
    @pulumi.getter
    def inherited(self) -> str:
        """
        Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
        """
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The owner of the object.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaType")
    def schema_type(self) -> str:
        """
        The type of object.
        """
        return pulumi.get(self, "schema_type")


@pulumi.output_type
class GetManagedDatabaseUserObjectPrivilegesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItemArgs'] items: An array of object privileges.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItemResult']:
        """
        An array of object privileges.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserObjectPrivilegesObjectPrivilegeCollectionItemResult(dict):
    def __init__(__self__, *,
                 common: str,
                 grant_option: str,
                 grantor: str,
                 hierarchy: str,
                 inherited: str,
                 name: str,
                 object: str,
                 owner: str,
                 schema_type: str):
        """
        :param str common: Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
        :param str grant_option: Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
        :param str grantor: The name of the user who granted the object privilege.
        :param str hierarchy: Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
        :param str inherited: Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
        :param str name: A filter to return only resources that match the entire name.
        :param str object: The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
        :param str owner: The owner of the object.
        :param str schema_type: The type of object.
        """
        pulumi.set(__self__, "common", common)
        pulumi.set(__self__, "grant_option", grant_option)
        pulumi.set(__self__, "grantor", grantor)
        pulumi.set(__self__, "hierarchy", hierarchy)
        pulumi.set(__self__, "inherited", inherited)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema_type", schema_type)

    @property
    @pulumi.getter
    def common(self) -> str:
        """
        Indicates how the object privilege was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
        """
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="grantOption")
    def grant_option(self) -> str:
        """
        Indicates whether the privilege is granted with the GRANT OPTION (YES) or not (NO).
        """
        return pulumi.get(self, "grant_option")

    @property
    @pulumi.getter
    def grantor(self) -> str:
        """
        The name of the user who granted the object privilege.
        """
        return pulumi.get(self, "grantor")

    @property
    @pulumi.getter
    def hierarchy(self) -> str:
        """
        Indicates whether the privilege is granted with the HIERARCHY OPTION (YES) or not (NO).
        """
        return pulumi.get(self, "hierarchy")

    @property
    @pulumi.getter
    def inherited(self) -> str:
        """
        Indicates whether the granted privilege is inherited from another container (YES) or not (NO).
        """
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The name of the object. The object can be any object, including tables, packages, indexes, sequences, and so on.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> str:
        """
        The owner of the object.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="schemaType")
    def schema_type(self) -> str:
        """
        The type of object.
        """
        return pulumi.get(self, "schema_type")


@pulumi.output_type
class GetManagedDatabaseUserProxiedForUserItemResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 flags: str,
                 name: str):
        """
        :param str authentication: Indicates whether the proxy is required to supply the client credentials (YES) or not (NO).
        :param str flags: The flags associated with the proxy/client pair.
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Indicates whether the proxy is required to supply the client credentials (YES) or not (NO).
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def flags(self) -> str:
        """
        The flags associated with the proxy/client pair.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserProxiedForUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItemArgs'] items: An array of user resources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItemResult']:
        """
        An array of user resources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserProxiedForUsersProxiedForUserCollectionItemResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 flags: str,
                 name: str):
        """
        :param str authentication: Indicates whether the proxy is required to supply the client credentials (YES) or not (NO).
        :param str flags: The flags associated with the proxy/client pair.
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Indicates whether the proxy is required to supply the client credentials (YES) or not (NO).
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def flags(self) -> str:
        """
        The flags associated with the proxy/client pair.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserRoleItemResult(dict):
    def __init__(__self__, *,
                 admin_option: str,
                 common: str,
                 default_role: str,
                 delegate_option: str,
                 inherited: str,
                 name: str):
        """
        :param str admin_option: Indicates whether the role is granted with the ADMIN OPTION (YES) or not (NO).
        :param str common: Indicates how the role was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
        :param str default_role: Indicates whether the role is designated as a DEFAULT ROLE for the user (YES) or not (NO).
        :param str delegate_option: Indicates whether the role is granted with the DELEGATE OPTION (YES) or not (NO).
        :param str inherited: Indicates whether the granted role is inherited from another container (YES) or not (NO).
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "admin_option", admin_option)
        pulumi.set(__self__, "common", common)
        pulumi.set(__self__, "default_role", default_role)
        pulumi.set(__self__, "delegate_option", delegate_option)
        pulumi.set(__self__, "inherited", inherited)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="adminOption")
    def admin_option(self) -> str:
        """
        Indicates whether the role is granted with the ADMIN OPTION (YES) or not (NO).
        """
        return pulumi.get(self, "admin_option")

    @property
    @pulumi.getter
    def common(self) -> str:
        """
        Indicates how the role was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
        """
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> str:
        """
        Indicates whether the role is designated as a DEFAULT ROLE for the user (YES) or not (NO).
        """
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="delegateOption")
    def delegate_option(self) -> str:
        """
        Indicates whether the role is granted with the DELEGATE OPTION (YES) or not (NO).
        """
        return pulumi.get(self, "delegate_option")

    @property
    @pulumi.getter
    def inherited(self) -> str:
        """
        Indicates whether the granted role is inherited from another container (YES) or not (NO).
        """
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUserRolesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUserRolesRoleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseUserRolesRoleCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabaseUserRolesRoleCollectionItemArgs'] items: An array of roles.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseUserRolesRoleCollectionItemResult']:
        """
        An array of roles.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUserRolesRoleCollectionItemResult(dict):
    def __init__(__self__, *,
                 admin_option: str,
                 common: str,
                 default_role: str,
                 delegate_option: str,
                 inherited: str,
                 name: str):
        """
        :param str admin_option: Indicates whether the role is granted with the ADMIN OPTION (YES) or not (NO).
        :param str common: Indicates how the role was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
        :param str default_role: Indicates whether the role is designated as a DEFAULT ROLE for the user (YES) or not (NO).
        :param str delegate_option: Indicates whether the role is granted with the DELEGATE OPTION (YES) or not (NO).
        :param str inherited: Indicates whether the granted role is inherited from another container (YES) or not (NO).
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "admin_option", admin_option)
        pulumi.set(__self__, "common", common)
        pulumi.set(__self__, "default_role", default_role)
        pulumi.set(__self__, "delegate_option", delegate_option)
        pulumi.set(__self__, "inherited", inherited)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="adminOption")
    def admin_option(self) -> str:
        """
        Indicates whether the role is granted with the ADMIN OPTION (YES) or not (NO).
        """
        return pulumi.get(self, "admin_option")

    @property
    @pulumi.getter
    def common(self) -> str:
        """
        Indicates how the role was granted. Possible values: YES if the role is granted commonly (CONTAINER=ALL is used) NO if the role is granted locally (CONTAINER=ALL is not used)
        """
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="defaultRole")
    def default_role(self) -> str:
        """
        Indicates whether the role is designated as a DEFAULT ROLE for the user (YES) or not (NO).
        """
        return pulumi.get(self, "default_role")

    @property
    @pulumi.getter(name="delegateOption")
    def delegate_option(self) -> str:
        """
        Indicates whether the role is granted with the DELEGATE OPTION (YES) or not (NO).
        """
        return pulumi.get(self, "delegate_option")

    @property
    @pulumi.getter
    def inherited(self) -> str:
        """
        Indicates whether the granted role is inherited from another container (YES) or not (NO).
        """
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabaseUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabaseUsersUserCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabaseUsersUserCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabaseUsersUserCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabaseUsersUserCollectionItemResult(dict):
    def __init__(__self__, *,
                 all_shared: str,
                 authentication: str,
                 common: str,
                 consumer_group: str,
                 default_collation: str,
                 default_tablespace: str,
                 editions_enabled: str,
                 external_name: str,
                 external_shared: str,
                 implicit: str,
                 inherited: str,
                 local_temp_tablespace: str,
                 name: str,
                 oracle_maintained: str,
                 password_versions: str,
                 profile: str,
                 proxy_connect: str,
                 status: str,
                 temp_tablespace: str,
                 time_created: str,
                 time_expiring: str,
                 time_last_login: str,
                 time_locked: str,
                 time_password_changed: str):
        """
        :param str all_shared: In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
        :param str authentication: The authentication mechanism for the user.
        :param str common: Indicates whether a given user is common(Y) or local(N).
        :param str consumer_group: The initial resource consumer group for the User.
        :param str default_collation: The default collation for the user schema.
        :param str default_tablespace: The default tablespace for data.
        :param str editions_enabled: Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
        :param str external_name: The external name of the user.
        :param str external_shared: In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
        :param str implicit: Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
        :param str inherited: Indicates whether the user definition is inherited from another container (YES) or not (NO).
        :param str local_temp_tablespace: The default local temporary tablespace for the user.
        :param str name: A filter to return only resources that match the entire name.
        :param str oracle_maintained: Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
        :param str password_versions: The list of existing versions of the password hashes (also known as "verifiers") for the account.
        :param str profile: The User resource profile name.
        :param str proxy_connect: Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the "connect through" privilege for this account).
        :param str status: The status of the user account.
        :param str temp_tablespace: The name of the default tablespace for temporary tables or the name of a tablespace group.
        :param str time_created: The date and time the user was created.
        :param str time_expiring: The date and time of the expiration of the user account.
        :param str time_last_login: The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
        :param str time_locked: The date the account was locked if account status was LOCKED.
        :param str time_password_changed: The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
        """
        pulumi.set(__self__, "all_shared", all_shared)
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "common", common)
        pulumi.set(__self__, "consumer_group", consumer_group)
        pulumi.set(__self__, "default_collation", default_collation)
        pulumi.set(__self__, "default_tablespace", default_tablespace)
        pulumi.set(__self__, "editions_enabled", editions_enabled)
        pulumi.set(__self__, "external_name", external_name)
        pulumi.set(__self__, "external_shared", external_shared)
        pulumi.set(__self__, "implicit", implicit)
        pulumi.set(__self__, "inherited", inherited)
        pulumi.set(__self__, "local_temp_tablespace", local_temp_tablespace)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "oracle_maintained", oracle_maintained)
        pulumi.set(__self__, "password_versions", password_versions)
        pulumi.set(__self__, "profile", profile)
        pulumi.set(__self__, "proxy_connect", proxy_connect)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "temp_tablespace", temp_tablespace)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_expiring", time_expiring)
        pulumi.set(__self__, "time_last_login", time_last_login)
        pulumi.set(__self__, "time_locked", time_locked)
        pulumi.set(__self__, "time_password_changed", time_password_changed)

    @property
    @pulumi.getter(name="allShared")
    def all_shared(self) -> str:
        """
        In a sharded database, indicates whether the user is created with shard DDL enabled (YES) or not (NO).
        """
        return pulumi.get(self, "all_shared")

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        The authentication mechanism for the user.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def common(self) -> str:
        """
        Indicates whether a given user is common(Y) or local(N).
        """
        return pulumi.get(self, "common")

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> str:
        """
        The initial resource consumer group for the User.
        """
        return pulumi.get(self, "consumer_group")

    @property
    @pulumi.getter(name="defaultCollation")
    def default_collation(self) -> str:
        """
        The default collation for the user schema.
        """
        return pulumi.get(self, "default_collation")

    @property
    @pulumi.getter(name="defaultTablespace")
    def default_tablespace(self) -> str:
        """
        The default tablespace for data.
        """
        return pulumi.get(self, "default_tablespace")

    @property
    @pulumi.getter(name="editionsEnabled")
    def editions_enabled(self) -> str:
        """
        Indicates whether editions have been enabled for the corresponding user (Y) or not (N).
        """
        return pulumi.get(self, "editions_enabled")

    @property
    @pulumi.getter(name="externalName")
    def external_name(self) -> str:
        """
        The external name of the user.
        """
        return pulumi.get(self, "external_name")

    @property
    @pulumi.getter(name="externalShared")
    def external_shared(self) -> str:
        """
        In a federated sharded database, indicates whether the user is an external shard user (YES) or not (NO).
        """
        return pulumi.get(self, "external_shared")

    @property
    @pulumi.getter
    def implicit(self) -> str:
        """
        Indicates whether the user is a common user created by an implicit application (YES) or not (NO).
        """
        return pulumi.get(self, "implicit")

    @property
    @pulumi.getter
    def inherited(self) -> str:
        """
        Indicates whether the user definition is inherited from another container (YES) or not (NO).
        """
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter(name="localTempTablespace")
    def local_temp_tablespace(self) -> str:
        """
        The default local temporary tablespace for the user.
        """
        return pulumi.get(self, "local_temp_tablespace")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oracleMaintained")
    def oracle_maintained(self) -> str:
        """
        Indicates whether the user was created and is maintained by Oracle-supplied scripts (such as catalog.sql or catproc.sql).
        """
        return pulumi.get(self, "oracle_maintained")

    @property
    @pulumi.getter(name="passwordVersions")
    def password_versions(self) -> str:
        """
        The list of existing versions of the password hashes (also known as "verifiers") for the account.
        """
        return pulumi.get(self, "password_versions")

    @property
    @pulumi.getter
    def profile(self) -> str:
        """
        The User resource profile name.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="proxyConnect")
    def proxy_connect(self) -> str:
        """
        Indicates whether a user can connect directly (N) or whether the account can only be proxied (Y) by users who have proxy privileges for this account (that is, by users who have been granted the "connect through" privilege for this account).
        """
        return pulumi.get(self, "proxy_connect")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the user account.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tempTablespace")
    def temp_tablespace(self) -> str:
        """
        The name of the default tablespace for temporary tables or the name of a tablespace group.
        """
        return pulumi.get(self, "temp_tablespace")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the user was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeExpiring")
    def time_expiring(self) -> str:
        """
        The date and time of the expiration of the user account.
        """
        return pulumi.get(self, "time_expiring")

    @property
    @pulumi.getter(name="timeLastLogin")
    def time_last_login(self) -> str:
        """
        The date and time of the last user login. This column is not populated when a user connects to the database with administrative privileges, that is, AS { SYSASM | SYSBACKUP | SYSDBA | SYSDG | SYSOPER | SYSRAC | SYSKM }.
        """
        return pulumi.get(self, "time_last_login")

    @property
    @pulumi.getter(name="timeLocked")
    def time_locked(self) -> str:
        """
        The date the account was locked if account status was LOCKED.
        """
        return pulumi.get(self, "time_locked")

    @property
    @pulumi.getter(name="timePasswordChanged")
    def time_password_changed(self) -> str:
        """
        The date and time when the user password was last set. This column is populated only when the value of the AUTHENTICATION_TYPE column is PASSWORD. Otherwise, this column is null.
        """
        return pulumi.get(self, "time_password_changed")


@pulumi.output_type
class GetManagedDatabasesAsmPropertiesAsmPropertyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabasesAsmPropertiesAsmPropertyCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabasesAsmPropertiesAsmPropertyCollectionItemArgs'] items: An array of AsmPropertySummary resources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabasesAsmPropertiesAsmPropertyCollectionItemResult']:
        """
        An array of AsmPropertySummary resources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesAsmPropertiesAsmPropertyCollectionItemResult(dict):
    def __init__(__self__, *,
                 disk_group: str):
        """
        :param str disk_group: The name of the disk group.
        """
        pulumi.set(__self__, "disk_group", disk_group)

    @property
    @pulumi.getter(name="diskGroup")
    def disk_group(self) -> str:
        """
        The name of the disk group.
        """
        return pulumi.get(self, "disk_group")


@pulumi.output_type
class GetManagedDatabasesAsmPropertiesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesAsmPropertyItemResult(dict):
    def __init__(__self__, *,
                 disk_group: str):
        """
        :param str disk_group: The name of the disk group.
        """
        pulumi.set(__self__, "disk_group", disk_group)

    @property
    @pulumi.getter(name="diskGroup")
    def disk_group(self) -> str:
        """
        The name of the disk group.
        """
        return pulumi.get(self, "disk_group")


@pulumi.output_type
class GetManagedDatabasesDatabaseParameterItemResult(dict):
    def __init__(__self__, *,
                 allowed_values: Sequence['outputs.GetManagedDatabasesDatabaseParameterItemAllowedValueResult'],
                 category: str,
                 constraint: str,
                 container_id: float,
                 description: str,
                 display_value: str,
                 is_adjusted: bool,
                 is_basic: bool,
                 is_default: bool,
                 is_deprecated: bool,
                 is_instance_modifiable: bool,
                 is_modified: str,
                 is_pdb_modifiable: bool,
                 is_session_modifiable: bool,
                 is_specified: bool,
                 is_system_modifiable: str,
                 name: str,
                 number: float,
                 ordinal: float,
                 sid: str,
                 type: str,
                 update_comment: str,
                 value: str):
        """
        :param Sequence['GetManagedDatabasesDatabaseParameterItemAllowedValueArgs'] allowed_values: A list of allowed values for this parameter.
        :param str category: The parameter category.
        :param str constraint: Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
        :param float container_id: The ID of the database container to which the data pertains. Possible values include:
               * `0`: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
               * `1`: This value is used for data that pertain to only the root container.
               * `n`: Where n is the applicable container ID for the data.
        :param str description: The description of the parameter.
        :param str display_value: The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
        :param bool is_adjusted: Indicates whether Oracle adjusted the input value to a more suitable value.
        :param bool is_basic: Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
        :param bool is_default: Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        :param bool is_deprecated: Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
        :param bool is_instance_modifiable: For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
        :param str is_modified: Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        :param bool is_pdb_modifiable: Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
        :param bool is_session_modifiable: Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
        :param bool is_specified: Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
        :param str is_system_modifiable: Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
               * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
               * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
               * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        :param str name: A filter to return all parameters that have the text given in their names.
        :param float number: The parameter number.
        :param float ordinal: The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        :param str sid: The database instance SID for which the parameter is defined.
        :param str type: The parameter type.
        :param str update_comment: The comments associated with the most recent update.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "allowed_values", allowed_values)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "constraint", constraint)
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_value", display_value)
        pulumi.set(__self__, "is_adjusted", is_adjusted)
        pulumi.set(__self__, "is_basic", is_basic)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_deprecated", is_deprecated)
        pulumi.set(__self__, "is_instance_modifiable", is_instance_modifiable)
        pulumi.set(__self__, "is_modified", is_modified)
        pulumi.set(__self__, "is_pdb_modifiable", is_pdb_modifiable)
        pulumi.set(__self__, "is_session_modifiable", is_session_modifiable)
        pulumi.set(__self__, "is_specified", is_specified)
        pulumi.set(__self__, "is_system_modifiable", is_system_modifiable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_comment", update_comment)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Sequence['outputs.GetManagedDatabasesDatabaseParameterItemAllowedValueResult']:
        """
        A list of allowed values for this parameter.
        """
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The parameter category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def constraint(self) -> str:
        """
        Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
        """
        return pulumi.get(self, "constraint")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> float:
        """
        The ID of the database container to which the data pertains. Possible values include:
        * `0`: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
        * `1`: This value is used for data that pertain to only the root container.
        * `n`: Where n is the applicable container ID for the data.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> str:
        """
        The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
        """
        return pulumi.get(self, "display_value")

    @property
    @pulumi.getter(name="isAdjusted")
    def is_adjusted(self) -> bool:
        """
        Indicates whether Oracle adjusted the input value to a more suitable value.
        """
        return pulumi.get(self, "is_adjusted")

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> bool:
        """
        Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
        """
        return pulumi.get(self, "is_basic")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> bool:
        """
        Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
        """
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter(name="isInstanceModifiable")
    def is_instance_modifiable(self) -> bool:
        """
        For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
        """
        return pulumi.get(self, "is_instance_modifiable")

    @property
    @pulumi.getter(name="isModified")
    def is_modified(self) -> str:
        """
        Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        """
        return pulumi.get(self, "is_modified")

    @property
    @pulumi.getter(name="isPdbModifiable")
    def is_pdb_modifiable(self) -> bool:
        """
        Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
        """
        return pulumi.get(self, "is_pdb_modifiable")

    @property
    @pulumi.getter(name="isSessionModifiable")
    def is_session_modifiable(self) -> bool:
        """
        Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
        """
        return pulumi.get(self, "is_session_modifiable")

    @property
    @pulumi.getter(name="isSpecified")
    def is_specified(self) -> bool:
        """
        Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
        """
        return pulumi.get(self, "is_specified")

    @property
    @pulumi.getter(name="isSystemModifiable")
    def is_system_modifiable(self) -> str:
        """
        Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
        * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
        * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
        * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        """
        return pulumi.get(self, "is_system_modifiable")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return all parameters that have the text given in their names.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> float:
        """
        The parameter number.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def ordinal(self) -> float:
        """
        The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        """
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def sid(self) -> str:
        """
        The database instance SID for which the parameter is defined.
        """
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateComment")
    def update_comment(self) -> str:
        """
        The comments associated with the most recent update.
        """
        return pulumi.get(self, "update_comment")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParameterItemAllowedValueResult(dict):
    def __init__(__self__, *,
                 is_default: bool,
                 ordinal: float,
                 value: str):
        """
        :param bool is_default: Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        :param float ordinal: The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def ordinal(self) -> float:
        """
        The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        """
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionResult(dict):
    def __init__(__self__, *,
                 database_name: str,
                 database_sub_type: str,
                 database_type: str,
                 database_version: str,
                 items: Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult']):
        """
        :param str database_name: The name of the Managed Database.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str database_version: The Oracle Database version.
        :param Sequence['GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemArgs'] items: An array of DatabaseParameterSummary objects.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_sub_type", database_sub_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "database_version", database_version)
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the Managed Database.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> str:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, or a Non-container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="databaseVersion")
    def database_version(self) -> str:
        """
        The Oracle Database version.
        """
        return pulumi.get(self, "database_version")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult']:
        """
        An array of DatabaseParameterSummary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemResult(dict):
    def __init__(__self__, *,
                 allowed_values: Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult'],
                 category: str,
                 constraint: str,
                 container_id: float,
                 description: str,
                 display_value: str,
                 is_adjusted: bool,
                 is_basic: bool,
                 is_default: bool,
                 is_deprecated: bool,
                 is_instance_modifiable: bool,
                 is_modified: str,
                 is_pdb_modifiable: bool,
                 is_session_modifiable: bool,
                 is_specified: bool,
                 is_system_modifiable: str,
                 name: str,
                 number: float,
                 ordinal: float,
                 sid: str,
                 type: str,
                 update_comment: str,
                 value: str):
        """
        :param Sequence['GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueArgs'] allowed_values: A list of allowed values for this parameter.
        :param str category: The parameter category.
        :param str constraint: Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
        :param float container_id: The ID of the database container to which the data pertains. Possible values include:
               * `0`: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
               * `1`: This value is used for data that pertain to only the root container.
               * `n`: Where n is the applicable container ID for the data.
        :param str description: The description of the parameter.
        :param str display_value: The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
        :param bool is_adjusted: Indicates whether Oracle adjusted the input value to a more suitable value.
        :param bool is_basic: Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
        :param bool is_default: Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        :param bool is_deprecated: Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
        :param bool is_instance_modifiable: For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
        :param str is_modified: Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        :param bool is_pdb_modifiable: Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
        :param bool is_session_modifiable: Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
        :param bool is_specified: Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
        :param str is_system_modifiable: Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
               * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
               * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
               * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        :param str name: A filter to return all parameters that have the text given in their names.
        :param float number: The parameter number.
        :param float ordinal: The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        :param str sid: The database instance SID for which the parameter is defined.
        :param str type: The parameter type.
        :param str update_comment: The comments associated with the most recent update.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "allowed_values", allowed_values)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "constraint", constraint)
        pulumi.set(__self__, "container_id", container_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_value", display_value)
        pulumi.set(__self__, "is_adjusted", is_adjusted)
        pulumi.set(__self__, "is_basic", is_basic)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_deprecated", is_deprecated)
        pulumi.set(__self__, "is_instance_modifiable", is_instance_modifiable)
        pulumi.set(__self__, "is_modified", is_modified)
        pulumi.set(__self__, "is_pdb_modifiable", is_pdb_modifiable)
        pulumi.set(__self__, "is_session_modifiable", is_session_modifiable)
        pulumi.set(__self__, "is_specified", is_specified)
        pulumi.set(__self__, "is_system_modifiable", is_system_modifiable)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_comment", update_comment)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Sequence['outputs.GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult']:
        """
        A list of allowed values for this parameter.
        """
        return pulumi.get(self, "allowed_values")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The parameter category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def constraint(self) -> str:
        """
        Applicable in case of Oracle Real Application Clusters (Oracle RAC) databases. A `UNIQUE` parameter is one which is unique to each Oracle Real Application Clusters (Oracle RAC) instance. For example, the parameter `INSTANCE_NUMBER` must have different values in each instance. An `IDENTICAL` parameter must have the same value for every instance. For example, the parameter `DB_BLOCK_SIZE` must have the same value in all instances.
        """
        return pulumi.get(self, "constraint")

    @property
    @pulumi.getter(name="containerId")
    def container_id(self) -> float:
        """
        The ID of the database container to which the data pertains. Possible values include:
        * `0`: This value is used for data that pertain to the entire CDB. This value is also used for data in non-CDBs.
        * `1`: This value is used for data that pertain to only the root container.
        * `n`: Where n is the applicable container ID for the data.
        """
        return pulumi.get(self, "container_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> str:
        """
        The parameter value in a user-friendly format. For example, if the `value` property shows the value 262144 for a big integer parameter, then the `displayValue` property will show the value 256K.
        """
        return pulumi.get(self, "display_value")

    @property
    @pulumi.getter(name="isAdjusted")
    def is_adjusted(self) -> bool:
        """
        Indicates whether Oracle adjusted the input value to a more suitable value.
        """
        return pulumi.get(self, "is_adjusted")

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> bool:
        """
        Indicates whether the parameter is a basic parameter (`TRUE`) or not (`FALSE`).
        """
        return pulumi.get(self, "is_basic")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isDeprecated")
    def is_deprecated(self) -> bool:
        """
        Indicates whether the parameter has been deprecated (`TRUE`) or not (`FALSE`).
        """
        return pulumi.get(self, "is_deprecated")

    @property
    @pulumi.getter(name="isInstanceModifiable")
    def is_instance_modifiable(self) -> bool:
        """
        For parameters that can be changed with `ALTER SYSTEM`, indicates whether the value of the parameter can be different for every instance (`TRUE`) or whether the parameter must have the same value for all Real Application Clusters instances (`FALSE`). For other parameters, this is always `FALSE`.
        """
        return pulumi.get(self, "is_instance_modifiable")

    @property
    @pulumi.getter(name="isModified")
    def is_modified(self) -> str:
        """
        Indicates how the parameter was modified. If an `ALTER SYSTEM` was performed, the value will be `MODIFIED`.
        """
        return pulumi.get(self, "is_modified")

    @property
    @pulumi.getter(name="isPdbModifiable")
    def is_pdb_modifiable(self) -> bool:
        """
        Indicates whether the parameter can be modified on a per-PDB basis (`TRUE`) or not (`FALSE`). In a non-CDB, the value of this property is `null`.
        """
        return pulumi.get(self, "is_pdb_modifiable")

    @property
    @pulumi.getter(name="isSessionModifiable")
    def is_session_modifiable(self) -> bool:
        """
        Indicates whether the parameter can be changed with `ALTER SESSION` (`TRUE`) or not (`FALSE`)
        """
        return pulumi.get(self, "is_session_modifiable")

    @property
    @pulumi.getter(name="isSpecified")
    def is_specified(self) -> bool:
        """
        Indicates whether the parameter was specified in the server parameter file (`TRUE`) or not (`FALSE`). Applicable only when the parameter source is `SPFILE`.
        """
        return pulumi.get(self, "is_specified")

    @property
    @pulumi.getter(name="isSystemModifiable")
    def is_system_modifiable(self) -> str:
        """
        Indicates whether the parameter can be changed with `ALTER SYSTEM` and when the change takes effect:
        * IMMEDIATE: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect immediately.
        * DEFERRED: Parameter can be changed with `ALTER SYSTEM` regardless of the type of parameter file used to start the instance. The change takes effect in subsequent sessions.
        * FALSE: Parameter cannot be changed with `ALTER SYSTEM` unless a server parameter file was used to start the instance. The change takes effect in subsequent instances.
        """
        return pulumi.get(self, "is_system_modifiable")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return all parameters that have the text given in their names.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> float:
        """
        The parameter number.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def ordinal(self) -> float:
        """
        The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        """
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def sid(self) -> str:
        """
        The database instance SID for which the parameter is defined.
        """
        return pulumi.get(self, "sid")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateComment")
    def update_comment(self) -> str:
        """
        The comments associated with the most recent update.
        """
        return pulumi.get(self, "update_comment")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersDatabaseParametersCollectionItemAllowedValueResult(dict):
    def __init__(__self__, *,
                 is_default: bool,
                 ordinal: float,
                 value: str):
        """
        :param bool is_default: Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        :param float ordinal: The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        :param str value: The parameter value.
        """
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "ordinal", ordinal)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        Indicates whether the parameter is set to the default value (`TRUE`) or the parameter value was specified in the parameter file (`FALSE`).
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def ordinal(self) -> float:
        """
        The position (ordinal number) of the parameter value. Useful only for parameters whose values are lists of strings.
        """
        return pulumi.get(self, "ordinal")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetManagedDatabasesDatabaseParametersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return all parameters that have the text given in their names.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return all parameters that have the text given in their names.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesManagedDatabaseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesManagedDatabaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_details: Mapping[str, Any],
                 compartment_id: str,
                 database_status: str,
                 database_sub_type: str,
                 database_type: str,
                 deployment_type: str,
                 id: str,
                 is_cluster: bool,
                 managed_database_groups: Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult'],
                 management_option: str,
                 name: str,
                 parent_container_id: str,
                 time_created: str,
                 workload_type: str):
        """
        :param Mapping[str, Any] additional_details: The additional details specific to a type of database defined in `{"key": "value"}` format. Example: `{"bar-key": "value"}`
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str database_status: The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
        :param str database_sub_type: The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
        :param str database_type: The type of Oracle Database installation.
        :param str deployment_type: A filter to return Managed Databases of the specified deployment type.
        :param str id: The identifier of the resource.
        :param bool is_cluster: Indicates whether the Oracle Database is part of a cluster.
        :param Sequence['GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupArgs'] managed_database_groups: A list of Managed Database Groups that the Managed Database belongs to.
        :param str management_option: A filter to return Managed Databases with the specified management option.
        :param str name: A filter to return only resources that match the entire name.
        :param str parent_container_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
        :param str time_created: The date and time the Managed Database was created.
        :param str workload_type: The workload type of the Autonomous Database.
        """
        pulumi.set(__self__, "additional_details", additional_details)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_status", database_status)
        pulumi.set(__self__, "database_sub_type", database_sub_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_cluster", is_cluster)
        pulumi.set(__self__, "managed_database_groups", managed_database_groups)
        pulumi.set(__self__, "management_option", management_option)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_container_id", parent_container_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="additionalDetails")
    def additional_details(self) -> Mapping[str, Any]:
        """
        The additional details specific to a type of database defined in `{"key": "value"}` format. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "additional_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseStatus")
    def database_status(self) -> str:
        """
        The status of the Oracle Database. Indicates whether the status of the database is UP, DOWN, or UNKNOWN at the current time.
        """
        return pulumi.get(self, "database_status")

    @property
    @pulumi.getter(name="databaseSubType")
    def database_sub_type(self) -> str:
        """
        The subtype of the Oracle Database. Indicates whether the database is a Container Database, Pluggable Database, Non-container Database, Autonomous Database, or Autonomous Container Database.
        """
        return pulumi.get(self, "database_sub_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        The type of Oracle Database installation.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        A filter to return Managed Databases of the specified deployment type.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> bool:
        """
        Indicates whether the Oracle Database is part of a cluster.
        """
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="managedDatabaseGroups")
    def managed_database_groups(self) -> Sequence['outputs.GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult']:
        """
        A list of Managed Database Groups that the Managed Database belongs to.
        """
        return pulumi.get(self, "managed_database_groups")

    @property
    @pulumi.getter(name="managementOption")
    def management_option(self) -> str:
        """
        A filter to return Managed Databases with the specified management option.
        """
        return pulumi.get(self, "management_option")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentContainerId")
    def parent_container_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the parent Container Database if Managed Database is a Pluggable Database.
        """
        return pulumi.get(self, "parent_container_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the Managed Database was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> str:
        """
        The workload type of the Autonomous Database.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetManagedDatabasesManagedDatabaseCollectionItemManagedDatabaseGroupResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 id: str,
                 name: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str id: The identifier of the resource.
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The identifier of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabasesUserProxyUserItemResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 flags: str,
                 name: str):
        """
        :param str authentication: Indicates whether the proxy is required to supply the client credentials (YES) or not (NO).
        :param str flags: The flags associated with the proxy/client pair.
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Indicates whether the proxy is required to supply the client credentials (YES) or not (NO).
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def flags(self) -> str:
        """
        The flags associated with the proxy/client pair.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabasesUserProxyUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesUserProxyUsersProxyUserCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabasesUserProxyUsersProxyUserCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabasesUserProxyUsersProxyUserCollectionItemArgs'] items: An array of user resources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabasesUserProxyUsersProxyUserCollectionItemResult']:
        """
        An array of user resources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesUserProxyUsersProxyUserCollectionItemResult(dict):
    def __init__(__self__, *,
                 authentication: str,
                 flags: str,
                 name: str):
        """
        :param str authentication: Indicates whether the proxy is required to supply the client credentials (YES) or not (NO).
        :param str flags: The flags associated with the proxy/client pair.
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def authentication(self) -> str:
        """
        Indicates whether the proxy is required to supply the client credentials (YES) or not (NO).
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def flags(self) -> str:
        """
        The flags associated with the proxy/client pair.
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabasesUserSystemPrivilegeItemResult(dict):
    def __init__(__self__, *,
                 admin_option: str,
                 common: str,
                 inherited: str,
                 name: str):
        """
        :param str admin_option: Indicates whether the system privilege is granted with the ADMIN option (YES) or not (NO).
        :param str common: Indicates how the system privilege was granted. Possible values: YES if the system privilege is granted commonly (CONTAINER=ALL is used) NO if the system privilege is granted locally (CONTAINER=ALL is not used)
        :param str inherited: Indicates whether the granted system privilege is inherited from another container (YES) or not (NO).
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "admin_option", admin_option)
        pulumi.set(__self__, "common", common)
        pulumi.set(__self__, "inherited", inherited)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="adminOption")
    def admin_option(self) -> str:
        """
        Indicates whether the system privilege is granted with the ADMIN option (YES) or not (NO).
        """
        return pulumi.get(self, "admin_option")

    @property
    @pulumi.getter
    def common(self) -> str:
        """
        Indicates how the system privilege was granted. Possible values: YES if the system privilege is granted commonly (CONTAINER=ALL is used) NO if the system privilege is granted locally (CONTAINER=ALL is not used)
        """
        return pulumi.get(self, "common")

    @property
    @pulumi.getter
    def inherited(self) -> str:
        """
        Indicates whether the granted system privilege is inherited from another container (YES) or not (NO).
        """
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetManagedDatabasesUserSystemPrivilegesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItemResult']):
        """
        :param Sequence['GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItemArgs'] items: An array of system privileges.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItemResult']:
        """
        An array of system privileges.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedDatabasesUserSystemPrivilegesSystemPrivilegeCollectionItemResult(dict):
    def __init__(__self__, *,
                 admin_option: str,
                 common: str,
                 inherited: str,
                 name: str):
        """
        :param str admin_option: Indicates whether the system privilege is granted with the ADMIN option (YES) or not (NO).
        :param str common: Indicates how the system privilege was granted. Possible values: YES if the system privilege is granted commonly (CONTAINER=ALL is used) NO if the system privilege is granted locally (CONTAINER=ALL is not used)
        :param str inherited: Indicates whether the granted system privilege is inherited from another container (YES) or not (NO).
        :param str name: A filter to return only resources that match the entire name.
        """
        pulumi.set(__self__, "admin_option", admin_option)
        pulumi.set(__self__, "common", common)
        pulumi.set(__self__, "inherited", inherited)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="adminOption")
    def admin_option(self) -> str:
        """
        Indicates whether the system privilege is granted with the ADMIN option (YES) or not (NO).
        """
        return pulumi.get(self, "admin_option")

    @property
    @pulumi.getter
    def common(self) -> str:
        """
        Indicates how the system privilege was granted. Possible values: YES if the system privilege is granted commonly (CONTAINER=ALL is used) NO if the system privilege is granted locally (CONTAINER=ALL is not used)
        """
        return pulumi.get(self, "common")

    @property
    @pulumi.getter
    def inherited(self) -> str:
        """
        Indicates whether the granted system privilege is inherited from another container (YES) or not (NO).
        """
        return pulumi.get(self, "inherited")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name.
        """
        return pulumi.get(self, "name")


