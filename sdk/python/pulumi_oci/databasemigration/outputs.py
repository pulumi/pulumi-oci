# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ConnectionAdditionalAttribute',
    'ConnectionIngressIp',
    'JobParameterFileVersion',
    'JobProgress',
    'JobProgressPhase',
    'JobProgressPhaseExtract',
    'JobProgressPhaseLogLocation',
    'JobUnsupportedObject',
    'MigrationAdvancedParameter',
    'MigrationAdvisorSettings',
    'MigrationDataTransferMediumDetails',
    'MigrationDataTransferMediumDetailsObjectStorageBucket',
    'MigrationDataTransferMediumDetailsSource',
    'MigrationDataTransferMediumDetailsTarget',
    'MigrationExcludeObject',
    'MigrationGgsDetails',
    'MigrationGgsDetailsExtract',
    'MigrationGgsDetailsGgsDeployment',
    'MigrationGgsDetailsReplicat',
    'MigrationHubDetails',
    'MigrationHubDetailsExtract',
    'MigrationHubDetailsReplicat',
    'MigrationHubDetailsRestAdminCredentials',
    'MigrationIncludeObject',
    'MigrationInitialLoadSettings',
    'MigrationInitialLoadSettingsDataPumpParameters',
    'MigrationInitialLoadSettingsExportDirectoryObject',
    'MigrationInitialLoadSettingsImportDirectoryObject',
    'MigrationInitialLoadSettingsMetadataRemap',
    'MigrationInitialLoadSettingsTablespaceDetails',
    'GetConnectionAdditionalAttributeResult',
    'GetConnectionIngressIpResult',
    'GetConnectionsConnectionCollectionResult',
    'GetConnectionsConnectionCollectionItemResult',
    'GetConnectionsConnectionCollectionItemAdditionalAttributeResult',
    'GetConnectionsConnectionCollectionItemIngressIpResult',
    'GetConnectionsFilterResult',
    'GetJobAdvisorReportReportLocationDetailResult',
    'GetJobAdvisorReportReportLocationDetailObjectStorageDetailResult',
    'GetJobOutputItemResult',
    'GetMigrationAdvancedParameterResult',
    'GetMigrationAdvisorSettingResult',
    'GetMigrationDataTransferMediumDetailResult',
    'GetMigrationDataTransferMediumDetailObjectStorageBucketResult',
    'GetMigrationDataTransferMediumDetailSourceResult',
    'GetMigrationDataTransferMediumDetailTargetResult',
    'GetMigrationExcludeObjectResult',
    'GetMigrationGgsDetailResult',
    'GetMigrationGgsDetailExtractResult',
    'GetMigrationGgsDetailGgsDeploymentResult',
    'GetMigrationGgsDetailReplicatResult',
    'GetMigrationHubDetailResult',
    'GetMigrationHubDetailExtractResult',
    'GetMigrationHubDetailReplicatResult',
    'GetMigrationHubDetailRestAdminCredentialResult',
    'GetMigrationIncludeObjectResult',
    'GetMigrationInitialLoadSettingResult',
    'GetMigrationInitialLoadSettingDataPumpParameterResult',
    'GetMigrationInitialLoadSettingExportDirectoryObjectResult',
    'GetMigrationInitialLoadSettingImportDirectoryObjectResult',
    'GetMigrationInitialLoadSettingMetadataRemapResult',
    'GetMigrationInitialLoadSettingTablespaceDetailResult',
    'GetMigrationObjectTypesFilterResult',
    'GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionResult',
    'GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionItemResult',
    'GetMigrationsAdvancedParameterResult',
    'GetMigrationsAdvisorSettingResult',
    'GetMigrationsDataTransferMediumDetailResult',
    'GetMigrationsDataTransferMediumDetailObjectStorageBucketResult',
    'GetMigrationsDataTransferMediumDetailSourceResult',
    'GetMigrationsDataTransferMediumDetailTargetResult',
    'GetMigrationsExcludeObjectResult',
    'GetMigrationsGgsDetailResult',
    'GetMigrationsGgsDetailExtractResult',
    'GetMigrationsGgsDetailGgsDeploymentResult',
    'GetMigrationsGgsDetailReplicatResult',
    'GetMigrationsHubDetailResult',
    'GetMigrationsHubDetailExtractResult',
    'GetMigrationsHubDetailReplicatResult',
    'GetMigrationsHubDetailRestAdminCredentialResult',
    'GetMigrationsIncludeObjectResult',
    'GetMigrationsInitialLoadSettingResult',
    'GetMigrationsInitialLoadSettingDataPumpParameterResult',
    'GetMigrationsInitialLoadSettingExportDirectoryObjectResult',
    'GetMigrationsInitialLoadSettingImportDirectoryObjectResult',
    'GetMigrationsInitialLoadSettingMetadataRemapResult',
    'GetMigrationsInitialLoadSettingTablespaceDetailResult',
]

@pulumi.output_type
class ConnectionAdditionalAttribute(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str name: (Updatable) The name of the property entry.
        :param builtins.str value: (Updatable) The value of the property entry.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the property entry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) The value of the property entry.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ConnectionIngressIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressIp":
            suggest = "ingress_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionIngressIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionIngressIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionIngressIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingress_ip: Optional[builtins.str] = None):
        """
        :param builtins.str ingress_ip: A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        if ingress_ip is not None:
            pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> Optional[builtins.str]:
        """
        A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class JobParameterFileVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "definedTags":
            suggest = "defined_tags"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "isCurrent":
            suggest = "is_current"
        elif key == "isFactory":
            suggest = "is_factory"
        elif key == "systemTags":
            suggest = "system_tags"
        elif key == "timeCreated":
            suggest = "time_created"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobParameterFileVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobParameterFileVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobParameterFileVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, builtins.str]] = None,
                 description: Optional[builtins.str] = None,
                 freeform_tags: Optional[Mapping[str, builtins.str]] = None,
                 is_current: Optional[builtins.bool] = None,
                 is_factory: Optional[builtins.bool] = None,
                 kind: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 system_tags: Optional[Mapping[str, builtins.str]] = None,
                 time_created: Optional[builtins.str] = None):
        """
        :param Mapping[str, builtins.str] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: A description to discribe the current parameter file version
        :param Mapping[str, builtins.str] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
        :param builtins.bool is_current: Return boolean true/false for the currently in-use parameter file (factory or a versioned file)
        :param builtins.bool is_factory: Return true/false for whether the parameter file is oracle provided (Factory)
        :param builtins.str kind: Indicator of Parameter File 'kind' (for an EXTRACT or a REPLICAT)
        :param builtins.str name: Phase name
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time the Migration Job was created. An RFC3339 formatted datetime string
        """
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_current is not None:
            pulumi.set(__self__, "is_current", is_current)
        if is_factory is not None:
            pulumi.set(__self__, "is_factory", is_factory)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        A description to discribe the current parameter file version
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isCurrent")
    def is_current(self) -> Optional[builtins.bool]:
        """
        Return boolean true/false for the currently in-use parameter file (factory or a versioned file)
        """
        return pulumi.get(self, "is_current")

    @property
    @pulumi.getter(name="isFactory")
    def is_factory(self) -> Optional[builtins.bool]:
        """
        Return true/false for whether the parameter file is oracle provided (Factory)
        """
        return pulumi.get(self, "is_factory")

    @property
    @pulumi.getter
    def kind(self) -> Optional[builtins.str]:
        """
        Indicator of Parameter File 'kind' (for an EXTRACT or a REPLICAT)
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Phase name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[builtins.str]:
        """
        The time the Migration Job was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class JobProgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentPhase":
            suggest = "current_phase"
        elif key == "currentStatus":
            suggest = "current_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobProgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobProgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobProgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_phase: Optional[builtins.str] = None,
                 current_status: Optional[builtins.str] = None,
                 phases: Optional[Sequence['outputs.JobProgressPhase']] = None):
        """
        :param builtins.str current_phase: Current phase of the job.
        :param builtins.str current_status: Current status of the job.
        :param Sequence['JobProgressPhaseArgs'] phases: List of phase status for the job.
        """
        if current_phase is not None:
            pulumi.set(__self__, "current_phase", current_phase)
        if current_status is not None:
            pulumi.set(__self__, "current_status", current_status)
        if phases is not None:
            pulumi.set(__self__, "phases", phases)

    @property
    @pulumi.getter(name="currentPhase")
    def current_phase(self) -> Optional[builtins.str]:
        """
        Current phase of the job.
        """
        return pulumi.get(self, "current_phase")

    @property
    @pulumi.getter(name="currentStatus")
    def current_status(self) -> Optional[builtins.str]:
        """
        Current status of the job.
        """
        return pulumi.get(self, "current_status")

    @property
    @pulumi.getter
    def phases(self) -> Optional[Sequence['outputs.JobProgressPhase']]:
        """
        List of phase status for the job.
        """
        return pulumi.get(self, "phases")


@pulumi.output_type
class JobProgressPhase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMs":
            suggest = "duration_in_ms"
        elif key == "editableParameterFiles":
            suggest = "editable_parameter_files"
        elif key == "isAdvisorReportAvailable":
            suggest = "is_advisor_report_available"
        elif key == "isSuspendAvailable":
            suggest = "is_suspend_available"
        elif key == "logLocations":
            suggest = "log_locations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobProgressPhase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobProgressPhase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobProgressPhase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[builtins.str] = None,
                 duration_in_ms: Optional[builtins.int] = None,
                 editable_parameter_files: Optional[Sequence[builtins.str]] = None,
                 extracts: Optional[Sequence['outputs.JobProgressPhaseExtract']] = None,
                 is_advisor_report_available: Optional[builtins.bool] = None,
                 is_suspend_available: Optional[builtins.bool] = None,
                 issue: Optional[builtins.str] = None,
                 log_locations: Optional[Sequence['outputs.JobProgressPhaseLogLocation']] = None,
                 name: Optional[builtins.str] = None,
                 progress: Optional[builtins.int] = None,
                 status: Optional[builtins.str] = None):
        """
        :param builtins.str action: The text describing the action required to fix the issue
        :param builtins.int duration_in_ms: Duration of the phase in milliseconds
        :param Sequence[builtins.str] editable_parameter_files: Attribute that returns an array of names and types of GoldenGate configuration files that are available for read or update.
        :param Sequence['JobProgressPhaseExtractArgs'] extracts: Summary of phase status results.
        :param builtins.bool is_advisor_report_available: True if a Pre-Migration Advisor report is available for this phase. False or null if no report is available.
        :param builtins.bool is_suspend_available: This is returned as true if the current phase can be suspended.
        :param builtins.str issue: The text describing the root cause of the reported issue
        :param Sequence['JobProgressPhaseLogLocationArgs'] log_locations: Details to access log file in the specified Object Storage bucket, if any.
        :param builtins.str name: Phase name
        :param builtins.int progress: Percent progress of job phase.
        :param builtins.str status: Phase status
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if duration_in_ms is not None:
            pulumi.set(__self__, "duration_in_ms", duration_in_ms)
        if editable_parameter_files is not None:
            pulumi.set(__self__, "editable_parameter_files", editable_parameter_files)
        if extracts is not None:
            pulumi.set(__self__, "extracts", extracts)
        if is_advisor_report_available is not None:
            pulumi.set(__self__, "is_advisor_report_available", is_advisor_report_available)
        if is_suspend_available is not None:
            pulumi.set(__self__, "is_suspend_available", is_suspend_available)
        if issue is not None:
            pulumi.set(__self__, "issue", issue)
        if log_locations is not None:
            pulumi.set(__self__, "log_locations", log_locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[builtins.str]:
        """
        The text describing the action required to fix the issue
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="durationInMs")
    def duration_in_ms(self) -> Optional[builtins.int]:
        """
        Duration of the phase in milliseconds
        """
        return pulumi.get(self, "duration_in_ms")

    @property
    @pulumi.getter(name="editableParameterFiles")
    def editable_parameter_files(self) -> Optional[Sequence[builtins.str]]:
        """
        Attribute that returns an array of names and types of GoldenGate configuration files that are available for read or update.
        """
        return pulumi.get(self, "editable_parameter_files")

    @property
    @pulumi.getter
    def extracts(self) -> Optional[Sequence['outputs.JobProgressPhaseExtract']]:
        """
        Summary of phase status results.
        """
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter(name="isAdvisorReportAvailable")
    def is_advisor_report_available(self) -> Optional[builtins.bool]:
        """
        True if a Pre-Migration Advisor report is available for this phase. False or null if no report is available.
        """
        return pulumi.get(self, "is_advisor_report_available")

    @property
    @pulumi.getter(name="isSuspendAvailable")
    def is_suspend_available(self) -> Optional[builtins.bool]:
        """
        This is returned as true if the current phase can be suspended.
        """
        return pulumi.get(self, "is_suspend_available")

    @property
    @pulumi.getter
    def issue(self) -> Optional[builtins.str]:
        """
        The text describing the root cause of the reported issue
        """
        return pulumi.get(self, "issue")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[Sequence['outputs.JobProgressPhaseLogLocation']]:
        """
        Details to access log file in the specified Object Storage bucket, if any.
        """
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Phase name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def progress(self) -> Optional[builtins.int]:
        """
        Percent progress of job phase.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        Phase status
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class JobProgressPhaseExtract(dict):
    def __init__(__self__, *,
                 message: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str message: Message in entry.
        :param builtins.str type: Type of unsupported object
        """
        if message is not None:
            pulumi.set(__self__, "message", message)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> Optional[builtins.str]:
        """
        Message in entry.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Type of unsupported object
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class JobProgressPhaseLogLocation(dict):
    def __init__(__self__, *,
                 bucket: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 object: Optional[builtins.str] = None):
        """
        :param builtins.str bucket: Name of the bucket containing the log file.
        :param builtins.str namespace: Object Storage namespace.
        :param builtins.str object: Name of the object (regular expression is allowed)
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        Name of the bucket containing the log file.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        Object Storage namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[builtins.str]:
        """
        Name of the object (regular expression is allowed)
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class JobUnsupportedObject(dict):
    def __init__(__self__, *,
                 object: Optional[builtins.str] = None,
                 owner: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str object: Name of the object (regular expression is allowed)
        :param builtins.str owner: Owner of the object (regular expression is allowed)
        :param builtins.str type: Type of unsupported object
        """
        if object is not None:
            pulumi.set(__self__, "object", object)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def object(self) -> Optional[builtins.str]:
        """
        Name of the object (regular expression is allowed)
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> Optional[builtins.str]:
        """
        Owner of the object (regular expression is allowed)
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Type of unsupported object
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MigrationAdvancedParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationAdvancedParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationAdvancedParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationAdvancedParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_type: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str data_type: (Updatable) Parameter data type.
        :param builtins.str name: (Updatable) Parameter name.
        :param builtins.str value: (Updatable) If a STRING data type then the value should be an array of characters,  if a INTEGER data type then the value should be an integer value,  if a FLOAT data type then the value should be an float value, if a BOOLEAN data type then the value should be TRUE or FALSE.
        """
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[builtins.str]:
        """
        (Updatable) Parameter data type.
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) Parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) If a STRING data type then the value should be an array of characters,  if a INTEGER data type then the value should be an integer value,  if a FLOAT data type then the value should be an float value, if a BOOLEAN data type then the value should be TRUE or FALSE.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MigrationAdvisorSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isIgnoreErrors":
            suggest = "is_ignore_errors"
        elif key == "isSkipAdvisor":
            suggest = "is_skip_advisor"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationAdvisorSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationAdvisorSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationAdvisorSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_ignore_errors: Optional[builtins.bool] = None,
                 is_skip_advisor: Optional[builtins.bool] = None):
        """
        :param builtins.bool is_ignore_errors: (Updatable) True to not interrupt migration execution due to Pre-Migration Advisor errors. Default is false.
        :param builtins.bool is_skip_advisor: (Updatable) True to skip the Pre-Migration Advisor execution. Default is false.
        """
        if is_ignore_errors is not None:
            pulumi.set(__self__, "is_ignore_errors", is_ignore_errors)
        if is_skip_advisor is not None:
            pulumi.set(__self__, "is_skip_advisor", is_skip_advisor)

    @property
    @pulumi.getter(name="isIgnoreErrors")
    def is_ignore_errors(self) -> Optional[builtins.bool]:
        """
        (Updatable) True to not interrupt migration execution due to Pre-Migration Advisor errors. Default is false.
        """
        return pulumi.get(self, "is_ignore_errors")

    @property
    @pulumi.getter(name="isSkipAdvisor")
    def is_skip_advisor(self) -> Optional[builtins.bool]:
        """
        (Updatable) True to skip the Pre-Migration Advisor execution. Default is false.
        """
        return pulumi.get(self, "is_skip_advisor")


@pulumi.output_type
class MigrationDataTransferMediumDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "objectStorageBucket":
            suggest = "object_storage_bucket"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"
        elif key == "sharedStorageMountTargetId":
            suggest = "shared_storage_mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDataTransferMediumDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDataTransferMediumDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDataTransferMediumDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 access_key_id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 object_storage_bucket: Optional['outputs.MigrationDataTransferMediumDetailsObjectStorageBucket'] = None,
                 region: Optional[builtins.str] = None,
                 secret_access_key: Optional[builtins.str] = None,
                 shared_storage_mount_target_id: Optional[builtins.str] = None,
                 source: Optional['outputs.MigrationDataTransferMediumDetailsSource'] = None,
                 target: Optional['outputs.MigrationDataTransferMediumDetailsTarget'] = None):
        """
        :param builtins.str type: (Updatable) Type of the data transfer medium to use.
        :param builtins.str access_key_id: (Updatable) AWS access key credentials identifier Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        :param builtins.str name: (Updatable) Name of database link from Oracle Cloud Infrastructure database to on-premise database. ODMS will create link,  if the link does not already exist.
        :param 'MigrationDataTransferMediumDetailsObjectStorageBucketArgs' object_storage_bucket: (Updatable) In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Data Pump dump files for the migration. Additionally, it can be specified alongside a database link data transfer medium.
        :param builtins.str region: (Updatable) AWS region code where the S3 bucket is located. Region code should match the documented available regions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions
        :param builtins.str secret_access_key: (Updatable) AWS secret access key credentials Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        :param builtins.str shared_storage_mount_target_id: (Updatable) OCID of the shared storage mount target
        :param 'MigrationDataTransferMediumDetailsSourceArgs' source: (Updatable) Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        :param 'MigrationDataTransferMediumDetailsTargetArgs' target: (Updatable) Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        """
        pulumi.set(__self__, "type", type)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_storage_bucket is not None:
            pulumi.set(__self__, "object_storage_bucket", object_storage_bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if shared_storage_mount_target_id is not None:
            pulumi.set(__self__, "shared_storage_mount_target_id", shared_storage_mount_target_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) Type of the data transfer medium to use.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[builtins.str]:
        """
        (Updatable) AWS access key credentials identifier Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of database link from Oracle Cloud Infrastructure database to on-premise database. ODMS will create link,  if the link does not already exist.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStorageBucket")
    def object_storage_bucket(self) -> Optional['outputs.MigrationDataTransferMediumDetailsObjectStorageBucket']:
        """
        (Updatable) In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Data Pump dump files for the migration. Additionally, it can be specified alongside a database link data transfer medium.
        """
        return pulumi.get(self, "object_storage_bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[builtins.str]:
        """
        (Updatable) AWS region code where the S3 bucket is located. Region code should match the documented available regions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[builtins.str]:
        """
        (Updatable) AWS secret access key credentials Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        """
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="sharedStorageMountTargetId")
    def shared_storage_mount_target_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the shared storage mount target
        """
        return pulumi.get(self, "shared_storage_mount_target_id")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.MigrationDataTransferMediumDetailsSource']:
        """
        (Updatable) Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional['outputs.MigrationDataTransferMediumDetailsTarget']:
        """
        (Updatable) Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        """
        return pulumi.get(self, "target")


@pulumi.output_type
class MigrationDataTransferMediumDetailsObjectStorageBucket(dict):
    def __init__(__self__, *,
                 bucket: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None):
        """
        :param builtins.str bucket: (Updatable) Bucket name.
        :param builtins.str namespace: (Updatable) Namespace name of the object store bucket.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        (Updatable) Bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        (Updatable) Namespace name of the object store bucket.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class MigrationDataTransferMediumDetailsSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ociHome":
            suggest = "oci_home"
        elif key == "walletLocation":
            suggest = "wallet_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDataTransferMediumDetailsSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDataTransferMediumDetailsSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDataTransferMediumDetailsSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 oci_home: Optional[builtins.str] = None,
                 wallet_location: Optional[builtins.str] = None):
        """
        :param builtins.str kind: (Updatable) Type of dump transfer to use during migration in source or target host. Default kind is CURL
        :param builtins.str oci_home: (Updatable) Path to the Oracle Cloud Infrastructure CLI installation in the node.
        :param builtins.str wallet_location: (Updatable) Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        pulumi.set(__self__, "kind", kind)
        if oci_home is not None:
            pulumi.set(__self__, "oci_home", oci_home)
        if wallet_location is not None:
            pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        (Updatable) Type of dump transfer to use during migration in source or target host. Default kind is CURL
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> Optional[builtins.str]:
        """
        (Updatable) Path to the Oracle Cloud Infrastructure CLI installation in the node.
        """
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> Optional[builtins.str]:
        """
        (Updatable) Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class MigrationDataTransferMediumDetailsTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ociHome":
            suggest = "oci_home"
        elif key == "walletLocation":
            suggest = "wallet_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDataTransferMediumDetailsTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDataTransferMediumDetailsTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDataTransferMediumDetailsTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: builtins.str,
                 oci_home: Optional[builtins.str] = None,
                 wallet_location: Optional[builtins.str] = None):
        """
        :param builtins.str kind: (Updatable) Type of dump transfer to use during migration in source or target host. Default kind is CURL
        :param builtins.str oci_home: (Updatable) Path to the Oracle Cloud Infrastructure CLI installation in the node.
        :param builtins.str wallet_location: (Updatable) Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        pulumi.set(__self__, "kind", kind)
        if oci_home is not None:
            pulumi.set(__self__, "oci_home", oci_home)
        if wallet_location is not None:
            pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        (Updatable) Type of dump transfer to use during migration in source or target host. Default kind is CURL
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> Optional[builtins.str]:
        """
        (Updatable) Path to the Oracle Cloud Infrastructure CLI installation in the node.
        """
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> Optional[builtins.str]:
        """
        (Updatable) Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class MigrationExcludeObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isOmitExcludedTableFromReplication":
            suggest = "is_omit_excluded_table_from_replication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationExcludeObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationExcludeObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationExcludeObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object: builtins.str,
                 is_omit_excluded_table_from_replication: Optional[builtins.bool] = None,
                 owner: Optional[builtins.str] = None,
                 schema: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str object: Name of the object (regular expression is allowed)
        :param builtins.bool is_omit_excluded_table_from_replication: Whether an excluded table should be omitted from replication. Only valid for database objects  that have are of type TABLE and object status EXCLUDE.
        :param builtins.str owner: Owner of the object (regular expression is allowed)
        :param builtins.str schema: Schema of the object (regular expression is allowed)
        :param builtins.str type: Type of object to exclude. If not specified, matching owners and object names of type TABLE would be excluded.
        """
        pulumi.set(__self__, "object", object)
        if is_omit_excluded_table_from_replication is not None:
            pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Name of the object (regular expression is allowed)
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> Optional[builtins.bool]:
        """
        Whether an excluded table should be omitted from replication. Only valid for database objects  that have are of type TABLE and object status EXCLUDE.
        """
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def owner(self) -> Optional[builtins.str]:
        """
        Owner of the object (regular expression is allowed)
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def schema(self) -> Optional[builtins.str]:
        """
        Schema of the object (regular expression is allowed)
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Type of object to exclude. If not specified, matching owners and object names of type TABLE would be excluded.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MigrationGgsDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptableLag":
            suggest = "acceptable_lag"
        elif key == "ggsDeployments":
            suggest = "ggs_deployments"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGgsDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGgsDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGgsDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acceptable_lag: Optional[builtins.int] = None,
                 extract: Optional['outputs.MigrationGgsDetailsExtract'] = None,
                 ggs_deployments: Optional[Sequence['outputs.MigrationGgsDetailsGgsDeployment']] = None,
                 replicat: Optional['outputs.MigrationGgsDetailsReplicat'] = None):
        """
        :param builtins.int acceptable_lag: (Updatable) ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        :param 'MigrationGgsDetailsExtractArgs' extract: (Updatable) Parameters for GoldenGate Extract processes.
        :param Sequence['MigrationGgsDetailsGgsDeploymentArgs'] ggs_deployments: Details about Oracle GoldenGate GGS Deployment.
        :param 'MigrationGgsDetailsReplicatArgs' replicat: (Updatable) Parameters for GoldenGate Replicat processes.
        """
        if acceptable_lag is not None:
            pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        if extract is not None:
            pulumi.set(__self__, "extract", extract)
        if ggs_deployments is not None:
            pulumi.set(__self__, "ggs_deployments", ggs_deployments)
        if replicat is not None:
            pulumi.set(__self__, "replicat", replicat)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> Optional[builtins.int]:
        """
        (Updatable) ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        """
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter
    def extract(self) -> Optional['outputs.MigrationGgsDetailsExtract']:
        """
        (Updatable) Parameters for GoldenGate Extract processes.
        """
        return pulumi.get(self, "extract")

    @property
    @pulumi.getter(name="ggsDeployments")
    def ggs_deployments(self) -> Optional[Sequence['outputs.MigrationGgsDetailsGgsDeployment']]:
        """
        Details about Oracle GoldenGate GGS Deployment.
        """
        return pulumi.get(self, "ggs_deployments")

    @property
    @pulumi.getter
    def replicat(self) -> Optional['outputs.MigrationGgsDetailsReplicat']:
        """
        (Updatable) Parameters for GoldenGate Replicat processes.
        """
        return pulumi.get(self, "replicat")


@pulumi.output_type
class MigrationGgsDetailsExtract(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "longTransDuration":
            suggest = "long_trans_duration"
        elif key == "performanceProfile":
            suggest = "performance_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGgsDetailsExtract. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGgsDetailsExtract.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGgsDetailsExtract.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 long_trans_duration: Optional[builtins.int] = None,
                 performance_profile: Optional[builtins.str] = None):
        """
        :param builtins.int long_trans_duration: (Updatable) Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        :param builtins.str performance_profile: (Updatable) Extract performance.
        """
        if long_trans_duration is not None:
            pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> Optional[builtins.int]:
        """
        (Updatable) Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        """
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[builtins.str]:
        """
        (Updatable) Extract performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class MigrationGgsDetailsGgsDeployment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"
        elif key == "ggsAdminCredentialsSecretId":
            suggest = "ggs_admin_credentials_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGgsDetailsGgsDeployment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGgsDetailsGgsDeployment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGgsDetailsGgsDeployment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_id: Optional[builtins.str] = None,
                 ggs_admin_credentials_secret_id: Optional[builtins.str] = None):
        """
        :param builtins.str deployment_id: The OCID of the resource being referenced.
        :param builtins.str ggs_admin_credentials_secret_id: The OCID of the resource being referenced.
        """
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if ggs_admin_credentials_secret_id is not None:
            pulumi.set(__self__, "ggs_admin_credentials_secret_id", ggs_admin_credentials_secret_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[builtins.str]:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="ggsAdminCredentialsSecretId")
    def ggs_admin_credentials_secret_id(self) -> Optional[builtins.str]:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "ggs_admin_credentials_secret_id")


@pulumi.output_type
class MigrationGgsDetailsReplicat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "performanceProfile":
            suggest = "performance_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGgsDetailsReplicat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGgsDetailsReplicat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGgsDetailsReplicat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 performance_profile: Optional[builtins.str] = None):
        """
        :param builtins.str performance_profile: (Updatable) Replicat performance.
        """
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[builtins.str]:
        """
        (Updatable) Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class MigrationHubDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyId":
            suggest = "key_id"
        elif key == "restAdminCredentials":
            suggest = "rest_admin_credentials"
        elif key == "vaultId":
            suggest = "vault_id"
        elif key == "acceptableLag":
            suggest = "acceptable_lag"
        elif key == "computeId":
            suggest = "compute_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationHubDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationHubDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationHubDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_id: builtins.str,
                 rest_admin_credentials: 'outputs.MigrationHubDetailsRestAdminCredentials',
                 url: builtins.str,
                 vault_id: builtins.str,
                 acceptable_lag: Optional[builtins.int] = None,
                 compute_id: Optional[builtins.str] = None,
                 extract: Optional['outputs.MigrationHubDetailsExtract'] = None,
                 replicat: Optional['outputs.MigrationHubDetailsReplicat'] = None):
        """
        :param builtins.str key_id: (Updatable) The OCID of the resource being referenced.
        :param 'MigrationHubDetailsRestAdminCredentialsArgs' rest_admin_credentials: (Updatable) Database Administrator Credentials details.
        :param builtins.str url: (Updatable) Endpoint URL.
        :param builtins.str vault_id: (Updatable) The OCID of the resource being referenced.
        :param builtins.int acceptable_lag: (Updatable) ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        :param builtins.str compute_id: (Updatable) The OCID of the resource being referenced.
        :param 'MigrationHubDetailsExtractArgs' extract: (Updatable) Parameters for GoldenGate Extract processes.
        :param 'MigrationHubDetailsReplicatArgs' replicat: (Updatable) Parameters for GoldenGate Replicat processes.
        """
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "rest_admin_credentials", rest_admin_credentials)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "vault_id", vault_id)
        if acceptable_lag is not None:
            pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        if compute_id is not None:
            pulumi.set(__self__, "compute_id", compute_id)
        if extract is not None:
            pulumi.set(__self__, "extract", extract)
        if replicat is not None:
            pulumi.set(__self__, "replicat", replicat)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        (Updatable) The OCID of the resource being referenced.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="restAdminCredentials")
    def rest_admin_credentials(self) -> 'outputs.MigrationHubDetailsRestAdminCredentials':
        """
        (Updatable) Database Administrator Credentials details.
        """
        return pulumi.get(self, "rest_admin_credentials")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        (Updatable) Endpoint URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        (Updatable) The OCID of the resource being referenced.
        """
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> Optional[builtins.int]:
        """
        (Updatable) ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        """
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of the resource being referenced.
        """
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter
    def extract(self) -> Optional['outputs.MigrationHubDetailsExtract']:
        """
        (Updatable) Parameters for GoldenGate Extract processes.
        """
        return pulumi.get(self, "extract")

    @property
    @pulumi.getter
    def replicat(self) -> Optional['outputs.MigrationHubDetailsReplicat']:
        """
        (Updatable) Parameters for GoldenGate Replicat processes.
        """
        return pulumi.get(self, "replicat")


@pulumi.output_type
class MigrationHubDetailsExtract(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "longTransDuration":
            suggest = "long_trans_duration"
        elif key == "performanceProfile":
            suggest = "performance_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationHubDetailsExtract. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationHubDetailsExtract.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationHubDetailsExtract.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 long_trans_duration: Optional[builtins.int] = None,
                 performance_profile: Optional[builtins.str] = None):
        """
        :param builtins.int long_trans_duration: (Updatable) Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        :param builtins.str performance_profile: (Updatable) Extract performance.
        """
        if long_trans_duration is not None:
            pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> Optional[builtins.int]:
        """
        (Updatable) Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        """
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[builtins.str]:
        """
        (Updatable) Extract performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class MigrationHubDetailsReplicat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "performanceProfile":
            suggest = "performance_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationHubDetailsReplicat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationHubDetailsReplicat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationHubDetailsReplicat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 performance_profile: Optional[builtins.str] = None):
        """
        :param builtins.str performance_profile: (Updatable) Replicat performance.
        """
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[builtins.str]:
        """
        (Updatable) Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class MigrationHubDetailsRestAdminCredentials(dict):
    def __init__(__self__, *,
                 password: builtins.str,
                 username: builtins.str):
        """
        :param builtins.str password: (Updatable) Administrator password
        :param builtins.str username: (Updatable) Administrator username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        """
        (Updatable) Administrator password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        (Updatable) Administrator username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class MigrationIncludeObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isOmitExcludedTableFromReplication":
            suggest = "is_omit_excluded_table_from_replication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationIncludeObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationIncludeObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationIncludeObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object: builtins.str,
                 is_omit_excluded_table_from_replication: Optional[builtins.bool] = None,
                 owner: Optional[builtins.str] = None,
                 schema: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str object: Name of the object (regular expression is allowed)
        :param builtins.bool is_omit_excluded_table_from_replication: Whether an excluded table should be omitted from replication. Only valid for database objects  that have are of type TABLE and object status EXCLUDE.
        :param builtins.str owner: Owner of the object (regular expression is allowed)
        :param builtins.str schema: Schema of the object (regular expression is allowed)
        :param builtins.str type: Type of object to exclude. If not specified, matching owners and object names of type TABLE would be excluded.
        """
        pulumi.set(__self__, "object", object)
        if is_omit_excluded_table_from_replication is not None:
            pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Name of the object (regular expression is allowed)
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> Optional[builtins.bool]:
        """
        Whether an excluded table should be omitted from replication. Only valid for database objects  that have are of type TABLE and object status EXCLUDE.
        """
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def owner(self) -> Optional[builtins.str]:
        """
        Owner of the object (regular expression is allowed)
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def schema(self) -> Optional[builtins.str]:
        """
        Schema of the object (regular expression is allowed)
        """
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        Type of object to exclude. If not specified, matching owners and object names of type TABLE would be excluded.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MigrationInitialLoadSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobMode":
            suggest = "job_mode"
        elif key == "dataPumpParameters":
            suggest = "data_pump_parameters"
        elif key == "exportDirectoryObject":
            suggest = "export_directory_object"
        elif key == "handleGrantErrors":
            suggest = "handle_grant_errors"
        elif key == "importDirectoryObject":
            suggest = "import_directory_object"
        elif key == "isConsistent":
            suggest = "is_consistent"
        elif key == "isIgnoreExistingObjects":
            suggest = "is_ignore_existing_objects"
        elif key == "isTzUtc":
            suggest = "is_tz_utc"
        elif key == "metadataRemaps":
            suggest = "metadata_remaps"
        elif key == "primaryKeyCompatibility":
            suggest = "primary_key_compatibility"
        elif key == "tablespaceDetails":
            suggest = "tablespace_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationInitialLoadSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationInitialLoadSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationInitialLoadSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_mode: builtins.str,
                 compatibilities: Optional[Sequence[builtins.str]] = None,
                 data_pump_parameters: Optional['outputs.MigrationInitialLoadSettingsDataPumpParameters'] = None,
                 export_directory_object: Optional['outputs.MigrationInitialLoadSettingsExportDirectoryObject'] = None,
                 handle_grant_errors: Optional[builtins.str] = None,
                 import_directory_object: Optional['outputs.MigrationInitialLoadSettingsImportDirectoryObject'] = None,
                 is_consistent: Optional[builtins.bool] = None,
                 is_ignore_existing_objects: Optional[builtins.bool] = None,
                 is_tz_utc: Optional[builtins.bool] = None,
                 metadata_remaps: Optional[Sequence['outputs.MigrationInitialLoadSettingsMetadataRemap']] = None,
                 primary_key_compatibility: Optional[builtins.str] = None,
                 tablespace_details: Optional['outputs.MigrationInitialLoadSettingsTablespaceDetails'] = None):
        """
        :param builtins.str job_mode: (Updatable) Oracle Job Mode
        :param Sequence[builtins.str] compatibilities: (Updatable) Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
        :param 'MigrationInitialLoadSettingsDataPumpParametersArgs' data_pump_parameters: (Updatable) Optional parameters for Data Pump Export and Import.
        :param 'MigrationInitialLoadSettingsExportDirectoryObjectArgs' export_directory_object: (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
        :param builtins.str handle_grant_errors: (Updatable) The action taken in the event of errors related to GRANT or REVOKE errors.
        :param 'MigrationInitialLoadSettingsImportDirectoryObjectArgs' import_directory_object: (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
        :param builtins.bool is_consistent: (Updatable) Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
        :param builtins.bool is_ignore_existing_objects: (Updatable) Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
        :param builtins.bool is_tz_utc: (Updatable) Include a statement at the start of the dump to set the time zone to UTC.
        :param Sequence['MigrationInitialLoadSettingsMetadataRemapArgs'] metadata_remaps: (Updatable) Defines remapping to be applied to objects as they are processed.
        :param builtins.str primary_key_compatibility: (Updatable) Primary key compatibility option
        :param 'MigrationInitialLoadSettingsTablespaceDetailsArgs' tablespace_details: (Updatable) Migration tablespace settings.
        """
        pulumi.set(__self__, "job_mode", job_mode)
        if compatibilities is not None:
            pulumi.set(__self__, "compatibilities", compatibilities)
        if data_pump_parameters is not None:
            pulumi.set(__self__, "data_pump_parameters", data_pump_parameters)
        if export_directory_object is not None:
            pulumi.set(__self__, "export_directory_object", export_directory_object)
        if handle_grant_errors is not None:
            pulumi.set(__self__, "handle_grant_errors", handle_grant_errors)
        if import_directory_object is not None:
            pulumi.set(__self__, "import_directory_object", import_directory_object)
        if is_consistent is not None:
            pulumi.set(__self__, "is_consistent", is_consistent)
        if is_ignore_existing_objects is not None:
            pulumi.set(__self__, "is_ignore_existing_objects", is_ignore_existing_objects)
        if is_tz_utc is not None:
            pulumi.set(__self__, "is_tz_utc", is_tz_utc)
        if metadata_remaps is not None:
            pulumi.set(__self__, "metadata_remaps", metadata_remaps)
        if primary_key_compatibility is not None:
            pulumi.set(__self__, "primary_key_compatibility", primary_key_compatibility)
        if tablespace_details is not None:
            pulumi.set(__self__, "tablespace_details", tablespace_details)

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> builtins.str:
        """
        (Updatable) Oracle Job Mode
        """
        return pulumi.get(self, "job_mode")

    @property
    @pulumi.getter
    def compatibilities(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
        """
        return pulumi.get(self, "compatibilities")

    @property
    @pulumi.getter(name="dataPumpParameters")
    def data_pump_parameters(self) -> Optional['outputs.MigrationInitialLoadSettingsDataPumpParameters']:
        """
        (Updatable) Optional parameters for Data Pump Export and Import.
        """
        return pulumi.get(self, "data_pump_parameters")

    @property
    @pulumi.getter(name="exportDirectoryObject")
    def export_directory_object(self) -> Optional['outputs.MigrationInitialLoadSettingsExportDirectoryObject']:
        """
        (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
        """
        return pulumi.get(self, "export_directory_object")

    @property
    @pulumi.getter(name="handleGrantErrors")
    def handle_grant_errors(self) -> Optional[builtins.str]:
        """
        (Updatable) The action taken in the event of errors related to GRANT or REVOKE errors.
        """
        return pulumi.get(self, "handle_grant_errors")

    @property
    @pulumi.getter(name="importDirectoryObject")
    def import_directory_object(self) -> Optional['outputs.MigrationInitialLoadSettingsImportDirectoryObject']:
        """
        (Updatable) Directory object details, used to define either import or export directory objects in Data Pump Settings. Import directory is required for Non-Autonomous target connections. If specified for an autonomous target, it will show an error. Export directory will error if there are database link details specified.
        """
        return pulumi.get(self, "import_directory_object")

    @property
    @pulumi.getter(name="isConsistent")
    def is_consistent(self) -> Optional[builtins.bool]:
        """
        (Updatable) Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
        """
        return pulumi.get(self, "is_consistent")

    @property
    @pulumi.getter(name="isIgnoreExistingObjects")
    def is_ignore_existing_objects(self) -> Optional[builtins.bool]:
        """
        (Updatable) Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
        """
        return pulumi.get(self, "is_ignore_existing_objects")

    @property
    @pulumi.getter(name="isTzUtc")
    def is_tz_utc(self) -> Optional[builtins.bool]:
        """
        (Updatable) Include a statement at the start of the dump to set the time zone to UTC.
        """
        return pulumi.get(self, "is_tz_utc")

    @property
    @pulumi.getter(name="metadataRemaps")
    def metadata_remaps(self) -> Optional[Sequence['outputs.MigrationInitialLoadSettingsMetadataRemap']]:
        """
        (Updatable) Defines remapping to be applied to objects as they are processed.
        """
        return pulumi.get(self, "metadata_remaps")

    @property
    @pulumi.getter(name="primaryKeyCompatibility")
    def primary_key_compatibility(self) -> Optional[builtins.str]:
        """
        (Updatable) Primary key compatibility option
        """
        return pulumi.get(self, "primary_key_compatibility")

    @property
    @pulumi.getter(name="tablespaceDetails")
    def tablespace_details(self) -> Optional['outputs.MigrationInitialLoadSettingsTablespaceDetails']:
        """
        (Updatable) Migration tablespace settings.
        """
        return pulumi.get(self, "tablespace_details")


@pulumi.output_type
class MigrationInitialLoadSettingsDataPumpParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeParameters":
            suggest = "exclude_parameters"
        elif key == "exportParallelismDegree":
            suggest = "export_parallelism_degree"
        elif key == "importParallelismDegree":
            suggest = "import_parallelism_degree"
        elif key == "isCluster":
            suggest = "is_cluster"
        elif key == "tableExistsAction":
            suggest = "table_exists_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationInitialLoadSettingsDataPumpParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationInitialLoadSettingsDataPumpParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationInitialLoadSettingsDataPumpParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 estimate: Optional[builtins.str] = None,
                 exclude_parameters: Optional[Sequence[builtins.str]] = None,
                 export_parallelism_degree: Optional[builtins.int] = None,
                 import_parallelism_degree: Optional[builtins.int] = None,
                 is_cluster: Optional[builtins.bool] = None,
                 table_exists_action: Optional[builtins.str] = None):
        """
        :param builtins.str estimate: (Updatable) Estimate size of dumps that will be generated.
        :param Sequence[builtins.str] exclude_parameters: (Updatable) Exclude paratemers for Export and Import.
        :param builtins.int export_parallelism_degree: (Updatable) Maximum number of worker processes that can be used for a Data Pump Export job.
        :param builtins.int import_parallelism_degree: (Updatable) Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
        :param builtins.bool is_cluster: (Updatable) Set to false to force Data Pump worker process to run on one instance.
        :param builtins.str table_exists_action: (Updatable) IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
        """
        if estimate is not None:
            pulumi.set(__self__, "estimate", estimate)
        if exclude_parameters is not None:
            pulumi.set(__self__, "exclude_parameters", exclude_parameters)
        if export_parallelism_degree is not None:
            pulumi.set(__self__, "export_parallelism_degree", export_parallelism_degree)
        if import_parallelism_degree is not None:
            pulumi.set(__self__, "import_parallelism_degree", import_parallelism_degree)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if table_exists_action is not None:
            pulumi.set(__self__, "table_exists_action", table_exists_action)

    @property
    @pulumi.getter
    def estimate(self) -> Optional[builtins.str]:
        """
        (Updatable) Estimate size of dumps that will be generated.
        """
        return pulumi.get(self, "estimate")

    @property
    @pulumi.getter(name="excludeParameters")
    def exclude_parameters(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) Exclude paratemers for Export and Import.
        """
        return pulumi.get(self, "exclude_parameters")

    @property
    @pulumi.getter(name="exportParallelismDegree")
    def export_parallelism_degree(self) -> Optional[builtins.int]:
        """
        (Updatable) Maximum number of worker processes that can be used for a Data Pump Export job.
        """
        return pulumi.get(self, "export_parallelism_degree")

    @property
    @pulumi.getter(name="importParallelismDegree")
    def import_parallelism_degree(self) -> Optional[builtins.int]:
        """
        (Updatable) Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
        """
        return pulumi.get(self, "import_parallelism_degree")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[builtins.bool]:
        """
        (Updatable) Set to false to force Data Pump worker process to run on one instance.
        """
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="tableExistsAction")
    def table_exists_action(self) -> Optional[builtins.str]:
        """
        (Updatable) IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
        """
        return pulumi.get(self, "table_exists_action")


@pulumi.output_type
class MigrationInitialLoadSettingsExportDirectoryObject(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 path: Optional[builtins.str] = None):
        """
        :param builtins.str name: (Updatable) Name of directory object in database
        :param builtins.str path: (Updatable) Absolute path of directory on database server
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        """
        (Updatable) Absolute path of directory on database server
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class MigrationInitialLoadSettingsImportDirectoryObject(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 path: Optional[builtins.str] = None):
        """
        :param builtins.str name: (Updatable) Name of directory object in database
        :param builtins.str path: (Updatable) Absolute path of directory on database server
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[builtins.str]:
        """
        (Updatable) Absolute path of directory on database server
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class MigrationInitialLoadSettingsMetadataRemap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newValue":
            suggest = "new_value"
        elif key == "oldValue":
            suggest = "old_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationInitialLoadSettingsMetadataRemap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationInitialLoadSettingsMetadataRemap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationInitialLoadSettingsMetadataRemap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_value: Optional[builtins.str] = None,
                 old_value: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str new_value: (Updatable) Specifies the new value that oldValue should be translated into.
        :param builtins.str old_value: (Updatable) Specifies the value which needs to be reset.
        :param builtins.str type: (Updatable) Type of remap. Refer to [METADATA_REMAP Procedure ](https://docs.oracle.com/en/database/oracle/oracle-database/19/arpls/DBMS_DATAPUMP.html#GUID-0FC32790-91E6-4781-87A3-229DE024CB3D)
        """
        if new_value is not None:
            pulumi.set(__self__, "new_value", new_value)
        if old_value is not None:
            pulumi.set(__self__, "old_value", old_value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> Optional[builtins.str]:
        """
        (Updatable) Specifies the new value that oldValue should be translated into.
        """
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> Optional[builtins.str]:
        """
        (Updatable) Specifies the value which needs to be reset.
        """
        return pulumi.get(self, "old_value")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        (Updatable) Type of remap. Refer to [METADATA_REMAP Procedure ](https://docs.oracle.com/en/database/oracle/oracle-database/19/arpls/DBMS_DATAPUMP.html#GUID-0FC32790-91E6-4781-87A3-229DE024CB3D)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MigrationInitialLoadSettingsTablespaceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetType":
            suggest = "target_type"
        elif key == "blockSizeInKbs":
            suggest = "block_size_in_kbs"
        elif key == "extendSizeInMbs":
            suggest = "extend_size_in_mbs"
        elif key == "isAutoCreate":
            suggest = "is_auto_create"
        elif key == "isBigFile":
            suggest = "is_big_file"
        elif key == "remapTarget":
            suggest = "remap_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationInitialLoadSettingsTablespaceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationInitialLoadSettingsTablespaceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationInitialLoadSettingsTablespaceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_type: builtins.str,
                 block_size_in_kbs: Optional[builtins.str] = None,
                 extend_size_in_mbs: Optional[builtins.int] = None,
                 is_auto_create: Optional[builtins.bool] = None,
                 is_big_file: Optional[builtins.bool] = None,
                 remap_target: Optional[builtins.str] = None):
        """
        :param builtins.str target_type: (Updatable) Type of Database Base Migration Target.
        :param builtins.str block_size_in_kbs: (Updatable) Size of Oracle database blocks in KB.
        :param builtins.int extend_size_in_mbs: (Updatable) Size to extend the tablespace in MB.  Note: Only applicable if 'isBigFile' property is set to true.
        :param builtins.bool is_auto_create: (Updatable) Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
        :param builtins.bool is_big_file: (Updatable) Set this property to true to enable tablespace of the type big file.
        :param builtins.str remap_target: (Updatable) Name of the tablespace on the target database to which the source database tablespace is to be remapped.
        """
        pulumi.set(__self__, "target_type", target_type)
        if block_size_in_kbs is not None:
            pulumi.set(__self__, "block_size_in_kbs", block_size_in_kbs)
        if extend_size_in_mbs is not None:
            pulumi.set(__self__, "extend_size_in_mbs", extend_size_in_mbs)
        if is_auto_create is not None:
            pulumi.set(__self__, "is_auto_create", is_auto_create)
        if is_big_file is not None:
            pulumi.set(__self__, "is_big_file", is_big_file)
        if remap_target is not None:
            pulumi.set(__self__, "remap_target", remap_target)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> builtins.str:
        """
        (Updatable) Type of Database Base Migration Target.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="blockSizeInKbs")
    def block_size_in_kbs(self) -> Optional[builtins.str]:
        """
        (Updatable) Size of Oracle database blocks in KB.
        """
        return pulumi.get(self, "block_size_in_kbs")

    @property
    @pulumi.getter(name="extendSizeInMbs")
    def extend_size_in_mbs(self) -> Optional[builtins.int]:
        """
        (Updatable) Size to extend the tablespace in MB.  Note: Only applicable if 'isBigFile' property is set to true.
        """
        return pulumi.get(self, "extend_size_in_mbs")

    @property
    @pulumi.getter(name="isAutoCreate")
    def is_auto_create(self) -> Optional[builtins.bool]:
        """
        (Updatable) Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
        """
        return pulumi.get(self, "is_auto_create")

    @property
    @pulumi.getter(name="isBigFile")
    def is_big_file(self) -> Optional[builtins.bool]:
        """
        (Updatable) Set this property to true to enable tablespace of the type big file.
        """
        return pulumi.get(self, "is_big_file")

    @property
    @pulumi.getter(name="remapTarget")
    def remap_target(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of the tablespace on the target database to which the source database tablespace is to be remapped.
        """
        return pulumi.get(self, "remap_target")


@pulumi.output_type
class GetConnectionAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: The name of the property entry.
        :param builtins.str value: The value of the property entry.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the property entry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the property entry.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionIngressIpResult(dict):
    def __init__(__self__, *,
                 ingress_ip: builtins.str):
        """
        :param builtins.str ingress_ip: A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> builtins.str:
        """
        A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class GetConnectionsConnectionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetConnectionsConnectionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetConnectionsConnectionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_attributes: Sequence['outputs.GetConnectionsConnectionCollectionItemAdditionalAttributeResult'],
                 compartment_id: builtins.str,
                 connection_string: builtins.str,
                 connection_type: builtins.str,
                 database_id: builtins.str,
                 database_name: builtins.str,
                 db_system_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 host: builtins.str,
                 id: builtins.str,
                 ingress_ips: Sequence['outputs.GetConnectionsConnectionCollectionItemIngressIpResult'],
                 key_id: builtins.str,
                 lifecycle_details: builtins.str,
                 nsg_ids: Sequence[builtins.str],
                 password: builtins.str,
                 port: builtins.int,
                 private_endpoint_id: builtins.str,
                 replication_password: builtins.str,
                 replication_username: builtins.str,
                 secret_id: builtins.str,
                 security_protocol: builtins.str,
                 ssh_host: builtins.str,
                 ssh_key: builtins.str,
                 ssh_sudo_location: builtins.str,
                 ssh_user: builtins.str,
                 ssl_ca: builtins.str,
                 ssl_cert: builtins.str,
                 ssl_crl: builtins.str,
                 ssl_key: builtins.str,
                 ssl_mode: builtins.str,
                 state: builtins.str,
                 subnet_id: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 technology_type: builtins.str,
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 username: builtins.str,
                 vault_id: builtins.str,
                 wallet: builtins.str):
        """
        :param Sequence['GetConnectionsConnectionCollectionItemAdditionalAttributeArgs'] additional_attributes: An array of name-value pair attribute entries.
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param builtins.str connection_string: Connect descriptor or Easy Connect Naming method used to connect to a database.
        :param builtins.str connection_type: The array of connection types.
        :param builtins.str database_id: The OCID of the database being referenced.
        :param builtins.str database_name: The name of the database being referenced.
        :param builtins.str db_system_id: The OCID of the database system being referenced.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: A user-friendly description. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
        :param builtins.str host: The IP Address of the host.
        :param builtins.str id: The OCID of the connection being referenced.
        :param Sequence['GetConnectionsConnectionCollectionItemIngressIpArgs'] ingress_ips: List of ingress IP addresses from where to connect to this connection's privateIp.
        :param builtins.str key_id: The OCID of the key used in cryptographic operations.
        :param builtins.str lifecycle_details: The message describing the current state of the connection's lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
        :param Sequence[builtins.str] nsg_ids: An array of Network Security Group OCIDs used to define network access for Connections.
        :param builtins.str password: The password (credential) used when creating or updating this resource.
        :param builtins.int port: The port to be used for the connection.
        :param builtins.str private_endpoint_id: The OCID of the resource being referenced.
        :param builtins.str replication_password: The password (credential) used when creating or updating this resource.
        :param builtins.str replication_username: The username (credential) used when creating or updating this resource.
        :param builtins.str secret_id: The OCID of the resource being referenced.
        :param builtins.str security_protocol: Security Protocol to be used for the connection.
        :param builtins.str ssh_host: Name of the host the SSH key is valid for.
        :param builtins.str ssh_key: Private SSH key string.
        :param builtins.str ssh_sudo_location: Sudo location
        :param builtins.str ssh_user: The username (credential) used when creating or updating this resource.
        :param builtins.str ssl_mode: SSL mode to be used for the connection.
        :param builtins.str state: The current state of the Database Migration Deployment.
        :param builtins.str subnet_id: Oracle Cloud Infrastructure resource ID.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str technology_type: The array of technology types.
        :param builtins.str time_created: The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str time_updated: The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        :param builtins.str username: The username (credential) used when creating or updating this resource.
        :param builtins.str vault_id: Oracle Cloud Infrastructure resource ID.
        """
        pulumi.set(__self__, "additional_attributes", additional_attributes)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_string", connection_string)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ingress_ips", ingress_ips)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "replication_password", replication_password)
        pulumi.set(__self__, "replication_username", replication_username)
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "security_protocol", security_protocol)
        pulumi.set(__self__, "ssh_host", ssh_host)
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "ssh_sudo_location", ssh_sudo_location)
        pulumi.set(__self__, "ssh_user", ssh_user)
        pulumi.set(__self__, "ssl_ca", ssl_ca)
        pulumi.set(__self__, "ssl_cert", ssl_cert)
        pulumi.set(__self__, "ssl_crl", ssl_crl)
        pulumi.set(__self__, "ssl_key", ssl_key)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "technology_type", technology_type)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "vault_id", vault_id)
        pulumi.set(__self__, "wallet", wallet)

    @property
    @pulumi.getter(name="additionalAttributes")
    def additional_attributes(self) -> Sequence['outputs.GetConnectionsConnectionCollectionItemAdditionalAttributeResult']:
        """
        An array of name-value pair attribute entries.
        """
        return pulumi.get(self, "additional_attributes")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> builtins.str:
        """
        Connect descriptor or Easy Connect Naming method used to connect to a database.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> builtins.str:
        """
        The array of connection types.
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> builtins.str:
        """
        The OCID of the database being referenced.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> builtins.str:
        """
        The name of the database being referenced.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> builtins.str:
        """
        The OCID of the database system being referenced.
        """
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A user-friendly description. Does not have to be unique, and it's changeable.  Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see Resource Tags. Example: {"Department": "Finance"}
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def host(self) -> builtins.str:
        """
        The IP Address of the host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the connection being referenced.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressIps")
    def ingress_ips(self) -> Sequence['outputs.GetConnectionsConnectionCollectionItemIngressIpResult']:
        """
        List of ingress IP addresses from where to connect to this connection's privateIp.
        """
        return pulumi.get(self, "ingress_ips")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        The OCID of the key used in cryptographic operations.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        The message describing the current state of the connection's lifecycle in detail. For example, can be used to provide actionable information for a connection in a Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[builtins.str]:
        """
        An array of Network Security Group OCIDs used to define network access for Connections.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        """
        The password (credential) used when creating or updating this resource.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        The port to be used for the connection.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="replicationPassword")
    def replication_password(self) -> builtins.str:
        """
        The password (credential) used when creating or updating this resource.
        """
        return pulumi.get(self, "replication_password")

    @property
    @pulumi.getter(name="replicationUsername")
    def replication_username(self) -> builtins.str:
        """
        The username (credential) used when creating or updating this resource.
        """
        return pulumi.get(self, "replication_username")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> builtins.str:
        """
        Security Protocol to be used for the connection.
        """
        return pulumi.get(self, "security_protocol")

    @property
    @pulumi.getter(name="sshHost")
    def ssh_host(self) -> builtins.str:
        """
        Name of the host the SSH key is valid for.
        """
        return pulumi.get(self, "ssh_host")

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> builtins.str:
        """
        Private SSH key string.
        """
        return pulumi.get(self, "ssh_key")

    @property
    @pulumi.getter(name="sshSudoLocation")
    def ssh_sudo_location(self) -> builtins.str:
        """
        Sudo location
        """
        return pulumi.get(self, "ssh_sudo_location")

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> builtins.str:
        """
        The username (credential) used when creating or updating this resource.
        """
        return pulumi.get(self, "ssh_user")

    @property
    @pulumi.getter(name="sslCa")
    def ssl_ca(self) -> builtins.str:
        return pulumi.get(self, "ssl_ca")

    @property
    @pulumi.getter(name="sslCert")
    def ssl_cert(self) -> builtins.str:
        return pulumi.get(self, "ssl_cert")

    @property
    @pulumi.getter(name="sslCrl")
    def ssl_crl(self) -> builtins.str:
        return pulumi.get(self, "ssl_crl")

    @property
    @pulumi.getter(name="sslKey")
    def ssl_key(self) -> builtins.str:
        return pulumi.get(self, "ssl_key")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> builtins.str:
        """
        SSL mode to be used for the connection.
        """
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the Database Migration Deployment.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        Oracle Cloud Infrastructure resource ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="technologyType")
    def technology_type(self) -> builtins.str:
        """
        The array of technology types.
        """
        return pulumi.get(self, "technology_type")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time when this resource was created. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time when this resource was updated. An RFC3339 formatted datetime string such as `2016-08-25T21:10:29.600Z`.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        The username (credential) used when creating or updating this resource.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        Oracle Cloud Infrastructure resource ID.
        """
        return pulumi.get(self, "vault_id")

    @property
    @pulumi.getter
    def wallet(self) -> builtins.str:
        return pulumi.get(self, "wallet")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemAdditionalAttributeResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: The name of the property entry.
        :param builtins.str value: The value of the property entry.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the property entry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the property entry.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemIngressIpResult(dict):
    def __init__(__self__, *,
                 ingress_ip: builtins.str):
        """
        :param builtins.str ingress_ip: A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        pulumi.set(__self__, "ingress_ip", ingress_ip)

    @property
    @pulumi.getter(name="ingressIp")
    def ingress_ip(self) -> builtins.str:
        """
        A Private Endpoint IPv4 or IPv6 Address created in the customer's subnet.
        """
        return pulumi.get(self, "ingress_ip")


@pulumi.output_type
class GetConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the property entry.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the property entry.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobAdvisorReportReportLocationDetailResult(dict):
    def __init__(__self__, *,
                 location_in_source: builtins.str,
                 object_storage_details: Sequence['outputs.GetJobAdvisorReportReportLocationDetailObjectStorageDetailResult']):
        """
        :param builtins.str location_in_source: File system path on the Source Database host where the Premigration Advisor report can be accessed.
        :param Sequence['GetJobAdvisorReportReportLocationDetailObjectStorageDetailArgs'] object_storage_details: Details to access Premigration Advisor report in the specified Object Storage bucket.
        """
        pulumi.set(__self__, "location_in_source", location_in_source)
        pulumi.set(__self__, "object_storage_details", object_storage_details)

    @property
    @pulumi.getter(name="locationInSource")
    def location_in_source(self) -> builtins.str:
        """
        File system path on the Source Database host where the Premigration Advisor report can be accessed.
        """
        return pulumi.get(self, "location_in_source")

    @property
    @pulumi.getter(name="objectStorageDetails")
    def object_storage_details(self) -> Sequence['outputs.GetJobAdvisorReportReportLocationDetailObjectStorageDetailResult']:
        """
        Details to access Premigration Advisor report in the specified Object Storage bucket.
        """
        return pulumi.get(self, "object_storage_details")


@pulumi.output_type
class GetJobAdvisorReportReportLocationDetailObjectStorageDetailResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 namespace: builtins.str,
                 object: builtins.str):
        """
        :param builtins.str bucket: Name of the bucket containing the Premigration Advisor report.
        :param builtins.str namespace: Object Storage namespace.
        :param builtins.str object: Premigration Advisor report object name.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Name of the bucket containing the Premigration Advisor report.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Object Storage namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        """
        Premigration Advisor report object name.
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetJobOutputItemResult(dict):
    def __init__(__self__, *,
                 message: builtins.str):
        """
        :param builtins.str message: Job output line.
        """
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def message(self) -> builtins.str:
        """
        Job output line.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class GetMigrationAdvancedParameterResult(dict):
    def __init__(__self__, *,
                 data_type: builtins.str,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str data_type: Parameter data type.
        :param builtins.str name: Name of directory object in database
        :param builtins.str value: If a STRING data type then the value should be an array of characters,  if a INTEGER data type then the value should be an integer value,  if a FLOAT data type then the value should be an float value, if a BOOLEAN data type then the value should be TRUE or FALSE.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> builtins.str:
        """
        Parameter data type.
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        If a STRING data type then the value should be an array of characters,  if a INTEGER data type then the value should be an integer value,  if a FLOAT data type then the value should be an float value, if a BOOLEAN data type then the value should be TRUE or FALSE.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMigrationAdvisorSettingResult(dict):
    def __init__(__self__, *,
                 is_ignore_errors: builtins.bool,
                 is_skip_advisor: builtins.bool):
        """
        :param builtins.bool is_ignore_errors: True to not interrupt migration execution due to Pre-Migration Advisor errors. Default is false.
        :param builtins.bool is_skip_advisor: True to skip the Pre-Migration Advisor execution. Default is false.
        """
        pulumi.set(__self__, "is_ignore_errors", is_ignore_errors)
        pulumi.set(__self__, "is_skip_advisor", is_skip_advisor)

    @property
    @pulumi.getter(name="isIgnoreErrors")
    def is_ignore_errors(self) -> builtins.bool:
        """
        True to not interrupt migration execution due to Pre-Migration Advisor errors. Default is false.
        """
        return pulumi.get(self, "is_ignore_errors")

    @property
    @pulumi.getter(name="isSkipAdvisor")
    def is_skip_advisor(self) -> builtins.bool:
        """
        True to skip the Pre-Migration Advisor execution. Default is false.
        """
        return pulumi.get(self, "is_skip_advisor")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailResult(dict):
    def __init__(__self__, *,
                 access_key_id: builtins.str,
                 name: builtins.str,
                 object_storage_buckets: Sequence['outputs.GetMigrationDataTransferMediumDetailObjectStorageBucketResult'],
                 region: builtins.str,
                 secret_access_key: builtins.str,
                 shared_storage_mount_target_id: builtins.str,
                 sources: Sequence['outputs.GetMigrationDataTransferMediumDetailSourceResult'],
                 targets: Sequence['outputs.GetMigrationDataTransferMediumDetailTargetResult'],
                 type: builtins.str):
        """
        :param builtins.str access_key_id: AWS access key credentials identifier Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        :param builtins.str name: Name of directory object in database
        :param Sequence['GetMigrationDataTransferMediumDetailObjectStorageBucketArgs'] object_storage_buckets: In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Data Pump dump files for the migration. Additionally, it can be specified alongside a database link data transfer medium.
        :param builtins.str region: AWS region code where the S3 bucket is located. Region code should match the documented available regions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions
        :param builtins.str secret_access_key: AWS secret access key credentials Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        :param builtins.str shared_storage_mount_target_id: OCID of the shared storage mount target
        :param Sequence['GetMigrationDataTransferMediumDetailSourceArgs'] sources: Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        :param Sequence['GetMigrationDataTransferMediumDetailTargetArgs'] targets: Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        :param builtins.str type: The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_storage_buckets", object_storage_buckets)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "shared_storage_mount_target_id", shared_storage_mount_target_id)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> builtins.str:
        """
        AWS access key credentials identifier Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStorageBuckets")
    def object_storage_buckets(self) -> Sequence['outputs.GetMigrationDataTransferMediumDetailObjectStorageBucketResult']:
        """
        In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Data Pump dump files for the migration. Additionally, it can be specified alongside a database link data transfer medium.
        """
        return pulumi.get(self, "object_storage_buckets")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        AWS region code where the S3 bucket is located. Region code should match the documented available regions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> builtins.str:
        """
        AWS secret access key credentials Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        """
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="sharedStorageMountTargetId")
    def shared_storage_mount_target_id(self) -> builtins.str:
        """
        OCID of the shared storage mount target
        """
        return pulumi.get(self, "shared_storage_mount_target_id")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetMigrationDataTransferMediumDetailSourceResult']:
        """
        Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetMigrationDataTransferMediumDetailTargetResult']:
        """
        Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailObjectStorageBucketResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 namespace: builtins.str):
        """
        :param builtins.str bucket: Bucket name.
        :param builtins.str namespace: Namespace name of the object store bucket.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace name of the object store bucket.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailSourceResult(dict):
    def __init__(__self__, *,
                 kind: builtins.str,
                 oci_home: builtins.str,
                 wallet_location: builtins.str):
        """
        :param builtins.str kind: Type of dump transfer to use during migration in source or target host. Default kind is CURL
        :param builtins.str oci_home: Path to the Oracle Cloud Infrastructure CLI installation in the node.
        :param builtins.str wallet_location: Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "oci_home", oci_home)
        pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Type of dump transfer to use during migration in source or target host. Default kind is CURL
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> builtins.str:
        """
        Path to the Oracle Cloud Infrastructure CLI installation in the node.
        """
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> builtins.str:
        """
        Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailTargetResult(dict):
    def __init__(__self__, *,
                 kind: builtins.str,
                 oci_home: builtins.str,
                 wallet_location: builtins.str):
        """
        :param builtins.str kind: Type of dump transfer to use during migration in source or target host. Default kind is CURL
        :param builtins.str oci_home: Path to the Oracle Cloud Infrastructure CLI installation in the node.
        :param builtins.str wallet_location: Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "oci_home", oci_home)
        pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Type of dump transfer to use during migration in source or target host. Default kind is CURL
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> builtins.str:
        """
        Path to the Oracle Cloud Infrastructure CLI installation in the node.
        """
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> builtins.str:
        """
        Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class GetMigrationExcludeObjectResult(dict):
    def __init__(__self__, *,
                 is_omit_excluded_table_from_replication: builtins.bool,
                 object: builtins.str,
                 owner: builtins.str,
                 schema: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str type: The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> builtins.bool:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def schema(self) -> builtins.str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationGgsDetailResult(dict):
    def __init__(__self__, *,
                 acceptable_lag: builtins.int,
                 extracts: Sequence['outputs.GetMigrationGgsDetailExtractResult'],
                 ggs_deployments: Sequence['outputs.GetMigrationGgsDetailGgsDeploymentResult'],
                 replicats: Sequence['outputs.GetMigrationGgsDetailReplicatResult']):
        """
        :param builtins.int acceptable_lag: ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        :param Sequence['GetMigrationGgsDetailExtractArgs'] extracts: Parameters for Extract processes.
        :param Sequence['GetMigrationGgsDetailGgsDeploymentArgs'] ggs_deployments: Details about Oracle GoldenGate GGS Deployment.
        :param Sequence['GetMigrationGgsDetailReplicatArgs'] replicats: Parameters for Replicat processes.
        """
        pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        pulumi.set(__self__, "extracts", extracts)
        pulumi.set(__self__, "ggs_deployments", ggs_deployments)
        pulumi.set(__self__, "replicats", replicats)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> builtins.int:
        """
        ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        """
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter
    def extracts(self) -> Sequence['outputs.GetMigrationGgsDetailExtractResult']:
        """
        Parameters for Extract processes.
        """
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter(name="ggsDeployments")
    def ggs_deployments(self) -> Sequence['outputs.GetMigrationGgsDetailGgsDeploymentResult']:
        """
        Details about Oracle GoldenGate GGS Deployment.
        """
        return pulumi.get(self, "ggs_deployments")

    @property
    @pulumi.getter
    def replicats(self) -> Sequence['outputs.GetMigrationGgsDetailReplicatResult']:
        """
        Parameters for Replicat processes.
        """
        return pulumi.get(self, "replicats")


@pulumi.output_type
class GetMigrationGgsDetailExtractResult(dict):
    def __init__(__self__, *,
                 long_trans_duration: builtins.int,
                 performance_profile: builtins.str):
        """
        :param builtins.int long_trans_duration: Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        :param builtins.str performance_profile: Replicat performance.
        """
        pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> builtins.int:
        """
        Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        """
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> builtins.str:
        """
        Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationGgsDetailGgsDeploymentResult(dict):
    def __init__(__self__, *,
                 deployment_id: builtins.str,
                 ggs_admin_credentials_secret_id: builtins.str):
        """
        :param builtins.str deployment_id: The OCID of the resource being referenced.
        :param builtins.str ggs_admin_credentials_secret_id: The OCID of the resource being referenced.
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "ggs_admin_credentials_secret_id", ggs_admin_credentials_secret_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="ggsAdminCredentialsSecretId")
    def ggs_admin_credentials_secret_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "ggs_admin_credentials_secret_id")


@pulumi.output_type
class GetMigrationGgsDetailReplicatResult(dict):
    def __init__(__self__, *,
                 performance_profile: builtins.str):
        """
        :param builtins.str performance_profile: Replicat performance.
        """
        pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> builtins.str:
        """
        Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationHubDetailResult(dict):
    def __init__(__self__, *,
                 acceptable_lag: builtins.int,
                 compute_id: builtins.str,
                 extracts: Sequence['outputs.GetMigrationHubDetailExtractResult'],
                 key_id: builtins.str,
                 replicats: Sequence['outputs.GetMigrationHubDetailReplicatResult'],
                 rest_admin_credentials: Sequence['outputs.GetMigrationHubDetailRestAdminCredentialResult'],
                 url: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.int acceptable_lag: ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        :param builtins.str compute_id: The OCID of the resource being referenced.
        :param Sequence['GetMigrationHubDetailExtractArgs'] extracts: Parameters for Extract processes.
        :param builtins.str key_id: The OCID of the resource being referenced.
        :param Sequence['GetMigrationHubDetailReplicatArgs'] replicats: Parameters for Replicat processes.
        :param Sequence['GetMigrationHubDetailRestAdminCredentialArgs'] rest_admin_credentials: Database Administrator Credentials details.
        :param builtins.str url: Endpoint URL.
        :param builtins.str vault_id: The OCID of the resource being referenced.
        """
        pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        pulumi.set(__self__, "compute_id", compute_id)
        pulumi.set(__self__, "extracts", extracts)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "replicats", replicats)
        pulumi.set(__self__, "rest_admin_credentials", rest_admin_credentials)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> builtins.int:
        """
        ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        """
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter
    def extracts(self) -> Sequence['outputs.GetMigrationHubDetailExtractResult']:
        """
        Parameters for Extract processes.
        """
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def replicats(self) -> Sequence['outputs.GetMigrationHubDetailReplicatResult']:
        """
        Parameters for Replicat processes.
        """
        return pulumi.get(self, "replicats")

    @property
    @pulumi.getter(name="restAdminCredentials")
    def rest_admin_credentials(self) -> Sequence['outputs.GetMigrationHubDetailRestAdminCredentialResult']:
        """
        Database Administrator Credentials details.
        """
        return pulumi.get(self, "rest_admin_credentials")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        Endpoint URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetMigrationHubDetailExtractResult(dict):
    def __init__(__self__, *,
                 long_trans_duration: builtins.int,
                 performance_profile: builtins.str):
        """
        :param builtins.int long_trans_duration: Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        :param builtins.str performance_profile: Replicat performance.
        """
        pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> builtins.int:
        """
        Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        """
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> builtins.str:
        """
        Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationHubDetailReplicatResult(dict):
    def __init__(__self__, *,
                 performance_profile: builtins.str):
        """
        :param builtins.str performance_profile: Replicat performance.
        """
        pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> builtins.str:
        """
        Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationHubDetailRestAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: builtins.str,
                 username: builtins.str):
        """
        :param builtins.str username: Administrator username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        Administrator username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationIncludeObjectResult(dict):
    def __init__(__self__, *,
                 is_omit_excluded_table_from_replication: builtins.bool,
                 object: builtins.str,
                 owner: builtins.str,
                 schema: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str type: The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> builtins.bool:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def schema(self) -> builtins.str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationInitialLoadSettingResult(dict):
    def __init__(__self__, *,
                 compatibilities: Sequence[builtins.str],
                 data_pump_parameters: Sequence['outputs.GetMigrationInitialLoadSettingDataPumpParameterResult'],
                 export_directory_objects: Sequence['outputs.GetMigrationInitialLoadSettingExportDirectoryObjectResult'],
                 handle_grant_errors: builtins.str,
                 import_directory_objects: Sequence['outputs.GetMigrationInitialLoadSettingImportDirectoryObjectResult'],
                 is_consistent: builtins.bool,
                 is_ignore_existing_objects: builtins.bool,
                 is_tz_utc: builtins.bool,
                 job_mode: builtins.str,
                 metadata_remaps: Sequence['outputs.GetMigrationInitialLoadSettingMetadataRemapResult'],
                 primary_key_compatibility: builtins.str,
                 tablespace_details: Sequence['outputs.GetMigrationInitialLoadSettingTablespaceDetailResult']):
        """
        :param Sequence[builtins.str] compatibilities: Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
        :param Sequence['GetMigrationInitialLoadSettingDataPumpParameterArgs'] data_pump_parameters: Optional parameters for Data Pump Export and Import.
        :param Sequence['GetMigrationInitialLoadSettingExportDirectoryObjectArgs'] export_directory_objects: Directory object details, used to define either import or export directory objects in Data Pump Settings.
        :param builtins.str handle_grant_errors: The action taken in the event of errors related to GRANT or REVOKE errors.
        :param Sequence['GetMigrationInitialLoadSettingImportDirectoryObjectArgs'] import_directory_objects: Directory object details, used to define either import or export directory objects in Data Pump Settings.
        :param builtins.bool is_consistent: Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
        :param builtins.bool is_ignore_existing_objects: Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
        :param builtins.bool is_tz_utc: Include a statement at the start of the dump to set the time zone to UTC.
        :param builtins.str job_mode: Oracle Job Mode
        :param Sequence['GetMigrationInitialLoadSettingMetadataRemapArgs'] metadata_remaps: Defines remapping to be applied to objects as they are processed.
        :param builtins.str primary_key_compatibility: Primary key compatibility option
        :param Sequence['GetMigrationInitialLoadSettingTablespaceDetailArgs'] tablespace_details: Migration tablespace settings.
        """
        pulumi.set(__self__, "compatibilities", compatibilities)
        pulumi.set(__self__, "data_pump_parameters", data_pump_parameters)
        pulumi.set(__self__, "export_directory_objects", export_directory_objects)
        pulumi.set(__self__, "handle_grant_errors", handle_grant_errors)
        pulumi.set(__self__, "import_directory_objects", import_directory_objects)
        pulumi.set(__self__, "is_consistent", is_consistent)
        pulumi.set(__self__, "is_ignore_existing_objects", is_ignore_existing_objects)
        pulumi.set(__self__, "is_tz_utc", is_tz_utc)
        pulumi.set(__self__, "job_mode", job_mode)
        pulumi.set(__self__, "metadata_remaps", metadata_remaps)
        pulumi.set(__self__, "primary_key_compatibility", primary_key_compatibility)
        pulumi.set(__self__, "tablespace_details", tablespace_details)

    @property
    @pulumi.getter
    def compatibilities(self) -> Sequence[builtins.str]:
        """
        Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
        """
        return pulumi.get(self, "compatibilities")

    @property
    @pulumi.getter(name="dataPumpParameters")
    def data_pump_parameters(self) -> Sequence['outputs.GetMigrationInitialLoadSettingDataPumpParameterResult']:
        """
        Optional parameters for Data Pump Export and Import.
        """
        return pulumi.get(self, "data_pump_parameters")

    @property
    @pulumi.getter(name="exportDirectoryObjects")
    def export_directory_objects(self) -> Sequence['outputs.GetMigrationInitialLoadSettingExportDirectoryObjectResult']:
        """
        Directory object details, used to define either import or export directory objects in Data Pump Settings.
        """
        return pulumi.get(self, "export_directory_objects")

    @property
    @pulumi.getter(name="handleGrantErrors")
    def handle_grant_errors(self) -> builtins.str:
        """
        The action taken in the event of errors related to GRANT or REVOKE errors.
        """
        return pulumi.get(self, "handle_grant_errors")

    @property
    @pulumi.getter(name="importDirectoryObjects")
    def import_directory_objects(self) -> Sequence['outputs.GetMigrationInitialLoadSettingImportDirectoryObjectResult']:
        """
        Directory object details, used to define either import or export directory objects in Data Pump Settings.
        """
        return pulumi.get(self, "import_directory_objects")

    @property
    @pulumi.getter(name="isConsistent")
    def is_consistent(self) -> builtins.bool:
        """
        Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
        """
        return pulumi.get(self, "is_consistent")

    @property
    @pulumi.getter(name="isIgnoreExistingObjects")
    def is_ignore_existing_objects(self) -> builtins.bool:
        """
        Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
        """
        return pulumi.get(self, "is_ignore_existing_objects")

    @property
    @pulumi.getter(name="isTzUtc")
    def is_tz_utc(self) -> builtins.bool:
        """
        Include a statement at the start of the dump to set the time zone to UTC.
        """
        return pulumi.get(self, "is_tz_utc")

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> builtins.str:
        """
        Oracle Job Mode
        """
        return pulumi.get(self, "job_mode")

    @property
    @pulumi.getter(name="metadataRemaps")
    def metadata_remaps(self) -> Sequence['outputs.GetMigrationInitialLoadSettingMetadataRemapResult']:
        """
        Defines remapping to be applied to objects as they are processed.
        """
        return pulumi.get(self, "metadata_remaps")

    @property
    @pulumi.getter(name="primaryKeyCompatibility")
    def primary_key_compatibility(self) -> builtins.str:
        """
        Primary key compatibility option
        """
        return pulumi.get(self, "primary_key_compatibility")

    @property
    @pulumi.getter(name="tablespaceDetails")
    def tablespace_details(self) -> Sequence['outputs.GetMigrationInitialLoadSettingTablespaceDetailResult']:
        """
        Migration tablespace settings.
        """
        return pulumi.get(self, "tablespace_details")


@pulumi.output_type
class GetMigrationInitialLoadSettingDataPumpParameterResult(dict):
    def __init__(__self__, *,
                 estimate: builtins.str,
                 exclude_parameters: Sequence[builtins.str],
                 export_parallelism_degree: builtins.int,
                 import_parallelism_degree: builtins.int,
                 is_cluster: builtins.bool,
                 table_exists_action: builtins.str):
        """
        :param builtins.str estimate: Estimate size of dumps that will be generated.
        :param Sequence[builtins.str] exclude_parameters: Exclude paratemers for Export and Import.
        :param builtins.int export_parallelism_degree: Maximum number of worker processes that can be used for a Data Pump Export job.
        :param builtins.int import_parallelism_degree: Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
        :param builtins.bool is_cluster: Set to false to force Data Pump worker process to run on one instance.
        :param builtins.str table_exists_action: IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
        """
        pulumi.set(__self__, "estimate", estimate)
        pulumi.set(__self__, "exclude_parameters", exclude_parameters)
        pulumi.set(__self__, "export_parallelism_degree", export_parallelism_degree)
        pulumi.set(__self__, "import_parallelism_degree", import_parallelism_degree)
        pulumi.set(__self__, "is_cluster", is_cluster)
        pulumi.set(__self__, "table_exists_action", table_exists_action)

    @property
    @pulumi.getter
    def estimate(self) -> builtins.str:
        """
        Estimate size of dumps that will be generated.
        """
        return pulumi.get(self, "estimate")

    @property
    @pulumi.getter(name="excludeParameters")
    def exclude_parameters(self) -> Sequence[builtins.str]:
        """
        Exclude paratemers for Export and Import.
        """
        return pulumi.get(self, "exclude_parameters")

    @property
    @pulumi.getter(name="exportParallelismDegree")
    def export_parallelism_degree(self) -> builtins.int:
        """
        Maximum number of worker processes that can be used for a Data Pump Export job.
        """
        return pulumi.get(self, "export_parallelism_degree")

    @property
    @pulumi.getter(name="importParallelismDegree")
    def import_parallelism_degree(self) -> builtins.int:
        """
        Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
        """
        return pulumi.get(self, "import_parallelism_degree")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> builtins.bool:
        """
        Set to false to force Data Pump worker process to run on one instance.
        """
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="tableExistsAction")
    def table_exists_action(self) -> builtins.str:
        """
        IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
        """
        return pulumi.get(self, "table_exists_action")


@pulumi.output_type
class GetMigrationInitialLoadSettingExportDirectoryObjectResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 path: builtins.str):
        """
        :param builtins.str name: Name of directory object in database
        :param builtins.str path: Absolute path of directory on database server
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        Absolute path of directory on database server
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetMigrationInitialLoadSettingImportDirectoryObjectResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 path: builtins.str):
        """
        :param builtins.str name: Name of directory object in database
        :param builtins.str path: Absolute path of directory on database server
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        Absolute path of directory on database server
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetMigrationInitialLoadSettingMetadataRemapResult(dict):
    def __init__(__self__, *,
                 new_value: builtins.str,
                 old_value: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str new_value: Specifies the new value that oldValue should be translated into.
        :param builtins.str old_value: Specifies the value which needs to be reset.
        :param builtins.str type: The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> builtins.str:
        """
        Specifies the new value that oldValue should be translated into.
        """
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> builtins.str:
        """
        Specifies the value which needs to be reset.
        """
        return pulumi.get(self, "old_value")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationInitialLoadSettingTablespaceDetailResult(dict):
    def __init__(__self__, *,
                 block_size_in_kbs: builtins.str,
                 extend_size_in_mbs: builtins.int,
                 is_auto_create: builtins.bool,
                 is_big_file: builtins.bool,
                 remap_target: builtins.str,
                 target_type: builtins.str):
        """
        :param builtins.str block_size_in_kbs: Size of Oracle database blocks in KB.
        :param builtins.int extend_size_in_mbs: Size to extend the tablespace in MB.  Note: Only applicable if 'isBigFile' property is set to true.
        :param builtins.bool is_auto_create: Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
        :param builtins.bool is_big_file: Set this property to true to enable tablespace of the type big file.
        :param builtins.str remap_target: Name of the tablespace on the target database to which the source database tablespace is to be remapped.
        :param builtins.str target_type: Type of Database Base Migration Target.
        """
        pulumi.set(__self__, "block_size_in_kbs", block_size_in_kbs)
        pulumi.set(__self__, "extend_size_in_mbs", extend_size_in_mbs)
        pulumi.set(__self__, "is_auto_create", is_auto_create)
        pulumi.set(__self__, "is_big_file", is_big_file)
        pulumi.set(__self__, "remap_target", remap_target)
        pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter(name="blockSizeInKbs")
    def block_size_in_kbs(self) -> builtins.str:
        """
        Size of Oracle database blocks in KB.
        """
        return pulumi.get(self, "block_size_in_kbs")

    @property
    @pulumi.getter(name="extendSizeInMbs")
    def extend_size_in_mbs(self) -> builtins.int:
        """
        Size to extend the tablespace in MB.  Note: Only applicable if 'isBigFile' property is set to true.
        """
        return pulumi.get(self, "extend_size_in_mbs")

    @property
    @pulumi.getter(name="isAutoCreate")
    def is_auto_create(self) -> builtins.bool:
        """
        Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
        """
        return pulumi.get(self, "is_auto_create")

    @property
    @pulumi.getter(name="isBigFile")
    def is_big_file(self) -> builtins.bool:
        """
        Set this property to true to enable tablespace of the type big file.
        """
        return pulumi.get(self, "is_big_file")

    @property
    @pulumi.getter(name="remapTarget")
    def remap_target(self) -> builtins.str:
        """
        Name of the tablespace on the target database to which the source database tablespace is to be remapped.
        """
        return pulumi.get(self, "remap_target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> builtins.str:
        """
        Type of Database Base Migration Target.
        """
        return pulumi.get(self, "target_type")


@pulumi.output_type
class GetMigrationObjectTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Object type name
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Object type name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionItemResult']):
        """
        :param Sequence['GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionItemArgs'] items: Items in collection.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionItemResult']:
        """
        Items in collection.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: builtins.str):
        """
        :param builtins.str name: Object type name
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Object type name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMigrationsAdvancedParameterResult(dict):
    def __init__(__self__, *,
                 data_type: builtins.str,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str data_type: Parameter data type.
        :param builtins.str name: Name of directory object in database
        :param builtins.str value: If a STRING data type then the value should be an array of characters,  if a INTEGER data type then the value should be an integer value,  if a FLOAT data type then the value should be an float value, if a BOOLEAN data type then the value should be TRUE or FALSE.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> builtins.str:
        """
        Parameter data type.
        """
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        If a STRING data type then the value should be an array of characters,  if a INTEGER data type then the value should be an integer value,  if a FLOAT data type then the value should be an float value, if a BOOLEAN data type then the value should be TRUE or FALSE.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMigrationsAdvisorSettingResult(dict):
    def __init__(__self__, *,
                 is_ignore_errors: builtins.bool,
                 is_skip_advisor: builtins.bool):
        """
        :param builtins.bool is_ignore_errors: True to not interrupt migration execution due to Pre-Migration Advisor errors. Default is false.
        :param builtins.bool is_skip_advisor: True to skip the Pre-Migration Advisor execution. Default is false.
        """
        pulumi.set(__self__, "is_ignore_errors", is_ignore_errors)
        pulumi.set(__self__, "is_skip_advisor", is_skip_advisor)

    @property
    @pulumi.getter(name="isIgnoreErrors")
    def is_ignore_errors(self) -> builtins.bool:
        """
        True to not interrupt migration execution due to Pre-Migration Advisor errors. Default is false.
        """
        return pulumi.get(self, "is_ignore_errors")

    @property
    @pulumi.getter(name="isSkipAdvisor")
    def is_skip_advisor(self) -> builtins.bool:
        """
        True to skip the Pre-Migration Advisor execution. Default is false.
        """
        return pulumi.get(self, "is_skip_advisor")


@pulumi.output_type
class GetMigrationsDataTransferMediumDetailResult(dict):
    def __init__(__self__, *,
                 access_key_id: builtins.str,
                 name: builtins.str,
                 object_storage_buckets: Sequence['outputs.GetMigrationsDataTransferMediumDetailObjectStorageBucketResult'],
                 region: builtins.str,
                 secret_access_key: builtins.str,
                 shared_storage_mount_target_id: builtins.str,
                 sources: Sequence['outputs.GetMigrationsDataTransferMediumDetailSourceResult'],
                 targets: Sequence['outputs.GetMigrationsDataTransferMediumDetailTargetResult'],
                 type: builtins.str):
        """
        :param builtins.str access_key_id: AWS access key credentials identifier Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        :param builtins.str name: Name of directory object in database
        :param Sequence['GetMigrationsDataTransferMediumDetailObjectStorageBucketArgs'] object_storage_buckets: In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Data Pump dump files for the migration. Additionally, it can be specified alongside a database link data transfer medium.
        :param builtins.str region: AWS region code where the S3 bucket is located. Region code should match the documented available regions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions
        :param builtins.str secret_access_key: AWS secret access key credentials Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        :param builtins.str shared_storage_mount_target_id: OCID of the shared storage mount target
        :param Sequence['GetMigrationsDataTransferMediumDetailSourceArgs'] sources: Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        :param Sequence['GetMigrationsDataTransferMediumDetailTargetArgs'] targets: Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        :param builtins.str type: The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_storage_buckets", object_storage_buckets)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "shared_storage_mount_target_id", shared_storage_mount_target_id)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> builtins.str:
        """
        AWS access key credentials identifier Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStorageBuckets")
    def object_storage_buckets(self) -> Sequence['outputs.GetMigrationsDataTransferMediumDetailObjectStorageBucketResult']:
        """
        In lieu of a network database link, Oracle Cloud Infrastructure Object Storage bucket will be used to store Data Pump dump files for the migration. Additionally, it can be specified alongside a database link data transfer medium.
        """
        return pulumi.get(self, "object_storage_buckets")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        AWS region code where the S3 bucket is located. Region code should match the documented available regions: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> builtins.str:
        """
        AWS secret access key credentials Details: https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys
        """
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter(name="sharedStorageMountTargetId")
    def shared_storage_mount_target_id(self) -> builtins.str:
        """
        OCID of the shared storage mount target
        """
        return pulumi.get(self, "shared_storage_mount_target_id")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetMigrationsDataTransferMediumDetailSourceResult']:
        """
        Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetMigrationsDataTransferMediumDetailTargetResult']:
        """
        Optional additional properties for dump transfer in source or target host. Default kind is CURL.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationsDataTransferMediumDetailObjectStorageBucketResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 namespace: builtins.str):
        """
        :param builtins.str bucket: Bucket name.
        :param builtins.str namespace: Namespace name of the object store bucket.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        Bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Namespace name of the object store bucket.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetMigrationsDataTransferMediumDetailSourceResult(dict):
    def __init__(__self__, *,
                 kind: builtins.str,
                 oci_home: builtins.str,
                 wallet_location: builtins.str):
        """
        :param builtins.str kind: Type of dump transfer to use during migration in source or target host. Default kind is CURL
        :param builtins.str oci_home: Path to the Oracle Cloud Infrastructure CLI installation in the node.
        :param builtins.str wallet_location: Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "oci_home", oci_home)
        pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Type of dump transfer to use during migration in source or target host. Default kind is CURL
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> builtins.str:
        """
        Path to the Oracle Cloud Infrastructure CLI installation in the node.
        """
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> builtins.str:
        """
        Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class GetMigrationsDataTransferMediumDetailTargetResult(dict):
    def __init__(__self__, *,
                 kind: builtins.str,
                 oci_home: builtins.str,
                 wallet_location: builtins.str):
        """
        :param builtins.str kind: Type of dump transfer to use during migration in source or target host. Default kind is CURL
        :param builtins.str oci_home: Path to the Oracle Cloud Infrastructure CLI installation in the node.
        :param builtins.str wallet_location: Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "oci_home", oci_home)
        pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> builtins.str:
        """
        Type of dump transfer to use during migration in source or target host. Default kind is CURL
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> builtins.str:
        """
        Path to the Oracle Cloud Infrastructure CLI installation in the node.
        """
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> builtins.str:
        """
        Directory path to Oracle Cloud Infrastructure SSL wallet location on Db server node.
        """
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class GetMigrationsExcludeObjectResult(dict):
    def __init__(__self__, *,
                 is_omit_excluded_table_from_replication: builtins.bool,
                 object: builtins.str,
                 owner: builtins.str,
                 schema: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str type: The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> builtins.bool:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def schema(self) -> builtins.str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationsGgsDetailResult(dict):
    def __init__(__self__, *,
                 acceptable_lag: builtins.int,
                 extracts: Sequence['outputs.GetMigrationsGgsDetailExtractResult'],
                 ggs_deployments: Sequence['outputs.GetMigrationsGgsDetailGgsDeploymentResult'],
                 replicats: Sequence['outputs.GetMigrationsGgsDetailReplicatResult']):
        """
        :param builtins.int acceptable_lag: ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        :param Sequence['GetMigrationsGgsDetailExtractArgs'] extracts: Parameters for Extract processes.
        :param Sequence['GetMigrationsGgsDetailGgsDeploymentArgs'] ggs_deployments: Details about Oracle GoldenGate GGS Deployment.
        :param Sequence['GetMigrationsGgsDetailReplicatArgs'] replicats: Parameters for Replicat processes.
        """
        pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        pulumi.set(__self__, "extracts", extracts)
        pulumi.set(__self__, "ggs_deployments", ggs_deployments)
        pulumi.set(__self__, "replicats", replicats)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> builtins.int:
        """
        ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        """
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter
    def extracts(self) -> Sequence['outputs.GetMigrationsGgsDetailExtractResult']:
        """
        Parameters for Extract processes.
        """
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter(name="ggsDeployments")
    def ggs_deployments(self) -> Sequence['outputs.GetMigrationsGgsDetailGgsDeploymentResult']:
        """
        Details about Oracle GoldenGate GGS Deployment.
        """
        return pulumi.get(self, "ggs_deployments")

    @property
    @pulumi.getter
    def replicats(self) -> Sequence['outputs.GetMigrationsGgsDetailReplicatResult']:
        """
        Parameters for Replicat processes.
        """
        return pulumi.get(self, "replicats")


@pulumi.output_type
class GetMigrationsGgsDetailExtractResult(dict):
    def __init__(__self__, *,
                 long_trans_duration: builtins.int,
                 performance_profile: builtins.str):
        """
        :param builtins.int long_trans_duration: Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        :param builtins.str performance_profile: Replicat performance.
        """
        pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> builtins.int:
        """
        Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        """
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> builtins.str:
        """
        Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationsGgsDetailGgsDeploymentResult(dict):
    def __init__(__self__, *,
                 deployment_id: builtins.str,
                 ggs_admin_credentials_secret_id: builtins.str):
        """
        :param builtins.str deployment_id: The OCID of the resource being referenced.
        :param builtins.str ggs_admin_credentials_secret_id: The OCID of the resource being referenced.
        """
        pulumi.set(__self__, "deployment_id", deployment_id)
        pulumi.set(__self__, "ggs_admin_credentials_secret_id", ggs_admin_credentials_secret_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="ggsAdminCredentialsSecretId")
    def ggs_admin_credentials_secret_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "ggs_admin_credentials_secret_id")


@pulumi.output_type
class GetMigrationsGgsDetailReplicatResult(dict):
    def __init__(__self__, *,
                 performance_profile: builtins.str):
        """
        :param builtins.str performance_profile: Replicat performance.
        """
        pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> builtins.str:
        """
        Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationsHubDetailResult(dict):
    def __init__(__self__, *,
                 acceptable_lag: builtins.int,
                 compute_id: builtins.str,
                 extracts: Sequence['outputs.GetMigrationsHubDetailExtractResult'],
                 key_id: builtins.str,
                 replicats: Sequence['outputs.GetMigrationsHubDetailReplicatResult'],
                 rest_admin_credentials: Sequence['outputs.GetMigrationsHubDetailRestAdminCredentialResult'],
                 url: builtins.str,
                 vault_id: builtins.str):
        """
        :param builtins.int acceptable_lag: ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        :param builtins.str compute_id: The OCID of the resource being referenced.
        :param Sequence['GetMigrationsHubDetailExtractArgs'] extracts: Parameters for Extract processes.
        :param builtins.str key_id: The OCID of the resource being referenced.
        :param Sequence['GetMigrationsHubDetailReplicatArgs'] replicats: Parameters for Replicat processes.
        :param Sequence['GetMigrationsHubDetailRestAdminCredentialArgs'] rest_admin_credentials: Database Administrator Credentials details.
        :param builtins.str url: Endpoint URL.
        :param builtins.str vault_id: The OCID of the resource being referenced.
        """
        pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        pulumi.set(__self__, "compute_id", compute_id)
        pulumi.set(__self__, "extracts", extracts)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "replicats", replicats)
        pulumi.set(__self__, "rest_admin_credentials", rest_admin_credentials)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> builtins.int:
        """
        ODMS will monitor GoldenGate end-to-end latency until the lag time is lower than the specified value in seconds.
        """
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter
    def extracts(self) -> Sequence['outputs.GetMigrationsHubDetailExtractResult']:
        """
        Parameters for Extract processes.
        """
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter
    def replicats(self) -> Sequence['outputs.GetMigrationsHubDetailReplicatResult']:
        """
        Parameters for Replicat processes.
        """
        return pulumi.get(self, "replicats")

    @property
    @pulumi.getter(name="restAdminCredentials")
    def rest_admin_credentials(self) -> Sequence['outputs.GetMigrationsHubDetailRestAdminCredentialResult']:
        """
        Database Administrator Credentials details.
        """
        return pulumi.get(self, "rest_admin_credentials")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        Endpoint URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> builtins.str:
        """
        The OCID of the resource being referenced.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetMigrationsHubDetailExtractResult(dict):
    def __init__(__self__, *,
                 long_trans_duration: builtins.int,
                 performance_profile: builtins.str):
        """
        :param builtins.int long_trans_duration: Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        :param builtins.str performance_profile: Replicat performance.
        """
        pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> builtins.int:
        """
        Length of time (in seconds) that a transaction can be open before Extract generates a warning message that the transaction is long-running. If not specified, Extract will not generate a warning on long-running transactions.
        """
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> builtins.str:
        """
        Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationsHubDetailReplicatResult(dict):
    def __init__(__self__, *,
                 performance_profile: builtins.str):
        """
        :param builtins.str performance_profile: Replicat performance.
        """
        pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> builtins.str:
        """
        Replicat performance.
        """
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationsHubDetailRestAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: builtins.str,
                 username: builtins.str):
        """
        :param builtins.str username: Administrator username
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        Administrator username
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationsIncludeObjectResult(dict):
    def __init__(__self__, *,
                 is_omit_excluded_table_from_replication: builtins.bool,
                 object: builtins.str,
                 owner: builtins.str,
                 schema: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str type: The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> builtins.bool:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def object(self) -> builtins.str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def schema(self) -> builtins.str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationsInitialLoadSettingResult(dict):
    def __init__(__self__, *,
                 compatibilities: Sequence[builtins.str],
                 data_pump_parameters: Sequence['outputs.GetMigrationsInitialLoadSettingDataPumpParameterResult'],
                 export_directory_objects: Sequence['outputs.GetMigrationsInitialLoadSettingExportDirectoryObjectResult'],
                 handle_grant_errors: builtins.str,
                 import_directory_objects: Sequence['outputs.GetMigrationsInitialLoadSettingImportDirectoryObjectResult'],
                 is_consistent: builtins.bool,
                 is_ignore_existing_objects: builtins.bool,
                 is_tz_utc: builtins.bool,
                 job_mode: builtins.str,
                 metadata_remaps: Sequence['outputs.GetMigrationsInitialLoadSettingMetadataRemapResult'],
                 primary_key_compatibility: builtins.str,
                 tablespace_details: Sequence['outputs.GetMigrationsInitialLoadSettingTablespaceDetailResult']):
        """
        :param Sequence[builtins.str] compatibilities: Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
        :param Sequence['GetMigrationsInitialLoadSettingDataPumpParameterArgs'] data_pump_parameters: Optional parameters for Data Pump Export and Import.
        :param Sequence['GetMigrationsInitialLoadSettingExportDirectoryObjectArgs'] export_directory_objects: Directory object details, used to define either import or export directory objects in Data Pump Settings.
        :param builtins.str handle_grant_errors: The action taken in the event of errors related to GRANT or REVOKE errors.
        :param Sequence['GetMigrationsInitialLoadSettingImportDirectoryObjectArgs'] import_directory_objects: Directory object details, used to define either import or export directory objects in Data Pump Settings.
        :param builtins.bool is_consistent: Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
        :param builtins.bool is_ignore_existing_objects: Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
        :param builtins.bool is_tz_utc: Include a statement at the start of the dump to set the time zone to UTC.
        :param builtins.str job_mode: Oracle Job Mode
        :param Sequence['GetMigrationsInitialLoadSettingMetadataRemapArgs'] metadata_remaps: Defines remapping to be applied to objects as they are processed.
        :param builtins.str primary_key_compatibility: Primary key compatibility option
        :param Sequence['GetMigrationsInitialLoadSettingTablespaceDetailArgs'] tablespace_details: Migration tablespace settings.
        """
        pulumi.set(__self__, "compatibilities", compatibilities)
        pulumi.set(__self__, "data_pump_parameters", data_pump_parameters)
        pulumi.set(__self__, "export_directory_objects", export_directory_objects)
        pulumi.set(__self__, "handle_grant_errors", handle_grant_errors)
        pulumi.set(__self__, "import_directory_objects", import_directory_objects)
        pulumi.set(__self__, "is_consistent", is_consistent)
        pulumi.set(__self__, "is_ignore_existing_objects", is_ignore_existing_objects)
        pulumi.set(__self__, "is_tz_utc", is_tz_utc)
        pulumi.set(__self__, "job_mode", job_mode)
        pulumi.set(__self__, "metadata_remaps", metadata_remaps)
        pulumi.set(__self__, "primary_key_compatibility", primary_key_compatibility)
        pulumi.set(__self__, "tablespace_details", tablespace_details)

    @property
    @pulumi.getter
    def compatibilities(self) -> Sequence[builtins.str]:
        """
        Apply the specified requirements for compatibility with MySQL Database Service for all tables in the dump  output, altering the dump files as necessary.
        """
        return pulumi.get(self, "compatibilities")

    @property
    @pulumi.getter(name="dataPumpParameters")
    def data_pump_parameters(self) -> Sequence['outputs.GetMigrationsInitialLoadSettingDataPumpParameterResult']:
        """
        Optional parameters for Data Pump Export and Import.
        """
        return pulumi.get(self, "data_pump_parameters")

    @property
    @pulumi.getter(name="exportDirectoryObjects")
    def export_directory_objects(self) -> Sequence['outputs.GetMigrationsInitialLoadSettingExportDirectoryObjectResult']:
        """
        Directory object details, used to define either import or export directory objects in Data Pump Settings.
        """
        return pulumi.get(self, "export_directory_objects")

    @property
    @pulumi.getter(name="handleGrantErrors")
    def handle_grant_errors(self) -> builtins.str:
        """
        The action taken in the event of errors related to GRANT or REVOKE errors.
        """
        return pulumi.get(self, "handle_grant_errors")

    @property
    @pulumi.getter(name="importDirectoryObjects")
    def import_directory_objects(self) -> Sequence['outputs.GetMigrationsInitialLoadSettingImportDirectoryObjectResult']:
        """
        Directory object details, used to define either import or export directory objects in Data Pump Settings.
        """
        return pulumi.get(self, "import_directory_objects")

    @property
    @pulumi.getter(name="isConsistent")
    def is_consistent(self) -> builtins.bool:
        """
        Enable (true) or disable (false) consistent data dumps by locking the instance for backup during the dump.
        """
        return pulumi.get(self, "is_consistent")

    @property
    @pulumi.getter(name="isIgnoreExistingObjects")
    def is_ignore_existing_objects(self) -> builtins.bool:
        """
        Import the dump even if it contains objects that already exist in the target schema in the MySQL instance.
        """
        return pulumi.get(self, "is_ignore_existing_objects")

    @property
    @pulumi.getter(name="isTzUtc")
    def is_tz_utc(self) -> builtins.bool:
        """
        Include a statement at the start of the dump to set the time zone to UTC.
        """
        return pulumi.get(self, "is_tz_utc")

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> builtins.str:
        """
        Oracle Job Mode
        """
        return pulumi.get(self, "job_mode")

    @property
    @pulumi.getter(name="metadataRemaps")
    def metadata_remaps(self) -> Sequence['outputs.GetMigrationsInitialLoadSettingMetadataRemapResult']:
        """
        Defines remapping to be applied to objects as they are processed.
        """
        return pulumi.get(self, "metadata_remaps")

    @property
    @pulumi.getter(name="primaryKeyCompatibility")
    def primary_key_compatibility(self) -> builtins.str:
        """
        Primary key compatibility option
        """
        return pulumi.get(self, "primary_key_compatibility")

    @property
    @pulumi.getter(name="tablespaceDetails")
    def tablespace_details(self) -> Sequence['outputs.GetMigrationsInitialLoadSettingTablespaceDetailResult']:
        """
        Migration tablespace settings.
        """
        return pulumi.get(self, "tablespace_details")


@pulumi.output_type
class GetMigrationsInitialLoadSettingDataPumpParameterResult(dict):
    def __init__(__self__, *,
                 estimate: builtins.str,
                 exclude_parameters: Sequence[builtins.str],
                 export_parallelism_degree: builtins.int,
                 import_parallelism_degree: builtins.int,
                 is_cluster: builtins.bool,
                 table_exists_action: builtins.str):
        """
        :param builtins.str estimate: Estimate size of dumps that will be generated.
        :param Sequence[builtins.str] exclude_parameters: Exclude paratemers for Export and Import.
        :param builtins.int export_parallelism_degree: Maximum number of worker processes that can be used for a Data Pump Export job.
        :param builtins.int import_parallelism_degree: Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
        :param builtins.bool is_cluster: Set to false to force Data Pump worker process to run on one instance.
        :param builtins.str table_exists_action: IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
        """
        pulumi.set(__self__, "estimate", estimate)
        pulumi.set(__self__, "exclude_parameters", exclude_parameters)
        pulumi.set(__self__, "export_parallelism_degree", export_parallelism_degree)
        pulumi.set(__self__, "import_parallelism_degree", import_parallelism_degree)
        pulumi.set(__self__, "is_cluster", is_cluster)
        pulumi.set(__self__, "table_exists_action", table_exists_action)

    @property
    @pulumi.getter
    def estimate(self) -> builtins.str:
        """
        Estimate size of dumps that will be generated.
        """
        return pulumi.get(self, "estimate")

    @property
    @pulumi.getter(name="excludeParameters")
    def exclude_parameters(self) -> Sequence[builtins.str]:
        """
        Exclude paratemers for Export and Import.
        """
        return pulumi.get(self, "exclude_parameters")

    @property
    @pulumi.getter(name="exportParallelismDegree")
    def export_parallelism_degree(self) -> builtins.int:
        """
        Maximum number of worker processes that can be used for a Data Pump Export job.
        """
        return pulumi.get(self, "export_parallelism_degree")

    @property
    @pulumi.getter(name="importParallelismDegree")
    def import_parallelism_degree(self) -> builtins.int:
        """
        Maximum number of worker processes that can be used for a Data Pump Import job. For an Autonomous Database, ODMS will automatically query its CPU core count and set this property.
        """
        return pulumi.get(self, "import_parallelism_degree")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> builtins.bool:
        """
        Set to false to force Data Pump worker process to run on one instance.
        """
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="tableExistsAction")
    def table_exists_action(self) -> builtins.str:
        """
        IMPORT: Specifies the action to be performed when data is loaded into a preexisting table.
        """
        return pulumi.get(self, "table_exists_action")


@pulumi.output_type
class GetMigrationsInitialLoadSettingExportDirectoryObjectResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 path: builtins.str):
        """
        :param builtins.str name: Name of directory object in database
        :param builtins.str path: Absolute path of directory on database server
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        Absolute path of directory on database server
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetMigrationsInitialLoadSettingImportDirectoryObjectResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 path: builtins.str):
        """
        :param builtins.str name: Name of directory object in database
        :param builtins.str path: Absolute path of directory on database server
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of directory object in database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        Absolute path of directory on database server
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetMigrationsInitialLoadSettingMetadataRemapResult(dict):
    def __init__(__self__, *,
                 new_value: builtins.str,
                 old_value: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str new_value: Specifies the new value that oldValue should be translated into.
        :param builtins.str old_value: Specifies the value which needs to be reset.
        :param builtins.str type: The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> builtins.str:
        """
        Specifies the new value that oldValue should be translated into.
        """
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> builtins.str:
        """
        Specifies the value which needs to be reset.
        """
        return pulumi.get(self, "old_value")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the migration to be performed. Example: ONLINE if no downtime is preferred for a migration. This method uses Oracle GoldenGate for replication.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationsInitialLoadSettingTablespaceDetailResult(dict):
    def __init__(__self__, *,
                 block_size_in_kbs: builtins.str,
                 extend_size_in_mbs: builtins.int,
                 is_auto_create: builtins.bool,
                 is_big_file: builtins.bool,
                 remap_target: builtins.str,
                 target_type: builtins.str):
        """
        :param builtins.str block_size_in_kbs: Size of Oracle database blocks in KB.
        :param builtins.int extend_size_in_mbs: Size to extend the tablespace in MB.  Note: Only applicable if 'isBigFile' property is set to true.
        :param builtins.bool is_auto_create: Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
        :param builtins.bool is_big_file: Set this property to true to enable tablespace of the type big file.
        :param builtins.str remap_target: Name of the tablespace on the target database to which the source database tablespace is to be remapped.
        :param builtins.str target_type: Type of Database Base Migration Target.
        """
        pulumi.set(__self__, "block_size_in_kbs", block_size_in_kbs)
        pulumi.set(__self__, "extend_size_in_mbs", extend_size_in_mbs)
        pulumi.set(__self__, "is_auto_create", is_auto_create)
        pulumi.set(__self__, "is_big_file", is_big_file)
        pulumi.set(__self__, "remap_target", remap_target)
        pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter(name="blockSizeInKbs")
    def block_size_in_kbs(self) -> builtins.str:
        """
        Size of Oracle database blocks in KB.
        """
        return pulumi.get(self, "block_size_in_kbs")

    @property
    @pulumi.getter(name="extendSizeInMbs")
    def extend_size_in_mbs(self) -> builtins.int:
        """
        Size to extend the tablespace in MB.  Note: Only applicable if 'isBigFile' property is set to true.
        """
        return pulumi.get(self, "extend_size_in_mbs")

    @property
    @pulumi.getter(name="isAutoCreate")
    def is_auto_create(self) -> builtins.bool:
        """
        Set this property to true to auto-create tablespaces in the target Database. Note: This is not applicable for Autonomous Database Serverless databases.
        """
        return pulumi.get(self, "is_auto_create")

    @property
    @pulumi.getter(name="isBigFile")
    def is_big_file(self) -> builtins.bool:
        """
        Set this property to true to enable tablespace of the type big file.
        """
        return pulumi.get(self, "is_big_file")

    @property
    @pulumi.getter(name="remapTarget")
    def remap_target(self) -> builtins.str:
        """
        Name of the tablespace on the target database to which the source database tablespace is to be remapped.
        """
        return pulumi.get(self, "remap_target")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> builtins.str:
        """
        Type of Database Base Migration Target.
        """
        return pulumi.get(self, "target_type")


