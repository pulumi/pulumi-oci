# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ConnectionAdminCredentials',
    'ConnectionConnectDescriptor',
    'ConnectionPrivateEndpoint',
    'ConnectionReplicationCredentials',
    'ConnectionSshDetails',
    'ConnectionVaultDetails',
    'JobProgress',
    'JobProgressPhase',
    'JobProgressPhaseExtract',
    'JobProgressPhaseLogLocation',
    'JobUnsupportedObject',
    'MigrationAdvisorSettings',
    'MigrationDataTransferMediumDetails',
    'MigrationDataTransferMediumDetailsDatabaseLinkDetails',
    'MigrationDataTransferMediumDetailsDatabaseLinkDetailsWalletBucket',
    'MigrationDataTransferMediumDetailsObjectStorageDetails',
    'MigrationDataTransferMediumDetailsV2',
    'MigrationDataTransferMediumDetailsV2ObjectStorageBucket',
    'MigrationDatapumpSettings',
    'MigrationDatapumpSettingsDataPumpParameters',
    'MigrationDatapumpSettingsExportDirectoryObject',
    'MigrationDatapumpSettingsImportDirectoryObject',
    'MigrationDatapumpSettingsMetadataRemap',
    'MigrationDumpTransferDetails',
    'MigrationDumpTransferDetailsSource',
    'MigrationDumpTransferDetailsTarget',
    'MigrationExcludeObject',
    'MigrationGoldenGateDetails',
    'MigrationGoldenGateDetailsHub',
    'MigrationGoldenGateDetailsHubRestAdminCredentials',
    'MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentials',
    'MigrationGoldenGateDetailsHubSourceDbAdminCredentials',
    'MigrationGoldenGateDetailsHubTargetDbAdminCredentials',
    'MigrationGoldenGateDetailsSettings',
    'MigrationGoldenGateDetailsSettingsExtract',
    'MigrationGoldenGateDetailsSettingsReplicat',
    'MigrationGoldenGateServiceDetails',
    'MigrationGoldenGateServiceDetailsGgsDeployment',
    'MigrationGoldenGateServiceDetailsSettings',
    'MigrationGoldenGateServiceDetailsSettingsExtract',
    'MigrationGoldenGateServiceDetailsSettingsReplicat',
    'MigrationGoldenGateServiceDetailsSourceContainerDbCredentials',
    'MigrationGoldenGateServiceDetailsSourceDbCredentials',
    'MigrationGoldenGateServiceDetailsTargetDbCredentials',
    'MigrationIncludeObject',
    'MigrationVaultDetails',
    'GetAgentImagesAgentImageCollectionResult',
    'GetAgentImagesAgentImageCollectionItemResult',
    'GetAgentImagesFilterResult',
    'GetAgentsAgentCollectionResult',
    'GetAgentsAgentCollectionItemResult',
    'GetAgentsFilterResult',
    'GetConnectionAdminCredentialResult',
    'GetConnectionConnectDescriptorResult',
    'GetConnectionPrivateEndpointResult',
    'GetConnectionReplicationCredentialResult',
    'GetConnectionSshDetailResult',
    'GetConnectionVaultDetailResult',
    'GetConnectionsConnectionCollectionResult',
    'GetConnectionsConnectionCollectionItemResult',
    'GetConnectionsConnectionCollectionItemAdminCredentialResult',
    'GetConnectionsConnectionCollectionItemConnectDescriptorResult',
    'GetConnectionsConnectionCollectionItemPrivateEndpointResult',
    'GetConnectionsConnectionCollectionItemReplicationCredentialResult',
    'GetConnectionsConnectionCollectionItemSshDetailResult',
    'GetConnectionsConnectionCollectionItemVaultDetailResult',
    'GetConnectionsFilterResult',
    'GetJobAdvisorReportReportLocationDetailResult',
    'GetJobAdvisorReportReportLocationDetailObjectStorageDetailResult',
    'GetJobOutputItemResult',
    'GetMigrationAdvisorSettingResult',
    'GetMigrationDataTransferMediumDetailResult',
    'GetMigrationDataTransferMediumDetailDatabaseLinkDetailResult',
    'GetMigrationDataTransferMediumDetailDatabaseLinkDetailWalletBucketResult',
    'GetMigrationDataTransferMediumDetailObjectStorageDetailResult',
    'GetMigrationDataTransferMediumDetailsV2Result',
    'GetMigrationDataTransferMediumDetailsV2ObjectStorageBucketResult',
    'GetMigrationDatapumpSettingResult',
    'GetMigrationDatapumpSettingDataPumpParameterResult',
    'GetMigrationDatapumpSettingExportDirectoryObjectResult',
    'GetMigrationDatapumpSettingImportDirectoryObjectResult',
    'GetMigrationDatapumpSettingMetadataRemapResult',
    'GetMigrationDumpTransferDetailResult',
    'GetMigrationDumpTransferDetailSourceResult',
    'GetMigrationDumpTransferDetailTargetResult',
    'GetMigrationExcludeObjectResult',
    'GetMigrationGoldenGateDetailResult',
    'GetMigrationGoldenGateDetailHubResult',
    'GetMigrationGoldenGateDetailHubRestAdminCredentialResult',
    'GetMigrationGoldenGateDetailHubSourceContainerDbAdminCredentialResult',
    'GetMigrationGoldenGateDetailHubSourceDbAdminCredentialResult',
    'GetMigrationGoldenGateDetailHubTargetDbAdminCredentialResult',
    'GetMigrationGoldenGateDetailSettingResult',
    'GetMigrationGoldenGateDetailSettingExtractResult',
    'GetMigrationGoldenGateDetailSettingReplicatResult',
    'GetMigrationGoldenGateServiceDetailResult',
    'GetMigrationGoldenGateServiceDetailGgsDeploymentResult',
    'GetMigrationGoldenGateServiceDetailSettingResult',
    'GetMigrationGoldenGateServiceDetailSettingExtractResult',
    'GetMigrationGoldenGateServiceDetailSettingReplicatResult',
    'GetMigrationGoldenGateServiceDetailSourceContainerDbCredentialResult',
    'GetMigrationGoldenGateServiceDetailSourceDbCredentialResult',
    'GetMigrationGoldenGateServiceDetailTargetDbCredentialResult',
    'GetMigrationIncludeObjectResult',
    'GetMigrationObjectTypesFilterResult',
    'GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionResult',
    'GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionItemResult',
    'GetMigrationVaultDetailResult',
    'GetMigrationsFilterResult',
    'GetMigrationsMigrationCollectionResult',
    'GetMigrationsMigrationCollectionItemResult',
    'GetMigrationsMigrationCollectionItemAdvisorSettingResult',
    'GetMigrationsMigrationCollectionItemDataTransferMediumDetailResult',
    'GetMigrationsMigrationCollectionItemDataTransferMediumDetailDatabaseLinkDetailResult',
    'GetMigrationsMigrationCollectionItemDataTransferMediumDetailDatabaseLinkDetailWalletBucketResult',
    'GetMigrationsMigrationCollectionItemDataTransferMediumDetailObjectStorageDetailResult',
    'GetMigrationsMigrationCollectionItemDataTransferMediumDetailsV2Result',
    'GetMigrationsMigrationCollectionItemDataTransferMediumDetailsV2ObjectStorageBucketResult',
    'GetMigrationsMigrationCollectionItemDatapumpSettingResult',
    'GetMigrationsMigrationCollectionItemDatapumpSettingDataPumpParameterResult',
    'GetMigrationsMigrationCollectionItemDatapumpSettingExportDirectoryObjectResult',
    'GetMigrationsMigrationCollectionItemDatapumpSettingImportDirectoryObjectResult',
    'GetMigrationsMigrationCollectionItemDatapumpSettingMetadataRemapResult',
    'GetMigrationsMigrationCollectionItemDumpTransferDetailResult',
    'GetMigrationsMigrationCollectionItemDumpTransferDetailSourceResult',
    'GetMigrationsMigrationCollectionItemDumpTransferDetailTargetResult',
    'GetMigrationsMigrationCollectionItemExcludeObjectResult',
    'GetMigrationsMigrationCollectionItemGoldenGateDetailResult',
    'GetMigrationsMigrationCollectionItemGoldenGateDetailHubResult',
    'GetMigrationsMigrationCollectionItemGoldenGateDetailHubRestAdminCredentialResult',
    'GetMigrationsMigrationCollectionItemGoldenGateDetailHubSourceContainerDbAdminCredentialResult',
    'GetMigrationsMigrationCollectionItemGoldenGateDetailHubSourceDbAdminCredentialResult',
    'GetMigrationsMigrationCollectionItemGoldenGateDetailHubTargetDbAdminCredentialResult',
    'GetMigrationsMigrationCollectionItemGoldenGateDetailSettingResult',
    'GetMigrationsMigrationCollectionItemGoldenGateDetailSettingExtractResult',
    'GetMigrationsMigrationCollectionItemGoldenGateDetailSettingReplicatResult',
    'GetMigrationsMigrationCollectionItemGoldenGateServiceDetailResult',
    'GetMigrationsMigrationCollectionItemGoldenGateServiceDetailGgsDeploymentResult',
    'GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingResult',
    'GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingExtractResult',
    'GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingReplicatResult',
    'GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSourceContainerDbCredentialResult',
    'GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSourceDbCredentialResult',
    'GetMigrationsMigrationCollectionItemGoldenGateServiceDetailTargetDbCredentialResult',
    'GetMigrationsMigrationCollectionItemIncludeObjectResult',
    'GetMigrationsMigrationCollectionItemVaultDetailResult',
]

@pulumi.output_type
class ConnectionAdminCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class ConnectionConnectDescriptor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectString":
            suggest = "connect_string"
        elif key == "databaseServiceName":
            suggest = "database_service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionConnectDescriptor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionConnectDescriptor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionConnectDescriptor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connect_string: Optional[str] = None,
                 database_service_name: Optional[str] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        if connect_string is not None:
            pulumi.set(__self__, "connect_string", connect_string)
        if database_service_name is not None:
            pulumi.set(__self__, "database_service_name", database_service_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="connectString")
    def connect_string(self) -> Optional[str]:
        return pulumi.get(self, "connect_string")

    @property
    @pulumi.getter(name="databaseServiceName")
    def database_service_name(self) -> Optional[str]:
        return pulumi.get(self, "database_service_name")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class ConnectionPrivateEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vcnId":
            suggest = "vcn_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionPrivateEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionPrivateEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionPrivateEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: str,
                 subnet_id: str,
                 vcn_id: str,
                 id: Optional[str] = None):
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vcn_id", vcn_id)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        return pulumi.get(self, "vcn_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ConnectionReplicationCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class ConnectionSshDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sudoLocation":
            suggest = "sudo_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionSshDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionSshDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionSshDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 sshkey: str,
                 user: str,
                 sudo_location: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "sshkey", sshkey)
        pulumi.set(__self__, "user", user)
        if sudo_location is not None:
            pulumi.set(__self__, "sudo_location", sudo_location)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def sshkey(self) -> str:
        return pulumi.get(self, "sshkey")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="sudoLocation")
    def sudo_location(self) -> Optional[str]:
        return pulumi.get(self, "sudo_location")


@pulumi.output_type
class ConnectionVaultDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "keyId":
            suggest = "key_id"
        elif key == "vaultId":
            suggest = "vault_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionVaultDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionVaultDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionVaultDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: str,
                 key_id: str,
                 vault_id: str):
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> str:
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class JobProgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentPhase":
            suggest = "current_phase"
        elif key == "currentStatus":
            suggest = "current_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobProgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobProgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobProgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_phase: Optional[str] = None,
                 current_status: Optional[str] = None,
                 phases: Optional[Sequence['outputs.JobProgressPhase']] = None):
        if current_phase is not None:
            pulumi.set(__self__, "current_phase", current_phase)
        if current_status is not None:
            pulumi.set(__self__, "current_status", current_status)
        if phases is not None:
            pulumi.set(__self__, "phases", phases)

    @property
    @pulumi.getter(name="currentPhase")
    def current_phase(self) -> Optional[str]:
        return pulumi.get(self, "current_phase")

    @property
    @pulumi.getter(name="currentStatus")
    def current_status(self) -> Optional[str]:
        return pulumi.get(self, "current_status")

    @property
    @pulumi.getter
    def phases(self) -> Optional[Sequence['outputs.JobProgressPhase']]:
        return pulumi.get(self, "phases")


@pulumi.output_type
class JobProgressPhase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "durationInMs":
            suggest = "duration_in_ms"
        elif key == "isAdvisorReportAvailable":
            suggest = "is_advisor_report_available"
        elif key == "logLocations":
            suggest = "log_locations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobProgressPhase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobProgressPhase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobProgressPhase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 duration_in_ms: Optional[int] = None,
                 extracts: Optional[Sequence['outputs.JobProgressPhaseExtract']] = None,
                 is_advisor_report_available: Optional[bool] = None,
                 issue: Optional[str] = None,
                 log_locations: Optional[Sequence['outputs.JobProgressPhaseLogLocation']] = None,
                 name: Optional[str] = None,
                 progress: Optional[int] = None,
                 status: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if duration_in_ms is not None:
            pulumi.set(__self__, "duration_in_ms", duration_in_ms)
        if extracts is not None:
            pulumi.set(__self__, "extracts", extracts)
        if is_advisor_report_available is not None:
            pulumi.set(__self__, "is_advisor_report_available", is_advisor_report_available)
        if issue is not None:
            pulumi.set(__self__, "issue", issue)
        if log_locations is not None:
            pulumi.set(__self__, "log_locations", log_locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="durationInMs")
    def duration_in_ms(self) -> Optional[int]:
        return pulumi.get(self, "duration_in_ms")

    @property
    @pulumi.getter
    def extracts(self) -> Optional[Sequence['outputs.JobProgressPhaseExtract']]:
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter(name="isAdvisorReportAvailable")
    def is_advisor_report_available(self) -> Optional[bool]:
        return pulumi.get(self, "is_advisor_report_available")

    @property
    @pulumi.getter
    def issue(self) -> Optional[str]:
        return pulumi.get(self, "issue")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[Sequence['outputs.JobProgressPhaseLogLocation']]:
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def progress(self) -> Optional[int]:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class JobProgressPhaseExtract(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 type: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class JobProgressPhaseLogLocation(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class JobUnsupportedObject(dict):
    def __init__(__self__, *,
                 object: Optional[str] = None,
                 owner: Optional[str] = None,
                 type: Optional[str] = None):
        if object is not None:
            pulumi.set(__self__, "object", object)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MigrationAdvisorSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isIgnoreErrors":
            suggest = "is_ignore_errors"
        elif key == "isSkipAdvisor":
            suggest = "is_skip_advisor"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationAdvisorSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationAdvisorSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationAdvisorSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_ignore_errors: Optional[bool] = None,
                 is_skip_advisor: Optional[bool] = None):
        if is_ignore_errors is not None:
            pulumi.set(__self__, "is_ignore_errors", is_ignore_errors)
        if is_skip_advisor is not None:
            pulumi.set(__self__, "is_skip_advisor", is_skip_advisor)

    @property
    @pulumi.getter(name="isIgnoreErrors")
    def is_ignore_errors(self) -> Optional[bool]:
        return pulumi.get(self, "is_ignore_errors")

    @property
    @pulumi.getter(name="isSkipAdvisor")
    def is_skip_advisor(self) -> Optional[bool]:
        return pulumi.get(self, "is_skip_advisor")


@pulumi.output_type
class MigrationDataTransferMediumDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseLinkDetails":
            suggest = "database_link_details"
        elif key == "objectStorageDetails":
            suggest = "object_storage_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDataTransferMediumDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDataTransferMediumDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDataTransferMediumDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_link_details: Optional['outputs.MigrationDataTransferMediumDetailsDatabaseLinkDetails'] = None,
                 object_storage_details: Optional['outputs.MigrationDataTransferMediumDetailsObjectStorageDetails'] = None):
        if database_link_details is not None:
            pulumi.set(__self__, "database_link_details", database_link_details)
        if object_storage_details is not None:
            pulumi.set(__self__, "object_storage_details", object_storage_details)

    @property
    @pulumi.getter(name="databaseLinkDetails")
    def database_link_details(self) -> Optional['outputs.MigrationDataTransferMediumDetailsDatabaseLinkDetails']:
        return pulumi.get(self, "database_link_details")

    @property
    @pulumi.getter(name="objectStorageDetails")
    def object_storage_details(self) -> Optional['outputs.MigrationDataTransferMediumDetailsObjectStorageDetails']:
        return pulumi.get(self, "object_storage_details")


@pulumi.output_type
class MigrationDataTransferMediumDetailsDatabaseLinkDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "walletBucket":
            suggest = "wallet_bucket"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDataTransferMediumDetailsDatabaseLinkDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDataTransferMediumDetailsDatabaseLinkDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDataTransferMediumDetailsDatabaseLinkDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 wallet_bucket: Optional['outputs.MigrationDataTransferMediumDetailsDatabaseLinkDetailsWalletBucket'] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wallet_bucket is not None:
            pulumi.set(__self__, "wallet_bucket", wallet_bucket)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="walletBucket")
    def wallet_bucket(self) -> Optional['outputs.MigrationDataTransferMediumDetailsDatabaseLinkDetailsWalletBucket']:
        return pulumi.get(self, "wallet_bucket")


@pulumi.output_type
class MigrationDataTransferMediumDetailsDatabaseLinkDetailsWalletBucket(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class MigrationDataTransferMediumDetailsObjectStorageDetails(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class MigrationDataTransferMediumDetailsV2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "objectStorageBucket":
            suggest = "object_storage_bucket"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDataTransferMediumDetailsV2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDataTransferMediumDetailsV2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDataTransferMediumDetailsV2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 access_key_id: Optional[str] = None,
                 name: Optional[str] = None,
                 object_storage_bucket: Optional['outputs.MigrationDataTransferMediumDetailsV2ObjectStorageBucket'] = None,
                 region: Optional[str] = None,
                 secret_access_key: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_storage_bucket is not None:
            pulumi.set(__self__, "object_storage_bucket", object_storage_bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStorageBucket")
    def object_storage_bucket(self) -> Optional['outputs.MigrationDataTransferMediumDetailsV2ObjectStorageBucket']:
        return pulumi.get(self, "object_storage_bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class MigrationDataTransferMediumDetailsV2ObjectStorageBucket(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class MigrationDatapumpSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataPumpParameters":
            suggest = "data_pump_parameters"
        elif key == "exportDirectoryObject":
            suggest = "export_directory_object"
        elif key == "importDirectoryObject":
            suggest = "import_directory_object"
        elif key == "jobMode":
            suggest = "job_mode"
        elif key == "metadataRemaps":
            suggest = "metadata_remaps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDatapumpSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDatapumpSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDatapumpSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_pump_parameters: Optional['outputs.MigrationDatapumpSettingsDataPumpParameters'] = None,
                 export_directory_object: Optional['outputs.MigrationDatapumpSettingsExportDirectoryObject'] = None,
                 import_directory_object: Optional['outputs.MigrationDatapumpSettingsImportDirectoryObject'] = None,
                 job_mode: Optional[str] = None,
                 metadata_remaps: Optional[Sequence['outputs.MigrationDatapumpSettingsMetadataRemap']] = None):
        if data_pump_parameters is not None:
            pulumi.set(__self__, "data_pump_parameters", data_pump_parameters)
        if export_directory_object is not None:
            pulumi.set(__self__, "export_directory_object", export_directory_object)
        if import_directory_object is not None:
            pulumi.set(__self__, "import_directory_object", import_directory_object)
        if job_mode is not None:
            pulumi.set(__self__, "job_mode", job_mode)
        if metadata_remaps is not None:
            pulumi.set(__self__, "metadata_remaps", metadata_remaps)

    @property
    @pulumi.getter(name="dataPumpParameters")
    def data_pump_parameters(self) -> Optional['outputs.MigrationDatapumpSettingsDataPumpParameters']:
        return pulumi.get(self, "data_pump_parameters")

    @property
    @pulumi.getter(name="exportDirectoryObject")
    def export_directory_object(self) -> Optional['outputs.MigrationDatapumpSettingsExportDirectoryObject']:
        return pulumi.get(self, "export_directory_object")

    @property
    @pulumi.getter(name="importDirectoryObject")
    def import_directory_object(self) -> Optional['outputs.MigrationDatapumpSettingsImportDirectoryObject']:
        return pulumi.get(self, "import_directory_object")

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> Optional[str]:
        return pulumi.get(self, "job_mode")

    @property
    @pulumi.getter(name="metadataRemaps")
    def metadata_remaps(self) -> Optional[Sequence['outputs.MigrationDatapumpSettingsMetadataRemap']]:
        return pulumi.get(self, "metadata_remaps")


@pulumi.output_type
class MigrationDatapumpSettingsDataPumpParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeParameters":
            suggest = "exclude_parameters"
        elif key == "exportParallelismDegree":
            suggest = "export_parallelism_degree"
        elif key == "importParallelismDegree":
            suggest = "import_parallelism_degree"
        elif key == "isCluster":
            suggest = "is_cluster"
        elif key == "tableExistsAction":
            suggest = "table_exists_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDatapumpSettingsDataPumpParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDatapumpSettingsDataPumpParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDatapumpSettingsDataPumpParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 estimate: Optional[str] = None,
                 exclude_parameters: Optional[Sequence[str]] = None,
                 export_parallelism_degree: Optional[int] = None,
                 import_parallelism_degree: Optional[int] = None,
                 is_cluster: Optional[bool] = None,
                 table_exists_action: Optional[str] = None):
        if estimate is not None:
            pulumi.set(__self__, "estimate", estimate)
        if exclude_parameters is not None:
            pulumi.set(__self__, "exclude_parameters", exclude_parameters)
        if export_parallelism_degree is not None:
            pulumi.set(__self__, "export_parallelism_degree", export_parallelism_degree)
        if import_parallelism_degree is not None:
            pulumi.set(__self__, "import_parallelism_degree", import_parallelism_degree)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if table_exists_action is not None:
            pulumi.set(__self__, "table_exists_action", table_exists_action)

    @property
    @pulumi.getter
    def estimate(self) -> Optional[str]:
        return pulumi.get(self, "estimate")

    @property
    @pulumi.getter(name="excludeParameters")
    def exclude_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_parameters")

    @property
    @pulumi.getter(name="exportParallelismDegree")
    def export_parallelism_degree(self) -> Optional[int]:
        return pulumi.get(self, "export_parallelism_degree")

    @property
    @pulumi.getter(name="importParallelismDegree")
    def import_parallelism_degree(self) -> Optional[int]:
        return pulumi.get(self, "import_parallelism_degree")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="tableExistsAction")
    def table_exists_action(self) -> Optional[str]:
        return pulumi.get(self, "table_exists_action")


@pulumi.output_type
class MigrationDatapumpSettingsExportDirectoryObject(dict):
    def __init__(__self__, *,
                 name: str,
                 path: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class MigrationDatapumpSettingsImportDirectoryObject(dict):
    def __init__(__self__, *,
                 name: str,
                 path: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class MigrationDatapumpSettingsMetadataRemap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newValue":
            suggest = "new_value"
        elif key == "oldValue":
            suggest = "old_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDatapumpSettingsMetadataRemap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDatapumpSettingsMetadataRemap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDatapumpSettingsMetadataRemap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_value: str,
                 old_value: str,
                 type: str):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> str:
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> str:
        return pulumi.get(self, "old_value")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class MigrationDumpTransferDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sharedStorageMountTargetId":
            suggest = "shared_storage_mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDumpTransferDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDumpTransferDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDumpTransferDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shared_storage_mount_target_id: Optional[str] = None,
                 source: Optional['outputs.MigrationDumpTransferDetailsSource'] = None,
                 target: Optional['outputs.MigrationDumpTransferDetailsTarget'] = None):
        if shared_storage_mount_target_id is not None:
            pulumi.set(__self__, "shared_storage_mount_target_id", shared_storage_mount_target_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="sharedStorageMountTargetId")
    def shared_storage_mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "shared_storage_mount_target_id")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.MigrationDumpTransferDetailsSource']:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def target(self) -> Optional['outputs.MigrationDumpTransferDetailsTarget']:
        return pulumi.get(self, "target")


@pulumi.output_type
class MigrationDumpTransferDetailsSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ociHome":
            suggest = "oci_home"
        elif key == "walletLocation":
            suggest = "wallet_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDumpTransferDetailsSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDumpTransferDetailsSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDumpTransferDetailsSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 oci_home: Optional[str] = None,
                 wallet_location: Optional[str] = None):
        pulumi.set(__self__, "kind", kind)
        if oci_home is not None:
            pulumi.set(__self__, "oci_home", oci_home)
        if wallet_location is not None:
            pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> Optional[str]:
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> Optional[str]:
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class MigrationDumpTransferDetailsTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ociHome":
            suggest = "oci_home"
        elif key == "walletLocation":
            suggest = "wallet_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationDumpTransferDetailsTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationDumpTransferDetailsTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationDumpTransferDetailsTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kind: str,
                 oci_home: Optional[str] = None,
                 wallet_location: Optional[str] = None):
        pulumi.set(__self__, "kind", kind)
        if oci_home is not None:
            pulumi.set(__self__, "oci_home", oci_home)
        if wallet_location is not None:
            pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> Optional[str]:
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> Optional[str]:
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class MigrationExcludeObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isOmitExcludedTableFromReplication":
            suggest = "is_omit_excluded_table_from_replication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationExcludeObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationExcludeObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationExcludeObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object: str,
                 owner: str,
                 is_omit_excluded_table_from_replication: Optional[bool] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owner", owner)
        if is_omit_excluded_table_from_replication is not None:
            pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> Optional[bool]:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MigrationGoldenGateDetails(dict):
    def __init__(__self__, *,
                 hub: 'outputs.MigrationGoldenGateDetailsHub',
                 settings: Optional['outputs.MigrationGoldenGateDetailsSettings'] = None):
        pulumi.set(__self__, "hub", hub)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def hub(self) -> 'outputs.MigrationGoldenGateDetailsHub':
        return pulumi.get(self, "hub")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.MigrationGoldenGateDetailsSettings']:
        return pulumi.get(self, "settings")


@pulumi.output_type
class MigrationGoldenGateDetailsHub(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restAdminCredentials":
            suggest = "rest_admin_credentials"
        elif key == "computeId":
            suggest = "compute_id"
        elif key == "sourceContainerDbAdminCredentials":
            suggest = "source_container_db_admin_credentials"
        elif key == "sourceDbAdminCredentials":
            suggest = "source_db_admin_credentials"
        elif key == "sourceMicroservicesDeploymentName":
            suggest = "source_microservices_deployment_name"
        elif key == "targetDbAdminCredentials":
            suggest = "target_db_admin_credentials"
        elif key == "targetMicroservicesDeploymentName":
            suggest = "target_microservices_deployment_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGoldenGateDetailsHub. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGoldenGateDetailsHub.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGoldenGateDetailsHub.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rest_admin_credentials: 'outputs.MigrationGoldenGateDetailsHubRestAdminCredentials',
                 url: str,
                 compute_id: Optional[str] = None,
                 source_container_db_admin_credentials: Optional['outputs.MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentials'] = None,
                 source_db_admin_credentials: Optional['outputs.MigrationGoldenGateDetailsHubSourceDbAdminCredentials'] = None,
                 source_microservices_deployment_name: Optional[str] = None,
                 target_db_admin_credentials: Optional['outputs.MigrationGoldenGateDetailsHubTargetDbAdminCredentials'] = None,
                 target_microservices_deployment_name: Optional[str] = None):
        pulumi.set(__self__, "rest_admin_credentials", rest_admin_credentials)
        pulumi.set(__self__, "url", url)
        if compute_id is not None:
            pulumi.set(__self__, "compute_id", compute_id)
        if source_container_db_admin_credentials is not None:
            pulumi.set(__self__, "source_container_db_admin_credentials", source_container_db_admin_credentials)
        if source_db_admin_credentials is not None:
            pulumi.set(__self__, "source_db_admin_credentials", source_db_admin_credentials)
        if source_microservices_deployment_name is not None:
            pulumi.set(__self__, "source_microservices_deployment_name", source_microservices_deployment_name)
        if target_db_admin_credentials is not None:
            pulumi.set(__self__, "target_db_admin_credentials", target_db_admin_credentials)
        if target_microservices_deployment_name is not None:
            pulumi.set(__self__, "target_microservices_deployment_name", target_microservices_deployment_name)

    @property
    @pulumi.getter(name="restAdminCredentials")
    def rest_admin_credentials(self) -> 'outputs.MigrationGoldenGateDetailsHubRestAdminCredentials':
        return pulumi.get(self, "rest_admin_credentials")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="sourceContainerDbAdminCredentials")
    def source_container_db_admin_credentials(self) -> Optional['outputs.MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentials']:
        return pulumi.get(self, "source_container_db_admin_credentials")

    @property
    @pulumi.getter(name="sourceDbAdminCredentials")
    def source_db_admin_credentials(self) -> Optional['outputs.MigrationGoldenGateDetailsHubSourceDbAdminCredentials']:
        return pulumi.get(self, "source_db_admin_credentials")

    @property
    @pulumi.getter(name="sourceMicroservicesDeploymentName")
    def source_microservices_deployment_name(self) -> Optional[str]:
        return pulumi.get(self, "source_microservices_deployment_name")

    @property
    @pulumi.getter(name="targetDbAdminCredentials")
    def target_db_admin_credentials(self) -> Optional['outputs.MigrationGoldenGateDetailsHubTargetDbAdminCredentials']:
        return pulumi.get(self, "target_db_admin_credentials")

    @property
    @pulumi.getter(name="targetMicroservicesDeploymentName")
    def target_microservices_deployment_name(self) -> Optional[str]:
        return pulumi.get(self, "target_microservices_deployment_name")


@pulumi.output_type
class MigrationGoldenGateDetailsHubRestAdminCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class MigrationGoldenGateDetailsHubSourceContainerDbAdminCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class MigrationGoldenGateDetailsHubSourceDbAdminCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class MigrationGoldenGateDetailsHubTargetDbAdminCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class MigrationGoldenGateDetailsSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptableLag":
            suggest = "acceptable_lag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGoldenGateDetailsSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGoldenGateDetailsSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGoldenGateDetailsSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acceptable_lag: Optional[int] = None,
                 extract: Optional['outputs.MigrationGoldenGateDetailsSettingsExtract'] = None,
                 replicat: Optional['outputs.MigrationGoldenGateDetailsSettingsReplicat'] = None):
        if acceptable_lag is not None:
            pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        if extract is not None:
            pulumi.set(__self__, "extract", extract)
        if replicat is not None:
            pulumi.set(__self__, "replicat", replicat)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> Optional[int]:
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter
    def extract(self) -> Optional['outputs.MigrationGoldenGateDetailsSettingsExtract']:
        return pulumi.get(self, "extract")

    @property
    @pulumi.getter
    def replicat(self) -> Optional['outputs.MigrationGoldenGateDetailsSettingsReplicat']:
        return pulumi.get(self, "replicat")


@pulumi.output_type
class MigrationGoldenGateDetailsSettingsExtract(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "longTransDuration":
            suggest = "long_trans_duration"
        elif key == "performanceProfile":
            suggest = "performance_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGoldenGateDetailsSettingsExtract. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGoldenGateDetailsSettingsExtract.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGoldenGateDetailsSettingsExtract.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 long_trans_duration: Optional[int] = None,
                 performance_profile: Optional[str] = None):
        if long_trans_duration is not None:
            pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> Optional[int]:
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[str]:
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class MigrationGoldenGateDetailsSettingsReplicat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapParallelism":
            suggest = "map_parallelism"
        elif key == "maxApplyParallelism":
            suggest = "max_apply_parallelism"
        elif key == "minApplyParallelism":
            suggest = "min_apply_parallelism"
        elif key == "performanceProfile":
            suggest = "performance_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGoldenGateDetailsSettingsReplicat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGoldenGateDetailsSettingsReplicat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGoldenGateDetailsSettingsReplicat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_parallelism: Optional[int] = None,
                 max_apply_parallelism: Optional[int] = None,
                 min_apply_parallelism: Optional[int] = None,
                 performance_profile: Optional[str] = None):
        if map_parallelism is not None:
            pulumi.set(__self__, "map_parallelism", map_parallelism)
        if max_apply_parallelism is not None:
            pulumi.set(__self__, "max_apply_parallelism", max_apply_parallelism)
        if min_apply_parallelism is not None:
            pulumi.set(__self__, "min_apply_parallelism", min_apply_parallelism)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="mapParallelism")
    def map_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "map_parallelism")

    @property
    @pulumi.getter(name="maxApplyParallelism")
    def max_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "max_apply_parallelism")

    @property
    @pulumi.getter(name="minApplyParallelism")
    def min_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "min_apply_parallelism")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[str]:
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class MigrationGoldenGateServiceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ggsDeployments":
            suggest = "ggs_deployments"
        elif key == "sourceContainerDbCredentials":
            suggest = "source_container_db_credentials"
        elif key == "sourceDbCredentials":
            suggest = "source_db_credentials"
        elif key == "targetDbCredentials":
            suggest = "target_db_credentials"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGoldenGateServiceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGoldenGateServiceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGoldenGateServiceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ggs_deployments: Optional[Sequence['outputs.MigrationGoldenGateServiceDetailsGgsDeployment']] = None,
                 settings: Optional['outputs.MigrationGoldenGateServiceDetailsSettings'] = None,
                 source_container_db_credentials: Optional['outputs.MigrationGoldenGateServiceDetailsSourceContainerDbCredentials'] = None,
                 source_db_credentials: Optional['outputs.MigrationGoldenGateServiceDetailsSourceDbCredentials'] = None,
                 target_db_credentials: Optional['outputs.MigrationGoldenGateServiceDetailsTargetDbCredentials'] = None):
        if ggs_deployments is not None:
            pulumi.set(__self__, "ggs_deployments", ggs_deployments)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if source_container_db_credentials is not None:
            pulumi.set(__self__, "source_container_db_credentials", source_container_db_credentials)
        if source_db_credentials is not None:
            pulumi.set(__self__, "source_db_credentials", source_db_credentials)
        if target_db_credentials is not None:
            pulumi.set(__self__, "target_db_credentials", target_db_credentials)

    @property
    @pulumi.getter(name="ggsDeployments")
    def ggs_deployments(self) -> Optional[Sequence['outputs.MigrationGoldenGateServiceDetailsGgsDeployment']]:
        return pulumi.get(self, "ggs_deployments")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.MigrationGoldenGateServiceDetailsSettings']:
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter(name="sourceContainerDbCredentials")
    def source_container_db_credentials(self) -> Optional['outputs.MigrationGoldenGateServiceDetailsSourceContainerDbCredentials']:
        return pulumi.get(self, "source_container_db_credentials")

    @property
    @pulumi.getter(name="sourceDbCredentials")
    def source_db_credentials(self) -> Optional['outputs.MigrationGoldenGateServiceDetailsSourceDbCredentials']:
        return pulumi.get(self, "source_db_credentials")

    @property
    @pulumi.getter(name="targetDbCredentials")
    def target_db_credentials(self) -> Optional['outputs.MigrationGoldenGateServiceDetailsTargetDbCredentials']:
        return pulumi.get(self, "target_db_credentials")


@pulumi.output_type
class MigrationGoldenGateServiceDetailsGgsDeployment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentId":
            suggest = "deployment_id"
        elif key == "ggsAdminCredentialsSecretId":
            suggest = "ggs_admin_credentials_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGoldenGateServiceDetailsGgsDeployment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGoldenGateServiceDetailsGgsDeployment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGoldenGateServiceDetailsGgsDeployment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_id: Optional[str] = None,
                 ggs_admin_credentials_secret_id: Optional[str] = None):
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if ggs_admin_credentials_secret_id is not None:
            pulumi.set(__self__, "ggs_admin_credentials_secret_id", ggs_admin_credentials_secret_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="ggsAdminCredentialsSecretId")
    def ggs_admin_credentials_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ggs_admin_credentials_secret_id")


@pulumi.output_type
class MigrationGoldenGateServiceDetailsSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptableLag":
            suggest = "acceptable_lag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGoldenGateServiceDetailsSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGoldenGateServiceDetailsSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGoldenGateServiceDetailsSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acceptable_lag: Optional[int] = None,
                 extract: Optional['outputs.MigrationGoldenGateServiceDetailsSettingsExtract'] = None,
                 replicat: Optional['outputs.MigrationGoldenGateServiceDetailsSettingsReplicat'] = None):
        if acceptable_lag is not None:
            pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        if extract is not None:
            pulumi.set(__self__, "extract", extract)
        if replicat is not None:
            pulumi.set(__self__, "replicat", replicat)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> Optional[int]:
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter
    def extract(self) -> Optional['outputs.MigrationGoldenGateServiceDetailsSettingsExtract']:
        return pulumi.get(self, "extract")

    @property
    @pulumi.getter
    def replicat(self) -> Optional['outputs.MigrationGoldenGateServiceDetailsSettingsReplicat']:
        return pulumi.get(self, "replicat")


@pulumi.output_type
class MigrationGoldenGateServiceDetailsSettingsExtract(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "longTransDuration":
            suggest = "long_trans_duration"
        elif key == "performanceProfile":
            suggest = "performance_profile"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGoldenGateServiceDetailsSettingsExtract. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGoldenGateServiceDetailsSettingsExtract.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGoldenGateServiceDetailsSettingsExtract.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 long_trans_duration: Optional[int] = None,
                 performance_profile: Optional[str] = None):
        if long_trans_duration is not None:
            pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> Optional[int]:
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[str]:
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class MigrationGoldenGateServiceDetailsSettingsReplicat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mapParallelism":
            suggest = "map_parallelism"
        elif key == "maxApplyParallelism":
            suggest = "max_apply_parallelism"
        elif key == "minApplyParallelism":
            suggest = "min_apply_parallelism"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationGoldenGateServiceDetailsSettingsReplicat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationGoldenGateServiceDetailsSettingsReplicat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationGoldenGateServiceDetailsSettingsReplicat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 map_parallelism: Optional[int] = None,
                 max_apply_parallelism: Optional[int] = None,
                 min_apply_parallelism: Optional[int] = None):
        if map_parallelism is not None:
            pulumi.set(__self__, "map_parallelism", map_parallelism)
        if max_apply_parallelism is not None:
            pulumi.set(__self__, "max_apply_parallelism", max_apply_parallelism)
        if min_apply_parallelism is not None:
            pulumi.set(__self__, "min_apply_parallelism", min_apply_parallelism)

    @property
    @pulumi.getter(name="mapParallelism")
    def map_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "map_parallelism")

    @property
    @pulumi.getter(name="maxApplyParallelism")
    def max_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "max_apply_parallelism")

    @property
    @pulumi.getter(name="minApplyParallelism")
    def min_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "min_apply_parallelism")


@pulumi.output_type
class MigrationGoldenGateServiceDetailsSourceContainerDbCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class MigrationGoldenGateServiceDetailsSourceDbCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class MigrationGoldenGateServiceDetailsTargetDbCredentials(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class MigrationIncludeObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isOmitExcludedTableFromReplication":
            suggest = "is_omit_excluded_table_from_replication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationIncludeObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationIncludeObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationIncludeObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object: str,
                 owner: str,
                 is_omit_excluded_table_from_replication: Optional[bool] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "owner", owner)
        if is_omit_excluded_table_from_replication is not None:
            pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> Optional[bool]:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class MigrationVaultDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "keyId":
            suggest = "key_id"
        elif key == "vaultId":
            suggest = "vault_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationVaultDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationVaultDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationVaultDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: str,
                 key_id: str,
                 vault_id: str):
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> str:
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetAgentImagesAgentImageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAgentImagesAgentImageCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAgentImagesAgentImageCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentImagesAgentImageCollectionItemResult(dict):
    def __init__(__self__, *,
                 download_url: Optional[str] = None,
                 version: Optional[str] = None):
        if download_url is not None:
            pulumi.set(__self__, "download_url", download_url)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="downloadUrl")
    def download_url(self) -> Optional[str]:
        return pulumi.get(self, "download_url")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAgentImagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAgentsAgentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAgentsAgentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAgentsAgentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAgentsAgentCollectionItemResult(dict):
    def __init__(__self__, *,
                 agent_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 public_key: Optional[str] = None,
                 state: Optional[str] = None,
                 stream_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[str] = None):
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[str]:
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetAgentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetConnectionAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetConnectionConnectDescriptorResult(dict):
    def __init__(__self__, *,
                 connect_string: Optional[str] = None,
                 database_service_name: Optional[str] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        if connect_string is not None:
            pulumi.set(__self__, "connect_string", connect_string)
        if database_service_name is not None:
            pulumi.set(__self__, "database_service_name", database_service_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="connectString")
    def connect_string(self) -> Optional[str]:
        return pulumi.get(self, "connect_string")

    @property
    @pulumi.getter(name="databaseServiceName")
    def database_service_name(self) -> Optional[str]:
        return pulumi.get(self, "database_service_name")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetConnectionPrivateEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetConnectionReplicationCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetConnectionSshDetailResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 sshkey: Optional[str] = None,
                 sudo_location: Optional[str] = None,
                 user: Optional[str] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if sshkey is not None:
            pulumi.set(__self__, "sshkey", sshkey)
        if sudo_location is not None:
            pulumi.set(__self__, "sudo_location", sudo_location)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def sshkey(self) -> Optional[str]:
        return pulumi.get(self, "sshkey")

    @property
    @pulumi.getter(name="sudoLocation")
    def sudo_location(self) -> Optional[str]:
        return pulumi.get(self, "sudo_location")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetConnectionVaultDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 key_id: Optional[str] = None,
                 vault_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetConnectionsConnectionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemResult(dict):
    def __init__(__self__, *,
                 admin_credentials: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemAdminCredentialResult']] = None,
                 certificate_tdn: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 connect_descriptors: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemConnectDescriptorResult']] = None,
                 credentials_secret_id: Optional[str] = None,
                 database_id: Optional[str] = None,
                 database_type: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_endpoints: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemPrivateEndpointResult']] = None,
                 replication_credentials: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemReplicationCredentialResult']] = None,
                 ssh_details: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemSshDetailResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 tls_keystore: Optional[str] = None,
                 tls_wallet: Optional[str] = None,
                 vault_details: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemVaultDetailResult']] = None):
        if admin_credentials is not None:
            pulumi.set(__self__, "admin_credentials", admin_credentials)
        if certificate_tdn is not None:
            pulumi.set(__self__, "certificate_tdn", certificate_tdn)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connect_descriptors is not None:
            pulumi.set(__self__, "connect_descriptors", connect_descriptors)
        if credentials_secret_id is not None:
            pulumi.set(__self__, "credentials_secret_id", credentials_secret_id)
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_endpoints is not None:
            pulumi.set(__self__, "private_endpoints", private_endpoints)
        if replication_credentials is not None:
            pulumi.set(__self__, "replication_credentials", replication_credentials)
        if ssh_details is not None:
            pulumi.set(__self__, "ssh_details", ssh_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if tls_keystore is not None:
            pulumi.set(__self__, "tls_keystore", tls_keystore)
        if tls_wallet is not None:
            pulumi.set(__self__, "tls_wallet", tls_wallet)
        if vault_details is not None:
            pulumi.set(__self__, "vault_details", vault_details)

    @property
    @pulumi.getter(name="adminCredentials")
    def admin_credentials(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemAdminCredentialResult']]:
        return pulumi.get(self, "admin_credentials")

    @property
    @pulumi.getter(name="certificateTdn")
    def certificate_tdn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_tdn")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectDescriptors")
    def connect_descriptors(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemConnectDescriptorResult']]:
        return pulumi.get(self, "connect_descriptors")

    @property
    @pulumi.getter(name="credentialsSecretId")
    def credentials_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "credentials_secret_id")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateEndpoints")
    def private_endpoints(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemPrivateEndpointResult']]:
        return pulumi.get(self, "private_endpoints")

    @property
    @pulumi.getter(name="replicationCredentials")
    def replication_credentials(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemReplicationCredentialResult']]:
        return pulumi.get(self, "replication_credentials")

    @property
    @pulumi.getter(name="sshDetails")
    def ssh_details(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemSshDetailResult']]:
        return pulumi.get(self, "ssh_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="tlsKeystore")
    def tls_keystore(self) -> Optional[str]:
        return pulumi.get(self, "tls_keystore")

    @property
    @pulumi.getter(name="tlsWallet")
    def tls_wallet(self) -> Optional[str]:
        return pulumi.get(self, "tls_wallet")

    @property
    @pulumi.getter(name="vaultDetails")
    def vault_details(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemVaultDetailResult']]:
        return pulumi.get(self, "vault_details")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemConnectDescriptorResult(dict):
    def __init__(__self__, *,
                 connect_string: Optional[str] = None,
                 database_service_name: Optional[str] = None,
                 host: Optional[str] = None,
                 port: Optional[int] = None):
        if connect_string is not None:
            pulumi.set(__self__, "connect_string", connect_string)
        if database_service_name is not None:
            pulumi.set(__self__, "database_service_name", database_service_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="connectString")
    def connect_string(self) -> Optional[str]:
        return pulumi.get(self, "connect_string")

    @property
    @pulumi.getter(name="databaseServiceName")
    def database_service_name(self) -> Optional[str]:
        return pulumi.get(self, "database_service_name")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemPrivateEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemReplicationCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemSshDetailResult(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 sshkey: Optional[str] = None,
                 sudo_location: Optional[str] = None,
                 user: Optional[str] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if sshkey is not None:
            pulumi.set(__self__, "sshkey", sshkey)
        if sudo_location is not None:
            pulumi.set(__self__, "sudo_location", sudo_location)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def sshkey(self) -> Optional[str]:
        return pulumi.get(self, "sshkey")

    @property
    @pulumi.getter(name="sudoLocation")
    def sudo_location(self) -> Optional[str]:
        return pulumi.get(self, "sudo_location")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemVaultDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 key_id: Optional[str] = None,
                 vault_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobAdvisorReportReportLocationDetailResult(dict):
    def __init__(__self__, *,
                 location_in_source: Optional[str] = None,
                 object_storage_details: Optional[Sequence['outputs.GetJobAdvisorReportReportLocationDetailObjectStorageDetailResult']] = None):
        if location_in_source is not None:
            pulumi.set(__self__, "location_in_source", location_in_source)
        if object_storage_details is not None:
            pulumi.set(__self__, "object_storage_details", object_storage_details)

    @property
    @pulumi.getter(name="locationInSource")
    def location_in_source(self) -> Optional[str]:
        return pulumi.get(self, "location_in_source")

    @property
    @pulumi.getter(name="objectStorageDetails")
    def object_storage_details(self) -> Optional[Sequence['outputs.GetJobAdvisorReportReportLocationDetailObjectStorageDetailResult']]:
        return pulumi.get(self, "object_storage_details")


@pulumi.output_type
class GetJobAdvisorReportReportLocationDetailObjectStorageDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetJobOutputItemResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")


@pulumi.output_type
class GetMigrationAdvisorSettingResult(dict):
    def __init__(__self__, *,
                 is_ignore_errors: Optional[bool] = None,
                 is_skip_advisor: Optional[bool] = None):
        if is_ignore_errors is not None:
            pulumi.set(__self__, "is_ignore_errors", is_ignore_errors)
        if is_skip_advisor is not None:
            pulumi.set(__self__, "is_skip_advisor", is_skip_advisor)

    @property
    @pulumi.getter(name="isIgnoreErrors")
    def is_ignore_errors(self) -> Optional[bool]:
        return pulumi.get(self, "is_ignore_errors")

    @property
    @pulumi.getter(name="isSkipAdvisor")
    def is_skip_advisor(self) -> Optional[bool]:
        return pulumi.get(self, "is_skip_advisor")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailResult(dict):
    def __init__(__self__, *,
                 database_link_details: Optional[Sequence['outputs.GetMigrationDataTransferMediumDetailDatabaseLinkDetailResult']] = None,
                 object_storage_details: Optional[Sequence['outputs.GetMigrationDataTransferMediumDetailObjectStorageDetailResult']] = None):
        if database_link_details is not None:
            pulumi.set(__self__, "database_link_details", database_link_details)
        if object_storage_details is not None:
            pulumi.set(__self__, "object_storage_details", object_storage_details)

    @property
    @pulumi.getter(name="databaseLinkDetails")
    def database_link_details(self) -> Optional[Sequence['outputs.GetMigrationDataTransferMediumDetailDatabaseLinkDetailResult']]:
        return pulumi.get(self, "database_link_details")

    @property
    @pulumi.getter(name="objectStorageDetails")
    def object_storage_details(self) -> Optional[Sequence['outputs.GetMigrationDataTransferMediumDetailObjectStorageDetailResult']]:
        return pulumi.get(self, "object_storage_details")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailDatabaseLinkDetailResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 wallet_buckets: Optional[Sequence['outputs.GetMigrationDataTransferMediumDetailDatabaseLinkDetailWalletBucketResult']] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wallet_buckets is not None:
            pulumi.set(__self__, "wallet_buckets", wallet_buckets)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="walletBuckets")
    def wallet_buckets(self) -> Optional[Sequence['outputs.GetMigrationDataTransferMediumDetailDatabaseLinkDetailWalletBucketResult']]:
        return pulumi.get(self, "wallet_buckets")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailDatabaseLinkDetailWalletBucketResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailObjectStorageDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailsV2Result(dict):
    def __init__(__self__, *,
                 access_key_id: Optional[str] = None,
                 name: Optional[str] = None,
                 object_storage_buckets: Optional[Sequence['outputs.GetMigrationDataTransferMediumDetailsV2ObjectStorageBucketResult']] = None,
                 region: Optional[str] = None,
                 secret_access_key: Optional[str] = None,
                 type: Optional[str] = None):
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_storage_buckets is not None:
            pulumi.set(__self__, "object_storage_buckets", object_storage_buckets)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStorageBuckets")
    def object_storage_buckets(self) -> Optional[Sequence['outputs.GetMigrationDataTransferMediumDetailsV2ObjectStorageBucketResult']]:
        return pulumi.get(self, "object_storage_buckets")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationDataTransferMediumDetailsV2ObjectStorageBucketResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetMigrationDatapumpSettingResult(dict):
    def __init__(__self__, *,
                 data_pump_parameters: Optional[Sequence['outputs.GetMigrationDatapumpSettingDataPumpParameterResult']] = None,
                 export_directory_objects: Optional[Sequence['outputs.GetMigrationDatapumpSettingExportDirectoryObjectResult']] = None,
                 import_directory_objects: Optional[Sequence['outputs.GetMigrationDatapumpSettingImportDirectoryObjectResult']] = None,
                 job_mode: Optional[str] = None,
                 metadata_remaps: Optional[Sequence['outputs.GetMigrationDatapumpSettingMetadataRemapResult']] = None):
        if data_pump_parameters is not None:
            pulumi.set(__self__, "data_pump_parameters", data_pump_parameters)
        if export_directory_objects is not None:
            pulumi.set(__self__, "export_directory_objects", export_directory_objects)
        if import_directory_objects is not None:
            pulumi.set(__self__, "import_directory_objects", import_directory_objects)
        if job_mode is not None:
            pulumi.set(__self__, "job_mode", job_mode)
        if metadata_remaps is not None:
            pulumi.set(__self__, "metadata_remaps", metadata_remaps)

    @property
    @pulumi.getter(name="dataPumpParameters")
    def data_pump_parameters(self) -> Optional[Sequence['outputs.GetMigrationDatapumpSettingDataPumpParameterResult']]:
        return pulumi.get(self, "data_pump_parameters")

    @property
    @pulumi.getter(name="exportDirectoryObjects")
    def export_directory_objects(self) -> Optional[Sequence['outputs.GetMigrationDatapumpSettingExportDirectoryObjectResult']]:
        return pulumi.get(self, "export_directory_objects")

    @property
    @pulumi.getter(name="importDirectoryObjects")
    def import_directory_objects(self) -> Optional[Sequence['outputs.GetMigrationDatapumpSettingImportDirectoryObjectResult']]:
        return pulumi.get(self, "import_directory_objects")

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> Optional[str]:
        return pulumi.get(self, "job_mode")

    @property
    @pulumi.getter(name="metadataRemaps")
    def metadata_remaps(self) -> Optional[Sequence['outputs.GetMigrationDatapumpSettingMetadataRemapResult']]:
        return pulumi.get(self, "metadata_remaps")


@pulumi.output_type
class GetMigrationDatapumpSettingDataPumpParameterResult(dict):
    def __init__(__self__, *,
                 estimate: Optional[str] = None,
                 exclude_parameters: Optional[Sequence[str]] = None,
                 export_parallelism_degree: Optional[int] = None,
                 import_parallelism_degree: Optional[int] = None,
                 is_cluster: Optional[bool] = None,
                 table_exists_action: Optional[str] = None):
        if estimate is not None:
            pulumi.set(__self__, "estimate", estimate)
        if exclude_parameters is not None:
            pulumi.set(__self__, "exclude_parameters", exclude_parameters)
        if export_parallelism_degree is not None:
            pulumi.set(__self__, "export_parallelism_degree", export_parallelism_degree)
        if import_parallelism_degree is not None:
            pulumi.set(__self__, "import_parallelism_degree", import_parallelism_degree)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if table_exists_action is not None:
            pulumi.set(__self__, "table_exists_action", table_exists_action)

    @property
    @pulumi.getter
    def estimate(self) -> Optional[str]:
        return pulumi.get(self, "estimate")

    @property
    @pulumi.getter(name="excludeParameters")
    def exclude_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_parameters")

    @property
    @pulumi.getter(name="exportParallelismDegree")
    def export_parallelism_degree(self) -> Optional[int]:
        return pulumi.get(self, "export_parallelism_degree")

    @property
    @pulumi.getter(name="importParallelismDegree")
    def import_parallelism_degree(self) -> Optional[int]:
        return pulumi.get(self, "import_parallelism_degree")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="tableExistsAction")
    def table_exists_action(self) -> Optional[str]:
        return pulumi.get(self, "table_exists_action")


@pulumi.output_type
class GetMigrationDatapumpSettingExportDirectoryObjectResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetMigrationDatapumpSettingImportDirectoryObjectResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetMigrationDatapumpSettingMetadataRemapResult(dict):
    def __init__(__self__, *,
                 new_value: Optional[str] = None,
                 old_value: Optional[str] = None,
                 type: Optional[str] = None):
        if new_value is not None:
            pulumi.set(__self__, "new_value", new_value)
        if old_value is not None:
            pulumi.set(__self__, "old_value", old_value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> Optional[str]:
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> Optional[str]:
        return pulumi.get(self, "old_value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationDumpTransferDetailResult(dict):
    def __init__(__self__, *,
                 shared_storage_mount_target_id: Optional[str] = None,
                 sources: Optional[Sequence['outputs.GetMigrationDumpTransferDetailSourceResult']] = None,
                 targets: Optional[Sequence['outputs.GetMigrationDumpTransferDetailTargetResult']] = None):
        if shared_storage_mount_target_id is not None:
            pulumi.set(__self__, "shared_storage_mount_target_id", shared_storage_mount_target_id)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="sharedStorageMountTargetId")
    def shared_storage_mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "shared_storage_mount_target_id")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.GetMigrationDumpTransferDetailSourceResult']]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.GetMigrationDumpTransferDetailTargetResult']]:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetMigrationDumpTransferDetailSourceResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 oci_home: Optional[str] = None,
                 wallet_location: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if oci_home is not None:
            pulumi.set(__self__, "oci_home", oci_home)
        if wallet_location is not None:
            pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> Optional[str]:
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> Optional[str]:
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class GetMigrationDumpTransferDetailTargetResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 oci_home: Optional[str] = None,
                 wallet_location: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if oci_home is not None:
            pulumi.set(__self__, "oci_home", oci_home)
        if wallet_location is not None:
            pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> Optional[str]:
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> Optional[str]:
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class GetMigrationExcludeObjectResult(dict):
    def __init__(__self__, *,
                 is_omit_excluded_table_from_replication: Optional[bool] = None,
                 object: Optional[str] = None,
                 owner: Optional[str] = None,
                 type: Optional[str] = None):
        if is_omit_excluded_table_from_replication is not None:
            pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> Optional[bool]:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationGoldenGateDetailResult(dict):
    def __init__(__self__, *,
                 hubs: Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubResult']] = None,
                 settings: Optional[Sequence['outputs.GetMigrationGoldenGateDetailSettingResult']] = None):
        if hubs is not None:
            pulumi.set(__self__, "hubs", hubs)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def hubs(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubResult']]:
        return pulumi.get(self, "hubs")

    @property
    @pulumi.getter
    def settings(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateDetailSettingResult']]:
        return pulumi.get(self, "settings")


@pulumi.output_type
class GetMigrationGoldenGateDetailHubResult(dict):
    def __init__(__self__, *,
                 compute_id: Optional[str] = None,
                 rest_admin_credentials: Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubRestAdminCredentialResult']] = None,
                 source_container_db_admin_credentials: Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubSourceContainerDbAdminCredentialResult']] = None,
                 source_db_admin_credentials: Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubSourceDbAdminCredentialResult']] = None,
                 source_microservices_deployment_name: Optional[str] = None,
                 target_db_admin_credentials: Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubTargetDbAdminCredentialResult']] = None,
                 target_microservices_deployment_name: Optional[str] = None,
                 url: Optional[str] = None):
        if compute_id is not None:
            pulumi.set(__self__, "compute_id", compute_id)
        if rest_admin_credentials is not None:
            pulumi.set(__self__, "rest_admin_credentials", rest_admin_credentials)
        if source_container_db_admin_credentials is not None:
            pulumi.set(__self__, "source_container_db_admin_credentials", source_container_db_admin_credentials)
        if source_db_admin_credentials is not None:
            pulumi.set(__self__, "source_db_admin_credentials", source_db_admin_credentials)
        if source_microservices_deployment_name is not None:
            pulumi.set(__self__, "source_microservices_deployment_name", source_microservices_deployment_name)
        if target_db_admin_credentials is not None:
            pulumi.set(__self__, "target_db_admin_credentials", target_db_admin_credentials)
        if target_microservices_deployment_name is not None:
            pulumi.set(__self__, "target_microservices_deployment_name", target_microservices_deployment_name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="restAdminCredentials")
    def rest_admin_credentials(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubRestAdminCredentialResult']]:
        return pulumi.get(self, "rest_admin_credentials")

    @property
    @pulumi.getter(name="sourceContainerDbAdminCredentials")
    def source_container_db_admin_credentials(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubSourceContainerDbAdminCredentialResult']]:
        return pulumi.get(self, "source_container_db_admin_credentials")

    @property
    @pulumi.getter(name="sourceDbAdminCredentials")
    def source_db_admin_credentials(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubSourceDbAdminCredentialResult']]:
        return pulumi.get(self, "source_db_admin_credentials")

    @property
    @pulumi.getter(name="sourceMicroservicesDeploymentName")
    def source_microservices_deployment_name(self) -> Optional[str]:
        return pulumi.get(self, "source_microservices_deployment_name")

    @property
    @pulumi.getter(name="targetDbAdminCredentials")
    def target_db_admin_credentials(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateDetailHubTargetDbAdminCredentialResult']]:
        return pulumi.get(self, "target_db_admin_credentials")

    @property
    @pulumi.getter(name="targetMicroservicesDeploymentName")
    def target_microservices_deployment_name(self) -> Optional[str]:
        return pulumi.get(self, "target_microservices_deployment_name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetMigrationGoldenGateDetailHubRestAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationGoldenGateDetailHubSourceContainerDbAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationGoldenGateDetailHubSourceDbAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationGoldenGateDetailHubTargetDbAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationGoldenGateDetailSettingResult(dict):
    def __init__(__self__, *,
                 acceptable_lag: Optional[int] = None,
                 extracts: Optional[Sequence['outputs.GetMigrationGoldenGateDetailSettingExtractResult']] = None,
                 replicats: Optional[Sequence['outputs.GetMigrationGoldenGateDetailSettingReplicatResult']] = None):
        if acceptable_lag is not None:
            pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        if extracts is not None:
            pulumi.set(__self__, "extracts", extracts)
        if replicats is not None:
            pulumi.set(__self__, "replicats", replicats)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> Optional[int]:
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter
    def extracts(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateDetailSettingExtractResult']]:
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter
    def replicats(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateDetailSettingReplicatResult']]:
        return pulumi.get(self, "replicats")


@pulumi.output_type
class GetMigrationGoldenGateDetailSettingExtractResult(dict):
    def __init__(__self__, *,
                 long_trans_duration: Optional[int] = None,
                 performance_profile: Optional[str] = None):
        if long_trans_duration is not None:
            pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> Optional[int]:
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[str]:
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationGoldenGateDetailSettingReplicatResult(dict):
    def __init__(__self__, *,
                 map_parallelism: Optional[int] = None,
                 max_apply_parallelism: Optional[int] = None,
                 min_apply_parallelism: Optional[int] = None,
                 performance_profile: Optional[str] = None):
        if map_parallelism is not None:
            pulumi.set(__self__, "map_parallelism", map_parallelism)
        if max_apply_parallelism is not None:
            pulumi.set(__self__, "max_apply_parallelism", max_apply_parallelism)
        if min_apply_parallelism is not None:
            pulumi.set(__self__, "min_apply_parallelism", min_apply_parallelism)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="mapParallelism")
    def map_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "map_parallelism")

    @property
    @pulumi.getter(name="maxApplyParallelism")
    def max_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "max_apply_parallelism")

    @property
    @pulumi.getter(name="minApplyParallelism")
    def min_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "min_apply_parallelism")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[str]:
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationGoldenGateServiceDetailResult(dict):
    def __init__(__self__, *,
                 ggs_deployments: Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailGgsDeploymentResult']] = None,
                 settings: Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSettingResult']] = None,
                 source_container_db_credentials: Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSourceContainerDbCredentialResult']] = None,
                 source_db_credentials: Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSourceDbCredentialResult']] = None,
                 target_db_credentials: Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailTargetDbCredentialResult']] = None):
        if ggs_deployments is not None:
            pulumi.set(__self__, "ggs_deployments", ggs_deployments)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if source_container_db_credentials is not None:
            pulumi.set(__self__, "source_container_db_credentials", source_container_db_credentials)
        if source_db_credentials is not None:
            pulumi.set(__self__, "source_db_credentials", source_db_credentials)
        if target_db_credentials is not None:
            pulumi.set(__self__, "target_db_credentials", target_db_credentials)

    @property
    @pulumi.getter(name="ggsDeployments")
    def ggs_deployments(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailGgsDeploymentResult']]:
        return pulumi.get(self, "ggs_deployments")

    @property
    @pulumi.getter
    def settings(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSettingResult']]:
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter(name="sourceContainerDbCredentials")
    def source_container_db_credentials(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSourceContainerDbCredentialResult']]:
        return pulumi.get(self, "source_container_db_credentials")

    @property
    @pulumi.getter(name="sourceDbCredentials")
    def source_db_credentials(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSourceDbCredentialResult']]:
        return pulumi.get(self, "source_db_credentials")

    @property
    @pulumi.getter(name="targetDbCredentials")
    def target_db_credentials(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailTargetDbCredentialResult']]:
        return pulumi.get(self, "target_db_credentials")


@pulumi.output_type
class GetMigrationGoldenGateServiceDetailGgsDeploymentResult(dict):
    def __init__(__self__, *,
                 deployment_id: Optional[str] = None,
                 ggs_admin_credentials_secret_id: Optional[str] = None):
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if ggs_admin_credentials_secret_id is not None:
            pulumi.set(__self__, "ggs_admin_credentials_secret_id", ggs_admin_credentials_secret_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="ggsAdminCredentialsSecretId")
    def ggs_admin_credentials_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ggs_admin_credentials_secret_id")


@pulumi.output_type
class GetMigrationGoldenGateServiceDetailSettingResult(dict):
    def __init__(__self__, *,
                 acceptable_lag: Optional[int] = None,
                 extracts: Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSettingExtractResult']] = None,
                 replicats: Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSettingReplicatResult']] = None):
        if acceptable_lag is not None:
            pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        if extracts is not None:
            pulumi.set(__self__, "extracts", extracts)
        if replicats is not None:
            pulumi.set(__self__, "replicats", replicats)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> Optional[int]:
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter
    def extracts(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSettingExtractResult']]:
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter
    def replicats(self) -> Optional[Sequence['outputs.GetMigrationGoldenGateServiceDetailSettingReplicatResult']]:
        return pulumi.get(self, "replicats")


@pulumi.output_type
class GetMigrationGoldenGateServiceDetailSettingExtractResult(dict):
    def __init__(__self__, *,
                 long_trans_duration: Optional[int] = None,
                 performance_profile: Optional[str] = None):
        if long_trans_duration is not None:
            pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> Optional[int]:
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[str]:
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationGoldenGateServiceDetailSettingReplicatResult(dict):
    def __init__(__self__, *,
                 map_parallelism: Optional[int] = None,
                 max_apply_parallelism: Optional[int] = None,
                 min_apply_parallelism: Optional[int] = None):
        if map_parallelism is not None:
            pulumi.set(__self__, "map_parallelism", map_parallelism)
        if max_apply_parallelism is not None:
            pulumi.set(__self__, "max_apply_parallelism", max_apply_parallelism)
        if min_apply_parallelism is not None:
            pulumi.set(__self__, "min_apply_parallelism", min_apply_parallelism)

    @property
    @pulumi.getter(name="mapParallelism")
    def map_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "map_parallelism")

    @property
    @pulumi.getter(name="maxApplyParallelism")
    def max_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "max_apply_parallelism")

    @property
    @pulumi.getter(name="minApplyParallelism")
    def min_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "min_apply_parallelism")


@pulumi.output_type
class GetMigrationGoldenGateServiceDetailSourceContainerDbCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationGoldenGateServiceDetailSourceDbCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationGoldenGateServiceDetailTargetDbCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationIncludeObjectResult(dict):
    def __init__(__self__, *,
                 is_omit_excluded_table_from_replication: Optional[bool] = None,
                 object: Optional[str] = None,
                 owner: Optional[str] = None,
                 type: Optional[str] = None):
        if is_omit_excluded_table_from_replication is not None:
            pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> Optional[bool]:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationObjectTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMigrationObjectTypesMigrationObjectTypeSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMigrationVaultDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 key_id: Optional[str] = None,
                 vault_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetMigrationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMigrationsMigrationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemResult(dict):
    def __init__(__self__, *,
                 advisor_settings: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemAdvisorSettingResult']] = None,
                 agent_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 credentials_secret_id: Optional[str] = None,
                 csv_text: Optional[str] = None,
                 data_transfer_medium_details: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailResult']] = None,
                 data_transfer_medium_details_v2s: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailsV2Result']] = None,
                 datapump_settings: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dump_transfer_details: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDumpTransferDetailResult']] = None,
                 exclude_objects: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemExcludeObjectResult']] = None,
                 executing_job_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 golden_gate_details: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailResult']] = None,
                 golden_gate_service_details: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailResult']] = None,
                 id: Optional[str] = None,
                 include_objects: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemIncludeObjectResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 source_container_database_connection_id: Optional[str] = None,
                 source_database_connection_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_database_connection_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_migration: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None,
                 vault_details: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemVaultDetailResult']] = None,
                 wait_after: Optional[str] = None):
        if advisor_settings is not None:
            pulumi.set(__self__, "advisor_settings", advisor_settings)
        if agent_id is not None:
            pulumi.set(__self__, "agent_id", agent_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if credentials_secret_id is not None:
            pulumi.set(__self__, "credentials_secret_id", credentials_secret_id)
        if csv_text is not None:
            pulumi.set(__self__, "csv_text", csv_text)
        if data_transfer_medium_details is not None:
            pulumi.set(__self__, "data_transfer_medium_details", data_transfer_medium_details)
        if data_transfer_medium_details_v2s is not None:
            pulumi.set(__self__, "data_transfer_medium_details_v2s", data_transfer_medium_details_v2s)
        if datapump_settings is not None:
            pulumi.set(__self__, "datapump_settings", datapump_settings)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dump_transfer_details is not None:
            pulumi.set(__self__, "dump_transfer_details", dump_transfer_details)
        if exclude_objects is not None:
            pulumi.set(__self__, "exclude_objects", exclude_objects)
        if executing_job_id is not None:
            pulumi.set(__self__, "executing_job_id", executing_job_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if golden_gate_details is not None:
            pulumi.set(__self__, "golden_gate_details", golden_gate_details)
        if golden_gate_service_details is not None:
            pulumi.set(__self__, "golden_gate_service_details", golden_gate_service_details)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if include_objects is not None:
            pulumi.set(__self__, "include_objects", include_objects)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if source_container_database_connection_id is not None:
            pulumi.set(__self__, "source_container_database_connection_id", source_container_database_connection_id)
        if source_database_connection_id is not None:
            pulumi.set(__self__, "source_database_connection_id", source_database_connection_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_database_connection_id is not None:
            pulumi.set(__self__, "target_database_connection_id", target_database_connection_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_migration is not None:
            pulumi.set(__self__, "time_last_migration", time_last_migration)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vault_details is not None:
            pulumi.set(__self__, "vault_details", vault_details)
        if wait_after is not None:
            pulumi.set(__self__, "wait_after", wait_after)

    @property
    @pulumi.getter(name="advisorSettings")
    def advisor_settings(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemAdvisorSettingResult']]:
        return pulumi.get(self, "advisor_settings")

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="credentialsSecretId")
    def credentials_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "credentials_secret_id")

    @property
    @pulumi.getter(name="csvText")
    def csv_text(self) -> Optional[str]:
        return pulumi.get(self, "csv_text")

    @property
    @pulumi.getter(name="dataTransferMediumDetails")
    def data_transfer_medium_details(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailResult']]:
        return pulumi.get(self, "data_transfer_medium_details")

    @property
    @pulumi.getter(name="dataTransferMediumDetailsV2s")
    def data_transfer_medium_details_v2s(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailsV2Result']]:
        return pulumi.get(self, "data_transfer_medium_details_v2s")

    @property
    @pulumi.getter(name="datapumpSettings")
    def datapump_settings(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingResult']]:
        return pulumi.get(self, "datapump_settings")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dumpTransferDetails")
    def dump_transfer_details(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDumpTransferDetailResult']]:
        return pulumi.get(self, "dump_transfer_details")

    @property
    @pulumi.getter(name="excludeObjects")
    def exclude_objects(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemExcludeObjectResult']]:
        return pulumi.get(self, "exclude_objects")

    @property
    @pulumi.getter(name="executingJobId")
    def executing_job_id(self) -> Optional[str]:
        return pulumi.get(self, "executing_job_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="goldenGateDetails")
    def golden_gate_details(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailResult']]:
        return pulumi.get(self, "golden_gate_details")

    @property
    @pulumi.getter(name="goldenGateServiceDetails")
    def golden_gate_service_details(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailResult']]:
        return pulumi.get(self, "golden_gate_service_details")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeObjects")
    def include_objects(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemIncludeObjectResult']]:
        return pulumi.get(self, "include_objects")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="sourceContainerDatabaseConnectionId")
    def source_container_database_connection_id(self) -> Optional[str]:
        return pulumi.get(self, "source_container_database_connection_id")

    @property
    @pulumi.getter(name="sourceDatabaseConnectionId")
    def source_database_connection_id(self) -> Optional[str]:
        return pulumi.get(self, "source_database_connection_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetDatabaseConnectionId")
    def target_database_connection_id(self) -> Optional[str]:
        return pulumi.get(self, "target_database_connection_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastMigration")
    def time_last_migration(self) -> Optional[str]:
        return pulumi.get(self, "time_last_migration")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vaultDetails")
    def vault_details(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemVaultDetailResult']]:
        return pulumi.get(self, "vault_details")

    @property
    @pulumi.getter(name="waitAfter")
    def wait_after(self) -> Optional[str]:
        return pulumi.get(self, "wait_after")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemAdvisorSettingResult(dict):
    def __init__(__self__, *,
                 is_ignore_errors: Optional[bool] = None,
                 is_skip_advisor: Optional[bool] = None):
        if is_ignore_errors is not None:
            pulumi.set(__self__, "is_ignore_errors", is_ignore_errors)
        if is_skip_advisor is not None:
            pulumi.set(__self__, "is_skip_advisor", is_skip_advisor)

    @property
    @pulumi.getter(name="isIgnoreErrors")
    def is_ignore_errors(self) -> Optional[bool]:
        return pulumi.get(self, "is_ignore_errors")

    @property
    @pulumi.getter(name="isSkipAdvisor")
    def is_skip_advisor(self) -> Optional[bool]:
        return pulumi.get(self, "is_skip_advisor")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDataTransferMediumDetailResult(dict):
    def __init__(__self__, *,
                 database_link_details: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailDatabaseLinkDetailResult']] = None,
                 object_storage_details: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailObjectStorageDetailResult']] = None):
        if database_link_details is not None:
            pulumi.set(__self__, "database_link_details", database_link_details)
        if object_storage_details is not None:
            pulumi.set(__self__, "object_storage_details", object_storage_details)

    @property
    @pulumi.getter(name="databaseLinkDetails")
    def database_link_details(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailDatabaseLinkDetailResult']]:
        return pulumi.get(self, "database_link_details")

    @property
    @pulumi.getter(name="objectStorageDetails")
    def object_storage_details(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailObjectStorageDetailResult']]:
        return pulumi.get(self, "object_storage_details")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDataTransferMediumDetailDatabaseLinkDetailResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 wallet_buckets: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailDatabaseLinkDetailWalletBucketResult']] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if wallet_buckets is not None:
            pulumi.set(__self__, "wallet_buckets", wallet_buckets)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="walletBuckets")
    def wallet_buckets(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailDatabaseLinkDetailWalletBucketResult']]:
        return pulumi.get(self, "wallet_buckets")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDataTransferMediumDetailDatabaseLinkDetailWalletBucketResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDataTransferMediumDetailObjectStorageDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDataTransferMediumDetailsV2Result(dict):
    def __init__(__self__, *,
                 access_key_id: Optional[str] = None,
                 name: Optional[str] = None,
                 object_storage_buckets: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailsV2ObjectStorageBucketResult']] = None,
                 region: Optional[str] = None,
                 secret_access_key: Optional[str] = None,
                 type: Optional[str] = None):
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_storage_buckets is not None:
            pulumi.set(__self__, "object_storage_buckets", object_storage_buckets)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStorageBuckets")
    def object_storage_buckets(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDataTransferMediumDetailsV2ObjectStorageBucketResult']]:
        return pulumi.get(self, "object_storage_buckets")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDataTransferMediumDetailsV2ObjectStorageBucketResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDatapumpSettingResult(dict):
    def __init__(__self__, *,
                 data_pump_parameters: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingDataPumpParameterResult']] = None,
                 export_directory_objects: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingExportDirectoryObjectResult']] = None,
                 import_directory_objects: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingImportDirectoryObjectResult']] = None,
                 job_mode: Optional[str] = None,
                 metadata_remaps: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingMetadataRemapResult']] = None):
        if data_pump_parameters is not None:
            pulumi.set(__self__, "data_pump_parameters", data_pump_parameters)
        if export_directory_objects is not None:
            pulumi.set(__self__, "export_directory_objects", export_directory_objects)
        if import_directory_objects is not None:
            pulumi.set(__self__, "import_directory_objects", import_directory_objects)
        if job_mode is not None:
            pulumi.set(__self__, "job_mode", job_mode)
        if metadata_remaps is not None:
            pulumi.set(__self__, "metadata_remaps", metadata_remaps)

    @property
    @pulumi.getter(name="dataPumpParameters")
    def data_pump_parameters(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingDataPumpParameterResult']]:
        return pulumi.get(self, "data_pump_parameters")

    @property
    @pulumi.getter(name="exportDirectoryObjects")
    def export_directory_objects(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingExportDirectoryObjectResult']]:
        return pulumi.get(self, "export_directory_objects")

    @property
    @pulumi.getter(name="importDirectoryObjects")
    def import_directory_objects(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingImportDirectoryObjectResult']]:
        return pulumi.get(self, "import_directory_objects")

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> Optional[str]:
        return pulumi.get(self, "job_mode")

    @property
    @pulumi.getter(name="metadataRemaps")
    def metadata_remaps(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDatapumpSettingMetadataRemapResult']]:
        return pulumi.get(self, "metadata_remaps")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDatapumpSettingDataPumpParameterResult(dict):
    def __init__(__self__, *,
                 estimate: Optional[str] = None,
                 exclude_parameters: Optional[Sequence[str]] = None,
                 export_parallelism_degree: Optional[int] = None,
                 import_parallelism_degree: Optional[int] = None,
                 is_cluster: Optional[bool] = None,
                 table_exists_action: Optional[str] = None):
        if estimate is not None:
            pulumi.set(__self__, "estimate", estimate)
        if exclude_parameters is not None:
            pulumi.set(__self__, "exclude_parameters", exclude_parameters)
        if export_parallelism_degree is not None:
            pulumi.set(__self__, "export_parallelism_degree", export_parallelism_degree)
        if import_parallelism_degree is not None:
            pulumi.set(__self__, "import_parallelism_degree", import_parallelism_degree)
        if is_cluster is not None:
            pulumi.set(__self__, "is_cluster", is_cluster)
        if table_exists_action is not None:
            pulumi.set(__self__, "table_exists_action", table_exists_action)

    @property
    @pulumi.getter
    def estimate(self) -> Optional[str]:
        return pulumi.get(self, "estimate")

    @property
    @pulumi.getter(name="excludeParameters")
    def exclude_parameters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_parameters")

    @property
    @pulumi.getter(name="exportParallelismDegree")
    def export_parallelism_degree(self) -> Optional[int]:
        return pulumi.get(self, "export_parallelism_degree")

    @property
    @pulumi.getter(name="importParallelismDegree")
    def import_parallelism_degree(self) -> Optional[int]:
        return pulumi.get(self, "import_parallelism_degree")

    @property
    @pulumi.getter(name="isCluster")
    def is_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_cluster")

    @property
    @pulumi.getter(name="tableExistsAction")
    def table_exists_action(self) -> Optional[str]:
        return pulumi.get(self, "table_exists_action")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDatapumpSettingExportDirectoryObjectResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDatapumpSettingImportDirectoryObjectResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 path: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDatapumpSettingMetadataRemapResult(dict):
    def __init__(__self__, *,
                 new_value: Optional[str] = None,
                 old_value: Optional[str] = None,
                 type: Optional[str] = None):
        if new_value is not None:
            pulumi.set(__self__, "new_value", new_value)
        if old_value is not None:
            pulumi.set(__self__, "old_value", old_value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> Optional[str]:
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> Optional[str]:
        return pulumi.get(self, "old_value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDumpTransferDetailResult(dict):
    def __init__(__self__, *,
                 shared_storage_mount_target_id: Optional[str] = None,
                 sources: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDumpTransferDetailSourceResult']] = None,
                 targets: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDumpTransferDetailTargetResult']] = None):
        if shared_storage_mount_target_id is not None:
            pulumi.set(__self__, "shared_storage_mount_target_id", shared_storage_mount_target_id)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="sharedStorageMountTargetId")
    def shared_storage_mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "shared_storage_mount_target_id")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDumpTransferDetailSourceResult']]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemDumpTransferDetailTargetResult']]:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDumpTransferDetailSourceResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 oci_home: Optional[str] = None,
                 wallet_location: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if oci_home is not None:
            pulumi.set(__self__, "oci_home", oci_home)
        if wallet_location is not None:
            pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> Optional[str]:
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> Optional[str]:
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemDumpTransferDetailTargetResult(dict):
    def __init__(__self__, *,
                 kind: Optional[str] = None,
                 oci_home: Optional[str] = None,
                 wallet_location: Optional[str] = None):
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if oci_home is not None:
            pulumi.set(__self__, "oci_home", oci_home)
        if wallet_location is not None:
            pulumi.set(__self__, "wallet_location", wallet_location)

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="ociHome")
    def oci_home(self) -> Optional[str]:
        return pulumi.get(self, "oci_home")

    @property
    @pulumi.getter(name="walletLocation")
    def wallet_location(self) -> Optional[str]:
        return pulumi.get(self, "wallet_location")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemExcludeObjectResult(dict):
    def __init__(__self__, *,
                 is_omit_excluded_table_from_replication: Optional[bool] = None,
                 object: Optional[str] = None,
                 owner: Optional[str] = None,
                 type: Optional[str] = None):
        if is_omit_excluded_table_from_replication is not None:
            pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> Optional[bool]:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateDetailResult(dict):
    def __init__(__self__, *,
                 hubs: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubResult']] = None,
                 settings: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailSettingResult']] = None):
        if hubs is not None:
            pulumi.set(__self__, "hubs", hubs)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def hubs(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubResult']]:
        return pulumi.get(self, "hubs")

    @property
    @pulumi.getter
    def settings(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailSettingResult']]:
        return pulumi.get(self, "settings")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateDetailHubResult(dict):
    def __init__(__self__, *,
                 compute_id: Optional[str] = None,
                 rest_admin_credentials: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubRestAdminCredentialResult']] = None,
                 source_container_db_admin_credentials: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubSourceContainerDbAdminCredentialResult']] = None,
                 source_db_admin_credentials: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubSourceDbAdminCredentialResult']] = None,
                 source_microservices_deployment_name: Optional[str] = None,
                 target_db_admin_credentials: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubTargetDbAdminCredentialResult']] = None,
                 target_microservices_deployment_name: Optional[str] = None,
                 url: Optional[str] = None):
        if compute_id is not None:
            pulumi.set(__self__, "compute_id", compute_id)
        if rest_admin_credentials is not None:
            pulumi.set(__self__, "rest_admin_credentials", rest_admin_credentials)
        if source_container_db_admin_credentials is not None:
            pulumi.set(__self__, "source_container_db_admin_credentials", source_container_db_admin_credentials)
        if source_db_admin_credentials is not None:
            pulumi.set(__self__, "source_db_admin_credentials", source_db_admin_credentials)
        if source_microservices_deployment_name is not None:
            pulumi.set(__self__, "source_microservices_deployment_name", source_microservices_deployment_name)
        if target_db_admin_credentials is not None:
            pulumi.set(__self__, "target_db_admin_credentials", target_db_admin_credentials)
        if target_microservices_deployment_name is not None:
            pulumi.set(__self__, "target_microservices_deployment_name", target_microservices_deployment_name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="computeId")
    def compute_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_id")

    @property
    @pulumi.getter(name="restAdminCredentials")
    def rest_admin_credentials(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubRestAdminCredentialResult']]:
        return pulumi.get(self, "rest_admin_credentials")

    @property
    @pulumi.getter(name="sourceContainerDbAdminCredentials")
    def source_container_db_admin_credentials(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubSourceContainerDbAdminCredentialResult']]:
        return pulumi.get(self, "source_container_db_admin_credentials")

    @property
    @pulumi.getter(name="sourceDbAdminCredentials")
    def source_db_admin_credentials(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubSourceDbAdminCredentialResult']]:
        return pulumi.get(self, "source_db_admin_credentials")

    @property
    @pulumi.getter(name="sourceMicroservicesDeploymentName")
    def source_microservices_deployment_name(self) -> Optional[str]:
        return pulumi.get(self, "source_microservices_deployment_name")

    @property
    @pulumi.getter(name="targetDbAdminCredentials")
    def target_db_admin_credentials(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailHubTargetDbAdminCredentialResult']]:
        return pulumi.get(self, "target_db_admin_credentials")

    @property
    @pulumi.getter(name="targetMicroservicesDeploymentName")
    def target_microservices_deployment_name(self) -> Optional[str]:
        return pulumi.get(self, "target_microservices_deployment_name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateDetailHubRestAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateDetailHubSourceContainerDbAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateDetailHubSourceDbAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateDetailHubTargetDbAdminCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateDetailSettingResult(dict):
    def __init__(__self__, *,
                 acceptable_lag: Optional[int] = None,
                 extracts: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailSettingExtractResult']] = None,
                 replicats: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailSettingReplicatResult']] = None):
        if acceptable_lag is not None:
            pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        if extracts is not None:
            pulumi.set(__self__, "extracts", extracts)
        if replicats is not None:
            pulumi.set(__self__, "replicats", replicats)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> Optional[int]:
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter
    def extracts(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailSettingExtractResult']]:
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter
    def replicats(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateDetailSettingReplicatResult']]:
        return pulumi.get(self, "replicats")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateDetailSettingExtractResult(dict):
    def __init__(__self__, *,
                 long_trans_duration: Optional[int] = None,
                 performance_profile: Optional[str] = None):
        if long_trans_duration is not None:
            pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> Optional[int]:
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[str]:
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateDetailSettingReplicatResult(dict):
    def __init__(__self__, *,
                 map_parallelism: Optional[int] = None,
                 max_apply_parallelism: Optional[int] = None,
                 min_apply_parallelism: Optional[int] = None,
                 performance_profile: Optional[str] = None):
        if map_parallelism is not None:
            pulumi.set(__self__, "map_parallelism", map_parallelism)
        if max_apply_parallelism is not None:
            pulumi.set(__self__, "max_apply_parallelism", max_apply_parallelism)
        if min_apply_parallelism is not None:
            pulumi.set(__self__, "min_apply_parallelism", min_apply_parallelism)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="mapParallelism")
    def map_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "map_parallelism")

    @property
    @pulumi.getter(name="maxApplyParallelism")
    def max_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "max_apply_parallelism")

    @property
    @pulumi.getter(name="minApplyParallelism")
    def min_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "min_apply_parallelism")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[str]:
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateServiceDetailResult(dict):
    def __init__(__self__, *,
                 ggs_deployments: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailGgsDeploymentResult']] = None,
                 settings: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingResult']] = None,
                 source_container_db_credentials: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSourceContainerDbCredentialResult']] = None,
                 source_db_credentials: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSourceDbCredentialResult']] = None,
                 target_db_credentials: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailTargetDbCredentialResult']] = None):
        if ggs_deployments is not None:
            pulumi.set(__self__, "ggs_deployments", ggs_deployments)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if source_container_db_credentials is not None:
            pulumi.set(__self__, "source_container_db_credentials", source_container_db_credentials)
        if source_db_credentials is not None:
            pulumi.set(__self__, "source_db_credentials", source_db_credentials)
        if target_db_credentials is not None:
            pulumi.set(__self__, "target_db_credentials", target_db_credentials)

    @property
    @pulumi.getter(name="ggsDeployments")
    def ggs_deployments(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailGgsDeploymentResult']]:
        return pulumi.get(self, "ggs_deployments")

    @property
    @pulumi.getter
    def settings(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingResult']]:
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter(name="sourceContainerDbCredentials")
    def source_container_db_credentials(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSourceContainerDbCredentialResult']]:
        return pulumi.get(self, "source_container_db_credentials")

    @property
    @pulumi.getter(name="sourceDbCredentials")
    def source_db_credentials(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSourceDbCredentialResult']]:
        return pulumi.get(self, "source_db_credentials")

    @property
    @pulumi.getter(name="targetDbCredentials")
    def target_db_credentials(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailTargetDbCredentialResult']]:
        return pulumi.get(self, "target_db_credentials")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateServiceDetailGgsDeploymentResult(dict):
    def __init__(__self__, *,
                 deployment_id: Optional[str] = None,
                 ggs_admin_credentials_secret_id: Optional[str] = None):
        if deployment_id is not None:
            pulumi.set(__self__, "deployment_id", deployment_id)
        if ggs_admin_credentials_secret_id is not None:
            pulumi.set(__self__, "ggs_admin_credentials_secret_id", ggs_admin_credentials_secret_id)

    @property
    @pulumi.getter(name="deploymentId")
    def deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_id")

    @property
    @pulumi.getter(name="ggsAdminCredentialsSecretId")
    def ggs_admin_credentials_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "ggs_admin_credentials_secret_id")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingResult(dict):
    def __init__(__self__, *,
                 acceptable_lag: Optional[int] = None,
                 extracts: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingExtractResult']] = None,
                 replicats: Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingReplicatResult']] = None):
        if acceptable_lag is not None:
            pulumi.set(__self__, "acceptable_lag", acceptable_lag)
        if extracts is not None:
            pulumi.set(__self__, "extracts", extracts)
        if replicats is not None:
            pulumi.set(__self__, "replicats", replicats)

    @property
    @pulumi.getter(name="acceptableLag")
    def acceptable_lag(self) -> Optional[int]:
        return pulumi.get(self, "acceptable_lag")

    @property
    @pulumi.getter
    def extracts(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingExtractResult']]:
        return pulumi.get(self, "extracts")

    @property
    @pulumi.getter
    def replicats(self) -> Optional[Sequence['outputs.GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingReplicatResult']]:
        return pulumi.get(self, "replicats")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingExtractResult(dict):
    def __init__(__self__, *,
                 long_trans_duration: Optional[int] = None,
                 performance_profile: Optional[str] = None):
        if long_trans_duration is not None:
            pulumi.set(__self__, "long_trans_duration", long_trans_duration)
        if performance_profile is not None:
            pulumi.set(__self__, "performance_profile", performance_profile)

    @property
    @pulumi.getter(name="longTransDuration")
    def long_trans_duration(self) -> Optional[int]:
        return pulumi.get(self, "long_trans_duration")

    @property
    @pulumi.getter(name="performanceProfile")
    def performance_profile(self) -> Optional[str]:
        return pulumi.get(self, "performance_profile")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSettingReplicatResult(dict):
    def __init__(__self__, *,
                 map_parallelism: Optional[int] = None,
                 max_apply_parallelism: Optional[int] = None,
                 min_apply_parallelism: Optional[int] = None):
        if map_parallelism is not None:
            pulumi.set(__self__, "map_parallelism", map_parallelism)
        if max_apply_parallelism is not None:
            pulumi.set(__self__, "max_apply_parallelism", max_apply_parallelism)
        if min_apply_parallelism is not None:
            pulumi.set(__self__, "min_apply_parallelism", min_apply_parallelism)

    @property
    @pulumi.getter(name="mapParallelism")
    def map_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "map_parallelism")

    @property
    @pulumi.getter(name="maxApplyParallelism")
    def max_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "max_apply_parallelism")

    @property
    @pulumi.getter(name="minApplyParallelism")
    def min_apply_parallelism(self) -> Optional[int]:
        return pulumi.get(self, "min_apply_parallelism")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSourceContainerDbCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateServiceDetailSourceDbCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemGoldenGateServiceDetailTargetDbCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemIncludeObjectResult(dict):
    def __init__(__self__, *,
                 is_omit_excluded_table_from_replication: Optional[bool] = None,
                 object: Optional[str] = None,
                 owner: Optional[str] = None,
                 type: Optional[str] = None):
        if is_omit_excluded_table_from_replication is not None:
            pulumi.set(__self__, "is_omit_excluded_table_from_replication", is_omit_excluded_table_from_replication)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="isOmitExcludedTableFromReplication")
    def is_omit_excluded_table_from_replication(self) -> Optional[bool]:
        return pulumi.get(self, "is_omit_excluded_table_from_replication")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMigrationsMigrationCollectionItemVaultDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 key_id: Optional[str] = None,
                 vault_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_id")


