# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DatabaseToolsConnectionKeyStore',
    'DatabaseToolsConnectionKeyStoreKeyStoreContent',
    'DatabaseToolsConnectionKeyStoreKeyStorePassword',
    'DatabaseToolsConnectionRelatedResource',
    'DatabaseToolsConnectionUserPassword',
    'DatabaseToolsPrivateEndpointReverseConnectionConfiguration',
    'DatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp',
    'GetDatabaseToolsConnectionKeyStoreResult',
    'GetDatabaseToolsConnectionKeyStoreKeyStoreContentResult',
    'GetDatabaseToolsConnectionKeyStoreKeyStorePasswordResult',
    'GetDatabaseToolsConnectionRelatedResourceResult',
    'GetDatabaseToolsConnectionUserPasswordResult',
    'GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionResult',
    'GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemResult',
    'GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreResult',
    'GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStoreContentResult',
    'GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStorePasswordResult',
    'GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResourceResult',
    'GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPasswordResult',
    'GetDatabaseToolsConnectionsFilterResult',
    'GetDatabaseToolsEndpointServicesDatabaseToolsEndpointServiceCollectionResult',
    'GetDatabaseToolsEndpointServicesDatabaseToolsEndpointServiceCollectionItemResult',
    'GetDatabaseToolsEndpointServicesFilterResult',
    'GetDatabaseToolsPrivateEndpointReverseConnectionConfigurationResult',
    'GetDatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIpResult',
    'GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionResult',
    'GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemResult',
    'GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationResult',
    'GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationReverseConnectionsSourceIpResult',
    'GetDatabaseToolsPrivateEndpointsFilterResult',
]

@pulumi.output_type
class DatabaseToolsConnectionKeyStore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyStoreContent":
            suggest = "key_store_content"
        elif key == "keyStorePassword":
            suggest = "key_store_password"
        elif key == "keyStoreType":
            suggest = "key_store_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseToolsConnectionKeyStore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseToolsConnectionKeyStore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseToolsConnectionKeyStore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_store_content: Optional['outputs.DatabaseToolsConnectionKeyStoreKeyStoreContent'] = None,
                 key_store_password: Optional['outputs.DatabaseToolsConnectionKeyStoreKeyStorePassword'] = None,
                 key_store_type: Optional[str] = None):
        if key_store_content is not None:
            pulumi.set(__self__, "key_store_content", key_store_content)
        if key_store_password is not None:
            pulumi.set(__self__, "key_store_password", key_store_password)
        if key_store_type is not None:
            pulumi.set(__self__, "key_store_type", key_store_type)

    @property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> Optional['outputs.DatabaseToolsConnectionKeyStoreKeyStoreContent']:
        return pulumi.get(self, "key_store_content")

    @property
    @pulumi.getter(name="keyStorePassword")
    def key_store_password(self) -> Optional['outputs.DatabaseToolsConnectionKeyStoreKeyStorePassword']:
        return pulumi.get(self, "key_store_password")

    @property
    @pulumi.getter(name="keyStoreType")
    def key_store_type(self) -> Optional[str]:
        return pulumi.get(self, "key_store_type")


@pulumi.output_type
class DatabaseToolsConnectionKeyStoreKeyStoreContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"
        elif key == "secretId":
            suggest = "secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseToolsConnectionKeyStoreKeyStoreContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseToolsConnectionKeyStoreKeyStoreContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseToolsConnectionKeyStoreKeyStoreContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value_type: str,
                 secret_id: Optional[str] = None):
        pulumi.set(__self__, "value_type", value_type)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")


@pulumi.output_type
class DatabaseToolsConnectionKeyStoreKeyStorePassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"
        elif key == "secretId":
            suggest = "secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseToolsConnectionKeyStoreKeyStorePassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseToolsConnectionKeyStoreKeyStorePassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseToolsConnectionKeyStoreKeyStorePassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value_type: str,
                 secret_id: Optional[str] = None):
        pulumi.set(__self__, "value_type", value_type)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")


@pulumi.output_type
class DatabaseToolsConnectionRelatedResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityType":
            suggest = "entity_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseToolsConnectionRelatedResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseToolsConnectionRelatedResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseToolsConnectionRelatedResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_type: str,
                 identifier: str):
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> str:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class DatabaseToolsConnectionUserPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretId":
            suggest = "secret_id"
        elif key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseToolsConnectionUserPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseToolsConnectionUserPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseToolsConnectionUserPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret_id: str,
                 value_type: str):
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class DatabaseToolsPrivateEndpointReverseConnectionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "reverseConnectionsSourceIps":
            suggest = "reverse_connections_source_ips"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseToolsPrivateEndpointReverseConnectionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseToolsPrivateEndpointReverseConnectionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseToolsPrivateEndpointReverseConnectionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 reverse_connections_source_ips: Optional[Sequence['outputs.DatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp']] = None):
        if reverse_connections_source_ips is not None:
            pulumi.set(__self__, "reverse_connections_source_ips", reverse_connections_source_ips)

    @property
    @pulumi.getter(name="reverseConnectionsSourceIps")
    def reverse_connections_source_ips(self) -> Optional[Sequence['outputs.DatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp']]:
        return pulumi.get(self, "reverse_connections_source_ips")


@pulumi.output_type
class DatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_ip: Optional[str] = None):
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetDatabaseToolsConnectionKeyStoreResult(dict):
    def __init__(__self__, *,
                 key_store_contents: Optional[Sequence['outputs.GetDatabaseToolsConnectionKeyStoreKeyStoreContentResult']] = None,
                 key_store_passwords: Optional[Sequence['outputs.GetDatabaseToolsConnectionKeyStoreKeyStorePasswordResult']] = None,
                 key_store_type: Optional[str] = None):
        if key_store_contents is not None:
            pulumi.set(__self__, "key_store_contents", key_store_contents)
        if key_store_passwords is not None:
            pulumi.set(__self__, "key_store_passwords", key_store_passwords)
        if key_store_type is not None:
            pulumi.set(__self__, "key_store_type", key_store_type)

    @property
    @pulumi.getter(name="keyStoreContents")
    def key_store_contents(self) -> Optional[Sequence['outputs.GetDatabaseToolsConnectionKeyStoreKeyStoreContentResult']]:
        return pulumi.get(self, "key_store_contents")

    @property
    @pulumi.getter(name="keyStorePasswords")
    def key_store_passwords(self) -> Optional[Sequence['outputs.GetDatabaseToolsConnectionKeyStoreKeyStorePasswordResult']]:
        return pulumi.get(self, "key_store_passwords")

    @property
    @pulumi.getter(name="keyStoreType")
    def key_store_type(self) -> Optional[str]:
        return pulumi.get(self, "key_store_type")


@pulumi.output_type
class GetDatabaseToolsConnectionKeyStoreKeyStoreContentResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 value_type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetDatabaseToolsConnectionKeyStoreKeyStorePasswordResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 value_type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetDatabaseToolsConnectionRelatedResourceResult(dict):
    def __init__(__self__, *,
                 entity_type: Optional[str] = None,
                 identifier: Optional[str] = None):
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetDatabaseToolsConnectionUserPasswordResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 value_type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemResult(dict):
    def __init__(__self__, *,
                 advanced_properties: Optional[Mapping[str, Any]] = None,
                 compartment_id: Optional[str] = None,
                 connection_string: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 key_stores: Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 private_endpoint_id: Optional[str] = None,
                 related_resources: Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResourceResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None,
                 user_name: Optional[str] = None,
                 user_passwords: Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPasswordResult']] = None):
        if advanced_properties is not None:
            pulumi.set(__self__, "advanced_properties", advanced_properties)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key_stores is not None:
            pulumi.set(__self__, "key_stores", key_stores)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if related_resources is not None:
            pulumi.set(__self__, "related_resources", related_resources)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_passwords is not None:
            pulumi.set(__self__, "user_passwords", user_passwords)

    @property
    @pulumi.getter(name="advancedProperties")
    def advanced_properties(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "advanced_properties")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[str]:
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyStores")
    def key_stores(self) -> Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreResult']]:
        return pulumi.get(self, "key_stores")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="relatedResources")
    def related_resources(self) -> Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResourceResult']]:
        return pulumi.get(self, "related_resources")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userPasswords")
    def user_passwords(self) -> Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPasswordResult']]:
        return pulumi.get(self, "user_passwords")


@pulumi.output_type
class GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreResult(dict):
    def __init__(__self__, *,
                 key_store_contents: Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStoreContentResult']] = None,
                 key_store_passwords: Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStorePasswordResult']] = None,
                 key_store_type: Optional[str] = None):
        if key_store_contents is not None:
            pulumi.set(__self__, "key_store_contents", key_store_contents)
        if key_store_passwords is not None:
            pulumi.set(__self__, "key_store_passwords", key_store_passwords)
        if key_store_type is not None:
            pulumi.set(__self__, "key_store_type", key_store_type)

    @property
    @pulumi.getter(name="keyStoreContents")
    def key_store_contents(self) -> Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStoreContentResult']]:
        return pulumi.get(self, "key_store_contents")

    @property
    @pulumi.getter(name="keyStorePasswords")
    def key_store_passwords(self) -> Optional[Sequence['outputs.GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStorePasswordResult']]:
        return pulumi.get(self, "key_store_passwords")

    @property
    @pulumi.getter(name="keyStoreType")
    def key_store_type(self) -> Optional[str]:
        return pulumi.get(self, "key_store_type")


@pulumi.output_type
class GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStoreContentResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 value_type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemKeyStoreKeyStorePasswordResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 value_type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemRelatedResourceResult(dict):
    def __init__(__self__, *,
                 entity_type: Optional[str] = None,
                 identifier: Optional[str] = None):
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")


@pulumi.output_type
class GetDatabaseToolsConnectionsDatabaseToolsConnectionCollectionItemUserPasswordResult(dict):
    def __init__(__self__, *,
                 secret_id: Optional[str] = None,
                 value_type: Optional[str] = None):
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[str]:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetDatabaseToolsConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseToolsEndpointServicesDatabaseToolsEndpointServiceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDatabaseToolsEndpointServicesDatabaseToolsEndpointServiceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDatabaseToolsEndpointServicesDatabaseToolsEndpointServiceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseToolsEndpointServicesDatabaseToolsEndpointServiceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDatabaseToolsEndpointServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseToolsPrivateEndpointReverseConnectionConfigurationResult(dict):
    def __init__(__self__, *,
                 reverse_connections_source_ips: Optional[Sequence['outputs.GetDatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIpResult']] = None):
        if reverse_connections_source_ips is not None:
            pulumi.set(__self__, "reverse_connections_source_ips", reverse_connections_source_ips)

    @property
    @pulumi.getter(name="reverseConnectionsSourceIps")
    def reverse_connections_source_ips(self) -> Optional[Sequence['outputs.GetDatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIpResult']]:
        return pulumi.get(self, "reverse_connections_source_ips")


@pulumi.output_type
class GetDatabaseToolsPrivateEndpointReverseConnectionConfigurationReverseConnectionsSourceIpResult(dict):
    def __init__(__self__, *,
                 source_ip: Optional[str] = None):
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_fqdns: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 endpoint_fqdn: Optional[str] = None,
                 endpoint_service_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_endpoint_ip: Optional[str] = None,
                 private_endpoint_vnic_id: Optional[str] = None,
                 reverse_connection_configurations: Optional[Sequence['outputs.GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationResult']] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if additional_fqdns is not None:
            pulumi.set(__self__, "additional_fqdns", additional_fqdns)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoint_fqdn is not None:
            pulumi.set(__self__, "endpoint_fqdn", endpoint_fqdn)
        if endpoint_service_id is not None:
            pulumi.set(__self__, "endpoint_service_id", endpoint_service_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_endpoint_ip is not None:
            pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        if private_endpoint_vnic_id is not None:
            pulumi.set(__self__, "private_endpoint_vnic_id", private_endpoint_vnic_id)
        if reverse_connection_configurations is not None:
            pulumi.set(__self__, "reverse_connection_configurations", reverse_connection_configurations)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="additionalFqdns")
    def additional_fqdns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "additional_fqdns")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endpointFqdn")
    def endpoint_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_fqdn")

    @property
    @pulumi.getter(name="endpointServiceId")
    def endpoint_service_id(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_service_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_ip")

    @property
    @pulumi.getter(name="privateEndpointVnicId")
    def private_endpoint_vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_vnic_id")

    @property
    @pulumi.getter(name="reverseConnectionConfigurations")
    def reverse_connection_configurations(self) -> Optional[Sequence['outputs.GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationResult']]:
        return pulumi.get(self, "reverse_connection_configurations")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationResult(dict):
    def __init__(__self__, *,
                 reverse_connections_source_ips: Optional[Sequence['outputs.GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationReverseConnectionsSourceIpResult']] = None):
        if reverse_connections_source_ips is not None:
            pulumi.set(__self__, "reverse_connections_source_ips", reverse_connections_source_ips)

    @property
    @pulumi.getter(name="reverseConnectionsSourceIps")
    def reverse_connections_source_ips(self) -> Optional[Sequence['outputs.GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationReverseConnectionsSourceIpResult']]:
        return pulumi.get(self, "reverse_connections_source_ips")


@pulumi.output_type
class GetDatabaseToolsPrivateEndpointsDatabaseToolsPrivateEndpointCollectionItemReverseConnectionConfigurationReverseConnectionsSourceIpResult(dict):
    def __init__(__self__, *,
                 source_ip: Optional[str] = None):
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[str]:
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetDatabaseToolsPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


