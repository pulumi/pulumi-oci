# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRegistriesResult',
    'AwaitableGetRegistriesResult',
    'get_registries',
    'get_registries_output',
]

@pulumi.output_type
class GetRegistriesResult:
    """
    A collection of values returned by getRegistries.
    """
    def __init__(__self__, compartment_id=None, filters=None, id=None, is_deep_lookup=None, name=None, registry_summary_collections=None, state=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_deep_lookup and not isinstance(is_deep_lookup, bool):
            raise TypeError("Expected argument 'is_deep_lookup' to be a bool")
        pulumi.set(__self__, "is_deep_lookup", is_deep_lookup)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if registry_summary_collections and not isinstance(registry_summary_collections, list):
            raise TypeError("Expected argument 'registry_summary_collections' to be a list")
        pulumi.set(__self__, "registry_summary_collections", registry_summary_collections)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetRegistriesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDeepLookup")
    def is_deep_lookup(self) -> Optional[bool]:
        return pulumi.get(self, "is_deep_lookup")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="registrySummaryCollections")
    def registry_summary_collections(self) -> Sequence['outputs.GetRegistriesRegistrySummaryCollectionResult']:
        """
        The list of registry_summary_collection.
        """
        return pulumi.get(self, "registry_summary_collections")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        Lifecycle states for registries in the Data Connectivity Management Service CREATING - The resource is being created and may not be usable until the entire metadata is defined. UPDATING - The resource is being updated and may not be usable until all changes are commited. DELETING - The resource is being deleted and might require deep cleanup of children. ACTIVE   - The resource is valid and available for access. INACTIVE - The resource might be incomplete in its definition or might have been made unavailable for administrative reasons. DELETED  - The resource has been deleted and isn't available. FAILED   - The resource is in a failed state due to validation or other errors.
        """
        return pulumi.get(self, "state")


class AwaitableGetRegistriesResult(GetRegistriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistriesResult(
            compartment_id=self.compartment_id,
            filters=self.filters,
            id=self.id,
            is_deep_lookup=self.is_deep_lookup,
            name=self.name,
            registry_summary_collections=self.registry_summary_collections,
            state=self.state)


def get_registries(compartment_id: Optional[str] = None,
                   filters: Optional[Sequence[pulumi.InputType['GetRegistriesFilterArgs']]] = None,
                   is_deep_lookup: Optional[bool] = None,
                   name: Optional[str] = None,
                   state: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistriesResult:
    """
    This data source provides the list of Registries in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves a list of Data Connectivity Management registries.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registries = oci.DataConnectivity.get_registries(compartment_id=var["compartment_id"],
        is_deep_lookup=var["registry_is_deep_lookup"],
        name=var["registry_name"],
        state=var["registry_state"])
    ```


    :param str compartment_id: The OCID of the compartment containing the resources you want to list.
    :param bool is_deep_lookup: This parameter allows list registries to deep look at the whole tenancy.
    :param str name: Used to filter by the name of the object.
    :param str state: Lifecycle state of the resource.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['filters'] = filters
    __args__['isDeepLookup'] = is_deep_lookup
    __args__['name'] = name
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataConnectivity/getRegistries:getRegistries', __args__, opts=opts, typ=GetRegistriesResult).value

    return AwaitableGetRegistriesResult(
        compartment_id=__ret__.compartment_id,
        filters=__ret__.filters,
        id=__ret__.id,
        is_deep_lookup=__ret__.is_deep_lookup,
        name=__ret__.name,
        registry_summary_collections=__ret__.registry_summary_collections,
        state=__ret__.state)


@_utilities.lift_output_func(get_registries)
def get_registries_output(compartment_id: Optional[pulumi.Input[str]] = None,
                          filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetRegistriesFilterArgs']]]]] = None,
                          is_deep_lookup: Optional[pulumi.Input[Optional[bool]]] = None,
                          name: Optional[pulumi.Input[Optional[str]]] = None,
                          state: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistriesResult]:
    """
    This data source provides the list of Registries in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves a list of Data Connectivity Management registries.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registries = oci.DataConnectivity.get_registries(compartment_id=var["compartment_id"],
        is_deep_lookup=var["registry_is_deep_lookup"],
        name=var["registry_name"],
        state=var["registry_state"])
    ```


    :param str compartment_id: The OCID of the compartment containing the resources you want to list.
    :param bool is_deep_lookup: This parameter allows list registries to deep look at the whole tenancy.
    :param str name: Used to filter by the name of the object.
    :param str state: Lifecycle state of the resource.
    """
    ...
