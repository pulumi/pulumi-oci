# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRegistryConnectionResult',
    'AwaitableGetRegistryConnectionResult',
    'get_registry_connection',
    'get_registry_connection_output',
]

@pulumi.output_type
class GetRegistryConnectionResult:
    """
    A collection of values returned by getRegistryConnection.
    """
    def __init__(__self__, connection_key=None, connection_properties=None, description=None, id=None, identifier=None, is_default=None, key=None, metadatas=None, model_type=None, model_version=None, name=None, object_status=None, object_version=None, primary_schemas=None, properties=None, registry_id=None, registry_metadatas=None, type=None):
        if connection_key and not isinstance(connection_key, str):
            raise TypeError("Expected argument 'connection_key' to be a str")
        pulumi.set(__self__, "connection_key", connection_key)
        if connection_properties and not isinstance(connection_properties, list):
            raise TypeError("Expected argument 'connection_properties' to be a list")
        pulumi.set(__self__, "connection_properties", connection_properties)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if is_default and not isinstance(is_default, bool):
            raise TypeError("Expected argument 'is_default' to be a bool")
        pulumi.set(__self__, "is_default", is_default)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if model_type and not isinstance(model_type, str):
            raise TypeError("Expected argument 'model_type' to be a str")
        pulumi.set(__self__, "model_type", model_type)
        if model_version and not isinstance(model_version, str):
            raise TypeError("Expected argument 'model_version' to be a str")
        pulumi.set(__self__, "model_version", model_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_status and not isinstance(object_status, int):
            raise TypeError("Expected argument 'object_status' to be a int")
        pulumi.set(__self__, "object_status", object_status)
        if object_version and not isinstance(object_version, int):
            raise TypeError("Expected argument 'object_version' to be a int")
        pulumi.set(__self__, "object_version", object_version)
        if primary_schemas and not isinstance(primary_schemas, list):
            raise TypeError("Expected argument 'primary_schemas' to be a list")
        pulumi.set(__self__, "primary_schemas", primary_schemas)
        if properties and not isinstance(properties, dict):
            raise TypeError("Expected argument 'properties' to be a dict")
        pulumi.set(__self__, "properties", properties)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if registry_metadatas and not isinstance(registry_metadatas, list):
            raise TypeError("Expected argument 'registry_metadatas' to be a list")
        pulumi.set(__self__, "registry_metadatas", registry_metadatas)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionKey")
    def connection_key(self) -> str:
        return pulumi.get(self, "connection_key")

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Sequence['outputs.GetRegistryConnectionConnectionPropertyResult']:
        """
        The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetRegistryConnectionMetadataResult']:
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The object type.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of the object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="primarySchemas")
    def primary_schemas(self) -> Sequence['outputs.GetRegistryConnectionPrimarySchemaResult']:
        """
        The schema object.
        """
        return pulumi.get(self, "primary_schemas")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties of the connection in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryMetadatas")
    def registry_metadatas(self) -> Sequence['outputs.GetRegistryConnectionRegistryMetadataResult']:
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadatas")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific Connection Type
        """
        return pulumi.get(self, "type")


class AwaitableGetRegistryConnectionResult(GetRegistryConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryConnectionResult(
            connection_key=self.connection_key,
            connection_properties=self.connection_properties,
            description=self.description,
            id=self.id,
            identifier=self.identifier,
            is_default=self.is_default,
            key=self.key,
            metadatas=self.metadatas,
            model_type=self.model_type,
            model_version=self.model_version,
            name=self.name,
            object_status=self.object_status,
            object_version=self.object_version,
            primary_schemas=self.primary_schemas,
            properties=self.properties,
            registry_id=self.registry_id,
            registry_metadatas=self.registry_metadatas,
            type=self.type)


def get_registry_connection(connection_key: Optional[str] = None,
                            registry_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistryConnectionResult:
    """
    This data source provides details about a specific Registry Connection resource in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves the connection details using the specified identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_connection = oci.DataConnectivity.get_registry_connection(connection_key=var["registry_connection_connection_key"],
        registry_id=oci_data_connectivity_registry["test_registry"]["id"])
    ```


    :param str connection_key: The connection key.
    :param str registry_id: The registry OCID.
    """
    __args__ = dict()
    __args__['connectionKey'] = connection_key
    __args__['registryId'] = registry_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataConnectivity/getRegistryConnection:getRegistryConnection', __args__, opts=opts, typ=GetRegistryConnectionResult).value

    return AwaitableGetRegistryConnectionResult(
        connection_key=__ret__.connection_key,
        connection_properties=__ret__.connection_properties,
        description=__ret__.description,
        id=__ret__.id,
        identifier=__ret__.identifier,
        is_default=__ret__.is_default,
        key=__ret__.key,
        metadatas=__ret__.metadatas,
        model_type=__ret__.model_type,
        model_version=__ret__.model_version,
        name=__ret__.name,
        object_status=__ret__.object_status,
        object_version=__ret__.object_version,
        primary_schemas=__ret__.primary_schemas,
        properties=__ret__.properties,
        registry_id=__ret__.registry_id,
        registry_metadatas=__ret__.registry_metadatas,
        type=__ret__.type)


@_utilities.lift_output_func(get_registry_connection)
def get_registry_connection_output(connection_key: Optional[pulumi.Input[str]] = None,
                                   registry_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistryConnectionResult]:
    """
    This data source provides details about a specific Registry Connection resource in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves the connection details using the specified identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_connection = oci.DataConnectivity.get_registry_connection(connection_key=var["registry_connection_connection_key"],
        registry_id=oci_data_connectivity_registry["test_registry"]["id"])
    ```


    :param str connection_key: The connection key.
    :param str registry_id: The registry OCID.
    """
    ...
