# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRegistryDataAssetResult',
    'AwaitableGetRegistryDataAssetResult',
    'get_registry_data_asset',
    'get_registry_data_asset_output',
]

@pulumi.output_type
class GetRegistryDataAssetResult:
    """
    A collection of values returned by getRegistryDataAsset.
    """
    def __init__(__self__, asset_properties=None, data_asset_key=None, default_connections=None, description=None, end_points=None, external_key=None, id=None, identifier=None, key=None, metadatas=None, model_type=None, model_version=None, name=None, native_type_systems=None, object_status=None, object_version=None, properties=None, registry_id=None, registry_metadatas=None, type=None):
        if asset_properties and not isinstance(asset_properties, dict):
            raise TypeError("Expected argument 'asset_properties' to be a dict")
        pulumi.set(__self__, "asset_properties", asset_properties)
        if data_asset_key and not isinstance(data_asset_key, str):
            raise TypeError("Expected argument 'data_asset_key' to be a str")
        pulumi.set(__self__, "data_asset_key", data_asset_key)
        if default_connections and not isinstance(default_connections, list):
            raise TypeError("Expected argument 'default_connections' to be a list")
        pulumi.set(__self__, "default_connections", default_connections)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if end_points and not isinstance(end_points, list):
            raise TypeError("Expected argument 'end_points' to be a list")
        pulumi.set(__self__, "end_points", end_points)
        if external_key and not isinstance(external_key, str):
            raise TypeError("Expected argument 'external_key' to be a str")
        pulumi.set(__self__, "external_key", external_key)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if model_type and not isinstance(model_type, str):
            raise TypeError("Expected argument 'model_type' to be a str")
        pulumi.set(__self__, "model_type", model_type)
        if model_version and not isinstance(model_version, str):
            raise TypeError("Expected argument 'model_version' to be a str")
        pulumi.set(__self__, "model_version", model_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if native_type_systems and not isinstance(native_type_systems, list):
            raise TypeError("Expected argument 'native_type_systems' to be a list")
        pulumi.set(__self__, "native_type_systems", native_type_systems)
        if object_status and not isinstance(object_status, int):
            raise TypeError("Expected argument 'object_status' to be a int")
        pulumi.set(__self__, "object_status", object_status)
        if object_version and not isinstance(object_version, int):
            raise TypeError("Expected argument 'object_version' to be a int")
        pulumi.set(__self__, "object_version", object_version)
        if properties and not isinstance(properties, dict):
            raise TypeError("Expected argument 'properties' to be a dict")
        pulumi.set(__self__, "properties", properties)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if registry_metadatas and not isinstance(registry_metadatas, list):
            raise TypeError("Expected argument 'registry_metadatas' to be a list")
        pulumi.set(__self__, "registry_metadatas", registry_metadatas)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assetProperties")
    def asset_properties(self) -> Mapping[str, Any]:
        """
        Additional properties for the data asset.
        """
        return pulumi.get(self, "asset_properties")

    @property
    @pulumi.getter(name="dataAssetKey")
    def data_asset_key(self) -> str:
        return pulumi.get(self, "data_asset_key")

    @property
    @pulumi.getter(name="defaultConnections")
    def default_connections(self) -> Sequence['outputs.GetRegistryDataAssetDefaultConnectionResult']:
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connections")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endPoints")
    def end_points(self) -> Sequence[str]:
        """
        The list of endpoints with which this data asset is associated.
        """
        return pulumi.get(self, "end_points")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetRegistryDataAssetMetadataResult']:
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeTypeSystems")
    def native_type_systems(self) -> Sequence['outputs.GetRegistryDataAssetNativeTypeSystemResult']:
        """
        The type system maps from and to a type.
        """
        return pulumi.get(self, "native_type_systems")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryMetadatas")
    def registry_metadatas(self) -> Sequence['outputs.GetRegistryDataAssetRegistryMetadataResult']:
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadatas")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


class AwaitableGetRegistryDataAssetResult(GetRegistryDataAssetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryDataAssetResult(
            asset_properties=self.asset_properties,
            data_asset_key=self.data_asset_key,
            default_connections=self.default_connections,
            description=self.description,
            end_points=self.end_points,
            external_key=self.external_key,
            id=self.id,
            identifier=self.identifier,
            key=self.key,
            metadatas=self.metadatas,
            model_type=self.model_type,
            model_version=self.model_version,
            name=self.name,
            native_type_systems=self.native_type_systems,
            object_status=self.object_status,
            object_version=self.object_version,
            properties=self.properties,
            registry_id=self.registry_id,
            registry_metadatas=self.registry_metadatas,
            type=self.type)


def get_registry_data_asset(data_asset_key: Optional[str] = None,
                            registry_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistryDataAssetResult:
    """
    This data source provides details about a specific Registry Data Asset resource in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves details of a data asset using the specified identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_data_asset = oci.DataConnectivity.get_registry_data_asset(data_asset_key=var["registry_data_asset_data_asset_key"],
        registry_id=oci_data_connectivity_registry["test_registry"]["id"])
    ```


    :param str data_asset_key: The data asset key.
    :param str registry_id: The registry OCID.
    """
    __args__ = dict()
    __args__['dataAssetKey'] = data_asset_key
    __args__['registryId'] = registry_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataConnectivity/getRegistryDataAsset:getRegistryDataAsset', __args__, opts=opts, typ=GetRegistryDataAssetResult).value

    return AwaitableGetRegistryDataAssetResult(
        asset_properties=__ret__.asset_properties,
        data_asset_key=__ret__.data_asset_key,
        default_connections=__ret__.default_connections,
        description=__ret__.description,
        end_points=__ret__.end_points,
        external_key=__ret__.external_key,
        id=__ret__.id,
        identifier=__ret__.identifier,
        key=__ret__.key,
        metadatas=__ret__.metadatas,
        model_type=__ret__.model_type,
        model_version=__ret__.model_version,
        name=__ret__.name,
        native_type_systems=__ret__.native_type_systems,
        object_status=__ret__.object_status,
        object_version=__ret__.object_version,
        properties=__ret__.properties,
        registry_id=__ret__.registry_id,
        registry_metadatas=__ret__.registry_metadatas,
        type=__ret__.type)


@_utilities.lift_output_func(get_registry_data_asset)
def get_registry_data_asset_output(data_asset_key: Optional[pulumi.Input[str]] = None,
                                   registry_id: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistryDataAssetResult]:
    """
    This data source provides details about a specific Registry Data Asset resource in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves details of a data asset using the specified identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_data_asset = oci.DataConnectivity.get_registry_data_asset(data_asset_key=var["registry_data_asset_data_asset_key"],
        registry_id=oci_data_connectivity_registry["test_registry"]["id"])
    ```


    :param str data_asset_key: The data asset key.
    :param str registry_id: The registry OCID.
    """
    ...
