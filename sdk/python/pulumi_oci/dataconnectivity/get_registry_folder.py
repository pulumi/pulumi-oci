# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRegistryFolderResult',
    'AwaitableGetRegistryFolderResult',
    'get_registry_folder',
    'get_registry_folder_output',
]

@pulumi.output_type
class GetRegistryFolderResult:
    """
    A collection of values returned by getRegistryFolder.
    """
    def __init__(__self__, data_assets=None, description=None, folder_key=None, id=None, identifier=None, key=None, model_type=None, model_version=None, name=None, object_status=None, object_version=None, parent_reves=None, registry_id=None):
        if data_assets and not isinstance(data_assets, list):
            raise TypeError("Expected argument 'data_assets' to be a list")
        pulumi.set(__self__, "data_assets", data_assets)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if folder_key and not isinstance(folder_key, str):
            raise TypeError("Expected argument 'folder_key' to be a str")
        pulumi.set(__self__, "folder_key", folder_key)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if model_type and not isinstance(model_type, str):
            raise TypeError("Expected argument 'model_type' to be a str")
        pulumi.set(__self__, "model_type", model_type)
        if model_version and not isinstance(model_version, str):
            raise TypeError("Expected argument 'model_version' to be a str")
        pulumi.set(__self__, "model_version", model_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_status and not isinstance(object_status, int):
            raise TypeError("Expected argument 'object_status' to be a int")
        pulumi.set(__self__, "object_status", object_status)
        if object_version and not isinstance(object_version, int):
            raise TypeError("Expected argument 'object_version' to be a int")
        pulumi.set(__self__, "object_version", object_version)
        if parent_reves and not isinstance(parent_reves, list):
            raise TypeError("Expected argument 'parent_reves' to be a list")
        pulumi.set(__self__, "parent_reves", parent_reves)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)

    @property
    @pulumi.getter(name="dataAssets")
    def data_assets(self) -> Sequence['outputs.GetRegistryFolderDataAssetResult']:
        """
        The list of data assets that belong to the folder.
        """
        return pulumi.get(self, "data_assets")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderKey")
    def folder_key(self) -> str:
        return pulumi.get(self, "folder_key")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryFolderParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")


class AwaitableGetRegistryFolderResult(GetRegistryFolderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryFolderResult(
            data_assets=self.data_assets,
            description=self.description,
            folder_key=self.folder_key,
            id=self.id,
            identifier=self.identifier,
            key=self.key,
            model_type=self.model_type,
            model_version=self.model_version,
            name=self.name,
            object_status=self.object_status,
            object_version=self.object_version,
            parent_reves=self.parent_reves,
            registry_id=self.registry_id)


def get_registry_folder(folder_key: Optional[str] = None,
                        registry_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistryFolderResult:
    """
    This data source provides details about a specific Registry Folder resource in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves the folder details using the specified identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_folder = oci.DataConnectivity.get_registry_folder(folder_key=var["registry_folder_folder_key"],
        registry_id=oci_data_connectivity_registry["test_registry"]["id"])
    ```


    :param str folder_key: The folder ID.
    :param str registry_id: The registry OCID.
    """
    __args__ = dict()
    __args__['folderKey'] = folder_key
    __args__['registryId'] = registry_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataConnectivity/getRegistryFolder:getRegistryFolder', __args__, opts=opts, typ=GetRegistryFolderResult).value

    return AwaitableGetRegistryFolderResult(
        data_assets=__ret__.data_assets,
        description=__ret__.description,
        folder_key=__ret__.folder_key,
        id=__ret__.id,
        identifier=__ret__.identifier,
        key=__ret__.key,
        model_type=__ret__.model_type,
        model_version=__ret__.model_version,
        name=__ret__.name,
        object_status=__ret__.object_status,
        object_version=__ret__.object_version,
        parent_reves=__ret__.parent_reves,
        registry_id=__ret__.registry_id)


@_utilities.lift_output_func(get_registry_folder)
def get_registry_folder_output(folder_key: Optional[pulumi.Input[str]] = None,
                               registry_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistryFolderResult]:
    """
    This data source provides details about a specific Registry Folder resource in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves the folder details using the specified identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_folder = oci.DataConnectivity.get_registry_folder(folder_key=var["registry_folder_folder_key"],
        registry_id=oci_data_connectivity_registry["test_registry"]["id"])
    ```


    :param str folder_key: The folder ID.
    :param str registry_id: The registry OCID.
    """
    ...
