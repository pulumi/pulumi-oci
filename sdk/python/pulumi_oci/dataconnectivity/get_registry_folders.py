# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetRegistryFoldersResult',
    'AwaitableGetRegistryFoldersResult',
    'get_registry_folders',
    'get_registry_folders_output',
]

@pulumi.output_type
class GetRegistryFoldersResult:
    """
    A collection of values returned by getRegistryFolders.
    """
    def __init__(__self__, favorites_query_param=None, fields=None, filters=None, folder_summary_collections=None, id=None, name=None, registry_id=None, type=None):
        if favorites_query_param and not isinstance(favorites_query_param, str):
            raise TypeError("Expected argument 'favorites_query_param' to be a str")
        pulumi.set(__self__, "favorites_query_param", favorites_query_param)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if folder_summary_collections and not isinstance(folder_summary_collections, list):
            raise TypeError("Expected argument 'folder_summary_collections' to be a list")
        pulumi.set(__self__, "folder_summary_collections", folder_summary_collections)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="favoritesQueryParam")
    def favorites_query_param(self) -> Optional[str]:
        return pulumi.get(self, "favorites_query_param")

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetRegistryFoldersFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="folderSummaryCollections")
    def folder_summary_collections(self) -> Sequence['outputs.GetRegistryFoldersFolderSummaryCollectionResult']:
        """
        The list of folder_summary_collection.
        """
        return pulumi.get(self, "folder_summary_collections")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


class AwaitableGetRegistryFoldersResult(GetRegistryFoldersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryFoldersResult(
            favorites_query_param=self.favorites_query_param,
            fields=self.fields,
            filters=self.filters,
            folder_summary_collections=self.folder_summary_collections,
            id=self.id,
            name=self.name,
            registry_id=self.registry_id,
            type=self.type)


def get_registry_folders(favorites_query_param: Optional[str] = None,
                         fields: Optional[Sequence[str]] = None,
                         filters: Optional[Sequence[pulumi.InputType['GetRegistryFoldersFilterArgs']]] = None,
                         name: Optional[str] = None,
                         registry_id: Optional[str] = None,
                         type: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistryFoldersResult:
    """
    This data source provides the list of Registry Folders in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves a list of all the folders.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_folders = oci.DataConnectivity.get_registry_folders(registry_id=oci_data_connectivity_registry["test_registry"]["id"],
        favorites_query_param=var["registry_folder_favorites_query_param"],
        fields=var["registry_folder_fields"],
        name=var["registry_folder_name"],
        type=var["registry_folder_type"])
    ```


    :param str favorites_query_param: If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
    :param Sequence[str] fields: Specifies the fields to get for an object.
    :param str name: Used to filter by the name of the object.
    :param str registry_id: The registry OCID.
    :param str type: Type of the object to filter the results with.
    """
    __args__ = dict()
    __args__['favoritesQueryParam'] = favorites_query_param
    __args__['fields'] = fields
    __args__['filters'] = filters
    __args__['name'] = name
    __args__['registryId'] = registry_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataConnectivity/getRegistryFolders:getRegistryFolders', __args__, opts=opts, typ=GetRegistryFoldersResult).value

    return AwaitableGetRegistryFoldersResult(
        favorites_query_param=__ret__.favorites_query_param,
        fields=__ret__.fields,
        filters=__ret__.filters,
        folder_summary_collections=__ret__.folder_summary_collections,
        id=__ret__.id,
        name=__ret__.name,
        registry_id=__ret__.registry_id,
        type=__ret__.type)


@_utilities.lift_output_func(get_registry_folders)
def get_registry_folders_output(favorites_query_param: Optional[pulumi.Input[Optional[str]]] = None,
                                fields: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetRegistryFoldersFilterArgs']]]]] = None,
                                name: Optional[pulumi.Input[Optional[str]]] = None,
                                registry_id: Optional[pulumi.Input[str]] = None,
                                type: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistryFoldersResult]:
    """
    This data source provides the list of Registry Folders in Oracle Cloud Infrastructure Data Connectivity service.

    Retrieves a list of all the folders.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_folders = oci.DataConnectivity.get_registry_folders(registry_id=oci_data_connectivity_registry["test_registry"]["id"],
        favorites_query_param=var["registry_folder_favorites_query_param"],
        fields=var["registry_folder_fields"],
        name=var["registry_folder_name"],
        type=var["registry_folder_type"])
    ```


    :param str favorites_query_param: If value is FAVORITES_ONLY, then only objects marked as favorite by the requesting user will be included in result. If value is NON_FAVORITES_ONLY, then objects marked as favorites by the requesting user will be skipped. If value is ALL or if not specified, all objects, irrespective of favorites or not will be returned. Default is ALL.
    :param Sequence[str] fields: Specifies the fields to get for an object.
    :param str name: Used to filter by the name of the object.
    :param str registry_id: The registry OCID.
    :param str type: Type of the object to filter the results with.
    """
    ...
