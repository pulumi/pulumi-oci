# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRegistryTypeResult',
    'AwaitableGetRegistryTypeResult',
    'get_registry_type',
    'get_registry_type_output',
]

@pulumi.output_type
class GetRegistryTypeResult:
    """
    A collection of values returned by getRegistryType.
    """
    def __init__(__self__, connection_attributes=None, data_asset_attributes=None, fields=None, id=None, registry_id=None, type_key=None):
        if connection_attributes and not isinstance(connection_attributes, dict):
            raise TypeError("Expected argument 'connection_attributes' to be a dict")
        pulumi.set(__self__, "connection_attributes", connection_attributes)
        if data_asset_attributes and not isinstance(data_asset_attributes, list):
            raise TypeError("Expected argument 'data_asset_attributes' to be a list")
        pulumi.set(__self__, "data_asset_attributes", data_asset_attributes)
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if type_key and not isinstance(type_key, str):
            raise TypeError("Expected argument 'type_key' to be a str")
        pulumi.set(__self__, "type_key", type_key)

    @property
    @pulumi.getter(name="connectionAttributes")
    def connection_attributes(self) -> Mapping[str, Any]:
        """
        Map of connectionType as key and List of attributes as value
        """
        return pulumi.get(self, "connection_attributes")

    @property
    @pulumi.getter(name="dataAssetAttributes")
    def data_asset_attributes(self) -> Sequence['outputs.GetRegistryTypeDataAssetAttributeResult']:
        """
        list of attributes for the dataAsset
        """
        return pulumi.get(self, "data_asset_attributes")

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="typeKey")
    def type_key(self) -> str:
        return pulumi.get(self, "type_key")


class AwaitableGetRegistryTypeResult(GetRegistryTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegistryTypeResult(
            connection_attributes=self.connection_attributes,
            data_asset_attributes=self.data_asset_attributes,
            fields=self.fields,
            id=self.id,
            registry_id=self.registry_id,
            type_key=self.type_key)


def get_registry_type(fields: Optional[Sequence[str]] = None,
                      registry_id: Optional[str] = None,
                      type_key: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegistryTypeResult:
    """
    This data source provides details about a specific Registry Type resource in Oracle Cloud Infrastructure Data Connectivity service.

    This endpoint retrieves dataAsset and connection attributes from DataAssetRegistry

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_type = oci.DataConnectivity.get_registry_type(registry_id=oci_data_connectivity_registry["test_registry"]["id"],
        type_key=var["registry_type_type_key"],
        fields=var["registry_type_fields"])
    ```


    :param Sequence[str] fields: Specifies the fields to get for an object.
    :param str registry_id: The registry Ocid.
    :param str type_key: key of the a specefic Type.
    """
    __args__ = dict()
    __args__['fields'] = fields
    __args__['registryId'] = registry_id
    __args__['typeKey'] = type_key
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:DataConnectivity/getRegistryType:getRegistryType', __args__, opts=opts, typ=GetRegistryTypeResult).value

    return AwaitableGetRegistryTypeResult(
        connection_attributes=__ret__.connection_attributes,
        data_asset_attributes=__ret__.data_asset_attributes,
        fields=__ret__.fields,
        id=__ret__.id,
        registry_id=__ret__.registry_id,
        type_key=__ret__.type_key)


@_utilities.lift_output_func(get_registry_type)
def get_registry_type_output(fields: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             registry_id: Optional[pulumi.Input[str]] = None,
                             type_key: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegistryTypeResult]:
    """
    This data source provides details about a specific Registry Type resource in Oracle Cloud Infrastructure Data Connectivity service.

    This endpoint retrieves dataAsset and connection attributes from DataAssetRegistry

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_registry_type = oci.DataConnectivity.get_registry_type(registry_id=oci_data_connectivity_registry["test_registry"]["id"],
        type_key=var["registry_type_type_key"],
        fields=var["registry_type_fields"])
    ```


    :param Sequence[str] fields: Specifies the fields to get for an object.
    :param str registry_id: The registry Ocid.
    :param str type_key: key of the a specefic Type.
    """
    ...
