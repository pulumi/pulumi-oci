# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RegistryConnectionConnectionProperty',
    'RegistryConnectionMetadata',
    'RegistryConnectionMetadataAggregator',
    'RegistryConnectionPrimarySchema',
    'RegistryConnectionPrimarySchemaMetadata',
    'RegistryConnectionPrimarySchemaMetadataAggregator',
    'RegistryConnectionPrimarySchemaParentRef',
    'RegistryConnectionRegistryMetadata',
    'RegistryDataAssetDefaultConnection',
    'RegistryDataAssetDefaultConnectionConnectionProperty',
    'RegistryDataAssetDefaultConnectionMetadata',
    'RegistryDataAssetDefaultConnectionMetadataAggregator',
    'RegistryDataAssetDefaultConnectionPrimarySchema',
    'RegistryDataAssetDefaultConnectionPrimarySchemaMetadata',
    'RegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregator',
    'RegistryDataAssetDefaultConnectionPrimarySchemaParentRef',
    'RegistryDataAssetDefaultConnectionRegistryMetadata',
    'RegistryDataAssetMetadata',
    'RegistryDataAssetMetadataAggregator',
    'RegistryDataAssetNativeTypeSystem',
    'RegistryDataAssetNativeTypeSystemParentRef',
    'RegistryDataAssetNativeTypeSystemType',
    'RegistryDataAssetNativeTypeSystemTypeConfigDefinition',
    'RegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRef',
    'RegistryDataAssetNativeTypeSystemTypeParentRef',
    'RegistryDataAssetRegistryMetadata',
    'RegistryFolderDataAsset',
    'RegistryFolderDataAssetDefaultConnection',
    'RegistryFolderDataAssetDefaultConnectionConnectionProperty',
    'RegistryFolderDataAssetDefaultConnectionMetadata',
    'RegistryFolderDataAssetDefaultConnectionMetadataAggregator',
    'RegistryFolderDataAssetDefaultConnectionPrimarySchema',
    'RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadata',
    'RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregator',
    'RegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRef',
    'RegistryFolderDataAssetDefaultConnectionRegistryMetadata',
    'RegistryFolderDataAssetMetadata',
    'RegistryFolderDataAssetMetadataAggregator',
    'RegistryFolderDataAssetNativeTypeSystem',
    'RegistryFolderDataAssetNativeTypeSystemParentRef',
    'RegistryFolderDataAssetNativeTypeSystemType',
    'RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinition',
    'RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRef',
    'RegistryFolderDataAssetNativeTypeSystemTypeParentRef',
    'RegistryFolderDataAssetRegistryMetadata',
    'RegistryFolderParentRef',
    'GetRegistriesFilterResult',
    'GetRegistriesRegistrySummaryCollectionResult',
    'GetRegistriesRegistrySummaryCollectionItemResult',
    'GetRegistryConnectionConnectionPropertyResult',
    'GetRegistryConnectionMetadataResult',
    'GetRegistryConnectionMetadataAggregatorResult',
    'GetRegistryConnectionPrimarySchemaResult',
    'GetRegistryConnectionPrimarySchemaMetadataResult',
    'GetRegistryConnectionPrimarySchemaMetadataAggregatorResult',
    'GetRegistryConnectionPrimarySchemaParentRefResult',
    'GetRegistryConnectionRegistryMetadataResult',
    'GetRegistryConnectionsConnectionSummaryCollectionResult',
    'GetRegistryConnectionsConnectionSummaryCollectionItemResult',
    'GetRegistryConnectionsConnectionSummaryCollectionItemConnectionPropertyResult',
    'GetRegistryConnectionsConnectionSummaryCollectionItemMetadataResult',
    'GetRegistryConnectionsConnectionSummaryCollectionItemMetadataAggregatorResult',
    'GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaResult',
    'GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataResult',
    'GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataAggregatorResult',
    'GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRefResult',
    'GetRegistryConnectionsConnectionSummaryCollectionItemRegistryMetadataResult',
    'GetRegistryConnectionsFilterResult',
    'GetRegistryDataAssetDefaultConnectionResult',
    'GetRegistryDataAssetDefaultConnectionConnectionPropertyResult',
    'GetRegistryDataAssetDefaultConnectionMetadataResult',
    'GetRegistryDataAssetDefaultConnectionMetadataAggregatorResult',
    'GetRegistryDataAssetDefaultConnectionPrimarySchemaResult',
    'GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataResult',
    'GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult',
    'GetRegistryDataAssetDefaultConnectionPrimarySchemaParentRefResult',
    'GetRegistryDataAssetDefaultConnectionRegistryMetadataResult',
    'GetRegistryDataAssetMetadataResult',
    'GetRegistryDataAssetMetadataAggregatorResult',
    'GetRegistryDataAssetNativeTypeSystemResult',
    'GetRegistryDataAssetNativeTypeSystemParentRefResult',
    'GetRegistryDataAssetNativeTypeSystemTypeResult',
    'GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionResult',
    'GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult',
    'GetRegistryDataAssetNativeTypeSystemTypeParentRefResult',
    'GetRegistryDataAssetRegistryMetadataResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionConnectionPropertyResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataAggregatorResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataAggregatorResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaParentRefResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionRegistryMetadataResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataAggregatorResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRefResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionParentRefResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeParentRefResult',
    'GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadataResult',
    'GetRegistryDataAssetsFilterResult',
    'GetRegistryFolderDataAssetResult',
    'GetRegistryFolderDataAssetDefaultConnectionResult',
    'GetRegistryFolderDataAssetDefaultConnectionConnectionPropertyResult',
    'GetRegistryFolderDataAssetDefaultConnectionMetadataResult',
    'GetRegistryFolderDataAssetDefaultConnectionMetadataAggregatorResult',
    'GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaResult',
    'GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataResult',
    'GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult',
    'GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRefResult',
    'GetRegistryFolderDataAssetDefaultConnectionRegistryMetadataResult',
    'GetRegistryFolderDataAssetMetadataResult',
    'GetRegistryFolderDataAssetMetadataAggregatorResult',
    'GetRegistryFolderDataAssetNativeTypeSystemResult',
    'GetRegistryFolderDataAssetNativeTypeSystemParentRefResult',
    'GetRegistryFolderDataAssetNativeTypeSystemTypeResult',
    'GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionResult',
    'GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult',
    'GetRegistryFolderDataAssetNativeTypeSystemTypeParentRefResult',
    'GetRegistryFolderDataAssetRegistryMetadataResult',
    'GetRegistryFolderParentRefResult',
    'GetRegistryFoldersFilterResult',
    'GetRegistryFoldersFolderSummaryCollectionResult',
    'GetRegistryFoldersFolderSummaryCollectionItemResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionConnectionPropertyResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataAggregatorResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaParentRefResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionRegistryMetadataResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataAggregatorResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemParentRefResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeParentRefResult',
    'GetRegistryFoldersFolderSummaryCollectionItemDataAssetRegistryMetadataResult',
    'GetRegistryFoldersFolderSummaryCollectionItemParentRefResult',
    'GetRegistryTypeDataAssetAttributeResult',
    'GetRegistryTypesFilterResult',
    'GetRegistryTypesTypesSummaryCollectionResult',
    'GetRegistryTypesTypesSummaryCollectionItemResult',
    'GetRegistryTypesTypesSummaryCollectionItemDataAssetAttributeResult',
]

@pulumi.output_type
class RegistryConnectionConnectionProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str value: (Updatable) The value for the connection name property.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value for the connection name property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RegistryConnectionMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryConnectionMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryConnectionMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryConnectionMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional['outputs.RegistryConnectionMetadataAggregator'] = None,
                 aggregator_key: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param 'RegistryConnectionMetadataAggregatorArgs' aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by: (Updatable) The user that created the object.
        :param str created_by_name: (Updatable) The user that created the object.
        :param str identifier_path: (Updatable) The full path to identify the object.
        :param Mapping[str, Any] info_fields: (Updatable) Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by: (Updatable) The user that updated the object.
        :param str updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional['outputs.RegistryConnectionMetadataAggregator']:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        (Updatable) The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class RegistryConnectionMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) The description of the aggregator.
        :param str identifier: (Updatable) The identifier of the aggregator.
        :param str key: (Updatable) The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: (Updatable) Specific Connection Type
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific Connection Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryConnectionPrimarySchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelType":
            suggest = "model_type"
        elif key == "defaultConnection":
            suggest = "default_connection"
        elif key == "externalKey":
            suggest = "external_key"
        elif key == "isHasContainers":
            suggest = "is_has_containers"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "parentRef":
            suggest = "parent_ref"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryConnectionPrimarySchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryConnectionPrimarySchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryConnectionPrimarySchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identifier: str,
                 key: str,
                 model_type: str,
                 name: str,
                 default_connection: Optional[str] = None,
                 description: Optional[str] = None,
                 external_key: Optional[str] = None,
                 is_has_containers: Optional[bool] = None,
                 metadata: Optional['outputs.RegistryConnectionPrimarySchemaMetadata'] = None,
                 model_version: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 parent_ref: Optional['outputs.RegistryConnectionPrimarySchemaParentRef'] = None,
                 resource_name: Optional[str] = None):
        """
        :param str identifier: (Updatable) The identifier of the aggregator.
        :param str key: (Updatable) The identifying key for the object.
        :param str model_type: (Updatable) The object type.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str default_connection: (Updatable) The default connection key.
        :param str description: (Updatable) The description of the aggregator.
        :param str external_key: (Updatable) The external key of the object.
        :param bool is_has_containers: (Updatable) Specifies whether the schema has containers.
        :param 'RegistryConnectionPrimarySchemaMetadataArgs' metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_version: (Updatable) The model version of the object.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param 'RegistryConnectionPrimarySchemaParentRefArgs' parent_ref: (Updatable) A reference to the parent object.
        :param str resource_name: (Updatable) A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "name", name)
        if default_connection is not None:
            pulumi.set(__self__, "default_connection", default_connection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_key is not None:
            pulumi.set(__self__, "external_key", external_key)
        if is_has_containers is not None:
            pulumi.set(__self__, "is_has_containers", is_has_containers)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        (Updatable) The object type.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> Optional[str]:
        """
        (Updatable) The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> Optional[str]:
        """
        (Updatable) The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter(name="isHasContainers")
    def is_has_containers(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the schema has containers.
        """
        return pulumi.get(self, "is_has_containers")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.RegistryConnectionPrimarySchemaMetadata']:
        """
        (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of the object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional['outputs.RegistryConnectionPrimarySchemaParentRef']:
        """
        (Updatable) A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        (Updatable) A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class RegistryConnectionPrimarySchemaMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryConnectionPrimarySchemaMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryConnectionPrimarySchemaMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryConnectionPrimarySchemaMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional['outputs.RegistryConnectionPrimarySchemaMetadataAggregator'] = None,
                 aggregator_key: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param 'RegistryConnectionPrimarySchemaMetadataAggregatorArgs' aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by: (Updatable) The user that created the object.
        :param str created_by_name: (Updatable) The user that created the object.
        :param str identifier_path: (Updatable) The full path to identify the object.
        :param Mapping[str, Any] info_fields: (Updatable) Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by: (Updatable) The user that updated the object.
        :param str updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional['outputs.RegistryConnectionPrimarySchemaMetadataAggregator']:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        (Updatable) The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class RegistryConnectionPrimarySchemaMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) The description of the aggregator.
        :param str identifier: (Updatable) The identifier of the aggregator.
        :param str key: (Updatable) The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: (Updatable) Specific Connection Type
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific Connection Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryConnectionPrimarySchemaParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RegistryConnectionRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdByUserId":
            suggest = "created_by_user_id"
        elif key == "createdByUserName":
            suggest = "created_by_user_name"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedByUserId":
            suggest = "updated_by_user_id"
        elif key == "updatedByUserName":
            suggest = "updated_by_user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryConnectionRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryConnectionRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryConnectionRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 created_by_user_id: Optional[str] = None,
                 created_by_user_name: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by_user_id: Optional[str] = None,
                 updated_by_user_name: Optional[str] = None):
        """
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by_user_id: (Updatable) The ID of the user who created the object.
        :param str created_by_user_name: (Updatable) The name of the user who created the object.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param str key: (Updatable) The identifying key for the object.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by_user_id: (Updatable) The ID of the user who updated the object.
        :param str updated_by_user_name: (Updatable) The name of the user who updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by_user_id is not None:
            pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        if created_by_user_name is not None:
            pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by_user_id is not None:
            pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        if updated_by_user_name is not None:
            pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class RegistryDataAssetDefaultConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelType":
            suggest = "model_type"
        elif key == "connectionProperties":
            suggest = "connection_properties"
        elif key == "isDefault":
            suggest = "is_default"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "primarySchema":
            suggest = "primary_schema"
        elif key == "registryMetadata":
            suggest = "registry_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetDefaultConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetDefaultConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetDefaultConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identifier: str,
                 model_type: str,
                 name: str,
                 properties: Mapping[str, Any],
                 connection_properties: Optional[Sequence['outputs.RegistryDataAssetDefaultConnectionConnectionProperty']] = None,
                 description: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 key: Optional[str] = None,
                 metadata: Optional['outputs.RegistryDataAssetDefaultConnectionMetadata'] = None,
                 model_version: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 primary_schema: Optional['outputs.RegistryDataAssetDefaultConnectionPrimarySchema'] = None,
                 registry_metadata: Optional['outputs.RegistryDataAssetDefaultConnectionRegistryMetadata'] = None,
                 type: Optional[str] = None):
        """
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str model_type: (Updatable) The property which differentiates the subtypes.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param Mapping[str, Any] properties: (Updatable) All the properties for the data asset in a key-value map format.
        :param Sequence['RegistryDataAssetDefaultConnectionConnectionPropertyArgs'] connection_properties: (Updatable) The properties of the connection.
        :param str description: (Updatable) A user-defined description for the object.
        :param bool is_default: (Updatable) The default property of the connection.
        :param str key: (Updatable) The identifying key for the object.
        :param 'RegistryDataAssetDefaultConnectionMetadataArgs' metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_version: (Updatable) The model version of an object.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param 'RegistryDataAssetDefaultConnectionPrimarySchemaArgs' primary_schema: (Updatable) The schema object.
        :param 'RegistryDataAssetDefaultConnectionRegistryMetadataArgs' registry_metadata: (Updatable) Information about the object and its parent.
        :param str type: (Updatable) Specific DataAsset Type
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        if connection_properties is not None:
            pulumi.set(__self__, "connection_properties", connection_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if primary_schema is not None:
            pulumi.set(__self__, "primary_schema", primary_schema)
        if registry_metadata is not None:
            pulumi.set(__self__, "registry_metadata", registry_metadata)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        (Updatable) The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        (Updatable) All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Optional[Sequence['outputs.RegistryDataAssetDefaultConnectionConnectionProperty']]:
        """
        (Updatable) The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        (Updatable) The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.RegistryDataAssetDefaultConnectionMetadata']:
        """
        (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="primarySchema")
    def primary_schema(self) -> Optional['outputs.RegistryDataAssetDefaultConnectionPrimarySchema']:
        """
        (Updatable) The schema object.
        """
        return pulumi.get(self, "primary_schema")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> Optional['outputs.RegistryDataAssetDefaultConnectionRegistryMetadata']:
        """
        (Updatable) Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryDataAssetDefaultConnectionConnectionProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str value: (Updatable) The value for the connection name property.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value for the connection name property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RegistryDataAssetDefaultConnectionMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetDefaultConnectionMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetDefaultConnectionMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetDefaultConnectionMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional['outputs.RegistryDataAssetDefaultConnectionMetadataAggregator'] = None,
                 aggregator_key: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param 'RegistryDataAssetDefaultConnectionMetadataAggregatorArgs' aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by: (Updatable) The user that created the object.
        :param str created_by_name: (Updatable) The user that created the object.
        :param str identifier_path: (Updatable) The full path to identify the object.
        :param Mapping[str, Any] info_fields: (Updatable) Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by: (Updatable) The user that updated the object.
        :param str updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional['outputs.RegistryDataAssetDefaultConnectionMetadataAggregator']:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        (Updatable) The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class RegistryDataAssetDefaultConnectionMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) A user-defined description for the object.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: (Updatable) Specific DataAsset Type
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryDataAssetDefaultConnectionPrimarySchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelType":
            suggest = "model_type"
        elif key == "defaultConnection":
            suggest = "default_connection"
        elif key == "externalKey":
            suggest = "external_key"
        elif key == "isHasContainers":
            suggest = "is_has_containers"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "parentRef":
            suggest = "parent_ref"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetDefaultConnectionPrimarySchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetDefaultConnectionPrimarySchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetDefaultConnectionPrimarySchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identifier: str,
                 key: str,
                 model_type: str,
                 name: str,
                 default_connection: Optional[str] = None,
                 description: Optional[str] = None,
                 external_key: Optional[str] = None,
                 is_has_containers: Optional[bool] = None,
                 metadata: Optional['outputs.RegistryDataAssetDefaultConnectionPrimarySchemaMetadata'] = None,
                 model_version: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 parent_ref: Optional['outputs.RegistryDataAssetDefaultConnectionPrimarySchemaParentRef'] = None,
                 resource_name: Optional[str] = None):
        """
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) The identifying key for the object.
        :param str model_type: (Updatable) The property which differentiates the subtypes.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str default_connection: (Updatable) The default connection key.
        :param str description: (Updatable) A user-defined description for the object.
        :param str external_key: (Updatable) The external key of the object.
        :param bool is_has_containers: (Updatable) Specifies whether the schema has containers.
        :param 'RegistryDataAssetDefaultConnectionPrimarySchemaMetadataArgs' metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_version: (Updatable) The model version of an object.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param 'RegistryDataAssetDefaultConnectionPrimarySchemaParentRefArgs' parent_ref: (Updatable) A reference to the parent object.
        :param str resource_name: (Updatable) A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "name", name)
        if default_connection is not None:
            pulumi.set(__self__, "default_connection", default_connection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_key is not None:
            pulumi.set(__self__, "external_key", external_key)
        if is_has_containers is not None:
            pulumi.set(__self__, "is_has_containers", is_has_containers)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        (Updatable) The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> Optional[str]:
        """
        (Updatable) The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> Optional[str]:
        """
        (Updatable) The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter(name="isHasContainers")
    def is_has_containers(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the schema has containers.
        """
        return pulumi.get(self, "is_has_containers")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.RegistryDataAssetDefaultConnectionPrimarySchemaMetadata']:
        """
        (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional['outputs.RegistryDataAssetDefaultConnectionPrimarySchemaParentRef']:
        """
        (Updatable) A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        (Updatable) A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class RegistryDataAssetDefaultConnectionPrimarySchemaMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetDefaultConnectionPrimarySchemaMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetDefaultConnectionPrimarySchemaMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetDefaultConnectionPrimarySchemaMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional['outputs.RegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregator'] = None,
                 aggregator_key: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param 'RegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorArgs' aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by: (Updatable) The user that created the object.
        :param str created_by_name: (Updatable) The user that created the object.
        :param str identifier_path: (Updatable) The full path to identify the object.
        :param Mapping[str, Any] info_fields: (Updatable) Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by: (Updatable) The user that updated the object.
        :param str updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional['outputs.RegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregator']:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        (Updatable) The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class RegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) A user-defined description for the object.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: (Updatable) Specific DataAsset Type
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryDataAssetDefaultConnectionPrimarySchemaParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RegistryDataAssetDefaultConnectionRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdByUserId":
            suggest = "created_by_user_id"
        elif key == "createdByUserName":
            suggest = "created_by_user_name"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedByUserId":
            suggest = "updated_by_user_id"
        elif key == "updatedByUserName":
            suggest = "updated_by_user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetDefaultConnectionRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetDefaultConnectionRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetDefaultConnectionRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 created_by_user_id: Optional[str] = None,
                 created_by_user_name: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by_user_id: Optional[str] = None,
                 updated_by_user_name: Optional[str] = None):
        """
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by_user_id: (Updatable) The ID of the user who created the object.
        :param str created_by_user_name: (Updatable) The name of the user who created the object.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param str key: (Updatable) The identifying key for the object.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by_user_id: (Updatable) The ID of the user who updated the object.
        :param str updated_by_user_name: (Updatable) The name of the user who updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by_user_id is not None:
            pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        if created_by_user_name is not None:
            pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by_user_id is not None:
            pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        if updated_by_user_name is not None:
            pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class RegistryDataAssetMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional['outputs.RegistryDataAssetMetadataAggregator'] = None,
                 aggregator_key: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param 'RegistryDataAssetMetadataAggregatorArgs' aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by: (Updatable) The user that created the object.
        :param str created_by_name: (Updatable) The user that created the object.
        :param str identifier_path: (Updatable) The full path to identify the object.
        :param Mapping[str, Any] info_fields: (Updatable) Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by: (Updatable) The user that updated the object.
        :param str updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional['outputs.RegistryDataAssetMetadataAggregator']:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        (Updatable) The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class RegistryDataAssetMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) A user-defined description for the object.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: (Updatable) Specific DataAsset Type
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryDataAssetNativeTypeSystem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelType":
            suggest = "model_type"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "parentRef":
            suggest = "parent_ref"
        elif key == "typeMappingFrom":
            suggest = "type_mapping_from"
        elif key == "typeMappingTo":
            suggest = "type_mapping_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetNativeTypeSystem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetNativeTypeSystem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetNativeTypeSystem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 model_type: Optional[str] = None,
                 model_version: Optional[str] = None,
                 name: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 parent_ref: Optional['outputs.RegistryDataAssetNativeTypeSystemParentRef'] = None,
                 type_mapping_from: Optional[Mapping[str, Any]] = None,
                 type_mapping_to: Optional[Mapping[str, Any]] = None,
                 types: Optional[Sequence['outputs.RegistryDataAssetNativeTypeSystemType']] = None):
        """
        :param str description: (Updatable) A user-defined description for the object.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) The identifying key for the object.
        :param str model_type: (Updatable) The property which differentiates the subtypes.
        :param str model_version: (Updatable) The model version of an object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param 'RegistryDataAssetNativeTypeSystemParentRefArgs' parent_ref: (Updatable) A reference to the parent object.
        :param Mapping[str, Any] type_mapping_from: (Updatable) The type system to map from.
        :param Mapping[str, Any] type_mapping_to: (Updatable) The type system to map to.
        :param Sequence['RegistryDataAssetNativeTypeSystemTypeArgs'] types: (Updatable) An array of types.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if type_mapping_from is not None:
            pulumi.set(__self__, "type_mapping_from", type_mapping_from)
        if type_mapping_to is not None:
            pulumi.set(__self__, "type_mapping_to", type_mapping_to)
        if types is not None:
            pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        """
        (Updatable) The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional['outputs.RegistryDataAssetNativeTypeSystemParentRef']:
        """
        (Updatable) A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="typeMappingFrom")
    def type_mapping_from(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) The type system to map from.
        """
        return pulumi.get(self, "type_mapping_from")

    @property
    @pulumi.getter(name="typeMappingTo")
    def type_mapping_to(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) The type system to map to.
        """
        return pulumi.get(self, "type_mapping_to")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence['outputs.RegistryDataAssetNativeTypeSystemType']]:
        """
        (Updatable) An array of types.
        """
        return pulumi.get(self, "types")


@pulumi.output_type
class RegistryDataAssetNativeTypeSystemParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RegistryDataAssetNativeTypeSystemType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelType":
            suggest = "model_type"
        elif key == "configDefinition":
            suggest = "config_definition"
        elif key == "dtType":
            suggest = "dt_type"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "parentRef":
            suggest = "parent_ref"
        elif key == "typeSystemName":
            suggest = "type_system_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetNativeTypeSystemType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetNativeTypeSystemType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetNativeTypeSystemType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_type: str,
                 config_definition: Optional['outputs.RegistryDataAssetNativeTypeSystemTypeConfigDefinition'] = None,
                 description: Optional[str] = None,
                 dt_type: Optional[str] = None,
                 key: Optional[str] = None,
                 model_version: Optional[str] = None,
                 name: Optional[str] = None,
                 object_status: Optional[int] = None,
                 parent_ref: Optional['outputs.RegistryDataAssetNativeTypeSystemTypeParentRef'] = None,
                 type_system_name: Optional[str] = None):
        """
        :param str model_type: (Updatable) The property which differentiates the subtypes.
        :param 'RegistryDataAssetNativeTypeSystemTypeConfigDefinitionArgs' config_definition: (Updatable) The configuration details of a configurable object. This contains one or more config param definitions.
        :param str description: (Updatable) A user-defined description for the object.
        :param str dt_type: (Updatable) The data type.
        :param str key: (Updatable) The identifying key for the object.
        :param str model_version: (Updatable) The model version of an object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param 'RegistryDataAssetNativeTypeSystemTypeParentRefArgs' parent_ref: (Updatable) A reference to the parent object.
        :param str type_system_name: (Updatable) The data type system name.
        """
        pulumi.set(__self__, "model_type", model_type)
        if config_definition is not None:
            pulumi.set(__self__, "config_definition", config_definition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dt_type is not None:
            pulumi.set(__self__, "dt_type", dt_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if type_system_name is not None:
            pulumi.set(__self__, "type_system_name", type_system_name)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        (Updatable) The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="configDefinition")
    def config_definition(self) -> Optional['outputs.RegistryDataAssetNativeTypeSystemTypeConfigDefinition']:
        """
        (Updatable) The configuration details of a configurable object. This contains one or more config param definitions.
        """
        return pulumi.get(self, "config_definition")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dtType")
    def dt_type(self) -> Optional[str]:
        """
        (Updatable) The data type.
        """
        return pulumi.get(self, "dt_type")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional['outputs.RegistryDataAssetNativeTypeSystemTypeParentRef']:
        """
        (Updatable) A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="typeSystemName")
    def type_system_name(self) -> Optional[str]:
        """
        (Updatable) The data type system name.
        """
        return pulumi.get(self, "type_system_name")


@pulumi.output_type
class RegistryDataAssetNativeTypeSystemTypeConfigDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configParameterDefinitions":
            suggest = "config_parameter_definitions"
        elif key == "isContained":
            suggest = "is_contained"
        elif key == "modelType":
            suggest = "model_type"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "parentRef":
            suggest = "parent_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetNativeTypeSystemTypeConfigDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetNativeTypeSystemTypeConfigDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetNativeTypeSystemTypeConfigDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_parameter_definitions: Optional[Mapping[str, Any]] = None,
                 is_contained: Optional[bool] = None,
                 key: Optional[str] = None,
                 model_type: Optional[str] = None,
                 model_version: Optional[str] = None,
                 name: Optional[str] = None,
                 object_status: Optional[int] = None,
                 parent_ref: Optional['outputs.RegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRef'] = None):
        """
        :param Mapping[str, Any] config_parameter_definitions: (Updatable) The parameter configuration details.
        :param bool is_contained: (Updatable) Specifies whether the configuration is contained.
        :param str key: (Updatable) The identifying key for the object.
        :param str model_type: (Updatable) The property which differentiates the subtypes.
        :param str model_version: (Updatable) The model version of an object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param 'RegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRefArgs' parent_ref: (Updatable) A reference to the parent object.
        """
        if config_parameter_definitions is not None:
            pulumi.set(__self__, "config_parameter_definitions", config_parameter_definitions)
        if is_contained is not None:
            pulumi.set(__self__, "is_contained", is_contained)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParameterDefinitions")
    def config_parameter_definitions(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) The parameter configuration details.
        """
        return pulumi.get(self, "config_parameter_definitions")

    @property
    @pulumi.getter(name="isContained")
    def is_contained(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the configuration is contained.
        """
        return pulumi.get(self, "is_contained")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        """
        (Updatable) The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional['outputs.RegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRef']:
        """
        (Updatable) A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")


@pulumi.output_type
class RegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RegistryDataAssetNativeTypeSystemTypeParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RegistryDataAssetRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdByUserId":
            suggest = "created_by_user_id"
        elif key == "createdByUserName":
            suggest = "created_by_user_name"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedByUserId":
            suggest = "updated_by_user_id"
        elif key == "updatedByUserName":
            suggest = "updated_by_user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryDataAssetRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryDataAssetRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryDataAssetRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 created_by_user_id: Optional[str] = None,
                 created_by_user_name: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by_user_id: Optional[str] = None,
                 updated_by_user_name: Optional[str] = None):
        """
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by_user_id: (Updatable) The ID of the user who created the object.
        :param str created_by_user_name: (Updatable) The name of the user who created the object.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param str key: (Updatable) The identifying key for the object.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by_user_id: (Updatable) The ID of the user who updated the object.
        :param str updated_by_user_name: (Updatable) The name of the user who updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by_user_id is not None:
            pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        if created_by_user_name is not None:
            pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by_user_id is not None:
            pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        if updated_by_user_name is not None:
            pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class RegistryFolderDataAsset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assetProperties":
            suggest = "asset_properties"
        elif key == "defaultConnection":
            suggest = "default_connection"
        elif key == "externalKey":
            suggest = "external_key"
        elif key == "modelType":
            suggest = "model_type"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "nativeTypeSystem":
            suggest = "native_type_system"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "registryMetadata":
            suggest = "registry_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAsset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAsset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAsset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identifier: str,
                 key: str,
                 name: str,
                 asset_properties: Optional[Mapping[str, Any]] = None,
                 default_connection: Optional['outputs.RegistryFolderDataAssetDefaultConnection'] = None,
                 description: Optional[str] = None,
                 external_key: Optional[str] = None,
                 metadata: Optional['outputs.RegistryFolderDataAssetMetadata'] = None,
                 model_type: Optional[str] = None,
                 model_version: Optional[str] = None,
                 native_type_system: Optional['outputs.RegistryFolderDataAssetNativeTypeSystem'] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 properties: Optional[Mapping[str, Any]] = None,
                 registry_metadata: Optional['outputs.RegistryFolderDataAssetRegistryMetadata'] = None,
                 type: Optional[str] = None):
        """
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param Mapping[str, Any] asset_properties: (Updatable) Additional properties for the data asset.
        :param 'RegistryFolderDataAssetDefaultConnectionArgs' default_connection: (Updatable) The default connection key.
        :param str description: (Updatable) User-defined description of the folder.
        :param str external_key: (Updatable) The external key of the object.
        :param 'RegistryFolderDataAssetMetadataArgs' metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: (Updatable) The type of the folder.
        :param str model_version: (Updatable) The model version of an object.
        :param 'RegistryFolderDataAssetNativeTypeSystemArgs' native_type_system: (Updatable) The type system maps from and to a type.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param Mapping[str, Any] properties: (Updatable) All the properties for the data asset in a key-value map format.
        :param 'RegistryFolderDataAssetRegistryMetadataArgs' registry_metadata: (Updatable) Information about the object and its parent.
        :param str type: (Updatable) Specific DataAsset Type
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if asset_properties is not None:
            pulumi.set(__self__, "asset_properties", asset_properties)
        if default_connection is not None:
            pulumi.set(__self__, "default_connection", default_connection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_key is not None:
            pulumi.set(__self__, "external_key", external_key)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if native_type_system is not None:
            pulumi.set(__self__, "native_type_system", native_type_system)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if registry_metadata is not None:
            pulumi.set(__self__, "registry_metadata", registry_metadata)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="assetProperties")
    def asset_properties(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Additional properties for the data asset.
        """
        return pulumi.get(self, "asset_properties")

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> Optional['outputs.RegistryFolderDataAssetDefaultConnection']:
        """
        (Updatable) The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> Optional[str]:
        """
        (Updatable) The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.RegistryFolderDataAssetMetadata']:
        """
        (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        """
        (Updatable) The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="nativeTypeSystem")
    def native_type_system(self) -> Optional['outputs.RegistryFolderDataAssetNativeTypeSystem']:
        """
        (Updatable) The type system maps from and to a type.
        """
        return pulumi.get(self, "native_type_system")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> Optional['outputs.RegistryFolderDataAssetRegistryMetadata']:
        """
        (Updatable) Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryFolderDataAssetDefaultConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionProperties":
            suggest = "connection_properties"
        elif key == "isDefault":
            suggest = "is_default"
        elif key == "modelType":
            suggest = "model_type"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "primarySchema":
            suggest = "primary_schema"
        elif key == "registryMetadata":
            suggest = "registry_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetDefaultConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetDefaultConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetDefaultConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identifier: str,
                 key: str,
                 name: str,
                 connection_properties: Optional[Sequence['outputs.RegistryFolderDataAssetDefaultConnectionConnectionProperty']] = None,
                 description: Optional[str] = None,
                 is_default: Optional[bool] = None,
                 metadata: Optional['outputs.RegistryFolderDataAssetDefaultConnectionMetadata'] = None,
                 model_type: Optional[str] = None,
                 model_version: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 primary_schema: Optional['outputs.RegistryFolderDataAssetDefaultConnectionPrimarySchema'] = None,
                 properties: Optional[Mapping[str, Any]] = None,
                 registry_metadata: Optional['outputs.RegistryFolderDataAssetDefaultConnectionRegistryMetadata'] = None,
                 type: Optional[str] = None):
        """
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param Sequence['RegistryFolderDataAssetDefaultConnectionConnectionPropertyArgs'] connection_properties: (Updatable) The properties of the connection.
        :param str description: (Updatable) User-defined description of the folder.
        :param bool is_default: (Updatable) The default property of the connection.
        :param 'RegistryFolderDataAssetDefaultConnectionMetadataArgs' metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: (Updatable) The type of the folder.
        :param str model_version: (Updatable) The model version of an object.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param 'RegistryFolderDataAssetDefaultConnectionPrimarySchemaArgs' primary_schema: (Updatable) The schema object.
        :param Mapping[str, Any] properties: (Updatable) All the properties for the data asset in a key-value map format.
        :param 'RegistryFolderDataAssetDefaultConnectionRegistryMetadataArgs' registry_metadata: (Updatable) Information about the object and its parent.
        :param str type: (Updatable) Specific DataAsset Type
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if connection_properties is not None:
            pulumi.set(__self__, "connection_properties", connection_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if primary_schema is not None:
            pulumi.set(__self__, "primary_schema", primary_schema)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if registry_metadata is not None:
            pulumi.set(__self__, "registry_metadata", registry_metadata)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Optional[Sequence['outputs.RegistryFolderDataAssetDefaultConnectionConnectionProperty']]:
        """
        (Updatable) The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[bool]:
        """
        (Updatable) The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.RegistryFolderDataAssetDefaultConnectionMetadata']:
        """
        (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        """
        (Updatable) The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="primarySchema")
    def primary_schema(self) -> Optional['outputs.RegistryFolderDataAssetDefaultConnectionPrimarySchema']:
        """
        (Updatable) The schema object.
        """
        return pulumi.get(self, "primary_schema")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> Optional['outputs.RegistryFolderDataAssetDefaultConnectionRegistryMetadata']:
        """
        (Updatable) Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryFolderDataAssetDefaultConnectionConnectionProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str value: (Updatable) The value for the connection name property.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) The value for the connection name property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RegistryFolderDataAssetDefaultConnectionMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetDefaultConnectionMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetDefaultConnectionMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetDefaultConnectionMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional['outputs.RegistryFolderDataAssetDefaultConnectionMetadataAggregator'] = None,
                 aggregator_key: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param 'RegistryFolderDataAssetDefaultConnectionMetadataAggregatorArgs' aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by: (Updatable) The user that created the object.
        :param str created_by_name: (Updatable) The user that created the object.
        :param str identifier_path: (Updatable) The full path to identify the object.
        :param Mapping[str, Any] info_fields: (Updatable) Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by: (Updatable) The user that updated the object.
        :param str updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional['outputs.RegistryFolderDataAssetDefaultConnectionMetadataAggregator']:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        (Updatable) The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class RegistryFolderDataAssetDefaultConnectionMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) User-defined description of the folder.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: (Updatable) Specific DataAsset Type
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryFolderDataAssetDefaultConnectionPrimarySchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelType":
            suggest = "model_type"
        elif key == "defaultConnection":
            suggest = "default_connection"
        elif key == "externalKey":
            suggest = "external_key"
        elif key == "isHasContainers":
            suggest = "is_has_containers"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "parentRef":
            suggest = "parent_ref"
        elif key == "resourceName":
            suggest = "resource_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetDefaultConnectionPrimarySchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetDefaultConnectionPrimarySchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetDefaultConnectionPrimarySchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identifier: str,
                 key: str,
                 model_type: str,
                 name: str,
                 default_connection: Optional[str] = None,
                 description: Optional[str] = None,
                 external_key: Optional[str] = None,
                 is_has_containers: Optional[bool] = None,
                 metadata: Optional['outputs.RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadata'] = None,
                 model_version: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 parent_ref: Optional['outputs.RegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRef'] = None,
                 resource_name: Optional[str] = None):
        """
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: (Updatable) The type of the folder.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str default_connection: (Updatable) The default connection key.
        :param str description: (Updatable) User-defined description of the folder.
        :param str external_key: (Updatable) The external key of the object.
        :param bool is_has_containers: (Updatable) Specifies whether the schema has containers.
        :param 'RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataArgs' metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_version: (Updatable) The model version of an object.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param 'RegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRefArgs' parent_ref: (Updatable) A reference to the parent object.
        :param str resource_name: (Updatable) A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "name", name)
        if default_connection is not None:
            pulumi.set(__self__, "default_connection", default_connection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_key is not None:
            pulumi.set(__self__, "external_key", external_key)
        if is_has_containers is not None:
            pulumi.set(__self__, "is_has_containers", is_has_containers)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        (Updatable) The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> Optional[str]:
        """
        (Updatable) The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> Optional[str]:
        """
        (Updatable) The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter(name="isHasContainers")
    def is_has_containers(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the schema has containers.
        """
        return pulumi.get(self, "is_has_containers")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadata']:
        """
        (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional['outputs.RegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRef']:
        """
        (Updatable) A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        (Updatable) A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional['outputs.RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregator'] = None,
                 aggregator_key: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param 'RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorArgs' aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by: (Updatable) The user that created the object.
        :param str created_by_name: (Updatable) The user that created the object.
        :param str identifier_path: (Updatable) The full path to identify the object.
        :param Mapping[str, Any] info_fields: (Updatable) Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by: (Updatable) The user that updated the object.
        :param str updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional['outputs.RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregator']:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        (Updatable) The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class RegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) User-defined description of the folder.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: (Updatable) Specific DataAsset Type
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RegistryFolderDataAssetDefaultConnectionRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdByUserId":
            suggest = "created_by_user_id"
        elif key == "createdByUserName":
            suggest = "created_by_user_name"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedByUserId":
            suggest = "updated_by_user_id"
        elif key == "updatedByUserName":
            suggest = "updated_by_user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetDefaultConnectionRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetDefaultConnectionRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetDefaultConnectionRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 created_by_user_id: Optional[str] = None,
                 created_by_user_name: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by_user_id: Optional[str] = None,
                 updated_by_user_name: Optional[str] = None):
        """
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by_user_id: (Updatable) The ID of the user who created the object.
        :param str created_by_user_name: (Updatable) The name of the user who created the object.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by_user_id: (Updatable) The ID of the user who updated the object.
        :param str updated_by_user_name: (Updatable) The name of the user who updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by_user_id is not None:
            pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        if created_by_user_name is not None:
            pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by_user_id is not None:
            pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        if updated_by_user_name is not None:
            pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class RegistryFolderDataAssetMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator: Optional['outputs.RegistryFolderDataAssetMetadataAggregator'] = None,
                 aggregator_key: Optional[str] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param 'RegistryFolderDataAssetMetadataAggregatorArgs' aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by: (Updatable) The user that created the object.
        :param str created_by_name: (Updatable) The user that created the object.
        :param str identifier_path: (Updatable) The full path to identify the object.
        :param Mapping[str, Any] info_fields: (Updatable) Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by: (Updatable) The user that updated the object.
        :param str updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional['outputs.RegistryFolderDataAssetMetadataAggregator']:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        (Updatable) The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class RegistryFolderDataAssetMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) User-defined description of the folder.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: (Updatable) Specific DataAsset Type
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RegistryFolderDataAssetNativeTypeSystem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelType":
            suggest = "model_type"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "parentRef":
            suggest = "parent_ref"
        elif key == "typeMappingFrom":
            suggest = "type_mapping_from"
        elif key == "typeMappingTo":
            suggest = "type_mapping_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetNativeTypeSystem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetNativeTypeSystem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetNativeTypeSystem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 model_type: Optional[str] = None,
                 model_version: Optional[str] = None,
                 name: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 parent_ref: Optional['outputs.RegistryFolderDataAssetNativeTypeSystemParentRef'] = None,
                 type_mapping_from: Optional[Mapping[str, Any]] = None,
                 type_mapping_to: Optional[Mapping[str, Any]] = None,
                 types: Optional[Sequence['outputs.RegistryFolderDataAssetNativeTypeSystemType']] = None):
        """
        :param str description: (Updatable) User-defined description of the folder.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: (Updatable) The type of the folder.
        :param str model_version: (Updatable) The model version of an object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param 'RegistryFolderDataAssetNativeTypeSystemParentRefArgs' parent_ref: (Updatable) A reference to the parent object.
        :param Mapping[str, Any] type_mapping_from: (Updatable) The type system to map from.
        :param Mapping[str, Any] type_mapping_to: (Updatable) The type system to map to.
        :param Sequence['RegistryFolderDataAssetNativeTypeSystemTypeArgs'] types: (Updatable) An array of types.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if type_mapping_from is not None:
            pulumi.set(__self__, "type_mapping_from", type_mapping_from)
        if type_mapping_to is not None:
            pulumi.set(__self__, "type_mapping_to", type_mapping_to)
        if types is not None:
            pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        """
        (Updatable) The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional['outputs.RegistryFolderDataAssetNativeTypeSystemParentRef']:
        """
        (Updatable) A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="typeMappingFrom")
    def type_mapping_from(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) The type system to map from.
        """
        return pulumi.get(self, "type_mapping_from")

    @property
    @pulumi.getter(name="typeMappingTo")
    def type_mapping_to(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) The type system to map to.
        """
        return pulumi.get(self, "type_mapping_to")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence['outputs.RegistryFolderDataAssetNativeTypeSystemType']]:
        """
        (Updatable) An array of types.
        """
        return pulumi.get(self, "types")


@pulumi.output_type
class RegistryFolderDataAssetNativeTypeSystemParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RegistryFolderDataAssetNativeTypeSystemType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "modelType":
            suggest = "model_type"
        elif key == "configDefinition":
            suggest = "config_definition"
        elif key == "dtType":
            suggest = "dt_type"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "parentRef":
            suggest = "parent_ref"
        elif key == "typeSystemName":
            suggest = "type_system_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetNativeTypeSystemType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetNativeTypeSystemType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetNativeTypeSystemType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 model_type: str,
                 config_definition: Optional['outputs.RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinition'] = None,
                 description: Optional[str] = None,
                 dt_type: Optional[str] = None,
                 key: Optional[str] = None,
                 model_version: Optional[str] = None,
                 name: Optional[str] = None,
                 object_status: Optional[int] = None,
                 parent_ref: Optional['outputs.RegistryFolderDataAssetNativeTypeSystemTypeParentRef'] = None,
                 type_system_name: Optional[str] = None):
        """
        :param str model_type: (Updatable) The type of the folder.
        :param 'RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionArgs' config_definition: (Updatable) The configuration details of a configurable object. This contains one or more config param definitions.
        :param str description: (Updatable) User-defined description of the folder.
        :param str dt_type: (Updatable) The data type.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_version: (Updatable) The model version of an object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param 'RegistryFolderDataAssetNativeTypeSystemTypeParentRefArgs' parent_ref: (Updatable) A reference to the parent object.
        :param str type_system_name: (Updatable) The data type system name.
        """
        pulumi.set(__self__, "model_type", model_type)
        if config_definition is not None:
            pulumi.set(__self__, "config_definition", config_definition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dt_type is not None:
            pulumi.set(__self__, "dt_type", dt_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if type_system_name is not None:
            pulumi.set(__self__, "type_system_name", type_system_name)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        (Updatable) The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="configDefinition")
    def config_definition(self) -> Optional['outputs.RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinition']:
        """
        (Updatable) The configuration details of a configurable object. This contains one or more config param definitions.
        """
        return pulumi.get(self, "config_definition")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dtType")
    def dt_type(self) -> Optional[str]:
        """
        (Updatable) The data type.
        """
        return pulumi.get(self, "dt_type")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional['outputs.RegistryFolderDataAssetNativeTypeSystemTypeParentRef']:
        """
        (Updatable) A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="typeSystemName")
    def type_system_name(self) -> Optional[str]:
        """
        (Updatable) The data type system name.
        """
        return pulumi.get(self, "type_system_name")


@pulumi.output_type
class RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configParameterDefinitions":
            suggest = "config_parameter_definitions"
        elif key == "isContained":
            suggest = "is_contained"
        elif key == "modelType":
            suggest = "model_type"
        elif key == "modelVersion":
            suggest = "model_version"
        elif key == "objectStatus":
            suggest = "object_status"
        elif key == "parentRef":
            suggest = "parent_ref"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_parameter_definitions: Optional[Mapping[str, Any]] = None,
                 is_contained: Optional[bool] = None,
                 key: Optional[str] = None,
                 model_type: Optional[str] = None,
                 model_version: Optional[str] = None,
                 name: Optional[str] = None,
                 object_status: Optional[int] = None,
                 parent_ref: Optional['outputs.RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRef'] = None):
        """
        :param Mapping[str, Any] config_parameter_definitions: (Updatable) The parameter configuration details.
        :param bool is_contained: (Updatable) Specifies whether the configuration is contained.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: (Updatable) The type of the folder.
        :param str model_version: (Updatable) The model version of an object.
        :param str name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param 'RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRefArgs' parent_ref: (Updatable) A reference to the parent object.
        """
        if config_parameter_definitions is not None:
            pulumi.set(__self__, "config_parameter_definitions", config_parameter_definitions)
        if is_contained is not None:
            pulumi.set(__self__, "is_contained", is_contained)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParameterDefinitions")
    def config_parameter_definitions(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) The parameter configuration details.
        """
        return pulumi.get(self, "config_parameter_definitions")

    @property
    @pulumi.getter(name="isContained")
    def is_contained(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the configuration is contained.
        """
        return pulumi.get(self, "is_contained")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        """
        (Updatable) The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional['outputs.RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRef']:
        """
        (Updatable) A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")


@pulumi.output_type
class RegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RegistryFolderDataAssetNativeTypeSystemTypeParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class RegistryFolderDataAssetRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "createdByUserId":
            suggest = "created_by_user_id"
        elif key == "createdByUserName":
            suggest = "created_by_user_name"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedByUserId":
            suggest = "updated_by_user_id"
        elif key == "updatedByUserName":
            suggest = "updated_by_user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RegistryFolderDataAssetRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RegistryFolderDataAssetRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RegistryFolderDataAssetRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 created_by_user_id: Optional[str] = None,
                 created_by_user_name: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by_user_id: Optional[str] = None,
                 updated_by_user_name: Optional[str] = None):
        """
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param str created_by_user_id: (Updatable) The ID of the user who created the object.
        :param str created_by_user_name: (Updatable) The name of the user who created the object.
        :param bool is_favorite: (Updatable) Specifies whether the object is a favorite.
        :param str key: (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: (Updatable) The date and time that the object was created.
        :param str time_updated: (Updatable) The date and time that the object was updated.
        :param str updated_by_user_id: (Updatable) The ID of the user who updated the object.
        :param str updated_by_user_name: (Updatable) The name of the user who updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if created_by_user_id is not None:
            pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        if created_by_user_name is not None:
            pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by_user_id is not None:
            pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        if updated_by_user_name is not None:
            pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> Optional[str]:
        """
        (Updatable) The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> Optional[str]:
        """
        (Updatable) The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class RegistryFolderParentRef(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None):
        """
        :param str parent: (Updatable) Key of the parent object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegistriesRegistrySummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRegistriesRegistrySummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRegistriesRegistrySummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRegistriesRegistrySummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 state: str,
                 state_message: str,
                 time_created: str,
                 time_updated: str,
                 updated_by: str):
        """
        :param str compartment_id: The OCID of the compartment containing the resources you want to list.
        :param Mapping[str, Any] defined_tags: Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        :param str description: Registry description
        :param str display_name: Data Connectivity Management registry display name; registries can be renamed.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type, or scope. Exists only for cross-compatibility. Example: `{"bar-key": "value"}`
        :param str id: A unique identifier that is immutable on creation.
        :param str state: Lifecycle state of the resource.
        :param str state_message: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param str time_created: Time when the Data Connectivity Management registry was created. An RFC3339 formatted datetime string.
        :param str time_updated: Time when the Data Connectivity Management registry was updated. An RFC3339 formatted datetime string.
        :param str updated_by: Name of the user who updated the DCMS registry.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_message", state_message)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment containing the resources you want to list.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Registry description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Data Connectivity Management registry display name; registries can be renamed.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type, or scope. Exists only for cross-compatibility. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A unique identifier that is immutable on creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Lifecycle state of the resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Time when the Data Connectivity Management registry was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Time when the Data Connectivity Management registry was updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        Name of the user who updated the DCMS registry.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class GetRegistryConnectionConnectionPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str value: The value for the connection name property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the connection name property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRegistryConnectionMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetRegistryConnectionMetadataAggregatorResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param Sequence['GetRegistryConnectionMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "aggregators", aggregators)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetRegistryConnectionMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryConnectionMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: The identifier of the aggregator.
        :param str key: The identifying key for the object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: Specific Connection Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific Connection Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryConnectionPrimarySchemaResult(dict):
    def __init__(__self__, *,
                 default_connection: str,
                 description: str,
                 external_key: str,
                 identifier: str,
                 is_has_containers: bool,
                 key: str,
                 metadatas: Sequence['outputs.GetRegistryConnectionPrimarySchemaMetadataResult'],
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_reves: Sequence['outputs.GetRegistryConnectionPrimarySchemaParentRefResult'],
                 resource_name: str):
        """
        :param str default_connection: The default connection key.
        :param str description: The description of the aggregator.
        :param str external_key: The external key of the object.
        :param str identifier: The identifier of the aggregator.
        :param bool is_has_containers: Specifies whether the schema has containers.
        :param str key: The identifying key for the object.
        :param Sequence['GetRegistryConnectionPrimarySchemaMetadataArgs'] metadatas: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The object type.
        :param str model_version: The model version of the object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Sequence['GetRegistryConnectionPrimarySchemaParentRefArgs'] parent_reves: A reference to the parent object.
        :param str resource_name: A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        pulumi.set(__self__, "default_connection", default_connection)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_key", external_key)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_has_containers", is_has_containers)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_reves", parent_reves)
        pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> str:
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isHasContainers")
    def is_has_containers(self) -> bool:
        """
        Specifies whether the schema has containers.
        """
        return pulumi.get(self, "is_has_containers")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetRegistryConnectionPrimarySchemaMetadataResult']:
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The object type.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of the object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryConnectionPrimarySchemaParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetRegistryConnectionPrimarySchemaMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetRegistryConnectionPrimarySchemaMetadataAggregatorResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param Sequence['GetRegistryConnectionPrimarySchemaMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "aggregators", aggregators)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetRegistryConnectionPrimarySchemaMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryConnectionPrimarySchemaMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: The identifier of the aggregator.
        :param str key: The identifying key for the object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: Specific Connection Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific Connection Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryConnectionPrimarySchemaParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryConnectionRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: The identifying key for the object.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRegistryConnectionsConnectionSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRegistryConnectionsConnectionSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 connection_properties: Sequence['outputs.GetRegistryConnectionsConnectionSummaryCollectionItemConnectionPropertyResult'],
                 description: str,
                 identifier: str,
                 is_default: bool,
                 key: str,
                 metadata: 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemMetadataResult',
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 primary_schema: 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaResult',
                 properties: Mapping[str, Any],
                 registry_id: str,
                 registry_metadata: 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemRegistryMetadataResult',
                 type: str):
        """
        :param Sequence['GetRegistryConnectionsConnectionSummaryCollectionItemConnectionPropertyArgs'] connection_properties: The properties of the connection.
        :param str description: The description of the aggregator.
        :param str identifier: The identifier of the aggregator.
        :param bool is_default: The default property of the connection.
        :param str key: The identifying key for the object.
        :param 'GetRegistryConnectionsConnectionSummaryCollectionItemMetadataArgs' metadata: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The object type.
        :param str model_version: The model version of the object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param 'GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaArgs' primary_schema: The schema object.
        :param Mapping[str, Any] properties: All the properties of the connection in a key-value map format.
        :param str registry_id: The registry OCID.
        :param 'GetRegistryConnectionsConnectionSummaryCollectionItemRegistryMetadataArgs' registry_metadata: Information about the object and its parent.
        :param str type: Type of the object to filter the results with.
        """
        pulumi.set(__self__, "connection_properties", connection_properties)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "primary_schema", primary_schema)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_id", registry_id)
        pulumi.set(__self__, "registry_metadata", registry_metadata)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Sequence['outputs.GetRegistryConnectionsConnectionSummaryCollectionItemConnectionPropertyResult']:
        """
        The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemMetadataResult':
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The object type.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of the object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="primarySchema")
    def primary_schema(self) -> 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaResult':
        """
        The schema object.
        """
        return pulumi.get(self, "primary_schema")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties of the connection in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        """
        The registry OCID.
        """
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemRegistryMetadataResult':
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the object to filter the results with.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionItemConnectionPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Used to filter by the name of the object.
        :param str value: The value for the connection name property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the connection name property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator: 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemMetadataAggregatorResult',
                 aggregator_key: str,
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param 'GetRegistryConnectionsConnectionSummaryCollectionItemMetadataAggregatorArgs' aggregator: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemMetadataAggregatorResult':
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionItemMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: The identifier of the aggregator.
        :param str key: The identifying key for the object.
        :param str name: Used to filter by the name of the object.
        :param str type: Type of the object to filter the results with.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the object to filter the results with.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaResult(dict):
    def __init__(__self__, *,
                 default_connection: str,
                 description: str,
                 external_key: str,
                 identifier: str,
                 is_has_containers: bool,
                 key: str,
                 metadata: 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataResult',
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_ref: 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRefResult',
                 resource_name: str):
        """
        :param str default_connection: The default connection key.
        :param str description: The description of the aggregator.
        :param str external_key: The external key of the object.
        :param str identifier: The identifier of the aggregator.
        :param bool is_has_containers: Specifies whether the schema has containers.
        :param str key: The identifying key for the object.
        :param 'GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataArgs' metadata: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The object type.
        :param str model_version: The model version of the object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param 'GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRefArgs' parent_ref: A reference to the parent object.
        :param str resource_name: A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        pulumi.set(__self__, "default_connection", default_connection)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_key", external_key)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_has_containers", is_has_containers)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_ref", parent_ref)
        pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> str:
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isHasContainers")
    def is_has_containers(self) -> bool:
        """
        Specifies whether the schema has containers.
        """
        return pulumi.get(self, "is_has_containers")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataResult':
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The object type.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of the object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator: 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataAggregatorResult',
                 aggregator_key: str,
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param 'GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataAggregatorArgs' aggregator: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> 'outputs.GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataAggregatorResult':
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: The identifier of the aggregator.
        :param str key: The identifying key for the object.
        :param str name: Used to filter by the name of the object.
        :param str type: Type of the object to filter the results with.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the object to filter the results with.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionItemPrimarySchemaParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryConnectionsConnectionSummaryCollectionItemRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: The identifying key for the object.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegistryDataAssetDefaultConnectionResult(dict):
    def __init__(__self__, *,
                 connection_properties: Sequence['outputs.GetRegistryDataAssetDefaultConnectionConnectionPropertyResult'],
                 description: str,
                 identifier: str,
                 is_default: bool,
                 key: str,
                 metadatas: Sequence['outputs.GetRegistryDataAssetDefaultConnectionMetadataResult'],
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 primary_schemas: Sequence['outputs.GetRegistryDataAssetDefaultConnectionPrimarySchemaResult'],
                 properties: Mapping[str, Any],
                 registry_metadatas: Sequence['outputs.GetRegistryDataAssetDefaultConnectionRegistryMetadataResult'],
                 type: str):
        """
        :param Sequence['GetRegistryDataAssetDefaultConnectionConnectionPropertyArgs'] connection_properties: The properties of the connection.
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param bool is_default: The default property of the connection.
        :param str key: The identifying key for the object.
        :param Sequence['GetRegistryDataAssetDefaultConnectionMetadataArgs'] metadatas: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Sequence['GetRegistryDataAssetDefaultConnectionPrimarySchemaArgs'] primary_schemas: The schema object.
        :param Mapping[str, Any] properties: All the properties for the data asset in a key-value map format.
        :param Sequence['GetRegistryDataAssetDefaultConnectionRegistryMetadataArgs'] registry_metadatas: Information about the object and its parent.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "connection_properties", connection_properties)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "primary_schemas", primary_schemas)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_metadatas", registry_metadatas)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Sequence['outputs.GetRegistryDataAssetDefaultConnectionConnectionPropertyResult']:
        """
        The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetRegistryDataAssetDefaultConnectionMetadataResult']:
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="primarySchemas")
    def primary_schemas(self) -> Sequence['outputs.GetRegistryDataAssetDefaultConnectionPrimarySchemaResult']:
        """
        The schema object.
        """
        return pulumi.get(self, "primary_schemas")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryMetadatas")
    def registry_metadatas(self) -> Sequence['outputs.GetRegistryDataAssetDefaultConnectionRegistryMetadataResult']:
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadatas")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryDataAssetDefaultConnectionConnectionPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str value: The value for the connection name property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the connection name property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRegistryDataAssetDefaultConnectionMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetRegistryDataAssetDefaultConnectionMetadataAggregatorResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param Sequence['GetRegistryDataAssetDefaultConnectionMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "aggregators", aggregators)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetRegistryDataAssetDefaultConnectionMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryDataAssetDefaultConnectionMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryDataAssetDefaultConnectionPrimarySchemaResult(dict):
    def __init__(__self__, *,
                 default_connection: str,
                 description: str,
                 external_key: str,
                 identifier: str,
                 is_has_containers: bool,
                 key: str,
                 metadatas: Sequence['outputs.GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataResult'],
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_reves: Sequence['outputs.GetRegistryDataAssetDefaultConnectionPrimarySchemaParentRefResult'],
                 resource_name: str):
        """
        :param str default_connection: The default connection key.
        :param str description: A user-defined description for the object.
        :param str external_key: The external key of the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param bool is_has_containers: Specifies whether the schema has containers.
        :param str key: The identifying key for the object.
        :param Sequence['GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataArgs'] metadatas: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Sequence['GetRegistryDataAssetDefaultConnectionPrimarySchemaParentRefArgs'] parent_reves: A reference to the parent object.
        :param str resource_name: A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        pulumi.set(__self__, "default_connection", default_connection)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_key", external_key)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_has_containers", is_has_containers)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_reves", parent_reves)
        pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> str:
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isHasContainers")
    def is_has_containers(self) -> bool:
        """
        Specifies whether the schema has containers.
        """
        return pulumi.get(self, "is_has_containers")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataResult']:
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryDataAssetDefaultConnectionPrimarySchemaParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param Sequence['GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "aggregators", aggregators)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryDataAssetDefaultConnectionPrimarySchemaParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryDataAssetDefaultConnectionRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: The identifying key for the object.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryDataAssetMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetRegistryDataAssetMetadataAggregatorResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param Sequence['GetRegistryDataAssetMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "aggregators", aggregators)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetRegistryDataAssetMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryDataAssetMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryDataAssetNativeTypeSystemResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_reves: Sequence['outputs.GetRegistryDataAssetNativeTypeSystemParentRefResult'],
                 type_mapping_from: Mapping[str, Any],
                 type_mapping_to: Mapping[str, Any],
                 types: Sequence['outputs.GetRegistryDataAssetNativeTypeSystemTypeResult']):
        """
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Sequence['GetRegistryDataAssetNativeTypeSystemParentRefArgs'] parent_reves: A reference to the parent object.
        :param Mapping[str, Any] type_mapping_from: The type system to map from.
        :param Mapping[str, Any] type_mapping_to: The type system to map to.
        :param Sequence['GetRegistryDataAssetNativeTypeSystemTypeArgs'] types: An array of types.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_reves", parent_reves)
        pulumi.set(__self__, "type_mapping_from", type_mapping_from)
        pulumi.set(__self__, "type_mapping_to", type_mapping_to)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryDataAssetNativeTypeSystemParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="typeMappingFrom")
    def type_mapping_from(self) -> Mapping[str, Any]:
        """
        The type system to map from.
        """
        return pulumi.get(self, "type_mapping_from")

    @property
    @pulumi.getter(name="typeMappingTo")
    def type_mapping_to(self) -> Mapping[str, Any]:
        """
        The type system to map to.
        """
        return pulumi.get(self, "type_mapping_to")

    @property
    @pulumi.getter
    def types(self) -> Sequence['outputs.GetRegistryDataAssetNativeTypeSystemTypeResult']:
        """
        An array of types.
        """
        return pulumi.get(self, "types")


@pulumi.output_type
class GetRegistryDataAssetNativeTypeSystemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryDataAssetNativeTypeSystemTypeResult(dict):
    def __init__(__self__, *,
                 config_definitions: Sequence['outputs.GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionResult'],
                 description: str,
                 dt_type: str,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 parent_reves: Sequence['outputs.GetRegistryDataAssetNativeTypeSystemTypeParentRefResult'],
                 type_system_name: str):
        """
        :param Sequence['GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionArgs'] config_definitions: The configuration details of a configurable object. This contains one or more config param definitions.
        :param str description: A user-defined description for the object.
        :param str dt_type: The data type.
        :param str key: The identifying key for the object.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param Sequence['GetRegistryDataAssetNativeTypeSystemTypeParentRefArgs'] parent_reves: A reference to the parent object.
        :param str type_system_name: The data type system name.
        """
        pulumi.set(__self__, "config_definitions", config_definitions)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dt_type", dt_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "parent_reves", parent_reves)
        pulumi.set(__self__, "type_system_name", type_system_name)

    @property
    @pulumi.getter(name="configDefinitions")
    def config_definitions(self) -> Sequence['outputs.GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionResult']:
        """
        The configuration details of a configurable object. This contains one or more config param definitions.
        """
        return pulumi.get(self, "config_definitions")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dtType")
    def dt_type(self) -> str:
        """
        The data type.
        """
        return pulumi.get(self, "dt_type")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryDataAssetNativeTypeSystemTypeParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="typeSystemName")
    def type_system_name(self) -> str:
        """
        The data type system name.
        """
        return pulumi.get(self, "type_system_name")


@pulumi.output_type
class GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionResult(dict):
    def __init__(__self__, *,
                 config_parameter_definitions: Mapping[str, Any],
                 is_contained: bool,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 parent_reves: Sequence['outputs.GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult']):
        """
        :param Mapping[str, Any] config_parameter_definitions: The parameter configuration details.
        :param bool is_contained: Specifies whether the configuration is contained.
        :param str key: The identifying key for the object.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param Sequence['GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRefArgs'] parent_reves: A reference to the parent object.
        """
        pulumi.set(__self__, "config_parameter_definitions", config_parameter_definitions)
        pulumi.set(__self__, "is_contained", is_contained)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "parent_reves", parent_reves)

    @property
    @pulumi.getter(name="configParameterDefinitions")
    def config_parameter_definitions(self) -> Mapping[str, Any]:
        """
        The parameter configuration details.
        """
        return pulumi.get(self, "config_parameter_definitions")

    @property
    @pulumi.getter(name="isContained")
    def is_contained(self) -> bool:
        """
        Specifies whether the configuration is contained.
        """
        return pulumi.get(self, "is_contained")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")


@pulumi.output_type
class GetRegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryDataAssetNativeTypeSystemTypeParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryDataAssetRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: The identifying key for the object.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 asset_properties: Mapping[str, Any],
                 default_connection: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionResult',
                 description: str,
                 end_points: Sequence[str],
                 external_key: str,
                 identifier: str,
                 key: str,
                 metadata: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataResult',
                 model_type: str,
                 model_version: str,
                 name: str,
                 native_type_system: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemResult',
                 object_status: int,
                 object_version: int,
                 properties: Mapping[str, Any],
                 registry_id: str,
                 registry_metadata: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadataResult',
                 type: str):
        """
        :param Mapping[str, Any] asset_properties: Additional properties for the data asset.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionArgs' default_connection: The default connection key.
        :param str description: A user-defined description for the object.
        :param Sequence[str] end_points: The list of endpoints with which this data asset is associated.
        :param str external_key: The external key of the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataArgs' metadata: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemArgs' native_type_system: The type system maps from and to a type.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Mapping[str, Any] properties: All the properties for the data asset in a key-value map format.
        :param str registry_id: The registry OCID.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadataArgs' registry_metadata: Information about the object and its parent.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "asset_properties", asset_properties)
        pulumi.set(__self__, "default_connection", default_connection)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_points", end_points)
        pulumi.set(__self__, "external_key", external_key)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "native_type_system", native_type_system)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_id", registry_id)
        pulumi.set(__self__, "registry_metadata", registry_metadata)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assetProperties")
    def asset_properties(self) -> Mapping[str, Any]:
        """
        Additional properties for the data asset.
        """
        return pulumi.get(self, "asset_properties")

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionResult':
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endPoints")
    def end_points(self) -> Sequence[str]:
        """
        The list of endpoints with which this data asset is associated.
        """
        return pulumi.get(self, "end_points")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataResult':
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeTypeSystem")
    def native_type_system(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemResult':
        """
        The type system maps from and to a type.
        """
        return pulumi.get(self, "native_type_system")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        """
        The registry OCID.
        """
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadataResult':
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionResult(dict):
    def __init__(__self__, *,
                 connection_properties: Sequence['outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionConnectionPropertyResult'],
                 description: str,
                 identifier: str,
                 is_default: bool,
                 key: str,
                 metadata: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataResult',
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 primary_schema: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaResult',
                 properties: Mapping[str, Any],
                 registry_metadata: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionRegistryMetadataResult',
                 type: str):
        """
        :param Sequence['GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionConnectionPropertyArgs'] connection_properties: The properties of the connection.
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param bool is_default: The default property of the connection.
        :param str key: The identifying key for the object.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataArgs' metadata: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaArgs' primary_schema: The schema object.
        :param Mapping[str, Any] properties: All the properties for the data asset in a key-value map format.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionRegistryMetadataArgs' registry_metadata: Information about the object and its parent.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "connection_properties", connection_properties)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "primary_schema", primary_schema)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_metadata", registry_metadata)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Sequence['outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionConnectionPropertyResult']:
        """
        The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataResult':
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="primarySchema")
    def primary_schema(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaResult':
        """
        The schema object.
        """
        return pulumi.get(self, "primary_schema")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionRegistryMetadataResult':
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionConnectionPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Used to filter by the name of the object.
        :param str value: The value for the connection name property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the connection name property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataAggregatorResult',
                 aggregator_key: str,
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataAggregatorArgs' aggregator: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataAggregatorResult':
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str name: Used to filter by the name of the object.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaResult(dict):
    def __init__(__self__, *,
                 default_connection: str,
                 description: str,
                 external_key: str,
                 identifier: str,
                 is_has_containers: bool,
                 key: str,
                 metadata: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataResult',
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_ref: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaParentRefResult',
                 resource_name: str):
        """
        :param str default_connection: The default connection key.
        :param str description: A user-defined description for the object.
        :param str external_key: The external key of the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param bool is_has_containers: Specifies whether the schema has containers.
        :param str key: The identifying key for the object.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataArgs' metadata: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaParentRefArgs' parent_ref: A reference to the parent object.
        :param str resource_name: A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        pulumi.set(__self__, "default_connection", default_connection)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_key", external_key)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_has_containers", is_has_containers)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_ref", parent_ref)
        pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> str:
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isHasContainers")
    def is_has_containers(self) -> bool:
        """
        Specifies whether the schema has containers.
        """
        return pulumi.get(self, "is_has_containers")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataResult':
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataAggregatorResult',
                 aggregator_key: str,
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataAggregatorArgs' aggregator: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataAggregatorResult':
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str name: Used to filter by the name of the object.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionPrimarySchemaParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemDefaultConnectionRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: The identifying key for the object.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataAggregatorResult',
                 aggregator_key: str,
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataAggregatorArgs' aggregator: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataAggregatorResult':
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str name: Used to filter by the name of the object.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_ref: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRefResult',
                 type_mapping_from: Mapping[str, Any],
                 type_mapping_to: Mapping[str, Any],
                 types: Sequence['outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeResult']):
        """
        :param str description: A user-defined description for the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRefArgs' parent_ref: A reference to the parent object.
        :param Mapping[str, Any] type_mapping_from: The type system to map from.
        :param Mapping[str, Any] type_mapping_to: The type system to map to.
        :param Sequence['GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeArgs'] types: An array of types.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_ref", parent_ref)
        pulumi.set(__self__, "type_mapping_from", type_mapping_from)
        pulumi.set(__self__, "type_mapping_to", type_mapping_to)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="typeMappingFrom")
    def type_mapping_from(self) -> Mapping[str, Any]:
        """
        The type system to map from.
        """
        return pulumi.get(self, "type_mapping_from")

    @property
    @pulumi.getter(name="typeMappingTo")
    def type_mapping_to(self) -> Mapping[str, Any]:
        """
        The type system to map to.
        """
        return pulumi.get(self, "type_mapping_to")

    @property
    @pulumi.getter
    def types(self) -> Sequence['outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeResult']:
        """
        An array of types.
        """
        return pulumi.get(self, "types")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeResult(dict):
    def __init__(__self__, *,
                 config_definition: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionResult',
                 description: str,
                 dt_type: str,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 parent_ref: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeParentRefResult',
                 type_system_name: str):
        """
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionArgs' config_definition: The configuration details of a configurable object. This contains one or more config param definitions.
        :param str description: A user-defined description for the object.
        :param str dt_type: The data type.
        :param str key: The identifying key for the object.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeParentRefArgs' parent_ref: A reference to the parent object.
        :param str type_system_name: The data type system name.
        """
        pulumi.set(__self__, "config_definition", config_definition)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dt_type", dt_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "parent_ref", parent_ref)
        pulumi.set(__self__, "type_system_name", type_system_name)

    @property
    @pulumi.getter(name="configDefinition")
    def config_definition(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionResult':
        """
        The configuration details of a configurable object. This contains one or more config param definitions.
        """
        return pulumi.get(self, "config_definition")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user-defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dtType")
    def dt_type(self) -> str:
        """
        The data type.
        """
        return pulumi.get(self, "dt_type")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="typeSystemName")
    def type_system_name(self) -> str:
        """
        The data type system name.
        """
        return pulumi.get(self, "type_system_name")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionResult(dict):
    def __init__(__self__, *,
                 config_parameter_definitions: Mapping[str, Any],
                 is_contained: bool,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 parent_ref: 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionParentRefResult'):
        """
        :param Mapping[str, Any] config_parameter_definitions: The parameter configuration details.
        :param bool is_contained: Specifies whether the configuration is contained.
        :param str key: The identifying key for the object.
        :param str model_type: The property which differentiates the subtypes.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param 'GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionParentRefArgs' parent_ref: A reference to the parent object.
        """
        pulumi.set(__self__, "config_parameter_definitions", config_parameter_definitions)
        pulumi.set(__self__, "is_contained", is_contained)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParameterDefinitions")
    def config_parameter_definitions(self) -> Mapping[str, Any]:
        """
        The parameter configuration details.
        """
        return pulumi.get(self, "config_parameter_definitions")

    @property
    @pulumi.getter(name="isContained")
    def is_contained(self) -> bool:
        """
        Specifies whether the configuration is contained.
        """
        return pulumi.get(self, "is_contained")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The property which differentiates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeConfigDefinitionParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemNativeTypeSystemTypeParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryDataAssetsDataAssetSummaryCollectionItemRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: The identifying key for the object.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryDataAssetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegistryFolderDataAssetResult(dict):
    def __init__(__self__, *,
                 asset_properties: Mapping[str, Any],
                 default_connections: Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionResult'],
                 description: str,
                 external_key: str,
                 identifier: str,
                 key: str,
                 metadatas: Sequence['outputs.GetRegistryFolderDataAssetMetadataResult'],
                 model_type: str,
                 model_version: str,
                 name: str,
                 native_type_systems: Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemResult'],
                 object_status: int,
                 object_version: int,
                 properties: Mapping[str, Any],
                 registry_metadatas: Sequence['outputs.GetRegistryFolderDataAssetRegistryMetadataResult'],
                 type: str):
        """
        :param Mapping[str, Any] asset_properties: Additional properties for the data asset.
        :param Sequence['GetRegistryFolderDataAssetDefaultConnectionArgs'] default_connections: The default connection key.
        :param str description: User-defined description of the folder.
        :param str external_key: The external key of the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param Sequence['GetRegistryFolderDataAssetMetadataArgs'] metadatas: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param Sequence['GetRegistryFolderDataAssetNativeTypeSystemArgs'] native_type_systems: The type system maps from and to a type.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Mapping[str, Any] properties: All the properties for the data asset in a key-value map format.
        :param Sequence['GetRegistryFolderDataAssetRegistryMetadataArgs'] registry_metadatas: Information about the object and its parent.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "asset_properties", asset_properties)
        pulumi.set(__self__, "default_connections", default_connections)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_key", external_key)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "native_type_systems", native_type_systems)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_metadatas", registry_metadatas)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assetProperties")
    def asset_properties(self) -> Mapping[str, Any]:
        """
        Additional properties for the data asset.
        """
        return pulumi.get(self, "asset_properties")

    @property
    @pulumi.getter(name="defaultConnections")
    def default_connections(self) -> Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionResult']:
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connections")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetRegistryFolderDataAssetMetadataResult']:
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeTypeSystems")
    def native_type_systems(self) -> Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemResult']:
        """
        The type system maps from and to a type.
        """
        return pulumi.get(self, "native_type_systems")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryMetadatas")
    def registry_metadatas(self) -> Sequence['outputs.GetRegistryFolderDataAssetRegistryMetadataResult']:
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadatas")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFolderDataAssetDefaultConnectionResult(dict):
    def __init__(__self__, *,
                 connection_properties: Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionConnectionPropertyResult'],
                 description: str,
                 identifier: str,
                 is_default: bool,
                 key: str,
                 metadatas: Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionMetadataResult'],
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 primary_schemas: Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaResult'],
                 properties: Mapping[str, Any],
                 registry_metadatas: Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionRegistryMetadataResult'],
                 type: str):
        """
        :param Sequence['GetRegistryFolderDataAssetDefaultConnectionConnectionPropertyArgs'] connection_properties: The properties of the connection.
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param bool is_default: The default property of the connection.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param Sequence['GetRegistryFolderDataAssetDefaultConnectionMetadataArgs'] metadatas: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Sequence['GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaArgs'] primary_schemas: The schema object.
        :param Mapping[str, Any] properties: All the properties for the data asset in a key-value map format.
        :param Sequence['GetRegistryFolderDataAssetDefaultConnectionRegistryMetadataArgs'] registry_metadatas: Information about the object and its parent.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "connection_properties", connection_properties)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "primary_schemas", primary_schemas)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_metadatas", registry_metadatas)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionConnectionPropertyResult']:
        """
        The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionMetadataResult']:
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="primarySchemas")
    def primary_schemas(self) -> Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaResult']:
        """
        The schema object.
        """
        return pulumi.get(self, "primary_schemas")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryMetadatas")
    def registry_metadatas(self) -> Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionRegistryMetadataResult']:
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadatas")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFolderDataAssetDefaultConnectionConnectionPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str value: The value for the connection name property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the connection name property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRegistryFolderDataAssetDefaultConnectionMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionMetadataAggregatorResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param Sequence['GetRegistryFolderDataAssetDefaultConnectionMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "aggregators", aggregators)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryFolderDataAssetDefaultConnectionMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaResult(dict):
    def __init__(__self__, *,
                 default_connection: str,
                 description: str,
                 external_key: str,
                 identifier: str,
                 is_has_containers: bool,
                 key: str,
                 metadatas: Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataResult'],
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_reves: Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRefResult'],
                 resource_name: str):
        """
        :param str default_connection: The default connection key.
        :param str description: User-defined description of the folder.
        :param str external_key: The external key of the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param bool is_has_containers: Specifies whether the schema has containers.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param Sequence['GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataArgs'] metadatas: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Sequence['GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRefArgs'] parent_reves: A reference to the parent object.
        :param str resource_name: A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        pulumi.set(__self__, "default_connection", default_connection)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_key", external_key)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_has_containers", is_has_containers)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadatas", metadatas)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_reves", parent_reves)
        pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> str:
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isHasContainers")
    def is_has_containers(self) -> bool:
        """
        Specifies whether the schema has containers.
        """
        return pulumi.get(self, "is_has_containers")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataResult']:
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param Sequence['GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "aggregators", aggregators)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFolderDataAssetDefaultConnectionPrimarySchemaParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryFolderDataAssetDefaultConnectionRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryFolderDataAssetMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetRegistryFolderDataAssetMetadataAggregatorResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param Sequence['GetRegistryFolderDataAssetMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "aggregators", aggregators)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetRegistryFolderDataAssetMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryFolderDataAssetMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: Specific DataAsset Type
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific DataAsset Type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFolderDataAssetNativeTypeSystemResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_reves: Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemParentRefResult'],
                 type_mapping_from: Mapping[str, Any],
                 type_mapping_to: Mapping[str, Any],
                 types: Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemTypeResult']):
        """
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Sequence['GetRegistryFolderDataAssetNativeTypeSystemParentRefArgs'] parent_reves: A reference to the parent object.
        :param Mapping[str, Any] type_mapping_from: The type system to map from.
        :param Mapping[str, Any] type_mapping_to: The type system to map to.
        :param Sequence['GetRegistryFolderDataAssetNativeTypeSystemTypeArgs'] types: An array of types.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_reves", parent_reves)
        pulumi.set(__self__, "type_mapping_from", type_mapping_from)
        pulumi.set(__self__, "type_mapping_to", type_mapping_to)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="typeMappingFrom")
    def type_mapping_from(self) -> Mapping[str, Any]:
        """
        The type system to map from.
        """
        return pulumi.get(self, "type_mapping_from")

    @property
    @pulumi.getter(name="typeMappingTo")
    def type_mapping_to(self) -> Mapping[str, Any]:
        """
        The type system to map to.
        """
        return pulumi.get(self, "type_mapping_to")

    @property
    @pulumi.getter
    def types(self) -> Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemTypeResult']:
        """
        An array of types.
        """
        return pulumi.get(self, "types")


@pulumi.output_type
class GetRegistryFolderDataAssetNativeTypeSystemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryFolderDataAssetNativeTypeSystemTypeResult(dict):
    def __init__(__self__, *,
                 config_definitions: Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionResult'],
                 description: str,
                 dt_type: str,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 parent_reves: Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemTypeParentRefResult'],
                 type_system_name: str):
        """
        :param Sequence['GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionArgs'] config_definitions: The configuration details of a configurable object. This contains one or more config param definitions.
        :param str description: User-defined description of the folder.
        :param str dt_type: The data type.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param Sequence['GetRegistryFolderDataAssetNativeTypeSystemTypeParentRefArgs'] parent_reves: A reference to the parent object.
        :param str type_system_name: The data type system name.
        """
        pulumi.set(__self__, "config_definitions", config_definitions)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dt_type", dt_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "parent_reves", parent_reves)
        pulumi.set(__self__, "type_system_name", type_system_name)

    @property
    @pulumi.getter(name="configDefinitions")
    def config_definitions(self) -> Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionResult']:
        """
        The configuration details of a configurable object. This contains one or more config param definitions.
        """
        return pulumi.get(self, "config_definitions")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dtType")
    def dt_type(self) -> str:
        """
        The data type.
        """
        return pulumi.get(self, "dt_type")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemTypeParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="typeSystemName")
    def type_system_name(self) -> str:
        """
        The data type system name.
        """
        return pulumi.get(self, "type_system_name")


@pulumi.output_type
class GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionResult(dict):
    def __init__(__self__, *,
                 config_parameter_definitions: Mapping[str, Any],
                 is_contained: bool,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 parent_reves: Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult']):
        """
        :param Mapping[str, Any] config_parameter_definitions: The parameter configuration details.
        :param bool is_contained: Specifies whether the configuration is contained.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param Sequence['GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRefArgs'] parent_reves: A reference to the parent object.
        """
        pulumi.set(__self__, "config_parameter_definitions", config_parameter_definitions)
        pulumi.set(__self__, "is_contained", is_contained)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "parent_reves", parent_reves)

    @property
    @pulumi.getter(name="configParameterDefinitions")
    def config_parameter_definitions(self) -> Mapping[str, Any]:
        """
        The parameter configuration details.
        """
        return pulumi.get(self, "config_parameter_definitions")

    @property
    @pulumi.getter(name="isContained")
    def is_contained(self) -> bool:
        """
        Specifies whether the configuration is contained.
        """
        return pulumi.get(self, "is_contained")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult']:
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_reves")


@pulumi.output_type
class GetRegistryFolderDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryFolderDataAssetNativeTypeSystemTypeParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryFolderDataAssetRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryFolderParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryFoldersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRegistryFoldersFolderSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRegistryFoldersFolderSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 data_assets: Sequence['outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetResult'],
                 description: str,
                 identifier: str,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_ref: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemParentRefResult',
                 registry_id: str):
        """
        :param Sequence['GetRegistryFoldersFolderSummaryCollectionItemDataAssetArgs'] data_assets: The list of data assets that belong to the folder.
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemParentRefArgs' parent_ref: A reference to the parent object.
        :param str registry_id: The registry OCID.
        """
        pulumi.set(__self__, "data_assets", data_assets)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_ref", parent_ref)
        pulumi.set(__self__, "registry_id", registry_id)

    @property
    @pulumi.getter(name="dataAssets")
    def data_assets(self) -> Sequence['outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetResult']:
        """
        The list of data assets that belong to the folder.
        """
        return pulumi.get(self, "data_assets")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        """
        The registry OCID.
        """
        return pulumi.get(self, "registry_id")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetResult(dict):
    def __init__(__self__, *,
                 asset_properties: Mapping[str, Any],
                 default_connection: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionResult',
                 description: str,
                 external_key: str,
                 identifier: str,
                 key: str,
                 metadata: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataResult',
                 model_type: str,
                 model_version: str,
                 name: str,
                 native_type_system: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemResult',
                 object_status: int,
                 object_version: int,
                 properties: Mapping[str, Any],
                 registry_metadata: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetRegistryMetadataResult',
                 type: str):
        """
        :param Mapping[str, Any] asset_properties: Additional properties for the data asset.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionArgs' default_connection: The default connection key.
        :param str description: User-defined description of the folder.
        :param str external_key: The external key of the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataArgs' metadata: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemArgs' native_type_system: The type system maps from and to a type.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Mapping[str, Any] properties: All the properties for the data asset in a key-value map format.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetRegistryMetadataArgs' registry_metadata: Information about the object and its parent.
        :param str type: Type of the object to filter the results with.
        """
        pulumi.set(__self__, "asset_properties", asset_properties)
        pulumi.set(__self__, "default_connection", default_connection)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_key", external_key)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "native_type_system", native_type_system)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_metadata", registry_metadata)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assetProperties")
    def asset_properties(self) -> Mapping[str, Any]:
        """
        Additional properties for the data asset.
        """
        return pulumi.get(self, "asset_properties")

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionResult':
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataResult':
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeTypeSystem")
    def native_type_system(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemResult':
        """
        The type system maps from and to a type.
        """
        return pulumi.get(self, "native_type_system")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetRegistryMetadataResult':
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the object to filter the results with.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionResult(dict):
    def __init__(__self__, *,
                 connection_properties: Sequence['outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionConnectionPropertyResult'],
                 description: str,
                 identifier: str,
                 is_default: bool,
                 key: str,
                 metadata: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataResult',
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 primary_schema: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaResult',
                 properties: Mapping[str, Any],
                 registry_metadata: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionRegistryMetadataResult',
                 type: str):
        """
        :param Sequence['GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionConnectionPropertyArgs'] connection_properties: The properties of the connection.
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param bool is_default: The default property of the connection.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataArgs' metadata: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaArgs' primary_schema: The schema object.
        :param Mapping[str, Any] properties: All the properties for the data asset in a key-value map format.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionRegistryMetadataArgs' registry_metadata: Information about the object and its parent.
        :param str type: Type of the object to filter the results with.
        """
        pulumi.set(__self__, "connection_properties", connection_properties)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "primary_schema", primary_schema)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_metadata", registry_metadata)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Sequence['outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionConnectionPropertyResult']:
        """
        The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> bool:
        """
        The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataResult':
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="primarySchema")
    def primary_schema(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaResult':
        """
        The schema object.
        """
        return pulumi.get(self, "primary_schema")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, Any]:
        """
        All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionRegistryMetadataResult':
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the object to filter the results with.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionConnectionPropertyResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Used to filter by the name of the object.
        :param str value: The value for the connection name property.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the connection name property.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataAggregatorResult',
                 aggregator_key: str,
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataAggregatorArgs' aggregator: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataAggregatorResult':
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: Used to filter by the name of the object.
        :param str type: Type of the object to filter the results with.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the object to filter the results with.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaResult(dict):
    def __init__(__self__, *,
                 default_connection: str,
                 description: str,
                 external_key: str,
                 identifier: str,
                 is_has_containers: bool,
                 key: str,
                 metadata: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataResult',
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_ref: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaParentRefResult',
                 resource_name: str):
        """
        :param str default_connection: The default connection key.
        :param str description: User-defined description of the folder.
        :param str external_key: The external key of the object.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param bool is_has_containers: Specifies whether the schema has containers.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataArgs' metadata: A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaParentRefArgs' parent_ref: A reference to the parent object.
        :param str resource_name: A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        pulumi.set(__self__, "default_connection", default_connection)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "external_key", external_key)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "is_has_containers", is_has_containers)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_ref", parent_ref)
        pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> str:
        """
        The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> str:
        """
        The external key of the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isHasContainers")
    def is_has_containers(self) -> bool:
        """
        Specifies whether the schema has containers.
        """
        return pulumi.get(self, "is_has_containers")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataResult':
        """
        A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        A resource name can have letters, numbers, and special characters. The value is editable and is restricted to 4000 characters.
        """
        return pulumi.get(self, "resource_name")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult',
                 aggregator_key: str,
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorArgs' aggregator: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult':
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: Used to filter by the name of the object.
        :param str type: Type of the object to filter the results with.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the object to filter the results with.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionPrimarySchemaParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetDefaultConnectionRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataAggregatorResult',
                 aggregator_key: str,
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataAggregatorArgs' aggregator: A summary type containing information about the object's aggregator including its type, key, name, and description.
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify the object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        pulumi.set(__self__, "aggregator", aggregator)
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_by_name", created_by_name)
        pulumi.set(__self__, "identifier_path", identifier_path)
        pulumi.set(__self__, "info_fields", info_fields)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by", updated_by)
        pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataAggregatorResult':
        """
        A summary type containing information about the object's aggregator including its type, key, name, and description.
        """
        return pulumi.get(self, "aggregator")

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify the object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str name: Used to filter by the name of the object.
        :param str type: Type of the object to filter the results with.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the object to filter the results with.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_ref: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemParentRefResult',
                 type_mapping_from: Mapping[str, Any],
                 type_mapping_to: Mapping[str, Any],
                 types: Sequence['outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeResult']):
        """
        :param str description: User-defined description of the folder.
        :param str identifier: Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemParentRefArgs' parent_ref: A reference to the parent object.
        :param Mapping[str, Any] type_mapping_from: The type system to map from.
        :param Mapping[str, Any] type_mapping_to: The type system to map to.
        :param Sequence['GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeArgs'] types: An array of types.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "object_version", object_version)
        pulumi.set(__self__, "parent_ref", parent_ref)
        pulumi.set(__self__, "type_mapping_from", type_mapping_from)
        pulumi.set(__self__, "type_mapping_to", type_mapping_to)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with an upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="typeMappingFrom")
    def type_mapping_from(self) -> Mapping[str, Any]:
        """
        The type system to map from.
        """
        return pulumi.get(self, "type_mapping_from")

    @property
    @pulumi.getter(name="typeMappingTo")
    def type_mapping_to(self) -> Mapping[str, Any]:
        """
        The type system to map to.
        """
        return pulumi.get(self, "type_mapping_to")

    @property
    @pulumi.getter
    def types(self) -> Sequence['outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeResult']:
        """
        An array of types.
        """
        return pulumi.get(self, "types")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeResult(dict):
    def __init__(__self__, *,
                 config_definition: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionResult',
                 description: str,
                 dt_type: str,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 parent_ref: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeParentRefResult',
                 type_system_name: str):
        """
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionArgs' config_definition: The configuration details of a configurable object. This contains one or more config param definitions.
        :param str description: User-defined description of the folder.
        :param str dt_type: The data type.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeParentRefArgs' parent_ref: A reference to the parent object.
        :param str type_system_name: The data type system name.
        """
        pulumi.set(__self__, "config_definition", config_definition)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dt_type", dt_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "parent_ref", parent_ref)
        pulumi.set(__self__, "type_system_name", type_system_name)

    @property
    @pulumi.getter(name="configDefinition")
    def config_definition(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionResult':
        """
        The configuration details of a configurable object. This contains one or more config param definitions.
        """
        return pulumi.get(self, "config_definition")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User-defined description of the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dtType")
    def dt_type(self) -> str:
        """
        The data type.
        """
        return pulumi.get(self, "dt_type")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")

    @property
    @pulumi.getter(name="typeSystemName")
    def type_system_name(self) -> str:
        """
        The data type system name.
        """
        return pulumi.get(self, "type_system_name")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionResult(dict):
    def __init__(__self__, *,
                 config_parameter_definitions: Mapping[str, Any],
                 is_contained: bool,
                 key: str,
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 parent_ref: 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult'):
        """
        :param Mapping[str, Any] config_parameter_definitions: The parameter configuration details.
        :param bool is_contained: Specifies whether the configuration is contained.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param str model_type: The type of the folder.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param 'GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionParentRefArgs' parent_ref: A reference to the parent object.
        """
        pulumi.set(__self__, "config_parameter_definitions", config_parameter_definitions)
        pulumi.set(__self__, "is_contained", is_contained)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "model_version", model_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "object_status", object_status)
        pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParameterDefinitions")
    def config_parameter_definitions(self) -> Mapping[str, Any]:
        """
        The parameter configuration details.
        """
        return pulumi.get(self, "config_parameter_definitions")

    @property
    @pulumi.getter(name="isContained")
    def is_contained(self) -> bool:
        """
        Specifies whether the configuration is contained.
        """
        return pulumi.get(self, "is_contained")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the folder.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> 'outputs.GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult':
        """
        A reference to the parent object.
        """
        return pulumi.get(self, "parent_ref")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeConfigDefinitionParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetNativeTypeSystemTypeParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemDataAssetRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 created_by_user_id: str,
                 created_by_user_name: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by_user_id: str,
                 updated_by_user_name: str):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param str created_by_user_id: The ID of the user who created the object.
        :param str created_by_user_name: The name of the user who created the object.
        :param bool is_favorite: Specifies whether the object is a favorite.
        :param str key: Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by_user_id: The ID of the user who updated the object.
        :param str updated_by_user_name: The name of the user who updated the object.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        pulumi.set(__self__, "created_by_user_id", created_by_user_id)
        pulumi.set(__self__, "created_by_user_name", created_by_user_name)
        pulumi.set(__self__, "is_favorite", is_favorite)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "registry_version", registry_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "updated_by_user_id", updated_by_user_id)
        pulumi.set(__self__, "updated_by_user_name", updated_by_user_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="createdByUserId")
    def created_by_user_id(self) -> str:
        """
        The ID of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_id")

    @property
    @pulumi.getter(name="createdByUserName")
    def created_by_user_name(self) -> str:
        """
        The name of the user who created the object.
        """
        return pulumi.get(self, "created_by_user_name")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether the object is a favorite.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Generated key that can be used in API calls to identify the folder. In scenarios where reference to the folder is required, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows, and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedByUserId")
    def updated_by_user_id(self) -> str:
        """
        The ID of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_id")

    @property
    @pulumi.getter(name="updatedByUserName")
    def updated_by_user_name(self) -> str:
        """
        The name of the user who updated the object.
        """
        return pulumi.get(self, "updated_by_user_name")


@pulumi.output_type
class GetRegistryFoldersFolderSummaryCollectionItemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str):
        """
        :param str parent: Key of the parent object.
        """
        pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")


@pulumi.output_type
class GetRegistryTypeDataAssetAttributeResult(dict):
    def __init__(__self__, *,
                 attribute_type: str,
                 is_base64encoded: bool,
                 is_generated: bool,
                 is_mandatory: bool,
                 is_sensitive: bool,
                 name: str,
                 valid_key_lists: Sequence[str]):
        """
        :param str attribute_type: The attribute type details.
        :param bool is_base64encoded: True if attribute is encoded.
        :param bool is_generated: True if attribute is generated.
        :param bool is_mandatory: True if attribute is mandatory.
        :param bool is_sensitive: True if attribute is sensitive.
        :param str name: The name of of the attribute.
        :param Sequence[str] valid_key_lists: The list of valid keys.
        """
        pulumi.set(__self__, "attribute_type", attribute_type)
        pulumi.set(__self__, "is_base64encoded", is_base64encoded)
        pulumi.set(__self__, "is_generated", is_generated)
        pulumi.set(__self__, "is_mandatory", is_mandatory)
        pulumi.set(__self__, "is_sensitive", is_sensitive)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "valid_key_lists", valid_key_lists)

    @property
    @pulumi.getter(name="attributeType")
    def attribute_type(self) -> str:
        """
        The attribute type details.
        """
        return pulumi.get(self, "attribute_type")

    @property
    @pulumi.getter(name="isBase64encoded")
    def is_base64encoded(self) -> bool:
        """
        True if attribute is encoded.
        """
        return pulumi.get(self, "is_base64encoded")

    @property
    @pulumi.getter(name="isGenerated")
    def is_generated(self) -> bool:
        """
        True if attribute is generated.
        """
        return pulumi.get(self, "is_generated")

    @property
    @pulumi.getter(name="isMandatory")
    def is_mandatory(self) -> bool:
        """
        True if attribute is mandatory.
        """
        return pulumi.get(self, "is_mandatory")

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> bool:
        """
        True if attribute is sensitive.
        """
        return pulumi.get(self, "is_sensitive")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of of the attribute.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="validKeyLists")
    def valid_key_lists(self) -> Sequence[str]:
        """
        The list of valid keys.
        """
        return pulumi.get(self, "valid_key_lists")


@pulumi.output_type
class GetRegistryTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRegistryTypesTypesSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetRegistryTypesTypesSummaryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRegistryTypesTypesSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRegistryTypesTypesSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 connection_attributes: Mapping[str, Any],
                 data_asset_attributes: Sequence['outputs.GetRegistryTypesTypesSummaryCollectionItemDataAssetAttributeResult'],
                 key: str,
                 name: str,
                 description: Optional[str] = None):
        """
        :param Mapping[str, Any] connection_attributes: Mapping the connectionType as the key to the list of attributes as the value.
        :param Sequence['GetRegistryTypesTypesSummaryCollectionItemDataAssetAttributeArgs'] data_asset_attributes: The list of attributes of the data asset.
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "connection_attributes", connection_attributes)
        pulumi.set(__self__, "data_asset_attributes", data_asset_attributes)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="connectionAttributes")
    def connection_attributes(self) -> Mapping[str, Any]:
        """
        Mapping the connectionType as the key to the list of attributes as the value.
        """
        return pulumi.get(self, "connection_attributes")

    @property
    @pulumi.getter(name="dataAssetAttributes")
    def data_asset_attributes(self) -> Sequence['outputs.GetRegistryTypesTypesSummaryCollectionItemDataAssetAttributeResult']:
        """
        The list of attributes of the data asset.
        """
        return pulumi.get(self, "data_asset_attributes")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class GetRegistryTypesTypesSummaryCollectionItemDataAssetAttributeResult(dict):
    def __init__(__self__, *,
                 attribute_type: str,
                 is_base64encoded: bool,
                 is_generated: bool,
                 is_mandatory: bool,
                 is_sensitive: bool,
                 name: str,
                 valid_key_lists: Sequence[str]):
        """
        :param str attribute_type: The attribute type details.
        :param bool is_base64encoded: True if attribute is encoded.
        :param bool is_generated: True if attribute is generated.
        :param bool is_mandatory: True if attribute is mandatory.
        :param bool is_sensitive: True if attribute is sensitive.
        :param str name: Used to filter by the name of the object.
        :param Sequence[str] valid_key_lists: The list of valid keys.
        """
        pulumi.set(__self__, "attribute_type", attribute_type)
        pulumi.set(__self__, "is_base64encoded", is_base64encoded)
        pulumi.set(__self__, "is_generated", is_generated)
        pulumi.set(__self__, "is_mandatory", is_mandatory)
        pulumi.set(__self__, "is_sensitive", is_sensitive)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "valid_key_lists", valid_key_lists)

    @property
    @pulumi.getter(name="attributeType")
    def attribute_type(self) -> str:
        """
        The attribute type details.
        """
        return pulumi.get(self, "attribute_type")

    @property
    @pulumi.getter(name="isBase64encoded")
    def is_base64encoded(self) -> bool:
        """
        True if attribute is encoded.
        """
        return pulumi.get(self, "is_base64encoded")

    @property
    @pulumi.getter(name="isGenerated")
    def is_generated(self) -> bool:
        """
        True if attribute is generated.
        """
        return pulumi.get(self, "is_generated")

    @property
    @pulumi.getter(name="isMandatory")
    def is_mandatory(self) -> bool:
        """
        True if attribute is mandatory.
        """
        return pulumi.get(self, "is_mandatory")

    @property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> bool:
        """
        True if attribute is sensitive.
        """
        return pulumi.get(self, "is_sensitive")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="validKeyLists")
    def valid_key_lists(self) -> Sequence[str]:
        """
        The list of valid keys.
        """
        return pulumi.get(self, "valid_key_lists")


