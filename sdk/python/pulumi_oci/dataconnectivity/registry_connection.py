# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RegistryConnectionArgs', 'RegistryConnection']

@pulumi.input_type
class RegistryConnectionArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 properties: pulumi.Input[Mapping[str, Any]],
                 registry_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 connection_properties: Optional[pulumi.Input[Sequence[pulumi.Input['RegistryConnectionConnectionPropertyArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['RegistryConnectionMetadataArgs']] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 primary_schema: Optional[pulumi.Input['RegistryConnectionPrimarySchemaArgs']] = None,
                 registry_metadata: Optional[pulumi.Input['RegistryConnectionRegistryMetadataArgs']] = None):
        """
        The set of arguments for constructing a RegistryConnection resource.
        :param pulumi.Input[str] identifier: (Updatable) The identifier of the aggregator.
        :param pulumi.Input[Mapping[str, Any]] properties: (Updatable) All the properties of the connection in a key-value map format.
        :param pulumi.Input[str] registry_id: The registry OCID.
        :param pulumi.Input[str] type: (Updatable) Specific Connection Type
        :param pulumi.Input[Sequence[pulumi.Input['RegistryConnectionConnectionPropertyArgs']]] connection_properties: (Updatable) The properties of the connection.
        :param pulumi.Input[str] description: (Updatable) The description of the aggregator.
        :param pulumi.Input[bool] is_default: (Updatable) The default property of the connection.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input['RegistryConnectionMetadataArgs'] metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param pulumi.Input[str] model_type: (Updatable) The object type.
        :param pulumi.Input[str] model_version: (Updatable) The model version of the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param pulumi.Input['RegistryConnectionPrimarySchemaArgs'] primary_schema: (Updatable) The schema object.
        :param pulumi.Input['RegistryConnectionRegistryMetadataArgs'] registry_metadata: (Updatable) Information about the object and its parent.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_id", registry_id)
        pulumi.set(__self__, "type", type)
        if connection_properties is not None:
            pulumi.set(__self__, "connection_properties", connection_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if primary_schema is not None:
            pulumi.set(__self__, "primary_schema", primary_schema)
        if registry_metadata is not None:
            pulumi.set(__self__, "registry_metadata", registry_metadata)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        (Updatable) All the properties of the connection in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> pulumi.Input[str]:
        """
        The registry OCID.
        """
        return pulumi.get(self, "registry_id")

    @registry_id.setter
    def registry_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Specific Connection Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegistryConnectionConnectionPropertyArgs']]]]:
        """
        (Updatable) The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @connection_properties.setter
    def connection_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegistryConnectionConnectionPropertyArgs']]]]):
        pulumi.set(self, "connection_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['RegistryConnectionMetadataArgs']]:
        """
        (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['RegistryConnectionMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object type.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of the object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="primarySchema")
    def primary_schema(self) -> Optional[pulumi.Input['RegistryConnectionPrimarySchemaArgs']]:
        """
        (Updatable) The schema object.
        """
        return pulumi.get(self, "primary_schema")

    @primary_schema.setter
    def primary_schema(self, value: Optional[pulumi.Input['RegistryConnectionPrimarySchemaArgs']]):
        pulumi.set(self, "primary_schema", value)

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> Optional[pulumi.Input['RegistryConnectionRegistryMetadataArgs']]:
        """
        (Updatable) Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @registry_metadata.setter
    def registry_metadata(self, value: Optional[pulumi.Input['RegistryConnectionRegistryMetadataArgs']]):
        pulumi.set(self, "registry_metadata", value)


@pulumi.input_type
class _RegistryConnectionState:
    def __init__(__self__, *,
                 connection_properties: Optional[pulumi.Input[Sequence[pulumi.Input['RegistryConnectionConnectionPropertyArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['RegistryConnectionMetadataArgs']] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 primary_schema: Optional[pulumi.Input['RegistryConnectionPrimarySchemaArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 registry_id: Optional[pulumi.Input[str]] = None,
                 registry_metadata: Optional[pulumi.Input['RegistryConnectionRegistryMetadataArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RegistryConnection resources.
        :param pulumi.Input[Sequence[pulumi.Input['RegistryConnectionConnectionPropertyArgs']]] connection_properties: (Updatable) The properties of the connection.
        :param pulumi.Input[str] description: (Updatable) The description of the aggregator.
        :param pulumi.Input[str] identifier: (Updatable) The identifier of the aggregator.
        :param pulumi.Input[bool] is_default: (Updatable) The default property of the connection.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input['RegistryConnectionMetadataArgs'] metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param pulumi.Input[str] model_type: (Updatable) The object type.
        :param pulumi.Input[str] model_version: (Updatable) The model version of the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param pulumi.Input['RegistryConnectionPrimarySchemaArgs'] primary_schema: (Updatable) The schema object.
        :param pulumi.Input[Mapping[str, Any]] properties: (Updatable) All the properties of the connection in a key-value map format.
        :param pulumi.Input[str] registry_id: The registry OCID.
        :param pulumi.Input['RegistryConnectionRegistryMetadataArgs'] registry_metadata: (Updatable) Information about the object and its parent.
        :param pulumi.Input[str] type: (Updatable) Specific Connection Type
        """
        if connection_properties is not None:
            pulumi.set(__self__, "connection_properties", connection_properties)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if primary_schema is not None:
            pulumi.set(__self__, "primary_schema", primary_schema)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if registry_id is not None:
            pulumi.set(__self__, "registry_id", registry_id)
        if registry_metadata is not None:
            pulumi.set(__self__, "registry_metadata", registry_metadata)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegistryConnectionConnectionPropertyArgs']]]]:
        """
        (Updatable) The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @connection_properties.setter
    def connection_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegistryConnectionConnectionPropertyArgs']]]]):
        pulumi.set(self, "connection_properties", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['RegistryConnectionMetadataArgs']]:
        """
        (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['RegistryConnectionMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object type.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of the object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="primarySchema")
    def primary_schema(self) -> Optional[pulumi.Input['RegistryConnectionPrimarySchemaArgs']]:
        """
        (Updatable) The schema object.
        """
        return pulumi.get(self, "primary_schema")

    @primary_schema.setter
    def primary_schema(self, value: Optional[pulumi.Input['RegistryConnectionPrimarySchemaArgs']]):
        pulumi.set(self, "primary_schema", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) All the properties of the connection in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[pulumi.Input[str]]:
        """
        The registry OCID.
        """
        return pulumi.get(self, "registry_id")

    @registry_id.setter
    def registry_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_id", value)

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> Optional[pulumi.Input['RegistryConnectionRegistryMetadataArgs']]:
        """
        (Updatable) Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @registry_metadata.setter
    def registry_metadata(self, value: Optional[pulumi.Input['RegistryConnectionRegistryMetadataArgs']]):
        pulumi.set(self, "registry_metadata", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Specific Connection Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class RegistryConnection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryConnectionConnectionPropertyArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['RegistryConnectionMetadataArgs']]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 primary_schema: Optional[pulumi.Input[pulumi.InputType['RegistryConnectionPrimarySchemaArgs']]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 registry_id: Optional[pulumi.Input[str]] = None,
                 registry_metadata: Optional[pulumi.Input[pulumi.InputType['RegistryConnectionRegistryMetadataArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Registry Connection resource in Oracle Cloud Infrastructure Data Connectivity service.

        Creates a connection under an existing data asset.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_registry_connection = oci.data_connectivity.RegistryConnection("testRegistryConnection",
            identifier=var["registry_connection_identifier"],
            properties=var["registry_connection_properties"],
            registry_id=oci_data_connectivity_registry["test_registry"]["id"],
            type=var["registry_connection_type"],
            connection_properties=[oci.data_connectivity.RegistryConnectionConnectionPropertyArgs(
                name=var["registry_connection_connection_properties_name"],
                value=var["registry_connection_connection_properties_value"],
            )],
            description=var["registry_connection_description"],
            is_default=var["registry_connection_is_default"],
            key=var["registry_connection_key"],
            metadata=oci.data_connectivity.RegistryConnectionMetadataArgs(
                aggregator=oci.data_connectivity.RegistryConnectionMetadataAggregatorArgs(
                    description=var["registry_connection_metadata_aggregator_description"],
                    identifier=var["registry_connection_metadata_aggregator_identifier"],
                    key=var["registry_connection_metadata_aggregator_key"],
                    name=var["registry_connection_metadata_aggregator_name"],
                    type=var["registry_connection_metadata_aggregator_type"],
                ),
                aggregator_key=var["registry_connection_metadata_aggregator_key"],
                created_by=var["registry_connection_metadata_created_by"],
                created_by_name=var["registry_connection_metadata_created_by_name"],
                identifier_path=var["registry_connection_metadata_identifier_path"],
                info_fields=var["registry_connection_metadata_info_fields"],
                is_favorite=var["registry_connection_metadata_is_favorite"],
                labels=var["registry_connection_metadata_labels"],
                registry_version=var["registry_connection_metadata_registry_version"],
                time_created=var["registry_connection_metadata_time_created"],
                time_updated=var["registry_connection_metadata_time_updated"],
                updated_by=var["registry_connection_metadata_updated_by"],
                updated_by_name=var["registry_connection_metadata_updated_by_name"],
            ),
            model_type=var["registry_connection_model_type"],
            model_version=var["registry_connection_model_version"],
            object_status=var["registry_connection_object_status"],
            object_version=var["registry_connection_object_version"],
            primary_schema=oci.data_connectivity.RegistryConnectionPrimarySchemaArgs(
                identifier=var["registry_connection_primary_schema_identifier"],
                key=var["registry_connection_primary_schema_key"],
                model_type=var["registry_connection_primary_schema_model_type"],
                name=var["registry_connection_primary_schema_name"],
                default_connection=var["registry_connection_primary_schema_default_connection"],
                description=var["registry_connection_primary_schema_description"],
                external_key=var["registry_connection_primary_schema_external_key"],
                is_has_containers=var["registry_connection_primary_schema_is_has_containers"],
                metadata=oci.data_connectivity.RegistryConnectionPrimarySchemaMetadataArgs(
                    aggregator=oci.data_connectivity.RegistryConnectionPrimarySchemaMetadataAggregatorArgs(
                        description=var["registry_connection_primary_schema_metadata_aggregator_description"],
                        identifier=var["registry_connection_primary_schema_metadata_aggregator_identifier"],
                        key=var["registry_connection_primary_schema_metadata_aggregator_key"],
                        name=var["registry_connection_primary_schema_metadata_aggregator_name"],
                        type=var["registry_connection_primary_schema_metadata_aggregator_type"],
                    ),
                    aggregator_key=var["registry_connection_primary_schema_metadata_aggregator_key"],
                    created_by=var["registry_connection_primary_schema_metadata_created_by"],
                    created_by_name=var["registry_connection_primary_schema_metadata_created_by_name"],
                    identifier_path=var["registry_connection_primary_schema_metadata_identifier_path"],
                    info_fields=var["registry_connection_primary_schema_metadata_info_fields"],
                    is_favorite=var["registry_connection_primary_schema_metadata_is_favorite"],
                    labels=var["registry_connection_primary_schema_metadata_labels"],
                    registry_version=var["registry_connection_primary_schema_metadata_registry_version"],
                    time_created=var["registry_connection_primary_schema_metadata_time_created"],
                    time_updated=var["registry_connection_primary_schema_metadata_time_updated"],
                    updated_by=var["registry_connection_primary_schema_metadata_updated_by"],
                    updated_by_name=var["registry_connection_primary_schema_metadata_updated_by_name"],
                ),
                model_version=var["registry_connection_primary_schema_model_version"],
                object_status=var["registry_connection_primary_schema_object_status"],
                object_version=var["registry_connection_primary_schema_object_version"],
                parent_ref=oci.data_connectivity.RegistryConnectionPrimarySchemaParentRefArgs(
                    parent=var["registry_connection_primary_schema_parent_ref_parent"],
                ),
                resource_name=var["registry_connection_primary_schema_resource_name"],
            ),
            registry_metadata=oci.data_connectivity.RegistryConnectionRegistryMetadataArgs(
                aggregator_key=var["registry_connection_registry_metadata_aggregator_key"],
                created_by_user_id=oci_identity_user["test_user"]["id"],
                created_by_user_name=oci_identity_user["test_user"]["name"],
                is_favorite=var["registry_connection_registry_metadata_is_favorite"],
                key=var["registry_connection_registry_metadata_key"],
                labels=var["registry_connection_registry_metadata_labels"],
                registry_version=var["registry_connection_registry_metadata_registry_version"],
                time_created=var["registry_connection_registry_metadata_time_created"],
                time_updated=var["registry_connection_registry_metadata_time_updated"],
                updated_by_user_id=oci_identity_user["test_user"]["id"],
                updated_by_user_name=oci_identity_user["test_user"]["name"],
            ))
        ```

        ## Import

        RegistryConnections can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:DataConnectivity/registryConnection:RegistryConnection test_registry_connection "registries/{registryId}/connections/{connectionKey}"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryConnectionConnectionPropertyArgs']]]] connection_properties: (Updatable) The properties of the connection.
        :param pulumi.Input[str] description: (Updatable) The description of the aggregator.
        :param pulumi.Input[str] identifier: (Updatable) The identifier of the aggregator.
        :param pulumi.Input[bool] is_default: (Updatable) The default property of the connection.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[pulumi.InputType['RegistryConnectionMetadataArgs']] metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param pulumi.Input[str] model_type: (Updatable) The object type.
        :param pulumi.Input[str] model_version: (Updatable) The model version of the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param pulumi.Input[pulumi.InputType['RegistryConnectionPrimarySchemaArgs']] primary_schema: (Updatable) The schema object.
        :param pulumi.Input[Mapping[str, Any]] properties: (Updatable) All the properties of the connection in a key-value map format.
        :param pulumi.Input[str] registry_id: The registry OCID.
        :param pulumi.Input[pulumi.InputType['RegistryConnectionRegistryMetadataArgs']] registry_metadata: (Updatable) Information about the object and its parent.
        :param pulumi.Input[str] type: (Updatable) Specific Connection Type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegistryConnectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Registry Connection resource in Oracle Cloud Infrastructure Data Connectivity service.

        Creates a connection under an existing data asset.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_registry_connection = oci.data_connectivity.RegistryConnection("testRegistryConnection",
            identifier=var["registry_connection_identifier"],
            properties=var["registry_connection_properties"],
            registry_id=oci_data_connectivity_registry["test_registry"]["id"],
            type=var["registry_connection_type"],
            connection_properties=[oci.data_connectivity.RegistryConnectionConnectionPropertyArgs(
                name=var["registry_connection_connection_properties_name"],
                value=var["registry_connection_connection_properties_value"],
            )],
            description=var["registry_connection_description"],
            is_default=var["registry_connection_is_default"],
            key=var["registry_connection_key"],
            metadata=oci.data_connectivity.RegistryConnectionMetadataArgs(
                aggregator=oci.data_connectivity.RegistryConnectionMetadataAggregatorArgs(
                    description=var["registry_connection_metadata_aggregator_description"],
                    identifier=var["registry_connection_metadata_aggregator_identifier"],
                    key=var["registry_connection_metadata_aggregator_key"],
                    name=var["registry_connection_metadata_aggregator_name"],
                    type=var["registry_connection_metadata_aggregator_type"],
                ),
                aggregator_key=var["registry_connection_metadata_aggregator_key"],
                created_by=var["registry_connection_metadata_created_by"],
                created_by_name=var["registry_connection_metadata_created_by_name"],
                identifier_path=var["registry_connection_metadata_identifier_path"],
                info_fields=var["registry_connection_metadata_info_fields"],
                is_favorite=var["registry_connection_metadata_is_favorite"],
                labels=var["registry_connection_metadata_labels"],
                registry_version=var["registry_connection_metadata_registry_version"],
                time_created=var["registry_connection_metadata_time_created"],
                time_updated=var["registry_connection_metadata_time_updated"],
                updated_by=var["registry_connection_metadata_updated_by"],
                updated_by_name=var["registry_connection_metadata_updated_by_name"],
            ),
            model_type=var["registry_connection_model_type"],
            model_version=var["registry_connection_model_version"],
            object_status=var["registry_connection_object_status"],
            object_version=var["registry_connection_object_version"],
            primary_schema=oci.data_connectivity.RegistryConnectionPrimarySchemaArgs(
                identifier=var["registry_connection_primary_schema_identifier"],
                key=var["registry_connection_primary_schema_key"],
                model_type=var["registry_connection_primary_schema_model_type"],
                name=var["registry_connection_primary_schema_name"],
                default_connection=var["registry_connection_primary_schema_default_connection"],
                description=var["registry_connection_primary_schema_description"],
                external_key=var["registry_connection_primary_schema_external_key"],
                is_has_containers=var["registry_connection_primary_schema_is_has_containers"],
                metadata=oci.data_connectivity.RegistryConnectionPrimarySchemaMetadataArgs(
                    aggregator=oci.data_connectivity.RegistryConnectionPrimarySchemaMetadataAggregatorArgs(
                        description=var["registry_connection_primary_schema_metadata_aggregator_description"],
                        identifier=var["registry_connection_primary_schema_metadata_aggregator_identifier"],
                        key=var["registry_connection_primary_schema_metadata_aggregator_key"],
                        name=var["registry_connection_primary_schema_metadata_aggregator_name"],
                        type=var["registry_connection_primary_schema_metadata_aggregator_type"],
                    ),
                    aggregator_key=var["registry_connection_primary_schema_metadata_aggregator_key"],
                    created_by=var["registry_connection_primary_schema_metadata_created_by"],
                    created_by_name=var["registry_connection_primary_schema_metadata_created_by_name"],
                    identifier_path=var["registry_connection_primary_schema_metadata_identifier_path"],
                    info_fields=var["registry_connection_primary_schema_metadata_info_fields"],
                    is_favorite=var["registry_connection_primary_schema_metadata_is_favorite"],
                    labels=var["registry_connection_primary_schema_metadata_labels"],
                    registry_version=var["registry_connection_primary_schema_metadata_registry_version"],
                    time_created=var["registry_connection_primary_schema_metadata_time_created"],
                    time_updated=var["registry_connection_primary_schema_metadata_time_updated"],
                    updated_by=var["registry_connection_primary_schema_metadata_updated_by"],
                    updated_by_name=var["registry_connection_primary_schema_metadata_updated_by_name"],
                ),
                model_version=var["registry_connection_primary_schema_model_version"],
                object_status=var["registry_connection_primary_schema_object_status"],
                object_version=var["registry_connection_primary_schema_object_version"],
                parent_ref=oci.data_connectivity.RegistryConnectionPrimarySchemaParentRefArgs(
                    parent=var["registry_connection_primary_schema_parent_ref_parent"],
                ),
                resource_name=var["registry_connection_primary_schema_resource_name"],
            ),
            registry_metadata=oci.data_connectivity.RegistryConnectionRegistryMetadataArgs(
                aggregator_key=var["registry_connection_registry_metadata_aggregator_key"],
                created_by_user_id=oci_identity_user["test_user"]["id"],
                created_by_user_name=oci_identity_user["test_user"]["name"],
                is_favorite=var["registry_connection_registry_metadata_is_favorite"],
                key=var["registry_connection_registry_metadata_key"],
                labels=var["registry_connection_registry_metadata_labels"],
                registry_version=var["registry_connection_registry_metadata_registry_version"],
                time_created=var["registry_connection_registry_metadata_time_created"],
                time_updated=var["registry_connection_registry_metadata_time_updated"],
                updated_by_user_id=oci_identity_user["test_user"]["id"],
                updated_by_user_name=oci_identity_user["test_user"]["name"],
            ))
        ```

        ## Import

        RegistryConnections can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:DataConnectivity/registryConnection:RegistryConnection test_registry_connection "registries/{registryId}/connections/{connectionKey}"
        ```

        :param str resource_name: The name of the resource.
        :param RegistryConnectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegistryConnectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryConnectionConnectionPropertyArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['RegistryConnectionMetadataArgs']]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 primary_schema: Optional[pulumi.Input[pulumi.InputType['RegistryConnectionPrimarySchemaArgs']]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 registry_id: Optional[pulumi.Input[str]] = None,
                 registry_metadata: Optional[pulumi.Input[pulumi.InputType['RegistryConnectionRegistryMetadataArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegistryConnectionArgs.__new__(RegistryConnectionArgs)

            __props__.__dict__["connection_properties"] = connection_properties
            __props__.__dict__["description"] = description
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["is_default"] = is_default
            __props__.__dict__["key"] = key
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["model_type"] = model_type
            __props__.__dict__["model_version"] = model_version
            __props__.__dict__["name"] = name
            __props__.__dict__["object_status"] = object_status
            __props__.__dict__["object_version"] = object_version
            __props__.__dict__["primary_schema"] = primary_schema
            if properties is None and not opts.urn:
                raise TypeError("Missing required property 'properties'")
            __props__.__dict__["properties"] = properties
            if registry_id is None and not opts.urn:
                raise TypeError("Missing required property 'registry_id'")
            __props__.__dict__["registry_id"] = registry_id
            __props__.__dict__["registry_metadata"] = registry_metadata
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(RegistryConnection, __self__).__init__(
            'oci:DataConnectivity/registryConnection:RegistryConnection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryConnectionConnectionPropertyArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            identifier: Optional[pulumi.Input[str]] = None,
            is_default: Optional[pulumi.Input[bool]] = None,
            key: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[pulumi.InputType['RegistryConnectionMetadataArgs']]] = None,
            model_type: Optional[pulumi.Input[str]] = None,
            model_version: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            object_status: Optional[pulumi.Input[int]] = None,
            object_version: Optional[pulumi.Input[int]] = None,
            primary_schema: Optional[pulumi.Input[pulumi.InputType['RegistryConnectionPrimarySchemaArgs']]] = None,
            properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            registry_id: Optional[pulumi.Input[str]] = None,
            registry_metadata: Optional[pulumi.Input[pulumi.InputType['RegistryConnectionRegistryMetadataArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'RegistryConnection':
        """
        Get an existing RegistryConnection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RegistryConnectionConnectionPropertyArgs']]]] connection_properties: (Updatable) The properties of the connection.
        :param pulumi.Input[str] description: (Updatable) The description of the aggregator.
        :param pulumi.Input[str] identifier: (Updatable) The identifier of the aggregator.
        :param pulumi.Input[bool] is_default: (Updatable) The default property of the connection.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[pulumi.InputType['RegistryConnectionMetadataArgs']] metadata: (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        :param pulumi.Input[str] model_type: (Updatable) The object type.
        :param pulumi.Input[str] model_version: (Updatable) The model version of the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param pulumi.Input[pulumi.InputType['RegistryConnectionPrimarySchemaArgs']] primary_schema: (Updatable) The schema object.
        :param pulumi.Input[Mapping[str, Any]] properties: (Updatable) All the properties of the connection in a key-value map format.
        :param pulumi.Input[str] registry_id: The registry OCID.
        :param pulumi.Input[pulumi.InputType['RegistryConnectionRegistryMetadataArgs']] registry_metadata: (Updatable) Information about the object and its parent.
        :param pulumi.Input[str] type: (Updatable) Specific Connection Type
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegistryConnectionState.__new__(_RegistryConnectionState)

        __props__.__dict__["connection_properties"] = connection_properties
        __props__.__dict__["description"] = description
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["key"] = key
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["model_type"] = model_type
        __props__.__dict__["model_version"] = model_version
        __props__.__dict__["name"] = name
        __props__.__dict__["object_status"] = object_status
        __props__.__dict__["object_version"] = object_version
        __props__.__dict__["primary_schema"] = primary_schema
        __props__.__dict__["properties"] = properties
        __props__.__dict__["registry_id"] = registry_id
        __props__.__dict__["registry_metadata"] = registry_metadata
        __props__.__dict__["type"] = type
        return RegistryConnection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> pulumi.Output[Sequence['outputs.RegistryConnectionConnectionProperty']]:
        """
        (Updatable) The properties of the connection.
        """
        return pulumi.get(self, "connection_properties")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[str]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[bool]:
        """
        (Updatable) The default property of the connection.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.RegistryConnectionMetadata']:
        """
        (Updatable) A summary type containing information about the object including its key, name, the time that it was created or updated, and the user who created or updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Output[str]:
        """
        (Updatable) The object type.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> pulumi.Output[str]:
        """
        (Updatable) The model version of the object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        (Updatable) Free form text without any restriction on the permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> pulumi.Output[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> pulumi.Output[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="primarySchema")
    def primary_schema(self) -> pulumi.Output['outputs.RegistryConnectionPrimarySchema']:
        """
        (Updatable) The schema object.
        """
        return pulumi.get(self, "primary_schema")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) All the properties of the connection in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> pulumi.Output[str]:
        """
        The registry OCID.
        """
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> pulumi.Output['outputs.RegistryConnectionRegistryMetadata']:
        """
        (Updatable) Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        (Updatable) Specific Connection Type
        """
        return pulumi.get(self, "type")

