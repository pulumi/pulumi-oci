# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RegistryDataAssetArgs', 'RegistryDataAsset']

@pulumi.input_type
class RegistryDataAssetArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 model_type: pulumi.Input[str],
                 properties: pulumi.Input[Mapping[str, Any]],
                 registry_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 asset_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 default_connection: Optional[pulumi.Input['RegistryDataAssetDefaultConnectionArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_key: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['RegistryDataAssetMetadataArgs']] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 native_type_system: Optional[pulumi.Input['RegistryDataAssetNativeTypeSystemArgs']] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 registry_metadata: Optional[pulumi.Input['RegistryDataAssetRegistryMetadataArgs']] = None):
        """
        The set of arguments for constructing a RegistryDataAsset resource.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] model_type: (Updatable) The property which disciminates the subtypes.
        :param pulumi.Input[Mapping[str, Any]] properties: (Updatable) All the properties for the data asset in a key-value map format.
        :param pulumi.Input[str] registry_id: The registry Ocid.
        :param pulumi.Input[str] type: (Updatable) Specific DataAsset Type
        :param pulumi.Input[Mapping[str, Any]] asset_properties: (Updatable) Additional properties for the data asset.
        :param pulumi.Input['RegistryDataAssetDefaultConnectionArgs'] default_connection: (Updatable) The default connection key.
        :param pulumi.Input[str] description: (Updatable) A user defined description for the object.
        :param pulumi.Input[str] external_key: (Updatable) The external key for the object.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input['RegistryDataAssetMetadataArgs'] metadata: (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input['RegistryDataAssetNativeTypeSystemArgs'] native_type_system: (Updatable) The type system maps from and to a type.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param pulumi.Input['RegistryDataAssetRegistryMetadataArgs'] registry_metadata: (Updatable) Information about the object and its parent.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "model_type", model_type)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "registry_id", registry_id)
        pulumi.set(__self__, "type", type)
        if asset_properties is not None:
            pulumi.set(__self__, "asset_properties", asset_properties)
        if default_connection is not None:
            pulumi.set(__self__, "default_connection", default_connection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_key is not None:
            pulumi.set(__self__, "external_key", external_key)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_type_system is not None:
            pulumi.set(__self__, "native_type_system", native_type_system)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if registry_metadata is not None:
            pulumi.set(__self__, "registry_metadata", registry_metadata)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The property which disciminates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        (Updatable) All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> pulumi.Input[str]:
        """
        The registry Ocid.
        """
        return pulumi.get(self, "registry_id")

    @registry_id.setter
    def registry_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="assetProperties")
    def asset_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Additional properties for the data asset.
        """
        return pulumi.get(self, "asset_properties")

    @asset_properties.setter
    def asset_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "asset_properties", value)

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> Optional[pulumi.Input['RegistryDataAssetDefaultConnectionArgs']]:
        """
        (Updatable) The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @default_connection.setter
    def default_connection(self, value: Optional[pulumi.Input['RegistryDataAssetDefaultConnectionArgs']]):
        pulumi.set(self, "default_connection", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user defined description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The external key for the object.
        """
        return pulumi.get(self, "external_key")

    @external_key.setter
    def external_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_key", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['RegistryDataAssetMetadataArgs']]:
        """
        (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['RegistryDataAssetMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nativeTypeSystem")
    def native_type_system(self) -> Optional[pulumi.Input['RegistryDataAssetNativeTypeSystemArgs']]:
        """
        (Updatable) The type system maps from and to a type.
        """
        return pulumi.get(self, "native_type_system")

    @native_type_system.setter
    def native_type_system(self, value: Optional[pulumi.Input['RegistryDataAssetNativeTypeSystemArgs']]):
        pulumi.set(self, "native_type_system", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> Optional[pulumi.Input['RegistryDataAssetRegistryMetadataArgs']]:
        """
        (Updatable) Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @registry_metadata.setter
    def registry_metadata(self, value: Optional[pulumi.Input['RegistryDataAssetRegistryMetadataArgs']]):
        pulumi.set(self, "registry_metadata", value)


@pulumi.input_type
class _RegistryDataAssetState:
    def __init__(__self__, *,
                 asset_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 default_connection: Optional[pulumi.Input['RegistryDataAssetDefaultConnectionArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_key: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['RegistryDataAssetMetadataArgs']] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 native_type_system: Optional[pulumi.Input['RegistryDataAssetNativeTypeSystemArgs']] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 registry_id: Optional[pulumi.Input[str]] = None,
                 registry_metadata: Optional[pulumi.Input['RegistryDataAssetRegistryMetadataArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RegistryDataAsset resources.
        :param pulumi.Input[Mapping[str, Any]] asset_properties: (Updatable) Additional properties for the data asset.
        :param pulumi.Input['RegistryDataAssetDefaultConnectionArgs'] default_connection: (Updatable) The default connection key.
        :param pulumi.Input[str] description: (Updatable) A user defined description for the object.
        :param pulumi.Input[str] external_key: (Updatable) The external key for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input['RegistryDataAssetMetadataArgs'] metadata: (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        :param pulumi.Input[str] model_type: (Updatable) The property which disciminates the subtypes.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input['RegistryDataAssetNativeTypeSystemArgs'] native_type_system: (Updatable) The type system maps from and to a type.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param pulumi.Input[Mapping[str, Any]] properties: (Updatable) All the properties for the data asset in a key-value map format.
        :param pulumi.Input[str] registry_id: The registry Ocid.
        :param pulumi.Input['RegistryDataAssetRegistryMetadataArgs'] registry_metadata: (Updatable) Information about the object and its parent.
        :param pulumi.Input[str] type: (Updatable) Specific DataAsset Type
        """
        if asset_properties is not None:
            pulumi.set(__self__, "asset_properties", asset_properties)
        if default_connection is not None:
            pulumi.set(__self__, "default_connection", default_connection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_key is not None:
            pulumi.set(__self__, "external_key", external_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if native_type_system is not None:
            pulumi.set(__self__, "native_type_system", native_type_system)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if registry_id is not None:
            pulumi.set(__self__, "registry_id", registry_id)
        if registry_metadata is not None:
            pulumi.set(__self__, "registry_metadata", registry_metadata)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="assetProperties")
    def asset_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Additional properties for the data asset.
        """
        return pulumi.get(self, "asset_properties")

    @asset_properties.setter
    def asset_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "asset_properties", value)

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> Optional[pulumi.Input['RegistryDataAssetDefaultConnectionArgs']]:
        """
        (Updatable) The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @default_connection.setter
    def default_connection(self, value: Optional[pulumi.Input['RegistryDataAssetDefaultConnectionArgs']]):
        pulumi.set(self, "default_connection", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user defined description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The external key for the object.
        """
        return pulumi.get(self, "external_key")

    @external_key.setter
    def external_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_key", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['RegistryDataAssetMetadataArgs']]:
        """
        (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['RegistryDataAssetMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The property which disciminates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nativeTypeSystem")
    def native_type_system(self) -> Optional[pulumi.Input['RegistryDataAssetNativeTypeSystemArgs']]:
        """
        (Updatable) The type system maps from and to a type.
        """
        return pulumi.get(self, "native_type_system")

    @native_type_system.setter
    def native_type_system(self, value: Optional[pulumi.Input['RegistryDataAssetNativeTypeSystemArgs']]):
        pulumi.set(self, "native_type_system", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[pulumi.Input[str]]:
        """
        The registry Ocid.
        """
        return pulumi.get(self, "registry_id")

    @registry_id.setter
    def registry_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_id", value)

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> Optional[pulumi.Input['RegistryDataAssetRegistryMetadataArgs']]:
        """
        (Updatable) Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @registry_metadata.setter
    def registry_metadata(self, value: Optional[pulumi.Input['RegistryDataAssetRegistryMetadataArgs']]):
        pulumi.set(self, "registry_metadata", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class RegistryDataAsset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 default_connection: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetDefaultConnectionArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_key: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetMetadataArgs']]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 native_type_system: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetNativeTypeSystemArgs']]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 registry_id: Optional[pulumi.Input[str]] = None,
                 registry_metadata: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetRegistryMetadataArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Registry Data Asset resource in Oracle Cloud Infrastructure Data Connectivity service.

        Creates a data asset with default connection.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_registry_data_asset = oci.data_connectivity.RegistryDataAsset("testRegistryDataAsset",
            identifier=var["registry_data_asset_identifier"],
            properties=var["registry_data_asset_properties"],
            registry_id=oci_data_connectivity_registry["test_registry"]["id"],
            type=var["registry_data_asset_type"],
            asset_properties=var["registry_data_asset_asset_properties"],
            default_connection=oci.data.connectivity.RegistryDataAssetDefaultConnectionArgs(
                identifier=var["registry_data_asset_default_connection_identifier"],
                key=var["registry_data_asset_default_connection_key"],
                name=var["registry_data_asset_default_connection_name"],
                connection_properties=[oci.data.connectivity.RegistryDataAssetDefaultConnectionConnectionPropertyArgs(
                    name=var["registry_data_asset_default_connection_connection_properties_name"],
                    value=var["registry_data_asset_default_connection_connection_properties_value"],
                )],
                description=var["registry_data_asset_default_connection_description"],
                is_default=var["registry_data_asset_default_connection_is_default"],
                metadata=oci.data.connectivity.RegistryDataAssetDefaultConnectionMetadataArgs(
                    aggregator=oci.data.connectivity.RegistryDataAssetDefaultConnectionMetadataAggregatorArgs(
                        description=var["registry_data_asset_default_connection_metadata_aggregator_description"],
                        identifier=var["registry_data_asset_default_connection_metadata_aggregator_identifier"],
                        key=var["registry_data_asset_default_connection_metadata_aggregator_key"],
                        name=var["registry_data_asset_default_connection_metadata_aggregator_name"],
                        type=var["registry_data_asset_default_connection_metadata_aggregator_type"],
                    ),
                    aggregator_key=var["registry_data_asset_default_connection_metadata_aggregator_key"],
                    created_by=var["registry_data_asset_default_connection_metadata_created_by"],
                    created_by_name=var["registry_data_asset_default_connection_metadata_created_by_name"],
                    identifier_path=var["registry_data_asset_default_connection_metadata_identifier_path"],
                    info_fields=var["registry_data_asset_default_connection_metadata_info_fields"],
                    is_favorite=var["registry_data_asset_default_connection_metadata_is_favorite"],
                    labels=var["registry_data_asset_default_connection_metadata_labels"],
                    registry_version=var["registry_data_asset_default_connection_metadata_registry_version"],
                    time_created=var["registry_data_asset_default_connection_metadata_time_created"],
                    time_updated=var["registry_data_asset_default_connection_metadata_time_updated"],
                    updated_by=var["registry_data_asset_default_connection_metadata_updated_by"],
                    updated_by_name=var["registry_data_asset_default_connection_metadata_updated_by_name"],
                ),
                model_type=var["registry_data_asset_default_connection_model_type"],
                model_version=var["registry_data_asset_default_connection_model_version"],
                object_status=var["registry_data_asset_default_connection_object_status"],
                object_version=var["registry_data_asset_default_connection_object_version"],
                primary_schema=oci.data.connectivity.RegistryDataAssetDefaultConnectionPrimarySchemaArgs(
                    identifier=var["registry_data_asset_default_connection_primary_schema_identifier"],
                    key=var["registry_data_asset_default_connection_primary_schema_key"],
                    model_type=var["registry_data_asset_default_connection_primary_schema_model_type"],
                    name=var["registry_data_asset_default_connection_primary_schema_name"],
                    default_connection=var["registry_data_asset_default_connection_primary_schema_default_connection"],
                    description=var["registry_data_asset_default_connection_primary_schema_description"],
                    external_key=var["registry_data_asset_default_connection_primary_schema_external_key"],
                    is_has_containers=var["registry_data_asset_default_connection_primary_schema_is_has_containers"],
                    metadata=oci.data.connectivity.RegistryDataAssetDefaultConnectionPrimarySchemaMetadataArgs(
                        aggregator=oci.data.connectivity.RegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorArgs(
                            description=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_description"],
                            identifier=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_identifier"],
                            key=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_key"],
                            name=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_name"],
                            type=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_type"],
                        ),
                        aggregator_key=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_key"],
                        created_by=var["registry_data_asset_default_connection_primary_schema_metadata_created_by"],
                        created_by_name=var["registry_data_asset_default_connection_primary_schema_metadata_created_by_name"],
                        identifier_path=var["registry_data_asset_default_connection_primary_schema_metadata_identifier_path"],
                        info_fields=var["registry_data_asset_default_connection_primary_schema_metadata_info_fields"],
                        is_favorite=var["registry_data_asset_default_connection_primary_schema_metadata_is_favorite"],
                        labels=var["registry_data_asset_default_connection_primary_schema_metadata_labels"],
                        registry_version=var["registry_data_asset_default_connection_primary_schema_metadata_registry_version"],
                        time_created=var["registry_data_asset_default_connection_primary_schema_metadata_time_created"],
                        time_updated=var["registry_data_asset_default_connection_primary_schema_metadata_time_updated"],
                        updated_by=var["registry_data_asset_default_connection_primary_schema_metadata_updated_by"],
                        updated_by_name=var["registry_data_asset_default_connection_primary_schema_metadata_updated_by_name"],
                    ),
                    model_version=var["registry_data_asset_default_connection_primary_schema_model_version"],
                    object_status=var["registry_data_asset_default_connection_primary_schema_object_status"],
                    object_version=var["registry_data_asset_default_connection_primary_schema_object_version"],
                    parent_ref=oci.data.connectivity.RegistryDataAssetDefaultConnectionPrimarySchemaParentRefArgs(
                        parent=var["registry_data_asset_default_connection_primary_schema_parent_ref_parent"],
                    ),
                    resource_name=var["registry_data_asset_default_connection_primary_schema_resource_name"],
                ),
                properties=var["registry_data_asset_default_connection_properties"],
                registry_metadata=oci.data.connectivity.RegistryDataAssetDefaultConnectionRegistryMetadataArgs(
                    aggregator_key=var["registry_data_asset_default_connection_registry_metadata_aggregator_key"],
                    created_by_user_id=oci_identity_user["test_user"]["id"],
                    created_by_user_name=oci_identity_user["test_user"]["name"],
                    is_favorite=var["registry_data_asset_default_connection_registry_metadata_is_favorite"],
                    key=var["registry_data_asset_default_connection_registry_metadata_key"],
                    labels=var["registry_data_asset_default_connection_registry_metadata_labels"],
                    registry_version=var["registry_data_asset_default_connection_registry_metadata_registry_version"],
                    time_created=var["registry_data_asset_default_connection_registry_metadata_time_created"],
                    time_updated=var["registry_data_asset_default_connection_registry_metadata_time_updated"],
                    updated_by_user_id=oci_identity_user["test_user"]["id"],
                    updated_by_user_name=oci_identity_user["test_user"]["name"],
                ),
                type=var["registry_data_asset_default_connection_type"],
            ),
            description=var["registry_data_asset_description"],
            external_key=var["registry_data_asset_external_key"],
            key=var["registry_data_asset_key"],
            metadata=oci.data.connectivity.RegistryDataAssetMetadataArgs(
                aggregator=oci.data.connectivity.RegistryDataAssetMetadataAggregatorArgs(
                    description=var["registry_data_asset_metadata_aggregator_description"],
                    identifier=var["registry_data_asset_metadata_aggregator_identifier"],
                    key=var["registry_data_asset_metadata_aggregator_key"],
                    name=var["registry_data_asset_metadata_aggregator_name"],
                    type=var["registry_data_asset_metadata_aggregator_type"],
                ),
                aggregator_key=var["registry_data_asset_metadata_aggregator_key"],
                created_by=var["registry_data_asset_metadata_created_by"],
                created_by_name=var["registry_data_asset_metadata_created_by_name"],
                identifier_path=var["registry_data_asset_metadata_identifier_path"],
                info_fields=var["registry_data_asset_metadata_info_fields"],
                is_favorite=var["registry_data_asset_metadata_is_favorite"],
                labels=var["registry_data_asset_metadata_labels"],
                registry_version=var["registry_data_asset_metadata_registry_version"],
                time_created=var["registry_data_asset_metadata_time_created"],
                time_updated=var["registry_data_asset_metadata_time_updated"],
                updated_by=var["registry_data_asset_metadata_updated_by"],
                updated_by_name=var["registry_data_asset_metadata_updated_by_name"],
            ),
            model_type=var["registry_data_asset_model_type"],
            model_version=var["registry_data_asset_model_version"],
            native_type_system=oci.data.connectivity.RegistryDataAssetNativeTypeSystemArgs(
                description=var["registry_data_asset_native_type_system_description"],
                identifier=var["registry_data_asset_native_type_system_identifier"],
                key=var["registry_data_asset_native_type_system_key"],
                model_type=var["registry_data_asset_native_type_system_model_type"],
                model_version=var["registry_data_asset_native_type_system_model_version"],
                name=var["registry_data_asset_native_type_system_name"],
                object_status=var["registry_data_asset_native_type_system_object_status"],
                object_version=var["registry_data_asset_native_type_system_object_version"],
                parent_ref=oci.data.connectivity.RegistryDataAssetNativeTypeSystemParentRefArgs(
                    parent=var["registry_data_asset_native_type_system_parent_ref_parent"],
                ),
                type_mapping_from=var["registry_data_asset_native_type_system_type_mapping_from"],
                type_mapping_to=var["registry_data_asset_native_type_system_type_mapping_to"],
                types=[oci.data.connectivity.RegistryDataAssetNativeTypeSystemTypeArgs(
                    model_type=var["registry_data_asset_native_type_system_types_model_type"],
                    config_definition=oci.data.connectivity.RegistryDataAssetNativeTypeSystemTypeConfigDefinitionArgs(
                        config_parameter_definitions=[{
                            "classFieldName": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_class_field_name"],
                            "defaultValue": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_default_value"],
                            "description": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_description"],
                            "isClassFieldValue": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_is_class_field_value"],
                            "isStatic": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_is_static"],
                            "parameterName": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_parameter_name"],
                            "parameterType": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_parameter_type"],
                        }],
                        is_contained=var["registry_data_asset_native_type_system_types_config_definition_is_contained"],
                        key=var["registry_data_asset_native_type_system_types_config_definition_key"],
                        model_type=var["registry_data_asset_native_type_system_types_config_definition_model_type"],
                        model_version=var["registry_data_asset_native_type_system_types_config_definition_model_version"],
                        name=var["registry_data_asset_native_type_system_types_config_definition_name"],
                        object_status=var["registry_data_asset_native_type_system_types_config_definition_object_status"],
                        parent_ref=oci.data.connectivity.RegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRefArgs(
                            parent=var["registry_data_asset_native_type_system_types_config_definition_parent_ref_parent"],
                        ),
                    ),
                    description=var["registry_data_asset_native_type_system_types_description"],
                    dt_type=var["registry_data_asset_native_type_system_types_dt_type"],
                    key=var["registry_data_asset_native_type_system_types_key"],
                    model_version=var["registry_data_asset_native_type_system_types_model_version"],
                    name=var["registry_data_asset_native_type_system_types_name"],
                    object_status=var["registry_data_asset_native_type_system_types_object_status"],
                    parent_ref=oci.data.connectivity.RegistryDataAssetNativeTypeSystemTypeParentRefArgs(
                        parent=var["registry_data_asset_native_type_system_types_parent_ref_parent"],
                    ),
                    type_system_name=var["registry_data_asset_native_type_system_types_type_system_name"],
                )],
            ),
            object_status=var["registry_data_asset_object_status"],
            object_version=var["registry_data_asset_object_version"],
            registry_metadata=oci.data.connectivity.RegistryDataAssetRegistryMetadataArgs(
                aggregator_key=var["registry_data_asset_registry_metadata_aggregator_key"],
                created_by_user_id=oci_identity_user["test_user"]["id"],
                created_by_user_name=oci_identity_user["test_user"]["name"],
                is_favorite=var["registry_data_asset_registry_metadata_is_favorite"],
                key=var["registry_data_asset_registry_metadata_key"],
                labels=var["registry_data_asset_registry_metadata_labels"],
                registry_version=var["registry_data_asset_registry_metadata_registry_version"],
                time_created=var["registry_data_asset_registry_metadata_time_created"],
                time_updated=var["registry_data_asset_registry_metadata_time_updated"],
                updated_by_user_id=oci_identity_user["test_user"]["id"],
                updated_by_user_name=oci_identity_user["test_user"]["name"],
            ))
        ```

        ## Import

        RegistryDataAssets can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:DataConnectivity/registryDataAsset:RegistryDataAsset test_registry_data_asset "registries/{registryId}/dataAssets/{dataAssetKey}"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] asset_properties: (Updatable) Additional properties for the data asset.
        :param pulumi.Input[pulumi.InputType['RegistryDataAssetDefaultConnectionArgs']] default_connection: (Updatable) The default connection key.
        :param pulumi.Input[str] description: (Updatable) A user defined description for the object.
        :param pulumi.Input[str] external_key: (Updatable) The external key for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[pulumi.InputType['RegistryDataAssetMetadataArgs']] metadata: (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        :param pulumi.Input[str] model_type: (Updatable) The property which disciminates the subtypes.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[pulumi.InputType['RegistryDataAssetNativeTypeSystemArgs']] native_type_system: (Updatable) The type system maps from and to a type.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param pulumi.Input[Mapping[str, Any]] properties: (Updatable) All the properties for the data asset in a key-value map format.
        :param pulumi.Input[str] registry_id: The registry Ocid.
        :param pulumi.Input[pulumi.InputType['RegistryDataAssetRegistryMetadataArgs']] registry_metadata: (Updatable) Information about the object and its parent.
        :param pulumi.Input[str] type: (Updatable) Specific DataAsset Type
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegistryDataAssetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Registry Data Asset resource in Oracle Cloud Infrastructure Data Connectivity service.

        Creates a data asset with default connection.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_registry_data_asset = oci.data_connectivity.RegistryDataAsset("testRegistryDataAsset",
            identifier=var["registry_data_asset_identifier"],
            properties=var["registry_data_asset_properties"],
            registry_id=oci_data_connectivity_registry["test_registry"]["id"],
            type=var["registry_data_asset_type"],
            asset_properties=var["registry_data_asset_asset_properties"],
            default_connection=oci.data.connectivity.RegistryDataAssetDefaultConnectionArgs(
                identifier=var["registry_data_asset_default_connection_identifier"],
                key=var["registry_data_asset_default_connection_key"],
                name=var["registry_data_asset_default_connection_name"],
                connection_properties=[oci.data.connectivity.RegistryDataAssetDefaultConnectionConnectionPropertyArgs(
                    name=var["registry_data_asset_default_connection_connection_properties_name"],
                    value=var["registry_data_asset_default_connection_connection_properties_value"],
                )],
                description=var["registry_data_asset_default_connection_description"],
                is_default=var["registry_data_asset_default_connection_is_default"],
                metadata=oci.data.connectivity.RegistryDataAssetDefaultConnectionMetadataArgs(
                    aggregator=oci.data.connectivity.RegistryDataAssetDefaultConnectionMetadataAggregatorArgs(
                        description=var["registry_data_asset_default_connection_metadata_aggregator_description"],
                        identifier=var["registry_data_asset_default_connection_metadata_aggregator_identifier"],
                        key=var["registry_data_asset_default_connection_metadata_aggregator_key"],
                        name=var["registry_data_asset_default_connection_metadata_aggregator_name"],
                        type=var["registry_data_asset_default_connection_metadata_aggregator_type"],
                    ),
                    aggregator_key=var["registry_data_asset_default_connection_metadata_aggregator_key"],
                    created_by=var["registry_data_asset_default_connection_metadata_created_by"],
                    created_by_name=var["registry_data_asset_default_connection_metadata_created_by_name"],
                    identifier_path=var["registry_data_asset_default_connection_metadata_identifier_path"],
                    info_fields=var["registry_data_asset_default_connection_metadata_info_fields"],
                    is_favorite=var["registry_data_asset_default_connection_metadata_is_favorite"],
                    labels=var["registry_data_asset_default_connection_metadata_labels"],
                    registry_version=var["registry_data_asset_default_connection_metadata_registry_version"],
                    time_created=var["registry_data_asset_default_connection_metadata_time_created"],
                    time_updated=var["registry_data_asset_default_connection_metadata_time_updated"],
                    updated_by=var["registry_data_asset_default_connection_metadata_updated_by"],
                    updated_by_name=var["registry_data_asset_default_connection_metadata_updated_by_name"],
                ),
                model_type=var["registry_data_asset_default_connection_model_type"],
                model_version=var["registry_data_asset_default_connection_model_version"],
                object_status=var["registry_data_asset_default_connection_object_status"],
                object_version=var["registry_data_asset_default_connection_object_version"],
                primary_schema=oci.data.connectivity.RegistryDataAssetDefaultConnectionPrimarySchemaArgs(
                    identifier=var["registry_data_asset_default_connection_primary_schema_identifier"],
                    key=var["registry_data_asset_default_connection_primary_schema_key"],
                    model_type=var["registry_data_asset_default_connection_primary_schema_model_type"],
                    name=var["registry_data_asset_default_connection_primary_schema_name"],
                    default_connection=var["registry_data_asset_default_connection_primary_schema_default_connection"],
                    description=var["registry_data_asset_default_connection_primary_schema_description"],
                    external_key=var["registry_data_asset_default_connection_primary_schema_external_key"],
                    is_has_containers=var["registry_data_asset_default_connection_primary_schema_is_has_containers"],
                    metadata=oci.data.connectivity.RegistryDataAssetDefaultConnectionPrimarySchemaMetadataArgs(
                        aggregator=oci.data.connectivity.RegistryDataAssetDefaultConnectionPrimarySchemaMetadataAggregatorArgs(
                            description=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_description"],
                            identifier=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_identifier"],
                            key=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_key"],
                            name=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_name"],
                            type=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_type"],
                        ),
                        aggregator_key=var["registry_data_asset_default_connection_primary_schema_metadata_aggregator_key"],
                        created_by=var["registry_data_asset_default_connection_primary_schema_metadata_created_by"],
                        created_by_name=var["registry_data_asset_default_connection_primary_schema_metadata_created_by_name"],
                        identifier_path=var["registry_data_asset_default_connection_primary_schema_metadata_identifier_path"],
                        info_fields=var["registry_data_asset_default_connection_primary_schema_metadata_info_fields"],
                        is_favorite=var["registry_data_asset_default_connection_primary_schema_metadata_is_favorite"],
                        labels=var["registry_data_asset_default_connection_primary_schema_metadata_labels"],
                        registry_version=var["registry_data_asset_default_connection_primary_schema_metadata_registry_version"],
                        time_created=var["registry_data_asset_default_connection_primary_schema_metadata_time_created"],
                        time_updated=var["registry_data_asset_default_connection_primary_schema_metadata_time_updated"],
                        updated_by=var["registry_data_asset_default_connection_primary_schema_metadata_updated_by"],
                        updated_by_name=var["registry_data_asset_default_connection_primary_schema_metadata_updated_by_name"],
                    ),
                    model_version=var["registry_data_asset_default_connection_primary_schema_model_version"],
                    object_status=var["registry_data_asset_default_connection_primary_schema_object_status"],
                    object_version=var["registry_data_asset_default_connection_primary_schema_object_version"],
                    parent_ref=oci.data.connectivity.RegistryDataAssetDefaultConnectionPrimarySchemaParentRefArgs(
                        parent=var["registry_data_asset_default_connection_primary_schema_parent_ref_parent"],
                    ),
                    resource_name=var["registry_data_asset_default_connection_primary_schema_resource_name"],
                ),
                properties=var["registry_data_asset_default_connection_properties"],
                registry_metadata=oci.data.connectivity.RegistryDataAssetDefaultConnectionRegistryMetadataArgs(
                    aggregator_key=var["registry_data_asset_default_connection_registry_metadata_aggregator_key"],
                    created_by_user_id=oci_identity_user["test_user"]["id"],
                    created_by_user_name=oci_identity_user["test_user"]["name"],
                    is_favorite=var["registry_data_asset_default_connection_registry_metadata_is_favorite"],
                    key=var["registry_data_asset_default_connection_registry_metadata_key"],
                    labels=var["registry_data_asset_default_connection_registry_metadata_labels"],
                    registry_version=var["registry_data_asset_default_connection_registry_metadata_registry_version"],
                    time_created=var["registry_data_asset_default_connection_registry_metadata_time_created"],
                    time_updated=var["registry_data_asset_default_connection_registry_metadata_time_updated"],
                    updated_by_user_id=oci_identity_user["test_user"]["id"],
                    updated_by_user_name=oci_identity_user["test_user"]["name"],
                ),
                type=var["registry_data_asset_default_connection_type"],
            ),
            description=var["registry_data_asset_description"],
            external_key=var["registry_data_asset_external_key"],
            key=var["registry_data_asset_key"],
            metadata=oci.data.connectivity.RegistryDataAssetMetadataArgs(
                aggregator=oci.data.connectivity.RegistryDataAssetMetadataAggregatorArgs(
                    description=var["registry_data_asset_metadata_aggregator_description"],
                    identifier=var["registry_data_asset_metadata_aggregator_identifier"],
                    key=var["registry_data_asset_metadata_aggregator_key"],
                    name=var["registry_data_asset_metadata_aggregator_name"],
                    type=var["registry_data_asset_metadata_aggregator_type"],
                ),
                aggregator_key=var["registry_data_asset_metadata_aggregator_key"],
                created_by=var["registry_data_asset_metadata_created_by"],
                created_by_name=var["registry_data_asset_metadata_created_by_name"],
                identifier_path=var["registry_data_asset_metadata_identifier_path"],
                info_fields=var["registry_data_asset_metadata_info_fields"],
                is_favorite=var["registry_data_asset_metadata_is_favorite"],
                labels=var["registry_data_asset_metadata_labels"],
                registry_version=var["registry_data_asset_metadata_registry_version"],
                time_created=var["registry_data_asset_metadata_time_created"],
                time_updated=var["registry_data_asset_metadata_time_updated"],
                updated_by=var["registry_data_asset_metadata_updated_by"],
                updated_by_name=var["registry_data_asset_metadata_updated_by_name"],
            ),
            model_type=var["registry_data_asset_model_type"],
            model_version=var["registry_data_asset_model_version"],
            native_type_system=oci.data.connectivity.RegistryDataAssetNativeTypeSystemArgs(
                description=var["registry_data_asset_native_type_system_description"],
                identifier=var["registry_data_asset_native_type_system_identifier"],
                key=var["registry_data_asset_native_type_system_key"],
                model_type=var["registry_data_asset_native_type_system_model_type"],
                model_version=var["registry_data_asset_native_type_system_model_version"],
                name=var["registry_data_asset_native_type_system_name"],
                object_status=var["registry_data_asset_native_type_system_object_status"],
                object_version=var["registry_data_asset_native_type_system_object_version"],
                parent_ref=oci.data.connectivity.RegistryDataAssetNativeTypeSystemParentRefArgs(
                    parent=var["registry_data_asset_native_type_system_parent_ref_parent"],
                ),
                type_mapping_from=var["registry_data_asset_native_type_system_type_mapping_from"],
                type_mapping_to=var["registry_data_asset_native_type_system_type_mapping_to"],
                types=[oci.data.connectivity.RegistryDataAssetNativeTypeSystemTypeArgs(
                    model_type=var["registry_data_asset_native_type_system_types_model_type"],
                    config_definition=oci.data.connectivity.RegistryDataAssetNativeTypeSystemTypeConfigDefinitionArgs(
                        config_parameter_definitions=[{
                            "classFieldName": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_class_field_name"],
                            "defaultValue": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_default_value"],
                            "description": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_description"],
                            "isClassFieldValue": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_is_class_field_value"],
                            "isStatic": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_is_static"],
                            "parameterName": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_parameter_name"],
                            "parameterType": var["registry_data_asset_native_type_system_types_config_definition_config_parameter_definitions_parameter_type"],
                        }],
                        is_contained=var["registry_data_asset_native_type_system_types_config_definition_is_contained"],
                        key=var["registry_data_asset_native_type_system_types_config_definition_key"],
                        model_type=var["registry_data_asset_native_type_system_types_config_definition_model_type"],
                        model_version=var["registry_data_asset_native_type_system_types_config_definition_model_version"],
                        name=var["registry_data_asset_native_type_system_types_config_definition_name"],
                        object_status=var["registry_data_asset_native_type_system_types_config_definition_object_status"],
                        parent_ref=oci.data.connectivity.RegistryDataAssetNativeTypeSystemTypeConfigDefinitionParentRefArgs(
                            parent=var["registry_data_asset_native_type_system_types_config_definition_parent_ref_parent"],
                        ),
                    ),
                    description=var["registry_data_asset_native_type_system_types_description"],
                    dt_type=var["registry_data_asset_native_type_system_types_dt_type"],
                    key=var["registry_data_asset_native_type_system_types_key"],
                    model_version=var["registry_data_asset_native_type_system_types_model_version"],
                    name=var["registry_data_asset_native_type_system_types_name"],
                    object_status=var["registry_data_asset_native_type_system_types_object_status"],
                    parent_ref=oci.data.connectivity.RegistryDataAssetNativeTypeSystemTypeParentRefArgs(
                        parent=var["registry_data_asset_native_type_system_types_parent_ref_parent"],
                    ),
                    type_system_name=var["registry_data_asset_native_type_system_types_type_system_name"],
                )],
            ),
            object_status=var["registry_data_asset_object_status"],
            object_version=var["registry_data_asset_object_version"],
            registry_metadata=oci.data.connectivity.RegistryDataAssetRegistryMetadataArgs(
                aggregator_key=var["registry_data_asset_registry_metadata_aggregator_key"],
                created_by_user_id=oci_identity_user["test_user"]["id"],
                created_by_user_name=oci_identity_user["test_user"]["name"],
                is_favorite=var["registry_data_asset_registry_metadata_is_favorite"],
                key=var["registry_data_asset_registry_metadata_key"],
                labels=var["registry_data_asset_registry_metadata_labels"],
                registry_version=var["registry_data_asset_registry_metadata_registry_version"],
                time_created=var["registry_data_asset_registry_metadata_time_created"],
                time_updated=var["registry_data_asset_registry_metadata_time_updated"],
                updated_by_user_id=oci_identity_user["test_user"]["id"],
                updated_by_user_name=oci_identity_user["test_user"]["name"],
            ))
        ```

        ## Import

        RegistryDataAssets can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:DataConnectivity/registryDataAsset:RegistryDataAsset test_registry_data_asset "registries/{registryId}/dataAssets/{dataAssetKey}"
        ```

        :param str resource_name: The name of the resource.
        :param RegistryDataAssetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegistryDataAssetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 default_connection: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetDefaultConnectionArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 external_key: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetMetadataArgs']]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 native_type_system: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetNativeTypeSystemArgs']]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 registry_id: Optional[pulumi.Input[str]] = None,
                 registry_metadata: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetRegistryMetadataArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegistryDataAssetArgs.__new__(RegistryDataAssetArgs)

            __props__.__dict__["asset_properties"] = asset_properties
            __props__.__dict__["default_connection"] = default_connection
            __props__.__dict__["description"] = description
            __props__.__dict__["external_key"] = external_key
            if identifier is None and not opts.urn:
                raise TypeError("Missing required property 'identifier'")
            __props__.__dict__["identifier"] = identifier
            __props__.__dict__["key"] = key
            __props__.__dict__["metadata"] = metadata
            if model_type is None and not opts.urn:
                raise TypeError("Missing required property 'model_type'")
            __props__.__dict__["model_type"] = model_type
            __props__.__dict__["model_version"] = model_version
            __props__.__dict__["name"] = name
            __props__.__dict__["native_type_system"] = native_type_system
            __props__.__dict__["object_status"] = object_status
            __props__.__dict__["object_version"] = object_version
            if properties is None and not opts.urn:
                raise TypeError("Missing required property 'properties'")
            __props__.__dict__["properties"] = properties
            if registry_id is None and not opts.urn:
                raise TypeError("Missing required property 'registry_id'")
            __props__.__dict__["registry_id"] = registry_id
            __props__.__dict__["registry_metadata"] = registry_metadata
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(RegistryDataAsset, __self__).__init__(
            'oci:DataConnectivity/registryDataAsset:RegistryDataAsset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asset_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            default_connection: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetDefaultConnectionArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            external_key: Optional[pulumi.Input[str]] = None,
            identifier: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetMetadataArgs']]] = None,
            model_type: Optional[pulumi.Input[str]] = None,
            model_version: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            native_type_system: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetNativeTypeSystemArgs']]] = None,
            object_status: Optional[pulumi.Input[int]] = None,
            object_version: Optional[pulumi.Input[int]] = None,
            properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            registry_id: Optional[pulumi.Input[str]] = None,
            registry_metadata: Optional[pulumi.Input[pulumi.InputType['RegistryDataAssetRegistryMetadataArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'RegistryDataAsset':
        """
        Get an existing RegistryDataAsset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] asset_properties: (Updatable) Additional properties for the data asset.
        :param pulumi.Input[pulumi.InputType['RegistryDataAssetDefaultConnectionArgs']] default_connection: (Updatable) The default connection key.
        :param pulumi.Input[str] description: (Updatable) A user defined description for the object.
        :param pulumi.Input[str] external_key: (Updatable) The external key for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[pulumi.InputType['RegistryDataAssetMetadataArgs']] metadata: (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        :param pulumi.Input[str] model_type: (Updatable) The property which disciminates the subtypes.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[pulumi.InputType['RegistryDataAssetNativeTypeSystemArgs']] native_type_system: (Updatable) The type system maps from and to a type.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) The version of the object that is used to track changes in the object instance.
        :param pulumi.Input[Mapping[str, Any]] properties: (Updatable) All the properties for the data asset in a key-value map format.
        :param pulumi.Input[str] registry_id: The registry Ocid.
        :param pulumi.Input[pulumi.InputType['RegistryDataAssetRegistryMetadataArgs']] registry_metadata: (Updatable) Information about the object and its parent.
        :param pulumi.Input[str] type: (Updatable) Specific DataAsset Type
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegistryDataAssetState.__new__(_RegistryDataAssetState)

        __props__.__dict__["asset_properties"] = asset_properties
        __props__.__dict__["default_connection"] = default_connection
        __props__.__dict__["description"] = description
        __props__.__dict__["external_key"] = external_key
        __props__.__dict__["identifier"] = identifier
        __props__.__dict__["key"] = key
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["model_type"] = model_type
        __props__.__dict__["model_version"] = model_version
        __props__.__dict__["name"] = name
        __props__.__dict__["native_type_system"] = native_type_system
        __props__.__dict__["object_status"] = object_status
        __props__.__dict__["object_version"] = object_version
        __props__.__dict__["properties"] = properties
        __props__.__dict__["registry_id"] = registry_id
        __props__.__dict__["registry_metadata"] = registry_metadata
        __props__.__dict__["type"] = type
        return RegistryDataAsset(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assetProperties")
    def asset_properties(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Additional properties for the data asset.
        """
        return pulumi.get(self, "asset_properties")

    @property
    @pulumi.getter(name="defaultConnection")
    def default_connection(self) -> pulumi.Output['outputs.RegistryDataAssetDefaultConnection']:
        """
        (Updatable) The default connection key.
        """
        return pulumi.get(self, "default_connection")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Updatable) A user defined description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalKey")
    def external_key(self) -> pulumi.Output[str]:
        """
        (Updatable) The external key for the object.
        """
        return pulumi.get(self, "external_key")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.RegistryDataAssetMetadata']:
        """
        (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Output[str]:
        """
        (Updatable) The property which disciminates the subtypes.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> pulumi.Output[str]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nativeTypeSystem")
    def native_type_system(self) -> pulumi.Output['outputs.RegistryDataAssetNativeTypeSystem']:
        """
        (Updatable) The type system maps from and to a type.
        """
        return pulumi.get(self, "native_type_system")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> pulumi.Output[int]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> pulumi.Output[int]:
        """
        (Updatable) The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) All the properties for the data asset in a key-value map format.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> pulumi.Output[str]:
        """
        The registry Ocid.
        """
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> pulumi.Output['outputs.RegistryDataAssetRegistryMetadata']:
        """
        (Updatable) Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        (Updatable) Specific DataAsset Type
        """
        return pulumi.get(self, "type")

