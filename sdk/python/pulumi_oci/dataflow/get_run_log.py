# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRunLogResult',
    'AwaitableGetRunLogResult',
    'get_run_log',
    'get_run_log_output',
]

@pulumi.output_type
class GetRunLogResult:
    """
    A collection of values returned by getRunLog.
    """
    def __init__(__self__, base64_encode_content=None, content=None, content_type=None, id=None, name=None, run_id=None):
        if base64_encode_content and not isinstance(base64_encode_content, bool):
            raise TypeError("Expected argument 'base64_encode_content' to be a bool")
        pulumi.set(__self__, "base64_encode_content", base64_encode_content)
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        pulumi.set(__self__, "content", content)
        if content_type and not isinstance(content_type, str):
            raise TypeError("Expected argument 'content_type' to be a str")
        pulumi.set(__self__, "content_type", content_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if run_id and not isinstance(run_id, str):
            raise TypeError("Expected argument 'run_id' to be a str")
        pulumi.set(__self__, "run_id", run_id)

    @property
    @pulumi.getter(name="base64EncodeContent")
    def base64_encode_content(self) -> Optional[bool]:
        return pulumi.get(self, "base64_encode_content")

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of the run log.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> str:
        """
        The content type of the run log.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="runId")
    def run_id(self) -> str:
        return pulumi.get(self, "run_id")


class AwaitableGetRunLogResult(GetRunLogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRunLogResult(
            base64_encode_content=self.base64_encode_content,
            content=self.content,
            content_type=self.content_type,
            id=self.id,
            name=self.name,
            run_id=self.run_id)


def get_run_log(base64_encode_content: Optional[bool] = None,
                name: Optional[str] = None,
                run_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRunLogResult:
    """
    This data source provides details about a specific Run Log resource in Oracle Cloud Infrastructure Data Flow service.

    Retrieves the content of an run log.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_run_log = oci.DataFlow.get_run_log(name=var["run_log_name"],
        run_id=oci_dataflow_run["test_run"]["id"])
    ```


    :param str name: The name of the log. Avoid entering confidential information.
    :param str run_id: The unique ID for the run
    """
    __args__ = dict()
    __args__['base64EncodeContent'] = base64_encode_content
    __args__['name'] = name
    __args__['runId'] = run_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataFlow/getRunLog:getRunLog', __args__, opts=opts, typ=GetRunLogResult).value

    return AwaitableGetRunLogResult(
        base64_encode_content=pulumi.get(__ret__, 'base64_encode_content'),
        content=pulumi.get(__ret__, 'content'),
        content_type=pulumi.get(__ret__, 'content_type'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        run_id=pulumi.get(__ret__, 'run_id'))


@_utilities.lift_output_func(get_run_log)
def get_run_log_output(base64_encode_content: Optional[pulumi.Input[Optional[bool]]] = None,
                       name: Optional[pulumi.Input[str]] = None,
                       run_id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRunLogResult]:
    """
    This data source provides details about a specific Run Log resource in Oracle Cloud Infrastructure Data Flow service.

    Retrieves the content of an run log.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_run_log = oci.DataFlow.get_run_log(name=var["run_log_name"],
        run_id=oci_dataflow_run["test_run"]["id"])
    ```


    :param str name: The name of the log. Avoid entering confidential information.
    :param str run_id: The unique ID for the run
    """
    ...
