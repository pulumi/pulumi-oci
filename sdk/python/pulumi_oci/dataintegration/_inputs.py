# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'WorkspaceApplicationDependentObjectMetadataArgs',
    'WorkspaceApplicationDependentObjectMetadataArgsDict',
    'WorkspaceApplicationMetadataArgs',
    'WorkspaceApplicationMetadataArgsDict',
    'WorkspaceApplicationMetadataAggregatorArgs',
    'WorkspaceApplicationMetadataAggregatorArgsDict',
    'WorkspaceApplicationMetadataCountStatisticArgs',
    'WorkspaceApplicationMetadataCountStatisticArgsDict',
    'WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgsDict',
    'WorkspaceApplicationParentRefArgs',
    'WorkspaceApplicationParentRefArgsDict',
    'WorkspaceApplicationPatchDependentObjectMetadataArgs',
    'WorkspaceApplicationPatchDependentObjectMetadataArgsDict',
    'WorkspaceApplicationPatchMetadataArgs',
    'WorkspaceApplicationPatchMetadataArgsDict',
    'WorkspaceApplicationPatchMetadataAggregatorArgs',
    'WorkspaceApplicationPatchMetadataAggregatorArgsDict',
    'WorkspaceApplicationPatchMetadataCountStatisticArgs',
    'WorkspaceApplicationPatchMetadataCountStatisticArgsDict',
    'WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgsDict',
    'WorkspaceApplicationPatchParentRefArgs',
    'WorkspaceApplicationPatchParentRefArgsDict',
    'WorkspaceApplicationPatchPatchObjectMetadataArgs',
    'WorkspaceApplicationPatchPatchObjectMetadataArgsDict',
    'WorkspaceApplicationPatchRegistryMetadataArgs',
    'WorkspaceApplicationPatchRegistryMetadataArgsDict',
    'WorkspaceApplicationPublishedObjectMetadataArgs',
    'WorkspaceApplicationPublishedObjectMetadataArgsDict',
    'WorkspaceApplicationRegistryMetadataArgs',
    'WorkspaceApplicationRegistryMetadataArgsDict',
    'WorkspaceApplicationScheduleFrequencyDetailsArgs',
    'WorkspaceApplicationScheduleFrequencyDetailsArgsDict',
    'WorkspaceApplicationScheduleFrequencyDetailsTimeArgs',
    'WorkspaceApplicationScheduleFrequencyDetailsTimeArgsDict',
    'WorkspaceApplicationScheduleMetadataArgs',
    'WorkspaceApplicationScheduleMetadataArgsDict',
    'WorkspaceApplicationScheduleMetadataAggregatorArgs',
    'WorkspaceApplicationScheduleMetadataAggregatorArgsDict',
    'WorkspaceApplicationScheduleMetadataCountStatisticArgs',
    'WorkspaceApplicationScheduleMetadataCountStatisticArgsDict',
    'WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgsDict',
    'WorkspaceApplicationScheduleParentRefArgs',
    'WorkspaceApplicationScheduleParentRefArgsDict',
    'WorkspaceApplicationScheduleRegistryMetadataArgs',
    'WorkspaceApplicationScheduleRegistryMetadataArgsDict',
    'WorkspaceApplicationSourceApplicationInfoArgs',
    'WorkspaceApplicationSourceApplicationInfoArgsDict',
    'WorkspaceApplicationTaskScheduleLastRunDetailArgs',
    'WorkspaceApplicationTaskScheduleLastRunDetailArgsDict',
    'WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs',
    'WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgsDict',
    'WorkspaceApplicationTaskScheduleMetadataArgs',
    'WorkspaceApplicationTaskScheduleMetadataArgsDict',
    'WorkspaceApplicationTaskScheduleMetadataAggregatorArgs',
    'WorkspaceApplicationTaskScheduleMetadataAggregatorArgsDict',
    'WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs',
    'WorkspaceApplicationTaskScheduleMetadataCountStatisticArgsDict',
    'WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgsDict',
    'WorkspaceApplicationTaskScheduleParentRefArgs',
    'WorkspaceApplicationTaskScheduleParentRefArgsDict',
    'WorkspaceApplicationTaskScheduleRegistryMetadataArgs',
    'WorkspaceApplicationTaskScheduleRegistryMetadataArgsDict',
    'WorkspaceApplicationTaskScheduleScheduleRefArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefArgsDict',
    'WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgsDict',
    'WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgsDict',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataArgsDict',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgsDict',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgsDict',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgsDict',
    'WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefParentRefArgsDict',
    'WorkspaceExportRequestExportedItemArgs',
    'WorkspaceExportRequestExportedItemArgsDict',
    'WorkspaceFolderMetadataArgs',
    'WorkspaceFolderMetadataArgsDict',
    'WorkspaceFolderMetadataAggregatorArgs',
    'WorkspaceFolderMetadataAggregatorArgsDict',
    'WorkspaceFolderMetadataCountStatisticArgs',
    'WorkspaceFolderMetadataCountStatisticArgsDict',
    'WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgsDict',
    'WorkspaceFolderParentRefArgs',
    'WorkspaceFolderParentRefArgsDict',
    'WorkspaceFolderRegistryMetadataArgs',
    'WorkspaceFolderRegistryMetadataArgsDict',
    'WorkspaceImportRequestImportConflictResolutionArgs',
    'WorkspaceImportRequestImportConflictResolutionArgsDict',
    'WorkspaceImportRequestImportedObjectArgs',
    'WorkspaceImportRequestImportedObjectArgsDict',
    'WorkspaceProjectMetadataArgs',
    'WorkspaceProjectMetadataArgsDict',
    'WorkspaceProjectMetadataAggregatorArgs',
    'WorkspaceProjectMetadataAggregatorArgsDict',
    'WorkspaceProjectMetadataCountStatisticArgs',
    'WorkspaceProjectMetadataCountStatisticArgsDict',
    'WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgsDict',
    'WorkspaceProjectParentRefArgs',
    'WorkspaceProjectParentRefArgsDict',
    'WorkspaceProjectRegistryMetadataArgs',
    'WorkspaceProjectRegistryMetadataArgsDict',
    'WorkspaceTaskAuthConfigArgs',
    'WorkspaceTaskAuthConfigArgsDict',
    'WorkspaceTaskAuthConfigParentRefArgs',
    'WorkspaceTaskAuthConfigParentRefArgsDict',
    'WorkspaceTaskCancelRestCallConfigArgs',
    'WorkspaceTaskCancelRestCallConfigArgsDict',
    'WorkspaceTaskCancelRestCallConfigConfigValuesArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesArgsDict',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict',
    'WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgsDict',
    'WorkspaceTaskConfigProviderDelegateArgs',
    'WorkspaceTaskConfigProviderDelegateArgsDict',
    'WorkspaceTaskConfigProviderDelegateBindingArgs',
    'WorkspaceTaskConfigProviderDelegateBindingArgsDict',
    'WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs',
    'WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgsDict',
    'WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs',
    'WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgsDict',
    'WorkspaceTaskExecuteRestCallConfigArgs',
    'WorkspaceTaskExecuteRestCallConfigArgsDict',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesArgsDict',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgsDict',
    'WorkspaceTaskInputPortArgs',
    'WorkspaceTaskInputPortArgsDict',
    'WorkspaceTaskInputPortConfigValuesArgs',
    'WorkspaceTaskInputPortConfigValuesArgsDict',
    'WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskInputPortConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskInputPortConfigValuesParentRefArgs',
    'WorkspaceTaskInputPortConfigValuesParentRefArgsDict',
    'WorkspaceTaskInputPortParentRefArgs',
    'WorkspaceTaskInputPortParentRefArgsDict',
    'WorkspaceTaskMetadataArgs',
    'WorkspaceTaskMetadataArgsDict',
    'WorkspaceTaskMetadataAggregatorArgs',
    'WorkspaceTaskMetadataAggregatorArgsDict',
    'WorkspaceTaskMetadataCountStatisticArgs',
    'WorkspaceTaskMetadataCountStatisticArgsDict',
    'WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgsDict',
    'WorkspaceTaskOpConfigValuesArgs',
    'WorkspaceTaskOpConfigValuesArgsDict',
    'WorkspaceTaskOpConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskOpConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs',
    'WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgsDict',
    'WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs',
    'WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgsDict',
    'WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs',
    'WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgsDict',
    'WorkspaceTaskOpConfigValuesParentRefArgs',
    'WorkspaceTaskOpConfigValuesParentRefArgsDict',
    'WorkspaceTaskOutputPortArgs',
    'WorkspaceTaskOutputPortArgsDict',
    'WorkspaceTaskOutputPortConfigValuesArgs',
    'WorkspaceTaskOutputPortConfigValuesArgsDict',
    'WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskOutputPortConfigValuesParentRefArgs',
    'WorkspaceTaskOutputPortConfigValuesParentRefArgsDict',
    'WorkspaceTaskOutputPortParentRefArgs',
    'WorkspaceTaskOutputPortParentRefArgsDict',
    'WorkspaceTaskParameterArgs',
    'WorkspaceTaskParameterArgsDict',
    'WorkspaceTaskParameterConfigValuesArgs',
    'WorkspaceTaskParameterConfigValuesArgsDict',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgsDict',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgsDict',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgsDict',
    'WorkspaceTaskParameterConfigValuesParentRefArgs',
    'WorkspaceTaskParameterConfigValuesParentRefArgsDict',
    'WorkspaceTaskParameterParentRefArgs',
    'WorkspaceTaskParameterParentRefArgsDict',
    'WorkspaceTaskParentRefArgs',
    'WorkspaceTaskParentRefArgsDict',
    'WorkspaceTaskPollRestCallConfigArgs',
    'WorkspaceTaskPollRestCallConfigArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict',
    'WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgsDict',
    'WorkspaceTaskRegistryMetadataArgs',
    'WorkspaceTaskRegistryMetadataArgsDict',
    'WorkspaceTaskTypedExpressionArgs',
    'WorkspaceTaskTypedExpressionArgsDict',
    'WorkspaceTaskTypedExpressionConfigValuesArgs',
    'WorkspaceTaskTypedExpressionConfigValuesArgsDict',
    'WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgsDict',
    'WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs',
    'WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgsDict',
    'WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs',
    'WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgsDict',
    'WorkspaceTaskTypedExpressionConfigValuesParentRefArgs',
    'WorkspaceTaskTypedExpressionConfigValuesParentRefArgsDict',
    'WorkspaceTaskTypedExpressionParentRefArgs',
    'WorkspaceTaskTypedExpressionParentRefArgsDict',
    'GetWorkspaceApplicationPatchesFilterArgs',
    'GetWorkspaceApplicationPatchesFilterArgsDict',
    'GetWorkspaceApplicationSchedulesFilterArgs',
    'GetWorkspaceApplicationSchedulesFilterArgsDict',
    'GetWorkspaceApplicationTaskSchedulesFilterArgs',
    'GetWorkspaceApplicationTaskSchedulesFilterArgsDict',
    'GetWorkspaceApplicationsFilterArgs',
    'GetWorkspaceApplicationsFilterArgsDict',
    'GetWorkspaceExportRequestsFilterArgs',
    'GetWorkspaceExportRequestsFilterArgsDict',
    'GetWorkspaceFoldersFilterArgs',
    'GetWorkspaceFoldersFilterArgsDict',
    'GetWorkspaceImportRequestsFilterArgs',
    'GetWorkspaceImportRequestsFilterArgsDict',
    'GetWorkspaceProjectsFilterArgs',
    'GetWorkspaceProjectsFilterArgsDict',
    'GetWorkspaceTasksFilterArgs',
    'GetWorkspaceTasksFilterArgsDict',
    'GetWorkspacesFilterArgs',
    'GetWorkspacesFilterArgsDict',
]

MYPY = False

if not MYPY:
    class WorkspaceApplicationDependentObjectMetadataArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[str]]
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Currently not used on application creation. Reserved for future.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        name_path: NotRequired[pulumi.Input[str]]
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        object_version: NotRequired[pulumi.Input[int]]
        """
        The object version.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the object in patch.
        """
elif False:
    WorkspaceApplicationDependentObjectMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationDependentObjectMetadataArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The patch action indicating if object was created, updated, or deleted.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) Currently not used on application creation. Reserved for future.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] name_path: The fully qualified path of the published object, which would include its project and folder.
        :param pulumi.Input[int] object_version: The object version.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Currently not used on application creation. Reserved for future.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceApplicationMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        The owning object key for this object.
        """
        aggregators: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataAggregatorArgsDict']]]]
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        count_statistics: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticArgsDict']]]]
        """
        A count statistics.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        created_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        identifier_path: NotRequired[pulumi.Input[str]]
        """
        The full path to identify this object.
        """
        info_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Information property fields.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether this object is a favorite or not.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        The registry version of the object.
        """
        time_created: NotRequired[pulumi.Input[str]]
        """
        The date and time the application was created, in the timestamp format defined by RFC3339.
        """
        time_updated: NotRequired[pulumi.Input[str]]
        """
        The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        """
        updated_by: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
        updated_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
elif False:
    WorkspaceApplicationMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version of the object.
        :param pulumi.Input[str] time_created: The date and time the application was created, in the timestamp format defined by RFC3339.
        :param pulumi.Input[str] time_updated: The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the application was created, in the timestamp format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


if not MYPY:
    class WorkspaceApplicationMetadataAggregatorArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Currently not used on application creation. Reserved for future.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the object in patch.
        """
elif False:
    WorkspaceApplicationMetadataAggregatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) Currently not used on application creation. Reserved for future.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Currently not used on application creation. Reserved for future.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceApplicationMetadataCountStatisticArgsDict(TypedDict):
        object_type_count_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgsDict']]]]
        """
        The array of statistics.
        """
elif False:
    WorkspaceApplicationMetadataCountStatisticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


if not MYPY:
    class WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgsDict(TypedDict):
        object_count: NotRequired[pulumi.Input[str]]
        """
        The value for the count statistic object.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        The type of object for the count statistic object.
        """
elif False:
    WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class WorkspaceApplicationParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        Key of the root document object.
        """
elif False:
    WorkspaceApplicationParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceApplicationPatchDependentObjectMetadataArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[str]]
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        The object's key.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        name_path: NotRequired[pulumi.Input[str]]
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        object_version: NotRequired[pulumi.Input[int]]
        """
        The object version.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the object in patch.
        """
elif False:
    WorkspaceApplicationPatchDependentObjectMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationPatchDependentObjectMetadataArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The patch action indicating if object was created, updated, or deleted.
        :param pulumi.Input[str] identifier: Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: The object's key.
        :param pulumi.Input[str] name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] name_path: The fully qualified path of the published object, which would include its project and folder.
        :param pulumi.Input[int] object_version: The object version.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The object's key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceApplicationPatchMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        The owning object key for this object.
        """
        aggregators: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataAggregatorArgsDict']]]]
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        count_statistics: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticArgsDict']]]]
        """
        A count statistics.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        created_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        identifier_path: NotRequired[pulumi.Input[str]]
        """
        The full path to identify this object.
        """
        info_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Information property fields.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether this object is a favorite or not.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        The registry version of the object.
        """
        time_created: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was created.
        """
        time_updated: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was updated.
        """
        updated_by: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
        updated_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
elif False:
    WorkspaceApplicationPatchMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationPatchMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version of the object.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


if not MYPY:
    class WorkspaceApplicationPatchMetadataAggregatorArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        Detailed description for the object.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        The object's key.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the object in patch.
        """
elif False:
    WorkspaceApplicationPatchMetadataAggregatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationPatchMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Detailed description for the object.
        :param pulumi.Input[str] identifier: Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: The object's key.
        :param pulumi.Input[str] name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The object's key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceApplicationPatchMetadataCountStatisticArgsDict(TypedDict):
        object_type_count_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgsDict']]]]
        """
        The array of statistics.
        """
elif False:
    WorkspaceApplicationPatchMetadataCountStatisticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationPatchMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


if not MYPY:
    class WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgsDict(TypedDict):
        object_count: NotRequired[pulumi.Input[str]]
        """
        The value for the count statistic object.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        The type of object for the count statistic object.
        """
elif False:
    WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class WorkspaceApplicationPatchParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        Key of the root document object.
        """
elif False:
    WorkspaceApplicationPatchParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationPatchParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceApplicationPatchPatchObjectMetadataArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[str]]
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        The object's key.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        name_path: NotRequired[pulumi.Input[str]]
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        object_version: NotRequired[pulumi.Input[int]]
        """
        The object version.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the object in patch.
        """
elif False:
    WorkspaceApplicationPatchPatchObjectMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationPatchPatchObjectMetadataArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The patch action indicating if object was created, updated, or deleted.
        :param pulumi.Input[str] identifier: Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: The object's key.
        :param pulumi.Input[str] name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] name_path: The fully qualified path of the published object, which would include its project and folder.
        :param pulumi.Input[int] object_version: The object version.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The object's key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceApplicationPatchRegistryMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        The owning object's key for this object.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether this object is a favorite or not.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        The identifying key for the object.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        The registry version.
        """
elif False:
    WorkspaceApplicationPatchRegistryMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationPatchRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


if not MYPY:
    class WorkspaceApplicationPublishedObjectMetadataArgsDict(TypedDict):
        action: NotRequired[pulumi.Input[str]]
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Currently not used on application creation. Reserved for future.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        name_path: NotRequired[pulumi.Input[str]]
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        object_version: NotRequired[pulumi.Input[int]]
        """
        The object version.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the object in patch.
        """
elif False:
    WorkspaceApplicationPublishedObjectMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationPublishedObjectMetadataArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The patch action indicating if object was created, updated, or deleted.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) Currently not used on application creation. Reserved for future.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] name_path: The fully qualified path of the published object, which would include its project and folder.
        :param pulumi.Input[int] object_version: The object version.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Currently not used on application creation. Reserved for future.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceApplicationRegistryMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        The owning object's key for this object.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether this object is a favorite or not.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        The identifying key for the object.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        The registry version.
        """
elif False:
    WorkspaceApplicationRegistryMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


if not MYPY:
    class WorkspaceApplicationScheduleFrequencyDetailsArgsDict(TypedDict):
        model_type: pulumi.Input[str]
        """
        (Updatable) The type of the model
        """
        custom_expression: NotRequired[pulumi.Input[str]]
        """
        (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        """
        day_of_week: NotRequired[pulumi.Input[str]]
        """
        (Updatable) This holds the day of the week on which the schedule should be triggered.
        """
        days: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        """
        frequency: NotRequired[pulumi.Input[str]]
        """
        (Updatable) the frequency of the schedule.
        """
        interval: NotRequired[pulumi.Input[int]]
        """
        (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        """
        time: NotRequired[pulumi.Input['WorkspaceApplicationScheduleFrequencyDetailsTimeArgsDict']]
        """
        (Updatable) A model to hold time in hour:minute:second format.
        """
        week_of_month: NotRequired[pulumi.Input[str]]
        """
        (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
elif False:
    WorkspaceApplicationScheduleFrequencyDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationScheduleFrequencyDetailsArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 custom_expression: Optional[pulumi.Input[str]] = None,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 frequency: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input['WorkspaceApplicationScheduleFrequencyDetailsTimeArgs']] = None,
                 week_of_month: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the model
        :param pulumi.Input[str] custom_expression: (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        :param pulumi.Input[str] day_of_week: (Updatable) This holds the day of the week on which the schedule should be triggered.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days: (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        :param pulumi.Input[str] frequency: (Updatable) the frequency of the schedule.
        :param pulumi.Input[int] interval: (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        :param pulumi.Input['WorkspaceApplicationScheduleFrequencyDetailsTimeArgs'] time: (Updatable) A model to hold time in hour:minute:second format.
        :param pulumi.Input[str] week_of_month: (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
        pulumi.set(__self__, "model_type", model_type)
        if custom_expression is not None:
            pulumi.set(__self__, "custom_expression", custom_expression)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_of_month is not None:
            pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the model
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="customExpression")
    def custom_expression(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        """
        return pulumi.get(self, "custom_expression")

    @custom_expression.setter
    def custom_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_expression", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the day of the week on which the schedule should be triggered.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) the frequency of the schedule.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['WorkspaceApplicationScheduleFrequencyDetailsTimeArgs']]:
        """
        (Updatable) A model to hold time in hour:minute:second format.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['WorkspaceApplicationScheduleFrequencyDetailsTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
        return pulumi.get(self, "week_of_month")

    @week_of_month.setter
    def week_of_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "week_of_month", value)


if not MYPY:
    class WorkspaceApplicationScheduleFrequencyDetailsTimeArgsDict(TypedDict):
        hour: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The hour value.
        """
        minute: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The minute value.
        """
        second: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The second value.
        """
elif False:
    WorkspaceApplicationScheduleFrequencyDetailsTimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationScheduleFrequencyDetailsTimeArgs:
    def __init__(__self__, *,
                 hour: Optional[pulumi.Input[int]] = None,
                 minute: Optional[pulumi.Input[int]] = None,
                 second: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] hour: (Updatable) The hour value.
        :param pulumi.Input[int] minute: (Updatable) The minute value.
        :param pulumi.Input[int] second: (Updatable) The second value.
        """
        if hour is not None:
            pulumi.set(__self__, "hour", hour)
        if minute is not None:
            pulumi.set(__self__, "minute", minute)
        if second is not None:
            pulumi.set(__self__, "second", second)

    @property
    @pulumi.getter
    def hour(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The hour value.
        """
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour", value)

    @property
    @pulumi.getter
    def minute(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The minute value.
        """
        return pulumi.get(self, "minute")

    @minute.setter
    def minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minute", value)

    @property
    @pulumi.getter
    def second(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The second value.
        """
        return pulumi.get(self, "second")

    @second.setter
    def second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "second", value)


if not MYPY:
    class WorkspaceApplicationScheduleMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        The owning object key for this object.
        """
        aggregators: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataAggregatorArgsDict']]]]
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        count_statistics: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticArgsDict']]]]
        """
        A count statistics.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        created_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        identifier_path: NotRequired[pulumi.Input[str]]
        """
        The full path to identify this object.
        """
        info_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Information property fields.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether this object is a favorite or not.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        The registry version of the object.
        """
        time_created: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was created.
        """
        time_updated: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was updated.
        """
        updated_by: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
        updated_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
elif False:
    WorkspaceApplicationScheduleMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationScheduleMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version of the object.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


if not MYPY:
    class WorkspaceApplicationScheduleMetadataAggregatorArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify schedule. On scenarios where reference to the schedule is needed, a value can be passed in create.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the aggregator.
        """
elif False:
    WorkspaceApplicationScheduleMetadataAggregatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationScheduleMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify schedule. On scenarios where reference to the schedule is needed, a value can be passed in create.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify schedule. On scenarios where reference to the schedule is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceApplicationScheduleMetadataCountStatisticArgsDict(TypedDict):
        object_type_count_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgsDict']]]]
        """
        The array of statistics.
        """
elif False:
    WorkspaceApplicationScheduleMetadataCountStatisticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationScheduleMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


if not MYPY:
    class WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgsDict(TypedDict):
        object_count: NotRequired[pulumi.Input[str]]
        """
        The value for the count statistic object.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        The type of object for the count statistic object.
        """
elif False:
    WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class WorkspaceApplicationScheduleParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        Key of the root document object.
        """
elif False:
    WorkspaceApplicationScheduleParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationScheduleParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceApplicationScheduleRegistryMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The owning object's key for this object.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The identifying key for the object.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The registry version.
        """
elif False:
    WorkspaceApplicationScheduleRegistryMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationScheduleRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


if not MYPY:
    class WorkspaceApplicationSourceApplicationInfoArgsDict(TypedDict):
        application_key: NotRequired[pulumi.Input[str]]
        """
        The source application key to use when creating the application.
        """
        application_version: NotRequired[pulumi.Input[str]]
        """
        The source application version of the application.
        """
        copy_type: NotRequired[pulumi.Input[str]]
        """
        Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
        """
        last_patch_key: NotRequired[pulumi.Input[str]]
        """
        The last patch key for the application.
        """
        workspace_id: NotRequired[pulumi.Input[str]]
        """
        The OCID of the workspace containing the application. This allows cross workspace deployment to publish an application from a different workspace into the current workspace specified in this operation.
        """
elif False:
    WorkspaceApplicationSourceApplicationInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationSourceApplicationInfoArgs:
    def __init__(__self__, *,
                 application_key: Optional[pulumi.Input[str]] = None,
                 application_version: Optional[pulumi.Input[str]] = None,
                 copy_type: Optional[pulumi.Input[str]] = None,
                 last_patch_key: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] application_key: The source application key to use when creating the application.
        :param pulumi.Input[str] application_version: The source application version of the application.
        :param pulumi.Input[str] copy_type: Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
        :param pulumi.Input[str] last_patch_key: The last patch key for the application.
        :param pulumi.Input[str] workspace_id: The OCID of the workspace containing the application. This allows cross workspace deployment to publish an application from a different workspace into the current workspace specified in this operation.
        """
        if application_key is not None:
            pulumi.set(__self__, "application_key", application_key)
        if application_version is not None:
            pulumi.set(__self__, "application_version", application_version)
        if copy_type is not None:
            pulumi.set(__self__, "copy_type", copy_type)
        if last_patch_key is not None:
            pulumi.set(__self__, "last_patch_key", last_patch_key)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> Optional[pulumi.Input[str]]:
        """
        The source application key to use when creating the application.
        """
        return pulumi.get(self, "application_key")

    @application_key.setter
    def application_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_key", value)

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> Optional[pulumi.Input[str]]:
        """
        The source application version of the application.
        """
        return pulumi.get(self, "application_version")

    @application_version.setter
    def application_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_version", value)

    @property
    @pulumi.getter(name="copyType")
    def copy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
        """
        return pulumi.get(self, "copy_type")

    @copy_type.setter
    def copy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_type", value)

    @property
    @pulumi.getter(name="lastPatchKey")
    def last_patch_key(self) -> Optional[pulumi.Input[str]]:
        """
        The last patch key for the application.
        """
        return pulumi.get(self, "last_patch_key")

    @last_patch_key.setter
    def last_patch_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_patch_key", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the workspace containing the application. This allows cross workspace deployment to publish an application from a different workspace into the current workspace specified in this operation.
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleLastRunDetailArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify taskSchedule. On scenarios where reference to the taskSchedule is needed, a value can be passed in create.
        """
        last_run_time_millis: NotRequired[pulumi.Input[str]]
        """
        Time in milliseconds for the pervious schedule.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        The type of the object.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        object_version: NotRequired[pulumi.Input[int]]
        """
        (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        """
        parent_reves: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgsDict']]]]
        """
        (Updatable) A reference to the object's parent.
        """
elif False:
    WorkspaceApplicationTaskScheduleLastRunDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleLastRunDetailArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 last_run_time_millis: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 parent_reves: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs']]]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify taskSchedule. On scenarios where reference to the taskSchedule is needed, a value can be passed in create.
        :param pulumi.Input[str] last_run_time_millis: Time in milliseconds for the pervious schedule.
        :param pulumi.Input[str] model_type: The type of the object.
        :param pulumi.Input[str] model_version: (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs']]] parent_reves: (Updatable) A reference to the object's parent.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if last_run_time_millis is not None:
            pulumi.set(__self__, "last_run_time_millis", last_run_time_millis)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_reves is not None:
            pulumi.set(__self__, "parent_reves", parent_reves)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify taskSchedule. On scenarios where reference to the taskSchedule is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="lastRunTimeMillis")
    def last_run_time_millis(self) -> Optional[pulumi.Input[str]]:
        """
        Time in milliseconds for the pervious schedule.
        """
        return pulumi.get(self, "last_run_time_millis")

    @last_run_time_millis.setter
    def last_run_time_millis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_run_time_millis", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs']]]]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_reves")

    @parent_reves.setter
    def parent_reves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs']]]]):
        pulumi.set(self, "parent_reves", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        The owning object key for this object.
        """
        aggregators: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataAggregatorArgsDict']]]]
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        count_statistics: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticArgsDict']]]]
        """
        A count statistics.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        created_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        identifier_path: NotRequired[pulumi.Input[str]]
        """
        The full path to identify this object.
        """
        info_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Information property fields.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether this object is a favorite or not.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        The registry version of the object.
        """
        time_created: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was created.
        """
        time_updated: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was updated.
        """
        updated_by: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
        updated_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
elif False:
    WorkspaceApplicationTaskScheduleMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version of the object.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleMetadataAggregatorArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify taskSchedule. On scenarios where reference to the taskSchedule is needed, a value can be passed in create.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the aggregator.
        """
elif False:
    WorkspaceApplicationTaskScheduleMetadataAggregatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify taskSchedule. On scenarios where reference to the taskSchedule is needed, a value can be passed in create.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify taskSchedule. On scenarios where reference to the taskSchedule is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleMetadataCountStatisticArgsDict(TypedDict):
        object_type_count_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgsDict']]]]
        """
        The array of statistics.
        """
elif False:
    WorkspaceApplicationTaskScheduleMetadataCountStatisticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgsDict(TypedDict):
        object_count: NotRequired[pulumi.Input[str]]
        """
        The value for the count statistic object.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        The type of object for the count statistic object.
        """
elif False:
    WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceApplicationTaskScheduleParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleRegistryMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The owning object's key for this object.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The identifying key for the object.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The registry version.
        """
elif False:
    WorkspaceApplicationTaskScheduleRegistryMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleScheduleRefArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        frequency_details: NotRequired[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgsDict']]
        """
        (Updatable) The model that holds the frequency details.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        is_daylight_adjustment_enabled: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) A flag to indicate daylight saving.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify schedule. On scenarios where reference to the schedule is needed, a value can be passed in create.
        """
        metadata: NotRequired[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataArgsDict']]
        """
        (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the object.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        object_version: NotRequired[pulumi.Input[int]]
        """
        (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
        timezone: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The timezone for the schedule.
        """
elif False:
    WorkspaceApplicationTaskScheduleScheduleRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 frequency_details: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs']] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 is_daylight_adjustment_enabled: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs']] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs']] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs'] frequency_details: (Updatable) The model that holds the frequency details.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[bool] is_daylight_adjustment_enabled: (Updatable) A flag to indicate daylight saving.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify schedule. On scenarios where reference to the schedule is needed, a value can be passed in create.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs'] metadata: (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        :param pulumi.Input[str] model_type: (Updatable) The type of the object.
        :param pulumi.Input[str] model_version: (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] timezone: (Updatable) The timezone for the schedule.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if frequency_details is not None:
            pulumi.set(__self__, "frequency_details", frequency_details)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_daylight_adjustment_enabled is not None:
            pulumi.set(__self__, "is_daylight_adjustment_enabled", is_daylight_adjustment_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="frequencyDetails")
    def frequency_details(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs']]:
        """
        (Updatable) The model that holds the frequency details.
        """
        return pulumi.get(self, "frequency_details")

    @frequency_details.setter
    def frequency_details(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs']]):
        pulumi.set(self, "frequency_details", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="isDaylightAdjustmentEnabled")
    def is_daylight_adjustment_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) A flag to indicate daylight saving.
        """
        return pulumi.get(self, "is_daylight_adjustment_enabled")

    @is_daylight_adjustment_enabled.setter
    def is_daylight_adjustment_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_daylight_adjustment_enabled", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify schedule. On scenarios where reference to the schedule is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs']]:
        """
        (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The timezone for the schedule.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgsDict(TypedDict):
        model_type: pulumi.Input[str]
        """
        (Updatable) The type of the model
        """
        custom_expression: NotRequired[pulumi.Input[str]]
        """
        (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        """
        day_of_week: NotRequired[pulumi.Input[str]]
        """
        (Updatable) This holds the day of the week on which the schedule should be triggered.
        """
        days: NotRequired[pulumi.Input[Sequence[pulumi.Input[int]]]]
        """
        (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        """
        frequency: NotRequired[pulumi.Input[str]]
        """
        (Updatable) the frequency of the schedule.
        """
        interval: NotRequired[pulumi.Input[int]]
        """
        (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        """
        time: NotRequired[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgsDict']]
        """
        (Updatable) A model to hold time in hour:minute:second format.
        """
        week_of_month: NotRequired[pulumi.Input[str]]
        """
        (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
elif False:
    WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 custom_expression: Optional[pulumi.Input[str]] = None,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 frequency: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs']] = None,
                 week_of_month: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the model
        :param pulumi.Input[str] custom_expression: (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        :param pulumi.Input[str] day_of_week: (Updatable) This holds the day of the week on which the schedule should be triggered.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days: (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        :param pulumi.Input[str] frequency: (Updatable) the frequency of the schedule.
        :param pulumi.Input[int] interval: (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs'] time: (Updatable) A model to hold time in hour:minute:second format.
        :param pulumi.Input[str] week_of_month: (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
        pulumi.set(__self__, "model_type", model_type)
        if custom_expression is not None:
            pulumi.set(__self__, "custom_expression", custom_expression)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_of_month is not None:
            pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the model
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="customExpression")
    def custom_expression(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        """
        return pulumi.get(self, "custom_expression")

    @custom_expression.setter
    def custom_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_expression", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the day of the week on which the schedule should be triggered.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) the frequency of the schedule.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs']]:
        """
        (Updatable) A model to hold time in hour:minute:second format.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
        return pulumi.get(self, "week_of_month")

    @week_of_month.setter
    def week_of_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "week_of_month", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgsDict(TypedDict):
        hour: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The hour value.
        """
        minute: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The minute value.
        """
        second: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The second value.
        """
elif False:
    WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs:
    def __init__(__self__, *,
                 hour: Optional[pulumi.Input[int]] = None,
                 minute: Optional[pulumi.Input[int]] = None,
                 second: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] hour: (Updatable) The hour value.
        :param pulumi.Input[int] minute: (Updatable) The minute value.
        :param pulumi.Input[int] second: (Updatable) The second value.
        """
        if hour is not None:
            pulumi.set(__self__, "hour", hour)
        if minute is not None:
            pulumi.set(__self__, "minute", minute)
        if second is not None:
            pulumi.set(__self__, "second", second)

    @property
    @pulumi.getter
    def hour(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The hour value.
        """
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour", value)

    @property
    @pulumi.getter
    def minute(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The minute value.
        """
        return pulumi.get(self, "minute")

    @minute.setter
    def minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minute", value)

    @property
    @pulumi.getter
    def second(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The second value.
        """
        return pulumi.get(self, "second")

    @second.setter
    def second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "second", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleScheduleRefMetadataArgsDict(TypedDict):
        aggregator: NotRequired[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgsDict']]
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The owning object key for this object.
        """
        count_statistics: NotRequired[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgsDict']]
        """
        (Updatable) A count statistics.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The user that created the object.
        """
        created_by_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The user that created the object.
        """
        identifier_path: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The full path to identify this object.
        """
        info_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        (Updatable) Information property fields.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The registry version of the object.
        """
        time_created: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The date and time that the object was created.
        """
        time_updated: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The date and time that the object was updated.
        """
        updated_by: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The user that updated the object.
        """
        updated_by_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The user that updated the object.
        """
elif False:
    WorkspaceApplicationTaskScheduleScheduleRefMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs']] = None,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 count_statistics: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs']] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs'] aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object key for this object.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs'] count_statistics: (Updatable) A count statistics.
        :param pulumi.Input[str] created_by: (Updatable) The user that created the object.
        :param pulumi.Input[str] created_by_name: (Updatable) The user that created the object.
        :param pulumi.Input[str] identifier_path: (Updatable) The full path to identify this object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info_fields: (Updatable) Information property fields.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version of the object.
        :param pulumi.Input[str] time_created: (Updatable) The date and time that the object was created.
        :param pulumi.Input[str] time_updated: (Updatable) The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: (Updatable) The user that updated the object.
        :param pulumi.Input[str] updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs']]:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs']]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs']]:
        """
        (Updatable) A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs']]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The description of the aggregator.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The identifier of the aggregator.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The key of the aggregator object.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The name of the aggregator.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the aggregator.
        """
elif False:
    WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) The description of the aggregator.
        :param pulumi.Input[str] identifier: (Updatable) The identifier of the aggregator.
        :param pulumi.Input[str] key: (Updatable) The key of the aggregator object.
        :param pulumi.Input[str] name: (Updatable) The name of the aggregator.
        :param pulumi.Input[str] type: (Updatable) The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The name of the aggregator.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgsDict(TypedDict):
        object_type_count_lists: pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgsDict']]]
        """
        (Updatable) The array of statistics.
        """
elif False:
    WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs:
    def __init__(__self__, *,
                 object_type_count_lists: pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs']]] object_type_count_lists: (Updatable) The array of statistics.
        """
        pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs']]]:
        """
        (Updatable) The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs']]]):
        pulumi.set(self, "object_type_count_lists", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgsDict(TypedDict):
        object_count: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The value for the count statistic object.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of object for the count statistic object.
        """
elif False:
    WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: (Updatable) The value for the count statistic object.
        :param pulumi.Input[str] object_type: (Updatable) The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class WorkspaceApplicationTaskScheduleScheduleRefParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceApplicationTaskScheduleScheduleRefParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceExportRequestExportedItemArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        Aggregator key
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        Object identifier
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Export object request key
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the export request.
        """
        name_path: NotRequired[pulumi.Input[str]]
        """
        Object name path
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        Object type
        """
        object_version: NotRequired[pulumi.Input[str]]
        """
        Object version
        """
        time_updated_in_millis: NotRequired[pulumi.Input[str]]
        """
        time at which this object was last updated.
        """
elif False:
    WorkspaceExportRequestExportedItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceExportRequestExportedItemArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[str]] = None,
                 time_updated_in_millis: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: Aggregator key
        :param pulumi.Input[str] identifier: Object identifier
        :param pulumi.Input[str] key: Export object request key
        :param pulumi.Input[str] name: Name of the export request.
        :param pulumi.Input[str] name_path: Object name path
        :param pulumi.Input[str] object_type: Object type
        :param pulumi.Input[str] object_version: Object version
        :param pulumi.Input[str] time_updated_in_millis: time at which this object was last updated.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Export object request key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the export request.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[str]]:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[pulumi.Input[str]]:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")

    @time_updated_in_millis.setter
    def time_updated_in_millis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated_in_millis", value)


if not MYPY:
    class WorkspaceFolderMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        The owning object key for this object.
        """
        aggregators: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataAggregatorArgsDict']]]]
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        count_statistics: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticArgsDict']]]]
        """
        A count statistics.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        created_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        identifier_path: NotRequired[pulumi.Input[str]]
        """
        The full path to identify this object.
        """
        info_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Information property fields.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether this object is a favorite or not.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        The registry version of the object.
        """
        time_created: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was created.
        """
        time_updated: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was updated.
        """
        updated_by: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
        updated_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
elif False:
    WorkspaceFolderMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceFolderMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version of the object.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


if not MYPY:
    class WorkspaceFolderMetadataAggregatorArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) A user defined description for the folder.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Currently not used on folder creation. Reserved for future.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the aggregator.
        """
elif False:
    WorkspaceFolderMetadataAggregatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceFolderMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) A user defined description for the folder.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) Currently not used on folder creation. Reserved for future.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user defined description for the folder.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Currently not used on folder creation. Reserved for future.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceFolderMetadataCountStatisticArgsDict(TypedDict):
        object_type_count_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgsDict']]]]
        """
        The array of statistics.
        """
elif False:
    WorkspaceFolderMetadataCountStatisticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceFolderMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


if not MYPY:
    class WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgsDict(TypedDict):
        object_count: NotRequired[pulumi.Input[str]]
        """
        The value for the count statistic object.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        The type of object for the count statistic object.
        """
elif False:
    WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class WorkspaceFolderParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        Key of the root document object.
        """
elif False:
    WorkspaceFolderParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceFolderParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceFolderRegistryMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The owning object's key for this object.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The identifying key for the object.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The registry version.
        """
elif False:
    WorkspaceFolderRegistryMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceFolderRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


if not MYPY:
    class WorkspaceImportRequestImportConflictResolutionArgsDict(TypedDict):
        import_conflict_resolution_type: pulumi.Input[str]
        """
        Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        """
        duplicate_prefix: NotRequired[pulumi.Input[str]]
        """
        In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        """
        duplicate_suffix: NotRequired[pulumi.Input[str]]
        """
        In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        """
elif False:
    WorkspaceImportRequestImportConflictResolutionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceImportRequestImportConflictResolutionArgs:
    def __init__(__self__, *,
                 import_conflict_resolution_type: pulumi.Input[str],
                 duplicate_prefix: Optional[pulumi.Input[str]] = None,
                 duplicate_suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] import_conflict_resolution_type: Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        :param pulumi.Input[str] duplicate_prefix: In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        :param pulumi.Input[str] duplicate_suffix: In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        """
        pulumi.set(__self__, "import_conflict_resolution_type", import_conflict_resolution_type)
        if duplicate_prefix is not None:
            pulumi.set(__self__, "duplicate_prefix", duplicate_prefix)
        if duplicate_suffix is not None:
            pulumi.set(__self__, "duplicate_suffix", duplicate_suffix)

    @property
    @pulumi.getter(name="importConflictResolutionType")
    def import_conflict_resolution_type(self) -> pulumi.Input[str]:
        """
        Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        """
        return pulumi.get(self, "import_conflict_resolution_type")

    @import_conflict_resolution_type.setter
    def import_conflict_resolution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "import_conflict_resolution_type", value)

    @property
    @pulumi.getter(name="duplicatePrefix")
    def duplicate_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_prefix")

    @duplicate_prefix.setter
    def duplicate_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplicate_prefix", value)

    @property
    @pulumi.getter(name="duplicateSuffix")
    def duplicate_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_suffix")

    @duplicate_suffix.setter
    def duplicate_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplicate_suffix", value)


if not MYPY:
    class WorkspaceImportRequestImportedObjectArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        Aggregator key
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        Object identifier
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the import request.
        """
        name_path: NotRequired[pulumi.Input[str]]
        """
        Object name path
        """
        new_key: NotRequired[pulumi.Input[str]]
        """
        New key of the object
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        Object type
        """
        object_version: NotRequired[pulumi.Input[str]]
        """
        Object version
        """
        old_key: NotRequired[pulumi.Input[str]]
        """
        Old key of the object
        """
        resolution_action: NotRequired[pulumi.Input[str]]
        """
        Object resolution action
        """
        time_updated_in_millis: NotRequired[pulumi.Input[str]]
        """
        time at which this object was last updated.
        """
elif False:
    WorkspaceImportRequestImportedObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceImportRequestImportedObjectArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 new_key: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[str]] = None,
                 old_key: Optional[pulumi.Input[str]] = None,
                 resolution_action: Optional[pulumi.Input[str]] = None,
                 time_updated_in_millis: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: Aggregator key
        :param pulumi.Input[str] identifier: Object identifier
        :param pulumi.Input[str] name: Name of the import request.
        :param pulumi.Input[str] name_path: Object name path
        :param pulumi.Input[str] new_key: New key of the object
        :param pulumi.Input[str] object_type: Object type
        :param pulumi.Input[str] object_version: Object version
        :param pulumi.Input[str] old_key: Old key of the object
        :param pulumi.Input[str] resolution_action: Object resolution action
        :param pulumi.Input[str] time_updated_in_millis: time at which this object was last updated.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if new_key is not None:
            pulumi.set(__self__, "new_key", new_key)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if old_key is not None:
            pulumi.set(__self__, "old_key", old_key)
        if resolution_action is not None:
            pulumi.set(__self__, "resolution_action", resolution_action)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the import request.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="newKey")
    def new_key(self) -> Optional[pulumi.Input[str]]:
        """
        New key of the object
        """
        return pulumi.get(self, "new_key")

    @new_key.setter
    def new_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "new_key", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[str]]:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="oldKey")
    def old_key(self) -> Optional[pulumi.Input[str]]:
        """
        Old key of the object
        """
        return pulumi.get(self, "old_key")

    @old_key.setter
    def old_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "old_key", value)

    @property
    @pulumi.getter(name="resolutionAction")
    def resolution_action(self) -> Optional[pulumi.Input[str]]:
        """
        Object resolution action
        """
        return pulumi.get(self, "resolution_action")

    @resolution_action.setter
    def resolution_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_action", value)

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[pulumi.Input[str]]:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")

    @time_updated_in_millis.setter
    def time_updated_in_millis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated_in_millis", value)


if not MYPY:
    class WorkspaceProjectMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        The owning object key for this object.
        """
        aggregators: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataAggregatorArgsDict']]]]
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        count_statistics: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticArgsDict']]]]
        """
        A count statistics.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        created_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        identifier_path: NotRequired[pulumi.Input[str]]
        """
        The full path to identify this object.
        """
        info_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Information property fields.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether this object is a favorite or not.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        The registry version of the object.
        """
        time_created: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was created.
        """
        time_updated: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was updated.
        """
        updated_by: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
        updated_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
elif False:
    WorkspaceProjectMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceProjectMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version of the object.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


if not MYPY:
    class WorkspaceProjectMetadataAggregatorArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) A user defined description for the project.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify project.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The type of the aggregator.
        """
elif False:
    WorkspaceProjectMetadataAggregatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceProjectMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) A user defined description for the project.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify project.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user defined description for the project.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify project.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceProjectMetadataCountStatisticArgsDict(TypedDict):
        object_type_count_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgsDict']]]]
        """
        The array of statistics.
        """
elif False:
    WorkspaceProjectMetadataCountStatisticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceProjectMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


if not MYPY:
    class WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgsDict(TypedDict):
        object_count: NotRequired[pulumi.Input[str]]
        """
        The value for the count statistic object.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        The type of object for the count statistic object.
        """
elif False:
    WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class WorkspaceProjectParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        Key of the root document object.
        """
elif False:
    WorkspaceProjectParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceProjectParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceProjectRegistryMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The owning object's key for this object.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The identifying key for the object.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The registry version.
        """
elif False:
    WorkspaceProjectRegistryMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceProjectRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


if not MYPY:
    class WorkspaceTaskAuthConfigArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify this object.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The specific authentication configuration to be used for Generic REST invocation.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The model version of an object.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskAuthConfigParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
        resource_principal_source: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The Oracle Cloud Infrastructure resource type that will supply the authentication token
        """
elif False:
    WorkspaceTaskAuthConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskAuthConfigArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskAuthConfigParentRefArgs']] = None,
                 resource_principal_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify this object.
        :param pulumi.Input[str] model_type: (Updatable) The specific authentication configuration to be used for Generic REST invocation.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input['WorkspaceTaskAuthConfigParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] resource_principal_source: (Updatable) The Oracle Cloud Infrastructure resource type that will supply the authentication token
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if resource_principal_source is not None:
            pulumi.set(__self__, "resource_principal_source", resource_principal_source)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify this object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The specific authentication configuration to be used for Generic REST invocation.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskAuthConfigParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskAuthConfigParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter(name="resourcePrincipalSource")
    def resource_principal_source(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The Oracle Cloud Infrastructure resource type that will supply the authentication token
        """
        return pulumi.get(self, "resource_principal_source")

    @resource_principal_source.setter
    def resource_principal_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_principal_source", value)


if not MYPY:
    class WorkspaceTaskAuthConfigParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskAuthConfigParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskAuthConfigParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigArgsDict(TypedDict):
        config_values: NotRequired[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesArgsDict']]
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        method_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The REST method to use.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        request_headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        (Updatable) The headers for the REST call.
        """
elif False:
    WorkspaceTaskCancelRestCallConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 method_type: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] method_type: (Updatable) The REST method to use.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] request_headers: (Updatable) The headers for the REST call.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if method_type is not None:
            pulumi.set(__self__, "method_type", method_type)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="methodType")
    def method_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The REST method to use.
        """
        return pulumi.get(self, "method_type")

    @method_type.setter
    def method_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method_type", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) The headers for the REST call.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "request_headers", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgsDict']]
        """
        (Updatable) The configuration parameter values.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
elif False:
    WorkspaceTaskCancelRestCallConfigConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgsDict(TypedDict):
        request_payload: NotRequired[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict']]
        request_url: NotRequired[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict']]
elif False:
    WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 request_payload: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']] = None,
                 request_url: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']] = None):
        if request_payload is not None:
            pulumi.set(__self__, "request_payload", request_payload)
        if request_url is not None:
            pulumi.set(__self__, "request_url", request_url)

    @property
    @pulumi.getter(name="requestPayload")
    def request_payload(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]:
        return pulumi.get(self, "request_payload")

    @request_payload.setter
    def request_payload(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]):
        pulumi.set(self, "request_payload", value)

    @property
    @pulumi.getter(name="requestUrl")
    def request_url(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]:
        return pulumi.get(self, "request_url")

    @request_url.setter
    def request_url(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]):
        pulumi.set(self, "request_url", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict(TypedDict):
        parameter_value: NotRequired[pulumi.Input[str]]
        """
        Reference to the parameter by its key.
        """
        ref_value: NotRequired[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict']]
        """
        The root object reference value.
        """
elif False:
    WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs:
    def __init__(__self__, *,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']] = None):
        """
        :param pulumi.Input[str] parameter_value: Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs'] ref_value: The root object reference value.
        """
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]:
        """
        The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]):
        pulumi.set(self, "ref_value", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict(TypedDict):
        config_values: NotRequired[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict']]
        """
        Configuration values can be string, objects, or parameters.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
elif False:
    WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs'] config_values: Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]:
        """
        Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict']]
        """
        The configuration parameter values.
        """
elif False:
    WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs'] config_param_values: The configuration parameter values.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]:
        """
        The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict(TypedDict):
        data_param: NotRequired[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict']]
elif False:
    WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 data_param: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']] = None):
        if data_param is not None:
            pulumi.set(__self__, "data_param", data_param)

    @property
    @pulumi.getter(name="dataParam")
    def data_param(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]:
        return pulumi.get(self, "data_param")

    @data_param.setter
    def data_param(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]):
        pulumi.set(self, "data_param", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict(TypedDict):
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict(TypedDict):
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskConfigProviderDelegateArgsDict(TypedDict):
        bindings: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingArgsDict']]]]
        """
        bindings
        """
elif False:
    WorkspaceTaskConfigProviderDelegateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskConfigProviderDelegateArgs:
    def __init__(__self__, *,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingArgs']]] bindings: bindings
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingArgs']]]]:
        """
        bindings
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingArgs']]]]):
        pulumi.set(self, "bindings", value)


if not MYPY:
    class WorkspaceTaskConfigProviderDelegateBindingArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        parameter_values: NotRequired[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgsDict']]
elif False:
    WorkspaceTaskConfigProviderDelegateBindingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskConfigProviderDelegateBindingArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 parameter_values: Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs']] = None):
        """
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs']]:
        return pulumi.get(self, "parameter_values")

    @parameter_values.setter
    def parameter_values(self, value: Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs']]):
        pulumi.set(self, "parameter_values", value)


if not MYPY:
    class WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgsDict(TypedDict):
        root_object_value: NotRequired[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgsDict']]
        """
        The root object value, used in custom parameters.
        """
        simple_value: NotRequired[pulumi.Input[str]]
        """
        A simple value for the parameter.
        """
elif False:
    WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs:
    def __init__(__self__, *,
                 root_object_value: Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs']] = None,
                 simple_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs'] root_object_value: The root object value, used in custom parameters.
        :param pulumi.Input[str] simple_value: A simple value for the parameter.
        """
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if simple_value is not None:
            pulumi.set(__self__, "simple_value", simple_value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs']]:
        """
        The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs']]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="simpleValue")
    def simple_value(self) -> Optional[pulumi.Input[str]]:
        """
        A simple value for the parameter.
        """
        return pulumi.get(self, "simple_value")

    @simple_value.setter
    def simple_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simple_value", value)


if not MYPY:
    class WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The object's model version.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
elif False:
    WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[str] model_version: (Updatable) The object's model version.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object's model version.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigArgsDict(TypedDict):
        config_values: NotRequired[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesArgsDict']]
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        method_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The REST method to use.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        request_headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        (Updatable) The headers for the REST call.
        """
elif False:
    WorkspaceTaskExecuteRestCallConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 method_type: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] method_type: (Updatable) The REST method to use.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] request_headers: (Updatable) The headers for the REST call.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if method_type is not None:
            pulumi.set(__self__, "method_type", method_type)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="methodType")
    def method_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The REST method to use.
        """
        return pulumi.get(self, "method_type")

    @method_type.setter
    def method_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method_type", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) The headers for the REST call.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "request_headers", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgsDict']]
        """
        (Updatable) The configuration parameter values.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
elif False:
    WorkspaceTaskExecuteRestCallConfigConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgsDict(TypedDict):
        request_payload: NotRequired[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict']]
        request_url: NotRequired[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict']]
elif False:
    WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 request_payload: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']] = None,
                 request_url: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']] = None):
        if request_payload is not None:
            pulumi.set(__self__, "request_payload", request_payload)
        if request_url is not None:
            pulumi.set(__self__, "request_url", request_url)

    @property
    @pulumi.getter(name="requestPayload")
    def request_payload(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]:
        return pulumi.get(self, "request_payload")

    @request_payload.setter
    def request_payload(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]):
        pulumi.set(self, "request_payload", value)

    @property
    @pulumi.getter(name="requestUrl")
    def request_url(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]:
        return pulumi.get(self, "request_url")

    @request_url.setter
    def request_url(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]):
        pulumi.set(self, "request_url", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict(TypedDict):
        parameter_value: NotRequired[pulumi.Input[str]]
        """
        Reference to the parameter by its key.
        """
        ref_value: NotRequired[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict']]
        """
        The root object reference value.
        """
elif False:
    WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs:
    def __init__(__self__, *,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']] = None):
        """
        :param pulumi.Input[str] parameter_value: Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs'] ref_value: The root object reference value.
        """
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]:
        """
        The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]):
        pulumi.set(self, "ref_value", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict(TypedDict):
        config_values: NotRequired[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict']]
        """
        Configuration values can be string, objects, or parameters.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
elif False:
    WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs'] config_values: Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]:
        """
        Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict']]
        """
        The configuration parameter values.
        """
elif False:
    WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs'] config_param_values: The configuration parameter values.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]:
        """
        The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict(TypedDict):
        data_param: NotRequired[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict']]
elif False:
    WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 data_param: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']] = None):
        if data_param is not None:
            pulumi.set(__self__, "data_param", data_param)

    @property
    @pulumi.getter(name="dataParam")
    def data_param(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]:
        return pulumi.get(self, "data_param")

    @data_param.setter
    def data_param(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]):
        pulumi.set(self, "data_param", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict(TypedDict):
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict(TypedDict):
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskInputPortArgsDict(TypedDict):
        model_type: pulumi.Input[str]
        """
        (Updatable) The type of the types object.
        """
        config_values: NotRequired[pulumi.Input['WorkspaceTaskInputPortConfigValuesArgsDict']]
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        fields: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) An array of fields.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The key of the object.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The model version of an object.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskInputPortParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
        port_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The port details for the data asset.Type.
        """
elif False:
    WorkspaceTaskInputPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskInputPortArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 config_values: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskInputPortParentRefArgs']] = None,
                 port_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input['WorkspaceTaskInputPortConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: (Updatable) An array of fields.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input['WorkspaceTaskInputPortParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] port_type: (Updatable) The port details for the data asset.Type.
        """
        pulumi.set(__self__, "model_type", model_type)
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if port_type is not None:
            pulumi.set(__self__, "port_type", port_type)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) An array of fields.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskInputPortParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskInputPortParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter(name="portType")
    def port_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The port details for the data asset.Type.
        """
        return pulumi.get(self, "port_type")

    @port_type.setter
    def port_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_type", value)


if not MYPY:
    class WorkspaceTaskInputPortConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskInputPortConfigValuesConfigParamValuesArgsDict']]
        """
        (Updatable) The configuration parameter values.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskInputPortConfigValuesParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
elif False:
    WorkspaceTaskInputPortConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskInputPortConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskInputPortConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


if not MYPY:
    class WorkspaceTaskInputPortConfigValuesConfigParamValuesArgsDict(TypedDict):
        int_value: NotRequired[pulumi.Input[int]]
        """
        (Updatable) An integer value of the parameter.
        """
        object_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) An object value of the parameter.
        """
        parameter_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Reference to the parameter by its key.
        """
        ref_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The root object reference value.
        """
        root_object_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The root object value, used in custom parameters.
        """
        string_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) A string value of the parameter.
        """
elif False:
    WorkspaceTaskInputPortConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None,
                 object_value: Optional[pulumi.Input[str]] = None,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input[str]] = None,
                 root_object_value: Optional[pulumi.Input[str]] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] int_value: (Updatable) An integer value of the parameter.
        :param pulumi.Input[str] object_value: (Updatable) An object value of the parameter.
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input[str] ref_value: (Updatable) The root object reference value.
        :param pulumi.Input[str] root_object_value: (Updatable) The root object value, used in custom parameters.
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_value", value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskInputPortConfigValuesParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskInputPortConfigValuesParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskInputPortConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskInputPortParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskInputPortParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskInputPortParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskMetadataArgsDict(TypedDict):
        aggregator_key: NotRequired[pulumi.Input[str]]
        """
        The owning object's key for this object.
        """
        aggregators: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataAggregatorArgsDict']]]]
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        count_statistics: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticArgsDict']]]]
        """
        A count statistics.
        """
        created_by: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        created_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that created the object.
        """
        identifier_path: NotRequired[pulumi.Input[str]]
        """
        The full path to identify this object.
        """
        info_fields: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Information property fields.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether this object is a favorite or not.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        The registry version.
        """
        time_created: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was created.
        """
        time_updated: NotRequired[pulumi.Input[str]]
        """
        The date and time that the object was updated.
        """
        updated_by: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
        updated_by_name: NotRequired[pulumi.Input[str]]
        """
        The user that updated the object.
        """
elif False:
    WorkspaceTaskMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object's key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


if not MYPY:
    class WorkspaceTaskMetadataAggregatorArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        identifier: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        The object type.
        """
elif False:
    WorkspaceTaskMetadataAggregatorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The object type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The object type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceTaskMetadataCountStatisticArgsDict(TypedDict):
        object_type_count_lists: NotRequired[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgsDict']]]]
        """
        The array of statistics.
        """
elif False:
    WorkspaceTaskMetadataCountStatisticArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


if not MYPY:
    class WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgsDict(TypedDict):
        object_count: NotRequired[pulumi.Input[str]]
        """
        The value for the count statistic object.
        """
        object_type: NotRequired[pulumi.Input[str]]
        """
        The type of object for the count statistic object.
        """
elif False:
    WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


if not MYPY:
    class WorkspaceTaskOpConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesArgsDict']]
        """
        (Updatable) The configuration parameter values.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskOpConfigValuesParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
elif False:
    WorkspaceTaskOpConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOpConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskOpConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


if not MYPY:
    class WorkspaceTaskOpConfigValuesConfigParamValuesArgsDict(TypedDict):
        config_param_value: NotRequired[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgsDict']]
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
elif False:
    WorkspaceTaskOpConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOpConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 config_param_value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        if config_param_value is not None:
            pulumi.set(__self__, "config_param_value", config_param_value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="configParamValue")
    def config_param_value(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs']]:
        return pulumi.get(self, "config_param_value")

    @config_param_value.setter
    def config_param_value(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs']]):
        pulumi.set(self, "config_param_value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


if not MYPY:
    class WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgsDict(TypedDict):
        int_value: NotRequired[pulumi.Input[int]]
        """
        An integer value of the parameter.
        """
        object_value: NotRequired[pulumi.Input[str]]
        """
        An object value of the parameter.
        """
        parameter_value: NotRequired[pulumi.Input[str]]
        """
        Reference to the parameter by its key.
        """
        ref_value: NotRequired[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgsDict']]
        """
        The root object reference value.
        """
        root_object_value: NotRequired[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgsDict']]
        """
        The root object value, used in custom parameters.
        """
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None,
                 object_value: Optional[pulumi.Input[str]] = None,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs']] = None,
                 root_object_value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] int_value: An integer value of the parameter.
        :param pulumi.Input[str] object_value: An object value of the parameter.
        :param pulumi.Input[str] parameter_value: Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs'] ref_value: The root object reference value.
        :param pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs'] root_object_value: The root object value, used in custom parameters.
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        """
        An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs']]:
        """
        The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs']]):
        pulumi.set(self, "ref_value", value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']]:
        """
        The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The object's model version.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
elif False:
    WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[str] model_version: (Updatable) The object's model version.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object's model version.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


if not MYPY:
    class WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The object's model version.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
elif False:
    WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[str] model_version: (Updatable) The object's model version.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object's model version.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


if not MYPY:
    class WorkspaceTaskOpConfigValuesParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskOpConfigValuesParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOpConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskOutputPortArgsDict(TypedDict):
        model_type: pulumi.Input[str]
        """
        (Updatable) The type of the types object.
        """
        config_values: NotRequired[pulumi.Input['WorkspaceTaskOutputPortConfigValuesArgsDict']]
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        fields: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) An array of fields.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The key of the object.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The model version of an object.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskOutputPortParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
        port_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The port details for the data asset.Type.
        """
elif False:
    WorkspaceTaskOutputPortArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOutputPortArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 config_values: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskOutputPortParentRefArgs']] = None,
                 port_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input['WorkspaceTaskOutputPortConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: (Updatable) An array of fields.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input['WorkspaceTaskOutputPortParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] port_type: (Updatable) The port details for the data asset.Type.
        """
        pulumi.set(__self__, "model_type", model_type)
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if port_type is not None:
            pulumi.set(__self__, "port_type", port_type)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) An array of fields.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskOutputPortParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskOutputPortParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter(name="portType")
    def port_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The port details for the data asset.Type.
        """
        return pulumi.get(self, "port_type")

    @port_type.setter
    def port_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_type", value)


if not MYPY:
    class WorkspaceTaskOutputPortConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgsDict']]
        """
        (Updatable) The configuration parameter values.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskOutputPortConfigValuesParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
elif False:
    WorkspaceTaskOutputPortConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOutputPortConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskOutputPortConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


if not MYPY:
    class WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgsDict(TypedDict):
        int_value: NotRequired[pulumi.Input[int]]
        """
        (Updatable) An integer value of the parameter.
        """
        object_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) An object value of the parameter.
        """
        parameter_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Reference to the parameter by its key.
        """
        ref_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The root object reference value.
        """
        root_object_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The root object value, used in custom parameters.
        """
        string_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) A string value of the parameter.
        """
elif False:
    WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None,
                 object_value: Optional[pulumi.Input[str]] = None,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input[str]] = None,
                 root_object_value: Optional[pulumi.Input[str]] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] int_value: (Updatable) An integer value of the parameter.
        :param pulumi.Input[str] object_value: (Updatable) An object value of the parameter.
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input[str] ref_value: (Updatable) The root object reference value.
        :param pulumi.Input[str] root_object_value: (Updatable) The root object value, used in custom parameters.
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_value", value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskOutputPortConfigValuesParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskOutputPortConfigValuesParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOutputPortConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskOutputPortParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskOutputPortParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskOutputPortParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskParameterArgsDict(TypedDict):
        model_type: pulumi.Input[str]
        """
        (Updatable) The type of the types object.
        """
        config_values: NotRequired[pulumi.Input['WorkspaceTaskParameterConfigValuesArgsDict']]
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        default_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The default value of the parameter.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        is_input: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) Specifies whether the parameter is input value.
        """
        is_output: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) Specifies whether the parameter is output value.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The key of the object.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The model version of an object.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        output_aggregation_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The output aggregation type.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskParameterParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
        root_object_default_value: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The default value of the parameter which can be an object in DIS, such as a data entity.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) This can either be a string value referencing the type or a BaseType object.
        """
        type_name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of value the parameter was created for.
        """
        used_for: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
        """
elif False:
    WorkspaceTaskParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskParameterArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 config_values: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesArgs']] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_input: Optional[pulumi.Input[bool]] = None,
                 is_output: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 output_aggregation_type: Optional[pulumi.Input[str]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskParameterParentRefArgs']] = None,
                 root_object_default_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 type_name: Optional[pulumi.Input[str]] = None,
                 used_for: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] default_value: (Updatable) The default value of the parameter.
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[bool] is_input: (Updatable) Specifies whether the parameter is input value.
        :param pulumi.Input[bool] is_output: (Updatable) Specifies whether the parameter is output value.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[str] output_aggregation_type: (Updatable) The output aggregation type.
        :param pulumi.Input['WorkspaceTaskParameterParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] root_object_default_value: (Updatable) The default value of the parameter which can be an object in DIS, such as a data entity.
        :param pulumi.Input[str] type: (Updatable) This can either be a string value referencing the type or a BaseType object.
        :param pulumi.Input[str] type_name: (Updatable) The type of value the parameter was created for.
        :param pulumi.Input[str] used_for: (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
        """
        pulumi.set(__self__, "model_type", model_type)
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_input is not None:
            pulumi.set(__self__, "is_input", is_input)
        if is_output is not None:
            pulumi.set(__self__, "is_output", is_output)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if output_aggregation_type is not None:
            pulumi.set(__self__, "output_aggregation_type", output_aggregation_type)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if root_object_default_value is not None:
            pulumi.set(__self__, "root_object_default_value", root_object_default_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_name is not None:
            pulumi.set(__self__, "type_name", type_name)
        if used_for is not None:
            pulumi.set(__self__, "used_for", used_for)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The default value of the parameter.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isInput")
    def is_input(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether the parameter is input value.
        """
        return pulumi.get(self, "is_input")

    @is_input.setter
    def is_input(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_input", value)

    @property
    @pulumi.getter(name="isOutput")
    def is_output(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether the parameter is output value.
        """
        return pulumi.get(self, "is_output")

    @is_output.setter
    def is_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_output", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="outputAggregationType")
    def output_aggregation_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The output aggregation type.
        """
        return pulumi.get(self, "output_aggregation_type")

    @output_aggregation_type.setter
    def output_aggregation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_aggregation_type", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskParameterParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskParameterParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter(name="rootObjectDefaultValue")
    def root_object_default_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The default value of the parameter which can be an object in DIS, such as a data entity.
        """
        return pulumi.get(self, "root_object_default_value")

    @root_object_default_value.setter
    def root_object_default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_object_default_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This can either be a string value referencing the type or a BaseType object.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of value the parameter was created for.
        """
        return pulumi.get(self, "type_name")

    @type_name.setter
    def type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_name", value)

    @property
    @pulumi.getter(name="usedFor")
    def used_for(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
        """
        return pulumi.get(self, "used_for")

    @used_for.setter
    def used_for(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "used_for", value)


if not MYPY:
    class WorkspaceTaskParameterConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesArgsDict']]
        """
        (Updatable) The configuration parameter values.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskParameterConfigValuesParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
elif False:
    WorkspaceTaskParameterConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskParameterConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


if not MYPY:
    class WorkspaceTaskParameterConfigValuesConfigParamValuesArgsDict(TypedDict):
        config_param_value: NotRequired[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgsDict']]
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
elif False:
    WorkspaceTaskParameterConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskParameterConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 config_param_value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        if config_param_value is not None:
            pulumi.set(__self__, "config_param_value", config_param_value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="configParamValue")
    def config_param_value(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs']]:
        return pulumi.get(self, "config_param_value")

    @config_param_value.setter
    def config_param_value(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs']]):
        pulumi.set(self, "config_param_value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


if not MYPY:
    class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgsDict(TypedDict):
        int_value: NotRequired[pulumi.Input[int]]
        """
        An integer value of the parameter.
        """
        object_value: NotRequired[pulumi.Input[str]]
        """
        An object value of the parameter.
        """
        parameter_value: NotRequired[pulumi.Input[str]]
        """
        Reference to the parameter by its key.
        """
        ref_value: NotRequired[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgsDict']]
        """
        The root object reference value.
        """
        root_object_value: NotRequired[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgsDict']]
        """
        The root object value, used in custom parameters.
        """
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None,
                 object_value: Optional[pulumi.Input[str]] = None,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs']] = None,
                 root_object_value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] int_value: An integer value of the parameter.
        :param pulumi.Input[str] object_value: An object value of the parameter.
        :param pulumi.Input[str] parameter_value: Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs'] ref_value: The root object reference value.
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs'] root_object_value: The root object value, used in custom parameters.
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        """
        An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs']]:
        """
        The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs']]):
        pulumi.set(self, "ref_value", value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']]:
        """
        The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The object's model version.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
elif False:
    WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[str] model_version: (Updatable) The object's model version.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object's model version.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


if not MYPY:
    class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The object's model version.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
elif False:
    WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[str] model_version: (Updatable) The object's model version.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object's model version.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


if not MYPY:
    class WorkspaceTaskParameterConfigValuesParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskParameterConfigValuesParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskParameterConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskParameterParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskParameterParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskParameterParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigArgsDict(TypedDict):
        config_values: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesArgsDict']]
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        method_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The REST method to use.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        request_headers: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        (Updatable) The headers for the REST call.
        """
elif False:
    WorkspaceTaskPollRestCallConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 method_type: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] method_type: (Updatable) The REST method to use.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] request_headers: (Updatable) The headers for the REST call.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if method_type is not None:
            pulumi.set(__self__, "method_type", method_type)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="methodType")
    def method_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The REST method to use.
        """
        return pulumi.get(self, "method_type")

    @method_type.setter
    def method_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method_type", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) The headers for the REST call.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "request_headers", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgsDict']]
        """
        (Updatable) The configuration parameter values.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgsDict(TypedDict):
        poll_condition: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgsDict']]
        poll_interval: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgsDict']]
        poll_interval_unit: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgsDict']]
        poll_max_duration: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgsDict']]
        poll_max_duration_unit: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgsDict']]
        request_payload: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict']]
        request_url: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict']]
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 poll_condition: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs']] = None,
                 poll_interval: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs']] = None,
                 poll_interval_unit: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs']] = None,
                 poll_max_duration: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs']] = None,
                 poll_max_duration_unit: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs']] = None,
                 request_payload: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']] = None,
                 request_url: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']] = None):
        if poll_condition is not None:
            pulumi.set(__self__, "poll_condition", poll_condition)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if poll_interval_unit is not None:
            pulumi.set(__self__, "poll_interval_unit", poll_interval_unit)
        if poll_max_duration is not None:
            pulumi.set(__self__, "poll_max_duration", poll_max_duration)
        if poll_max_duration_unit is not None:
            pulumi.set(__self__, "poll_max_duration_unit", poll_max_duration_unit)
        if request_payload is not None:
            pulumi.set(__self__, "request_payload", request_payload)
        if request_url is not None:
            pulumi.set(__self__, "request_url", request_url)

    @property
    @pulumi.getter(name="pollCondition")
    def poll_condition(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs']]:
        return pulumi.get(self, "poll_condition")

    @poll_condition.setter
    def poll_condition(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs']]):
        pulumi.set(self, "poll_condition", value)

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs']]:
        return pulumi.get(self, "poll_interval")

    @poll_interval.setter
    def poll_interval(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs']]):
        pulumi.set(self, "poll_interval", value)

    @property
    @pulumi.getter(name="pollIntervalUnit")
    def poll_interval_unit(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs']]:
        return pulumi.get(self, "poll_interval_unit")

    @poll_interval_unit.setter
    def poll_interval_unit(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs']]):
        pulumi.set(self, "poll_interval_unit", value)

    @property
    @pulumi.getter(name="pollMaxDuration")
    def poll_max_duration(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs']]:
        return pulumi.get(self, "poll_max_duration")

    @poll_max_duration.setter
    def poll_max_duration(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs']]):
        pulumi.set(self, "poll_max_duration", value)

    @property
    @pulumi.getter(name="pollMaxDurationUnit")
    def poll_max_duration_unit(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs']]:
        return pulumi.get(self, "poll_max_duration_unit")

    @poll_max_duration_unit.setter
    def poll_max_duration_unit(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs']]):
        pulumi.set(self, "poll_max_duration_unit", value)

    @property
    @pulumi.getter(name="requestPayload")
    def request_payload(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]:
        return pulumi.get(self, "request_payload")

    @request_payload.setter
    def request_payload(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]):
        pulumi.set(self, "request_payload", value)

    @property
    @pulumi.getter(name="requestUrl")
    def request_url(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]:
        return pulumi.get(self, "request_url")

    @request_url.setter
    def request_url(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]):
        pulumi.set(self, "request_url", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgsDict(TypedDict):
        parameter_value: NotRequired[pulumi.Input[str]]
        """
        Reference to the parameter by its key.
        """
        ref_value: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgsDict']]
        """
        The root object reference value.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs:
    def __init__(__self__, *,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs']] = None):
        """
        :param pulumi.Input[str] parameter_value: Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs'] ref_value: The root object reference value.
        """
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs']]:
        """
        The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs']]):
        pulumi.set(self, "ref_value", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgsDict(TypedDict):
        expr_string: NotRequired[pulumi.Input[str]]
        """
        The expression string for the object.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs:
    def __init__(__self__, *,
                 expr_string: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expr_string: The expression string for the object.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        if expr_string is not None:
            pulumi.set(__self__, "expr_string", expr_string)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="exprString")
    def expr_string(self) -> Optional[pulumi.Input[str]]:
        """
        The expression string for the object.
        """
        return pulumi.get(self, "expr_string")

    @expr_string.setter
    def expr_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expr_string", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgsDict(TypedDict):
        object_value: NotRequired[pulumi.Input[float]]
        """
        An object value of the parameter.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs:
    def __init__(__self__, *,
                 object_value: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] object_value: An object value of the parameter.
        """
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[float]]:
        """
        An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "object_value", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgsDict(TypedDict):
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgsDict(TypedDict):
        object_value: NotRequired[pulumi.Input[float]]
        """
        An object value of the parameter.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs:
    def __init__(__self__, *,
                 object_value: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] object_value: An object value of the parameter.
        """
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[float]]:
        """
        An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "object_value", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgsDict(TypedDict):
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict(TypedDict):
        parameter_value: NotRequired[pulumi.Input[str]]
        """
        Reference to the parameter by its key.
        """
        ref_value: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict']]
        """
        The root object reference value.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs:
    def __init__(__self__, *,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']] = None):
        """
        :param pulumi.Input[str] parameter_value: Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs'] ref_value: The root object reference value.
        """
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]:
        """
        The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]):
        pulumi.set(self, "ref_value", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict(TypedDict):
        config_values: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict']]
        """
        Configuration values can be string, objects, or parameters.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the task.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs'] config_values: Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        :param pulumi.Input[str] model_type: (Updatable) The type of the task.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]:
        """
        Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Generated key that can be used in API calls to identify task. On scenarios where reference to the task is needed, a value can be passed in create.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the task.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict']]
        """
        The configuration parameter values.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs'] config_param_values: The configuration parameter values.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]:
        """
        The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict(TypedDict):
        data_param: NotRequired[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict']]
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 data_param: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']] = None):
        if data_param is not None:
            pulumi.set(__self__, "data_param", data_param)

    @property
    @pulumi.getter(name="dataParam")
    def data_param(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]:
        return pulumi.get(self, "data_param")

    @data_param.setter
    def data_param(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]):
        pulumi.set(self, "data_param", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict(TypedDict):
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict(TypedDict):
        string_value: NotRequired[pulumi.Input[str]]
        """
        A string value of the parameter.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskRegistryMetadataArgsDict(TypedDict):
        aggregator_key: pulumi.Input[str]
        """
        (Updatable) The owning object's key for this object.
        """
        is_favorite: NotRequired[pulumi.Input[bool]]
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The identifying key for the object.
        """
        labels: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        registry_version: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The registry version.
        """
elif False:
    WorkspaceTaskRegistryMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: pulumi.Input[str],
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> pulumi.Input[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


if not MYPY:
    class WorkspaceTaskTypedExpressionArgsDict(TypedDict):
        config_values: NotRequired[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesArgsDict']]
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        description: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Detailed description for the object.
        """
        expression: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The expression string for the object.
        """
        key: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The key of the object.
        """
        model_type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The type of the types object.
        """
        model_version: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The model version of an object.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        object_status: NotRequired[pulumi.Input[int]]
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskTypedExpressionParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
        type: NotRequired[pulumi.Input[str]]
        """
        (Updatable) The object type.
        """
elif False:
    WorkspaceTaskTypedExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskTypedExpressionArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskTypedExpressionParentRefArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] expression: (Updatable) The expression string for the object.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input['WorkspaceTaskTypedExpressionParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] type: (Updatable) The object type.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The expression string for the object.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class WorkspaceTaskTypedExpressionConfigValuesArgsDict(TypedDict):
        config_param_values: NotRequired[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgsDict']]
        """
        (Updatable) The configuration parameter values.
        """
        parent_ref: NotRequired[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesParentRefArgsDict']]
        """
        (Updatable) A reference to the object's parent.
        """
elif False:
    WorkspaceTaskTypedExpressionConfigValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


if not MYPY:
    class WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgsDict(TypedDict):
        length: NotRequired[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgsDict']]
        scale: NotRequired[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgsDict']]
elif False:
    WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 length: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs']] = None,
                 scale: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs']] = None):
        if length is not None:
            pulumi.set(__self__, "length", length)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs']]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs']]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs']]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs']]):
        pulumi.set(self, "scale", value)


if not MYPY:
    class WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgsDict(TypedDict):
        int_value: NotRequired[pulumi.Input[int]]
        """
        An integer value of the parameter.
        """
elif False:
    WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] int_value: An integer value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)


if not MYPY:
    class WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgsDict(TypedDict):
        int_value: NotRequired[pulumi.Input[int]]
        """
        An integer value of the parameter.
        """
elif False:
    WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] int_value: An integer value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)


if not MYPY:
    class WorkspaceTaskTypedExpressionConfigValuesParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskTypedExpressionConfigValuesParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class WorkspaceTaskTypedExpressionParentRefArgsDict(TypedDict):
        parent: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the parent object.
        """
        root_doc_id: NotRequired[pulumi.Input[str]]
        """
        (Updatable) Key of the root document object.
        """
elif False:
    WorkspaceTaskTypedExpressionParentRefArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class WorkspaceTaskTypedExpressionParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


if not MYPY:
    class GetWorkspaceApplicationPatchesFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspaceApplicationPatchesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspaceApplicationPatchesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetWorkspaceApplicationSchedulesFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspaceApplicationSchedulesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspaceApplicationSchedulesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetWorkspaceApplicationTaskSchedulesFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspaceApplicationTaskSchedulesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspaceApplicationTaskSchedulesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetWorkspaceApplicationsFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspaceApplicationsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspaceApplicationsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetWorkspaceExportRequestsFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspaceExportRequestsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspaceExportRequestsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetWorkspaceFoldersFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspaceFoldersFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspaceFoldersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetWorkspaceImportRequestsFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspaceImportRequestsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspaceImportRequestsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetWorkspaceProjectsFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspaceProjectsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspaceProjectsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetWorkspaceTasksFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspaceTasksFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspaceTasksFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetWorkspacesFilterArgsDict(TypedDict):
        name: str
        """
        Used to filter by the name of the object.
        """
        values: Sequence[str]
        regex: NotRequired[bool]
elif False:
    GetWorkspacesFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetWorkspacesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


