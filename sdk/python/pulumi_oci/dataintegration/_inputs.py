# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'WorkspaceApplicationDependentObjectMetadataArgs',
    'WorkspaceApplicationMetadataArgs',
    'WorkspaceApplicationMetadataAggregatorArgs',
    'WorkspaceApplicationMetadataCountStatisticArgs',
    'WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceApplicationParentRefArgs',
    'WorkspaceApplicationPatchDependentObjectMetadataArgs',
    'WorkspaceApplicationPatchMetadataArgs',
    'WorkspaceApplicationPatchMetadataAggregatorArgs',
    'WorkspaceApplicationPatchMetadataCountStatisticArgs',
    'WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceApplicationPatchParentRefArgs',
    'WorkspaceApplicationPatchPatchObjectMetadataArgs',
    'WorkspaceApplicationPatchRegistryMetadataArgs',
    'WorkspaceApplicationPublishedObjectMetadataArgs',
    'WorkspaceApplicationRegistryMetadataArgs',
    'WorkspaceApplicationScheduleFrequencyDetailsArgs',
    'WorkspaceApplicationScheduleFrequencyDetailsTimeArgs',
    'WorkspaceApplicationScheduleMetadataArgs',
    'WorkspaceApplicationScheduleMetadataAggregatorArgs',
    'WorkspaceApplicationScheduleMetadataCountStatisticArgs',
    'WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceApplicationScheduleParentRefArgs',
    'WorkspaceApplicationScheduleRegistryMetadataArgs',
    'WorkspaceApplicationSourceApplicationInfoArgs',
    'WorkspaceApplicationTaskScheduleLastRunDetailArgs',
    'WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs',
    'WorkspaceApplicationTaskScheduleMetadataArgs',
    'WorkspaceApplicationTaskScheduleMetadataAggregatorArgs',
    'WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs',
    'WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceApplicationTaskScheduleParentRefArgs',
    'WorkspaceApplicationTaskScheduleRegistryMetadataArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs',
    'WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs',
    'WorkspaceExportRequestExportedItemArgs',
    'WorkspaceFolderMetadataArgs',
    'WorkspaceFolderMetadataAggregatorArgs',
    'WorkspaceFolderMetadataCountStatisticArgs',
    'WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceFolderParentRefArgs',
    'WorkspaceFolderRegistryMetadataArgs',
    'WorkspaceImportRequestImportConflictResolutionArgs',
    'WorkspaceImportRequestImportedObjectArgs',
    'WorkspaceProjectMetadataArgs',
    'WorkspaceProjectMetadataAggregatorArgs',
    'WorkspaceProjectMetadataCountStatisticArgs',
    'WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceProjectParentRefArgs',
    'WorkspaceProjectRegistryMetadataArgs',
    'WorkspaceTaskAuthConfigArgs',
    'WorkspaceTaskAuthConfigParentRefArgs',
    'WorkspaceTaskCancelRestCallConfigArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs',
    'WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs',
    'WorkspaceTaskConfigProviderDelegateArgs',
    'WorkspaceTaskConfigProviderDelegateBindingArgs',
    'WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs',
    'WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs',
    'WorkspaceTaskExecuteRestCallConfigArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs',
    'WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs',
    'WorkspaceTaskInputPortArgs',
    'WorkspaceTaskInputPortConfigValuesArgs',
    'WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskInputPortConfigValuesParentRefArgs',
    'WorkspaceTaskInputPortParentRefArgs',
    'WorkspaceTaskMetadataArgs',
    'WorkspaceTaskMetadataAggregatorArgs',
    'WorkspaceTaskMetadataCountStatisticArgs',
    'WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs',
    'WorkspaceTaskOpConfigValuesArgs',
    'WorkspaceTaskOpConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs',
    'WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs',
    'WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs',
    'WorkspaceTaskOpConfigValuesParentRefArgs',
    'WorkspaceTaskOutputPortArgs',
    'WorkspaceTaskOutputPortConfigValuesArgs',
    'WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskOutputPortConfigValuesParentRefArgs',
    'WorkspaceTaskOutputPortParentRefArgs',
    'WorkspaceTaskParameterArgs',
    'WorkspaceTaskParameterConfigValuesArgs',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs',
    'WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs',
    'WorkspaceTaskParameterConfigValuesParentRefArgs',
    'WorkspaceTaskParameterParentRefArgs',
    'WorkspaceTaskParentRefArgs',
    'WorkspaceTaskPollRestCallConfigArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs',
    'WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs',
    'WorkspaceTaskRegistryMetadataArgs',
    'WorkspaceTaskTypedExpressionArgs',
    'WorkspaceTaskTypedExpressionConfigValuesArgs',
    'WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs',
    'WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs',
    'WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs',
    'WorkspaceTaskTypedExpressionConfigValuesParentRefArgs',
    'WorkspaceTaskTypedExpressionParentRefArgs',
    'GetWorkspaceApplicationPatchesFilterArgs',
    'GetWorkspaceApplicationSchedulesFilterArgs',
    'GetWorkspaceApplicationTaskSchedulesFilterArgs',
    'GetWorkspaceApplicationsFilterArgs',
    'GetWorkspaceExportRequestsFilterArgs',
    'GetWorkspaceFoldersFilterArgs',
    'GetWorkspaceImportRequestsFilterArgs',
    'GetWorkspaceProjectsFilterArgs',
    'GetWorkspaceTasksFilterArgs',
    'GetWorkspacesFilterArgs',
]

@pulumi.input_type
class WorkspaceApplicationDependentObjectMetadataArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The patch action indicating if object was created, updated, or deleted.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] name_path: The fully qualified path of the published object, which would include its project and folder.
        :param pulumi.Input[int] object_version: The object version.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceApplicationMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object's key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, Any]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version.
        :param pulumi.Input[str] time_created: The date and time the application was created, in the timestamp format defined by RFC3339.
        :param pulumi.Input[str] time_updated: The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the application was created, in the timestamp format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


@pulumi.input_type
class WorkspaceApplicationMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceApplicationMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


@pulumi.input_type
class WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


@pulumi.input_type
class WorkspaceApplicationParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceApplicationPatchDependentObjectMetadataArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The patch action indicating if object was created, updated, or deleted.
        :param pulumi.Input[str] identifier: Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[str] name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] name_path: The fully qualified path of the published object, which would include its project and folder.
        :param pulumi.Input[int] object_version: The object version.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceApplicationPatchMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object's key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, Any]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


@pulumi.input_type
class WorkspaceApplicationPatchMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Detailed description for the object.
        :param pulumi.Input[str] identifier: Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[str] name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceApplicationPatchMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


@pulumi.input_type
class WorkspaceApplicationPatchMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


@pulumi.input_type
class WorkspaceApplicationPatchParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceApplicationPatchPatchObjectMetadataArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The patch action indicating if object was created, updated, or deleted.
        :param pulumi.Input[str] identifier: Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[str] name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] name_path: The fully qualified path of the published object, which would include its project and folder.
        :param pulumi.Input[int] object_version: The object version.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceApplicationPatchRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


@pulumi.input_type
class WorkspaceApplicationPublishedObjectMetadataArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The patch action indicating if object was created, updated, or deleted.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] name_path: The fully qualified path of the published object, which would include its project and folder.
        :param pulumi.Input[int] object_version: The object version.
        :param pulumi.Input[str] type: The type of the object in patch.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceApplicationRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


@pulumi.input_type
class WorkspaceApplicationScheduleFrequencyDetailsArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 custom_expression: Optional[pulumi.Input[str]] = None,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 frequency: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input['WorkspaceApplicationScheduleFrequencyDetailsTimeArgs']] = None,
                 week_of_month: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the model
        :param pulumi.Input[str] custom_expression: (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        :param pulumi.Input[str] day_of_week: (Updatable) This holds the day of the week on which the schedule should be triggered.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days: (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        :param pulumi.Input[str] frequency: (Updatable) the frequency of the schedule.
        :param pulumi.Input[int] interval: (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        :param pulumi.Input['WorkspaceApplicationScheduleFrequencyDetailsTimeArgs'] time: (Updatable) A model to hold time in hour:minute:second format.
        :param pulumi.Input[str] week_of_month: (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
        pulumi.set(__self__, "model_type", model_type)
        if custom_expression is not None:
            pulumi.set(__self__, "custom_expression", custom_expression)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_of_month is not None:
            pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the model
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="customExpression")
    def custom_expression(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        """
        return pulumi.get(self, "custom_expression")

    @custom_expression.setter
    def custom_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_expression", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the day of the week on which the schedule should be triggered.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) the frequency of the schedule.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['WorkspaceApplicationScheduleFrequencyDetailsTimeArgs']]:
        """
        (Updatable) A model to hold time in hour:minute:second format.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['WorkspaceApplicationScheduleFrequencyDetailsTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
        return pulumi.get(self, "week_of_month")

    @week_of_month.setter
    def week_of_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "week_of_month", value)


@pulumi.input_type
class WorkspaceApplicationScheduleFrequencyDetailsTimeArgs:
    def __init__(__self__, *,
                 hour: Optional[pulumi.Input[int]] = None,
                 minute: Optional[pulumi.Input[int]] = None,
                 second: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] hour: (Updatable) The hour value.
        :param pulumi.Input[int] minute: (Updatable) The minute value.
        :param pulumi.Input[int] second: (Updatable) The second value.
        """
        if hour is not None:
            pulumi.set(__self__, "hour", hour)
        if minute is not None:
            pulumi.set(__self__, "minute", minute)
        if second is not None:
            pulumi.set(__self__, "second", second)

    @property
    @pulumi.getter
    def hour(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The hour value.
        """
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour", value)

    @property
    @pulumi.getter
    def minute(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The minute value.
        """
        return pulumi.get(self, "minute")

    @minute.setter
    def minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minute", value)

    @property
    @pulumi.getter
    def second(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The second value.
        """
        return pulumi.get(self, "second")

    @second.setter
    def second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "second", value)


@pulumi.input_type
class WorkspaceApplicationScheduleMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, Any]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


@pulumi.input_type
class WorkspaceApplicationScheduleMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceApplicationScheduleMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


@pulumi.input_type
class WorkspaceApplicationScheduleMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


@pulumi.input_type
class WorkspaceApplicationScheduleParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceApplicationScheduleRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


@pulumi.input_type
class WorkspaceApplicationSourceApplicationInfoArgs:
    def __init__(__self__, *,
                 application_key: Optional[pulumi.Input[str]] = None,
                 application_version: Optional[pulumi.Input[str]] = None,
                 copy_type: Optional[pulumi.Input[str]] = None,
                 last_patch_key: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] application_key: The source application key to use when creating the application.
        :param pulumi.Input[str] application_version: The source application version of the application.
        :param pulumi.Input[str] copy_type: Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
        :param pulumi.Input[str] last_patch_key: The last patch key for the application.
        :param pulumi.Input[str] workspace_id: The workspace ID.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if application_key is not None:
            pulumi.set(__self__, "application_key", application_key)
        if application_version is not None:
            pulumi.set(__self__, "application_version", application_version)
        if copy_type is not None:
            pulumi.set(__self__, "copy_type", copy_type)
        if last_patch_key is not None:
            pulumi.set(__self__, "last_patch_key", last_patch_key)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> Optional[pulumi.Input[str]]:
        """
        The source application key to use when creating the application.
        """
        return pulumi.get(self, "application_key")

    @application_key.setter
    def application_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_key", value)

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> Optional[pulumi.Input[str]]:
        """
        The source application version of the application.
        """
        return pulumi.get(self, "application_version")

    @application_version.setter
    def application_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_version", value)

    @property
    @pulumi.getter(name="copyType")
    def copy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
        """
        return pulumi.get(self, "copy_type")

    @copy_type.setter
    def copy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_type", value)

    @property
    @pulumi.getter(name="lastPatchKey")
    def last_patch_key(self) -> Optional[pulumi.Input[str]]:
        """
        The last patch key for the application.
        """
        return pulumi.get(self, "last_patch_key")

    @last_patch_key.setter
    def last_patch_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_patch_key", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workspace ID.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleLastRunDetailArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 last_run_time_millis: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 parent_reves: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs']]]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) The description of the aggregator.
        :param pulumi.Input[str] identifier: (Updatable) The identifier of the aggregator.
        :param pulumi.Input[str] key: (Updatable) The key of the aggregator object.
        :param pulumi.Input[str] last_run_time_millis: Time in milliseconds for the pervious schedule.
        :param pulumi.Input[str] model_type: (Updatable) The type of the object.
        :param pulumi.Input[str] model_version: (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs']]] parent_reves: (Updatable) A reference to the object's parent.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if last_run_time_millis is not None:
            pulumi.set(__self__, "last_run_time_millis", last_run_time_millis)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_reves is not None:
            pulumi.set(__self__, "parent_reves", parent_reves)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="lastRunTimeMillis")
    def last_run_time_millis(self) -> Optional[pulumi.Input[str]]:
        """
        Time in milliseconds for the pervious schedule.
        """
        return pulumi.get(self, "last_run_time_millis")

    @last_run_time_millis.setter
    def last_run_time_millis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_run_time_millis", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs']]]]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_reves")

    @parent_reves.setter
    def parent_reves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs']]]]):
        pulumi.set(self, "parent_reves", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleLastRunDetailParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataAggregatorArgs']]] aggregators: (Updatable) A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs']]] count_statistics: (Updatable) A count statistics.
        :param pulumi.Input[str] created_by: (Updatable) The user that created the object.
        :param pulumi.Input[str] created_by_name: (Updatable) The user that created the object.
        :param pulumi.Input[str] identifier_path: (Updatable) The full path to identify this object.
        :param pulumi.Input[Mapping[str, Any]] info_fields: (Updatable) Information property fields.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version of the object.
        :param pulumi.Input[str] time_created: (Updatable) The date and time that the object was created.
        :param pulumi.Input[str] time_updated: (Updatable) The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: (Updatable) The user that updated the object.
        :param pulumi.Input[str] updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataAggregatorArgs']]]]:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs']]]]:
        """
        (Updatable) A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) The description of the aggregator.
        :param pulumi.Input[str] identifier: (Updatable) The identifier of the aggregator.
        :param pulumi.Input[str] key: (Updatable) The key of the aggregator object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: (Updatable) The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: (Updatable) The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        (Updatable) The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: (Updatable) The value for the count statistic object.
        :param pulumi.Input[str] object_type: (Updatable) The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The key of the aggregator object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version of the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 frequency_details: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs']] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 is_daylight_adjustment_enabled: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs']] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 object_version: Optional[pulumi.Input[int]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs']] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) The description of the aggregator.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs'] frequency_details: (Updatable) The model that holds the frequency details.
        :param pulumi.Input[str] identifier: (Updatable) The identifier of the aggregator.
        :param pulumi.Input[bool] is_daylight_adjustment_enabled: (Updatable) A flag to indicate daylight saving.
        :param pulumi.Input[str] key: (Updatable) The key of the aggregator object.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs'] metadata: (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        :param pulumi.Input[str] model_type: (Updatable) The type of the object.
        :param pulumi.Input[str] model_version: (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[int] object_version: (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] timezone: (Updatable) The timezone for the schedule.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if frequency_details is not None:
            pulumi.set(__self__, "frequency_details", frequency_details)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if is_daylight_adjustment_enabled is not None:
            pulumi.set(__self__, "is_daylight_adjustment_enabled", is_daylight_adjustment_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="frequencyDetails")
    def frequency_details(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs']]:
        """
        (Updatable) The model that holds the frequency details.
        """
        return pulumi.get(self, "frequency_details")

    @frequency_details.setter
    def frequency_details(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs']]):
        pulumi.set(self, "frequency_details", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter(name="isDaylightAdjustmentEnabled")
    def is_daylight_adjustment_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) A flag to indicate daylight saving.
        """
        return pulumi.get(self, "is_daylight_adjustment_enabled")

    @is_daylight_adjustment_enabled.setter
    def is_daylight_adjustment_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_daylight_adjustment_enabled", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs']]:
        """
        (Updatable) A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This is a version number that is used by the service to upgrade objects if needed through releases of the service.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The timezone for the schedule.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 custom_expression: Optional[pulumi.Input[str]] = None,
                 day_of_week: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 frequency: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 time: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs']] = None,
                 week_of_month: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the object.
        :param pulumi.Input[str] custom_expression: (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        :param pulumi.Input[str] day_of_week: (Updatable) This holds the day of the week on which the schedule should be triggered.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] days: (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        :param pulumi.Input[str] frequency: (Updatable) the frequency of the schedule.
        :param pulumi.Input[int] interval: (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs'] time: (Updatable) A model to hold time in hour:minute:second format.
        :param pulumi.Input[str] week_of_month: (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
        pulumi.set(__self__, "model_type", model_type)
        if custom_expression is not None:
            pulumi.set(__self__, "custom_expression", custom_expression)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if week_of_month is not None:
            pulumi.set(__self__, "week_of_month", week_of_month)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="customExpression")
    def custom_expression(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the complete cron expression for this schedule, for example, 10 0/5 * * * ? that fires every 5 minutes, at 10 seconds after the minute (i.e. 10:00:10 am, 10:05:10 am, etc.)
        """
        return pulumi.get(self, "custom_expression")

    @custom_expression.setter
    def custom_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_expression", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the day of the week on which the schedule should be triggered.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        (Updatable) A list of days of the month to be scheduled. i.e. excute every 2nd,3rd, 10th of the month.
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) the frequency of the schedule.
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) This hold the repeatability aspect of a schedule. i.e. in a monhtly frequency, a task can be scheduled for every month, once in two months, once in tree months etc.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs']]:
        """
        (Updatable) A model to hold time in hour:minute:second format.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="weekOfMonth")
    def week_of_month(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) This holds the week of the month in which the schedule should be triggered.
        """
        return pulumi.get(self, "week_of_month")

    @week_of_month.setter
    def week_of_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "week_of_month", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefFrequencyDetailsTimeArgs:
    def __init__(__self__, *,
                 hour: Optional[pulumi.Input[int]] = None,
                 minute: Optional[pulumi.Input[int]] = None,
                 second: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] hour: (Updatable) The hour value.
        :param pulumi.Input[int] minute: (Updatable) The minute value.
        :param pulumi.Input[int] second: (Updatable) The second value.
        """
        if hour is not None:
            pulumi.set(__self__, "hour", hour)
        if minute is not None:
            pulumi.set(__self__, "minute", minute)
        if second is not None:
            pulumi.set(__self__, "second", second)

    @property
    @pulumi.getter
    def hour(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The hour value.
        """
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour", value)

    @property
    @pulumi.getter
    def minute(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The minute value.
        """
        return pulumi.get(self, "minute")

    @minute.setter
    def minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minute", value)

    @property
    @pulumi.getter
    def second(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The second value.
        """
        return pulumi.get(self, "second")

    @second.setter
    def second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "second", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefMetadataArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs']] = None,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 count_statistics: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs']] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs'] aggregator: (Updatable) A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object key for this object.
        :param pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs'] count_statistics: (Updatable) A count statistics.
        :param pulumi.Input[str] created_by: (Updatable) The user that created the object.
        :param pulumi.Input[str] created_by_name: (Updatable) The user that created the object.
        :param pulumi.Input[str] identifier_path: (Updatable) The full path to identify this object.
        :param pulumi.Input[Mapping[str, Any]] info_fields: (Updatable) Information property fields.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version of the object.
        :param pulumi.Input[str] time_created: (Updatable) The date and time that the object was created.
        :param pulumi.Input[str] time_updated: (Updatable) The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: (Updatable) The user that updated the object.
        :param pulumi.Input[str] updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs']]:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs']]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs']]:
        """
        (Updatable) A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs']]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) The description of the aggregator.
        :param pulumi.Input[str] identifier: (Updatable) The identifier of the aggregator.
        :param pulumi.Input[str] key: (Updatable) The key of the aggregator object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: (Updatable) The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsArgs:
    def __init__(__self__, *,
                 object_type_count_lists: pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs']]] object_type_count_lists: (Updatable) The array of statistics.
        """
        pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs']]]:
        """
        (Updatable) The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: pulumi.Input[Sequence[pulumi.Input['WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs']]]):
        pulumi.set(self, "object_type_count_lists", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefMetadataCountStatisticsObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: (Updatable) The value for the count statistic object.
        :param pulumi.Input[str] object_type: (Updatable) The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


@pulumi.input_type
class WorkspaceApplicationTaskScheduleScheduleRefParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceExportRequestExportedItemArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[str]] = None,
                 time_updated_in_millis: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: Aggregator key
        :param pulumi.Input[str] identifier: Object identifier
        :param pulumi.Input[str] key: Export object request key
        :param pulumi.Input[str] name: Name of the export request.
        :param pulumi.Input[str] name_path: Object name path
        :param pulumi.Input[str] object_type: Object type
        :param pulumi.Input[str] object_version: Object version
        :param pulumi.Input[str] time_updated_in_millis: time at which this object was last updated.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Export object request key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the export request.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[str]]:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[pulumi.Input[str]]:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")

    @time_updated_in_millis.setter
    def time_updated_in_millis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated_in_millis", value)


@pulumi.input_type
class WorkspaceFolderMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, Any]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


@pulumi.input_type
class WorkspaceFolderMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) A user defined description for the folder.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user defined description for the folder.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceFolderMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


@pulumi.input_type
class WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


@pulumi.input_type
class WorkspaceFolderParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceFolderRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


@pulumi.input_type
class WorkspaceImportRequestImportConflictResolutionArgs:
    def __init__(__self__, *,
                 import_conflict_resolution_type: pulumi.Input[str],
                 duplicate_prefix: Optional[pulumi.Input[str]] = None,
                 duplicate_suffix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] import_conflict_resolution_type: Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        :param pulumi.Input[str] duplicate_prefix: In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        :param pulumi.Input[str] duplicate_suffix: In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        """
        pulumi.set(__self__, "import_conflict_resolution_type", import_conflict_resolution_type)
        if duplicate_prefix is not None:
            pulumi.set(__self__, "duplicate_prefix", duplicate_prefix)
        if duplicate_suffix is not None:
            pulumi.set(__self__, "duplicate_suffix", duplicate_suffix)

    @property
    @pulumi.getter(name="importConflictResolutionType")
    def import_conflict_resolution_type(self) -> pulumi.Input[str]:
        """
        Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        """
        return pulumi.get(self, "import_conflict_resolution_type")

    @import_conflict_resolution_type.setter
    def import_conflict_resolution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "import_conflict_resolution_type", value)

    @property
    @pulumi.getter(name="duplicatePrefix")
    def duplicate_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_prefix")

    @duplicate_prefix.setter
    def duplicate_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplicate_prefix", value)

    @property
    @pulumi.getter(name="duplicateSuffix")
    def duplicate_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_suffix")

    @duplicate_suffix.setter
    def duplicate_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duplicate_suffix", value)


@pulumi.input_type
class WorkspaceImportRequestImportedObjectArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_path: Optional[pulumi.Input[str]] = None,
                 new_key: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None,
                 object_version: Optional[pulumi.Input[str]] = None,
                 old_key: Optional[pulumi.Input[str]] = None,
                 resolution_action: Optional[pulumi.Input[str]] = None,
                 time_updated_in_millis: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: Aggregator key
        :param pulumi.Input[str] identifier: Object identifier
        :param pulumi.Input[str] name: Name of the import request.
        :param pulumi.Input[str] name_path: Object name path
        :param pulumi.Input[str] new_key: New key of the object
        :param pulumi.Input[str] object_type: Object type
        :param pulumi.Input[str] object_version: Object version
        :param pulumi.Input[str] old_key: Old key of the object
        :param pulumi.Input[str] resolution_action: Object resolution action
        :param pulumi.Input[str] time_updated_in_millis: time at which this object was last updated.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if new_key is not None:
            pulumi.set(__self__, "new_key", new_key)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if old_key is not None:
            pulumi.set(__self__, "old_key", old_key)
        if resolution_action is not None:
            pulumi.set(__self__, "resolution_action", resolution_action)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the import request.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[pulumi.Input[str]]:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @name_path.setter
    def name_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name_path", value)

    @property
    @pulumi.getter(name="newKey")
    def new_key(self) -> Optional[pulumi.Input[str]]:
        """
        New key of the object
        """
        return pulumi.get(self, "new_key")

    @new_key.setter
    def new_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "new_key", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[pulumi.Input[str]]:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @object_version.setter
    def object_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_version", value)

    @property
    @pulumi.getter(name="oldKey")
    def old_key(self) -> Optional[pulumi.Input[str]]:
        """
        Old key of the object
        """
        return pulumi.get(self, "old_key")

    @old_key.setter
    def old_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "old_key", value)

    @property
    @pulumi.getter(name="resolutionAction")
    def resolution_action(self) -> Optional[pulumi.Input[str]]:
        """
        Object resolution action
        """
        return pulumi.get(self, "resolution_action")

    @resolution_action.setter
    def resolution_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_action", value)

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[pulumi.Input[str]]:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")

    @time_updated_in_millis.setter
    def time_updated_in_millis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated_in_millis", value)


@pulumi.input_type
class WorkspaceProjectMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataAggregatorArgs']]] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticArgs']]] count_statistics: A count statistics.
        :param pulumi.Input[str] created_by: The user that created the object.
        :param pulumi.Input[str] created_by_name: The user that created the object.
        :param pulumi.Input[str] identifier_path: The full path to identify this object.
        :param pulumi.Input[Mapping[str, Any]] info_fields: Information property fields.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        :param pulumi.Input[str] time_created: The date and time that the object was created.
        :param pulumi.Input[str] time_updated: The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: The user that updated the object.
        :param pulumi.Input[str] updated_by_name: The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataAggregatorArgs']]]]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticArgs']]]]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


@pulumi.input_type
class WorkspaceProjectMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) A user defined description for the project.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: The type of the aggregator.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user defined description for the project.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceProjectMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


@pulumi.input_type
class WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: The value for the count statistic object.
        :param pulumi.Input[str] object_type: The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


@pulumi.input_type
class WorkspaceProjectParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: Key of the parent object.
        :param pulumi.Input[str] root_doc_id: Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceProjectRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The identifying key for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


@pulumi.input_type
class WorkspaceTaskAuthConfigArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskAuthConfigParentRefArgs']] = None,
                 resource_principal_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input['WorkspaceTaskAuthConfigParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] resource_principal_source: (Updatable) The Oracle Cloud Infrastructure resource type that will supply the authentication token
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if resource_principal_source is not None:
            pulumi.set(__self__, "resource_principal_source", resource_principal_source)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskAuthConfigParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskAuthConfigParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter(name="resourcePrincipalSource")
    def resource_principal_source(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The Oracle Cloud Infrastructure resource type that will supply the authentication token
        """
        return pulumi.get(self, "resource_principal_source")

    @resource_principal_source.setter
    def resource_principal_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_principal_source", value)


@pulumi.input_type
class WorkspaceTaskAuthConfigParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 method_type: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] method_type: (Updatable) The REST method to use.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[Mapping[str, Any]] request_headers: (Updatable) The headers for the REST call.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if method_type is not None:
            pulumi.set(__self__, "method_type", method_type)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="methodType")
    def method_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The REST method to use.
        """
        return pulumi.get(self, "method_type")

    @method_type.setter
    def method_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method_type", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) The headers for the REST call.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "request_headers", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 request_payload: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']] = None,
                 request_url: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']] = None):
        if request_payload is not None:
            pulumi.set(__self__, "request_payload", request_payload)
        if request_url is not None:
            pulumi.set(__self__, "request_url", request_url)

    @property
    @pulumi.getter(name="requestPayload")
    def request_payload(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]:
        return pulumi.get(self, "request_payload")

    @request_payload.setter
    def request_payload(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]):
        pulumi.set(self, "request_payload", value)

    @property
    @pulumi.getter(name="requestUrl")
    def request_url(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]:
        return pulumi.get(self, "request_url")

    @request_url.setter
    def request_url(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]):
        pulumi.set(self, "request_url", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs:
    def __init__(__self__, *,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']] = None):
        """
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs'] ref_value: (Updatable) The root object reference value.
        """
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]):
        pulumi.set(self, "ref_value", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 data_param: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']] = None):
        if data_param is not None:
            pulumi.set(__self__, "data_param", data_param)

    @property
    @pulumi.getter(name="dataParam")
    def data_param(self) -> Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]:
        return pulumi.get(self, "data_param")

    @data_param.setter
    def data_param(self, value: Optional[pulumi.Input['WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]):
        pulumi.set(self, "data_param", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskCancelRestCallConfigConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskConfigProviderDelegateArgs:
    def __init__(__self__, *,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingArgs']]] bindings: bindings
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingArgs']]]]:
        """
        bindings
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingArgs']]]]):
        pulumi.set(self, "bindings", value)


@pulumi.input_type
class WorkspaceTaskConfigProviderDelegateBindingArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 parameter_values: Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs']] = None):
        """
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if parameter_values is not None:
            pulumi.set(__self__, "parameter_values", parameter_values)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="parameterValues")
    def parameter_values(self) -> Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs']]:
        return pulumi.get(self, "parameter_values")

    @parameter_values.setter
    def parameter_values(self, value: Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs']]):
        pulumi.set(self, "parameter_values", value)


@pulumi.input_type
class WorkspaceTaskConfigProviderDelegateBindingParameterValuesArgs:
    def __init__(__self__, *,
                 root_object_value: Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs']] = None,
                 simple_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs'] root_object_value: (Updatable) The root object value, used in custom parameters.
        :param pulumi.Input[str] simple_value: A simple value for the parameter.
        """
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if simple_value is not None:
            pulumi.set(__self__, "simple_value", simple_value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs']]:
        """
        (Updatable) The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input['WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs']]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="simpleValue")
    def simple_value(self) -> Optional[pulumi.Input[str]]:
        """
        A simple value for the parameter.
        """
        return pulumi.get(self, "simple_value")

    @simple_value.setter
    def simple_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "simple_value", value)


@pulumi.input_type
class WorkspaceTaskConfigProviderDelegateBindingParameterValuesRootObjectValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 method_type: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] method_type: (Updatable) The REST method to use.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[Mapping[str, Any]] request_headers: (Updatable) The headers for the REST call.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if method_type is not None:
            pulumi.set(__self__, "method_type", method_type)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="methodType")
    def method_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The REST method to use.
        """
        return pulumi.get(self, "method_type")

    @method_type.setter
    def method_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method_type", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) The headers for the REST call.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "request_headers", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 request_payload: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']] = None,
                 request_url: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']] = None):
        if request_payload is not None:
            pulumi.set(__self__, "request_payload", request_payload)
        if request_url is not None:
            pulumi.set(__self__, "request_url", request_url)

    @property
    @pulumi.getter(name="requestPayload")
    def request_payload(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]:
        return pulumi.get(self, "request_payload")

    @request_payload.setter
    def request_payload(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]):
        pulumi.set(self, "request_payload", value)

    @property
    @pulumi.getter(name="requestUrl")
    def request_url(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]:
        return pulumi.get(self, "request_url")

    @request_url.setter
    def request_url(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]):
        pulumi.set(self, "request_url", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs:
    def __init__(__self__, *,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']] = None):
        """
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs'] ref_value: (Updatable) The root object reference value.
        """
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]):
        pulumi.set(self, "ref_value", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 data_param: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']] = None):
        if data_param is not None:
            pulumi.set(__self__, "data_param", data_param)

    @property
    @pulumi.getter(name="dataParam")
    def data_param(self) -> Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]:
        return pulumi.get(self, "data_param")

    @data_param.setter
    def data_param(self, value: Optional[pulumi.Input['WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]):
        pulumi.set(self, "data_param", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskExecuteRestCallConfigConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskInputPortArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 config_values: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskInputPortParentRefArgs']] = None,
                 port_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input['WorkspaceTaskInputPortConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: (Updatable) An array of fields.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input['WorkspaceTaskInputPortParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] port_type: (Updatable) The port details for the data asset.Type.
        """
        pulumi.set(__self__, "model_type", model_type)
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if port_type is not None:
            pulumi.set(__self__, "port_type", port_type)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) An array of fields.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskInputPortParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskInputPortParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter(name="portType")
    def port_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The port details for the data asset.Type.
        """
        return pulumi.get(self, "port_type")

    @port_type.setter
    def port_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_type", value)


@pulumi.input_type
class WorkspaceTaskInputPortConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskInputPortConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskInputPortConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


@pulumi.input_type
class WorkspaceTaskInputPortConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None,
                 object_value: Optional[pulumi.Input[str]] = None,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input[str]] = None,
                 root_object_value: Optional[pulumi.Input[str]] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] int_value: (Updatable) An integer value of the parameter.
        :param pulumi.Input[str] object_value: (Updatable) An object value of the parameter.
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input[str] ref_value: (Updatable) The root object reference value.
        :param pulumi.Input[str] root_object_value: (Updatable) The root object value, used in custom parameters.
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_value", value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskInputPortConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskInputPortParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: Optional[pulumi.Input[str]] = None,
                 aggregators: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataAggregatorArgs']]]] = None,
                 count_statistics: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticArgs']]]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_by_name: Optional[pulumi.Input[str]] = None,
                 identifier_path: Optional[pulumi.Input[str]] = None,
                 info_fields: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 updated_by: Optional[pulumi.Input[str]] = None,
                 updated_by_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataAggregatorArgs']]] aggregators: (Updatable) A summary type containing information about the object's aggregator including its type, key, name and description.
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticArgs']]] count_statistics: (Updatable) A count statistics.
        :param pulumi.Input[str] created_by: (Updatable) The user that created the object.
        :param pulumi.Input[str] created_by_name: (Updatable) The user that created the object.
        :param pulumi.Input[str] identifier_path: (Updatable) The full path to identify this object.
        :param pulumi.Input[Mapping[str, Any]] info_fields: (Updatable) Information property fields.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        :param pulumi.Input[str] time_created: (Updatable) The date and time that the object was created.
        :param pulumi.Input[str] time_updated: (Updatable) The date and time that the object was updated.
        :param pulumi.Input[str] updated_by: (Updatable) The user that updated the object.
        :param pulumi.Input[str] updated_by_name: (Updatable) The user that updated the object.
        """
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataAggregatorArgs']]]]:
        """
        (Updatable) A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @aggregators.setter
    def aggregators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataAggregatorArgs']]]]):
        pulumi.set(self, "aggregators", value)

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticArgs']]]]:
        """
        (Updatable) A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @count_statistics.setter
    def count_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticArgs']]]]):
        pulumi.set(self, "count_statistics", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @created_by_name.setter
    def created_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by_name", value)

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @identifier_path.setter
    def identifier_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier_path", value)

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @info_fields.setter
    def info_fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "info_fields", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by", value)

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")

    @updated_by_name.setter
    def updated_by_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_by_name", value)


@pulumi.input_type
class WorkspaceTaskMetadataAggregatorArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[str] type: (Updatable) The object type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceTaskMetadataCountStatisticArgs:
    def __init__(__self__, *,
                 object_type_count_lists: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs']]] object_type_count_lists: (Updatable) The array of statistics.
        """
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs']]]]:
        """
        (Updatable) The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")

    @object_type_count_lists.setter
    def object_type_count_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs']]]]):
        pulumi.set(self, "object_type_count_lists", value)


@pulumi.input_type
class WorkspaceTaskMetadataCountStatisticObjectTypeCountListArgs:
    def __init__(__self__, *,
                 object_count: Optional[pulumi.Input[str]] = None,
                 object_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object_count: (Updatable) The value for the count statistic object.
        :param pulumi.Input[str] object_type: (Updatable) The type of object for the count statistic object.
        """
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @object_count.setter
    def object_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_count", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)


@pulumi.input_type
class WorkspaceTaskOpConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskOpConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


@pulumi.input_type
class WorkspaceTaskOpConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 config_param_value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        """
        if config_param_value is not None:
            pulumi.set(__self__, "config_param_value", config_param_value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="configParamValue")
    def config_param_value(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs']]:
        return pulumi.get(self, "config_param_value")

    @config_param_value.setter
    def config_param_value(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs']]):
        pulumi.set(self, "config_param_value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None,
                 object_value: Optional[pulumi.Input[str]] = None,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs']] = None,
                 root_object_value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] int_value: (Updatable) An integer value of the parameter.
        :param pulumi.Input[str] object_value: (Updatable) An object value of the parameter.
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs'] ref_value: (Updatable) The root object reference value.
        :param pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs'] root_object_value: (Updatable) The root object value, used in custom parameters.
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs']]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs']]):
        pulumi.set(self, "ref_value", value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']]:
        """
        (Updatable) The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input['WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRefValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


@pulumi.input_type
class WorkspaceTaskOpConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


@pulumi.input_type
class WorkspaceTaskOpConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskOutputPortArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 config_values: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskOutputPortParentRefArgs']] = None,
                 port_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input['WorkspaceTaskOutputPortConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: (Updatable) An array of fields.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input['WorkspaceTaskOutputPortParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] port_type: (Updatable) The port details for the data asset.Type.
        """
        pulumi.set(__self__, "model_type", model_type)
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if port_type is not None:
            pulumi.set(__self__, "port_type", port_type)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) An array of fields.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskOutputPortParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskOutputPortParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter(name="portType")
    def port_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The port details for the data asset.Type.
        """
        return pulumi.get(self, "port_type")

    @port_type.setter
    def port_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_type", value)


@pulumi.input_type
class WorkspaceTaskOutputPortConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskOutputPortConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskOutputPortConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


@pulumi.input_type
class WorkspaceTaskOutputPortConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None,
                 object_value: Optional[pulumi.Input[str]] = None,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input[str]] = None,
                 root_object_value: Optional[pulumi.Input[str]] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] int_value: (Updatable) An integer value of the parameter.
        :param pulumi.Input[str] object_value: (Updatable) An object value of the parameter.
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input[str] ref_value: (Updatable) The root object reference value.
        :param pulumi.Input[str] root_object_value: (Updatable) The root object value, used in custom parameters.
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ref_value", value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskOutputPortConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskOutputPortParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskParameterArgs:
    def __init__(__self__, *,
                 model_type: pulumi.Input[str],
                 config_values: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesArgs']] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_input: Optional[pulumi.Input[bool]] = None,
                 is_output: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 output_aggregation_type: Optional[pulumi.Input[str]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskParameterParentRefArgs']] = None,
                 root_object_default_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 type_name: Optional[pulumi.Input[str]] = None,
                 used_for: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] default_value: (Updatable) A default value for the vairable.
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[bool] is_input: (Updatable) Specifies whether the parameter is input value.
        :param pulumi.Input[bool] is_output: (Updatable) Specifies whether the parameter is output value.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input[str] output_aggregation_type: (Updatable) The output aggregation type.
        :param pulumi.Input['WorkspaceTaskParameterParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] root_object_default_value: (Updatable) A base class for all model types, including First Class and its contained objects.
        :param pulumi.Input[str] type: (Updatable) The object type.
        :param pulumi.Input[str] type_name: (Updatable) The type of value the parameter was created for.
        :param pulumi.Input[str] used_for: (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
        """
        pulumi.set(__self__, "model_type", model_type)
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_input is not None:
            pulumi.set(__self__, "is_input", is_input)
        if is_output is not None:
            pulumi.set(__self__, "is_output", is_output)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if output_aggregation_type is not None:
            pulumi.set(__self__, "output_aggregation_type", output_aggregation_type)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if root_object_default_value is not None:
            pulumi.set(__self__, "root_object_default_value", root_object_default_value)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if type_name is not None:
            pulumi.set(__self__, "type_name", type_name)
        if used_for is not None:
            pulumi.set(__self__, "used_for", used_for)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A default value for the vairable.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isInput")
    def is_input(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether the parameter is input value.
        """
        return pulumi.get(self, "is_input")

    @is_input.setter
    def is_input(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_input", value)

    @property
    @pulumi.getter(name="isOutput")
    def is_output(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether the parameter is output value.
        """
        return pulumi.get(self, "is_output")

    @is_output.setter
    def is_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_output", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="outputAggregationType")
    def output_aggregation_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The output aggregation type.
        """
        return pulumi.get(self, "output_aggregation_type")

    @output_aggregation_type.setter
    def output_aggregation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_aggregation_type", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskParameterParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskParameterParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter(name="rootObjectDefaultValue")
    def root_object_default_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A base class for all model types, including First Class and its contained objects.
        """
        return pulumi.get(self, "root_object_default_value")

    @root_object_default_value.setter
    def root_object_default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_object_default_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of value the parameter was created for.
        """
        return pulumi.get(self, "type_name")

    @type_name.setter
    def type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_name", value)

    @property
    @pulumi.getter(name="usedFor")
    def used_for(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The param name for which parameter is created for for eg. driver Shape, Operation etc.
        """
        return pulumi.get(self, "used_for")

    @used_for.setter
    def used_for(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "used_for", value)


@pulumi.input_type
class WorkspaceTaskParameterConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


@pulumi.input_type
class WorkspaceTaskParameterConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 config_param_value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        """
        if config_param_value is not None:
            pulumi.set(__self__, "config_param_value", config_param_value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="configParamValue")
    def config_param_value(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs']]:
        return pulumi.get(self, "config_param_value")

    @config_param_value.setter
    def config_param_value(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs']]):
        pulumi.set(self, "config_param_value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None,
                 object_value: Optional[pulumi.Input[str]] = None,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs']] = None,
                 root_object_value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] int_value: (Updatable) An integer value of the parameter.
        :param pulumi.Input[str] object_value: (Updatable) An object value of the parameter.
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs'] ref_value: (Updatable) The root object reference value.
        :param pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs'] root_object_value: (Updatable) The root object value, used in custom parameters.
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)
        if root_object_value is not None:
            pulumi.set(__self__, "root_object_value", root_object_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_value", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs']]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs']]):
        pulumi.set(self, "ref_value", value)

    @property
    @pulumi.getter(name="rootObjectValue")
    def root_object_value(self) -> Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']]:
        """
        (Updatable) The root object value, used in custom parameters.
        """
        return pulumi.get(self, "root_object_value")

    @root_object_value.setter
    def root_object_value(self, value: Optional[pulumi.Input['WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs']]):
        pulumi.set(self, "root_object_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRefValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


@pulumi.input_type
class WorkspaceTaskParameterConfigValuesConfigParamValuesConfigParamValueRootObjectValueArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)


@pulumi.input_type
class WorkspaceTaskParameterConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskParameterParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 method_type: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] method_type: (Updatable) The REST method to use.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[Mapping[str, Any]] request_headers: (Updatable) The headers for the REST call.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if method_type is not None:
            pulumi.set(__self__, "method_type", method_type)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="methodType")
    def method_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The REST method to use.
        """
        return pulumi.get(self, "method_type")

    @method_type.setter
    def method_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method_type", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) The headers for the REST call.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "request_headers", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 poll_condition: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs']] = None,
                 poll_interval: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs']] = None,
                 poll_interval_unit: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs']] = None,
                 poll_max_duration: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs']] = None,
                 poll_max_duration_unit: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs']] = None,
                 request_payload: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']] = None,
                 request_url: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']] = None):
        if poll_condition is not None:
            pulumi.set(__self__, "poll_condition", poll_condition)
        if poll_interval is not None:
            pulumi.set(__self__, "poll_interval", poll_interval)
        if poll_interval_unit is not None:
            pulumi.set(__self__, "poll_interval_unit", poll_interval_unit)
        if poll_max_duration is not None:
            pulumi.set(__self__, "poll_max_duration", poll_max_duration)
        if poll_max_duration_unit is not None:
            pulumi.set(__self__, "poll_max_duration_unit", poll_max_duration_unit)
        if request_payload is not None:
            pulumi.set(__self__, "request_payload", request_payload)
        if request_url is not None:
            pulumi.set(__self__, "request_url", request_url)

    @property
    @pulumi.getter(name="pollCondition")
    def poll_condition(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs']]:
        return pulumi.get(self, "poll_condition")

    @poll_condition.setter
    def poll_condition(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs']]):
        pulumi.set(self, "poll_condition", value)

    @property
    @pulumi.getter(name="pollInterval")
    def poll_interval(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs']]:
        return pulumi.get(self, "poll_interval")

    @poll_interval.setter
    def poll_interval(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs']]):
        pulumi.set(self, "poll_interval", value)

    @property
    @pulumi.getter(name="pollIntervalUnit")
    def poll_interval_unit(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs']]:
        return pulumi.get(self, "poll_interval_unit")

    @poll_interval_unit.setter
    def poll_interval_unit(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs']]):
        pulumi.set(self, "poll_interval_unit", value)

    @property
    @pulumi.getter(name="pollMaxDuration")
    def poll_max_duration(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs']]:
        return pulumi.get(self, "poll_max_duration")

    @poll_max_duration.setter
    def poll_max_duration(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs']]):
        pulumi.set(self, "poll_max_duration", value)

    @property
    @pulumi.getter(name="pollMaxDurationUnit")
    def poll_max_duration_unit(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs']]:
        return pulumi.get(self, "poll_max_duration_unit")

    @poll_max_duration_unit.setter
    def poll_max_duration_unit(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs']]):
        pulumi.set(self, "poll_max_duration_unit", value)

    @property
    @pulumi.getter(name="requestPayload")
    def request_payload(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]:
        return pulumi.get(self, "request_payload")

    @request_payload.setter
    def request_payload(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs']]):
        pulumi.set(self, "request_payload", value)

    @property
    @pulumi.getter(name="requestUrl")
    def request_url(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]:
        return pulumi.get(self, "request_url")

    @request_url.setter
    def request_url(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs']]):
        pulumi.set(self, "request_url", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionArgs:
    def __init__(__self__, *,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs']] = None):
        """
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs'] ref_value: (Updatable) The root object reference value.
        """
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs']]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs']]):
        pulumi.set(self, "ref_value", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollConditionRefValueArgs:
    def __init__(__self__, *,
                 expr_string: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expr_string: (Updatable) The expression string for the object.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        if expr_string is not None:
            pulumi.set(__self__, "expr_string", expr_string)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="exprString")
    def expr_string(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The expression string for the object.
        """
        return pulumi.get(self, "expr_string")

    @expr_string.setter
    def expr_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expr_string", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalArgs:
    def __init__(__self__, *,
                 object_value: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] object_value: (Updatable) An object value of the parameter.
        """
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "object_value", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollIntervalUnitArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationArgs:
    def __init__(__self__, *,
                 object_value: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] object_value: (Updatable) An object value of the parameter.
        """
        if object_value is not None:
            pulumi.set(__self__, "object_value", object_value)

    @property
    @pulumi.getter(name="objectValue")
    def object_value(self) -> Optional[pulumi.Input[float]]:
        """
        (Updatable) An object value of the parameter.
        """
        return pulumi.get(self, "object_value")

    @object_value.setter
    def object_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "object_value", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesPollMaxDurationUnitArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadArgs:
    def __init__(__self__, *,
                 parameter_value: Optional[pulumi.Input[str]] = None,
                 ref_value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']] = None):
        """
        :param pulumi.Input[str] parameter_value: (Updatable) Reference to the parameter by its key.
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs'] ref_value: (Updatable) The root object reference value.
        """
        if parameter_value is not None:
            pulumi.set(__self__, "parameter_value", parameter_value)
        if ref_value is not None:
            pulumi.set(__self__, "ref_value", ref_value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Reference to the parameter by its key.
        """
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_value", value)

    @property
    @pulumi.getter(name="refValue")
    def ref_value(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]:
        """
        (Updatable) The root object reference value.
        """
        return pulumi.get(self, "ref_value")

    @ref_value.setter
    def ref_value(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs']]):
        pulumi.set(self, "ref_value", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 data_param: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']] = None):
        if data_param is not None:
            pulumi.set(__self__, "data_param", data_param)

    @property
    @pulumi.getter(name="dataParam")
    def data_param(self) -> Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]:
        return pulumi.get(self, "data_param")

    @data_param.setter
    def data_param(self, value: Optional[pulumi.Input['WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs']]):
        pulumi.set(self, "data_param", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestPayloadRefValueConfigValuesConfigParamValuesDataParamArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesConfigParamValuesRequestUrlArgs:
    def __init__(__self__, *,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] string_value: (Updatable) A string value of the parameter.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A string value of the parameter.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class WorkspaceTaskPollRestCallConfigConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskRegistryMetadataArgs:
    def __init__(__self__, *,
                 aggregator_key: pulumi.Input[str],
                 is_favorite: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregator_key: (Updatable) The owning object's key for this object.
        :param pulumi.Input[bool] is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param pulumi.Input[int] registry_version: (Updatable) The registry version.
        """
        pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> pulumi.Input[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @aggregator_key.setter
    def aggregator_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregator_key", value)

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @is_favorite.setter
    def is_favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_favorite", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @registry_version.setter
    def registry_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "registry_version", value)


@pulumi.input_type
class WorkspaceTaskTypedExpressionArgs:
    def __init__(__self__, *,
                 config_values: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model_type: Optional[pulumi.Input[str]] = None,
                 model_version: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_status: Optional[pulumi.Input[int]] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskTypedExpressionParentRefArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesArgs'] config_values: (Updatable) Configuration values can be string, objects, or parameters.
        :param pulumi.Input[str] description: (Updatable) Detailed description for the object.
        :param pulumi.Input[str] expression: (Updatable) The expression string for the object.
        :param pulumi.Input[str] key: (Updatable) The key of the object.
        :param pulumi.Input[str] model_type: (Updatable) The type of the types object.
        :param pulumi.Input[str] model_version: (Updatable) The model version of an object.
        :param pulumi.Input[str] name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param pulumi.Input[int] object_status: (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param pulumi.Input['WorkspaceTaskTypedExpressionParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        :param pulumi.Input[str] type: (Updatable) The object type.
        """
        if config_values is not None:
            pulumi.set(__self__, "config_values", config_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="configValues")
    def config_values(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesArgs']]:
        """
        (Updatable) Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "config_values")

    @config_values.setter
    def config_values(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesArgs']]):
        pulumi.set(self, "config_values", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The expression string for the object.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The key of the object.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @model_type.setter
    def model_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_type", value)

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @model_version.setter
    def model_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @object_status.setter
    def object_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_status", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The object type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesArgs:
    def __init__(__self__, *,
                 config_param_values: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs']] = None,
                 parent_ref: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesParentRefArgs']] = None):
        """
        :param pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs'] config_param_values: (Updatable) The configuration parameter values.
        :param pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesParentRefArgs'] parent_ref: (Updatable) A reference to the object's parent.
        """
        if config_param_values is not None:
            pulumi.set(__self__, "config_param_values", config_param_values)
        if parent_ref is not None:
            pulumi.set(__self__, "parent_ref", parent_ref)

    @property
    @pulumi.getter(name="configParamValues")
    def config_param_values(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs']]:
        """
        (Updatable) The configuration parameter values.
        """
        return pulumi.get(self, "config_param_values")

    @config_param_values.setter
    def config_param_values(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs']]):
        pulumi.set(self, "config_param_values", value)

    @property
    @pulumi.getter(name="parentRef")
    def parent_ref(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesParentRefArgs']]:
        """
        (Updatable) A reference to the object's parent.
        """
        return pulumi.get(self, "parent_ref")

    @parent_ref.setter
    def parent_ref(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesParentRefArgs']]):
        pulumi.set(self, "parent_ref", value)


@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesArgs:
    def __init__(__self__, *,
                 length: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs']] = None,
                 scale: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs']] = None):
        if length is not None:
            pulumi.set(__self__, "length", length)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs']]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs']]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs']]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input['WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs']]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesLengthArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] int_value: (Updatable) An integer value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)


@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesConfigParamValuesScaleArgs:
    def __init__(__self__, *,
                 int_value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] int_value: (Updatable) An integer value of the parameter.
        """
        if int_value is not None:
            pulumi.set(__self__, "int_value", int_value)

    @property
    @pulumi.getter(name="intValue")
    def int_value(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) An integer value of the parameter.
        """
        return pulumi.get(self, "int_value")

    @int_value.setter
    def int_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "int_value", value)


@pulumi.input_type
class WorkspaceTaskTypedExpressionConfigValuesParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class WorkspaceTaskTypedExpressionParentRefArgs:
    def __init__(__self__, *,
                 parent: Optional[pulumi.Input[str]] = None,
                 root_doc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent: (Updatable) Key of the parent object.
        :param pulumi.Input[str] root_doc_id: (Updatable) Key of the root document object.
        """
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")

    @root_doc_id.setter
    def root_doc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_doc_id", value)


@pulumi.input_type
class GetWorkspaceApplicationPatchesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWorkspaceApplicationSchedulesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWorkspaceApplicationTaskSchedulesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWorkspaceApplicationsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWorkspaceExportRequestsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWorkspaceFoldersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWorkspaceImportRequestsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWorkspaceProjectsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWorkspaceTasksFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetWorkspacesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


