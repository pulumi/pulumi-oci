# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetWorkspaceResult',
    'AwaitableGetWorkspaceResult',
    'get_workspace',
    'get_workspace_output',
]

@pulumi.output_type
class GetWorkspaceResult:
    """
    A collection of values returned by getWorkspace.
    """
    def __init__(__self__, compartment_id=None, defined_tags=None, description=None, display_name=None, dns_server_ip=None, dns_server_zone=None, endpoint_compartment_id=None, endpoint_id=None, endpoint_name=None, freeform_tags=None, id=None, is_force_operation=None, is_private_network_enabled=None, quiesce_timeout=None, registry_compartment_id=None, registry_id=None, registry_name=None, state=None, state_message=None, subnet_id=None, time_created=None, time_updated=None, vcn_id=None, workspace_id=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if dns_server_ip and not isinstance(dns_server_ip, str):
            raise TypeError("Expected argument 'dns_server_ip' to be a str")
        pulumi.set(__self__, "dns_server_ip", dns_server_ip)
        if dns_server_zone and not isinstance(dns_server_zone, str):
            raise TypeError("Expected argument 'dns_server_zone' to be a str")
        pulumi.set(__self__, "dns_server_zone", dns_server_zone)
        if endpoint_compartment_id and not isinstance(endpoint_compartment_id, str):
            raise TypeError("Expected argument 'endpoint_compartment_id' to be a str")
        pulumi.set(__self__, "endpoint_compartment_id", endpoint_compartment_id)
        if endpoint_id and not isinstance(endpoint_id, str):
            raise TypeError("Expected argument 'endpoint_id' to be a str")
        pulumi.set(__self__, "endpoint_id", endpoint_id)
        if endpoint_name and not isinstance(endpoint_name, str):
            raise TypeError("Expected argument 'endpoint_name' to be a str")
        pulumi.set(__self__, "endpoint_name", endpoint_name)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_force_operation and not isinstance(is_force_operation, bool):
            raise TypeError("Expected argument 'is_force_operation' to be a bool")
        pulumi.set(__self__, "is_force_operation", is_force_operation)
        if is_private_network_enabled and not isinstance(is_private_network_enabled, bool):
            raise TypeError("Expected argument 'is_private_network_enabled' to be a bool")
        pulumi.set(__self__, "is_private_network_enabled", is_private_network_enabled)
        if quiesce_timeout and not isinstance(quiesce_timeout, int):
            raise TypeError("Expected argument 'quiesce_timeout' to be a int")
        pulumi.set(__self__, "quiesce_timeout", quiesce_timeout)
        if registry_compartment_id and not isinstance(registry_compartment_id, str):
            raise TypeError("Expected argument 'registry_compartment_id' to be a str")
        pulumi.set(__self__, "registry_compartment_id", registry_compartment_id)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if registry_name and not isinstance(registry_name, str):
            raise TypeError("Expected argument 'registry_name' to be a str")
        pulumi.set(__self__, "registry_name", registry_name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_message and not isinstance(state_message, str):
            raise TypeError("Expected argument 'state_message' to be a str")
        pulumi.set(__self__, "state_message", state_message)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if vcn_id and not isinstance(vcn_id, str):
            raise TypeError("Expected argument 'vcn_id' to be a str")
        pulumi.set(__self__, "vcn_id", vcn_id)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsServerIp")
    def dns_server_ip(self) -> Optional[str]:
        return pulumi.get(self, "dns_server_ip")

    @property
    @pulumi.getter(name="dnsServerZone")
    def dns_server_zone(self) -> Optional[str]:
        return pulumi.get(self, "dns_server_zone")

    @property
    @pulumi.getter(name="endpointCompartmentId")
    def endpoint_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_compartment_id")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isForceOperation")
    def is_force_operation(self) -> Optional[bool]:
        return pulumi.get(self, "is_force_operation")

    @property
    @pulumi.getter(name="isPrivateNetworkEnabled")
    def is_private_network_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_private_network_enabled")

    @property
    @pulumi.getter(name="quiesceTimeout")
    def quiesce_timeout(self) -> Optional[int]:
        return pulumi.get(self, "quiesce_timeout")

    @property
    @pulumi.getter(name="registryCompartmentId")
    def registry_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "registry_compartment_id")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[str]:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> Optional[str]:
        return pulumi.get(self, "registry_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[str]:
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetWorkspaceResult(GetWorkspaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkspaceResult(
            compartment_id=self.compartment_id,
            defined_tags=self.defined_tags,
            description=self.description,
            display_name=self.display_name,
            dns_server_ip=self.dns_server_ip,
            dns_server_zone=self.dns_server_zone,
            endpoint_compartment_id=self.endpoint_compartment_id,
            endpoint_id=self.endpoint_id,
            endpoint_name=self.endpoint_name,
            freeform_tags=self.freeform_tags,
            id=self.id,
            is_force_operation=self.is_force_operation,
            is_private_network_enabled=self.is_private_network_enabled,
            quiesce_timeout=self.quiesce_timeout,
            registry_compartment_id=self.registry_compartment_id,
            registry_id=self.registry_id,
            registry_name=self.registry_name,
            state=self.state,
            state_message=self.state_message,
            subnet_id=self.subnet_id,
            time_created=self.time_created,
            time_updated=self.time_updated,
            vcn_id=self.vcn_id,
            workspace_id=self.workspace_id)


def get_workspace(workspace_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkspaceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataIntegration/getWorkspace:getWorkspace', __args__, opts=opts, typ=GetWorkspaceResult).value

    return AwaitableGetWorkspaceResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        dns_server_ip=pulumi.get(__ret__, 'dns_server_ip'),
        dns_server_zone=pulumi.get(__ret__, 'dns_server_zone'),
        endpoint_compartment_id=pulumi.get(__ret__, 'endpoint_compartment_id'),
        endpoint_id=pulumi.get(__ret__, 'endpoint_id'),
        endpoint_name=pulumi.get(__ret__, 'endpoint_name'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        id=pulumi.get(__ret__, 'id'),
        is_force_operation=pulumi.get(__ret__, 'is_force_operation'),
        is_private_network_enabled=pulumi.get(__ret__, 'is_private_network_enabled'),
        quiesce_timeout=pulumi.get(__ret__, 'quiesce_timeout'),
        registry_compartment_id=pulumi.get(__ret__, 'registry_compartment_id'),
        registry_id=pulumi.get(__ret__, 'registry_id'),
        registry_name=pulumi.get(__ret__, 'registry_name'),
        state=pulumi.get(__ret__, 'state'),
        state_message=pulumi.get(__ret__, 'state_message'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'),
        vcn_id=pulumi.get(__ret__, 'vcn_id'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))


@_utilities.lift_output_func(get_workspace)
def get_workspace_output(workspace_id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkspaceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
