# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetWorkspaceApplicationTaskSchedulesResult',
    'AwaitableGetWorkspaceApplicationTaskSchedulesResult',
    'get_workspace_application_task_schedules',
    'get_workspace_application_task_schedules_output',
]

@pulumi.output_type
class GetWorkspaceApplicationTaskSchedulesResult:
    """
    A collection of values returned by getWorkspaceApplicationTaskSchedules.
    """
    def __init__(__self__, application_key=None, filters=None, id=None, identifiers=None, is_enabled=None, keys=None, name=None, task_schedule_summary_collections=None, types=None, workspace_id=None):
        if application_key and not isinstance(application_key, str):
            raise TypeError("Expected argument 'application_key' to be a str")
        pulumi.set(__self__, "application_key", application_key)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifiers and not isinstance(identifiers, list):
            raise TypeError("Expected argument 'identifiers' to be a list")
        pulumi.set(__self__, "identifiers", identifiers)
        if is_enabled and not isinstance(is_enabled, bool):
            raise TypeError("Expected argument 'is_enabled' to be a bool")
        pulumi.set(__self__, "is_enabled", is_enabled)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if task_schedule_summary_collections and not isinstance(task_schedule_summary_collections, list):
            raise TypeError("Expected argument 'task_schedule_summary_collections' to be a list")
        pulumi.set(__self__, "task_schedule_summary_collections", task_schedule_summary_collections)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> str:
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationTaskSchedulesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifiers(self) -> Optional[Sequence[str]]:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifiers")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        Whether the schedule is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="taskScheduleSummaryCollections")
    def task_schedule_summary_collections(self) -> Sequence['outputs.GetWorkspaceApplicationTaskSchedulesTaskScheduleSummaryCollectionResult']:
        """
        The list of task_schedule_summary_collection.
        """
        return pulumi.get(self, "task_schedule_summary_collections")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence[str]]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "types")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetWorkspaceApplicationTaskSchedulesResult(GetWorkspaceApplicationTaskSchedulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkspaceApplicationTaskSchedulesResult(
            application_key=self.application_key,
            filters=self.filters,
            id=self.id,
            identifiers=self.identifiers,
            is_enabled=self.is_enabled,
            keys=self.keys,
            name=self.name,
            task_schedule_summary_collections=self.task_schedule_summary_collections,
            types=self.types,
            workspace_id=self.workspace_id)


def get_workspace_application_task_schedules(application_key: Optional[str] = None,
                                             filters: Optional[Sequence[pulumi.InputType['GetWorkspaceApplicationTaskSchedulesFilterArgs']]] = None,
                                             identifiers: Optional[Sequence[str]] = None,
                                             is_enabled: Optional[bool] = None,
                                             keys: Optional[Sequence[str]] = None,
                                             name: Optional[str] = None,
                                             types: Optional[Sequence[str]] = None,
                                             workspace_id: Optional[str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkspaceApplicationTaskSchedulesResult:
    """
    This data source provides the list of Workspace Application Task Schedules in Oracle Cloud Infrastructure Data Integration service.

    This endpoint can be used to get the list of all the TaskSchedule objects.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_oci as oci

    test_workspace_application_task_schedules = oci.DataIntegration.get_workspace_application_task_schedules(application_key=var["workspace_application_task_schedule_application_key"],
        workspace_id=oci_dataintegration_workspace["test_workspace"]["id"],
        identifiers=var["workspace_application_task_schedule_identifier"],
        is_enabled=var["workspace_application_task_schedule_is_enabled"],
        keys=var["workspace_application_task_schedule_key"],
        name=var["workspace_application_task_schedule_name"],
        types=var["workspace_application_task_schedule_type"])
    ```
    <!--End PulumiCodeChooser -->


    :param str application_key: The application key.
    :param Sequence[str] identifiers: Used to filter by the identifier of the object.
    :param bool is_enabled: This filter parameter can be used to filter task schedule by its state.
    :param Sequence[str] keys: Used to filter by the key of the object.
    :param str name: Used to filter by the name of the object.
    :param Sequence[str] types: Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. <br><br><B>Examples:</B><br> <ul> <li><B>?type=DATA_LOADER_TASK&typeInSubtree=false</B> returns all objects of type data loader task</li> <li><B>?type=DATA_LOADER_TASK</B> returns all objects of type data loader task</li> <li><B>?type=DATA_LOADER_TASK&typeInSubtree=true</B> returns all objects of type data loader task</li> </ul>
    :param str workspace_id: The workspace ID.
    """
    __args__ = dict()
    __args__['applicationKey'] = application_key
    __args__['filters'] = filters
    __args__['identifiers'] = identifiers
    __args__['isEnabled'] = is_enabled
    __args__['keys'] = keys
    __args__['name'] = name
    __args__['types'] = types
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataIntegration/getWorkspaceApplicationTaskSchedules:getWorkspaceApplicationTaskSchedules', __args__, opts=opts, typ=GetWorkspaceApplicationTaskSchedulesResult).value

    return AwaitableGetWorkspaceApplicationTaskSchedulesResult(
        application_key=pulumi.get(__ret__, 'application_key'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        identifiers=pulumi.get(__ret__, 'identifiers'),
        is_enabled=pulumi.get(__ret__, 'is_enabled'),
        keys=pulumi.get(__ret__, 'keys'),
        name=pulumi.get(__ret__, 'name'),
        task_schedule_summary_collections=pulumi.get(__ret__, 'task_schedule_summary_collections'),
        types=pulumi.get(__ret__, 'types'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))


@_utilities.lift_output_func(get_workspace_application_task_schedules)
def get_workspace_application_task_schedules_output(application_key: Optional[pulumi.Input[str]] = None,
                                                    filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetWorkspaceApplicationTaskSchedulesFilterArgs']]]]] = None,
                                                    identifiers: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                    is_enabled: Optional[pulumi.Input[Optional[bool]]] = None,
                                                    keys: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                    name: Optional[pulumi.Input[Optional[str]]] = None,
                                                    types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                    workspace_id: Optional[pulumi.Input[str]] = None,
                                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkspaceApplicationTaskSchedulesResult]:
    """
    This data source provides the list of Workspace Application Task Schedules in Oracle Cloud Infrastructure Data Integration service.

    This endpoint can be used to get the list of all the TaskSchedule objects.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_oci as oci

    test_workspace_application_task_schedules = oci.DataIntegration.get_workspace_application_task_schedules(application_key=var["workspace_application_task_schedule_application_key"],
        workspace_id=oci_dataintegration_workspace["test_workspace"]["id"],
        identifiers=var["workspace_application_task_schedule_identifier"],
        is_enabled=var["workspace_application_task_schedule_is_enabled"],
        keys=var["workspace_application_task_schedule_key"],
        name=var["workspace_application_task_schedule_name"],
        types=var["workspace_application_task_schedule_type"])
    ```
    <!--End PulumiCodeChooser -->


    :param str application_key: The application key.
    :param Sequence[str] identifiers: Used to filter by the identifier of the object.
    :param bool is_enabled: This filter parameter can be used to filter task schedule by its state.
    :param Sequence[str] keys: Used to filter by the key of the object.
    :param str name: Used to filter by the name of the object.
    :param Sequence[str] types: Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. <br><br><B>Examples:</B><br> <ul> <li><B>?type=DATA_LOADER_TASK&typeInSubtree=false</B> returns all objects of type data loader task</li> <li><B>?type=DATA_LOADER_TASK</B> returns all objects of type data loader task</li> <li><B>?type=DATA_LOADER_TASK&typeInSubtree=true</B> returns all objects of type data loader task</li> </ul>
    :param str workspace_id: The workspace ID.
    """
    ...
