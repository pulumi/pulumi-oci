# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetWorkspaceProjectsResult',
    'AwaitableGetWorkspaceProjectsResult',
    'get_workspace_projects',
    'get_workspace_projects_output',
]

@pulumi.output_type
class GetWorkspaceProjectsResult:
    """
    A collection of values returned by getWorkspaceProjects.
    """
    def __init__(__self__, fields=None, filters=None, id=None, identifiers=None, name=None, name_contains=None, project_summary_collections=None, workspace_id=None):
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifiers and not isinstance(identifiers, list):
            raise TypeError("Expected argument 'identifiers' to be a list")
        pulumi.set(__self__, "identifiers", identifiers)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_contains and not isinstance(name_contains, str):
            raise TypeError("Expected argument 'name_contains' to be a str")
        pulumi.set(__self__, "name_contains", name_contains)
        if project_summary_collections and not isinstance(project_summary_collections, list):
            raise TypeError("Expected argument 'project_summary_collections' to be a list")
        pulumi.set(__self__, "project_summary_collections", project_summary_collections)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetWorkspaceProjectsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifiers(self) -> Optional[Sequence[str]]:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifiers")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameContains")
    def name_contains(self) -> Optional[str]:
        return pulumi.get(self, "name_contains")

    @property
    @pulumi.getter(name="projectSummaryCollections")
    def project_summary_collections(self) -> Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionResult']:
        """
        The list of project_summary_collection.
        """
        return pulumi.get(self, "project_summary_collections")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetWorkspaceProjectsResult(GetWorkspaceProjectsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkspaceProjectsResult(
            fields=self.fields,
            filters=self.filters,
            id=self.id,
            identifiers=self.identifiers,
            name=self.name,
            name_contains=self.name_contains,
            project_summary_collections=self.project_summary_collections,
            workspace_id=self.workspace_id)


def get_workspace_projects(fields: Optional[Sequence[str]] = None,
                           filters: Optional[Sequence[pulumi.InputType['GetWorkspaceProjectsFilterArgs']]] = None,
                           identifiers: Optional[Sequence[str]] = None,
                           name: Optional[str] = None,
                           name_contains: Optional[str] = None,
                           workspace_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkspaceProjectsResult:
    """
    This data source provides the list of Workspace Projects in Oracle Cloud Infrastructure Data Integration service.

    Retrieves a lists of projects in a workspace and provides options to filter the list.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_workspace_projects = oci.DataIntegration.get_workspace_projects(workspace_id=oci_dataintegration_workspace["test_workspace"]["id"],
        fields=var["workspace_project_fields"],
        identifiers=var["workspace_project_identifier"],
        name=var["workspace_project_name"],
        name_contains=var["workspace_project_name_contains"])
    ```


    :param Sequence[str] fields: Specifies the fields to get for an object.
    :param Sequence[str] identifiers: Used to filter by the identifier of the object.
    :param str name: Used to filter by the name of the object.
    :param str name_contains: This parameter can be used to filter objects by the names that match partially or fully with the given value.
    :param str workspace_id: The workspace ID.
    """
    __args__ = dict()
    __args__['fields'] = fields
    __args__['filters'] = filters
    __args__['identifiers'] = identifiers
    __args__['name'] = name
    __args__['nameContains'] = name_contains
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataIntegration/getWorkspaceProjects:getWorkspaceProjects', __args__, opts=opts, typ=GetWorkspaceProjectsResult).value

    return AwaitableGetWorkspaceProjectsResult(
        fields=pulumi.get(__ret__, 'fields'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        identifiers=pulumi.get(__ret__, 'identifiers'),
        name=pulumi.get(__ret__, 'name'),
        name_contains=pulumi.get(__ret__, 'name_contains'),
        project_summary_collections=pulumi.get(__ret__, 'project_summary_collections'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))


@_utilities.lift_output_func(get_workspace_projects)
def get_workspace_projects_output(fields: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                  filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetWorkspaceProjectsFilterArgs']]]]] = None,
                                  identifiers: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                  name: Optional[pulumi.Input[Optional[str]]] = None,
                                  name_contains: Optional[pulumi.Input[Optional[str]]] = None,
                                  workspace_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkspaceProjectsResult]:
    """
    This data source provides the list of Workspace Projects in Oracle Cloud Infrastructure Data Integration service.

    Retrieves a lists of projects in a workspace and provides options to filter the list.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_workspace_projects = oci.DataIntegration.get_workspace_projects(workspace_id=oci_dataintegration_workspace["test_workspace"]["id"],
        fields=var["workspace_project_fields"],
        identifiers=var["workspace_project_identifier"],
        name=var["workspace_project_name"],
        name_contains=var["workspace_project_name_contains"])
    ```


    :param Sequence[str] fields: Specifies the fields to get for an object.
    :param Sequence[str] identifiers: Used to filter by the identifier of the object.
    :param str name: Used to filter by the name of the object.
    :param str name_contains: This parameter can be used to filter objects by the names that match partially or fully with the given value.
    :param str workspace_id: The workspace ID.
    """
    ...
