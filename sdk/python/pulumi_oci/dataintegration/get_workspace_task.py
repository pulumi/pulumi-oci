# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetWorkspaceTaskResult',
    'AwaitableGetWorkspaceTaskResult',
    'get_workspace_task',
    'get_workspace_task_output',
]

@pulumi.output_type
class GetWorkspaceTaskResult:
    """
    A collection of values returned by getWorkspaceTask.
    """
    def __init__(__self__, api_call_mode=None, auth_configs=None, cancel_rest_call_configs=None, config_provider_delegates=None, description=None, execute_rest_call_configs=None, expand_references=None, id=None, identifier=None, input_ports=None, is_single_load=None, key=None, key_map=None, metadatas=None, model_type=None, model_version=None, name=None, object_status=None, object_version=None, op_config_values=None, operation=None, output_ports=None, parallel_load_limit=None, parameters=None, parent_reves=None, poll_rest_call_configs=None, registry_metadatas=None, typed_expressions=None, workspace_id=None):
        if api_call_mode and not isinstance(api_call_mode, str):
            raise TypeError("Expected argument 'api_call_mode' to be a str")
        pulumi.set(__self__, "api_call_mode", api_call_mode)
        if auth_configs and not isinstance(auth_configs, list):
            raise TypeError("Expected argument 'auth_configs' to be a list")
        pulumi.set(__self__, "auth_configs", auth_configs)
        if cancel_rest_call_configs and not isinstance(cancel_rest_call_configs, list):
            raise TypeError("Expected argument 'cancel_rest_call_configs' to be a list")
        pulumi.set(__self__, "cancel_rest_call_configs", cancel_rest_call_configs)
        if config_provider_delegates and not isinstance(config_provider_delegates, list):
            raise TypeError("Expected argument 'config_provider_delegates' to be a list")
        pulumi.set(__self__, "config_provider_delegates", config_provider_delegates)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if execute_rest_call_configs and not isinstance(execute_rest_call_configs, list):
            raise TypeError("Expected argument 'execute_rest_call_configs' to be a list")
        pulumi.set(__self__, "execute_rest_call_configs", execute_rest_call_configs)
        if expand_references and not isinstance(expand_references, str):
            raise TypeError("Expected argument 'expand_references' to be a str")
        pulumi.set(__self__, "expand_references", expand_references)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if input_ports and not isinstance(input_ports, list):
            raise TypeError("Expected argument 'input_ports' to be a list")
        pulumi.set(__self__, "input_ports", input_ports)
        if is_single_load and not isinstance(is_single_load, bool):
            raise TypeError("Expected argument 'is_single_load' to be a bool")
        pulumi.set(__self__, "is_single_load", is_single_load)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if key_map and not isinstance(key_map, dict):
            raise TypeError("Expected argument 'key_map' to be a dict")
        pulumi.set(__self__, "key_map", key_map)
        if metadatas and not isinstance(metadatas, list):
            raise TypeError("Expected argument 'metadatas' to be a list")
        pulumi.set(__self__, "metadatas", metadatas)
        if model_type and not isinstance(model_type, str):
            raise TypeError("Expected argument 'model_type' to be a str")
        pulumi.set(__self__, "model_type", model_type)
        if model_version and not isinstance(model_version, str):
            raise TypeError("Expected argument 'model_version' to be a str")
        pulumi.set(__self__, "model_version", model_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_status and not isinstance(object_status, int):
            raise TypeError("Expected argument 'object_status' to be a int")
        pulumi.set(__self__, "object_status", object_status)
        if object_version and not isinstance(object_version, int):
            raise TypeError("Expected argument 'object_version' to be a int")
        pulumi.set(__self__, "object_version", object_version)
        if op_config_values and not isinstance(op_config_values, list):
            raise TypeError("Expected argument 'op_config_values' to be a list")
        pulumi.set(__self__, "op_config_values", op_config_values)
        if operation and not isinstance(operation, str):
            raise TypeError("Expected argument 'operation' to be a str")
        pulumi.set(__self__, "operation", operation)
        if output_ports and not isinstance(output_ports, list):
            raise TypeError("Expected argument 'output_ports' to be a list")
        pulumi.set(__self__, "output_ports", output_ports)
        if parallel_load_limit and not isinstance(parallel_load_limit, int):
            raise TypeError("Expected argument 'parallel_load_limit' to be a int")
        pulumi.set(__self__, "parallel_load_limit", parallel_load_limit)
        if parameters and not isinstance(parameters, list):
            raise TypeError("Expected argument 'parameters' to be a list")
        pulumi.set(__self__, "parameters", parameters)
        if parent_reves and not isinstance(parent_reves, list):
            raise TypeError("Expected argument 'parent_reves' to be a list")
        pulumi.set(__self__, "parent_reves", parent_reves)
        if poll_rest_call_configs and not isinstance(poll_rest_call_configs, list):
            raise TypeError("Expected argument 'poll_rest_call_configs' to be a list")
        pulumi.set(__self__, "poll_rest_call_configs", poll_rest_call_configs)
        if registry_metadatas and not isinstance(registry_metadatas, list):
            raise TypeError("Expected argument 'registry_metadatas' to be a list")
        pulumi.set(__self__, "registry_metadatas", registry_metadatas)
        if typed_expressions and not isinstance(typed_expressions, list):
            raise TypeError("Expected argument 'typed_expressions' to be a list")
        pulumi.set(__self__, "typed_expressions", typed_expressions)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="apiCallMode")
    def api_call_mode(self) -> str:
        """
        The REST invocation pattern to use. ASYNC_OCI_WORKREQUEST is being deprecated as well as cancelEndpoint/MethodType.
        """
        return pulumi.get(self, "api_call_mode")

    @property
    @pulumi.getter(name="authConfigs")
    def auth_configs(self) -> Sequence['outputs.GetWorkspaceTaskAuthConfigResult']:
        """
        Authentication configuration for Generic REST invocation.
        """
        return pulumi.get(self, "auth_configs")

    @property
    @pulumi.getter(name="cancelRestCallConfigs")
    def cancel_rest_call_configs(self) -> Sequence['outputs.GetWorkspaceTaskCancelRestCallConfigResult']:
        """
        The REST API configuration for cancelling the task.
        """
        return pulumi.get(self, "cancel_rest_call_configs")

    @property
    @pulumi.getter(name="configProviderDelegates")
    def config_provider_delegates(self) -> Sequence['outputs.GetWorkspaceTaskConfigProviderDelegateResult']:
        """
        The information about the configuration provider.
        """
        return pulumi.get(self, "config_provider_delegates")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executeRestCallConfigs")
    def execute_rest_call_configs(self) -> Sequence['outputs.GetWorkspaceTaskExecuteRestCallConfigResult']:
        """
        The REST API configuration for execution.
        """
        return pulumi.get(self, "execute_rest_call_configs")

    @property
    @pulumi.getter(name="expandReferences")
    def expand_references(self) -> str:
        return pulumi.get(self, "expand_references")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="inputPorts")
    def input_ports(self) -> Sequence['outputs.GetWorkspaceTaskInputPortResult']:
        """
        An array of input ports.
        """
        return pulumi.get(self, "input_ports")

    @property
    @pulumi.getter(name="isSingleLoad")
    def is_single_load(self) -> bool:
        """
        Defines whether Data Loader task is used for single load or multiple
        """
        return pulumi.get(self, "is_single_load")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyMap")
    def key_map(self) -> Mapping[str, Any]:
        """
        A key map. If provided, key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        """
        return pulumi.get(self, "key_map")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetWorkspaceTaskMetadataResult']:
        """
        A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the types object.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        This is used by the service for optimistic locking of the object, to prevent multiple users from simultaneously updating the object.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="opConfigValues")
    def op_config_values(self) -> Sequence['outputs.GetWorkspaceTaskOpConfigValueResult']:
        """
        Configuration values can be string, objects, or parameters.
        """
        return pulumi.get(self, "op_config_values")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        Describes the shape of the execution result
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="outputPorts")
    def output_ports(self) -> Sequence['outputs.GetWorkspaceTaskOutputPortResult']:
        """
        An array of output ports.
        """
        return pulumi.get(self, "output_ports")

    @property
    @pulumi.getter(name="parallelLoadLimit")
    def parallel_load_limit(self) -> int:
        """
        Defines the number of entities being loaded in parallel at a time for a Data Loader task
        """
        return pulumi.get(self, "parallel_load_limit")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetWorkspaceTaskParameterResult']:
        """
        A list of parameters for the pipeline, this allows certain aspects of the pipeline to be configured when the pipeline is executed.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetWorkspaceTaskParentRefResult']:
        """
        A reference to the object's parent.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="pollRestCallConfigs")
    def poll_rest_call_configs(self) -> Sequence['outputs.GetWorkspaceTaskPollRestCallConfigResult']:
        """
        The REST API configuration for polling.
        """
        return pulumi.get(self, "poll_rest_call_configs")

    @property
    @pulumi.getter(name="registryMetadatas")
    def registry_metadatas(self) -> Sequence['outputs.GetWorkspaceTaskRegistryMetadataResult']:
        """
        Information about the object and its parent.
        """
        return pulumi.get(self, "registry_metadatas")

    @property
    @pulumi.getter(name="typedExpressions")
    def typed_expressions(self) -> Sequence['outputs.GetWorkspaceTaskTypedExpressionResult']:
        """
        List of typed expressions.
        """
        return pulumi.get(self, "typed_expressions")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetWorkspaceTaskResult(GetWorkspaceTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkspaceTaskResult(
            api_call_mode=self.api_call_mode,
            auth_configs=self.auth_configs,
            cancel_rest_call_configs=self.cancel_rest_call_configs,
            config_provider_delegates=self.config_provider_delegates,
            description=self.description,
            execute_rest_call_configs=self.execute_rest_call_configs,
            expand_references=self.expand_references,
            id=self.id,
            identifier=self.identifier,
            input_ports=self.input_ports,
            is_single_load=self.is_single_load,
            key=self.key,
            key_map=self.key_map,
            metadatas=self.metadatas,
            model_type=self.model_type,
            model_version=self.model_version,
            name=self.name,
            object_status=self.object_status,
            object_version=self.object_version,
            op_config_values=self.op_config_values,
            operation=self.operation,
            output_ports=self.output_ports,
            parallel_load_limit=self.parallel_load_limit,
            parameters=self.parameters,
            parent_reves=self.parent_reves,
            poll_rest_call_configs=self.poll_rest_call_configs,
            registry_metadatas=self.registry_metadatas,
            typed_expressions=self.typed_expressions,
            workspace_id=self.workspace_id)


def get_workspace_task(expand_references: Optional[str] = None,
                       key: Optional[str] = None,
                       workspace_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkspaceTaskResult:
    """
    This data source provides details about a specific Workspace Task resource in Oracle Cloud Infrastructure Data Integration service.

    Retrieves a task using the specified identifier.


    :param str expand_references: Used to expand references of the object. If value is true, then all referenced objects are expanded. If value is false, then shallow objects are returned in place of references. Default is false. <br><br><B>Example:</B><br> <ul> <li><B>?expandReferences=true</B> returns all objects of type data loader task</li> </ul>
    :param str key: The key of the object.
    :param str workspace_id: The workspace ID.
    """
    __args__ = dict()
    __args__['expandReferences'] = expand_references
    __args__['key'] = key
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataIntegration/getWorkspaceTask:getWorkspaceTask', __args__, opts=opts, typ=GetWorkspaceTaskResult).value

    return AwaitableGetWorkspaceTaskResult(
        api_call_mode=pulumi.get(__ret__, 'api_call_mode'),
        auth_configs=pulumi.get(__ret__, 'auth_configs'),
        cancel_rest_call_configs=pulumi.get(__ret__, 'cancel_rest_call_configs'),
        config_provider_delegates=pulumi.get(__ret__, 'config_provider_delegates'),
        description=pulumi.get(__ret__, 'description'),
        execute_rest_call_configs=pulumi.get(__ret__, 'execute_rest_call_configs'),
        expand_references=pulumi.get(__ret__, 'expand_references'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        input_ports=pulumi.get(__ret__, 'input_ports'),
        is_single_load=pulumi.get(__ret__, 'is_single_load'),
        key=pulumi.get(__ret__, 'key'),
        key_map=pulumi.get(__ret__, 'key_map'),
        metadatas=pulumi.get(__ret__, 'metadatas'),
        model_type=pulumi.get(__ret__, 'model_type'),
        model_version=pulumi.get(__ret__, 'model_version'),
        name=pulumi.get(__ret__, 'name'),
        object_status=pulumi.get(__ret__, 'object_status'),
        object_version=pulumi.get(__ret__, 'object_version'),
        op_config_values=pulumi.get(__ret__, 'op_config_values'),
        operation=pulumi.get(__ret__, 'operation'),
        output_ports=pulumi.get(__ret__, 'output_ports'),
        parallel_load_limit=pulumi.get(__ret__, 'parallel_load_limit'),
        parameters=pulumi.get(__ret__, 'parameters'),
        parent_reves=pulumi.get(__ret__, 'parent_reves'),
        poll_rest_call_configs=pulumi.get(__ret__, 'poll_rest_call_configs'),
        registry_metadatas=pulumi.get(__ret__, 'registry_metadatas'),
        typed_expressions=pulumi.get(__ret__, 'typed_expressions'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))


@_utilities.lift_output_func(get_workspace_task)
def get_workspace_task_output(expand_references: Optional[pulumi.Input[str]] = None,
                              key: Optional[pulumi.Input[str]] = None,
                              workspace_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkspaceTaskResult]:
    """
    This data source provides details about a specific Workspace Task resource in Oracle Cloud Infrastructure Data Integration service.

    Retrieves a task using the specified identifier.


    :param str expand_references: Used to expand references of the object. If value is true, then all referenced objects are expanded. If value is false, then shallow objects are returned in place of references. Default is false. <br><br><B>Example:</B><br> <ul> <li><B>?expandReferences=true</B> returns all objects of type data loader task</li> </ul>
    :param str key: The key of the object.
    :param str workspace_id: The workspace ID.
    """
    ...
