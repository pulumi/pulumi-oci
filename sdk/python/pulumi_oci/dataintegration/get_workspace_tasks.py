# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetWorkspaceTasksResult',
    'AwaitableGetWorkspaceTasksResult',
    'get_workspace_tasks',
    'get_workspace_tasks_output',
]

@pulumi.output_type
class GetWorkspaceTasksResult:
    """
    A collection of values returned by getWorkspaceTasks.
    """
    def __init__(__self__, fields=None, filters=None, folder_id=None, id=None, identifiers=None, keys=None, name=None, task_summary_collections=None, types=None, workspace_id=None):
        if fields and not isinstance(fields, list):
            raise TypeError("Expected argument 'fields' to be a list")
        pulumi.set(__self__, "fields", fields)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifiers and not isinstance(identifiers, list):
            raise TypeError("Expected argument 'identifiers' to be a list")
        pulumi.set(__self__, "identifiers", identifiers)
        if keys and not isinstance(keys, list):
            raise TypeError("Expected argument 'keys' to be a list")
        pulumi.set(__self__, "keys", keys)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if task_summary_collections and not isinstance(task_summary_collections, list):
            raise TypeError("Expected argument 'task_summary_collections' to be a list")
        pulumi.set(__self__, "task_summary_collections", task_summary_collections)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence[str]]:
        """
        An array of fields.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetWorkspaceTasksFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifiers(self) -> Optional[Sequence[str]]:
        """
        Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifiers")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        """
        The key of the object.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="taskSummaryCollections")
    def task_summary_collections(self) -> Sequence['outputs.GetWorkspaceTasksTaskSummaryCollectionResult']:
        """
        The list of task_summary_collection.
        """
        return pulumi.get(self, "task_summary_collections")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence[str]]:
        """
        The object type.
        """
        return pulumi.get(self, "types")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")


class AwaitableGetWorkspaceTasksResult(GetWorkspaceTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkspaceTasksResult(
            fields=self.fields,
            filters=self.filters,
            folder_id=self.folder_id,
            id=self.id,
            identifiers=self.identifiers,
            keys=self.keys,
            name=self.name,
            task_summary_collections=self.task_summary_collections,
            types=self.types,
            workspace_id=self.workspace_id)


def get_workspace_tasks(fields: Optional[Sequence[str]] = None,
                        filters: Optional[Sequence[pulumi.InputType['GetWorkspaceTasksFilterArgs']]] = None,
                        folder_id: Optional[str] = None,
                        identifiers: Optional[Sequence[str]] = None,
                        keys: Optional[Sequence[str]] = None,
                        name: Optional[str] = None,
                        types: Optional[Sequence[str]] = None,
                        workspace_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkspaceTasksResult:
    """
    This data source provides the list of Workspace Tasks in Oracle Cloud Infrastructure Data Integration service.

    Retrieves a list of all tasks in a specified project or folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_workspace_tasks = oci.DataIntegration.get_workspace_tasks(workspace_id=test_workspace["id"],
        fields=workspace_task_fields,
        folder_id=test_folder["id"],
        identifiers=workspace_task_identifier,
        keys=workspace_task_key,
        name=workspace_task_name,
        types=workspace_task_type)
    ```


    :param Sequence[str] fields: Specifies the fields to get for an object.
    :param str folder_id: Unique key of the folder.
    :param Sequence[str] identifiers: Used to filter by the identifier of the object.
    :param Sequence[str] keys: Used to filter by the key of the object.
    :param str name: Used to filter by the name of the object.
    :param Sequence[str] types: Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. <br><br><B>Examples:</B><br> <ul> <li><B>?type=DATA_LOADER_TASK&typeInSubtree=false</B> returns all objects of type data loader task</li> <li><B>?type=DATA_LOADER_TASK</B> returns all objects of type data loader task</li> <li><B>?type=DATA_LOADER_TASK&typeInSubtree=true</B> returns all objects of type data loader task</li> </ul>
    :param str workspace_id: The workspace ID.
    """
    __args__ = dict()
    __args__['fields'] = fields
    __args__['filters'] = filters
    __args__['folderId'] = folder_id
    __args__['identifiers'] = identifiers
    __args__['keys'] = keys
    __args__['name'] = name
    __args__['types'] = types
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataIntegration/getWorkspaceTasks:getWorkspaceTasks', __args__, opts=opts, typ=GetWorkspaceTasksResult).value

    return AwaitableGetWorkspaceTasksResult(
        fields=pulumi.get(__ret__, 'fields'),
        filters=pulumi.get(__ret__, 'filters'),
        folder_id=pulumi.get(__ret__, 'folder_id'),
        id=pulumi.get(__ret__, 'id'),
        identifiers=pulumi.get(__ret__, 'identifiers'),
        keys=pulumi.get(__ret__, 'keys'),
        name=pulumi.get(__ret__, 'name'),
        task_summary_collections=pulumi.get(__ret__, 'task_summary_collections'),
        types=pulumi.get(__ret__, 'types'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))


@_utilities.lift_output_func(get_workspace_tasks)
def get_workspace_tasks_output(fields: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetWorkspaceTasksFilterArgs']]]]] = None,
                               folder_id: Optional[pulumi.Input[Optional[str]]] = None,
                               identifiers: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               keys: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               workspace_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkspaceTasksResult]:
    """
    This data source provides the list of Workspace Tasks in Oracle Cloud Infrastructure Data Integration service.

    Retrieves a list of all tasks in a specified project or folder.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_workspace_tasks = oci.DataIntegration.get_workspace_tasks(workspace_id=test_workspace["id"],
        fields=workspace_task_fields,
        folder_id=test_folder["id"],
        identifiers=workspace_task_identifier,
        keys=workspace_task_key,
        name=workspace_task_name,
        types=workspace_task_type)
    ```


    :param Sequence[str] fields: Specifies the fields to get for an object.
    :param str folder_id: Unique key of the folder.
    :param Sequence[str] identifiers: Used to filter by the identifier of the object.
    :param Sequence[str] keys: Used to filter by the key of the object.
    :param str name: Used to filter by the name of the object.
    :param Sequence[str] types: Used to filter by the object type of the object. It can be suffixed with an optional filter operator InSubtree. If this operator is not specified, then exact match is considered. <br><br><B>Examples:</B><br> <ul> <li><B>?type=DATA_LOADER_TASK&typeInSubtree=false</B> returns all objects of type data loader task</li> <li><B>?type=DATA_LOADER_TASK</B> returns all objects of type data loader task</li> <li><B>?type=DATA_LOADER_TASK&typeInSubtree=true</B> returns all objects of type data loader task</li> </ul>
    :param str workspace_id: The workspace ID.
    """
    ...
