# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'WorkspaceApplicationDependentObjectMetadata',
    'WorkspaceApplicationMetadata',
    'WorkspaceApplicationMetadataAggregator',
    'WorkspaceApplicationMetadataCountStatistic',
    'WorkspaceApplicationMetadataCountStatisticObjectTypeCountList',
    'WorkspaceApplicationParentRef',
    'WorkspaceApplicationPublishedObjectMetadata',
    'WorkspaceApplicationRegistryMetadata',
    'WorkspaceApplicationSourceApplicationInfo',
    'WorkspaceExportRequestExportedItem',
    'WorkspaceFolderMetadata',
    'WorkspaceFolderMetadataAggregator',
    'WorkspaceFolderMetadataCountStatistic',
    'WorkspaceFolderMetadataCountStatisticObjectTypeCountList',
    'WorkspaceFolderParentRef',
    'WorkspaceFolderRegistryMetadata',
    'WorkspaceImportRequestImportConflictResolution',
    'WorkspaceImportRequestImportedObject',
    'WorkspaceProjectMetadata',
    'WorkspaceProjectMetadataAggregator',
    'WorkspaceProjectMetadataCountStatistic',
    'WorkspaceProjectMetadataCountStatisticObjectTypeCountList',
    'WorkspaceProjectParentRef',
    'WorkspaceProjectRegistryMetadata',
    'GetWorkspaceApplicationDependentObjectMetadataResult',
    'GetWorkspaceApplicationMetadataResult',
    'GetWorkspaceApplicationMetadataAggregatorResult',
    'GetWorkspaceApplicationMetadataCountStatisticResult',
    'GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceApplicationParentRefResult',
    'GetWorkspaceApplicationPublishedObjectMetadataResult',
    'GetWorkspaceApplicationRegistryMetadataResult',
    'GetWorkspaceApplicationSourceApplicationInfoResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult',
    'GetWorkspaceApplicationsFilterResult',
    'GetWorkspaceExportRequestExportedItemResult',
    'GetWorkspaceExportRequestsExportRequestSummaryCollectionResult',
    'GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult',
    'GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult',
    'GetWorkspaceExportRequestsFilterResult',
    'GetWorkspaceFolderMetadataResult',
    'GetWorkspaceFolderMetadataAggregatorResult',
    'GetWorkspaceFolderMetadataCountStatisticResult',
    'GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceFolderParentRefResult',
    'GetWorkspaceFolderRegistryMetadataResult',
    'GetWorkspaceFoldersFilterResult',
    'GetWorkspaceFoldersFolderSummaryCollectionResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult',
    'GetWorkspaceImportRequestImportConflictResolutionResult',
    'GetWorkspaceImportRequestImportedObjectResult',
    'GetWorkspaceImportRequestsFilterResult',
    'GetWorkspaceImportRequestsImportRequestSummaryCollectionResult',
    'GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult',
    'GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult',
    'GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult',
    'GetWorkspaceProjectMetadataResult',
    'GetWorkspaceProjectMetadataAggregatorResult',
    'GetWorkspaceProjectMetadataCountStatisticResult',
    'GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceProjectParentRefResult',
    'GetWorkspaceProjectRegistryMetadataResult',
    'GetWorkspaceProjectsFilterResult',
    'GetWorkspaceProjectsProjectSummaryCollectionResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult',
    'GetWorkspacesFilterResult',
    'GetWorkspacesWorkspaceResult',
]

@pulumi.output_type
class WorkspaceApplicationDependentObjectMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "namePath":
            suggest = "name_path"
        elif key == "objectVersion":
            suggest = "object_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationDependentObjectMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationDependentObjectMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationDependentObjectMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_version: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str action: The patch action indicating if object was created, updated, or deleted.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str name_path: The fully qualified path of the published object, which would include its project and folder.
        :param int object_version: The object version.
        :param str type: The type of the object in patch.
        """
        WorkspaceApplicationDependentObjectMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            identifier=identifier,
            key=key,
            name=name,
            name_path=name_path,
            object_version=object_version,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             identifier: Optional[str] = None,
             key: Optional[str] = None,
             name: Optional[str] = None,
             name_path: Optional[str] = None,
             object_version: Optional[int] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']

        if action is not None:
            _setter("action", action)
        if identifier is not None:
            _setter("identifier", identifier)
        if key is not None:
            _setter("key", key)
        if name is not None:
            _setter("name", name)
        if name_path is not None:
            _setter("name_path", name_path)
        if object_version is not None:
            _setter("object_version", object_version)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceApplicationMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "countStatistics":
            suggest = "count_statistics"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.WorkspaceApplicationMetadataAggregator']] = None,
                 count_statistics: Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatistic']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param Sequence['WorkspaceApplicationMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param Sequence['WorkspaceApplicationMetadataCountStatisticArgs'] count_statistics: A count statistics.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify this object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        :param str time_created: The date and time the application was created, in the timestamp format defined by RFC3339.
        :param str time_updated: The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        WorkspaceApplicationMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            aggregators=aggregators,
            count_statistics=count_statistics,
            created_by=created_by,
            created_by_name=created_by_name,
            identifier_path=identifier_path,
            info_fields=info_fields,
            is_favorite=is_favorite,
            labels=labels,
            registry_version=registry_version,
            time_created=time_created,
            time_updated=time_updated,
            updated_by=updated_by,
            updated_by_name=updated_by_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: Optional[str] = None,
             aggregators: Optional[Sequence['outputs.WorkspaceApplicationMetadataAggregator']] = None,
             count_statistics: Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatistic']] = None,
             created_by: Optional[str] = None,
             created_by_name: Optional[str] = None,
             identifier_path: Optional[str] = None,
             info_fields: Optional[Mapping[str, Any]] = None,
             is_favorite: Optional[bool] = None,
             labels: Optional[Sequence[str]] = None,
             registry_version: Optional[int] = None,
             time_created: Optional[str] = None,
             time_updated: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'countStatistics' in kwargs:
            count_statistics = kwargs['countStatistics']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdByName' in kwargs:
            created_by_name = kwargs['createdByName']
        if 'identifierPath' in kwargs:
            identifier_path = kwargs['identifierPath']
        if 'infoFields' in kwargs:
            info_fields = kwargs['infoFields']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if 'updatedByName' in kwargs:
            updated_by_name = kwargs['updatedByName']

        if aggregator_key is not None:
            _setter("aggregator_key", aggregator_key)
        if aggregators is not None:
            _setter("aggregators", aggregators)
        if count_statistics is not None:
            _setter("count_statistics", count_statistics)
        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_name is not None:
            _setter("created_by_name", created_by_name)
        if identifier_path is not None:
            _setter("identifier_path", identifier_path)
        if info_fields is not None:
            _setter("info_fields", info_fields)
        if is_favorite is not None:
            _setter("is_favorite", is_favorite)
        if labels is not None:
            _setter("labels", labels)
        if registry_version is not None:
            _setter("registry_version", registry_version)
        if time_created is not None:
            _setter("time_created", time_created)
        if time_updated is not None:
            _setter("time_updated", time_updated)
        if updated_by is not None:
            _setter("updated_by", updated_by)
        if updated_by_name is not None:
            _setter("updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.WorkspaceApplicationMetadataAggregator']]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatistic']]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        The date and time the application was created, in the timestamp format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class WorkspaceApplicationMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) Detailed description for the object.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: The type of the object in patch.
        """
        WorkspaceApplicationMetadataAggregator._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             identifier: Optional[str] = None,
             key: Optional[str] = None,
             name: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if description is not None:
            _setter("description", description)
        if identifier is not None:
            _setter("identifier", identifier)
        if key is not None:
            _setter("key", key)
        if name is not None:
            _setter("name", name)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) Detailed description for the object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceApplicationMetadataCountStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypeCountLists":
            suggest = "object_type_count_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationMetadataCountStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationMetadataCountStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationMetadataCountStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatisticObjectTypeCountList']] = None):
        """
        :param Sequence['WorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs'] object_type_count_lists: The array of statistics.
        """
        WorkspaceApplicationMetadataCountStatistic._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_type_count_lists=object_type_count_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_type_count_lists: Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatisticObjectTypeCountList']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectTypeCountLists' in kwargs:
            object_type_count_lists = kwargs['objectTypeCountLists']

        if object_type_count_lists is not None:
            _setter("object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatisticObjectTypeCountList']]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class WorkspaceApplicationMetadataCountStatisticObjectTypeCountList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectCount":
            suggest = "object_count"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationMetadataCountStatisticObjectTypeCountList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        """
        :param str object_count: The value for the count statistic object.
        :param str object_type: The type of object for the count statistic object.
        """
        WorkspaceApplicationMetadataCountStatisticObjectTypeCountList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            object_type=object_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: Optional[str] = None,
             object_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectCount' in kwargs:
            object_count = kwargs['objectCount']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']

        if object_count is not None:
            _setter("object_count", object_count)
        if object_type is not None:
            _setter("object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class WorkspaceApplicationParentRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootDocId":
            suggest = "root_doc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        """
        :param str parent: Key of the parent object.
        :param str root_doc_id: Key of the root document object.
        """
        WorkspaceApplicationParentRef._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parent=parent,
            root_doc_id=root_doc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parent: Optional[str] = None,
             root_doc_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rootDocId' in kwargs:
            root_doc_id = kwargs['rootDocId']

        if parent is not None:
            _setter("parent", parent)
        if root_doc_id is not None:
            _setter("root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class WorkspaceApplicationPublishedObjectMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "namePath":
            suggest = "name_path"
        elif key == "objectVersion":
            suggest = "object_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationPublishedObjectMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationPublishedObjectMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationPublishedObjectMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_version: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str action: The patch action indicating if object was created, updated, or deleted.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param str key: The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str name_path: The fully qualified path of the published object, which would include its project and folder.
        :param int object_version: The object version.
        :param str type: The type of the object in patch.
        """
        WorkspaceApplicationPublishedObjectMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            identifier=identifier,
            key=key,
            name=name,
            name_path=name_path,
            object_version=object_version,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             identifier: Optional[str] = None,
             key: Optional[str] = None,
             name: Optional[str] = None,
             name_path: Optional[str] = None,
             object_version: Optional[int] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']

        if action is not None:
            _setter("action", action)
        if identifier is not None:
            _setter("identifier", identifier)
        if key is not None:
            _setter("key", key)
        if name is not None:
            _setter("name", name)
        if name_path is not None:
            _setter("name_path", name_path)
        if object_version is not None:
            _setter("object_version", object_version)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceApplicationRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        """
        :param str aggregator_key: The owning object's key for this object.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param str key: The identifying key for the object.
        :param Sequence[str] labels: Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version.
        """
        WorkspaceApplicationRegistryMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            is_favorite=is_favorite,
            key=key,
            labels=labels,
            registry_version=registry_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: Optional[str] = None,
             is_favorite: Optional[bool] = None,
             key: Optional[str] = None,
             labels: Optional[Sequence[str]] = None,
             registry_version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']

        if aggregator_key is not None:
            _setter("aggregator_key", aggregator_key)
        if is_favorite is not None:
            _setter("is_favorite", is_favorite)
        if key is not None:
            _setter("key", key)
        if labels is not None:
            _setter("labels", labels)
        if registry_version is not None:
            _setter("registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        The registry version.
        """
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class WorkspaceApplicationSourceApplicationInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationKey":
            suggest = "application_key"
        elif key == "applicationVersion":
            suggest = "application_version"
        elif key == "copyType":
            suggest = "copy_type"
        elif key == "lastPatchKey":
            suggest = "last_patch_key"
        elif key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationSourceApplicationInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationSourceApplicationInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationSourceApplicationInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_key: Optional[str] = None,
                 application_version: Optional[str] = None,
                 copy_type: Optional[str] = None,
                 last_patch_key: Optional[str] = None,
                 workspace_id: Optional[str] = None):
        """
        :param str application_key: The source application key to use when creating the application.
        :param str application_version: The source application version of the application.
        :param str copy_type: Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
        :param str last_patch_key: The last patch key for the application.
        :param str workspace_id: The workspace ID.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        WorkspaceApplicationSourceApplicationInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_key=application_key,
            application_version=application_version,
            copy_type=copy_type,
            last_patch_key=last_patch_key,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_key: Optional[str] = None,
             application_version: Optional[str] = None,
             copy_type: Optional[str] = None,
             last_patch_key: Optional[str] = None,
             workspace_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicationKey' in kwargs:
            application_key = kwargs['applicationKey']
        if 'applicationVersion' in kwargs:
            application_version = kwargs['applicationVersion']
        if 'copyType' in kwargs:
            copy_type = kwargs['copyType']
        if 'lastPatchKey' in kwargs:
            last_patch_key = kwargs['lastPatchKey']
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']

        if application_key is not None:
            _setter("application_key", application_key)
        if application_version is not None:
            _setter("application_version", application_version)
        if copy_type is not None:
            _setter("copy_type", copy_type)
        if last_patch_key is not None:
            _setter("last_patch_key", last_patch_key)
        if workspace_id is not None:
            _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> Optional[str]:
        """
        The source application key to use when creating the application.
        """
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> Optional[str]:
        """
        The source application version of the application.
        """
        return pulumi.get(self, "application_version")

    @property
    @pulumi.getter(name="copyType")
    def copy_type(self) -> Optional[str]:
        """
        Parameter to specify the link between SOURCE and TARGET application after copying. CONNECTED    - Indicate that TARGET application is conneced to SOURCE and can be synced after copy. DISCONNECTED - Indicate that TARGET application is not conneced to SOURCE and can evolve independently.
        """
        return pulumi.get(self, "copy_type")

    @property
    @pulumi.getter(name="lastPatchKey")
    def last_patch_key(self) -> Optional[str]:
        """
        The last patch key for the application.
        """
        return pulumi.get(self, "last_patch_key")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[str]:
        """
        The workspace ID.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class WorkspaceExportRequestExportedItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "namePath":
            suggest = "name_path"
        elif key == "objectType":
            suggest = "object_type"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "timeUpdatedInMillis":
            suggest = "time_updated_in_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceExportRequestExportedItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceExportRequestExportedItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceExportRequestExportedItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_type: Optional[str] = None,
                 object_version: Optional[str] = None,
                 time_updated_in_millis: Optional[str] = None):
        """
        :param str aggregator_key: Aggregator key
        :param str identifier: Object identifier
        :param str key: Export object request key
        :param str name: Name of the export request.
        :param str name_path: Object name path
        :param str object_type: Object type
        :param str object_version: Object version
        :param str time_updated_in_millis: time at which this object was last updated.
        """
        WorkspaceExportRequestExportedItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            identifier=identifier,
            key=key,
            name=name,
            name_path=name_path,
            object_type=object_type,
            object_version=object_version,
            time_updated_in_millis=time_updated_in_millis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: Optional[str] = None,
             identifier: Optional[str] = None,
             key: Optional[str] = None,
             name: Optional[str] = None,
             name_path: Optional[str] = None,
             object_type: Optional[str] = None,
             object_version: Optional[str] = None,
             time_updated_in_millis: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']
        if 'timeUpdatedInMillis' in kwargs:
            time_updated_in_millis = kwargs['timeUpdatedInMillis']

        if aggregator_key is not None:
            _setter("aggregator_key", aggregator_key)
        if identifier is not None:
            _setter("identifier", identifier)
        if key is not None:
            _setter("key", key)
        if name is not None:
            _setter("name", name)
        if name_path is not None:
            _setter("name_path", name_path)
        if object_type is not None:
            _setter("object_type", object_type)
        if object_version is not None:
            _setter("object_version", object_version)
        if time_updated_in_millis is not None:
            _setter("time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Export object request key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the export request.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[str]:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[str]:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class WorkspaceFolderMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "countStatistics":
            suggest = "count_statistics"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.WorkspaceFolderMetadataAggregator']] = None,
                 count_statistics: Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatistic']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param Sequence['WorkspaceFolderMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param Sequence['WorkspaceFolderMetadataCountStatisticArgs'] count_statistics: A count statistics.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify this object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        WorkspaceFolderMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            aggregators=aggregators,
            count_statistics=count_statistics,
            created_by=created_by,
            created_by_name=created_by_name,
            identifier_path=identifier_path,
            info_fields=info_fields,
            is_favorite=is_favorite,
            labels=labels,
            registry_version=registry_version,
            time_created=time_created,
            time_updated=time_updated,
            updated_by=updated_by,
            updated_by_name=updated_by_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: Optional[str] = None,
             aggregators: Optional[Sequence['outputs.WorkspaceFolderMetadataAggregator']] = None,
             count_statistics: Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatistic']] = None,
             created_by: Optional[str] = None,
             created_by_name: Optional[str] = None,
             identifier_path: Optional[str] = None,
             info_fields: Optional[Mapping[str, Any]] = None,
             is_favorite: Optional[bool] = None,
             labels: Optional[Sequence[str]] = None,
             registry_version: Optional[int] = None,
             time_created: Optional[str] = None,
             time_updated: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'countStatistics' in kwargs:
            count_statistics = kwargs['countStatistics']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdByName' in kwargs:
            created_by_name = kwargs['createdByName']
        if 'identifierPath' in kwargs:
            identifier_path = kwargs['identifierPath']
        if 'infoFields' in kwargs:
            info_fields = kwargs['infoFields']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if 'updatedByName' in kwargs:
            updated_by_name = kwargs['updatedByName']

        if aggregator_key is not None:
            _setter("aggregator_key", aggregator_key)
        if aggregators is not None:
            _setter("aggregators", aggregators)
        if count_statistics is not None:
            _setter("count_statistics", count_statistics)
        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_name is not None:
            _setter("created_by_name", created_by_name)
        if identifier_path is not None:
            _setter("identifier_path", identifier_path)
        if info_fields is not None:
            _setter("info_fields", info_fields)
        if is_favorite is not None:
            _setter("is_favorite", is_favorite)
        if labels is not None:
            _setter("labels", labels)
        if registry_version is not None:
            _setter("registry_version", registry_version)
        if time_created is not None:
            _setter("time_created", time_created)
        if time_updated is not None:
            _setter("time_updated", time_updated)
        if updated_by is not None:
            _setter("updated_by", updated_by)
        if updated_by_name is not None:
            _setter("updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.WorkspaceFolderMetadataAggregator']]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatistic']]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class WorkspaceFolderMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) A user defined description for the folder.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: The type of the aggregator.
        """
        WorkspaceFolderMetadataAggregator._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             identifier: Optional[str] = None,
             key: Optional[str] = None,
             name: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if description is not None:
            _setter("description", description)
        if identifier is not None:
            _setter("identifier", identifier)
        if key is not None:
            _setter("key", key)
        if name is not None:
            _setter("name", name)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A user defined description for the folder.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceFolderMetadataCountStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypeCountLists":
            suggest = "object_type_count_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderMetadataCountStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderMetadataCountStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderMetadataCountStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatisticObjectTypeCountList']] = None):
        """
        :param Sequence['WorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs'] object_type_count_lists: The array of statistics.
        """
        WorkspaceFolderMetadataCountStatistic._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_type_count_lists=object_type_count_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_type_count_lists: Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatisticObjectTypeCountList']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectTypeCountLists' in kwargs:
            object_type_count_lists = kwargs['objectTypeCountLists']

        if object_type_count_lists is not None:
            _setter("object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatisticObjectTypeCountList']]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class WorkspaceFolderMetadataCountStatisticObjectTypeCountList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectCount":
            suggest = "object_count"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderMetadataCountStatisticObjectTypeCountList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        """
        :param str object_count: The value for the count statistic object.
        :param str object_type: The type of object for the count statistic object.
        """
        WorkspaceFolderMetadataCountStatisticObjectTypeCountList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            object_type=object_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: Optional[str] = None,
             object_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectCount' in kwargs:
            object_count = kwargs['objectCount']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']

        if object_count is not None:
            _setter("object_count", object_count)
        if object_type is not None:
            _setter("object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class WorkspaceFolderParentRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootDocId":
            suggest = "root_doc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        """
        :param str parent: Key of the parent object.
        :param str root_doc_id: Key of the root document object.
        """
        WorkspaceFolderParentRef._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parent=parent,
            root_doc_id=root_doc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parent: Optional[str] = None,
             root_doc_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rootDocId' in kwargs:
            root_doc_id = kwargs['rootDocId']

        if parent is not None:
            _setter("parent", parent)
        if root_doc_id is not None:
            _setter("root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class WorkspaceFolderRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        """
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param bool is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param str key: (Updatable) The identifying key for the object.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        """
        WorkspaceFolderRegistryMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            is_favorite=is_favorite,
            key=key,
            labels=labels,
            registry_version=registry_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: Optional[str] = None,
             is_favorite: Optional[bool] = None,
             key: Optional[str] = None,
             labels: Optional[Sequence[str]] = None,
             registry_version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']

        if aggregator_key is not None:
            _setter("aggregator_key", aggregator_key)
        if is_favorite is not None:
            _setter("is_favorite", is_favorite)
        if key is not None:
            _setter("key", key)
        if labels is not None:
            _setter("labels", labels)
        if registry_version is not None:
            _setter("registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class WorkspaceImportRequestImportConflictResolution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "importConflictResolutionType":
            suggest = "import_conflict_resolution_type"
        elif key == "duplicatePrefix":
            suggest = "duplicate_prefix"
        elif key == "duplicateSuffix":
            suggest = "duplicate_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceImportRequestImportConflictResolution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceImportRequestImportConflictResolution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceImportRequestImportConflictResolution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 import_conflict_resolution_type: str,
                 duplicate_prefix: Optional[str] = None,
                 duplicate_suffix: Optional[str] = None):
        """
        :param str import_conflict_resolution_type: Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        :param str duplicate_prefix: In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        :param str duplicate_suffix: In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        """
        WorkspaceImportRequestImportConflictResolution._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            import_conflict_resolution_type=import_conflict_resolution_type,
            duplicate_prefix=duplicate_prefix,
            duplicate_suffix=duplicate_suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             import_conflict_resolution_type: str,
             duplicate_prefix: Optional[str] = None,
             duplicate_suffix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'importConflictResolutionType' in kwargs:
            import_conflict_resolution_type = kwargs['importConflictResolutionType']
        if 'duplicatePrefix' in kwargs:
            duplicate_prefix = kwargs['duplicatePrefix']
        if 'duplicateSuffix' in kwargs:
            duplicate_suffix = kwargs['duplicateSuffix']

        _setter("import_conflict_resolution_type", import_conflict_resolution_type)
        if duplicate_prefix is not None:
            _setter("duplicate_prefix", duplicate_prefix)
        if duplicate_suffix is not None:
            _setter("duplicate_suffix", duplicate_suffix)

    @property
    @pulumi.getter(name="importConflictResolutionType")
    def import_conflict_resolution_type(self) -> str:
        """
        Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        """
        return pulumi.get(self, "import_conflict_resolution_type")

    @property
    @pulumi.getter(name="duplicatePrefix")
    def duplicate_prefix(self) -> Optional[str]:
        """
        In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_prefix")

    @property
    @pulumi.getter(name="duplicateSuffix")
    def duplicate_suffix(self) -> Optional[str]:
        """
        In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_suffix")


@pulumi.output_type
class WorkspaceImportRequestImportedObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "namePath":
            suggest = "name_path"
        elif key == "newKey":
            suggest = "new_key"
        elif key == "objectType":
            suggest = "object_type"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "oldKey":
            suggest = "old_key"
        elif key == "resolutionAction":
            suggest = "resolution_action"
        elif key == "timeUpdatedInMillis":
            suggest = "time_updated_in_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceImportRequestImportedObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceImportRequestImportedObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceImportRequestImportedObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 identifier: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 new_key: Optional[str] = None,
                 object_type: Optional[str] = None,
                 object_version: Optional[str] = None,
                 old_key: Optional[str] = None,
                 resolution_action: Optional[str] = None,
                 time_updated_in_millis: Optional[str] = None):
        """
        :param str aggregator_key: Aggregator key
        :param str identifier: Object identifier
        :param str name: Name of the import request.
        :param str name_path: Object name path
        :param str new_key: New key of the object
        :param str object_type: Object type
        :param str object_version: Object version
        :param str old_key: Old key of the object
        :param str resolution_action: Object resolution action
        :param str time_updated_in_millis: time at which this object was last updated.
        """
        WorkspaceImportRequestImportedObject._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            identifier=identifier,
            name=name,
            name_path=name_path,
            new_key=new_key,
            object_type=object_type,
            object_version=object_version,
            old_key=old_key,
            resolution_action=resolution_action,
            time_updated_in_millis=time_updated_in_millis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: Optional[str] = None,
             identifier: Optional[str] = None,
             name: Optional[str] = None,
             name_path: Optional[str] = None,
             new_key: Optional[str] = None,
             object_type: Optional[str] = None,
             object_version: Optional[str] = None,
             old_key: Optional[str] = None,
             resolution_action: Optional[str] = None,
             time_updated_in_millis: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'newKey' in kwargs:
            new_key = kwargs['newKey']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']
        if 'oldKey' in kwargs:
            old_key = kwargs['oldKey']
        if 'resolutionAction' in kwargs:
            resolution_action = kwargs['resolutionAction']
        if 'timeUpdatedInMillis' in kwargs:
            time_updated_in_millis = kwargs['timeUpdatedInMillis']

        if aggregator_key is not None:
            _setter("aggregator_key", aggregator_key)
        if identifier is not None:
            _setter("identifier", identifier)
        if name is not None:
            _setter("name", name)
        if name_path is not None:
            _setter("name_path", name_path)
        if new_key is not None:
            _setter("new_key", new_key)
        if object_type is not None:
            _setter("object_type", object_type)
        if object_version is not None:
            _setter("object_version", object_version)
        if old_key is not None:
            _setter("old_key", old_key)
        if resolution_action is not None:
            _setter("resolution_action", resolution_action)
        if time_updated_in_millis is not None:
            _setter("time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the import request.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="newKey")
    def new_key(self) -> Optional[str]:
        """
        New key of the object
        """
        return pulumi.get(self, "new_key")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[str]:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="oldKey")
    def old_key(self) -> Optional[str]:
        """
        Old key of the object
        """
        return pulumi.get(self, "old_key")

    @property
    @pulumi.getter(name="resolutionAction")
    def resolution_action(self) -> Optional[str]:
        """
        Object resolution action
        """
        return pulumi.get(self, "resolution_action")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[str]:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class WorkspaceProjectMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "countStatistics":
            suggest = "count_statistics"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.WorkspaceProjectMetadataAggregator']] = None,
                 count_statistics: Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatistic']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        """
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param Sequence['WorkspaceProjectMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param Sequence['WorkspaceProjectMetadataCountStatisticArgs'] count_statistics: A count statistics.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify this object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        WorkspaceProjectMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            aggregators=aggregators,
            count_statistics=count_statistics,
            created_by=created_by,
            created_by_name=created_by_name,
            identifier_path=identifier_path,
            info_fields=info_fields,
            is_favorite=is_favorite,
            labels=labels,
            registry_version=registry_version,
            time_created=time_created,
            time_updated=time_updated,
            updated_by=updated_by,
            updated_by_name=updated_by_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: Optional[str] = None,
             aggregators: Optional[Sequence['outputs.WorkspaceProjectMetadataAggregator']] = None,
             count_statistics: Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatistic']] = None,
             created_by: Optional[str] = None,
             created_by_name: Optional[str] = None,
             identifier_path: Optional[str] = None,
             info_fields: Optional[Mapping[str, Any]] = None,
             is_favorite: Optional[bool] = None,
             labels: Optional[Sequence[str]] = None,
             registry_version: Optional[int] = None,
             time_created: Optional[str] = None,
             time_updated: Optional[str] = None,
             updated_by: Optional[str] = None,
             updated_by_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'countStatistics' in kwargs:
            count_statistics = kwargs['countStatistics']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdByName' in kwargs:
            created_by_name = kwargs['createdByName']
        if 'identifierPath' in kwargs:
            identifier_path = kwargs['identifierPath']
        if 'infoFields' in kwargs:
            info_fields = kwargs['infoFields']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if 'updatedByName' in kwargs:
            updated_by_name = kwargs['updatedByName']

        if aggregator_key is not None:
            _setter("aggregator_key", aggregator_key)
        if aggregators is not None:
            _setter("aggregators", aggregators)
        if count_statistics is not None:
            _setter("count_statistics", count_statistics)
        if created_by is not None:
            _setter("created_by", created_by)
        if created_by_name is not None:
            _setter("created_by_name", created_by_name)
        if identifier_path is not None:
            _setter("identifier_path", identifier_path)
        if info_fields is not None:
            _setter("info_fields", info_fields)
        if is_favorite is not None:
            _setter("is_favorite", is_favorite)
        if labels is not None:
            _setter("labels", labels)
        if registry_version is not None:
            _setter("registry_version", registry_version)
        if time_created is not None:
            _setter("time_created", time_created)
        if time_updated is not None:
            _setter("time_updated", time_updated)
        if updated_by is not None:
            _setter("updated_by", updated_by)
        if updated_by_name is not None:
            _setter("updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.WorkspaceProjectMetadataAggregator']]:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatistic']]:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class WorkspaceProjectMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: (Updatable) A user defined description for the project.
        :param str identifier: (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param str key: (Updatable) The identifying key for the object.
        :param str name: (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: The type of the aggregator.
        """
        WorkspaceProjectMetadataAggregator._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: Optional[str] = None,
             identifier: Optional[str] = None,
             key: Optional[str] = None,
             name: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if description is not None:
            _setter("description", description)
        if identifier is not None:
            _setter("identifier", identifier)
        if key is not None:
            _setter("key", key)
        if name is not None:
            _setter("name", name)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A user defined description for the project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        """
        (Updatable) Value can only contain upper case letters, underscore, and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (Updatable) Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceProjectMetadataCountStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypeCountLists":
            suggest = "object_type_count_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectMetadataCountStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectMetadataCountStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectMetadataCountStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatisticObjectTypeCountList']] = None):
        """
        :param Sequence['WorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs'] object_type_count_lists: The array of statistics.
        """
        WorkspaceProjectMetadataCountStatistic._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_type_count_lists=object_type_count_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_type_count_lists: Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatisticObjectTypeCountList']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectTypeCountLists' in kwargs:
            object_type_count_lists = kwargs['objectTypeCountLists']

        if object_type_count_lists is not None:
            _setter("object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatisticObjectTypeCountList']]:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class WorkspaceProjectMetadataCountStatisticObjectTypeCountList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectCount":
            suggest = "object_count"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectMetadataCountStatisticObjectTypeCountList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        """
        :param str object_count: The value for the count statistic object.
        :param str object_type: The type of object for the count statistic object.
        """
        WorkspaceProjectMetadataCountStatisticObjectTypeCountList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            object_type=object_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: Optional[str] = None,
             object_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectCount' in kwargs:
            object_count = kwargs['objectCount']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']

        if object_count is not None:
            _setter("object_count", object_count)
        if object_type is not None:
            _setter("object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class WorkspaceProjectParentRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootDocId":
            suggest = "root_doc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        """
        :param str parent: Key of the parent object.
        :param str root_doc_id: Key of the root document object.
        """
        WorkspaceProjectParentRef._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parent=parent,
            root_doc_id=root_doc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parent: Optional[str] = None,
             root_doc_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rootDocId' in kwargs:
            root_doc_id = kwargs['rootDocId']

        if parent is not None:
            _setter("parent", parent)
        if root_doc_id is not None:
            _setter("root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class WorkspaceProjectRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        """
        :param str aggregator_key: (Updatable) The owning object's key for this object.
        :param bool is_favorite: (Updatable) Specifies whether this object is a favorite or not.
        :param str key: (Updatable) The identifying key for the object.
        :param Sequence[str] labels: (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        :param int registry_version: (Updatable) The registry version.
        """
        WorkspaceProjectRegistryMetadata._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            is_favorite=is_favorite,
            key=key,
            labels=labels,
            registry_version=registry_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: Optional[str] = None,
             is_favorite: Optional[bool] = None,
             key: Optional[str] = None,
             labels: Optional[Sequence[str]] = None,
             registry_version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']

        if aggregator_key is not None:
            _setter("aggregator_key", aggregator_key)
        if is_favorite is not None:
            _setter("is_favorite", is_favorite)
        if key is not None:
            _setter("key", key)
        if labels is not None:
            _setter("labels", labels)
        if registry_version is not None:
            _setter("registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        """
        (Updatable) The owning object's key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        """
        (Updatable) Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) The identifying key for the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        """
        (Updatable) Labels are keywords or labels that you can add to data assets, dataflows etc. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        """
        (Updatable) The registry version.
        """
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceApplicationDependentObjectMetadataResult(dict):
    def __init__(__self__, *,
                 action: str,
                 identifier: str,
                 key: str,
                 name: str,
                 name_path: str,
                 object_version: int,
                 type: str):
        """
        :param str action: The patch action indicating if object was created, updated, or deleted.
        :param str identifier: Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param str key: The key of the object.
        :param str name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str name_path: The fully qualified path of the published object, which would include its project and folder.
        :param int object_version: The object version.
        :param str type: The type of the object in patch.
        """
        GetWorkspaceApplicationDependentObjectMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            identifier=identifier,
            key=key,
            name=name,
            name_path=name_path,
            object_version=object_version,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             identifier: str,
             key: str,
             name: str,
             name_path: str,
             object_version: int,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']

        _setter("action", action)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("name_path", name_path)
        _setter("object_version", object_version)
        _setter("type", type)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> str:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetWorkspaceApplicationMetadataAggregatorResult'],
                 count_statistics: Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object key for this object.
        :param Sequence['GetWorkspaceApplicationMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param Sequence['GetWorkspaceApplicationMetadataCountStatisticArgs'] count_statistics: A count statistics.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify this object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        :param str time_created: The date and time the application was created, in the timestamp format defined by RFC3339.
        :param str time_updated: The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        GetWorkspaceApplicationMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            aggregators=aggregators,
            count_statistics=count_statistics,
            created_by=created_by,
            created_by_name=created_by_name,
            identifier_path=identifier_path,
            info_fields=info_fields,
            is_favorite=is_favorite,
            labels=labels,
            registry_version=registry_version,
            time_created=time_created,
            time_updated=time_updated,
            updated_by=updated_by,
            updated_by_name=updated_by_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             aggregators: Sequence['outputs.GetWorkspaceApplicationMetadataAggregatorResult'],
             count_statistics: Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticResult'],
             created_by: str,
             created_by_name: str,
             identifier_path: str,
             info_fields: Mapping[str, Any],
             is_favorite: bool,
             labels: Sequence[str],
             registry_version: int,
             time_created: str,
             time_updated: str,
             updated_by: str,
             updated_by_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'countStatistics' in kwargs:
            count_statistics = kwargs['countStatistics']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdByName' in kwargs:
            created_by_name = kwargs['createdByName']
        if 'identifierPath' in kwargs:
            identifier_path = kwargs['identifierPath']
        if 'infoFields' in kwargs:
            info_fields = kwargs['infoFields']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if 'updatedByName' in kwargs:
            updated_by_name = kwargs['updatedByName']

        _setter("aggregator_key", aggregator_key)
        _setter("aggregators", aggregators)
        _setter("count_statistics", count_statistics)
        _setter("created_by", created_by)
        _setter("created_by_name", created_by_name)
        _setter("identifier_path", identifier_path)
        _setter("info_fields", info_fields)
        _setter("is_favorite", is_favorite)
        _setter("labels", labels)
        _setter("registry_version", registry_version)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("updated_by", updated_by)
        _setter("updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetWorkspaceApplicationMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticResult']:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the application was created, in the timestamp format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceApplicationMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param str key: The key of the object.
        :param str name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: The type of the object in patch.
        """
        GetWorkspaceApplicationMetadataAggregatorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             identifier: str,
             key: str,
             name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("description", description)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult']):
        """
        :param Sequence['GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListArgs'] object_type_count_lists: The array of statistics.
        """
        GetWorkspaceApplicationMetadataCountStatisticResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_type_count_lists=object_type_count_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_type_count_lists: Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectTypeCountLists' in kwargs:
            object_type_count_lists = kwargs['objectTypeCountLists']

        _setter("object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult']:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: str,
                 object_type: str):
        """
        :param str object_count: The value for the count statistic object.
        :param str object_type: The type of object for the count statistic object.
        """
        GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            object_type=object_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: str,
             object_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectCount' in kwargs:
            object_count = kwargs['objectCount']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']

        _setter("object_count", object_count)
        _setter("object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> str:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceApplicationParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str,
                 root_doc_id: str):
        """
        :param str parent: Key of the parent object.
        :param str root_doc_id: Key of the root document object.
        """
        GetWorkspaceApplicationParentRefResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parent=parent,
            root_doc_id=root_doc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parent: str,
             root_doc_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rootDocId' in kwargs:
            root_doc_id = kwargs['rootDocId']

        _setter("parent", parent)
        _setter("root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> str:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceApplicationPublishedObjectMetadataResult(dict):
    def __init__(__self__, *,
                 action: str,
                 identifier: str,
                 key: str,
                 name: str,
                 name_path: str,
                 object_version: int,
                 type: str):
        """
        :param str action: The patch action indicating if object was created, updated, or deleted.
        :param str identifier: Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        :param str key: The key of the object.
        :param str name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str name_path: The fully qualified path of the published object, which would include its project and folder.
        :param int object_version: The object version.
        :param str type: The type of the object in patch.
        """
        GetWorkspaceApplicationPublishedObjectMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            identifier=identifier,
            key=key,
            name=name,
            name_path=name_path,
            object_version=object_version,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             identifier: str,
             key: str,
             name: str,
             name_path: str,
             object_version: int,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']

        _setter("action", action)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("name_path", name_path)
        _setter("object_version", object_version)
        _setter("type", type)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> str:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int):
        """
        :param str aggregator_key: The owning object key for this object.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param str key: The key of the object.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        """
        GetWorkspaceApplicationRegistryMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            is_favorite=is_favorite,
            key=key,
            labels=labels,
            registry_version=registry_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             is_favorite: bool,
             key: str,
             labels: Sequence[str],
             registry_version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']

        _setter("aggregator_key", aggregator_key)
        _setter("is_favorite", is_favorite)
        _setter("key", key)
        _setter("labels", labels)
        _setter("registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceApplicationSourceApplicationInfoResult(dict):
    def __init__(__self__, *,
                 application_key: str,
                 application_version: str,
                 copy_type: str,
                 last_patch_key: str,
                 workspace_id: str):
        """
        :param str application_key: The application key.
        :param str application_version: The source application version of the application.
        :param str last_patch_key: The last patch key for the application.
        :param str workspace_id: The workspace ID.
        """
        GetWorkspaceApplicationSourceApplicationInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_key=application_key,
            application_version=application_version,
            copy_type=copy_type,
            last_patch_key=last_patch_key,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_key: str,
             application_version: str,
             copy_type: str,
             last_patch_key: str,
             workspace_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicationKey' in kwargs:
            application_key = kwargs['applicationKey']
        if 'applicationVersion' in kwargs:
            application_version = kwargs['applicationVersion']
        if 'copyType' in kwargs:
            copy_type = kwargs['copyType']
        if 'lastPatchKey' in kwargs:
            last_patch_key = kwargs['lastPatchKey']
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']

        _setter("application_key", application_key)
        _setter("application_version", application_version)
        _setter("copy_type", copy_type)
        _setter("last_patch_key", last_patch_key)
        _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> str:
        """
        The application key.
        """
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> str:
        """
        The source application version of the application.
        """
        return pulumi.get(self, "application_version")

    @property
    @pulumi.getter(name="copyType")
    def copy_type(self) -> str:
        return pulumi.get(self, "copy_type")

    @property
    @pulumi.getter(name="lastPatchKey")
    def last_patch_key(self) -> str:
        """
        The last patch key for the application.
        """
        return pulumi.get(self, "last_patch_key")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemResult']):
        GetWorkspaceApplicationsApplicationSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_version: int,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 dependent_object_metadatas: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult'],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 identifier: str,
                 key: str,
                 key_map: Mapping[str, Any],
                 metadatas: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult'],
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_reves: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult'],
                 published_object_metadatas: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult'],
                 registry_metadatas: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult'],
                 source_application_infos: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult'],
                 state: str,
                 time_created: str,
                 time_patched: str,
                 time_updated: str,
                 workspace_id: str):
        """
        :param int application_version: The source application version of the application.
        :param str compartment_id: OCID of the compartment that this resource belongs to. Defaults to compartment of the Workspace.
        :param Mapping[str, Any] defined_tags: Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        :param Sequence['GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataArgs'] dependent_object_metadatas: A list of dependent objects in this patch.
        :param str description: The description of the aggregator.
        :param str display_name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param str id: OCID of the resource that is used to uniquely identify the application
        :param str identifier: Used to filter by the identifier of the published object.
        :param str key: The key of the object.
        :param Mapping[str, Any] key_map: A key map. If provided, key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        :param Sequence['GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataArgs'] metadatas: A summary type containing information about the object including its key, name and when/who created/updated it.
        :param str model_type: The object type.
        :param str model_version: The object's model version.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The object version.
        :param Sequence['GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefArgs'] parent_reves: A reference to the object's parent.
        :param Sequence['GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataArgs'] published_object_metadatas: A list of objects that are published or unpublished in this patch.
        :param Sequence['GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoArgs'] source_application_infos: The information about the application.
        :param str state: The current state of the workspace.
        :param str time_created: The date and time the application was created, in the timestamp format defined by RFC3339.
        :param str time_patched: The date and time the application was patched, in the timestamp format defined by RFC3339.
        :param str time_updated: The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        :param str workspace_id: The workspace ID.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_version=application_version,
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            dependent_object_metadatas=dependent_object_metadatas,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            identifier=identifier,
            key=key,
            key_map=key_map,
            metadatas=metadatas,
            model_type=model_type,
            model_version=model_version,
            name=name,
            object_status=object_status,
            object_version=object_version,
            parent_reves=parent_reves,
            published_object_metadatas=published_object_metadatas,
            registry_metadatas=registry_metadatas,
            source_application_infos=source_application_infos,
            state=state,
            time_created=time_created,
            time_patched=time_patched,
            time_updated=time_updated,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_version: int,
             compartment_id: str,
             defined_tags: Mapping[str, Any],
             dependent_object_metadatas: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult'],
             description: str,
             display_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             identifier: str,
             key: str,
             key_map: Mapping[str, Any],
             metadatas: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult'],
             model_type: str,
             model_version: str,
             name: str,
             object_status: int,
             object_version: int,
             parent_reves: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult'],
             published_object_metadatas: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult'],
             registry_metadatas: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult'],
             source_application_infos: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult'],
             state: str,
             time_created: str,
             time_patched: str,
             time_updated: str,
             workspace_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicationVersion' in kwargs:
            application_version = kwargs['applicationVersion']
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'dependentObjectMetadatas' in kwargs:
            dependent_object_metadatas = kwargs['dependentObjectMetadatas']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'keyMap' in kwargs:
            key_map = kwargs['keyMap']
        if 'modelType' in kwargs:
            model_type = kwargs['modelType']
        if 'modelVersion' in kwargs:
            model_version = kwargs['modelVersion']
        if 'objectStatus' in kwargs:
            object_status = kwargs['objectStatus']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']
        if 'parentReves' in kwargs:
            parent_reves = kwargs['parentReves']
        if 'publishedObjectMetadatas' in kwargs:
            published_object_metadatas = kwargs['publishedObjectMetadatas']
        if 'registryMetadatas' in kwargs:
            registry_metadatas = kwargs['registryMetadatas']
        if 'sourceApplicationInfos' in kwargs:
            source_application_infos = kwargs['sourceApplicationInfos']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timePatched' in kwargs:
            time_patched = kwargs['timePatched']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']

        _setter("application_version", application_version)
        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("dependent_object_metadatas", dependent_object_metadatas)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("key_map", key_map)
        _setter("metadatas", metadatas)
        _setter("model_type", model_type)
        _setter("model_version", model_version)
        _setter("name", name)
        _setter("object_status", object_status)
        _setter("object_version", object_version)
        _setter("parent_reves", parent_reves)
        _setter("published_object_metadatas", published_object_metadatas)
        _setter("registry_metadatas", registry_metadatas)
        _setter("source_application_infos", source_application_infos)
        _setter("state", state)
        _setter("time_created", time_created)
        _setter("time_patched", time_patched)
        _setter("time_updated", time_updated)
        _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> int:
        """
        The source application version of the application.
        """
        return pulumi.get(self, "application_version")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        OCID of the compartment that this resource belongs to. Defaults to compartment of the Workspace.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="dependentObjectMetadatas")
    def dependent_object_metadatas(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult']:
        """
        A list of dependent objects in this patch.
        """
        return pulumi.get(self, "dependent_object_metadatas")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        OCID of the resource that is used to uniquely identify the application
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Used to filter by the identifier of the published object.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyMap")
    def key_map(self) -> Mapping[str, Any]:
        """
        A key map. If provided, key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        """
        return pulumi.get(self, "key_map")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult']:
        """
        A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The object type.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The object's model version.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult']:
        """
        A reference to the object's parent.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="publishedObjectMetadatas")
    def published_object_metadatas(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult']:
        """
        A list of objects that are published or unpublished in this patch.
        """
        return pulumi.get(self, "published_object_metadatas")

    @property
    @pulumi.getter(name="registryMetadatas")
    def registry_metadatas(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult']:
        return pulumi.get(self, "registry_metadatas")

    @property
    @pulumi.getter(name="sourceApplicationInfos")
    def source_application_infos(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult']:
        """
        The information about the application.
        """
        return pulumi.get(self, "source_application_infos")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the workspace.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the application was created, in the timestamp format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timePatched")
    def time_patched(self) -> str:
        """
        The date and time the application was patched, in the timestamp format defined by RFC3339.
        """
        return pulumi.get(self, "time_patched")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult(dict):
    def __init__(__self__, *,
                 action: str,
                 identifier: str,
                 key: str,
                 name: str,
                 name_path: str,
                 object_version: int,
                 type: str):
        """
        :param str action: The patch action indicating if object was created, updated, or deleted.
        :param str identifier: Used to filter by the identifier of the published object.
        :param str key: The key of the object.
        :param str name: Used to filter by the name of the object.
        :param str name_path: The fully qualified path of the published object, which would include its project and folder.
        :param int object_version: The object version.
        :param str type: The type of the object in patch.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            identifier=identifier,
            key=key,
            name=name,
            name_path=name_path,
            object_version=object_version,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             identifier: str,
             key: str,
             name: str,
             name_path: str,
             object_version: int,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']

        _setter("action", action)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("name_path", name_path)
        _setter("object_version", object_version)
        _setter("type", type)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Used to filter by the identifier of the published object.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> str:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult'],
                 count_statistics: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object key for this object.
        :param Sequence['GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param Sequence['GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticArgs'] count_statistics: A count statistics.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify this object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        :param str time_created: The date and time the application was created, in the timestamp format defined by RFC3339.
        :param str time_updated: The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            aggregators=aggregators,
            count_statistics=count_statistics,
            created_by=created_by,
            created_by_name=created_by_name,
            identifier_path=identifier_path,
            info_fields=info_fields,
            is_favorite=is_favorite,
            labels=labels,
            registry_version=registry_version,
            time_created=time_created,
            time_updated=time_updated,
            updated_by=updated_by,
            updated_by_name=updated_by_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             aggregators: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult'],
             count_statistics: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult'],
             created_by: str,
             created_by_name: str,
             identifier_path: str,
             info_fields: Mapping[str, Any],
             is_favorite: bool,
             labels: Sequence[str],
             registry_version: int,
             time_created: str,
             time_updated: str,
             updated_by: str,
             updated_by_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'countStatistics' in kwargs:
            count_statistics = kwargs['countStatistics']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdByName' in kwargs:
            created_by_name = kwargs['createdByName']
        if 'identifierPath' in kwargs:
            identifier_path = kwargs['identifierPath']
        if 'infoFields' in kwargs:
            info_fields = kwargs['infoFields']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if 'updatedByName' in kwargs:
            updated_by_name = kwargs['updatedByName']

        _setter("aggregator_key", aggregator_key)
        _setter("aggregators", aggregators)
        _setter("count_statistics", count_statistics)
        _setter("created_by", created_by)
        _setter("created_by_name", created_by_name)
        _setter("identifier_path", identifier_path)
        _setter("info_fields", info_fields)
        _setter("is_favorite", is_favorite)
        _setter("labels", labels)
        _setter("registry_version", registry_version)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("updated_by", updated_by)
        _setter("updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult']:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the application was created, in the timestamp format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the application was updated, in the timestamp format defined by RFC3339. example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: Used to filter by the identifier of the published object.
        :param str key: The key of the object.
        :param str name: Used to filter by the name of the object.
        :param str type: The type of the object in patch.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             identifier: str,
             key: str,
             name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("description", description)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Used to filter by the identifier of the published object.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']):
        """
        :param Sequence['GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListArgs'] object_type_count_lists: The array of statistics.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_type_count_lists=object_type_count_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_type_count_lists: Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectTypeCountLists' in kwargs:
            object_type_count_lists = kwargs['objectTypeCountLists']

        _setter("object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: str,
                 object_type: str):
        """
        :param str object_count: The value for the count statistic object.
        :param str object_type: The type of object for the count statistic object.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            object_type=object_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: str,
             object_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectCount' in kwargs:
            object_count = kwargs['objectCount']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']

        _setter("object_count", object_count)
        _setter("object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> str:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str,
                 root_doc_id: str):
        """
        :param str parent: Key of the parent object.
        :param str root_doc_id: Key of the root document object.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parent=parent,
            root_doc_id=root_doc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parent: str,
             root_doc_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rootDocId' in kwargs:
            root_doc_id = kwargs['rootDocId']

        _setter("parent", parent)
        _setter("root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> str:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult(dict):
    def __init__(__self__, *,
                 action: str,
                 identifier: str,
                 key: str,
                 name: str,
                 name_path: str,
                 object_version: int,
                 type: str):
        """
        :param str action: The patch action indicating if object was created, updated, or deleted.
        :param str identifier: Used to filter by the identifier of the published object.
        :param str key: The key of the object.
        :param str name: Used to filter by the name of the object.
        :param str name_path: The fully qualified path of the published object, which would include its project and folder.
        :param int object_version: The object version.
        :param str type: The type of the object in patch.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            identifier=identifier,
            key=key,
            name=name,
            name_path=name_path,
            object_version=object_version,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: str,
             identifier: str,
             key: str,
             name: str,
             name_path: str,
             object_version: int,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']

        _setter("action", action)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("name_path", name_path)
        _setter("object_version", object_version)
        _setter("type", type)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        The patch action indicating if object was created, updated, or deleted.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Used to filter by the identifier of the published object.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> str:
        """
        The fully qualified path of the published object, which would include its project and folder.
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The object version.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the object in patch.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int):
        """
        :param str aggregator_key: The owning object key for this object.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param str key: The key of the object.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            is_favorite=is_favorite,
            key=key,
            labels=labels,
            registry_version=registry_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             is_favorite: bool,
             key: str,
             labels: Sequence[str],
             registry_version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']

        _setter("aggregator_key", aggregator_key)
        _setter("is_favorite", is_favorite)
        _setter("key", key)
        _setter("labels", labels)
        _setter("registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult(dict):
    def __init__(__self__, *,
                 application_key: str,
                 application_version: str,
                 copy_type: str,
                 last_patch_key: str,
                 workspace_id: str):
        """
        :param str application_key: The source application key to use when creating the application.
        :param str application_version: The source application version of the application.
        :param str last_patch_key: The last patch key for the application.
        :param str workspace_id: The workspace ID.
        """
        GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_key=application_key,
            application_version=application_version,
            copy_type=copy_type,
            last_patch_key=last_patch_key,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_key: str,
             application_version: str,
             copy_type: str,
             last_patch_key: str,
             workspace_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'applicationKey' in kwargs:
            application_key = kwargs['applicationKey']
        if 'applicationVersion' in kwargs:
            application_version = kwargs['applicationVersion']
        if 'copyType' in kwargs:
            copy_type = kwargs['copyType']
        if 'lastPatchKey' in kwargs:
            last_patch_key = kwargs['lastPatchKey']
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']

        _setter("application_key", application_key)
        _setter("application_version", application_version)
        _setter("copy_type", copy_type)
        _setter("last_patch_key", last_patch_key)
        _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> str:
        """
        The source application key to use when creating the application.
        """
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> str:
        """
        The source application version of the application.
        """
        return pulumi.get(self, "application_version")

    @property
    @pulumi.getter(name="copyType")
    def copy_type(self) -> str:
        return pulumi.get(self, "copy_type")

    @property
    @pulumi.getter(name="lastPatchKey")
    def last_patch_key(self) -> str:
        """
        The last patch key for the application.
        """
        return pulumi.get(self, "last_patch_key")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceApplicationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        GetWorkspaceApplicationsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceExportRequestExportedItemResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 identifier: str,
                 key: str,
                 name: str,
                 name_path: str,
                 object_type: str,
                 object_version: str,
                 time_updated_in_millis: str):
        """
        :param str aggregator_key: Aggregator key
        :param str identifier: Object identifier
        :param str key: Export object request key
        :param str name: Name of the export request.
        :param str name_path: Object name path
        :param str object_type: Object type
        :param str object_version: Object version
        :param str time_updated_in_millis: time at which this object was last updated.
        """
        GetWorkspaceExportRequestExportedItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            identifier=identifier,
            key=key,
            name=name,
            name_path=name_path,
            object_type=object_type,
            object_version=object_version,
            time_updated_in_millis=time_updated_in_millis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             identifier: str,
             key: str,
             name: str,
             name_path: str,
             object_type: str,
             object_version: str,
             time_updated_in_millis: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']
        if 'timeUpdatedInMillis' in kwargs:
            time_updated_in_millis = kwargs['timeUpdatedInMillis']

        _setter("aggregator_key", aggregator_key)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("name_path", name_path)
        _setter("object_type", object_type)
        _setter("object_version", object_version)
        _setter("time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Export object request key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the export request.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> str:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> str:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> str:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class GetWorkspaceExportRequestsExportRequestSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult']):
        GetWorkspaceExportRequestsExportRequestSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 are_references_included: bool,
                 bucket: str,
                 created_by: str,
                 error_messages: Mapping[str, Any],
                 exported_items: Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult'],
                 file_name: str,
                 filters: Sequence[str],
                 is_object_overwrite_enabled: bool,
                 key: str,
                 name: str,
                 object_keys: Sequence[str],
                 object_storage_region: str,
                 object_storage_tenancy_id: str,
                 referenced_items: str,
                 status: str,
                 time_ended_in_millis: str,
                 time_started_in_millis: str,
                 total_exported_object_count: int,
                 workspace_id: str):
        """
        :param bool are_references_included: Controls if the references will be exported along with the objects
        :param str bucket: The name of the Object Storage Bucket where the objects will be exported to
        :param str created_by: Name of the user who initiated export request.
        :param Mapping[str, Any] error_messages: Contains key of the error
        :param Sequence['GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemArgs'] exported_items: The array of exported object details.
        :param str file_name: Name of the exported zip file.
        :param Sequence[str] filters: Export multiple objects based on filters.
        :param bool is_object_overwrite_enabled: Flag to control whether to overwrite the object if it is already present at the provided object storage location.
        :param str key: Export object request key
        :param str name: Used to filter by the name of the object.
        :param Sequence[str] object_keys: The list of the objects to be exported
        :param str object_storage_region: Region of the object storage (if using object storage of different region)
        :param str object_storage_tenancy_id: Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        :param str referenced_items: The array of exported referenced objects.
        :param str status: Export Objects request status.
        :param str time_ended_in_millis: Specifies end time of a copy object request.
        :param str time_started_in_millis: Specifies start time of a copy object request.
        :param int total_exported_object_count: Number of objects that are exported.
        :param str workspace_id: The workspace ID.
        """
        GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            are_references_included=are_references_included,
            bucket=bucket,
            created_by=created_by,
            error_messages=error_messages,
            exported_items=exported_items,
            file_name=file_name,
            filters=filters,
            is_object_overwrite_enabled=is_object_overwrite_enabled,
            key=key,
            name=name,
            object_keys=object_keys,
            object_storage_region=object_storage_region,
            object_storage_tenancy_id=object_storage_tenancy_id,
            referenced_items=referenced_items,
            status=status,
            time_ended_in_millis=time_ended_in_millis,
            time_started_in_millis=time_started_in_millis,
            total_exported_object_count=total_exported_object_count,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             are_references_included: bool,
             bucket: str,
             created_by: str,
             error_messages: Mapping[str, Any],
             exported_items: Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult'],
             file_name: str,
             filters: Sequence[str],
             is_object_overwrite_enabled: bool,
             key: str,
             name: str,
             object_keys: Sequence[str],
             object_storage_region: str,
             object_storage_tenancy_id: str,
             referenced_items: str,
             status: str,
             time_ended_in_millis: str,
             time_started_in_millis: str,
             total_exported_object_count: int,
             workspace_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'areReferencesIncluded' in kwargs:
            are_references_included = kwargs['areReferencesIncluded']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'errorMessages' in kwargs:
            error_messages = kwargs['errorMessages']
        if 'exportedItems' in kwargs:
            exported_items = kwargs['exportedItems']
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']
        if 'isObjectOverwriteEnabled' in kwargs:
            is_object_overwrite_enabled = kwargs['isObjectOverwriteEnabled']
        if 'objectKeys' in kwargs:
            object_keys = kwargs['objectKeys']
        if 'objectStorageRegion' in kwargs:
            object_storage_region = kwargs['objectStorageRegion']
        if 'objectStorageTenancyId' in kwargs:
            object_storage_tenancy_id = kwargs['objectStorageTenancyId']
        if 'referencedItems' in kwargs:
            referenced_items = kwargs['referencedItems']
        if 'timeEndedInMillis' in kwargs:
            time_ended_in_millis = kwargs['timeEndedInMillis']
        if 'timeStartedInMillis' in kwargs:
            time_started_in_millis = kwargs['timeStartedInMillis']
        if 'totalExportedObjectCount' in kwargs:
            total_exported_object_count = kwargs['totalExportedObjectCount']
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']

        _setter("are_references_included", are_references_included)
        _setter("bucket", bucket)
        _setter("created_by", created_by)
        _setter("error_messages", error_messages)
        _setter("exported_items", exported_items)
        _setter("file_name", file_name)
        _setter("filters", filters)
        _setter("is_object_overwrite_enabled", is_object_overwrite_enabled)
        _setter("key", key)
        _setter("name", name)
        _setter("object_keys", object_keys)
        _setter("object_storage_region", object_storage_region)
        _setter("object_storage_tenancy_id", object_storage_tenancy_id)
        _setter("referenced_items", referenced_items)
        _setter("status", status)
        _setter("time_ended_in_millis", time_ended_in_millis)
        _setter("time_started_in_millis", time_started_in_millis)
        _setter("total_exported_object_count", total_exported_object_count)
        _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="areReferencesIncluded")
    def are_references_included(self) -> bool:
        """
        Controls if the references will be exported along with the objects
        """
        return pulumi.get(self, "are_references_included")

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the Object Storage Bucket where the objects will be exported to
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Name of the user who initiated export request.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="errorMessages")
    def error_messages(self) -> Mapping[str, Any]:
        """
        Contains key of the error
        """
        return pulumi.get(self, "error_messages")

    @property
    @pulumi.getter(name="exportedItems")
    def exported_items(self) -> Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult']:
        """
        The array of exported object details.
        """
        return pulumi.get(self, "exported_items")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        Name of the exported zip file.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        """
        Export multiple objects based on filters.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="isObjectOverwriteEnabled")
    def is_object_overwrite_enabled(self) -> bool:
        """
        Flag to control whether to overwrite the object if it is already present at the provided object storage location.
        """
        return pulumi.get(self, "is_object_overwrite_enabled")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Export object request key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectKeys")
    def object_keys(self) -> Sequence[str]:
        """
        The list of the objects to be exported
        """
        return pulumi.get(self, "object_keys")

    @property
    @pulumi.getter(name="objectStorageRegion")
    def object_storage_region(self) -> str:
        """
        Region of the object storage (if using object storage of different region)
        """
        return pulumi.get(self, "object_storage_region")

    @property
    @pulumi.getter(name="objectStorageTenancyId")
    def object_storage_tenancy_id(self) -> str:
        """
        Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        """
        return pulumi.get(self, "object_storage_tenancy_id")

    @property
    @pulumi.getter(name="referencedItems")
    def referenced_items(self) -> str:
        """
        The array of exported referenced objects.
        """
        return pulumi.get(self, "referenced_items")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Export Objects request status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeEndedInMillis")
    def time_ended_in_millis(self) -> str:
        """
        Specifies end time of a copy object request.
        """
        return pulumi.get(self, "time_ended_in_millis")

    @property
    @pulumi.getter(name="timeStartedInMillis")
    def time_started_in_millis(self) -> str:
        """
        Specifies start time of a copy object request.
        """
        return pulumi.get(self, "time_started_in_millis")

    @property
    @pulumi.getter(name="totalExportedObjectCount")
    def total_exported_object_count(self) -> int:
        """
        Number of objects that are exported.
        """
        return pulumi.get(self, "total_exported_object_count")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 identifier: str,
                 key: str,
                 name: str,
                 name_path: str,
                 object_type: str,
                 object_version: str,
                 time_updated_in_millis: str):
        """
        :param str aggregator_key: Aggregator key
        :param str identifier: Object identifier
        :param str key: Export object request key
        :param str name: Used to filter by the name of the object.
        :param str name_path: Object name path
        :param str object_type: Object type
        :param str object_version: Object version
        :param str time_updated_in_millis: time at which this object was last updated.
        """
        GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            identifier=identifier,
            key=key,
            name=name,
            name_path=name_path,
            object_type=object_type,
            object_version=object_version,
            time_updated_in_millis=time_updated_in_millis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             identifier: str,
             key: str,
             name: str,
             name_path: str,
             object_type: str,
             object_version: str,
             time_updated_in_millis: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']
        if 'timeUpdatedInMillis' in kwargs:
            time_updated_in_millis = kwargs['timeUpdatedInMillis']

        _setter("aggregator_key", aggregator_key)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("name_path", name_path)
        _setter("object_type", object_type)
        _setter("object_version", object_version)
        _setter("time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Export object request key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> str:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> str:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> str:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class GetWorkspaceExportRequestsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        GetWorkspaceExportRequestsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceFolderMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetWorkspaceFolderMetadataAggregatorResult'],
                 count_statistics: Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object key for this object.
        :param Sequence['GetWorkspaceFolderMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param Sequence['GetWorkspaceFolderMetadataCountStatisticArgs'] count_statistics: A count statistics.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify this object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        GetWorkspaceFolderMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            aggregators=aggregators,
            count_statistics=count_statistics,
            created_by=created_by,
            created_by_name=created_by_name,
            identifier_path=identifier_path,
            info_fields=info_fields,
            is_favorite=is_favorite,
            labels=labels,
            registry_version=registry_version,
            time_created=time_created,
            time_updated=time_updated,
            updated_by=updated_by,
            updated_by_name=updated_by_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             aggregators: Sequence['outputs.GetWorkspaceFolderMetadataAggregatorResult'],
             count_statistics: Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticResult'],
             created_by: str,
             created_by_name: str,
             identifier_path: str,
             info_fields: Mapping[str, Any],
             is_favorite: bool,
             labels: Sequence[str],
             registry_version: int,
             time_created: str,
             time_updated: str,
             updated_by: str,
             updated_by_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'countStatistics' in kwargs:
            count_statistics = kwargs['countStatistics']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdByName' in kwargs:
            created_by_name = kwargs['createdByName']
        if 'identifierPath' in kwargs:
            identifier_path = kwargs['identifierPath']
        if 'infoFields' in kwargs:
            info_fields = kwargs['infoFields']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if 'updatedByName' in kwargs:
            updated_by_name = kwargs['updatedByName']

        _setter("aggregator_key", aggregator_key)
        _setter("aggregators", aggregators)
        _setter("count_statistics", count_statistics)
        _setter("created_by", created_by)
        _setter("created_by_name", created_by_name)
        _setter("identifier_path", identifier_path)
        _setter("info_fields", info_fields)
        _setter("is_favorite", is_favorite)
        _setter("labels", labels)
        _setter("registry_version", registry_version)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("updated_by", updated_by)
        _setter("updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetWorkspaceFolderMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticResult']:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceFolderMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: The identifier of the aggregator.
        :param str key: The key of the aggregator object.
        :param str name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: The type of the aggregator.
        """
        GetWorkspaceFolderMetadataAggregatorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             identifier: str,
             key: str,
             name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("description", description)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceFolderMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult']):
        """
        :param Sequence['GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListArgs'] object_type_count_lists: The array of statistics.
        """
        GetWorkspaceFolderMetadataCountStatisticResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_type_count_lists=object_type_count_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_type_count_lists: Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectTypeCountLists' in kwargs:
            object_type_count_lists = kwargs['objectTypeCountLists']

        _setter("object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult']:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: str,
                 object_type: str):
        """
        :param str object_count: The value for the count statistic object.
        :param str object_type: The type of object for the count statistic object.
        """
        GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            object_type=object_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: str,
             object_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectCount' in kwargs:
            object_count = kwargs['objectCount']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']

        _setter("object_count", object_count)
        _setter("object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> str:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceFolderParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str,
                 root_doc_id: str):
        """
        :param str parent: Key of the parent object.
        :param str root_doc_id: Key of the root document object.
        """
        GetWorkspaceFolderParentRefResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parent=parent,
            root_doc_id=root_doc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parent: str,
             root_doc_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rootDocId' in kwargs:
            root_doc_id = kwargs['rootDocId']

        _setter("parent", parent)
        _setter("root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> str:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceFolderRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int):
        """
        :param str aggregator_key: The owning object key for this object.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param str key: The key of the aggregator object.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        """
        GetWorkspaceFolderRegistryMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            is_favorite=is_favorite,
            key=key,
            labels=labels,
            registry_version=registry_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             is_favorite: bool,
             key: str,
             labels: Sequence[str],
             registry_version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']

        _setter("aggregator_key", aggregator_key)
        _setter("is_favorite", is_favorite)
        _setter("key", key)
        _setter("labels", labels)
        _setter("registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceFoldersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        GetWorkspaceFoldersFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemResult']):
        GetWorkspaceFoldersFolderSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 category_name: str,
                 description: str,
                 folder_key: str,
                 identifier: str,
                 key: str,
                 key_map: Mapping[str, Any],
                 metadatas: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult'],
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_reves: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult'],
                 registry_metadata: 'outputs.GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult',
                 workspace_id: str):
        """
        :param str category_name: The category name.
        :param str description: The description of the aggregator.
        :param str identifier: Used to filter by the identifier of the object.
        :param str key: The key of the aggregator object.
        :param Mapping[str, Any] key_map: A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        :param Sequence['GetWorkspaceFoldersFolderSummaryCollectionItemMetadataArgs'] metadatas: A summary type containing information about the object including its key, name and when/who created/updated it.
        :param str model_type: The type of the object.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Sequence['GetWorkspaceFoldersFolderSummaryCollectionItemParentRefArgs'] parent_reves: A reference to the object's parent.
        :param str workspace_id: The workspace ID.
        """
        GetWorkspaceFoldersFolderSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_name=category_name,
            description=description,
            folder_key=folder_key,
            identifier=identifier,
            key=key,
            key_map=key_map,
            metadatas=metadatas,
            model_type=model_type,
            model_version=model_version,
            name=name,
            object_status=object_status,
            object_version=object_version,
            parent_reves=parent_reves,
            registry_metadata=registry_metadata,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_name: str,
             description: str,
             folder_key: str,
             identifier: str,
             key: str,
             key_map: Mapping[str, Any],
             metadatas: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult'],
             model_type: str,
             model_version: str,
             name: str,
             object_status: int,
             object_version: int,
             parent_reves: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult'],
             registry_metadata: 'outputs.GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult',
             workspace_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'categoryName' in kwargs:
            category_name = kwargs['categoryName']
        if 'folderKey' in kwargs:
            folder_key = kwargs['folderKey']
        if 'keyMap' in kwargs:
            key_map = kwargs['keyMap']
        if 'modelType' in kwargs:
            model_type = kwargs['modelType']
        if 'modelVersion' in kwargs:
            model_version = kwargs['modelVersion']
        if 'objectStatus' in kwargs:
            object_status = kwargs['objectStatus']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']
        if 'parentReves' in kwargs:
            parent_reves = kwargs['parentReves']
        if 'registryMetadata' in kwargs:
            registry_metadata = kwargs['registryMetadata']
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']

        _setter("category_name", category_name)
        _setter("description", description)
        _setter("folder_key", folder_key)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("key_map", key_map)
        _setter("metadatas", metadatas)
        _setter("model_type", model_type)
        _setter("model_version", model_version)
        _setter("name", name)
        _setter("object_status", object_status)
        _setter("object_version", object_version)
        _setter("parent_reves", parent_reves)
        _setter("registry_metadata", registry_metadata)
        _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="categoryName")
    def category_name(self) -> str:
        """
        The category name.
        """
        return pulumi.get(self, "category_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderKey")
    def folder_key(self) -> str:
        return pulumi.get(self, "folder_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Used to filter by the identifier of the object.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyMap")
    def key_map(self) -> Mapping[str, Any]:
        """
        A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        """
        return pulumi.get(self, "key_map")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult']:
        """
        A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the object.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult']:
        """
        A reference to the object's parent.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> 'outputs.GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult':
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult'],
                 count_statistics: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: Used to filter by the project or the folder object.
        :param Sequence['GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param Sequence['GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticArgs'] count_statistics: A count statistics.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify this object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            aggregators=aggregators,
            count_statistics=count_statistics,
            created_by=created_by,
            created_by_name=created_by_name,
            identifier_path=identifier_path,
            info_fields=info_fields,
            is_favorite=is_favorite,
            labels=labels,
            registry_version=registry_version,
            time_created=time_created,
            time_updated=time_updated,
            updated_by=updated_by,
            updated_by_name=updated_by_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             aggregators: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult'],
             count_statistics: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult'],
             created_by: str,
             created_by_name: str,
             identifier_path: str,
             info_fields: Mapping[str, Any],
             is_favorite: bool,
             labels: Sequence[str],
             registry_version: int,
             time_created: str,
             time_updated: str,
             updated_by: str,
             updated_by_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'countStatistics' in kwargs:
            count_statistics = kwargs['countStatistics']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdByName' in kwargs:
            created_by_name = kwargs['createdByName']
        if 'identifierPath' in kwargs:
            identifier_path = kwargs['identifierPath']
        if 'infoFields' in kwargs:
            info_fields = kwargs['infoFields']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if 'updatedByName' in kwargs:
            updated_by_name = kwargs['updatedByName']

        _setter("aggregator_key", aggregator_key)
        _setter("aggregators", aggregators)
        _setter("count_statistics", count_statistics)
        _setter("created_by", created_by)
        _setter("created_by_name", created_by_name)
        _setter("identifier_path", identifier_path)
        _setter("info_fields", info_fields)
        _setter("is_favorite", is_favorite)
        _setter("labels", labels)
        _setter("registry_version", registry_version)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("updated_by", updated_by)
        _setter("updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        Used to filter by the project or the folder object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult']:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: Used to filter by the identifier of the object.
        :param str key: The key of the aggregator object.
        :param str name: Used to filter by the name of the object.
        :param str type: The type of the aggregator.
        """
        GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             identifier: str,
             key: str,
             name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("description", description)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Used to filter by the identifier of the object.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']):
        """
        :param Sequence['GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListArgs'] object_type_count_lists: The array of statistics.
        """
        GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_type_count_lists=object_type_count_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_type_count_lists: Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectTypeCountLists' in kwargs:
            object_type_count_lists = kwargs['objectTypeCountLists']

        _setter("object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: str,
                 object_type: str):
        """
        :param str object_count: The value for the count statistic object.
        :param str object_type: The type of object for the count statistic object.
        """
        GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            object_type=object_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: str,
             object_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectCount' in kwargs:
            object_count = kwargs['objectCount']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']

        _setter("object_count", object_count)
        _setter("object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> str:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str,
                 root_doc_id: str):
        """
        :param str parent: Key of the parent object.
        :param str root_doc_id: Key of the root document object.
        """
        GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parent=parent,
            root_doc_id=root_doc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parent: str,
             root_doc_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rootDocId' in kwargs:
            root_doc_id = kwargs['rootDocId']

        _setter("parent", parent)
        _setter("root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> str:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int):
        """
        :param str aggregator_key: Used to filter by the project or the folder object.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param str key: The key of the aggregator object.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        """
        GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            is_favorite=is_favorite,
            key=key,
            labels=labels,
            registry_version=registry_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             is_favorite: bool,
             key: str,
             labels: Sequence[str],
             registry_version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']

        _setter("aggregator_key", aggregator_key)
        _setter("is_favorite", is_favorite)
        _setter("key", key)
        _setter("labels", labels)
        _setter("registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        Used to filter by the project or the folder object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceImportRequestImportConflictResolutionResult(dict):
    def __init__(__self__, *,
                 duplicate_prefix: str,
                 duplicate_suffix: str,
                 import_conflict_resolution_type: str):
        """
        :param str duplicate_prefix: In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        :param str duplicate_suffix: In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        :param str import_conflict_resolution_type: Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        """
        GetWorkspaceImportRequestImportConflictResolutionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duplicate_prefix=duplicate_prefix,
            duplicate_suffix=duplicate_suffix,
            import_conflict_resolution_type=import_conflict_resolution_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duplicate_prefix: str,
             duplicate_suffix: str,
             import_conflict_resolution_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'duplicatePrefix' in kwargs:
            duplicate_prefix = kwargs['duplicatePrefix']
        if 'duplicateSuffix' in kwargs:
            duplicate_suffix = kwargs['duplicateSuffix']
        if 'importConflictResolutionType' in kwargs:
            import_conflict_resolution_type = kwargs['importConflictResolutionType']

        _setter("duplicate_prefix", duplicate_prefix)
        _setter("duplicate_suffix", duplicate_suffix)
        _setter("import_conflict_resolution_type", import_conflict_resolution_type)

    @property
    @pulumi.getter(name="duplicatePrefix")
    def duplicate_prefix(self) -> str:
        """
        In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_prefix")

    @property
    @pulumi.getter(name="duplicateSuffix")
    def duplicate_suffix(self) -> str:
        """
        In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_suffix")

    @property
    @pulumi.getter(name="importConflictResolutionType")
    def import_conflict_resolution_type(self) -> str:
        """
        Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        """
        return pulumi.get(self, "import_conflict_resolution_type")


@pulumi.output_type
class GetWorkspaceImportRequestImportedObjectResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 identifier: str,
                 name: str,
                 name_path: str,
                 new_key: str,
                 object_type: str,
                 object_version: str,
                 old_key: str,
                 resolution_action: str,
                 time_updated_in_millis: str):
        """
        :param str aggregator_key: Aggregator key
        :param str identifier: Object identifier
        :param str name: Name of the import request.
        :param str name_path: Object name path
        :param str new_key: New key of the object
        :param str object_type: Object type
        :param str object_version: Object version
        :param str old_key: Old key of the object
        :param str resolution_action: Object resolution action
        :param str time_updated_in_millis: time at which this object was last updated.
        """
        GetWorkspaceImportRequestImportedObjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            identifier=identifier,
            name=name,
            name_path=name_path,
            new_key=new_key,
            object_type=object_type,
            object_version=object_version,
            old_key=old_key,
            resolution_action=resolution_action,
            time_updated_in_millis=time_updated_in_millis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             identifier: str,
             name: str,
             name_path: str,
             new_key: str,
             object_type: str,
             object_version: str,
             old_key: str,
             resolution_action: str,
             time_updated_in_millis: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'newKey' in kwargs:
            new_key = kwargs['newKey']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']
        if 'oldKey' in kwargs:
            old_key = kwargs['oldKey']
        if 'resolutionAction' in kwargs:
            resolution_action = kwargs['resolutionAction']
        if 'timeUpdatedInMillis' in kwargs:
            time_updated_in_millis = kwargs['timeUpdatedInMillis']

        _setter("aggregator_key", aggregator_key)
        _setter("identifier", identifier)
        _setter("name", name)
        _setter("name_path", name_path)
        _setter("new_key", new_key)
        _setter("object_type", object_type)
        _setter("object_version", object_version)
        _setter("old_key", old_key)
        _setter("resolution_action", resolution_action)
        _setter("time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the import request.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> str:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="newKey")
    def new_key(self) -> str:
        """
        New key of the object
        """
        return pulumi.get(self, "new_key")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> str:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="oldKey")
    def old_key(self) -> str:
        """
        Old key of the object
        """
        return pulumi.get(self, "old_key")

    @property
    @pulumi.getter(name="resolutionAction")
    def resolution_action(self) -> str:
        """
        Object resolution action
        """
        return pulumi.get(self, "resolution_action")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> str:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class GetWorkspaceImportRequestsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        GetWorkspaceImportRequestsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceImportRequestsImportRequestSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult']):
        GetWorkspaceImportRequestsImportRequestSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 created_by: str,
                 error_messages: Mapping[str, Any],
                 file_name: str,
                 import_conflict_resolution: 'outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult',
                 imported_objects: Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult'],
                 key: str,
                 name: str,
                 object_key_for_import: str,
                 object_storage_region: str,
                 object_storage_tenancy_id: str,
                 status: str,
                 time_ended_in_millis: str,
                 time_started_in_millis: str,
                 total_imported_object_count: int,
                 workspace_id: str):
        """
        :param str bucket: The name of the Object Storage Bucket where the objects will be imported from
        :param str created_by: Name of the user who initiated import request.
        :param Mapping[str, Any] error_messages: Contains key of the error
        :param str file_name: Name of the zip file from which objects will be imported.
        :param 'GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionArgs' import_conflict_resolution: Import Objects Conflict resolution.
        :param Sequence['GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectArgs'] imported_objects: The array of imported object details.
        :param str key: Import object request key
        :param str name: Used to filter by the name of the object.
        :param str object_key_for_import: Key of the object inside which all the objects will be imported
        :param str object_storage_region: Region of the object storage (if using object storage of different region)
        :param str object_storage_tenancy_id: Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        :param str status: Import Objects request status.
        :param str time_ended_in_millis: Specifies end time of a copy object request.
        :param str time_started_in_millis: Specifies start time of a copy object request.
        :param int total_imported_object_count: Number of objects that are imported.
        :param str workspace_id: The workspace ID.
        """
        GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            created_by=created_by,
            error_messages=error_messages,
            file_name=file_name,
            import_conflict_resolution=import_conflict_resolution,
            imported_objects=imported_objects,
            key=key,
            name=name,
            object_key_for_import=object_key_for_import,
            object_storage_region=object_storage_region,
            object_storage_tenancy_id=object_storage_tenancy_id,
            status=status,
            time_ended_in_millis=time_ended_in_millis,
            time_started_in_millis=time_started_in_millis,
            total_imported_object_count=total_imported_object_count,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: str,
             created_by: str,
             error_messages: Mapping[str, Any],
             file_name: str,
             import_conflict_resolution: 'outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult',
             imported_objects: Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult'],
             key: str,
             name: str,
             object_key_for_import: str,
             object_storage_region: str,
             object_storage_tenancy_id: str,
             status: str,
             time_ended_in_millis: str,
             time_started_in_millis: str,
             total_imported_object_count: int,
             workspace_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'errorMessages' in kwargs:
            error_messages = kwargs['errorMessages']
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']
        if 'importConflictResolution' in kwargs:
            import_conflict_resolution = kwargs['importConflictResolution']
        if 'importedObjects' in kwargs:
            imported_objects = kwargs['importedObjects']
        if 'objectKeyForImport' in kwargs:
            object_key_for_import = kwargs['objectKeyForImport']
        if 'objectStorageRegion' in kwargs:
            object_storage_region = kwargs['objectStorageRegion']
        if 'objectStorageTenancyId' in kwargs:
            object_storage_tenancy_id = kwargs['objectStorageTenancyId']
        if 'timeEndedInMillis' in kwargs:
            time_ended_in_millis = kwargs['timeEndedInMillis']
        if 'timeStartedInMillis' in kwargs:
            time_started_in_millis = kwargs['timeStartedInMillis']
        if 'totalImportedObjectCount' in kwargs:
            total_imported_object_count = kwargs['totalImportedObjectCount']
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']

        _setter("bucket", bucket)
        _setter("created_by", created_by)
        _setter("error_messages", error_messages)
        _setter("file_name", file_name)
        _setter("import_conflict_resolution", import_conflict_resolution)
        _setter("imported_objects", imported_objects)
        _setter("key", key)
        _setter("name", name)
        _setter("object_key_for_import", object_key_for_import)
        _setter("object_storage_region", object_storage_region)
        _setter("object_storage_tenancy_id", object_storage_tenancy_id)
        _setter("status", status)
        _setter("time_ended_in_millis", time_ended_in_millis)
        _setter("time_started_in_millis", time_started_in_millis)
        _setter("total_imported_object_count", total_imported_object_count)
        _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The name of the Object Storage Bucket where the objects will be imported from
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        Name of the user who initiated import request.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="errorMessages")
    def error_messages(self) -> Mapping[str, Any]:
        """
        Contains key of the error
        """
        return pulumi.get(self, "error_messages")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        Name of the zip file from which objects will be imported.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="importConflictResolution")
    def import_conflict_resolution(self) -> 'outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult':
        """
        Import Objects Conflict resolution.
        """
        return pulumi.get(self, "import_conflict_resolution")

    @property
    @pulumi.getter(name="importedObjects")
    def imported_objects(self) -> Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult']:
        """
        The array of imported object details.
        """
        return pulumi.get(self, "imported_objects")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Import object request key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectKeyForImport")
    def object_key_for_import(self) -> str:
        """
        Key of the object inside which all the objects will be imported
        """
        return pulumi.get(self, "object_key_for_import")

    @property
    @pulumi.getter(name="objectStorageRegion")
    def object_storage_region(self) -> str:
        """
        Region of the object storage (if using object storage of different region)
        """
        return pulumi.get(self, "object_storage_region")

    @property
    @pulumi.getter(name="objectStorageTenancyId")
    def object_storage_tenancy_id(self) -> str:
        """
        Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        """
        return pulumi.get(self, "object_storage_tenancy_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Import Objects request status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeEndedInMillis")
    def time_ended_in_millis(self) -> str:
        """
        Specifies end time of a copy object request.
        """
        return pulumi.get(self, "time_ended_in_millis")

    @property
    @pulumi.getter(name="timeStartedInMillis")
    def time_started_in_millis(self) -> str:
        """
        Specifies start time of a copy object request.
        """
        return pulumi.get(self, "time_started_in_millis")

    @property
    @pulumi.getter(name="totalImportedObjectCount")
    def total_imported_object_count(self) -> int:
        """
        Number of objects that are imported.
        """
        return pulumi.get(self, "total_imported_object_count")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult(dict):
    def __init__(__self__, *,
                 duplicate_prefix: str,
                 duplicate_suffix: str,
                 import_conflict_resolution_type: str):
        """
        :param str duplicate_prefix: In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        :param str duplicate_suffix: In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        :param str import_conflict_resolution_type: Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        """
        GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duplicate_prefix=duplicate_prefix,
            duplicate_suffix=duplicate_suffix,
            import_conflict_resolution_type=import_conflict_resolution_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duplicate_prefix: str,
             duplicate_suffix: str,
             import_conflict_resolution_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'duplicatePrefix' in kwargs:
            duplicate_prefix = kwargs['duplicatePrefix']
        if 'duplicateSuffix' in kwargs:
            duplicate_suffix = kwargs['duplicateSuffix']
        if 'importConflictResolutionType' in kwargs:
            import_conflict_resolution_type = kwargs['importConflictResolutionType']

        _setter("duplicate_prefix", duplicate_prefix)
        _setter("duplicate_suffix", duplicate_suffix)
        _setter("import_conflict_resolution_type", import_conflict_resolution_type)

    @property
    @pulumi.getter(name="duplicatePrefix")
    def duplicate_prefix(self) -> str:
        """
        In case of DUPLICATE mode, prefix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_prefix")

    @property
    @pulumi.getter(name="duplicateSuffix")
    def duplicate_suffix(self) -> str:
        """
        In case of DUPLICATE mode, suffix will be used to disambiguate the object.
        """
        return pulumi.get(self, "duplicate_suffix")

    @property
    @pulumi.getter(name="importConflictResolutionType")
    def import_conflict_resolution_type(self) -> str:
        """
        Import Objects Conflict resolution Type (RETAIN/DUPLICATE/REPLACE).
        """
        return pulumi.get(self, "import_conflict_resolution_type")


@pulumi.output_type
class GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 identifier: str,
                 name: str,
                 name_path: str,
                 new_key: str,
                 object_type: str,
                 object_version: str,
                 old_key: str,
                 resolution_action: str,
                 time_updated_in_millis: str):
        """
        :param str aggregator_key: Aggregator key
        :param str identifier: Object identifier
        :param str name: Used to filter by the name of the object.
        :param str name_path: Object name path
        :param str new_key: New key of the object
        :param str object_type: Object type
        :param str object_version: Object version
        :param str old_key: Old key of the object
        :param str resolution_action: Object resolution action
        :param str time_updated_in_millis: time at which this object was last updated.
        """
        GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            identifier=identifier,
            name=name,
            name_path=name_path,
            new_key=new_key,
            object_type=object_type,
            object_version=object_version,
            old_key=old_key,
            resolution_action=resolution_action,
            time_updated_in_millis=time_updated_in_millis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             identifier: str,
             name: str,
             name_path: str,
             new_key: str,
             object_type: str,
             object_version: str,
             old_key: str,
             resolution_action: str,
             time_updated_in_millis: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'namePath' in kwargs:
            name_path = kwargs['namePath']
        if 'newKey' in kwargs:
            new_key = kwargs['newKey']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']
        if 'oldKey' in kwargs:
            old_key = kwargs['oldKey']
        if 'resolutionAction' in kwargs:
            resolution_action = kwargs['resolutionAction']
        if 'timeUpdatedInMillis' in kwargs:
            time_updated_in_millis = kwargs['timeUpdatedInMillis']

        _setter("aggregator_key", aggregator_key)
        _setter("identifier", identifier)
        _setter("name", name)
        _setter("name_path", name_path)
        _setter("new_key", new_key)
        _setter("object_type", object_type)
        _setter("object_version", object_version)
        _setter("old_key", old_key)
        _setter("resolution_action", resolution_action)
        _setter("time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        Aggregator key
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Object identifier
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> str:
        """
        Object name path
        """
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="newKey")
    def new_key(self) -> str:
        """
        New key of the object
        """
        return pulumi.get(self, "new_key")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        Object type
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> str:
        """
        Object version
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="oldKey")
    def old_key(self) -> str:
        """
        Old key of the object
        """
        return pulumi.get(self, "old_key")

    @property
    @pulumi.getter(name="resolutionAction")
    def resolution_action(self) -> str:
        """
        Object resolution action
        """
        return pulumi.get(self, "resolution_action")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> str:
        """
        time at which this object was last updated.
        """
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class GetWorkspaceProjectMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetWorkspaceProjectMetadataAggregatorResult'],
                 count_statistics: Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object key for this object.
        :param Sequence['GetWorkspaceProjectMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param Sequence['GetWorkspaceProjectMetadataCountStatisticArgs'] count_statistics: A count statistics.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify this object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        GetWorkspaceProjectMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            aggregators=aggregators,
            count_statistics=count_statistics,
            created_by=created_by,
            created_by_name=created_by_name,
            identifier_path=identifier_path,
            info_fields=info_fields,
            is_favorite=is_favorite,
            labels=labels,
            registry_version=registry_version,
            time_created=time_created,
            time_updated=time_updated,
            updated_by=updated_by,
            updated_by_name=updated_by_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             aggregators: Sequence['outputs.GetWorkspaceProjectMetadataAggregatorResult'],
             count_statistics: Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticResult'],
             created_by: str,
             created_by_name: str,
             identifier_path: str,
             info_fields: Mapping[str, Any],
             is_favorite: bool,
             labels: Sequence[str],
             registry_version: int,
             time_created: str,
             time_updated: str,
             updated_by: str,
             updated_by_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'countStatistics' in kwargs:
            count_statistics = kwargs['countStatistics']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdByName' in kwargs:
            created_by_name = kwargs['createdByName']
        if 'identifierPath' in kwargs:
            identifier_path = kwargs['identifierPath']
        if 'infoFields' in kwargs:
            info_fields = kwargs['infoFields']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if 'updatedByName' in kwargs:
            updated_by_name = kwargs['updatedByName']

        _setter("aggregator_key", aggregator_key)
        _setter("aggregators", aggregators)
        _setter("count_statistics", count_statistics)
        _setter("created_by", created_by)
        _setter("created_by_name", created_by_name)
        _setter("identifier_path", identifier_path)
        _setter("info_fields", info_fields)
        _setter("is_favorite", is_favorite)
        _setter("labels", labels)
        _setter("registry_version", registry_version)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("updated_by", updated_by)
        _setter("updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetWorkspaceProjectMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticResult']:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceProjectMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: The identifier of the aggregator.
        :param str key: The key of the aggregator object.
        :param str name: Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        :param str type: The type of the aggregator.
        """
        GetWorkspaceProjectMetadataAggregatorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             identifier: str,
             key: str,
             name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("description", description)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        The identifier of the aggregator.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceProjectMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult']):
        """
        :param Sequence['GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListArgs'] object_type_count_lists: The array of statistics.
        """
        GetWorkspaceProjectMetadataCountStatisticResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_type_count_lists=object_type_count_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_type_count_lists: Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectTypeCountLists' in kwargs:
            object_type_count_lists = kwargs['objectTypeCountLists']

        _setter("object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult']:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: str,
                 object_type: str):
        """
        :param str object_count: The value for the count statistic object.
        :param str object_type: The type of object for the count statistic object.
        """
        GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            object_type=object_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: str,
             object_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectCount' in kwargs:
            object_count = kwargs['objectCount']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']

        _setter("object_count", object_count)
        _setter("object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> str:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceProjectParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str,
                 root_doc_id: str):
        """
        :param str parent: Key of the parent object.
        :param str root_doc_id: Key of the root document object.
        """
        GetWorkspaceProjectParentRefResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parent=parent,
            root_doc_id=root_doc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parent: str,
             root_doc_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rootDocId' in kwargs:
            root_doc_id = kwargs['rootDocId']

        _setter("parent", parent)
        _setter("root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> str:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceProjectRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int):
        """
        :param str aggregator_key: The owning object key for this object.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param str key: The key of the aggregator object.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        """
        GetWorkspaceProjectRegistryMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            is_favorite=is_favorite,
            key=key,
            labels=labels,
            registry_version=registry_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             is_favorite: bool,
             key: str,
             labels: Sequence[str],
             registry_version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']

        _setter("aggregator_key", aggregator_key)
        _setter("is_favorite", is_favorite)
        _setter("key", key)
        _setter("labels", labels)
        _setter("registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        GetWorkspaceProjectsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemResult']):
        GetWorkspaceProjectsProjectSummaryCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 key_map: Mapping[str, Any],
                 metadatas: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult'],
                 model_type: str,
                 model_version: str,
                 name: str,
                 object_status: int,
                 object_version: int,
                 parent_reves: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult'],
                 project_key: str,
                 registry_metadata: 'outputs.GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult',
                 workspace_id: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: Used to filter by the identifier of the object.
        :param str key: The key of the aggregator object.
        :param Mapping[str, Any] key_map: A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        :param Sequence['GetWorkspaceProjectsProjectSummaryCollectionItemMetadataArgs'] metadatas: A summary type containing information about the object including its key, name and when/who created/updated it.
        :param str model_type: The type of the object.
        :param str model_version: The model version of an object.
        :param str name: Used to filter by the name of the object.
        :param int object_status: The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        :param int object_version: The version of the object that is used to track changes in the object instance.
        :param Sequence['GetWorkspaceProjectsProjectSummaryCollectionItemParentRefArgs'] parent_reves: A reference to the object's parent.
        :param str workspace_id: The workspace ID.
        """
        GetWorkspaceProjectsProjectSummaryCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            key_map=key_map,
            metadatas=metadatas,
            model_type=model_type,
            model_version=model_version,
            name=name,
            object_status=object_status,
            object_version=object_version,
            parent_reves=parent_reves,
            project_key=project_key,
            registry_metadata=registry_metadata,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             identifier: str,
             key: str,
             key_map: Mapping[str, Any],
             metadatas: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult'],
             model_type: str,
             model_version: str,
             name: str,
             object_status: int,
             object_version: int,
             parent_reves: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult'],
             project_key: str,
             registry_metadata: 'outputs.GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult',
             workspace_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'keyMap' in kwargs:
            key_map = kwargs['keyMap']
        if 'modelType' in kwargs:
            model_type = kwargs['modelType']
        if 'modelVersion' in kwargs:
            model_version = kwargs['modelVersion']
        if 'objectStatus' in kwargs:
            object_status = kwargs['objectStatus']
        if 'objectVersion' in kwargs:
            object_version = kwargs['objectVersion']
        if 'parentReves' in kwargs:
            parent_reves = kwargs['parentReves']
        if 'projectKey' in kwargs:
            project_key = kwargs['projectKey']
        if 'registryMetadata' in kwargs:
            registry_metadata = kwargs['registryMetadata']
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']

        _setter("description", description)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("key_map", key_map)
        _setter("metadatas", metadatas)
        _setter("model_type", model_type)
        _setter("model_version", model_version)
        _setter("name", name)
        _setter("object_status", object_status)
        _setter("object_version", object_version)
        _setter("parent_reves", parent_reves)
        _setter("project_key", project_key)
        _setter("registry_metadata", registry_metadata)
        _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Used to filter by the identifier of the object.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyMap")
    def key_map(self) -> Mapping[str, Any]:
        """
        A key map. If provided, the key is replaced with generated key. This structure provides mapping between user provided key and generated key.
        """
        return pulumi.get(self, "key_map")

    @property
    @pulumi.getter
    def metadatas(self) -> Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult']:
        """
        A summary type containing information about the object including its key, name and when/who created/updated it.
        """
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> str:
        """
        The type of the object.
        """
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> str:
        """
        The model version of an object.
        """
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> int:
        """
        The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
        """
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> int:
        """
        The version of the object that is used to track changes in the object instance.
        """
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult']:
        """
        A reference to the object's parent.
        """
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> str:
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> 'outputs.GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult':
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        """
        The workspace ID.
        """
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 aggregators: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult'],
                 count_statistics: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult'],
                 created_by: str,
                 created_by_name: str,
                 identifier_path: str,
                 info_fields: Mapping[str, Any],
                 is_favorite: bool,
                 labels: Sequence[str],
                 registry_version: int,
                 time_created: str,
                 time_updated: str,
                 updated_by: str,
                 updated_by_name: str):
        """
        :param str aggregator_key: The owning object key for this object.
        :param Sequence['GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorArgs'] aggregators: A summary type containing information about the object's aggregator including its type, key, name and description.
        :param Sequence['GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticArgs'] count_statistics: A count statistics.
        :param str created_by: The user that created the object.
        :param str created_by_name: The user that created the object.
        :param str identifier_path: The full path to identify this object.
        :param Mapping[str, Any] info_fields: Information property fields.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        :param str time_created: The date and time that the object was created.
        :param str time_updated: The date and time that the object was updated.
        :param str updated_by: The user that updated the object.
        :param str updated_by_name: The user that updated the object.
        """
        GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            aggregators=aggregators,
            count_statistics=count_statistics,
            created_by=created_by,
            created_by_name=created_by_name,
            identifier_path=identifier_path,
            info_fields=info_fields,
            is_favorite=is_favorite,
            labels=labels,
            registry_version=registry_version,
            time_created=time_created,
            time_updated=time_updated,
            updated_by=updated_by,
            updated_by_name=updated_by_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             aggregators: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult'],
             count_statistics: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult'],
             created_by: str,
             created_by_name: str,
             identifier_path: str,
             info_fields: Mapping[str, Any],
             is_favorite: bool,
             labels: Sequence[str],
             registry_version: int,
             time_created: str,
             time_updated: str,
             updated_by: str,
             updated_by_name: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'countStatistics' in kwargs:
            count_statistics = kwargs['countStatistics']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'createdByName' in kwargs:
            created_by_name = kwargs['createdByName']
        if 'identifierPath' in kwargs:
            identifier_path = kwargs['identifierPath']
        if 'infoFields' in kwargs:
            info_fields = kwargs['infoFields']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'updatedBy' in kwargs:
            updated_by = kwargs['updatedBy']
        if 'updatedByName' in kwargs:
            updated_by_name = kwargs['updatedByName']

        _setter("aggregator_key", aggregator_key)
        _setter("aggregators", aggregators)
        _setter("count_statistics", count_statistics)
        _setter("created_by", created_by)
        _setter("created_by_name", created_by_name)
        _setter("identifier_path", identifier_path)
        _setter("info_fields", info_fields)
        _setter("is_favorite", is_favorite)
        _setter("labels", labels)
        _setter("registry_version", registry_version)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("updated_by", updated_by)
        _setter("updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult']:
        """
        A summary type containing information about the object's aggregator including its type, key, name and description.
        """
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult']:
        """
        A count statistics.
        """
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> str:
        """
        The user that created the object.
        """
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> str:
        """
        The full path to identify this object.
        """
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Mapping[str, Any]:
        """
        Information property fields.
        """
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the object was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the object was updated.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> str:
        """
        The user that updated the object.
        """
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: str,
                 identifier: str,
                 key: str,
                 name: str,
                 type: str):
        """
        :param str description: The description of the aggregator.
        :param str identifier: Used to filter by the identifier of the object.
        :param str key: The key of the aggregator object.
        :param str name: Used to filter by the name of the object.
        :param str type: The type of the aggregator.
        """
        GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            description=description,
            identifier=identifier,
            key=key,
            name=name,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             description: str,
             identifier: str,
             key: str,
             name: str,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("description", description)
        _setter("identifier", identifier)
        _setter("key", key)
        _setter("name", name)
        _setter("type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the aggregator.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> str:
        """
        Used to filter by the identifier of the object.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the aggregator.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']):
        """
        :param Sequence['GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListArgs'] object_type_count_lists: The array of statistics.
        """
        GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_type_count_lists=object_type_count_lists,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_type_count_lists: Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectTypeCountLists' in kwargs:
            object_type_count_lists = kwargs['objectTypeCountLists']

        _setter("object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']:
        """
        The array of statistics.
        """
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: str,
                 object_type: str):
        """
        :param str object_count: The value for the count statistic object.
        :param str object_type: The type of object for the count statistic object.
        """
        GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_count=object_count,
            object_type=object_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_count: str,
             object_type: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'objectCount' in kwargs:
            object_count = kwargs['objectCount']
        if 'objectType' in kwargs:
            object_type = kwargs['objectType']

        _setter("object_count", object_count)
        _setter("object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> str:
        """
        The value for the count statistic object.
        """
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        """
        The type of object for the count statistic object.
        """
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: str,
                 root_doc_id: str):
        """
        :param str parent: Key of the parent object.
        :param str root_doc_id: Key of the root document object.
        """
        GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parent=parent,
            root_doc_id=root_doc_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parent: str,
             root_doc_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'rootDocId' in kwargs:
            root_doc_id = kwargs['rootDocId']

        _setter("parent", parent)
        _setter("root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> str:
        """
        Key of the parent object.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> str:
        """
        Key of the root document object.
        """
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: str,
                 is_favorite: bool,
                 key: str,
                 labels: Sequence[str],
                 registry_version: int):
        """
        :param str aggregator_key: The owning object key for this object.
        :param bool is_favorite: Specifies whether this object is a favorite or not.
        :param str key: The key of the aggregator object.
        :param Sequence[str] labels: Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        :param int registry_version: The registry version of the object.
        """
        GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregator_key=aggregator_key,
            is_favorite=is_favorite,
            key=key,
            labels=labels,
            registry_version=registry_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregator_key: str,
             is_favorite: bool,
             key: str,
             labels: Sequence[str],
             registry_version: int,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'aggregatorKey' in kwargs:
            aggregator_key = kwargs['aggregatorKey']
        if 'isFavorite' in kwargs:
            is_favorite = kwargs['isFavorite']
        if 'registryVersion' in kwargs:
            registry_version = kwargs['registryVersion']

        _setter("aggregator_key", aggregator_key)
        _setter("is_favorite", is_favorite)
        _setter("key", key)
        _setter("labels", labels)
        _setter("registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> str:
        """
        The owning object key for this object.
        """
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> bool:
        """
        Specifies whether this object is a favorite or not.
        """
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the aggregator object.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Sequence[str]:
        """
        Labels are keywords or tags that you can add to data assets, dataflows and so on. You can define your own labels and use them to categorize content.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> int:
        """
        The registry version of the object.
        """
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspacesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: Used to filter by the name of the object.
        """
        GetWorkspacesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Used to filter by the name of the object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspacesWorkspaceResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 dns_server_ip: str,
                 dns_server_zone: str,
                 endpoint_compartment_id: str,
                 endpoint_id: str,
                 endpoint_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_force_operation: bool,
                 is_private_network_enabled: bool,
                 quiesce_timeout: int,
                 registry_compartment_id: str,
                 registry_id: str,
                 registry_name: str,
                 state: str,
                 state_message: str,
                 subnet_id: str,
                 time_created: str,
                 time_updated: str,
                 vcn_id: str):
        """
        :param str compartment_id: The OCID of the compartment containing the resources you want to list.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A user defined description for the workspace.
        :param str display_name: A user-friendly display name for the workspace. Does not have to be unique, and can be modified. Avoid entering confidential information.
        :param str dns_server_ip: The IP of the custom DNS.
        :param str dns_server_zone: The DNS zone of the custom DNS to use to resolve names.
        :param str endpoint_id: DCMS endpoint associated with the container/workspace. Returns null if there is none.
        :param str endpoint_name: Name of the private endpoint associated with the container/workspace. Returns null if there is none.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: A system-generated and immutable identifier assigned to the workspace upon creation.
        :param bool is_private_network_enabled: Specifies whether the private network connection is enabled or disabled.
        :param str registry_id: DCMS registry associated with the container/workspace. Returns null if there is none.
        :param str state: The lifecycle state of a resource. When specified, the operation only returns resources that match the given lifecycle state. When not specified, all lifecycle states are processed as a match.
        :param str state_message: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in failed state.
        :param str subnet_id: The OCID of the subnet for customer connected databases.
        :param str time_created: The date and time the workspace was created, in the timestamp format defined by RFC3339.
        :param str time_updated: The date and time the workspace was updated, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str vcn_id: The OCID of the VCN the subnet is in.
        """
        GetWorkspacesWorkspaceResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            dns_server_ip=dns_server_ip,
            dns_server_zone=dns_server_zone,
            endpoint_compartment_id=endpoint_compartment_id,
            endpoint_id=endpoint_id,
            endpoint_name=endpoint_name,
            freeform_tags=freeform_tags,
            id=id,
            is_force_operation=is_force_operation,
            is_private_network_enabled=is_private_network_enabled,
            quiesce_timeout=quiesce_timeout,
            registry_compartment_id=registry_compartment_id,
            registry_id=registry_id,
            registry_name=registry_name,
            state=state,
            state_message=state_message,
            subnet_id=subnet_id,
            time_created=time_created,
            time_updated=time_updated,
            vcn_id=vcn_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: str,
             defined_tags: Mapping[str, Any],
             description: str,
             display_name: str,
             dns_server_ip: str,
             dns_server_zone: str,
             endpoint_compartment_id: str,
             endpoint_id: str,
             endpoint_name: str,
             freeform_tags: Mapping[str, Any],
             id: str,
             is_force_operation: bool,
             is_private_network_enabled: bool,
             quiesce_timeout: int,
             registry_compartment_id: str,
             registry_id: str,
             registry_name: str,
             state: str,
             state_message: str,
             subnet_id: str,
             time_created: str,
             time_updated: str,
             vcn_id: str,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'dnsServerIp' in kwargs:
            dns_server_ip = kwargs['dnsServerIp']
        if 'dnsServerZone' in kwargs:
            dns_server_zone = kwargs['dnsServerZone']
        if 'endpointCompartmentId' in kwargs:
            endpoint_compartment_id = kwargs['endpointCompartmentId']
        if 'endpointId' in kwargs:
            endpoint_id = kwargs['endpointId']
        if 'endpointName' in kwargs:
            endpoint_name = kwargs['endpointName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'isForceOperation' in kwargs:
            is_force_operation = kwargs['isForceOperation']
        if 'isPrivateNetworkEnabled' in kwargs:
            is_private_network_enabled = kwargs['isPrivateNetworkEnabled']
        if 'quiesceTimeout' in kwargs:
            quiesce_timeout = kwargs['quiesceTimeout']
        if 'registryCompartmentId' in kwargs:
            registry_compartment_id = kwargs['registryCompartmentId']
        if 'registryId' in kwargs:
            registry_id = kwargs['registryId']
        if 'registryName' in kwargs:
            registry_name = kwargs['registryName']
        if 'stateMessage' in kwargs:
            state_message = kwargs['stateMessage']
        if 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if 'vcnId' in kwargs:
            vcn_id = kwargs['vcnId']

        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("dns_server_ip", dns_server_ip)
        _setter("dns_server_zone", dns_server_zone)
        _setter("endpoint_compartment_id", endpoint_compartment_id)
        _setter("endpoint_id", endpoint_id)
        _setter("endpoint_name", endpoint_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("is_force_operation", is_force_operation)
        _setter("is_private_network_enabled", is_private_network_enabled)
        _setter("quiesce_timeout", quiesce_timeout)
        _setter("registry_compartment_id", registry_compartment_id)
        _setter("registry_id", registry_id)
        _setter("registry_name", registry_name)
        _setter("state", state)
        _setter("state_message", state_message)
        _setter("subnet_id", subnet_id)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment containing the resources you want to list.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user defined description for the workspace.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A user-friendly display name for the workspace. Does not have to be unique, and can be modified. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsServerIp")
    def dns_server_ip(self) -> str:
        """
        The IP of the custom DNS.
        """
        return pulumi.get(self, "dns_server_ip")

    @property
    @pulumi.getter(name="dnsServerZone")
    def dns_server_zone(self) -> str:
        """
        The DNS zone of the custom DNS to use to resolve names.
        """
        return pulumi.get(self, "dns_server_zone")

    @property
    @pulumi.getter(name="endpointCompartmentId")
    def endpoint_compartment_id(self) -> str:
        return pulumi.get(self, "endpoint_compartment_id")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> str:
        """
        DCMS endpoint associated with the container/workspace. Returns null if there is none.
        """
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> str:
        """
        Name of the private endpoint associated with the container/workspace. Returns null if there is none.
        """
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        A system-generated and immutable identifier assigned to the workspace upon creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isForceOperation")
    def is_force_operation(self) -> bool:
        return pulumi.get(self, "is_force_operation")

    @property
    @pulumi.getter(name="isPrivateNetworkEnabled")
    def is_private_network_enabled(self) -> bool:
        """
        Specifies whether the private network connection is enabled or disabled.
        """
        return pulumi.get(self, "is_private_network_enabled")

    @property
    @pulumi.getter(name="quiesceTimeout")
    def quiesce_timeout(self) -> int:
        return pulumi.get(self, "quiesce_timeout")

    @property
    @pulumi.getter(name="registryCompartmentId")
    def registry_compartment_id(self) -> str:
        return pulumi.get(self, "registry_compartment_id")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        """
        DCMS registry associated with the container/workspace. Returns null if there is none.
        """
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> str:
        return pulumi.get(self, "registry_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The lifecycle state of a resource. When specified, the operation only returns resources that match the given lifecycle state. When not specified, all lifecycle states are processed as a match.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in failed state.
        """
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of the subnet for customer connected databases.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the workspace was created, in the timestamp format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the workspace was updated, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> str:
        """
        The OCID of the VCN the subnet is in.
        """
        return pulumi.get(self, "vcn_id")


