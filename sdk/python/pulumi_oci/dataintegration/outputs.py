# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'WorkspaceApplicationDependentObjectMetadata',
    'WorkspaceApplicationMetadata',
    'WorkspaceApplicationMetadataAggregator',
    'WorkspaceApplicationMetadataCountStatistic',
    'WorkspaceApplicationMetadataCountStatisticObjectTypeCountList',
    'WorkspaceApplicationParentRef',
    'WorkspaceApplicationPublishedObjectMetadata',
    'WorkspaceApplicationRegistryMetadata',
    'WorkspaceApplicationSourceApplicationInfo',
    'WorkspaceExportRequestExportedItem',
    'WorkspaceFolderMetadata',
    'WorkspaceFolderMetadataAggregator',
    'WorkspaceFolderMetadataCountStatistic',
    'WorkspaceFolderMetadataCountStatisticObjectTypeCountList',
    'WorkspaceFolderParentRef',
    'WorkspaceFolderRegistryMetadata',
    'WorkspaceImportRequestImportConflictResolution',
    'WorkspaceImportRequestImportedObject',
    'WorkspaceProjectMetadata',
    'WorkspaceProjectMetadataAggregator',
    'WorkspaceProjectMetadataCountStatistic',
    'WorkspaceProjectMetadataCountStatisticObjectTypeCountList',
    'WorkspaceProjectParentRef',
    'WorkspaceProjectRegistryMetadata',
    'GetWorkspaceApplicationDependentObjectMetadataResult',
    'GetWorkspaceApplicationMetadataResult',
    'GetWorkspaceApplicationMetadataAggregatorResult',
    'GetWorkspaceApplicationMetadataCountStatisticResult',
    'GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceApplicationParentRefResult',
    'GetWorkspaceApplicationPublishedObjectMetadataResult',
    'GetWorkspaceApplicationRegistryMetadataResult',
    'GetWorkspaceApplicationSourceApplicationInfoResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult',
    'GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult',
    'GetWorkspaceApplicationsFilterResult',
    'GetWorkspaceExportRequestExportedItemResult',
    'GetWorkspaceExportRequestsExportRequestSummaryCollectionResult',
    'GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult',
    'GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult',
    'GetWorkspaceExportRequestsFilterResult',
    'GetWorkspaceFolderMetadataResult',
    'GetWorkspaceFolderMetadataAggregatorResult',
    'GetWorkspaceFolderMetadataCountStatisticResult',
    'GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceFolderParentRefResult',
    'GetWorkspaceFolderRegistryMetadataResult',
    'GetWorkspaceFoldersFilterResult',
    'GetWorkspaceFoldersFolderSummaryCollectionResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult',
    'GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult',
    'GetWorkspaceImportRequestImportConflictResolutionResult',
    'GetWorkspaceImportRequestImportedObjectResult',
    'GetWorkspaceImportRequestsFilterResult',
    'GetWorkspaceImportRequestsImportRequestSummaryCollectionResult',
    'GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult',
    'GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult',
    'GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult',
    'GetWorkspaceProjectMetadataResult',
    'GetWorkspaceProjectMetadataAggregatorResult',
    'GetWorkspaceProjectMetadataCountStatisticResult',
    'GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceProjectParentRefResult',
    'GetWorkspaceProjectRegistryMetadataResult',
    'GetWorkspaceProjectsFilterResult',
    'GetWorkspaceProjectsProjectSummaryCollectionResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult',
    'GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult',
    'GetWorkspacesFilterResult',
    'GetWorkspacesWorkspaceResult',
]

@pulumi.output_type
class WorkspaceApplicationDependentObjectMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "namePath":
            suggest = "name_path"
        elif key == "objectVersion":
            suggest = "object_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationDependentObjectMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationDependentObjectMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationDependentObjectMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_version: Optional[int] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceApplicationMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "countStatistics":
            suggest = "count_statistics"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.WorkspaceApplicationMetadataAggregator']] = None,
                 count_statistics: Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatistic']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.WorkspaceApplicationMetadataAggregator']]:
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatistic']]:
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class WorkspaceApplicationMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceApplicationMetadataCountStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypeCountLists":
            suggest = "object_type_count_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationMetadataCountStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationMetadataCountStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationMetadataCountStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatisticObjectTypeCountList']] = None):
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.WorkspaceApplicationMetadataCountStatisticObjectTypeCountList']]:
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class WorkspaceApplicationMetadataCountStatisticObjectTypeCountList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectCount":
            suggest = "object_count"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationMetadataCountStatisticObjectTypeCountList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class WorkspaceApplicationParentRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootDocId":
            suggest = "root_doc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class WorkspaceApplicationPublishedObjectMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "namePath":
            suggest = "name_path"
        elif key == "objectVersion":
            suggest = "object_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationPublishedObjectMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationPublishedObjectMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationPublishedObjectMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_version: Optional[int] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceApplicationRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class WorkspaceApplicationSourceApplicationInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationKey":
            suggest = "application_key"
        elif key == "applicationVersion":
            suggest = "application_version"
        elif key == "copyType":
            suggest = "copy_type"
        elif key == "lastPatchKey":
            suggest = "last_patch_key"
        elif key == "workspaceId":
            suggest = "workspace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceApplicationSourceApplicationInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceApplicationSourceApplicationInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceApplicationSourceApplicationInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_key: Optional[str] = None,
                 application_version: Optional[str] = None,
                 copy_type: Optional[str] = None,
                 last_patch_key: Optional[str] = None,
                 workspace_id: Optional[str] = None):
        if application_key is not None:
            pulumi.set(__self__, "application_key", application_key)
        if application_version is not None:
            pulumi.set(__self__, "application_version", application_version)
        if copy_type is not None:
            pulumi.set(__self__, "copy_type", copy_type)
        if last_patch_key is not None:
            pulumi.set(__self__, "last_patch_key", last_patch_key)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> Optional[str]:
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> Optional[str]:
        return pulumi.get(self, "application_version")

    @property
    @pulumi.getter(name="copyType")
    def copy_type(self) -> Optional[str]:
        return pulumi.get(self, "copy_type")

    @property
    @pulumi.getter(name="lastPatchKey")
    def last_patch_key(self) -> Optional[str]:
        return pulumi.get(self, "last_patch_key")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[str]:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class WorkspaceExportRequestExportedItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "namePath":
            suggest = "name_path"
        elif key == "objectType":
            suggest = "object_type"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "timeUpdatedInMillis":
            suggest = "time_updated_in_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceExportRequestExportedItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceExportRequestExportedItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceExportRequestExportedItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_type: Optional[str] = None,
                 object_version: Optional[str] = None,
                 time_updated_in_millis: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[str]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class WorkspaceFolderMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "countStatistics":
            suggest = "count_statistics"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.WorkspaceFolderMetadataAggregator']] = None,
                 count_statistics: Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatistic']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.WorkspaceFolderMetadataAggregator']]:
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatistic']]:
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class WorkspaceFolderMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceFolderMetadataCountStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypeCountLists":
            suggest = "object_type_count_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderMetadataCountStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderMetadataCountStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderMetadataCountStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatisticObjectTypeCountList']] = None):
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.WorkspaceFolderMetadataCountStatisticObjectTypeCountList']]:
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class WorkspaceFolderMetadataCountStatisticObjectTypeCountList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectCount":
            suggest = "object_count"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderMetadataCountStatisticObjectTypeCountList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class WorkspaceFolderParentRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootDocId":
            suggest = "root_doc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class WorkspaceFolderRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceFolderRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceFolderRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceFolderRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class WorkspaceImportRequestImportConflictResolution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "importConflictResolutionType":
            suggest = "import_conflict_resolution_type"
        elif key == "duplicatePrefix":
            suggest = "duplicate_prefix"
        elif key == "duplicateSuffix":
            suggest = "duplicate_suffix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceImportRequestImportConflictResolution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceImportRequestImportConflictResolution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceImportRequestImportConflictResolution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 import_conflict_resolution_type: str,
                 duplicate_prefix: Optional[str] = None,
                 duplicate_suffix: Optional[str] = None):
        pulumi.set(__self__, "import_conflict_resolution_type", import_conflict_resolution_type)
        if duplicate_prefix is not None:
            pulumi.set(__self__, "duplicate_prefix", duplicate_prefix)
        if duplicate_suffix is not None:
            pulumi.set(__self__, "duplicate_suffix", duplicate_suffix)

    @property
    @pulumi.getter(name="importConflictResolutionType")
    def import_conflict_resolution_type(self) -> str:
        return pulumi.get(self, "import_conflict_resolution_type")

    @property
    @pulumi.getter(name="duplicatePrefix")
    def duplicate_prefix(self) -> Optional[str]:
        return pulumi.get(self, "duplicate_prefix")

    @property
    @pulumi.getter(name="duplicateSuffix")
    def duplicate_suffix(self) -> Optional[str]:
        return pulumi.get(self, "duplicate_suffix")


@pulumi.output_type
class WorkspaceImportRequestImportedObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "namePath":
            suggest = "name_path"
        elif key == "newKey":
            suggest = "new_key"
        elif key == "objectType":
            suggest = "object_type"
        elif key == "objectVersion":
            suggest = "object_version"
        elif key == "oldKey":
            suggest = "old_key"
        elif key == "resolutionAction":
            suggest = "resolution_action"
        elif key == "timeUpdatedInMillis":
            suggest = "time_updated_in_millis"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceImportRequestImportedObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceImportRequestImportedObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceImportRequestImportedObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 identifier: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 new_key: Optional[str] = None,
                 object_type: Optional[str] = None,
                 object_version: Optional[str] = None,
                 old_key: Optional[str] = None,
                 resolution_action: Optional[str] = None,
                 time_updated_in_millis: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if new_key is not None:
            pulumi.set(__self__, "new_key", new_key)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if old_key is not None:
            pulumi.set(__self__, "old_key", old_key)
        if resolution_action is not None:
            pulumi.set(__self__, "resolution_action", resolution_action)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="newKey")
    def new_key(self) -> Optional[str]:
        return pulumi.get(self, "new_key")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[str]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="oldKey")
    def old_key(self) -> Optional[str]:
        return pulumi.get(self, "old_key")

    @property
    @pulumi.getter(name="resolutionAction")
    def resolution_action(self) -> Optional[str]:
        return pulumi.get(self, "resolution_action")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class WorkspaceProjectMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "countStatistics":
            suggest = "count_statistics"
        elif key == "createdBy":
            suggest = "created_by"
        elif key == "createdByName":
            suggest = "created_by_name"
        elif key == "identifierPath":
            suggest = "identifier_path"
        elif key == "infoFields":
            suggest = "info_fields"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "updatedBy":
            suggest = "updated_by"
        elif key == "updatedByName":
            suggest = "updated_by_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.WorkspaceProjectMetadataAggregator']] = None,
                 count_statistics: Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatistic']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.WorkspaceProjectMetadataAggregator']]:
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatistic']]:
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class WorkspaceProjectMetadataAggregator(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkspaceProjectMetadataCountStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectTypeCountLists":
            suggest = "object_type_count_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectMetadataCountStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectMetadataCountStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectMetadataCountStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatisticObjectTypeCountList']] = None):
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.WorkspaceProjectMetadataCountStatisticObjectTypeCountList']]:
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class WorkspaceProjectMetadataCountStatisticObjectTypeCountList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectCount":
            suggest = "object_count"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectMetadataCountStatisticObjectTypeCountList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectMetadataCountStatisticObjectTypeCountList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class WorkspaceProjectParentRef(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootDocId":
            suggest = "root_doc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectParentRef. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectParentRef.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectParentRef.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class WorkspaceProjectRegistryMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatorKey":
            suggest = "aggregator_key"
        elif key == "isFavorite":
            suggest = "is_favorite"
        elif key == "registryVersion":
            suggest = "registry_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkspaceProjectRegistryMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkspaceProjectRegistryMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkspaceProjectRegistryMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceApplicationDependentObjectMetadataResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_version: Optional[int] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.GetWorkspaceApplicationMetadataAggregatorResult']] = None,
                 count_statistics: Optional[Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticResult']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationMetadataAggregatorResult']]:
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticResult']]:
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceApplicationMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult']] = None):
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult']]:
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceApplicationMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceApplicationParentRefResult(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceApplicationPublishedObjectMetadataResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_version: Optional[int] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceApplicationSourceApplicationInfoResult(dict):
    def __init__(__self__, *,
                 application_key: Optional[str] = None,
                 application_version: Optional[str] = None,
                 copy_type: Optional[str] = None,
                 last_patch_key: Optional[str] = None,
                 workspace_id: Optional[str] = None):
        if application_key is not None:
            pulumi.set(__self__, "application_key", application_key)
        if application_version is not None:
            pulumi.set(__self__, "application_version", application_version)
        if copy_type is not None:
            pulumi.set(__self__, "copy_type", copy_type)
        if last_patch_key is not None:
            pulumi.set(__self__, "last_patch_key", last_patch_key)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> Optional[str]:
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> Optional[str]:
        return pulumi.get(self, "application_version")

    @property
    @pulumi.getter(name="copyType")
    def copy_type(self) -> Optional[str]:
        return pulumi.get(self, "copy_type")

    @property
    @pulumi.getter(name="lastPatchKey")
    def last_patch_key(self) -> Optional[str]:
        return pulumi.get(self, "last_patch_key")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[str]:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 application_version: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 dependent_object_metadatas: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult']] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 key_map: Optional[Mapping[str, Any]] = None,
                 metadatas: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult']] = None,
                 model_type: Optional[str] = None,
                 model_version: Optional[str] = None,
                 name: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 parent_reves: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult']] = None,
                 published_object_metadatas: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult']] = None,
                 registry_metadatas: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult']] = None,
                 source_application_infos: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_patched: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 workspace_id: Optional[str] = None):
        if application_version is not None:
            pulumi.set(__self__, "application_version", application_version)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if dependent_object_metadatas is not None:
            pulumi.set(__self__, "dependent_object_metadatas", dependent_object_metadatas)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_map is not None:
            pulumi.set(__self__, "key_map", key_map)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_reves is not None:
            pulumi.set(__self__, "parent_reves", parent_reves)
        if published_object_metadatas is not None:
            pulumi.set(__self__, "published_object_metadatas", published_object_metadatas)
        if registry_metadatas is not None:
            pulumi.set(__self__, "registry_metadatas", registry_metadatas)
        if source_application_infos is not None:
            pulumi.set(__self__, "source_application_infos", source_application_infos)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_patched is not None:
            pulumi.set(__self__, "time_patched", time_patched)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> Optional[int]:
        return pulumi.get(self, "application_version")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="dependentObjectMetadatas")
    def dependent_object_metadatas(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult']]:
        return pulumi.get(self, "dependent_object_metadatas")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyMap")
    def key_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "key_map")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult']]:
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="publishedObjectMetadatas")
    def published_object_metadatas(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult']]:
        return pulumi.get(self, "published_object_metadatas")

    @property
    @pulumi.getter(name="registryMetadatas")
    def registry_metadatas(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult']]:
        return pulumi.get(self, "registry_metadatas")

    @property
    @pulumi.getter(name="sourceApplicationInfos")
    def source_application_infos(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult']]:
        return pulumi.get(self, "source_application_infos")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timePatched")
    def time_patched(self) -> Optional[str]:
        return pulumi.get(self, "time_patched")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[str]:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemDependentObjectMetadataResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_version: Optional[int] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult']] = None,
                 count_statistics: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult']]:
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult']]:
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']] = None):
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']]:
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemPublishedObjectMetadataResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_version: Optional[int] = None,
                 type: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceApplicationsApplicationSummaryCollectionItemSourceApplicationInfoResult(dict):
    def __init__(__self__, *,
                 application_key: Optional[str] = None,
                 application_version: Optional[str] = None,
                 copy_type: Optional[str] = None,
                 last_patch_key: Optional[str] = None,
                 workspace_id: Optional[str] = None):
        if application_key is not None:
            pulumi.set(__self__, "application_key", application_key)
        if application_version is not None:
            pulumi.set(__self__, "application_version", application_version)
        if copy_type is not None:
            pulumi.set(__self__, "copy_type", copy_type)
        if last_patch_key is not None:
            pulumi.set(__self__, "last_patch_key", last_patch_key)
        if workspace_id is not None:
            pulumi.set(__self__, "workspace_id", workspace_id)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> Optional[str]:
        return pulumi.get(self, "application_key")

    @property
    @pulumi.getter(name="applicationVersion")
    def application_version(self) -> Optional[str]:
        return pulumi.get(self, "application_version")

    @property
    @pulumi.getter(name="copyType")
    def copy_type(self) -> Optional[str]:
        return pulumi.get(self, "copy_type")

    @property
    @pulumi.getter(name="lastPatchKey")
    def last_patch_key(self) -> Optional[str]:
        return pulumi.get(self, "last_patch_key")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[str]:
        return pulumi.get(self, "workspace_id")


@pulumi.output_type
class GetWorkspaceApplicationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceExportRequestExportedItemResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_type: Optional[str] = None,
                 object_version: Optional[str] = None,
                 time_updated_in_millis: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[str]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class GetWorkspaceExportRequestsExportRequestSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceExportRequestsExportRequestSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 workspace_id: str,
                 are_references_included: Optional[bool] = None,
                 created_by: Optional[str] = None,
                 error_messages: Optional[Mapping[str, Any]] = None,
                 exported_items: Optional[Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult']] = None,
                 file_name: Optional[str] = None,
                 filters: Optional[Sequence[str]] = None,
                 is_object_overwrite_enabled: Optional[bool] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 object_keys: Optional[Sequence[str]] = None,
                 object_storage_region: Optional[str] = None,
                 object_storage_tenancy_id: Optional[str] = None,
                 referenced_items: Optional[str] = None,
                 status: Optional[str] = None,
                 time_ended_in_millis: Optional[str] = None,
                 time_started_in_millis: Optional[str] = None,
                 total_exported_object_count: Optional[int] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if are_references_included is not None:
            pulumi.set(__self__, "are_references_included", are_references_included)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if error_messages is not None:
            pulumi.set(__self__, "error_messages", error_messages)
        if exported_items is not None:
            pulumi.set(__self__, "exported_items", exported_items)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if is_object_overwrite_enabled is not None:
            pulumi.set(__self__, "is_object_overwrite_enabled", is_object_overwrite_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_keys is not None:
            pulumi.set(__self__, "object_keys", object_keys)
        if object_storage_region is not None:
            pulumi.set(__self__, "object_storage_region", object_storage_region)
        if object_storage_tenancy_id is not None:
            pulumi.set(__self__, "object_storage_tenancy_id", object_storage_tenancy_id)
        if referenced_items is not None:
            pulumi.set(__self__, "referenced_items", referenced_items)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_ended_in_millis is not None:
            pulumi.set(__self__, "time_ended_in_millis", time_ended_in_millis)
        if time_started_in_millis is not None:
            pulumi.set(__self__, "time_started_in_millis", time_started_in_millis)
        if total_exported_object_count is not None:
            pulumi.set(__self__, "total_exported_object_count", total_exported_object_count)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")

    @property
    @pulumi.getter(name="areReferencesIncluded")
    def are_references_included(self) -> Optional[bool]:
        return pulumi.get(self, "are_references_included")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="errorMessages")
    def error_messages(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "error_messages")

    @property
    @pulumi.getter(name="exportedItems")
    def exported_items(self) -> Optional[Sequence['outputs.GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult']]:
        return pulumi.get(self, "exported_items")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[str]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="isObjectOverwriteEnabled")
    def is_object_overwrite_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_object_overwrite_enabled")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectKeys")
    def object_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_keys")

    @property
    @pulumi.getter(name="objectStorageRegion")
    def object_storage_region(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_region")

    @property
    @pulumi.getter(name="objectStorageTenancyId")
    def object_storage_tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_tenancy_id")

    @property
    @pulumi.getter(name="referencedItems")
    def referenced_items(self) -> Optional[str]:
        return pulumi.get(self, "referenced_items")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeEndedInMillis")
    def time_ended_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_ended_in_millis")

    @property
    @pulumi.getter(name="timeStartedInMillis")
    def time_started_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_started_in_millis")

    @property
    @pulumi.getter(name="totalExportedObjectCount")
    def total_exported_object_count(self) -> Optional[int]:
        return pulumi.get(self, "total_exported_object_count")


@pulumi.output_type
class GetWorkspaceExportRequestsExportRequestSummaryCollectionItemExportedItemResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 object_type: Optional[str] = None,
                 object_version: Optional[str] = None,
                 time_updated_in_millis: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[str]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class GetWorkspaceExportRequestsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceFolderMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.GetWorkspaceFolderMetadataAggregatorResult']] = None,
                 count_statistics: Optional[Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticResult']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.GetWorkspaceFolderMetadataAggregatorResult']]:
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticResult']]:
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceFolderMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceFolderMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult']] = None):
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult']]:
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceFolderMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceFolderParentRefResult(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceFolderRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceFoldersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 identifier: str,
                 name: str,
                 registry_metadata: 'outputs.GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult',
                 workspace_id: str,
                 category_name: Optional[str] = None,
                 description: Optional[str] = None,
                 folder_key: Optional[str] = None,
                 key: Optional[str] = None,
                 key_map: Optional[Mapping[str, Any]] = None,
                 metadatas: Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult']] = None,
                 model_type: Optional[str] = None,
                 model_version: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 parent_reves: Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult']] = None):
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "registry_metadata", registry_metadata)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if category_name is not None:
            pulumi.set(__self__, "category_name", category_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_key is not None:
            pulumi.set(__self__, "folder_key", folder_key)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_map is not None:
            pulumi.set(__self__, "key_map", key_map)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_reves is not None:
            pulumi.set(__self__, "parent_reves", parent_reves)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> 'outputs.GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult':
        return pulumi.get(self, "registry_metadata")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")

    @property
    @pulumi.getter(name="categoryName")
    def category_name(self) -> Optional[str]:
        return pulumi.get(self, "category_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderKey")
    def folder_key(self) -> Optional[str]:
        return pulumi.get(self, "folder_key")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyMap")
    def key_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "key_map")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult']]:
        return pulumi.get(self, "parent_reves")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult']] = None,
                 count_statistics: Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult']]:
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult']]:
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']] = None):
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']]:
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceFoldersFolderSummaryCollectionItemRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceImportRequestImportConflictResolutionResult(dict):
    def __init__(__self__, *,
                 duplicate_prefix: Optional[str] = None,
                 duplicate_suffix: Optional[str] = None,
                 import_conflict_resolution_type: Optional[str] = None):
        if duplicate_prefix is not None:
            pulumi.set(__self__, "duplicate_prefix", duplicate_prefix)
        if duplicate_suffix is not None:
            pulumi.set(__self__, "duplicate_suffix", duplicate_suffix)
        if import_conflict_resolution_type is not None:
            pulumi.set(__self__, "import_conflict_resolution_type", import_conflict_resolution_type)

    @property
    @pulumi.getter(name="duplicatePrefix")
    def duplicate_prefix(self) -> Optional[str]:
        return pulumi.get(self, "duplicate_prefix")

    @property
    @pulumi.getter(name="duplicateSuffix")
    def duplicate_suffix(self) -> Optional[str]:
        return pulumi.get(self, "duplicate_suffix")

    @property
    @pulumi.getter(name="importConflictResolutionType")
    def import_conflict_resolution_type(self) -> Optional[str]:
        return pulumi.get(self, "import_conflict_resolution_type")


@pulumi.output_type
class GetWorkspaceImportRequestImportedObjectResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 identifier: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 new_key: Optional[str] = None,
                 object_type: Optional[str] = None,
                 object_version: Optional[str] = None,
                 old_key: Optional[str] = None,
                 resolution_action: Optional[str] = None,
                 time_updated_in_millis: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if new_key is not None:
            pulumi.set(__self__, "new_key", new_key)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if old_key is not None:
            pulumi.set(__self__, "old_key", old_key)
        if resolution_action is not None:
            pulumi.set(__self__, "resolution_action", resolution_action)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="newKey")
    def new_key(self) -> Optional[str]:
        return pulumi.get(self, "new_key")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[str]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="oldKey")
    def old_key(self) -> Optional[str]:
        return pulumi.get(self, "old_key")

    @property
    @pulumi.getter(name="resolutionAction")
    def resolution_action(self) -> Optional[str]:
        return pulumi.get(self, "resolution_action")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class GetWorkspaceImportRequestsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceImportRequestsImportRequestSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceImportRequestsImportRequestSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 file_name: str,
                 workspace_id: str,
                 created_by: Optional[str] = None,
                 error_messages: Optional[Mapping[str, Any]] = None,
                 import_conflict_resolution: Optional['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult'] = None,
                 imported_objects: Optional[Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult']] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 object_key_for_import: Optional[str] = None,
                 object_storage_region: Optional[str] = None,
                 object_storage_tenancy_id: Optional[str] = None,
                 status: Optional[str] = None,
                 time_ended_in_millis: Optional[str] = None,
                 time_started_in_millis: Optional[str] = None,
                 total_imported_object_count: Optional[int] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if error_messages is not None:
            pulumi.set(__self__, "error_messages", error_messages)
        if import_conflict_resolution is not None:
            pulumi.set(__self__, "import_conflict_resolution", import_conflict_resolution)
        if imported_objects is not None:
            pulumi.set(__self__, "imported_objects", imported_objects)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_key_for_import is not None:
            pulumi.set(__self__, "object_key_for_import", object_key_for_import)
        if object_storage_region is not None:
            pulumi.set(__self__, "object_storage_region", object_storage_region)
        if object_storage_tenancy_id is not None:
            pulumi.set(__self__, "object_storage_tenancy_id", object_storage_tenancy_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_ended_in_millis is not None:
            pulumi.set(__self__, "time_ended_in_millis", time_ended_in_millis)
        if time_started_in_millis is not None:
            pulumi.set(__self__, "time_started_in_millis", time_started_in_millis)
        if total_imported_object_count is not None:
            pulumi.set(__self__, "total_imported_object_count", total_imported_object_count)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="errorMessages")
    def error_messages(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "error_messages")

    @property
    @pulumi.getter(name="importConflictResolution")
    def import_conflict_resolution(self) -> Optional['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult']:
        return pulumi.get(self, "import_conflict_resolution")

    @property
    @pulumi.getter(name="importedObjects")
    def imported_objects(self) -> Optional[Sequence['outputs.GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult']]:
        return pulumi.get(self, "imported_objects")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectKeyForImport")
    def object_key_for_import(self) -> Optional[str]:
        return pulumi.get(self, "object_key_for_import")

    @property
    @pulumi.getter(name="objectStorageRegion")
    def object_storage_region(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_region")

    @property
    @pulumi.getter(name="objectStorageTenancyId")
    def object_storage_tenancy_id(self) -> Optional[str]:
        return pulumi.get(self, "object_storage_tenancy_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeEndedInMillis")
    def time_ended_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_ended_in_millis")

    @property
    @pulumi.getter(name="timeStartedInMillis")
    def time_started_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_started_in_millis")

    @property
    @pulumi.getter(name="totalImportedObjectCount")
    def total_imported_object_count(self) -> Optional[int]:
        return pulumi.get(self, "total_imported_object_count")


@pulumi.output_type
class GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportConflictResolutionResult(dict):
    def __init__(__self__, *,
                 import_conflict_resolution_type: str,
                 duplicate_prefix: Optional[str] = None,
                 duplicate_suffix: Optional[str] = None):
        pulumi.set(__self__, "import_conflict_resolution_type", import_conflict_resolution_type)
        if duplicate_prefix is not None:
            pulumi.set(__self__, "duplicate_prefix", duplicate_prefix)
        if duplicate_suffix is not None:
            pulumi.set(__self__, "duplicate_suffix", duplicate_suffix)

    @property
    @pulumi.getter(name="importConflictResolutionType")
    def import_conflict_resolution_type(self) -> str:
        return pulumi.get(self, "import_conflict_resolution_type")

    @property
    @pulumi.getter(name="duplicatePrefix")
    def duplicate_prefix(self) -> Optional[str]:
        return pulumi.get(self, "duplicate_prefix")

    @property
    @pulumi.getter(name="duplicateSuffix")
    def duplicate_suffix(self) -> Optional[str]:
        return pulumi.get(self, "duplicate_suffix")


@pulumi.output_type
class GetWorkspaceImportRequestsImportRequestSummaryCollectionItemImportedObjectResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 identifier: Optional[str] = None,
                 name: Optional[str] = None,
                 name_path: Optional[str] = None,
                 new_key: Optional[str] = None,
                 object_type: Optional[str] = None,
                 object_version: Optional[str] = None,
                 old_key: Optional[str] = None,
                 resolution_action: Optional[str] = None,
                 time_updated_in_millis: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_path is not None:
            pulumi.set(__self__, "name_path", name_path)
        if new_key is not None:
            pulumi.set(__self__, "new_key", new_key)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if old_key is not None:
            pulumi.set(__self__, "old_key", old_key)
        if resolution_action is not None:
            pulumi.set(__self__, "resolution_action", resolution_action)
        if time_updated_in_millis is not None:
            pulumi.set(__self__, "time_updated_in_millis", time_updated_in_millis)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namePath")
    def name_path(self) -> Optional[str]:
        return pulumi.get(self, "name_path")

    @property
    @pulumi.getter(name="newKey")
    def new_key(self) -> Optional[str]:
        return pulumi.get(self, "new_key")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[str]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="oldKey")
    def old_key(self) -> Optional[str]:
        return pulumi.get(self, "old_key")

    @property
    @pulumi.getter(name="resolutionAction")
    def resolution_action(self) -> Optional[str]:
        return pulumi.get(self, "resolution_action")

    @property
    @pulumi.getter(name="timeUpdatedInMillis")
    def time_updated_in_millis(self) -> Optional[str]:
        return pulumi.get(self, "time_updated_in_millis")


@pulumi.output_type
class GetWorkspaceProjectMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.GetWorkspaceProjectMetadataAggregatorResult']] = None,
                 count_statistics: Optional[Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticResult']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.GetWorkspaceProjectMetadataAggregatorResult']]:
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticResult']]:
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceProjectMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceProjectMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult']] = None):
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult']]:
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceProjectMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceProjectParentRefResult(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceProjectRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspaceProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 identifier: str,
                 name: str,
                 workspace_id: str,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 key_map: Optional[Mapping[str, Any]] = None,
                 metadatas: Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult']] = None,
                 model_type: Optional[str] = None,
                 model_version: Optional[str] = None,
                 object_status: Optional[int] = None,
                 object_version: Optional[int] = None,
                 parent_reves: Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult']] = None,
                 project_key: Optional[str] = None,
                 registry_metadata: Optional['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult'] = None):
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_map is not None:
            pulumi.set(__self__, "key_map", key_map)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if model_type is not None:
            pulumi.set(__self__, "model_type", model_type)
        if model_version is not None:
            pulumi.set(__self__, "model_version", model_version)
        if object_status is not None:
            pulumi.set(__self__, "object_status", object_status)
        if object_version is not None:
            pulumi.set(__self__, "object_version", object_version)
        if parent_reves is not None:
            pulumi.set(__self__, "parent_reves", parent_reves)
        if project_key is not None:
            pulumi.set(__self__, "project_key", project_key)
        if registry_metadata is not None:
            pulumi.set(__self__, "registry_metadata", registry_metadata)

    @property
    @pulumi.getter
    def identifier(self) -> str:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> str:
        return pulumi.get(self, "workspace_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyMap")
    def key_map(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "key_map")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult']]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="modelType")
    def model_type(self) -> Optional[str]:
        return pulumi.get(self, "model_type")

    @property
    @pulumi.getter(name="modelVersion")
    def model_version(self) -> Optional[str]:
        return pulumi.get(self, "model_version")

    @property
    @pulumi.getter(name="objectStatus")
    def object_status(self) -> Optional[int]:
        return pulumi.get(self, "object_status")

    @property
    @pulumi.getter(name="objectVersion")
    def object_version(self) -> Optional[int]:
        return pulumi.get(self, "object_version")

    @property
    @pulumi.getter(name="parentReves")
    def parent_reves(self) -> Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult']]:
        return pulumi.get(self, "parent_reves")

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> Optional[str]:
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter(name="registryMetadata")
    def registry_metadata(self) -> Optional['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult']:
        return pulumi.get(self, "registry_metadata")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 aggregators: Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult']] = None,
                 count_statistics: Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult']] = None,
                 created_by: Optional[str] = None,
                 created_by_name: Optional[str] = None,
                 identifier_path: Optional[str] = None,
                 info_fields: Optional[Mapping[str, Any]] = None,
                 is_favorite: Optional[bool] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 updated_by: Optional[str] = None,
                 updated_by_name: Optional[str] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if aggregators is not None:
            pulumi.set(__self__, "aggregators", aggregators)
        if count_statistics is not None:
            pulumi.set(__self__, "count_statistics", count_statistics)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_by_name is not None:
            pulumi.set(__self__, "created_by_name", created_by_name)
        if identifier_path is not None:
            pulumi.set(__self__, "identifier_path", identifier_path)
        if info_fields is not None:
            pulumi.set(__self__, "info_fields", info_fields)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if updated_by is not None:
            pulumi.set(__self__, "updated_by", updated_by)
        if updated_by_name is not None:
            pulumi.set(__self__, "updated_by_name", updated_by_name)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter
    def aggregators(self) -> Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult']]:
        return pulumi.get(self, "aggregators")

    @property
    @pulumi.getter(name="countStatistics")
    def count_statistics(self) -> Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult']]:
        return pulumi.get(self, "count_statistics")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdByName")
    def created_by_name(self) -> Optional[str]:
        return pulumi.get(self, "created_by_name")

    @property
    @pulumi.getter(name="identifierPath")
    def identifier_path(self) -> Optional[str]:
        return pulumi.get(self, "identifier_path")

    @property
    @pulumi.getter(name="infoFields")
    def info_fields(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "info_fields")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> Optional[str]:
        return pulumi.get(self, "updated_by")

    @property
    @pulumi.getter(name="updatedByName")
    def updated_by_name(self) -> Optional[str]:
        return pulumi.get(self, "updated_by_name")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemMetadataAggregatorResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 identifier: Optional[str] = None,
                 key: Optional[str] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticResult(dict):
    def __init__(__self__, *,
                 object_type_count_lists: Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']] = None):
        if object_type_count_lists is not None:
            pulumi.set(__self__, "object_type_count_lists", object_type_count_lists)

    @property
    @pulumi.getter(name="objectTypeCountLists")
    def object_type_count_lists(self) -> Optional[Sequence['outputs.GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult']]:
        return pulumi.get(self, "object_type_count_lists")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemMetadataCountStatisticObjectTypeCountListResult(dict):
    def __init__(__self__, *,
                 object_count: Optional[str] = None,
                 object_type: Optional[str] = None):
        if object_count is not None:
            pulumi.set(__self__, "object_count", object_count)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectCount")
    def object_count(self) -> Optional[str]:
        return pulumi.get(self, "object_count")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemParentRefResult(dict):
    def __init__(__self__, *,
                 parent: Optional[str] = None,
                 root_doc_id: Optional[str] = None):
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if root_doc_id is not None:
            pulumi.set(__self__, "root_doc_id", root_doc_id)

    @property
    @pulumi.getter
    def parent(self) -> Optional[str]:
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="rootDocId")
    def root_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "root_doc_id")


@pulumi.output_type
class GetWorkspaceProjectsProjectSummaryCollectionItemRegistryMetadataResult(dict):
    def __init__(__self__, *,
                 aggregator_key: Optional[str] = None,
                 is_favorite: Optional[bool] = None,
                 key: Optional[str] = None,
                 labels: Optional[Sequence[str]] = None,
                 registry_version: Optional[int] = None):
        if aggregator_key is not None:
            pulumi.set(__self__, "aggregator_key", aggregator_key)
        if is_favorite is not None:
            pulumi.set(__self__, "is_favorite", is_favorite)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if registry_version is not None:
            pulumi.set(__self__, "registry_version", registry_version)

    @property
    @pulumi.getter(name="aggregatorKey")
    def aggregator_key(self) -> Optional[str]:
        return pulumi.get(self, "aggregator_key")

    @property
    @pulumi.getter(name="isFavorite")
    def is_favorite(self) -> Optional[bool]:
        return pulumi.get(self, "is_favorite")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="registryVersion")
    def registry_version(self) -> Optional[int]:
        return pulumi.get(self, "registry_version")


@pulumi.output_type
class GetWorkspacesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetWorkspacesWorkspaceResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 dns_server_ip: Optional[str] = None,
                 dns_server_zone: Optional[str] = None,
                 endpoint_compartment_id: Optional[str] = None,
                 endpoint_id: Optional[str] = None,
                 endpoint_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_force_operation: Optional[bool] = None,
                 is_private_network_enabled: Optional[bool] = None,
                 quiesce_timeout: Optional[int] = None,
                 registry_compartment_id: Optional[str] = None,
                 registry_id: Optional[str] = None,
                 registry_name: Optional[str] = None,
                 state: Optional[str] = None,
                 state_message: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dns_server_ip is not None:
            pulumi.set(__self__, "dns_server_ip", dns_server_ip)
        if dns_server_zone is not None:
            pulumi.set(__self__, "dns_server_zone", dns_server_zone)
        if endpoint_compartment_id is not None:
            pulumi.set(__self__, "endpoint_compartment_id", endpoint_compartment_id)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if endpoint_name is not None:
            pulumi.set(__self__, "endpoint_name", endpoint_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_force_operation is not None:
            pulumi.set(__self__, "is_force_operation", is_force_operation)
        if is_private_network_enabled is not None:
            pulumi.set(__self__, "is_private_network_enabled", is_private_network_enabled)
        if quiesce_timeout is not None:
            pulumi.set(__self__, "quiesce_timeout", quiesce_timeout)
        if registry_compartment_id is not None:
            pulumi.set(__self__, "registry_compartment_id", registry_compartment_id)
        if registry_id is not None:
            pulumi.set(__self__, "registry_id", registry_id)
        if registry_name is not None:
            pulumi.set(__self__, "registry_name", registry_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_message is not None:
            pulumi.set(__self__, "state_message", state_message)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dnsServerIp")
    def dns_server_ip(self) -> Optional[str]:
        return pulumi.get(self, "dns_server_ip")

    @property
    @pulumi.getter(name="dnsServerZone")
    def dns_server_zone(self) -> Optional[str]:
        return pulumi.get(self, "dns_server_zone")

    @property
    @pulumi.getter(name="endpointCompartmentId")
    def endpoint_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_compartment_id")

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_id")

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isForceOperation")
    def is_force_operation(self) -> Optional[bool]:
        return pulumi.get(self, "is_force_operation")

    @property
    @pulumi.getter(name="isPrivateNetworkEnabled")
    def is_private_network_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_private_network_enabled")

    @property
    @pulumi.getter(name="quiesceTimeout")
    def quiesce_timeout(self) -> Optional[int]:
        return pulumi.get(self, "quiesce_timeout")

    @property
    @pulumi.getter(name="registryCompartmentId")
    def registry_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "registry_compartment_id")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[str]:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> Optional[str]:
        return pulumi.get(self, "registry_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[str]:
        return pulumi.get(self, "state_message")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


