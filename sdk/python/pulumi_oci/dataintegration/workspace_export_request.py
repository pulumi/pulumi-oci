# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkspaceExportRequestArgs', 'WorkspaceExportRequest']

@pulumi.input_type
class WorkspaceExportRequestArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 workspace_id: pulumi.Input[str],
                 are_references_included: Optional[pulumi.Input[bool]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_object_overwrite_enabled: Optional[pulumi.Input[bool]] = None,
                 object_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 object_storage_region: Optional[pulumi.Input[str]] = None,
                 object_storage_tenancy_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkspaceExportRequest resource.
        :param pulumi.Input[str] bucket: Name of the Object Storage bucket where the object will be exported.
        :param pulumi.Input[str] workspace_id: The workspace ID.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[bool] are_references_included: This field controls if the references will be exported along with the objects
        :param pulumi.Input[str] file_name: Name of the exported zip file.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Filters for exported objects
        :param pulumi.Input[bool] is_object_overwrite_enabled: Flag to control whether to overwrite the object if it is already present at the provided object storage location.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] object_keys: Field is used to specify which object keys to export
        :param pulumi.Input[str] object_storage_region: Region of the object storage (if using object storage of different region)
        :param pulumi.Input[str] object_storage_tenancy_id: Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        """
        WorkspaceExportRequestArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            workspace_id=workspace_id,
            are_references_included=are_references_included,
            file_name=file_name,
            filters=filters,
            is_object_overwrite_enabled=is_object_overwrite_enabled,
            object_keys=object_keys,
            object_storage_region=object_storage_region,
            object_storage_tenancy_id=object_storage_tenancy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             workspace_id: pulumi.Input[str],
             are_references_included: Optional[pulumi.Input[bool]] = None,
             file_name: Optional[pulumi.Input[str]] = None,
             filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             is_object_overwrite_enabled: Optional[pulumi.Input[bool]] = None,
             object_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             object_storage_region: Optional[pulumi.Input[str]] = None,
             object_storage_tenancy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']
        if 'areReferencesIncluded' in kwargs:
            are_references_included = kwargs['areReferencesIncluded']
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']
        if 'isObjectOverwriteEnabled' in kwargs:
            is_object_overwrite_enabled = kwargs['isObjectOverwriteEnabled']
        if 'objectKeys' in kwargs:
            object_keys = kwargs['objectKeys']
        if 'objectStorageRegion' in kwargs:
            object_storage_region = kwargs['objectStorageRegion']
        if 'objectStorageTenancyId' in kwargs:
            object_storage_tenancy_id = kwargs['objectStorageTenancyId']

        _setter("bucket", bucket)
        _setter("workspace_id", workspace_id)
        if are_references_included is not None:
            _setter("are_references_included", are_references_included)
        if file_name is not None:
            _setter("file_name", file_name)
        if filters is not None:
            _setter("filters", filters)
        if is_object_overwrite_enabled is not None:
            _setter("is_object_overwrite_enabled", is_object_overwrite_enabled)
        if object_keys is not None:
            _setter("object_keys", object_keys)
        if object_storage_region is not None:
            _setter("object_storage_region", object_storage_region)
        if object_storage_tenancy_id is not None:
            _setter("object_storage_tenancy_id", object_storage_tenancy_id)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Name of the Object Storage bucket where the object will be exported.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        """
        The workspace ID.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter(name="areReferencesIncluded")
    def are_references_included(self) -> Optional[pulumi.Input[bool]]:
        """
        This field controls if the references will be exported along with the objects
        """
        return pulumi.get(self, "are_references_included")

    @are_references_included.setter
    def are_references_included(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_references_included", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the exported zip file.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Filters for exported objects
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="isObjectOverwriteEnabled")
    def is_object_overwrite_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to control whether to overwrite the object if it is already present at the provided object storage location.
        """
        return pulumi.get(self, "is_object_overwrite_enabled")

    @is_object_overwrite_enabled.setter
    def is_object_overwrite_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_object_overwrite_enabled", value)

    @property
    @pulumi.getter(name="objectKeys")
    def object_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Field is used to specify which object keys to export
        """
        return pulumi.get(self, "object_keys")

    @object_keys.setter
    def object_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "object_keys", value)

    @property
    @pulumi.getter(name="objectStorageRegion")
    def object_storage_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the object storage (if using object storage of different region)
        """
        return pulumi.get(self, "object_storage_region")

    @object_storage_region.setter
    def object_storage_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_storage_region", value)

    @property
    @pulumi.getter(name="objectStorageTenancyId")
    def object_storage_tenancy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        """
        return pulumi.get(self, "object_storage_tenancy_id")

    @object_storage_tenancy_id.setter
    def object_storage_tenancy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_storage_tenancy_id", value)


@pulumi.input_type
class _WorkspaceExportRequestState:
    def __init__(__self__, *,
                 are_references_included: Optional[pulumi.Input[bool]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 error_messages: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 exported_items: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceExportRequestExportedItemArgs']]]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_object_overwrite_enabled: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 object_storage_region: Optional[pulumi.Input[str]] = None,
                 object_storage_tenancy_id: Optional[pulumi.Input[str]] = None,
                 referenced_items: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 time_ended_in_millis: Optional[pulumi.Input[str]] = None,
                 time_started_in_millis: Optional[pulumi.Input[str]] = None,
                 total_exported_object_count: Optional[pulumi.Input[int]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkspaceExportRequest resources.
        :param pulumi.Input[bool] are_references_included: This field controls if the references will be exported along with the objects
        :param pulumi.Input[str] bucket: Name of the Object Storage bucket where the object will be exported.
        :param pulumi.Input[str] created_by: Name of the user who initiated export request.
        :param pulumi.Input[Mapping[str, Any]] error_messages: Contains key of the error
        :param pulumi.Input[Sequence[pulumi.Input['WorkspaceExportRequestExportedItemArgs']]] exported_items: The array of exported object details.
        :param pulumi.Input[str] file_name: Name of the exported zip file.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Filters for exported objects
        :param pulumi.Input[bool] is_object_overwrite_enabled: Flag to control whether to overwrite the object if it is already present at the provided object storage location.
        :param pulumi.Input[str] key: Export object request key
        :param pulumi.Input[str] name: Name of the export request.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] object_keys: Field is used to specify which object keys to export
        :param pulumi.Input[str] object_storage_region: Region of the object storage (if using object storage of different region)
        :param pulumi.Input[str] object_storage_tenancy_id: Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        :param pulumi.Input[str] referenced_items: The array of exported referenced objects.
        :param pulumi.Input[str] status: Export Objects request status.
        :param pulumi.Input[str] time_ended_in_millis: Time at which the request was completely processed.
        :param pulumi.Input[str] time_started_in_millis: Time at which the request started getting processed.
        :param pulumi.Input[int] total_exported_object_count: Number of objects that are exported.
        :param pulumi.Input[str] workspace_id: The workspace ID.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        _WorkspaceExportRequestState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            are_references_included=are_references_included,
            bucket=bucket,
            created_by=created_by,
            error_messages=error_messages,
            exported_items=exported_items,
            file_name=file_name,
            filters=filters,
            is_object_overwrite_enabled=is_object_overwrite_enabled,
            key=key,
            name=name,
            object_keys=object_keys,
            object_storage_region=object_storage_region,
            object_storage_tenancy_id=object_storage_tenancy_id,
            referenced_items=referenced_items,
            status=status,
            time_ended_in_millis=time_ended_in_millis,
            time_started_in_millis=time_started_in_millis,
            total_exported_object_count=total_exported_object_count,
            workspace_id=workspace_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             are_references_included: Optional[pulumi.Input[bool]] = None,
             bucket: Optional[pulumi.Input[str]] = None,
             created_by: Optional[pulumi.Input[str]] = None,
             error_messages: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             exported_items: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceExportRequestExportedItemArgs']]]] = None,
             file_name: Optional[pulumi.Input[str]] = None,
             filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             is_object_overwrite_enabled: Optional[pulumi.Input[bool]] = None,
             key: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             object_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             object_storage_region: Optional[pulumi.Input[str]] = None,
             object_storage_tenancy_id: Optional[pulumi.Input[str]] = None,
             referenced_items: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             time_ended_in_millis: Optional[pulumi.Input[str]] = None,
             time_started_in_millis: Optional[pulumi.Input[str]] = None,
             total_exported_object_count: Optional[pulumi.Input[int]] = None,
             workspace_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'areReferencesIncluded' in kwargs:
            are_references_included = kwargs['areReferencesIncluded']
        if 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if 'errorMessages' in kwargs:
            error_messages = kwargs['errorMessages']
        if 'exportedItems' in kwargs:
            exported_items = kwargs['exportedItems']
        if 'fileName' in kwargs:
            file_name = kwargs['fileName']
        if 'isObjectOverwriteEnabled' in kwargs:
            is_object_overwrite_enabled = kwargs['isObjectOverwriteEnabled']
        if 'objectKeys' in kwargs:
            object_keys = kwargs['objectKeys']
        if 'objectStorageRegion' in kwargs:
            object_storage_region = kwargs['objectStorageRegion']
        if 'objectStorageTenancyId' in kwargs:
            object_storage_tenancy_id = kwargs['objectStorageTenancyId']
        if 'referencedItems' in kwargs:
            referenced_items = kwargs['referencedItems']
        if 'timeEndedInMillis' in kwargs:
            time_ended_in_millis = kwargs['timeEndedInMillis']
        if 'timeStartedInMillis' in kwargs:
            time_started_in_millis = kwargs['timeStartedInMillis']
        if 'totalExportedObjectCount' in kwargs:
            total_exported_object_count = kwargs['totalExportedObjectCount']
        if 'workspaceId' in kwargs:
            workspace_id = kwargs['workspaceId']

        if are_references_included is not None:
            _setter("are_references_included", are_references_included)
        if bucket is not None:
            _setter("bucket", bucket)
        if created_by is not None:
            _setter("created_by", created_by)
        if error_messages is not None:
            _setter("error_messages", error_messages)
        if exported_items is not None:
            _setter("exported_items", exported_items)
        if file_name is not None:
            _setter("file_name", file_name)
        if filters is not None:
            _setter("filters", filters)
        if is_object_overwrite_enabled is not None:
            _setter("is_object_overwrite_enabled", is_object_overwrite_enabled)
        if key is not None:
            _setter("key", key)
        if name is not None:
            _setter("name", name)
        if object_keys is not None:
            _setter("object_keys", object_keys)
        if object_storage_region is not None:
            _setter("object_storage_region", object_storage_region)
        if object_storage_tenancy_id is not None:
            _setter("object_storage_tenancy_id", object_storage_tenancy_id)
        if referenced_items is not None:
            _setter("referenced_items", referenced_items)
        if status is not None:
            _setter("status", status)
        if time_ended_in_millis is not None:
            _setter("time_ended_in_millis", time_ended_in_millis)
        if time_started_in_millis is not None:
            _setter("time_started_in_millis", time_started_in_millis)
        if total_exported_object_count is not None:
            _setter("total_exported_object_count", total_exported_object_count)
        if workspace_id is not None:
            _setter("workspace_id", workspace_id)

    @property
    @pulumi.getter(name="areReferencesIncluded")
    def are_references_included(self) -> Optional[pulumi.Input[bool]]:
        """
        This field controls if the references will be exported along with the objects
        """
        return pulumi.get(self, "are_references_included")

    @are_references_included.setter
    def are_references_included(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_references_included", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Object Storage bucket where the object will be exported.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the user who initiated export request.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="errorMessages")
    def error_messages(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Contains key of the error
        """
        return pulumi.get(self, "error_messages")

    @error_messages.setter
    def error_messages(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "error_messages", value)

    @property
    @pulumi.getter(name="exportedItems")
    def exported_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceExportRequestExportedItemArgs']]]]:
        """
        The array of exported object details.
        """
        return pulumi.get(self, "exported_items")

    @exported_items.setter
    def exported_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkspaceExportRequestExportedItemArgs']]]]):
        pulumi.set(self, "exported_items", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the exported zip file.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Filters for exported objects
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="isObjectOverwriteEnabled")
    def is_object_overwrite_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to control whether to overwrite the object if it is already present at the provided object storage location.
        """
        return pulumi.get(self, "is_object_overwrite_enabled")

    @is_object_overwrite_enabled.setter
    def is_object_overwrite_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_object_overwrite_enabled", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Export object request key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the export request.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectKeys")
    def object_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Field is used to specify which object keys to export
        """
        return pulumi.get(self, "object_keys")

    @object_keys.setter
    def object_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "object_keys", value)

    @property
    @pulumi.getter(name="objectStorageRegion")
    def object_storage_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the object storage (if using object storage of different region)
        """
        return pulumi.get(self, "object_storage_region")

    @object_storage_region.setter
    def object_storage_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_storage_region", value)

    @property
    @pulumi.getter(name="objectStorageTenancyId")
    def object_storage_tenancy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        """
        return pulumi.get(self, "object_storage_tenancy_id")

    @object_storage_tenancy_id.setter
    def object_storage_tenancy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_storage_tenancy_id", value)

    @property
    @pulumi.getter(name="referencedItems")
    def referenced_items(self) -> Optional[pulumi.Input[str]]:
        """
        The array of exported referenced objects.
        """
        return pulumi.get(self, "referenced_items")

    @referenced_items.setter
    def referenced_items(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referenced_items", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Export Objects request status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="timeEndedInMillis")
    def time_ended_in_millis(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the request was completely processed.
        """
        return pulumi.get(self, "time_ended_in_millis")

    @time_ended_in_millis.setter
    def time_ended_in_millis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_ended_in_millis", value)

    @property
    @pulumi.getter(name="timeStartedInMillis")
    def time_started_in_millis(self) -> Optional[pulumi.Input[str]]:
        """
        Time at which the request started getting processed.
        """
        return pulumi.get(self, "time_started_in_millis")

    @time_started_in_millis.setter
    def time_started_in_millis(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_started_in_millis", value)

    @property
    @pulumi.getter(name="totalExportedObjectCount")
    def total_exported_object_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of objects that are exported.
        """
        return pulumi.get(self, "total_exported_object_count")

    @total_exported_object_count.setter
    def total_exported_object_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_exported_object_count", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workspace ID.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_id", value)


class WorkspaceExportRequest(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 are_references_included: Optional[pulumi.Input[bool]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_object_overwrite_enabled: Optional[pulumi.Input[bool]] = None,
                 object_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 object_storage_region: Optional[pulumi.Input[str]] = None,
                 object_storage_tenancy_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Workspace Export Request resource in Oracle Cloud Infrastructure Data Integration service.

        Export Metadata Object

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_workspace_export_request = oci.data_integration.WorkspaceExportRequest("testWorkspaceExportRequest",
            bucket=var["workspace_export_request_bucket"],
            workspace_id=oci_dataintegration_workspace["test_workspace"]["id"],
            are_references_included=var["workspace_export_request_are_references_included"],
            file_name=var["workspace_export_request_file_name"],
            filters=var["workspace_export_request_filters"],
            is_object_overwrite_enabled=var["workspace_export_request_is_object_overwrite_enabled"],
            object_keys=var["workspace_export_request_object_keys"],
            object_storage_region=var["workspace_export_request_object_storage_region"],
            object_storage_tenancy_id=oci_identity_tenancy["test_tenancy"]["id"])
        ```

        ## Import

        WorkspaceExportRequests can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:DataIntegration/workspaceExportRequest:WorkspaceExportRequest test_workspace_export_request "workspaces/{workspaceId}/exportRequests/{exportRequestKey}"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] are_references_included: This field controls if the references will be exported along with the objects
        :param pulumi.Input[str] bucket: Name of the Object Storage bucket where the object will be exported.
        :param pulumi.Input[str] file_name: Name of the exported zip file.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Filters for exported objects
        :param pulumi.Input[bool] is_object_overwrite_enabled: Flag to control whether to overwrite the object if it is already present at the provided object storage location.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] object_keys: Field is used to specify which object keys to export
        :param pulumi.Input[str] object_storage_region: Region of the object storage (if using object storage of different region)
        :param pulumi.Input[str] object_storage_tenancy_id: Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        :param pulumi.Input[str] workspace_id: The workspace ID.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkspaceExportRequestArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Workspace Export Request resource in Oracle Cloud Infrastructure Data Integration service.

        Export Metadata Object

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_workspace_export_request = oci.data_integration.WorkspaceExportRequest("testWorkspaceExportRequest",
            bucket=var["workspace_export_request_bucket"],
            workspace_id=oci_dataintegration_workspace["test_workspace"]["id"],
            are_references_included=var["workspace_export_request_are_references_included"],
            file_name=var["workspace_export_request_file_name"],
            filters=var["workspace_export_request_filters"],
            is_object_overwrite_enabled=var["workspace_export_request_is_object_overwrite_enabled"],
            object_keys=var["workspace_export_request_object_keys"],
            object_storage_region=var["workspace_export_request_object_storage_region"],
            object_storage_tenancy_id=oci_identity_tenancy["test_tenancy"]["id"])
        ```

        ## Import

        WorkspaceExportRequests can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:DataIntegration/workspaceExportRequest:WorkspaceExportRequest test_workspace_export_request "workspaces/{workspaceId}/exportRequests/{exportRequestKey}"
        ```

        :param str resource_name: The name of the resource.
        :param WorkspaceExportRequestArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkspaceExportRequestArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            WorkspaceExportRequestArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 are_references_included: Optional[pulumi.Input[bool]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_object_overwrite_enabled: Optional[pulumi.Input[bool]] = None,
                 object_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 object_storage_region: Optional[pulumi.Input[str]] = None,
                 object_storage_tenancy_id: Optional[pulumi.Input[str]] = None,
                 workspace_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkspaceExportRequestArgs.__new__(WorkspaceExportRequestArgs)

            __props__.__dict__["are_references_included"] = are_references_included
            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["file_name"] = file_name
            __props__.__dict__["filters"] = filters
            __props__.__dict__["is_object_overwrite_enabled"] = is_object_overwrite_enabled
            __props__.__dict__["object_keys"] = object_keys
            __props__.__dict__["object_storage_region"] = object_storage_region
            __props__.__dict__["object_storage_tenancy_id"] = object_storage_tenancy_id
            if workspace_id is None and not opts.urn:
                raise TypeError("Missing required property 'workspace_id'")
            __props__.__dict__["workspace_id"] = workspace_id
            __props__.__dict__["created_by"] = None
            __props__.__dict__["error_messages"] = None
            __props__.__dict__["exported_items"] = None
            __props__.__dict__["key"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["referenced_items"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["time_ended_in_millis"] = None
            __props__.__dict__["time_started_in_millis"] = None
            __props__.__dict__["total_exported_object_count"] = None
        super(WorkspaceExportRequest, __self__).__init__(
            'oci:DataIntegration/workspaceExportRequest:WorkspaceExportRequest',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            are_references_included: Optional[pulumi.Input[bool]] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            error_messages: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            exported_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspaceExportRequestExportedItemArgs']]]]] = None,
            file_name: Optional[pulumi.Input[str]] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_object_overwrite_enabled: Optional[pulumi.Input[bool]] = None,
            key: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            object_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            object_storage_region: Optional[pulumi.Input[str]] = None,
            object_storage_tenancy_id: Optional[pulumi.Input[str]] = None,
            referenced_items: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            time_ended_in_millis: Optional[pulumi.Input[str]] = None,
            time_started_in_millis: Optional[pulumi.Input[str]] = None,
            total_exported_object_count: Optional[pulumi.Input[int]] = None,
            workspace_id: Optional[pulumi.Input[str]] = None) -> 'WorkspaceExportRequest':
        """
        Get an existing WorkspaceExportRequest resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] are_references_included: This field controls if the references will be exported along with the objects
        :param pulumi.Input[str] bucket: Name of the Object Storage bucket where the object will be exported.
        :param pulumi.Input[str] created_by: Name of the user who initiated export request.
        :param pulumi.Input[Mapping[str, Any]] error_messages: Contains key of the error
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkspaceExportRequestExportedItemArgs']]]] exported_items: The array of exported object details.
        :param pulumi.Input[str] file_name: Name of the exported zip file.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Filters for exported objects
        :param pulumi.Input[bool] is_object_overwrite_enabled: Flag to control whether to overwrite the object if it is already present at the provided object storage location.
        :param pulumi.Input[str] key: Export object request key
        :param pulumi.Input[str] name: Name of the export request.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] object_keys: Field is used to specify which object keys to export
        :param pulumi.Input[str] object_storage_region: Region of the object storage (if using object storage of different region)
        :param pulumi.Input[str] object_storage_tenancy_id: Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        :param pulumi.Input[str] referenced_items: The array of exported referenced objects.
        :param pulumi.Input[str] status: Export Objects request status.
        :param pulumi.Input[str] time_ended_in_millis: Time at which the request was completely processed.
        :param pulumi.Input[str] time_started_in_millis: Time at which the request started getting processed.
        :param pulumi.Input[int] total_exported_object_count: Number of objects that are exported.
        :param pulumi.Input[str] workspace_id: The workspace ID.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkspaceExportRequestState.__new__(_WorkspaceExportRequestState)

        __props__.__dict__["are_references_included"] = are_references_included
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["error_messages"] = error_messages
        __props__.__dict__["exported_items"] = exported_items
        __props__.__dict__["file_name"] = file_name
        __props__.__dict__["filters"] = filters
        __props__.__dict__["is_object_overwrite_enabled"] = is_object_overwrite_enabled
        __props__.__dict__["key"] = key
        __props__.__dict__["name"] = name
        __props__.__dict__["object_keys"] = object_keys
        __props__.__dict__["object_storage_region"] = object_storage_region
        __props__.__dict__["object_storage_tenancy_id"] = object_storage_tenancy_id
        __props__.__dict__["referenced_items"] = referenced_items
        __props__.__dict__["status"] = status
        __props__.__dict__["time_ended_in_millis"] = time_ended_in_millis
        __props__.__dict__["time_started_in_millis"] = time_started_in_millis
        __props__.__dict__["total_exported_object_count"] = total_exported_object_count
        __props__.__dict__["workspace_id"] = workspace_id
        return WorkspaceExportRequest(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="areReferencesIncluded")
    def are_references_included(self) -> pulumi.Output[bool]:
        """
        This field controls if the references will be exported along with the objects
        """
        return pulumi.get(self, "are_references_included")

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        Name of the Object Storage bucket where the object will be exported.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        """
        Name of the user who initiated export request.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="errorMessages")
    def error_messages(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Contains key of the error
        """
        return pulumi.get(self, "error_messages")

    @property
    @pulumi.getter(name="exportedItems")
    def exported_items(self) -> pulumi.Output[Sequence['outputs.WorkspaceExportRequestExportedItem']]:
        """
        The array of exported object details.
        """
        return pulumi.get(self, "exported_items")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Output[str]:
        """
        Name of the exported zip file.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Sequence[str]]:
        """
        Filters for exported objects
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="isObjectOverwriteEnabled")
    def is_object_overwrite_enabled(self) -> pulumi.Output[bool]:
        """
        Flag to control whether to overwrite the object if it is already present at the provided object storage location.
        """
        return pulumi.get(self, "is_object_overwrite_enabled")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        Export object request key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the export request.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectKeys")
    def object_keys(self) -> pulumi.Output[Sequence[str]]:
        """
        Field is used to specify which object keys to export
        """
        return pulumi.get(self, "object_keys")

    @property
    @pulumi.getter(name="objectStorageRegion")
    def object_storage_region(self) -> pulumi.Output[str]:
        """
        Region of the object storage (if using object storage of different region)
        """
        return pulumi.get(self, "object_storage_region")

    @property
    @pulumi.getter(name="objectStorageTenancyId")
    def object_storage_tenancy_id(self) -> pulumi.Output[str]:
        """
        Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
        """
        return pulumi.get(self, "object_storage_tenancy_id")

    @property
    @pulumi.getter(name="referencedItems")
    def referenced_items(self) -> pulumi.Output[str]:
        """
        The array of exported referenced objects.
        """
        return pulumi.get(self, "referenced_items")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Export Objects request status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeEndedInMillis")
    def time_ended_in_millis(self) -> pulumi.Output[str]:
        """
        Time at which the request was completely processed.
        """
        return pulumi.get(self, "time_ended_in_millis")

    @property
    @pulumi.getter(name="timeStartedInMillis")
    def time_started_in_millis(self) -> pulumi.Output[str]:
        """
        Time at which the request started getting processed.
        """
        return pulumi.get(self, "time_started_in_millis")

    @property
    @pulumi.getter(name="totalExportedObjectCount")
    def total_exported_object_count(self) -> pulumi.Output[int]:
        """
        Number of objects that are exported.
        """
        return pulumi.get(self, "total_exported_object_count")

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Output[str]:
        """
        The workspace ID.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "workspace_id")

