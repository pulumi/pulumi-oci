# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DatasetDatasetFormatDetailsArgs',
    'DatasetDatasetFormatDetailsTextFileTypeMetadataArgs',
    'DatasetDatasetSourceDetailsArgs',
    'DatasetInitialImportDatasetConfigurationArgs',
    'DatasetInitialImportDatasetConfigurationImportFormatArgs',
    'DatasetInitialImportDatasetConfigurationImportMetadataPathArgs',
    'DatasetInitialRecordGenerationConfigurationArgs',
    'DatasetLabelSetArgs',
    'DatasetLabelSetItemArgs',
    'GetAnnotationFormatsFilterArgs',
    'GetDatasetsFilterArgs',
]

@pulumi.input_type
class DatasetDatasetFormatDetailsArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 text_file_type_metadata: Optional[pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgs']] = None):
        """
        :param pulumi.Input[str] format_type: It defines the format type of text files.
        :param pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgs'] text_file_type_metadata: Metadata for files with text content.
        """
        DatasetDatasetFormatDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_type=format_type,
            text_file_type_metadata=text_file_type_metadata,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_type: pulumi.Input[str],
             text_file_type_metadata: Optional[pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'formatType' in kwargs:
            format_type = kwargs['formatType']
        if 'textFileTypeMetadata' in kwargs:
            text_file_type_metadata = kwargs['textFileTypeMetadata']

        _setter("format_type", format_type)
        if text_file_type_metadata is not None:
            _setter("text_file_type_metadata", text_file_type_metadata)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        """
        It defines the format type of text files.
        """
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="textFileTypeMetadata")
    def text_file_type_metadata(self) -> Optional[pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgs']]:
        """
        Metadata for files with text content.
        """
        return pulumi.get(self, "text_file_type_metadata")

    @text_file_type_metadata.setter
    def text_file_type_metadata(self, value: Optional[pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgs']]):
        pulumi.set(self, "text_file_type_metadata", value)


@pulumi.input_type
class DatasetDatasetFormatDetailsTextFileTypeMetadataArgs:
    def __init__(__self__, *,
                 column_index: pulumi.Input[int],
                 format_type: pulumi.Input[str],
                 column_delimiter: Optional[pulumi.Input[str]] = None,
                 column_name: Optional[pulumi.Input[str]] = None,
                 escape_character: Optional[pulumi.Input[str]] = None,
                 line_delimiter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] column_index: The index of a selected column. This is a zero-based index.
        :param pulumi.Input[str] format_type: It defines the format type of text files.
        :param pulumi.Input[str] column_delimiter: A column delimiter
        :param pulumi.Input[str] column_name: The name of a selected column.
        :param pulumi.Input[str] escape_character: An escape character.
        :param pulumi.Input[str] line_delimiter: A line delimiter.
        """
        DatasetDatasetFormatDetailsTextFileTypeMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_index=column_index,
            format_type=format_type,
            column_delimiter=column_delimiter,
            column_name=column_name,
            escape_character=escape_character,
            line_delimiter=line_delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_index: pulumi.Input[int],
             format_type: pulumi.Input[str],
             column_delimiter: Optional[pulumi.Input[str]] = None,
             column_name: Optional[pulumi.Input[str]] = None,
             escape_character: Optional[pulumi.Input[str]] = None,
             line_delimiter: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'columnIndex' in kwargs:
            column_index = kwargs['columnIndex']
        if 'formatType' in kwargs:
            format_type = kwargs['formatType']
        if 'columnDelimiter' in kwargs:
            column_delimiter = kwargs['columnDelimiter']
        if 'columnName' in kwargs:
            column_name = kwargs['columnName']
        if 'escapeCharacter' in kwargs:
            escape_character = kwargs['escapeCharacter']
        if 'lineDelimiter' in kwargs:
            line_delimiter = kwargs['lineDelimiter']

        _setter("column_index", column_index)
        _setter("format_type", format_type)
        if column_delimiter is not None:
            _setter("column_delimiter", column_delimiter)
        if column_name is not None:
            _setter("column_name", column_name)
        if escape_character is not None:
            _setter("escape_character", escape_character)
        if line_delimiter is not None:
            _setter("line_delimiter", line_delimiter)

    @property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> pulumi.Input[int]:
        """
        The index of a selected column. This is a zero-based index.
        """
        return pulumi.get(self, "column_index")

    @column_index.setter
    def column_index(self, value: pulumi.Input[int]):
        pulumi.set(self, "column_index", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        """
        It defines the format type of text files.
        """
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="columnDelimiter")
    def column_delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        A column delimiter
        """
        return pulumi.get(self, "column_delimiter")

    @column_delimiter.setter
    def column_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_delimiter", value)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a selected column.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="escapeCharacter")
    def escape_character(self) -> Optional[pulumi.Input[str]]:
        """
        An escape character.
        """
        return pulumi.get(self, "escape_character")

    @escape_character.setter
    def escape_character(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "escape_character", value)

    @property
    @pulumi.getter(name="lineDelimiter")
    def line_delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        A line delimiter.
        """
        return pulumi.get(self, "line_delimiter")

    @line_delimiter.setter
    def line_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_delimiter", value)


@pulumi.input_type
class DatasetDatasetSourceDetailsArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: Bucket name
        :param pulumi.Input[str] namespace: Bucket namespace name
        :param pulumi.Input[str] source_type: The type of data source. OBJECT_STORAGE - The source details for an object storage bucket.
        :param pulumi.Input[str] prefix: A common path prefix shared by the objects that make up the dataset. Except for the CSV file type, records are not generated for the objects whose names exactly match with the prefix.
        """
        DatasetDatasetSourceDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            source_type=source_type,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             namespace: pulumi.Input[str],
             source_type: pulumi.Input[str],
             prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sourceType' in kwargs:
            source_type = kwargs['sourceType']

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("source_type", source_type)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Bucket name
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Bucket namespace name
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        The type of data source. OBJECT_STORAGE - The source details for an object storage bucket.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        A common path prefix shared by the objects that make up the dataset. Except for the CSV file type, records are not generated for the objects whose names exactly match with the prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class DatasetInitialImportDatasetConfigurationArgs:
    def __init__(__self__, *,
                 import_format: pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgs'],
                 import_metadata_path: pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgs']):
        """
        :param pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgs'] import_format: File format details used for importing dataset
        :param pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgs'] import_metadata_path: Object storage path for the metadata file
        """
        DatasetInitialImportDatasetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            import_format=import_format,
            import_metadata_path=import_metadata_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             import_format: pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgs'],
             import_metadata_path: pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgs'],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'importFormat' in kwargs:
            import_format = kwargs['importFormat']
        if 'importMetadataPath' in kwargs:
            import_metadata_path = kwargs['importMetadataPath']

        _setter("import_format", import_format)
        _setter("import_metadata_path", import_metadata_path)

    @property
    @pulumi.getter(name="importFormat")
    def import_format(self) -> pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgs']:
        """
        File format details used for importing dataset
        """
        return pulumi.get(self, "import_format")

    @import_format.setter
    def import_format(self, value: pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgs']):
        pulumi.set(self, "import_format", value)

    @property
    @pulumi.getter(name="importMetadataPath")
    def import_metadata_path(self) -> pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgs']:
        """
        Object storage path for the metadata file
        """
        return pulumi.get(self, "import_metadata_path")

    @import_metadata_path.setter
    def import_metadata_path(self, value: pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgs']):
        pulumi.set(self, "import_metadata_path", value)


@pulumi.input_type
class DatasetInitialImportDatasetConfigurationImportFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: An unique name for a label within its dataset.
        :param pulumi.Input[str] version: Version of import format
        """
        DatasetInitialImportDatasetConfigurationImportFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        An unique name for a label within its dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of import format
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class DatasetInitialImportDatasetConfigurationImportMetadataPathArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 path: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] bucket: Bucket name
        :param pulumi.Input[str] namespace: Bucket namespace name
        :param pulumi.Input[str] path: Path for the metadata file.
        :param pulumi.Input[str] source_type: The type of data source. OBJECT_STORAGE - The source details for an object storage bucket.
        """
        DatasetInitialImportDatasetConfigurationImportMetadataPathArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            path=path,
            source_type=source_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             namespace: pulumi.Input[str],
             path: pulumi.Input[str],
             source_type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'sourceType' in kwargs:
            source_type = kwargs['sourceType']

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("path", path)
        _setter("source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Bucket name
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Bucket namespace name
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path for the metadata file.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        The type of data source. OBJECT_STORAGE - The source details for an object storage bucket.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class DatasetInitialRecordGenerationConfigurationArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        pass



@pulumi.input_type
class DatasetLabelSetArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgs']]] items: An ordered collection of labels that are unique by name.
        """
        DatasetLabelSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgs']]]:
        """
        An ordered collection of labels that are unique by name.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgs']]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DatasetLabelSetItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: An unique name for a label within its dataset.
        """
        DatasetLabelSetItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        An unique name for a label within its dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetAnnotationFormatsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A unique name for the target AnnotationFormat for the Dataset.
        """
        GetAnnotationFormatsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A unique name for the target AnnotationFormat for the Dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDatasetsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: An unique name for a label within its dataset.
        """
        GetDatasetsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             values: Sequence[str],
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        An unique name for a label within its dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


