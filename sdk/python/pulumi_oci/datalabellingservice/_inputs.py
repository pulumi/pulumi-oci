# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'DatasetDatasetFormatDetailsArgs',
    'DatasetDatasetFormatDetailsArgsDict',
    'DatasetDatasetFormatDetailsTextFileTypeMetadataArgs',
    'DatasetDatasetFormatDetailsTextFileTypeMetadataArgsDict',
    'DatasetDatasetSourceDetailsArgs',
    'DatasetDatasetSourceDetailsArgsDict',
    'DatasetInitialImportDatasetConfigurationArgs',
    'DatasetInitialImportDatasetConfigurationArgsDict',
    'DatasetInitialImportDatasetConfigurationImportFormatArgs',
    'DatasetInitialImportDatasetConfigurationImportFormatArgsDict',
    'DatasetInitialImportDatasetConfigurationImportMetadataPathArgs',
    'DatasetInitialImportDatasetConfigurationImportMetadataPathArgsDict',
    'DatasetInitialRecordGenerationConfigurationArgs',
    'DatasetInitialRecordGenerationConfigurationArgsDict',
    'DatasetLabelSetArgs',
    'DatasetLabelSetArgsDict',
    'DatasetLabelSetItemArgs',
    'DatasetLabelSetItemArgsDict',
    'GetAnnotationFormatsFilterArgs',
    'GetAnnotationFormatsFilterArgsDict',
    'GetDatasetsFilterArgs',
    'GetDatasetsFilterArgsDict',
]

MYPY = False

if not MYPY:
    class DatasetDatasetFormatDetailsArgsDict(TypedDict):
        format_type: pulumi.Input[_builtins.str]
        """
        The format type. DOCUMENT format is for record contents that are PDFs or TIFFs. IMAGE format is for record contents that are JPEGs or PNGs. TEXT format is for record contents that are TXT files.
        """
        text_file_type_metadata: NotRequired[pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgsDict']]
        """
        Metadata for files with text content.
        """
elif False:
    DatasetDatasetFormatDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetDatasetFormatDetailsArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[_builtins.str],
                 text_file_type_metadata: Optional[pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] format_type: The format type. DOCUMENT format is for record contents that are PDFs or TIFFs. IMAGE format is for record contents that are JPEGs or PNGs. TEXT format is for record contents that are TXT files.
        :param pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgs'] text_file_type_metadata: Metadata for files with text content.
        """
        pulumi.set(__self__, "format_type", format_type)
        if text_file_type_metadata is not None:
            pulumi.set(__self__, "text_file_type_metadata", text_file_type_metadata)

    @_builtins.property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[_builtins.str]:
        """
        The format type. DOCUMENT format is for record contents that are PDFs or TIFFs. IMAGE format is for record contents that are JPEGs or PNGs. TEXT format is for record contents that are TXT files.
        """
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "format_type", value)

    @_builtins.property
    @pulumi.getter(name="textFileTypeMetadata")
    def text_file_type_metadata(self) -> Optional[pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgs']]:
        """
        Metadata for files with text content.
        """
        return pulumi.get(self, "text_file_type_metadata")

    @text_file_type_metadata.setter
    def text_file_type_metadata(self, value: Optional[pulumi.Input['DatasetDatasetFormatDetailsTextFileTypeMetadataArgs']]):
        pulumi.set(self, "text_file_type_metadata", value)


if not MYPY:
    class DatasetDatasetFormatDetailsTextFileTypeMetadataArgsDict(TypedDict):
        column_index: pulumi.Input[_builtins.int]
        """
        The index of a selected column. This is a zero-based index.
        """
        format_type: pulumi.Input[_builtins.str]
        """
        It defines the format type of text files.
        """
        column_delimiter: NotRequired[pulumi.Input[_builtins.str]]
        """
        A column delimiter
        """
        column_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of a selected column.
        """
        escape_character: NotRequired[pulumi.Input[_builtins.str]]
        """
        An escape character.
        """
        line_delimiter: NotRequired[pulumi.Input[_builtins.str]]
        """
        A line delimiter.
        """
elif False:
    DatasetDatasetFormatDetailsTextFileTypeMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetDatasetFormatDetailsTextFileTypeMetadataArgs:
    def __init__(__self__, *,
                 column_index: pulumi.Input[_builtins.int],
                 format_type: pulumi.Input[_builtins.str],
                 column_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 column_name: Optional[pulumi.Input[_builtins.str]] = None,
                 escape_character: Optional[pulumi.Input[_builtins.str]] = None,
                 line_delimiter: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.int] column_index: The index of a selected column. This is a zero-based index.
        :param pulumi.Input[_builtins.str] format_type: It defines the format type of text files.
        :param pulumi.Input[_builtins.str] column_delimiter: A column delimiter
        :param pulumi.Input[_builtins.str] column_name: The name of a selected column.
        :param pulumi.Input[_builtins.str] escape_character: An escape character.
        :param pulumi.Input[_builtins.str] line_delimiter: A line delimiter.
        """
        pulumi.set(__self__, "column_index", column_index)
        pulumi.set(__self__, "format_type", format_type)
        if column_delimiter is not None:
            pulumi.set(__self__, "column_delimiter", column_delimiter)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if escape_character is not None:
            pulumi.set(__self__, "escape_character", escape_character)
        if line_delimiter is not None:
            pulumi.set(__self__, "line_delimiter", line_delimiter)

    @_builtins.property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> pulumi.Input[_builtins.int]:
        """
        The index of a selected column. This is a zero-based index.
        """
        return pulumi.get(self, "column_index")

    @column_index.setter
    def column_index(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "column_index", value)

    @_builtins.property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[_builtins.str]:
        """
        It defines the format type of text files.
        """
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "format_type", value)

    @_builtins.property
    @pulumi.getter(name="columnDelimiter")
    def column_delimiter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A column delimiter
        """
        return pulumi.get(self, "column_delimiter")

    @column_delimiter.setter
    def column_delimiter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "column_delimiter", value)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of a selected column.
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "column_name", value)

    @_builtins.property
    @pulumi.getter(name="escapeCharacter")
    def escape_character(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        An escape character.
        """
        return pulumi.get(self, "escape_character")

    @escape_character.setter
    def escape_character(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "escape_character", value)

    @_builtins.property
    @pulumi.getter(name="lineDelimiter")
    def line_delimiter(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A line delimiter.
        """
        return pulumi.get(self, "line_delimiter")

    @line_delimiter.setter
    def line_delimiter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "line_delimiter", value)


if not MYPY:
    class DatasetDatasetSourceDetailsArgsDict(TypedDict):
        bucket: pulumi.Input[_builtins.str]
        """
        The object storage bucket that contains the dataset data source.
        """
        namespace: pulumi.Input[_builtins.str]
        """
        The namespace of the bucket that contains the dataset data source.
        """
        source_type: pulumi.Input[_builtins.str]
        """
        The source type. OBJECT_STORAGE allows the user to describe where in object storage the dataset is.
        """
        prefix: NotRequired[pulumi.Input[_builtins.str]]
        """
        A common path prefix shared by the objects that make up the dataset. Except for the CSV file type, records are not generated for the objects whose names exactly match with the prefix.
        """
elif False:
    DatasetDatasetSourceDetailsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetDatasetSourceDetailsArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 source_type: pulumi.Input[_builtins.str],
                 prefix: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] bucket: The object storage bucket that contains the dataset data source.
        :param pulumi.Input[_builtins.str] namespace: The namespace of the bucket that contains the dataset data source.
        :param pulumi.Input[_builtins.str] source_type: The source type. OBJECT_STORAGE allows the user to describe where in object storage the dataset is.
        :param pulumi.Input[_builtins.str] prefix: A common path prefix shared by the objects that make up the dataset. Except for the CSV file type, records are not generated for the objects whose names exactly match with the prefix.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "source_type", source_type)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        The object storage bucket that contains the dataset data source.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        The namespace of the bucket that contains the dataset data source.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.str]:
        """
        The source type. OBJECT_STORAGE allows the user to describe where in object storage the dataset is.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_type", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A common path prefix shared by the objects that make up the dataset. Except for the CSV file type, records are not generated for the objects whose names exactly match with the prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class DatasetInitialImportDatasetConfigurationArgsDict(TypedDict):
        import_format: pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgsDict']
        """
        File format details used for importing dataset
        """
        import_metadata_path: pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgsDict']
        """
        Object storage path for the metadata file
        """
elif False:
    DatasetInitialImportDatasetConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetInitialImportDatasetConfigurationArgs:
    def __init__(__self__, *,
                 import_format: pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgs'],
                 import_metadata_path: pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgs']):
        """
        :param pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgs'] import_format: File format details used for importing dataset
        :param pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgs'] import_metadata_path: Object storage path for the metadata file
        """
        pulumi.set(__self__, "import_format", import_format)
        pulumi.set(__self__, "import_metadata_path", import_metadata_path)

    @_builtins.property
    @pulumi.getter(name="importFormat")
    def import_format(self) -> pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgs']:
        """
        File format details used for importing dataset
        """
        return pulumi.get(self, "import_format")

    @import_format.setter
    def import_format(self, value: pulumi.Input['DatasetInitialImportDatasetConfigurationImportFormatArgs']):
        pulumi.set(self, "import_format", value)

    @_builtins.property
    @pulumi.getter(name="importMetadataPath")
    def import_metadata_path(self) -> pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgs']:
        """
        Object storage path for the metadata file
        """
        return pulumi.get(self, "import_metadata_path")

    @import_metadata_path.setter
    def import_metadata_path(self, value: pulumi.Input['DatasetInitialImportDatasetConfigurationImportMetadataPathArgs']):
        pulumi.set(self, "import_metadata_path", value)


if not MYPY:
    class DatasetInitialImportDatasetConfigurationImportFormatArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Name of import format
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Version of import format
        """
elif False:
    DatasetInitialImportDatasetConfigurationImportFormatArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetInitialImportDatasetConfigurationImportFormatArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Name of import format
        :param pulumi.Input[_builtins.str] version: Version of import format
        """
        pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Name of import format
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Version of import format
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class DatasetInitialImportDatasetConfigurationImportMetadataPathArgsDict(TypedDict):
        bucket: pulumi.Input[_builtins.str]
        """
        Bucket name
        """
        namespace: pulumi.Input[_builtins.str]
        """
        Bucket namespace name
        """
        path: pulumi.Input[_builtins.str]
        """
        Path for the metadata file.
        """
        source_type: pulumi.Input[_builtins.str]
        """
        The type of data source. OBJECT_STORAGE - The source details for an object storage bucket.
        """
elif False:
    DatasetInitialImportDatasetConfigurationImportMetadataPathArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetInitialImportDatasetConfigurationImportMetadataPathArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 path: pulumi.Input[_builtins.str],
                 source_type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] bucket: Bucket name
        :param pulumi.Input[_builtins.str] namespace: Bucket namespace name
        :param pulumi.Input[_builtins.str] path: Path for the metadata file.
        :param pulumi.Input[_builtins.str] source_type: The type of data source. OBJECT_STORAGE - The source details for an object storage bucket.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "source_type", source_type)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        Bucket name
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        """
        Bucket namespace name
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        Path for the metadata file.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of data source. OBJECT_STORAGE - The source details for an object storage bucket.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_type", value)


if not MYPY:
    class DatasetInitialRecordGenerationConfigurationArgsDict(TypedDict):
        pass
elif False:
    DatasetInitialRecordGenerationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetInitialRecordGenerationConfigurationArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class DatasetLabelSetArgsDict(TypedDict):
        items: pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgsDict']]]
        """
        An ordered collection of labels that are unique by name.
        """
elif False:
    DatasetLabelSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetLabelSetArgs:
    def __init__(__self__, *,
                 items: pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgs']]] items: An ordered collection of labels that are unique by name.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgs']]]:
        """
        An ordered collection of labels that are unique by name.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: pulumi.Input[Sequence[pulumi.Input['DatasetLabelSetItemArgs']]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class DatasetLabelSetItemArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        An unique name for a label within its dataset.
        """
elif False:
    DatasetLabelSetItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatasetLabelSetItemArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] name: An unique name for a label within its dataset.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        An unique name for a label within its dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class GetAnnotationFormatsFilterArgsDict(TypedDict):
        name: _builtins.str
        """
        A unique name for the target AnnotationFormat for the Dataset.
        """
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetAnnotationFormatsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAnnotationFormatsFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: A unique name for the target AnnotationFormat for the Dataset.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        A unique name for the target AnnotationFormat for the Dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


if not MYPY:
    class GetDatasetsFilterArgsDict(TypedDict):
        name: _builtins.str
        """
        An unique name for a label within its dataset.
        """
        values: Sequence[_builtins.str]
        regex: NotRequired[_builtins.bool]
elif False:
    GetDatasetsFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDatasetsFilterArgs:
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: An unique name for a label within its dataset.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        An unique name for a label within its dataset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: _builtins.str):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[_builtins.str]):
        pulumi.set(self, "values", value)

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "regex", value)


