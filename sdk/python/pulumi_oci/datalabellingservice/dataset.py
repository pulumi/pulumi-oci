# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatasetArgs', 'Dataset']

@pulumi.input_type
class DatasetArgs:
    def __init__(__self__, *,
                 annotation_format: pulumi.Input[str],
                 compartment_id: pulumi.Input[str],
                 dataset_format_details: pulumi.Input['DatasetDatasetFormatDetailsArgs'],
                 dataset_source_details: pulumi.Input['DatasetDatasetSourceDetailsArgs'],
                 label_set: pulumi.Input['DatasetLabelSetArgs'],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 initial_import_dataset_configuration: Optional[pulumi.Input['DatasetInitialImportDatasetConfigurationArgs']] = None,
                 initial_record_generation_configuration: Optional[pulumi.Input['DatasetInitialRecordGenerationConfigurationArgs']] = None,
                 labeling_instructions: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Dataset resource.
        """
        pulumi.set(__self__, "annotation_format", annotation_format)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "dataset_format_details", dataset_format_details)
        pulumi.set(__self__, "dataset_source_details", dataset_source_details)
        pulumi.set(__self__, "label_set", label_set)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if initial_import_dataset_configuration is not None:
            pulumi.set(__self__, "initial_import_dataset_configuration", initial_import_dataset_configuration)
        if initial_record_generation_configuration is not None:
            pulumi.set(__self__, "initial_record_generation_configuration", initial_record_generation_configuration)
        if labeling_instructions is not None:
            pulumi.set(__self__, "labeling_instructions", labeling_instructions)

    @property
    @pulumi.getter(name="annotationFormat")
    def annotation_format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "annotation_format")

    @annotation_format.setter
    def annotation_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "annotation_format", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="datasetFormatDetails")
    def dataset_format_details(self) -> pulumi.Input['DatasetDatasetFormatDetailsArgs']:
        return pulumi.get(self, "dataset_format_details")

    @dataset_format_details.setter
    def dataset_format_details(self, value: pulumi.Input['DatasetDatasetFormatDetailsArgs']):
        pulumi.set(self, "dataset_format_details", value)

    @property
    @pulumi.getter(name="datasetSourceDetails")
    def dataset_source_details(self) -> pulumi.Input['DatasetDatasetSourceDetailsArgs']:
        return pulumi.get(self, "dataset_source_details")

    @dataset_source_details.setter
    def dataset_source_details(self, value: pulumi.Input['DatasetDatasetSourceDetailsArgs']):
        pulumi.set(self, "dataset_source_details", value)

    @property
    @pulumi.getter(name="labelSet")
    def label_set(self) -> pulumi.Input['DatasetLabelSetArgs']:
        return pulumi.get(self, "label_set")

    @label_set.setter
    def label_set(self, value: pulumi.Input['DatasetLabelSetArgs']):
        pulumi.set(self, "label_set", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="initialImportDatasetConfiguration")
    def initial_import_dataset_configuration(self) -> Optional[pulumi.Input['DatasetInitialImportDatasetConfigurationArgs']]:
        return pulumi.get(self, "initial_import_dataset_configuration")

    @initial_import_dataset_configuration.setter
    def initial_import_dataset_configuration(self, value: Optional[pulumi.Input['DatasetInitialImportDatasetConfigurationArgs']]):
        pulumi.set(self, "initial_import_dataset_configuration", value)

    @property
    @pulumi.getter(name="initialRecordGenerationConfiguration")
    def initial_record_generation_configuration(self) -> Optional[pulumi.Input['DatasetInitialRecordGenerationConfigurationArgs']]:
        return pulumi.get(self, "initial_record_generation_configuration")

    @initial_record_generation_configuration.setter
    def initial_record_generation_configuration(self, value: Optional[pulumi.Input['DatasetInitialRecordGenerationConfigurationArgs']]):
        pulumi.set(self, "initial_record_generation_configuration", value)

    @property
    @pulumi.getter(name="labelingInstructions")
    def labeling_instructions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "labeling_instructions")

    @labeling_instructions.setter
    def labeling_instructions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labeling_instructions", value)


@pulumi.input_type
class _DatasetState:
    def __init__(__self__, *,
                 additional_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 annotation_format: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 dataset_format_details: Optional[pulumi.Input['DatasetDatasetFormatDetailsArgs']] = None,
                 dataset_source_details: Optional[pulumi.Input['DatasetDatasetSourceDetailsArgs']] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 initial_import_dataset_configuration: Optional[pulumi.Input['DatasetInitialImportDatasetConfigurationArgs']] = None,
                 initial_record_generation_configuration: Optional[pulumi.Input['DatasetInitialRecordGenerationConfigurationArgs']] = None,
                 label_set: Optional[pulumi.Input['DatasetLabelSetArgs']] = None,
                 labeling_instructions: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 lifecycle_substate: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Dataset resources.
        """
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if annotation_format is not None:
            pulumi.set(__self__, "annotation_format", annotation_format)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dataset_format_details is not None:
            pulumi.set(__self__, "dataset_format_details", dataset_format_details)
        if dataset_source_details is not None:
            pulumi.set(__self__, "dataset_source_details", dataset_source_details)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if initial_import_dataset_configuration is not None:
            pulumi.set(__self__, "initial_import_dataset_configuration", initial_import_dataset_configuration)
        if initial_record_generation_configuration is not None:
            pulumi.set(__self__, "initial_record_generation_configuration", initial_record_generation_configuration)
        if label_set is not None:
            pulumi.set(__self__, "label_set", label_set)
        if labeling_instructions is not None:
            pulumi.set(__self__, "labeling_instructions", labeling_instructions)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if lifecycle_substate is not None:
            pulumi.set(__self__, "lifecycle_substate", lifecycle_substate)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="annotationFormat")
    def annotation_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "annotation_format")

    @annotation_format.setter
    def annotation_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "annotation_format", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="datasetFormatDetails")
    def dataset_format_details(self) -> Optional[pulumi.Input['DatasetDatasetFormatDetailsArgs']]:
        return pulumi.get(self, "dataset_format_details")

    @dataset_format_details.setter
    def dataset_format_details(self, value: Optional[pulumi.Input['DatasetDatasetFormatDetailsArgs']]):
        pulumi.set(self, "dataset_format_details", value)

    @property
    @pulumi.getter(name="datasetSourceDetails")
    def dataset_source_details(self) -> Optional[pulumi.Input['DatasetDatasetSourceDetailsArgs']]:
        return pulumi.get(self, "dataset_source_details")

    @dataset_source_details.setter
    def dataset_source_details(self, value: Optional[pulumi.Input['DatasetDatasetSourceDetailsArgs']]):
        pulumi.set(self, "dataset_source_details", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="initialImportDatasetConfiguration")
    def initial_import_dataset_configuration(self) -> Optional[pulumi.Input['DatasetInitialImportDatasetConfigurationArgs']]:
        return pulumi.get(self, "initial_import_dataset_configuration")

    @initial_import_dataset_configuration.setter
    def initial_import_dataset_configuration(self, value: Optional[pulumi.Input['DatasetInitialImportDatasetConfigurationArgs']]):
        pulumi.set(self, "initial_import_dataset_configuration", value)

    @property
    @pulumi.getter(name="initialRecordGenerationConfiguration")
    def initial_record_generation_configuration(self) -> Optional[pulumi.Input['DatasetInitialRecordGenerationConfigurationArgs']]:
        return pulumi.get(self, "initial_record_generation_configuration")

    @initial_record_generation_configuration.setter
    def initial_record_generation_configuration(self, value: Optional[pulumi.Input['DatasetInitialRecordGenerationConfigurationArgs']]):
        pulumi.set(self, "initial_record_generation_configuration", value)

    @property
    @pulumi.getter(name="labelSet")
    def label_set(self) -> Optional[pulumi.Input['DatasetLabelSetArgs']]:
        return pulumi.get(self, "label_set")

    @label_set.setter
    def label_set(self, value: Optional[pulumi.Input['DatasetLabelSetArgs']]):
        pulumi.set(self, "label_set", value)

    @property
    @pulumi.getter(name="labelingInstructions")
    def labeling_instructions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "labeling_instructions")

    @labeling_instructions.setter
    def labeling_instructions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labeling_instructions", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="lifecycleSubstate")
    def lifecycle_substate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_substate")

    @lifecycle_substate.setter
    def lifecycle_substate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_substate", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class Dataset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotation_format: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 dataset_format_details: Optional[pulumi.Input[pulumi.InputType['DatasetDatasetFormatDetailsArgs']]] = None,
                 dataset_source_details: Optional[pulumi.Input[pulumi.InputType['DatasetDatasetSourceDetailsArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 initial_import_dataset_configuration: Optional[pulumi.Input[pulumi.InputType['DatasetInitialImportDatasetConfigurationArgs']]] = None,
                 initial_record_generation_configuration: Optional[pulumi.Input[pulumi.InputType['DatasetInitialRecordGenerationConfigurationArgs']]] = None,
                 label_set: Optional[pulumi.Input[pulumi.InputType['DatasetLabelSetArgs']]] = None,
                 labeling_instructions: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Dataset resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatasetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Dataset resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DatasetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatasetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotation_format: Optional[pulumi.Input[str]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 dataset_format_details: Optional[pulumi.Input[pulumi.InputType['DatasetDatasetFormatDetailsArgs']]] = None,
                 dataset_source_details: Optional[pulumi.Input[pulumi.InputType['DatasetDatasetSourceDetailsArgs']]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 initial_import_dataset_configuration: Optional[pulumi.Input[pulumi.InputType['DatasetInitialImportDatasetConfigurationArgs']]] = None,
                 initial_record_generation_configuration: Optional[pulumi.Input[pulumi.InputType['DatasetInitialRecordGenerationConfigurationArgs']]] = None,
                 label_set: Optional[pulumi.Input[pulumi.InputType['DatasetLabelSetArgs']]] = None,
                 labeling_instructions: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatasetArgs.__new__(DatasetArgs)

            if annotation_format is None and not opts.urn:
                raise TypeError("Missing required property 'annotation_format'")
            __props__.__dict__["annotation_format"] = annotation_format
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            if dataset_format_details is None and not opts.urn:
                raise TypeError("Missing required property 'dataset_format_details'")
            __props__.__dict__["dataset_format_details"] = dataset_format_details
            if dataset_source_details is None and not opts.urn:
                raise TypeError("Missing required property 'dataset_source_details'")
            __props__.__dict__["dataset_source_details"] = dataset_source_details
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["initial_import_dataset_configuration"] = initial_import_dataset_configuration
            __props__.__dict__["initial_record_generation_configuration"] = initial_record_generation_configuration
            if label_set is None and not opts.urn:
                raise TypeError("Missing required property 'label_set'")
            __props__.__dict__["label_set"] = label_set
            __props__.__dict__["labeling_instructions"] = labeling_instructions
            __props__.__dict__["additional_properties"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["lifecycle_substate"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(Dataset, __self__).__init__(
            'oci:DataLabellingService/dataset:Dataset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_properties: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            annotation_format: Optional[pulumi.Input[str]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            dataset_format_details: Optional[pulumi.Input[pulumi.InputType['DatasetDatasetFormatDetailsArgs']]] = None,
            dataset_source_details: Optional[pulumi.Input[pulumi.InputType['DatasetDatasetSourceDetailsArgs']]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            initial_import_dataset_configuration: Optional[pulumi.Input[pulumi.InputType['DatasetInitialImportDatasetConfigurationArgs']]] = None,
            initial_record_generation_configuration: Optional[pulumi.Input[pulumi.InputType['DatasetInitialRecordGenerationConfigurationArgs']]] = None,
            label_set: Optional[pulumi.Input[pulumi.InputType['DatasetLabelSetArgs']]] = None,
            labeling_instructions: Optional[pulumi.Input[str]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            lifecycle_substate: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'Dataset':
        """
        Get an existing Dataset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatasetState.__new__(_DatasetState)

        __props__.__dict__["additional_properties"] = additional_properties
        __props__.__dict__["annotation_format"] = annotation_format
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["dataset_format_details"] = dataset_format_details
        __props__.__dict__["dataset_source_details"] = dataset_source_details
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["initial_import_dataset_configuration"] = initial_import_dataset_configuration
        __props__.__dict__["initial_record_generation_configuration"] = initial_record_generation_configuration
        __props__.__dict__["label_set"] = label_set
        __props__.__dict__["labeling_instructions"] = labeling_instructions
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["lifecycle_substate"] = lifecycle_substate
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return Dataset(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="annotationFormat")
    def annotation_format(self) -> pulumi.Output[str]:
        return pulumi.get(self, "annotation_format")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="datasetFormatDetails")
    def dataset_format_details(self) -> pulumi.Output['outputs.DatasetDatasetFormatDetails']:
        return pulumi.get(self, "dataset_format_details")

    @property
    @pulumi.getter(name="datasetSourceDetails")
    def dataset_source_details(self) -> pulumi.Output['outputs.DatasetDatasetSourceDetails']:
        return pulumi.get(self, "dataset_source_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="initialImportDatasetConfiguration")
    def initial_import_dataset_configuration(self) -> pulumi.Output[Optional['outputs.DatasetInitialImportDatasetConfiguration']]:
        return pulumi.get(self, "initial_import_dataset_configuration")

    @property
    @pulumi.getter(name="initialRecordGenerationConfiguration")
    def initial_record_generation_configuration(self) -> pulumi.Output[Optional['outputs.DatasetInitialRecordGenerationConfiguration']]:
        return pulumi.get(self, "initial_record_generation_configuration")

    @property
    @pulumi.getter(name="labelSet")
    def label_set(self) -> pulumi.Output['outputs.DatasetLabelSet']:
        return pulumi.get(self, "label_set")

    @property
    @pulumi.getter(name="labelingInstructions")
    def labeling_instructions(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "labeling_instructions")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleSubstate")
    def lifecycle_substate(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_substate")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

