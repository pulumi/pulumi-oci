# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DatasetDatasetFormatDetails',
    'DatasetDatasetFormatDetailsTextFileTypeMetadata',
    'DatasetDatasetSourceDetails',
    'DatasetInitialImportDatasetConfiguration',
    'DatasetInitialImportDatasetConfigurationImportFormat',
    'DatasetInitialImportDatasetConfigurationImportMetadataPath',
    'DatasetInitialRecordGenerationConfiguration',
    'DatasetLabelSet',
    'DatasetLabelSetItem',
    'GetAnnotationFormatItemResult',
    'GetAnnotationFormatsAnnotationFormatCollectionResult',
    'GetAnnotationFormatsAnnotationFormatCollectionItemResult',
    'GetAnnotationFormatsFilterResult',
    'GetDatasetDatasetFormatDetailResult',
    'GetDatasetDatasetFormatDetailTextFileTypeMetadataResult',
    'GetDatasetDatasetSourceDetailResult',
    'GetDatasetInitialImportDatasetConfigurationResult',
    'GetDatasetInitialImportDatasetConfigurationImportFormatResult',
    'GetDatasetInitialImportDatasetConfigurationImportMetadataPathResult',
    'GetDatasetInitialRecordGenerationConfigurationResult',
    'GetDatasetLabelSetResult',
    'GetDatasetLabelSetItemResult',
    'GetDatasetsDatasetCollectionResult',
    'GetDatasetsDatasetCollectionItemResult',
    'GetDatasetsDatasetCollectionItemDatasetFormatDetailResult',
    'GetDatasetsDatasetCollectionItemDatasetFormatDetailTextFileTypeMetadataResult',
    'GetDatasetsDatasetCollectionItemDatasetSourceDetailResult',
    'GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationResult',
    'GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportFormatResult',
    'GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportMetadataPathResult',
    'GetDatasetsDatasetCollectionItemInitialRecordGenerationConfigurationResult',
    'GetDatasetsDatasetCollectionItemLabelSetResult',
    'GetDatasetsDatasetCollectionItemLabelSetItemResult',
    'GetDatasetsFilterResult',
]

@pulumi.output_type
class DatasetDatasetFormatDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatType":
            suggest = "format_type"
        elif key == "textFileTypeMetadata":
            suggest = "text_file_type_metadata"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatasetDatasetFormatDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatasetDatasetFormatDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatasetDatasetFormatDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_type: str,
                 text_file_type_metadata: Optional['outputs.DatasetDatasetFormatDetailsTextFileTypeMetadata'] = None):
        pulumi.set(__self__, "format_type", format_type)
        if text_file_type_metadata is not None:
            pulumi.set(__self__, "text_file_type_metadata", text_file_type_metadata)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="textFileTypeMetadata")
    def text_file_type_metadata(self) -> Optional['outputs.DatasetDatasetFormatDetailsTextFileTypeMetadata']:
        return pulumi.get(self, "text_file_type_metadata")


@pulumi.output_type
class DatasetDatasetFormatDetailsTextFileTypeMetadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnIndex":
            suggest = "column_index"
        elif key == "formatType":
            suggest = "format_type"
        elif key == "columnDelimiter":
            suggest = "column_delimiter"
        elif key == "columnName":
            suggest = "column_name"
        elif key == "escapeCharacter":
            suggest = "escape_character"
        elif key == "lineDelimiter":
            suggest = "line_delimiter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatasetDatasetFormatDetailsTextFileTypeMetadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatasetDatasetFormatDetailsTextFileTypeMetadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatasetDatasetFormatDetailsTextFileTypeMetadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_index: int,
                 format_type: str,
                 column_delimiter: Optional[str] = None,
                 column_name: Optional[str] = None,
                 escape_character: Optional[str] = None,
                 line_delimiter: Optional[str] = None):
        pulumi.set(__self__, "column_index", column_index)
        pulumi.set(__self__, "format_type", format_type)
        if column_delimiter is not None:
            pulumi.set(__self__, "column_delimiter", column_delimiter)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if escape_character is not None:
            pulumi.set(__self__, "escape_character", escape_character)
        if line_delimiter is not None:
            pulumi.set(__self__, "line_delimiter", line_delimiter)

    @property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> int:
        return pulumi.get(self, "column_index")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> str:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="columnDelimiter")
    def column_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "column_delimiter")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="escapeCharacter")
    def escape_character(self) -> Optional[str]:
        return pulumi.get(self, "escape_character")

    @property
    @pulumi.getter(name="lineDelimiter")
    def line_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "line_delimiter")


@pulumi.output_type
class DatasetDatasetSourceDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatasetDatasetSourceDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatasetDatasetSourceDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatasetDatasetSourceDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 source_type: str,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "source_type", source_type)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class DatasetInitialImportDatasetConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "importFormat":
            suggest = "import_format"
        elif key == "importMetadataPath":
            suggest = "import_metadata_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatasetInitialImportDatasetConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatasetInitialImportDatasetConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatasetInitialImportDatasetConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 import_format: 'outputs.DatasetInitialImportDatasetConfigurationImportFormat',
                 import_metadata_path: 'outputs.DatasetInitialImportDatasetConfigurationImportMetadataPath'):
        pulumi.set(__self__, "import_format", import_format)
        pulumi.set(__self__, "import_metadata_path", import_metadata_path)

    @property
    @pulumi.getter(name="importFormat")
    def import_format(self) -> 'outputs.DatasetInitialImportDatasetConfigurationImportFormat':
        return pulumi.get(self, "import_format")

    @property
    @pulumi.getter(name="importMetadataPath")
    def import_metadata_path(self) -> 'outputs.DatasetInitialImportDatasetConfigurationImportMetadataPath':
        return pulumi.get(self, "import_metadata_path")


@pulumi.output_type
class DatasetInitialImportDatasetConfigurationImportFormat(dict):
    def __init__(__self__, *,
                 name: str,
                 version: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class DatasetInitialImportDatasetConfigurationImportMetadataPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatasetInitialImportDatasetConfigurationImportMetadataPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatasetInitialImportDatasetConfigurationImportMetadataPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatasetInitialImportDatasetConfigurationImportMetadataPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 path: str,
                 source_type: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class DatasetInitialRecordGenerationConfiguration(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatasetLabelSet(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DatasetLabelSetItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DatasetLabelSetItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DatasetLabelSetItem(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAnnotationFormatItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAnnotationFormatsAnnotationFormatCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAnnotationFormatsAnnotationFormatCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAnnotationFormatsAnnotationFormatCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAnnotationFormatsAnnotationFormatCollectionItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAnnotationFormatsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatasetDatasetFormatDetailResult(dict):
    def __init__(__self__, *,
                 format_type: Optional[str] = None,
                 text_file_type_metadatas: Optional[Sequence['outputs.GetDatasetDatasetFormatDetailTextFileTypeMetadataResult']] = None):
        if format_type is not None:
            pulumi.set(__self__, "format_type", format_type)
        if text_file_type_metadatas is not None:
            pulumi.set(__self__, "text_file_type_metadatas", text_file_type_metadatas)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> Optional[str]:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="textFileTypeMetadatas")
    def text_file_type_metadatas(self) -> Optional[Sequence['outputs.GetDatasetDatasetFormatDetailTextFileTypeMetadataResult']]:
        return pulumi.get(self, "text_file_type_metadatas")


@pulumi.output_type
class GetDatasetDatasetFormatDetailTextFileTypeMetadataResult(dict):
    def __init__(__self__, *,
                 column_delimiter: Optional[str] = None,
                 column_index: Optional[int] = None,
                 column_name: Optional[str] = None,
                 escape_character: Optional[str] = None,
                 format_type: Optional[str] = None,
                 line_delimiter: Optional[str] = None):
        if column_delimiter is not None:
            pulumi.set(__self__, "column_delimiter", column_delimiter)
        if column_index is not None:
            pulumi.set(__self__, "column_index", column_index)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if escape_character is not None:
            pulumi.set(__self__, "escape_character", escape_character)
        if format_type is not None:
            pulumi.set(__self__, "format_type", format_type)
        if line_delimiter is not None:
            pulumi.set(__self__, "line_delimiter", line_delimiter)

    @property
    @pulumi.getter(name="columnDelimiter")
    def column_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "column_delimiter")

    @property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> Optional[int]:
        return pulumi.get(self, "column_index")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="escapeCharacter")
    def escape_character(self) -> Optional[str]:
        return pulumi.get(self, "escape_character")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> Optional[str]:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="lineDelimiter")
    def line_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "line_delimiter")


@pulumi.output_type
class GetDatasetDatasetSourceDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 source_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetDatasetInitialImportDatasetConfigurationResult(dict):
    def __init__(__self__, *,
                 import_formats: Optional[Sequence['outputs.GetDatasetInitialImportDatasetConfigurationImportFormatResult']] = None,
                 import_metadata_paths: Optional[Sequence['outputs.GetDatasetInitialImportDatasetConfigurationImportMetadataPathResult']] = None):
        if import_formats is not None:
            pulumi.set(__self__, "import_formats", import_formats)
        if import_metadata_paths is not None:
            pulumi.set(__self__, "import_metadata_paths", import_metadata_paths)

    @property
    @pulumi.getter(name="importFormats")
    def import_formats(self) -> Optional[Sequence['outputs.GetDatasetInitialImportDatasetConfigurationImportFormatResult']]:
        return pulumi.get(self, "import_formats")

    @property
    @pulumi.getter(name="importMetadataPaths")
    def import_metadata_paths(self) -> Optional[Sequence['outputs.GetDatasetInitialImportDatasetConfigurationImportMetadataPathResult']]:
        return pulumi.get(self, "import_metadata_paths")


@pulumi.output_type
class GetDatasetInitialImportDatasetConfigurationImportFormatResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDatasetInitialImportDatasetConfigurationImportMetadataPathResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 path: Optional[str] = None,
                 source_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetDatasetInitialRecordGenerationConfigurationResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetDatasetLabelSetResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDatasetLabelSetItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDatasetLabelSetItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatasetLabelSetItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDatasetsDatasetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatasetsDatasetCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_properties: Optional[Mapping[str, Any]] = None,
                 annotation_format: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 dataset_format_details: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemDatasetFormatDetailResult']] = None,
                 dataset_source_details: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemDatasetSourceDetailResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 initial_import_dataset_configurations: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationResult']] = None,
                 initial_record_generation_configurations: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemInitialRecordGenerationConfigurationResult']] = None,
                 label_sets: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemLabelSetResult']] = None,
                 labeling_instructions: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 lifecycle_substate: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if annotation_format is not None:
            pulumi.set(__self__, "annotation_format", annotation_format)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if dataset_format_details is not None:
            pulumi.set(__self__, "dataset_format_details", dataset_format_details)
        if dataset_source_details is not None:
            pulumi.set(__self__, "dataset_source_details", dataset_source_details)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if initial_import_dataset_configurations is not None:
            pulumi.set(__self__, "initial_import_dataset_configurations", initial_import_dataset_configurations)
        if initial_record_generation_configurations is not None:
            pulumi.set(__self__, "initial_record_generation_configurations", initial_record_generation_configurations)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)
        if labeling_instructions is not None:
            pulumi.set(__self__, "labeling_instructions", labeling_instructions)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if lifecycle_substate is not None:
            pulumi.set(__self__, "lifecycle_substate", lifecycle_substate)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "additional_properties")

    @property
    @pulumi.getter(name="annotationFormat")
    def annotation_format(self) -> Optional[str]:
        return pulumi.get(self, "annotation_format")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="datasetFormatDetails")
    def dataset_format_details(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemDatasetFormatDetailResult']]:
        return pulumi.get(self, "dataset_format_details")

    @property
    @pulumi.getter(name="datasetSourceDetails")
    def dataset_source_details(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemDatasetSourceDetailResult']]:
        return pulumi.get(self, "dataset_source_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialImportDatasetConfigurations")
    def initial_import_dataset_configurations(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationResult']]:
        return pulumi.get(self, "initial_import_dataset_configurations")

    @property
    @pulumi.getter(name="initialRecordGenerationConfigurations")
    def initial_record_generation_configurations(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemInitialRecordGenerationConfigurationResult']]:
        return pulumi.get(self, "initial_record_generation_configurations")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemLabelSetResult']]:
        return pulumi.get(self, "label_sets")

    @property
    @pulumi.getter(name="labelingInstructions")
    def labeling_instructions(self) -> Optional[str]:
        return pulumi.get(self, "labeling_instructions")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleSubstate")
    def lifecycle_substate(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_substate")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDatasetsDatasetCollectionItemDatasetFormatDetailResult(dict):
    def __init__(__self__, *,
                 format_type: Optional[str] = None,
                 text_file_type_metadatas: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemDatasetFormatDetailTextFileTypeMetadataResult']] = None):
        if format_type is not None:
            pulumi.set(__self__, "format_type", format_type)
        if text_file_type_metadatas is not None:
            pulumi.set(__self__, "text_file_type_metadatas", text_file_type_metadatas)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> Optional[str]:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="textFileTypeMetadatas")
    def text_file_type_metadatas(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemDatasetFormatDetailTextFileTypeMetadataResult']]:
        return pulumi.get(self, "text_file_type_metadatas")


@pulumi.output_type
class GetDatasetsDatasetCollectionItemDatasetFormatDetailTextFileTypeMetadataResult(dict):
    def __init__(__self__, *,
                 column_delimiter: Optional[str] = None,
                 column_index: Optional[int] = None,
                 column_name: Optional[str] = None,
                 escape_character: Optional[str] = None,
                 format_type: Optional[str] = None,
                 line_delimiter: Optional[str] = None):
        if column_delimiter is not None:
            pulumi.set(__self__, "column_delimiter", column_delimiter)
        if column_index is not None:
            pulumi.set(__self__, "column_index", column_index)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if escape_character is not None:
            pulumi.set(__self__, "escape_character", escape_character)
        if format_type is not None:
            pulumi.set(__self__, "format_type", format_type)
        if line_delimiter is not None:
            pulumi.set(__self__, "line_delimiter", line_delimiter)

    @property
    @pulumi.getter(name="columnDelimiter")
    def column_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "column_delimiter")

    @property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> Optional[int]:
        return pulumi.get(self, "column_index")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="escapeCharacter")
    def escape_character(self) -> Optional[str]:
        return pulumi.get(self, "escape_character")

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> Optional[str]:
        return pulumi.get(self, "format_type")

    @property
    @pulumi.getter(name="lineDelimiter")
    def line_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "line_delimiter")


@pulumi.output_type
class GetDatasetsDatasetCollectionItemDatasetSourceDetailResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 source_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationResult(dict):
    def __init__(__self__, *,
                 import_formats: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportFormatResult']] = None,
                 import_metadata_paths: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportMetadataPathResult']] = None):
        if import_formats is not None:
            pulumi.set(__self__, "import_formats", import_formats)
        if import_metadata_paths is not None:
            pulumi.set(__self__, "import_metadata_paths", import_metadata_paths)

    @property
    @pulumi.getter(name="importFormats")
    def import_formats(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportFormatResult']]:
        return pulumi.get(self, "import_formats")

    @property
    @pulumi.getter(name="importMetadataPaths")
    def import_metadata_paths(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportMetadataPathResult']]:
        return pulumi.get(self, "import_metadata_paths")


@pulumi.output_type
class GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportFormatResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDatasetsDatasetCollectionItemInitialImportDatasetConfigurationImportMetadataPathResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 path: Optional[str] = None,
                 source_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class GetDatasetsDatasetCollectionItemInitialRecordGenerationConfigurationResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetDatasetsDatasetCollectionItemLabelSetResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemLabelSetItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDatasetsDatasetCollectionItemLabelSetItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatasetsDatasetCollectionItemLabelSetItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDatasetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


