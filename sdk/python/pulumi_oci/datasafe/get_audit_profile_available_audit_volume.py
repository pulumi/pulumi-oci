# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAuditProfileAvailableAuditVolumeResult',
    'AwaitableGetAuditProfileAvailableAuditVolumeResult',
    'get_audit_profile_available_audit_volume',
    'get_audit_profile_available_audit_volume_output',
]

@pulumi.output_type
class GetAuditProfileAvailableAuditVolumeResult:
    """
    A collection of values returned by getAuditProfileAvailableAuditVolume.
    """
    def __init__(__self__, audit_profile_id=None, id=None, items=None, month_in_consideration_greater_than=None, month_in_consideration_less_than=None, trail_location=None, work_request_id=None):
        if audit_profile_id and not isinstance(audit_profile_id, str):
            raise TypeError("Expected argument 'audit_profile_id' to be a str")
        pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if month_in_consideration_greater_than and not isinstance(month_in_consideration_greater_than, str):
            raise TypeError("Expected argument 'month_in_consideration_greater_than' to be a str")
        pulumi.set(__self__, "month_in_consideration_greater_than", month_in_consideration_greater_than)
        if month_in_consideration_less_than and not isinstance(month_in_consideration_less_than, str):
            raise TypeError("Expected argument 'month_in_consideration_less_than' to be a str")
        pulumi.set(__self__, "month_in_consideration_less_than", month_in_consideration_less_than)
        if trail_location and not isinstance(trail_location, str):
            raise TypeError("Expected argument 'trail_location' to be a str")
        pulumi.set(__self__, "trail_location", trail_location)
        if work_request_id and not isinstance(work_request_id, str):
            raise TypeError("Expected argument 'work_request_id' to be a str")
        pulumi.set(__self__, "work_request_id", work_request_id)

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> str:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditProfileAvailableAuditVolumeItemResult']]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="monthInConsiderationGreaterThan")
    def month_in_consideration_greater_than(self) -> Optional[str]:
        return pulumi.get(self, "month_in_consideration_greater_than")

    @property
    @pulumi.getter(name="monthInConsiderationLessThan")
    def month_in_consideration_less_than(self) -> Optional[str]:
        return pulumi.get(self, "month_in_consideration_less_than")

    @property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> Optional[str]:
        return pulumi.get(self, "trail_location")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> str:
        return pulumi.get(self, "work_request_id")


class AwaitableGetAuditProfileAvailableAuditVolumeResult(GetAuditProfileAvailableAuditVolumeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuditProfileAvailableAuditVolumeResult(
            audit_profile_id=self.audit_profile_id,
            id=self.id,
            items=self.items,
            month_in_consideration_greater_than=self.month_in_consideration_greater_than,
            month_in_consideration_less_than=self.month_in_consideration_less_than,
            trail_location=self.trail_location,
            work_request_id=self.work_request_id)


def get_audit_profile_available_audit_volume(audit_profile_id: Optional[str] = None,
                                             month_in_consideration_greater_than: Optional[str] = None,
                                             month_in_consideration_less_than: Optional[str] = None,
                                             trail_location: Optional[str] = None,
                                             work_request_id: Optional[str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuditProfileAvailableAuditVolumeResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['auditProfileId'] = audit_profile_id
    __args__['monthInConsiderationGreaterThan'] = month_in_consideration_greater_than
    __args__['monthInConsiderationLessThan'] = month_in_consideration_less_than
    __args__['trailLocation'] = trail_location
    __args__['workRequestId'] = work_request_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getAuditProfileAvailableAuditVolume:getAuditProfileAvailableAuditVolume', __args__, opts=opts, typ=GetAuditProfileAvailableAuditVolumeResult).value

    return AwaitableGetAuditProfileAvailableAuditVolumeResult(
        audit_profile_id=pulumi.get(__ret__, 'audit_profile_id'),
        id=pulumi.get(__ret__, 'id'),
        items=pulumi.get(__ret__, 'items'),
        month_in_consideration_greater_than=pulumi.get(__ret__, 'month_in_consideration_greater_than'),
        month_in_consideration_less_than=pulumi.get(__ret__, 'month_in_consideration_less_than'),
        trail_location=pulumi.get(__ret__, 'trail_location'),
        work_request_id=pulumi.get(__ret__, 'work_request_id'))


@_utilities.lift_output_func(get_audit_profile_available_audit_volume)
def get_audit_profile_available_audit_volume_output(audit_profile_id: Optional[pulumi.Input[str]] = None,
                                                    month_in_consideration_greater_than: Optional[pulumi.Input[Optional[str]]] = None,
                                                    month_in_consideration_less_than: Optional[pulumi.Input[Optional[str]]] = None,
                                                    trail_location: Optional[pulumi.Input[Optional[str]]] = None,
                                                    work_request_id: Optional[pulumi.Input[str]] = None,
                                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuditProfileAvailableAuditVolumeResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
