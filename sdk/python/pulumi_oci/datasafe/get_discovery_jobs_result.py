# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDiscoveryJobsResultResult',
    'AwaitableGetDiscoveryJobsResultResult',
    'get_discovery_jobs_result',
    'get_discovery_jobs_result_output',
]

@pulumi.output_type
class GetDiscoveryJobsResultResult:
    """
    A collection of values returned by getDiscoveryJobsResult.
    """
    def __init__(__self__, app_defined_child_column_keys=None, app_name=None, column_name=None, data_type=None, db_defined_child_column_keys=None, discovery_job_id=None, discovery_type=None, estimated_data_value_count=None, id=None, is_result_applied=None, key=None, modified_attributes=None, object=None, object_type=None, parent_column_keys=None, planned_action=None, relation_type=None, result_key=None, sample_data_values=None, schema_name=None, sensitive_columnkey=None, sensitive_type_id=None):
        if app_defined_child_column_keys and not isinstance(app_defined_child_column_keys, list):
            raise TypeError("Expected argument 'app_defined_child_column_keys' to be a list")
        pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        if app_name and not isinstance(app_name, str):
            raise TypeError("Expected argument 'app_name' to be a str")
        pulumi.set(__self__, "app_name", app_name)
        if column_name and not isinstance(column_name, str):
            raise TypeError("Expected argument 'column_name' to be a str")
        pulumi.set(__self__, "column_name", column_name)
        if data_type and not isinstance(data_type, str):
            raise TypeError("Expected argument 'data_type' to be a str")
        pulumi.set(__self__, "data_type", data_type)
        if db_defined_child_column_keys and not isinstance(db_defined_child_column_keys, list):
            raise TypeError("Expected argument 'db_defined_child_column_keys' to be a list")
        pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)
        if discovery_job_id and not isinstance(discovery_job_id, str):
            raise TypeError("Expected argument 'discovery_job_id' to be a str")
        pulumi.set(__self__, "discovery_job_id", discovery_job_id)
        if discovery_type and not isinstance(discovery_type, str):
            raise TypeError("Expected argument 'discovery_type' to be a str")
        pulumi.set(__self__, "discovery_type", discovery_type)
        if estimated_data_value_count and not isinstance(estimated_data_value_count, str):
            raise TypeError("Expected argument 'estimated_data_value_count' to be a str")
        pulumi.set(__self__, "estimated_data_value_count", estimated_data_value_count)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_result_applied and not isinstance(is_result_applied, bool):
            raise TypeError("Expected argument 'is_result_applied' to be a bool")
        pulumi.set(__self__, "is_result_applied", is_result_applied)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if modified_attributes and not isinstance(modified_attributes, list):
            raise TypeError("Expected argument 'modified_attributes' to be a list")
        pulumi.set(__self__, "modified_attributes", modified_attributes)
        if object and not isinstance(object, str):
            raise TypeError("Expected argument 'object' to be a str")
        pulumi.set(__self__, "object", object)
        if object_type and not isinstance(object_type, str):
            raise TypeError("Expected argument 'object_type' to be a str")
        pulumi.set(__self__, "object_type", object_type)
        if parent_column_keys and not isinstance(parent_column_keys, list):
            raise TypeError("Expected argument 'parent_column_keys' to be a list")
        pulumi.set(__self__, "parent_column_keys", parent_column_keys)
        if planned_action and not isinstance(planned_action, str):
            raise TypeError("Expected argument 'planned_action' to be a str")
        pulumi.set(__self__, "planned_action", planned_action)
        if relation_type and not isinstance(relation_type, str):
            raise TypeError("Expected argument 'relation_type' to be a str")
        pulumi.set(__self__, "relation_type", relation_type)
        if result_key and not isinstance(result_key, str):
            raise TypeError("Expected argument 'result_key' to be a str")
        pulumi.set(__self__, "result_key", result_key)
        if sample_data_values and not isinstance(sample_data_values, list):
            raise TypeError("Expected argument 'sample_data_values' to be a list")
        pulumi.set(__self__, "sample_data_values", sample_data_values)
        if schema_name and not isinstance(schema_name, str):
            raise TypeError("Expected argument 'schema_name' to be a str")
        pulumi.set(__self__, "schema_name", schema_name)
        if sensitive_columnkey and not isinstance(sensitive_columnkey, str):
            raise TypeError("Expected argument 'sensitive_columnkey' to be a str")
        pulumi.set(__self__, "sensitive_columnkey", sensitive_columnkey)
        if sensitive_type_id and not isinstance(sensitive_type_id, str):
            raise TypeError("Expected argument 'sensitive_type_id' to be a str")
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)

    @property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "app_defined_child_column_keys")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_defined_child_column_keys")

    @property
    @pulumi.getter(name="discoveryJobId")
    def discovery_job_id(self) -> str:
        return pulumi.get(self, "discovery_job_id")

    @property
    @pulumi.getter(name="discoveryType")
    def discovery_type(self) -> Optional[str]:
        warnings.warn("""The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""", DeprecationWarning)
        pulumi.log.warn("""discovery_type is deprecated: The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""")

        return pulumi.get(self, "discovery_type")

    @property
    @pulumi.getter(name="estimatedDataValueCount")
    def estimated_data_value_count(self) -> Optional[str]:
        return pulumi.get(self, "estimated_data_value_count")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isResultApplied")
    def is_result_applied(self) -> Optional[bool]:
        return pulumi.get(self, "is_result_applied")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        warnings.warn("""The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""", DeprecationWarning)
        pulumi.log.warn("""key is deprecated: The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""")

        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modifiedAttributes")
    def modified_attributes(self) -> Optional[Sequence['outputs.GetDiscoveryJobsResultModifiedAttributeResult']]:
        return pulumi.get(self, "modified_attributes")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="parentColumnKeys")
    def parent_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parent_column_keys")

    @property
    @pulumi.getter(name="plannedAction")
    def planned_action(self) -> Optional[str]:
        return pulumi.get(self, "planned_action")

    @property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> Optional[str]:
        return pulumi.get(self, "relation_type")

    @property
    @pulumi.getter(name="resultKey")
    def result_key(self) -> str:
        return pulumi.get(self, "result_key")

    @property
    @pulumi.getter(name="sampleDataValues")
    def sample_data_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sample_data_values")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sensitiveColumnkey")
    def sensitive_columnkey(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_columnkey")

    @property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_type_id")


class AwaitableGetDiscoveryJobsResultResult(GetDiscoveryJobsResultResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiscoveryJobsResultResult(
            app_defined_child_column_keys=self.app_defined_child_column_keys,
            app_name=self.app_name,
            column_name=self.column_name,
            data_type=self.data_type,
            db_defined_child_column_keys=self.db_defined_child_column_keys,
            discovery_job_id=self.discovery_job_id,
            discovery_type=self.discovery_type,
            estimated_data_value_count=self.estimated_data_value_count,
            id=self.id,
            is_result_applied=self.is_result_applied,
            key=self.key,
            modified_attributes=self.modified_attributes,
            object=self.object,
            object_type=self.object_type,
            parent_column_keys=self.parent_column_keys,
            planned_action=self.planned_action,
            relation_type=self.relation_type,
            result_key=self.result_key,
            sample_data_values=self.sample_data_values,
            schema_name=self.schema_name,
            sensitive_columnkey=self.sensitive_columnkey,
            sensitive_type_id=self.sensitive_type_id)


def get_discovery_jobs_result(discovery_job_id: Optional[str] = None,
                              result_key: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiscoveryJobsResultResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['discoveryJobId'] = discovery_job_id
    __args__['resultKey'] = result_key
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getDiscoveryJobsResult:getDiscoveryJobsResult', __args__, opts=opts, typ=GetDiscoveryJobsResultResult).value

    return AwaitableGetDiscoveryJobsResultResult(
        app_defined_child_column_keys=pulumi.get(__ret__, 'app_defined_child_column_keys'),
        app_name=pulumi.get(__ret__, 'app_name'),
        column_name=pulumi.get(__ret__, 'column_name'),
        data_type=pulumi.get(__ret__, 'data_type'),
        db_defined_child_column_keys=pulumi.get(__ret__, 'db_defined_child_column_keys'),
        discovery_job_id=pulumi.get(__ret__, 'discovery_job_id'),
        discovery_type=pulumi.get(__ret__, 'discovery_type'),
        estimated_data_value_count=pulumi.get(__ret__, 'estimated_data_value_count'),
        id=pulumi.get(__ret__, 'id'),
        is_result_applied=pulumi.get(__ret__, 'is_result_applied'),
        key=pulumi.get(__ret__, 'key'),
        modified_attributes=pulumi.get(__ret__, 'modified_attributes'),
        object=pulumi.get(__ret__, 'object'),
        object_type=pulumi.get(__ret__, 'object_type'),
        parent_column_keys=pulumi.get(__ret__, 'parent_column_keys'),
        planned_action=pulumi.get(__ret__, 'planned_action'),
        relation_type=pulumi.get(__ret__, 'relation_type'),
        result_key=pulumi.get(__ret__, 'result_key'),
        sample_data_values=pulumi.get(__ret__, 'sample_data_values'),
        schema_name=pulumi.get(__ret__, 'schema_name'),
        sensitive_columnkey=pulumi.get(__ret__, 'sensitive_columnkey'),
        sensitive_type_id=pulumi.get(__ret__, 'sensitive_type_id'))


@_utilities.lift_output_func(get_discovery_jobs_result)
def get_discovery_jobs_result_output(discovery_job_id: Optional[pulumi.Input[str]] = None,
                                     result_key: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDiscoveryJobsResultResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
