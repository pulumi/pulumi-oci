# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMaskingAnalyticsResult',
    'AwaitableGetMaskingAnalyticsResult',
    'get_masking_analytics',
    'get_masking_analytics_output',
]

@pulumi.output_type
class GetMaskingAnalyticsResult:
    """
    A collection of values returned by getMaskingAnalytics.
    """
    def __init__(__self__, compartment_id=None, compartment_id_in_subtree=None, filters=None, group_by=None, id=None, masking_analytics_collections=None, masking_policy_id=None, target_id=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_id_in_subtree and not isinstance(compartment_id_in_subtree, bool):
            raise TypeError("Expected argument 'compartment_id_in_subtree' to be a bool")
        pulumi.set(__self__, "compartment_id_in_subtree", compartment_id_in_subtree)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if group_by and not isinstance(group_by, str):
            raise TypeError("Expected argument 'group_by' to be a str")
        pulumi.set(__self__, "group_by", group_by)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if masking_analytics_collections and not isinstance(masking_analytics_collections, list):
            raise TypeError("Expected argument 'masking_analytics_collections' to be a list")
        pulumi.set(__self__, "masking_analytics_collections", masking_analytics_collections)
        if masking_policy_id and not isinstance(masking_policy_id, str):
            raise TypeError("Expected argument 'masking_policy_id' to be a str")
        pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        if target_id and not isinstance(target_id, str):
            raise TypeError("Expected argument 'target_id' to be a str")
        pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentIdInSubtree")
    def compartment_id_in_subtree(self) -> Optional[bool]:
        return pulumi.get(self, "compartment_id_in_subtree")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetMaskingAnalyticsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[str]:
        return pulumi.get(self, "group_by")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maskingAnalyticsCollections")
    def masking_analytics_collections(self) -> Optional[Sequence['outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionResult']]:
        return pulumi.get(self, "masking_analytics_collections")

    @property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "masking_policy_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


class AwaitableGetMaskingAnalyticsResult(GetMaskingAnalyticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMaskingAnalyticsResult(
            compartment_id=self.compartment_id,
            compartment_id_in_subtree=self.compartment_id_in_subtree,
            filters=self.filters,
            group_by=self.group_by,
            id=self.id,
            masking_analytics_collections=self.masking_analytics_collections,
            masking_policy_id=self.masking_policy_id,
            target_id=self.target_id)


def get_masking_analytics(compartment_id: Optional[str] = None,
                          compartment_id_in_subtree: Optional[bool] = None,
                          filters: Optional[Sequence[pulumi.InputType['GetMaskingAnalyticsFilterArgs']]] = None,
                          group_by: Optional[str] = None,
                          masking_policy_id: Optional[str] = None,
                          target_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMaskingAnalyticsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['compartmentIdInSubtree'] = compartment_id_in_subtree
    __args__['filters'] = filters
    __args__['groupBy'] = group_by
    __args__['maskingPolicyId'] = masking_policy_id
    __args__['targetId'] = target_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getMaskingAnalytics:getMaskingAnalytics', __args__, opts=opts, typ=GetMaskingAnalyticsResult).value

    return AwaitableGetMaskingAnalyticsResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compartment_id_in_subtree=pulumi.get(__ret__, 'compartment_id_in_subtree'),
        filters=pulumi.get(__ret__, 'filters'),
        group_by=pulumi.get(__ret__, 'group_by'),
        id=pulumi.get(__ret__, 'id'),
        masking_analytics_collections=pulumi.get(__ret__, 'masking_analytics_collections'),
        masking_policy_id=pulumi.get(__ret__, 'masking_policy_id'),
        target_id=pulumi.get(__ret__, 'target_id'))


@_utilities.lift_output_func(get_masking_analytics)
def get_masking_analytics_output(compartment_id: Optional[pulumi.Input[str]] = None,
                                 compartment_id_in_subtree: Optional[pulumi.Input[Optional[bool]]] = None,
                                 filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMaskingAnalyticsFilterArgs']]]]] = None,
                                 group_by: Optional[pulumi.Input[Optional[str]]] = None,
                                 masking_policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 target_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMaskingAnalyticsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
