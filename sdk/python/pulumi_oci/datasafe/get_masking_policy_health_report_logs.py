# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMaskingPolicyHealthReportLogsResult',
    'AwaitableGetMaskingPolicyHealthReportLogsResult',
    'get_masking_policy_health_report_logs',
    'get_masking_policy_health_report_logs_output',
]

@pulumi.output_type
class GetMaskingPolicyHealthReportLogsResult:
    """
    A collection of values returned by getMaskingPolicyHealthReportLogs.
    """
    def __init__(__self__, filters=None, id=None, masking_policy_health_report_id=None, masking_policy_health_report_log_collections=None, message_type=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if masking_policy_health_report_id and not isinstance(masking_policy_health_report_id, str):
            raise TypeError("Expected argument 'masking_policy_health_report_id' to be a str")
        pulumi.set(__self__, "masking_policy_health_report_id", masking_policy_health_report_id)
        if masking_policy_health_report_log_collections and not isinstance(masking_policy_health_report_log_collections, list):
            raise TypeError("Expected argument 'masking_policy_health_report_log_collections' to be a list")
        pulumi.set(__self__, "masking_policy_health_report_log_collections", masking_policy_health_report_log_collections)
        if message_type and not isinstance(message_type, str):
            raise TypeError("Expected argument 'message_type' to be a str")
        pulumi.set(__self__, "message_type", message_type)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetMaskingPolicyHealthReportLogsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maskingPolicyHealthReportId")
    def masking_policy_health_report_id(self) -> str:
        return pulumi.get(self, "masking_policy_health_report_id")

    @property
    @pulumi.getter(name="maskingPolicyHealthReportLogCollections")
    def masking_policy_health_report_log_collections(self) -> Sequence['outputs.GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionResult']:
        """
        The list of masking_policy_health_report_log_collection.
        """
        return pulumi.get(self, "masking_policy_health_report_log_collections")

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> Optional[str]:
        """
        The log entry type.
        """
        return pulumi.get(self, "message_type")


class AwaitableGetMaskingPolicyHealthReportLogsResult(GetMaskingPolicyHealthReportLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMaskingPolicyHealthReportLogsResult(
            filters=self.filters,
            id=self.id,
            masking_policy_health_report_id=self.masking_policy_health_report_id,
            masking_policy_health_report_log_collections=self.masking_policy_health_report_log_collections,
            message_type=self.message_type)


def get_masking_policy_health_report_logs(filters: Optional[Sequence[pulumi.InputType['GetMaskingPolicyHealthReportLogsFilterArgs']]] = None,
                                          masking_policy_health_report_id: Optional[str] = None,
                                          message_type: Optional[str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMaskingPolicyHealthReportLogsResult:
    """
    This data source provides the list of Masking Policy Health Report Logs in Oracle Cloud Infrastructure Data Safe service.

    Gets a list of errors and warnings from a masking policy health check.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_masking_policy_health_report_logs = oci.DataSafe.get_masking_policy_health_report_logs(masking_policy_health_report_id=test_masking_policy_health_report["id"],
        message_type=masking_policy_health_report_log_message_type)
    ```


    :param str masking_policy_health_report_id: The OCID of the masking health report.
    :param str message_type: A filter to return only the resources that match the specified log message type.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['maskingPolicyHealthReportId'] = masking_policy_health_report_id
    __args__['messageType'] = message_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getMaskingPolicyHealthReportLogs:getMaskingPolicyHealthReportLogs', __args__, opts=opts, typ=GetMaskingPolicyHealthReportLogsResult).value

    return AwaitableGetMaskingPolicyHealthReportLogsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        masking_policy_health_report_id=pulumi.get(__ret__, 'masking_policy_health_report_id'),
        masking_policy_health_report_log_collections=pulumi.get(__ret__, 'masking_policy_health_report_log_collections'),
        message_type=pulumi.get(__ret__, 'message_type'))


@_utilities.lift_output_func(get_masking_policy_health_report_logs)
def get_masking_policy_health_report_logs_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMaskingPolicyHealthReportLogsFilterArgs']]]]] = None,
                                                 masking_policy_health_report_id: Optional[pulumi.Input[str]] = None,
                                                 message_type: Optional[pulumi.Input[Optional[str]]] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMaskingPolicyHealthReportLogsResult]:
    """
    This data source provides the list of Masking Policy Health Report Logs in Oracle Cloud Infrastructure Data Safe service.

    Gets a list of errors and warnings from a masking policy health check.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_masking_policy_health_report_logs = oci.DataSafe.get_masking_policy_health_report_logs(masking_policy_health_report_id=test_masking_policy_health_report["id"],
        message_type=masking_policy_health_report_log_message_type)
    ```


    :param str masking_policy_health_report_id: The OCID of the masking health report.
    :param str message_type: A filter to return only the resources that match the specified log message type.
    """
    ...
