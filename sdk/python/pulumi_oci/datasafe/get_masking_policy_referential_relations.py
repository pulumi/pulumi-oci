# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMaskingPolicyReferentialRelationsResult',
    'AwaitableGetMaskingPolicyReferentialRelationsResult',
    'get_masking_policy_referential_relations',
    'get_masking_policy_referential_relations_output',
]

@pulumi.output_type
class GetMaskingPolicyReferentialRelationsResult:
    """
    A collection of values returned by getMaskingPolicyReferentialRelations.
    """
    def __init__(__self__, column_names=None, filters=None, id=None, masking_policy_id=None, masking_policy_referential_relation_collections=None, objects=None, relation_types=None, schema_names=None):
        if column_names and not isinstance(column_names, list):
            raise TypeError("Expected argument 'column_names' to be a list")
        pulumi.set(__self__, "column_names", column_names)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if masking_policy_id and not isinstance(masking_policy_id, str):
            raise TypeError("Expected argument 'masking_policy_id' to be a str")
        pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        if masking_policy_referential_relation_collections and not isinstance(masking_policy_referential_relation_collections, list):
            raise TypeError("Expected argument 'masking_policy_referential_relation_collections' to be a list")
        pulumi.set(__self__, "masking_policy_referential_relation_collections", masking_policy_referential_relation_collections)
        if objects and not isinstance(objects, list):
            raise TypeError("Expected argument 'objects' to be a list")
        pulumi.set(__self__, "objects", objects)
        if relation_types and not isinstance(relation_types, list):
            raise TypeError("Expected argument 'relation_types' to be a list")
        pulumi.set(__self__, "relation_types", relation_types)
        if schema_names and not isinstance(schema_names, list):
            raise TypeError("Expected argument 'schema_names' to be a list")
        pulumi.set(__self__, "schema_names", schema_names)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "column_names")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetMaskingPolicyReferentialRelationsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> str:
        """
        The OCID of the masking policy that contains the column.
        """
        return pulumi.get(self, "masking_policy_id")

    @property
    @pulumi.getter(name="maskingPolicyReferentialRelationCollections")
    def masking_policy_referential_relation_collections(self) -> Sequence['outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionResult']:
        """
        The list of masking_policy_referential_relation_collection.
        """
        return pulumi.get(self, "masking_policy_referential_relation_collections")

    @property
    @pulumi.getter
    def objects(self) -> Optional[Sequence[str]]:
        """
        The name of the object (table or editioning view) that contains the database column(s).
        """
        return pulumi.get(self, "objects")

    @property
    @pulumi.getter(name="relationTypes")
    def relation_types(self) -> Optional[Sequence[str]]:
        """
        The type of referential relationship the column has with its parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
        """
        return pulumi.get(self, "relation_types")

    @property
    @pulumi.getter(name="schemaNames")
    def schema_names(self) -> Optional[Sequence[str]]:
        """
        The name of the schema that contains the database column(s).
        """
        return pulumi.get(self, "schema_names")


class AwaitableGetMaskingPolicyReferentialRelationsResult(GetMaskingPolicyReferentialRelationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMaskingPolicyReferentialRelationsResult(
            column_names=self.column_names,
            filters=self.filters,
            id=self.id,
            masking_policy_id=self.masking_policy_id,
            masking_policy_referential_relation_collections=self.masking_policy_referential_relation_collections,
            objects=self.objects,
            relation_types=self.relation_types,
            schema_names=self.schema_names)


def get_masking_policy_referential_relations(column_names: Optional[Sequence[str]] = None,
                                             filters: Optional[Sequence[Union['GetMaskingPolicyReferentialRelationsFilterArgs', 'GetMaskingPolicyReferentialRelationsFilterArgsDict']]] = None,
                                             masking_policy_id: Optional[str] = None,
                                             objects: Optional[Sequence[str]] = None,
                                             relation_types: Optional[Sequence[str]] = None,
                                             schema_names: Optional[Sequence[str]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMaskingPolicyReferentialRelationsResult:
    """
    This data source provides the list of Masking Policy Referential Relations in Oracle Cloud Infrastructure Data Safe service.

    Gets a list of referential relations present in the specified masking policy based on the specified query parameters.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_masking_policy_referential_relations = oci.DataSafe.get_masking_policy_referential_relations(masking_policy_id=test_masking_policy["id"],
        column_names=masking_policy_referential_relation_column_name,
        objects=masking_policy_referential_relation_object,
        relation_types=masking_policy_referential_relation_relation_type,
        schema_names=masking_policy_referential_relation_schema_name)
    ```


    :param Sequence[str] column_names: A filter to return only a specific column based on column name.
    :param str masking_policy_id: The OCID of the masking policy.
    :param Sequence[str] objects: A filter to return only items related to a specific object name.
    :param Sequence[str] relation_types: A filter to return columns based on their relationship with their parent columns. If set to NONE, it returns the columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
    :param Sequence[str] schema_names: A filter to return only items related to specific schema name.
    """
    __args__ = dict()
    __args__['columnNames'] = column_names
    __args__['filters'] = filters
    __args__['maskingPolicyId'] = masking_policy_id
    __args__['objects'] = objects
    __args__['relationTypes'] = relation_types
    __args__['schemaNames'] = schema_names
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getMaskingPolicyReferentialRelations:getMaskingPolicyReferentialRelations', __args__, opts=opts, typ=GetMaskingPolicyReferentialRelationsResult).value

    return AwaitableGetMaskingPolicyReferentialRelationsResult(
        column_names=pulumi.get(__ret__, 'column_names'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        masking_policy_id=pulumi.get(__ret__, 'masking_policy_id'),
        masking_policy_referential_relation_collections=pulumi.get(__ret__, 'masking_policy_referential_relation_collections'),
        objects=pulumi.get(__ret__, 'objects'),
        relation_types=pulumi.get(__ret__, 'relation_types'),
        schema_names=pulumi.get(__ret__, 'schema_names'))
def get_masking_policy_referential_relations_output(column_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                    filters: Optional[pulumi.Input[Optional[Sequence[Union['GetMaskingPolicyReferentialRelationsFilterArgs', 'GetMaskingPolicyReferentialRelationsFilterArgsDict']]]]] = None,
                                                    masking_policy_id: Optional[pulumi.Input[str]] = None,
                                                    objects: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                    relation_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                    schema_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMaskingPolicyReferentialRelationsResult]:
    """
    This data source provides the list of Masking Policy Referential Relations in Oracle Cloud Infrastructure Data Safe service.

    Gets a list of referential relations present in the specified masking policy based on the specified query parameters.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_masking_policy_referential_relations = oci.DataSafe.get_masking_policy_referential_relations(masking_policy_id=test_masking_policy["id"],
        column_names=masking_policy_referential_relation_column_name,
        objects=masking_policy_referential_relation_object,
        relation_types=masking_policy_referential_relation_relation_type,
        schema_names=masking_policy_referential_relation_schema_name)
    ```


    :param Sequence[str] column_names: A filter to return only a specific column based on column name.
    :param str masking_policy_id: The OCID of the masking policy.
    :param Sequence[str] objects: A filter to return only items related to a specific object name.
    :param Sequence[str] relation_types: A filter to return columns based on their relationship with their parent columns. If set to NONE, it returns the columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
    :param Sequence[str] schema_names: A filter to return only items related to specific schema name.
    """
    __args__ = dict()
    __args__['columnNames'] = column_names
    __args__['filters'] = filters
    __args__['maskingPolicyId'] = masking_policy_id
    __args__['objects'] = objects
    __args__['relationTypes'] = relation_types
    __args__['schemaNames'] = schema_names
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:DataSafe/getMaskingPolicyReferentialRelations:getMaskingPolicyReferentialRelations', __args__, opts=opts, typ=GetMaskingPolicyReferentialRelationsResult)
    return __ret__.apply(lambda __response__: GetMaskingPolicyReferentialRelationsResult(
        column_names=pulumi.get(__response__, 'column_names'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        masking_policy_id=pulumi.get(__response__, 'masking_policy_id'),
        masking_policy_referential_relation_collections=pulumi.get(__response__, 'masking_policy_referential_relation_collections'),
        objects=pulumi.get(__response__, 'objects'),
        relation_types=pulumi.get(__response__, 'relation_types'),
        schema_names=pulumi.get(__response__, 'schema_names')))
