# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSdmMaskingPolicyDifferenceDifferenceColumnResult',
    'AwaitableGetSdmMaskingPolicyDifferenceDifferenceColumnResult',
    'get_sdm_masking_policy_difference_difference_column',
    'get_sdm_masking_policy_difference_difference_column_output',
]

@pulumi.output_type
class GetSdmMaskingPolicyDifferenceDifferenceColumnResult:
    """
    A collection of values returned by getSdmMaskingPolicyDifferenceDifferenceColumn.
    """
    def __init__(__self__, column_name=None, difference_column_key=None, difference_type=None, id=None, key=None, masking_columnkey=None, object=None, planned_action=None, schema_name=None, sdm_masking_policy_difference_id=None, sensitive_columnkey=None, sensitive_type_id=None, sync_status=None, time_last_synced=None):
        if column_name and not isinstance(column_name, str):
            raise TypeError("Expected argument 'column_name' to be a str")
        pulumi.set(__self__, "column_name", column_name)
        if difference_column_key and not isinstance(difference_column_key, str):
            raise TypeError("Expected argument 'difference_column_key' to be a str")
        pulumi.set(__self__, "difference_column_key", difference_column_key)
        if difference_type and not isinstance(difference_type, str):
            raise TypeError("Expected argument 'difference_type' to be a str")
        pulumi.set(__self__, "difference_type", difference_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if masking_columnkey and not isinstance(masking_columnkey, str):
            raise TypeError("Expected argument 'masking_columnkey' to be a str")
        pulumi.set(__self__, "masking_columnkey", masking_columnkey)
        if object and not isinstance(object, str):
            raise TypeError("Expected argument 'object' to be a str")
        pulumi.set(__self__, "object", object)
        if planned_action and not isinstance(planned_action, str):
            raise TypeError("Expected argument 'planned_action' to be a str")
        pulumi.set(__self__, "planned_action", planned_action)
        if schema_name and not isinstance(schema_name, str):
            raise TypeError("Expected argument 'schema_name' to be a str")
        pulumi.set(__self__, "schema_name", schema_name)
        if sdm_masking_policy_difference_id and not isinstance(sdm_masking_policy_difference_id, str):
            raise TypeError("Expected argument 'sdm_masking_policy_difference_id' to be a str")
        pulumi.set(__self__, "sdm_masking_policy_difference_id", sdm_masking_policy_difference_id)
        if sensitive_columnkey and not isinstance(sensitive_columnkey, str):
            raise TypeError("Expected argument 'sensitive_columnkey' to be a str")
        pulumi.set(__self__, "sensitive_columnkey", sensitive_columnkey)
        if sensitive_type_id and not isinstance(sensitive_type_id, str):
            raise TypeError("Expected argument 'sensitive_type_id' to be a str")
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        if sync_status and not isinstance(sync_status, str):
            raise TypeError("Expected argument 'sync_status' to be a str")
        pulumi.set(__self__, "sync_status", sync_status)
        if time_last_synced and not isinstance(time_last_synced, str):
            raise TypeError("Expected argument 'time_last_synced' to be a str")
        pulumi.set(__self__, "time_last_synced", time_last_synced)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="differenceColumnKey")
    def difference_column_key(self) -> str:
        return pulumi.get(self, "difference_column_key")

    @property
    @pulumi.getter(name="differenceType")
    def difference_type(self) -> Optional[str]:
        return pulumi.get(self, "difference_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="maskingColumnkey")
    def masking_columnkey(self) -> Optional[str]:
        return pulumi.get(self, "masking_columnkey")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="plannedAction")
    def planned_action(self) -> Optional[str]:
        return pulumi.get(self, "planned_action")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sdmMaskingPolicyDifferenceId")
    def sdm_masking_policy_difference_id(self) -> str:
        return pulumi.get(self, "sdm_masking_policy_difference_id")

    @property
    @pulumi.getter(name="sensitiveColumnkey")
    def sensitive_columnkey(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_columnkey")

    @property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_type_id")

    @property
    @pulumi.getter(name="syncStatus")
    def sync_status(self) -> Optional[str]:
        return pulumi.get(self, "sync_status")

    @property
    @pulumi.getter(name="timeLastSynced")
    def time_last_synced(self) -> Optional[str]:
        return pulumi.get(self, "time_last_synced")


class AwaitableGetSdmMaskingPolicyDifferenceDifferenceColumnResult(GetSdmMaskingPolicyDifferenceDifferenceColumnResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSdmMaskingPolicyDifferenceDifferenceColumnResult(
            column_name=self.column_name,
            difference_column_key=self.difference_column_key,
            difference_type=self.difference_type,
            id=self.id,
            key=self.key,
            masking_columnkey=self.masking_columnkey,
            object=self.object,
            planned_action=self.planned_action,
            schema_name=self.schema_name,
            sdm_masking_policy_difference_id=self.sdm_masking_policy_difference_id,
            sensitive_columnkey=self.sensitive_columnkey,
            sensitive_type_id=self.sensitive_type_id,
            sync_status=self.sync_status,
            time_last_synced=self.time_last_synced)


def get_sdm_masking_policy_difference_difference_column(difference_column_key: Optional[str] = None,
                                                        sdm_masking_policy_difference_id: Optional[str] = None,
                                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSdmMaskingPolicyDifferenceDifferenceColumnResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['differenceColumnKey'] = difference_column_key
    __args__['sdmMaskingPolicyDifferenceId'] = sdm_masking_policy_difference_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getSdmMaskingPolicyDifferenceDifferenceColumn:getSdmMaskingPolicyDifferenceDifferenceColumn', __args__, opts=opts, typ=GetSdmMaskingPolicyDifferenceDifferenceColumnResult).value

    return AwaitableGetSdmMaskingPolicyDifferenceDifferenceColumnResult(
        column_name=pulumi.get(__ret__, 'column_name'),
        difference_column_key=pulumi.get(__ret__, 'difference_column_key'),
        difference_type=pulumi.get(__ret__, 'difference_type'),
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        masking_columnkey=pulumi.get(__ret__, 'masking_columnkey'),
        object=pulumi.get(__ret__, 'object'),
        planned_action=pulumi.get(__ret__, 'planned_action'),
        schema_name=pulumi.get(__ret__, 'schema_name'),
        sdm_masking_policy_difference_id=pulumi.get(__ret__, 'sdm_masking_policy_difference_id'),
        sensitive_columnkey=pulumi.get(__ret__, 'sensitive_columnkey'),
        sensitive_type_id=pulumi.get(__ret__, 'sensitive_type_id'),
        sync_status=pulumi.get(__ret__, 'sync_status'),
        time_last_synced=pulumi.get(__ret__, 'time_last_synced'))


@_utilities.lift_output_func(get_sdm_masking_policy_difference_difference_column)
def get_sdm_masking_policy_difference_difference_column_output(difference_column_key: Optional[pulumi.Input[str]] = None,
                                                               sdm_masking_policy_difference_id: Optional[pulumi.Input[str]] = None,
                                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSdmMaskingPolicyDifferenceDifferenceColumnResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
