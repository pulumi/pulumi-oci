# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSecurityAssessmentFindingsChangeAuditLogsResult',
    'AwaitableGetSecurityAssessmentFindingsChangeAuditLogsResult',
    'get_security_assessment_findings_change_audit_logs',
    'get_security_assessment_findings_change_audit_logs_output',
]

@pulumi.output_type
class GetSecurityAssessmentFindingsChangeAuditLogsResult:
    """
    A collection of values returned by getSecurityAssessmentFindingsChangeAuditLogs.
    """
    def __init__(__self__, filters=None, finding_key=None, finding_title=None, findings_change_audit_log_collections=None, id=None, is_risk_deferred=None, modified_by=None, security_assessment_id=None, severity=None, time_updated_greater_than_or_equal_to=None, time_updated_less_than=None, time_valid_until_greater_than_or_equal_to=None, time_valid_until_less_than=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if finding_key and not isinstance(finding_key, str):
            raise TypeError("Expected argument 'finding_key' to be a str")
        pulumi.set(__self__, "finding_key", finding_key)
        if finding_title and not isinstance(finding_title, str):
            raise TypeError("Expected argument 'finding_title' to be a str")
        pulumi.set(__self__, "finding_title", finding_title)
        if findings_change_audit_log_collections and not isinstance(findings_change_audit_log_collections, list):
            raise TypeError("Expected argument 'findings_change_audit_log_collections' to be a list")
        pulumi.set(__self__, "findings_change_audit_log_collections", findings_change_audit_log_collections)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_risk_deferred and not isinstance(is_risk_deferred, bool):
            raise TypeError("Expected argument 'is_risk_deferred' to be a bool")
        pulumi.set(__self__, "is_risk_deferred", is_risk_deferred)
        if modified_by and not isinstance(modified_by, str):
            raise TypeError("Expected argument 'modified_by' to be a str")
        pulumi.set(__self__, "modified_by", modified_by)
        if security_assessment_id and not isinstance(security_assessment_id, str):
            raise TypeError("Expected argument 'security_assessment_id' to be a str")
        pulumi.set(__self__, "security_assessment_id", security_assessment_id)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if time_updated_greater_than_or_equal_to and not isinstance(time_updated_greater_than_or_equal_to, str):
            raise TypeError("Expected argument 'time_updated_greater_than_or_equal_to' to be a str")
        pulumi.set(__self__, "time_updated_greater_than_or_equal_to", time_updated_greater_than_or_equal_to)
        if time_updated_less_than and not isinstance(time_updated_less_than, str):
            raise TypeError("Expected argument 'time_updated_less_than' to be a str")
        pulumi.set(__self__, "time_updated_less_than", time_updated_less_than)
        if time_valid_until_greater_than_or_equal_to and not isinstance(time_valid_until_greater_than_or_equal_to, str):
            raise TypeError("Expected argument 'time_valid_until_greater_than_or_equal_to' to be a str")
        pulumi.set(__self__, "time_valid_until_greater_than_or_equal_to", time_valid_until_greater_than_or_equal_to)
        if time_valid_until_less_than and not isinstance(time_valid_until_less_than, str):
            raise TypeError("Expected argument 'time_valid_until_less_than' to be a str")
        pulumi.set(__self__, "time_valid_until_less_than", time_valid_until_less_than)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSecurityAssessmentFindingsChangeAuditLogsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="findingKey")
    def finding_key(self) -> Optional[str]:
        """
        The unique key that identifies the finding.
        """
        return pulumi.get(self, "finding_key")

    @property
    @pulumi.getter(name="findingTitle")
    def finding_title(self) -> Optional[str]:
        """
        The short title for the finding whose risk is being modified.
        """
        return pulumi.get(self, "finding_title")

    @property
    @pulumi.getter(name="findingsChangeAuditLogCollections")
    def findings_change_audit_log_collections(self) -> Sequence['outputs.GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionResult']:
        """
        The list of findings_change_audit_log_collection.
        """
        return pulumi.get(self, "findings_change_audit_log_collections")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isRiskDeferred")
    def is_risk_deferred(self) -> Optional[bool]:
        """
        Determines if the user has deferred the risk level of this finding when he is ok with it  and does not plan to do anything about it.
        """
        return pulumi.get(self, "is_risk_deferred")

    @property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> Optional[str]:
        """
        The user who initiated change of risk level of the finding
        """
        return pulumi.get(self, "modified_by")

    @property
    @pulumi.getter(name="securityAssessmentId")
    def security_assessment_id(self) -> str:
        return pulumi.get(self, "security_assessment_id")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        """
        The original severity / risk level of the finding as determined by security assessment.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="timeUpdatedGreaterThanOrEqualTo")
    def time_updated_greater_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "time_updated_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="timeUpdatedLessThan")
    def time_updated_less_than(self) -> Optional[str]:
        return pulumi.get(self, "time_updated_less_than")

    @property
    @pulumi.getter(name="timeValidUntilGreaterThanOrEqualTo")
    def time_valid_until_greater_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "time_valid_until_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="timeValidUntilLessThan")
    def time_valid_until_less_than(self) -> Optional[str]:
        return pulumi.get(self, "time_valid_until_less_than")


class AwaitableGetSecurityAssessmentFindingsChangeAuditLogsResult(GetSecurityAssessmentFindingsChangeAuditLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityAssessmentFindingsChangeAuditLogsResult(
            filters=self.filters,
            finding_key=self.finding_key,
            finding_title=self.finding_title,
            findings_change_audit_log_collections=self.findings_change_audit_log_collections,
            id=self.id,
            is_risk_deferred=self.is_risk_deferred,
            modified_by=self.modified_by,
            security_assessment_id=self.security_assessment_id,
            severity=self.severity,
            time_updated_greater_than_or_equal_to=self.time_updated_greater_than_or_equal_to,
            time_updated_less_than=self.time_updated_less_than,
            time_valid_until_greater_than_or_equal_to=self.time_valid_until_greater_than_or_equal_to,
            time_valid_until_less_than=self.time_valid_until_less_than)


def get_security_assessment_findings_change_audit_logs(filters: Optional[Sequence[pulumi.InputType['GetSecurityAssessmentFindingsChangeAuditLogsFilterArgs']]] = None,
                                                       finding_key: Optional[str] = None,
                                                       finding_title: Optional[str] = None,
                                                       is_risk_deferred: Optional[bool] = None,
                                                       modified_by: Optional[str] = None,
                                                       security_assessment_id: Optional[str] = None,
                                                       severity: Optional[str] = None,
                                                       time_updated_greater_than_or_equal_to: Optional[str] = None,
                                                       time_updated_less_than: Optional[str] = None,
                                                       time_valid_until_greater_than_or_equal_to: Optional[str] = None,
                                                       time_valid_until_less_than: Optional[str] = None,
                                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityAssessmentFindingsChangeAuditLogsResult:
    """
    This data source provides the list of Security Assessment Findings Change Audit Logs in Oracle Cloud Infrastructure Data Safe service.

    List all changes made by user to risk level of findings of the specified assessment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_security_assessment_findings_change_audit_logs = oci.DataSafe.get_security_assessment_findings_change_audit_logs(security_assessment_id=oci_data_safe_security_assessment["test_security_assessment"]["id"],
        finding_key=var["security_assessment_findings_change_audit_log_finding_key"],
        finding_title=var["security_assessment_findings_change_audit_log_finding_title"],
        is_risk_deferred=var["security_assessment_findings_change_audit_log_is_risk_deferred"],
        modified_by=var["security_assessment_findings_change_audit_log_modified_by"],
        severity=var["security_assessment_findings_change_audit_log_severity"],
        time_updated_greater_than_or_equal_to=var["security_assessment_findings_change_audit_log_time_updated_greater_than_or_equal_to"],
        time_updated_less_than=var["security_assessment_findings_change_audit_log_time_updated_less_than"],
        time_valid_until_greater_than_or_equal_to=var["security_assessment_findings_change_audit_log_time_valid_until_greater_than_or_equal_to"],
        time_valid_until_less_than=var["security_assessment_findings_change_audit_log_time_valid_until_less_than"])
    ```


    :param str finding_key: The unique key that identifies the finding. It is a string and unique within a security assessment.
    :param str finding_title: The unique title that identifies the finding. It is a string and unique within a security assessment.
    :param bool is_risk_deferred: A filter to check findings whose risks were deferred by the user.
    :param str modified_by: A filter to check which user modified the risk level of the finding.
    :param str security_assessment_id: The OCID of the security assessment.
    :param str severity: A filter to return only findings of a particular risk level.
    :param str time_updated_greater_than_or_equal_to: Search for resources that were updated after a specific date. Specifying this parameter corresponding `timeUpdatedGreaterThanOrEqualTo` parameter will retrieve all resources updated after the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
    :param str time_updated_less_than: Search for resources that were updated before a specific date. Specifying this parameter corresponding `timeUpdatedLessThan` parameter will retrieve all resources updated before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
    :param str time_valid_until_greater_than_or_equal_to: Specifying `TimeValidUntilGreaterThanOrEqualToQueryParam` parameter  will retrieve all items for which the risk level modification by user will  no longer be valid greater than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T00:00:00.000Z
    :param str time_valid_until_less_than: Specifying `TimeValidUntilLessThanQueryParam` parameter will retrieve all items for which the risk level modification by user will  be valid until less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T00:00:00.000Z
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['findingKey'] = finding_key
    __args__['findingTitle'] = finding_title
    __args__['isRiskDeferred'] = is_risk_deferred
    __args__['modifiedBy'] = modified_by
    __args__['securityAssessmentId'] = security_assessment_id
    __args__['severity'] = severity
    __args__['timeUpdatedGreaterThanOrEqualTo'] = time_updated_greater_than_or_equal_to
    __args__['timeUpdatedLessThan'] = time_updated_less_than
    __args__['timeValidUntilGreaterThanOrEqualTo'] = time_valid_until_greater_than_or_equal_to
    __args__['timeValidUntilLessThan'] = time_valid_until_less_than
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getSecurityAssessmentFindingsChangeAuditLogs:getSecurityAssessmentFindingsChangeAuditLogs', __args__, opts=opts, typ=GetSecurityAssessmentFindingsChangeAuditLogsResult).value

    return AwaitableGetSecurityAssessmentFindingsChangeAuditLogsResult(
        filters=pulumi.get(__ret__, 'filters'),
        finding_key=pulumi.get(__ret__, 'finding_key'),
        finding_title=pulumi.get(__ret__, 'finding_title'),
        findings_change_audit_log_collections=pulumi.get(__ret__, 'findings_change_audit_log_collections'),
        id=pulumi.get(__ret__, 'id'),
        is_risk_deferred=pulumi.get(__ret__, 'is_risk_deferred'),
        modified_by=pulumi.get(__ret__, 'modified_by'),
        security_assessment_id=pulumi.get(__ret__, 'security_assessment_id'),
        severity=pulumi.get(__ret__, 'severity'),
        time_updated_greater_than_or_equal_to=pulumi.get(__ret__, 'time_updated_greater_than_or_equal_to'),
        time_updated_less_than=pulumi.get(__ret__, 'time_updated_less_than'),
        time_valid_until_greater_than_or_equal_to=pulumi.get(__ret__, 'time_valid_until_greater_than_or_equal_to'),
        time_valid_until_less_than=pulumi.get(__ret__, 'time_valid_until_less_than'))


@_utilities.lift_output_func(get_security_assessment_findings_change_audit_logs)
def get_security_assessment_findings_change_audit_logs_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSecurityAssessmentFindingsChangeAuditLogsFilterArgs']]]]] = None,
                                                              finding_key: Optional[pulumi.Input[Optional[str]]] = None,
                                                              finding_title: Optional[pulumi.Input[Optional[str]]] = None,
                                                              is_risk_deferred: Optional[pulumi.Input[Optional[bool]]] = None,
                                                              modified_by: Optional[pulumi.Input[Optional[str]]] = None,
                                                              security_assessment_id: Optional[pulumi.Input[str]] = None,
                                                              severity: Optional[pulumi.Input[Optional[str]]] = None,
                                                              time_updated_greater_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                                              time_updated_less_than: Optional[pulumi.Input[Optional[str]]] = None,
                                                              time_valid_until_greater_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                                              time_valid_until_less_than: Optional[pulumi.Input[Optional[str]]] = None,
                                                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecurityAssessmentFindingsChangeAuditLogsResult]:
    """
    This data source provides the list of Security Assessment Findings Change Audit Logs in Oracle Cloud Infrastructure Data Safe service.

    List all changes made by user to risk level of findings of the specified assessment.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_security_assessment_findings_change_audit_logs = oci.DataSafe.get_security_assessment_findings_change_audit_logs(security_assessment_id=oci_data_safe_security_assessment["test_security_assessment"]["id"],
        finding_key=var["security_assessment_findings_change_audit_log_finding_key"],
        finding_title=var["security_assessment_findings_change_audit_log_finding_title"],
        is_risk_deferred=var["security_assessment_findings_change_audit_log_is_risk_deferred"],
        modified_by=var["security_assessment_findings_change_audit_log_modified_by"],
        severity=var["security_assessment_findings_change_audit_log_severity"],
        time_updated_greater_than_or_equal_to=var["security_assessment_findings_change_audit_log_time_updated_greater_than_or_equal_to"],
        time_updated_less_than=var["security_assessment_findings_change_audit_log_time_updated_less_than"],
        time_valid_until_greater_than_or_equal_to=var["security_assessment_findings_change_audit_log_time_valid_until_greater_than_or_equal_to"],
        time_valid_until_less_than=var["security_assessment_findings_change_audit_log_time_valid_until_less_than"])
    ```


    :param str finding_key: The unique key that identifies the finding. It is a string and unique within a security assessment.
    :param str finding_title: The unique title that identifies the finding. It is a string and unique within a security assessment.
    :param bool is_risk_deferred: A filter to check findings whose risks were deferred by the user.
    :param str modified_by: A filter to check which user modified the risk level of the finding.
    :param str security_assessment_id: The OCID of the security assessment.
    :param str severity: A filter to return only findings of a particular risk level.
    :param str time_updated_greater_than_or_equal_to: Search for resources that were updated after a specific date. Specifying this parameter corresponding `timeUpdatedGreaterThanOrEqualTo` parameter will retrieve all resources updated after the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
    :param str time_updated_less_than: Search for resources that were updated before a specific date. Specifying this parameter corresponding `timeUpdatedLessThan` parameter will retrieve all resources updated before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
    :param str time_valid_until_greater_than_or_equal_to: Specifying `TimeValidUntilGreaterThanOrEqualToQueryParam` parameter  will retrieve all items for which the risk level modification by user will  no longer be valid greater than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T00:00:00.000Z
    :param str time_valid_until_less_than: Specifying `TimeValidUntilLessThanQueryParam` parameter will retrieve all items for which the risk level modification by user will  be valid until less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T00:00:00.000Z
    """
    ...
