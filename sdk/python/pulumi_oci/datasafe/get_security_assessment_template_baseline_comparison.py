# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecurityAssessmentTemplateBaselineComparisonResult',
    'AwaitableGetSecurityAssessmentTemplateBaselineComparisonResult',
    'get_security_assessment_template_baseline_comparison',
    'get_security_assessment_template_baseline_comparison_output',
]

@pulumi.output_type
class GetSecurityAssessmentTemplateBaselineComparisonResult:
    """
    A collection of values returned by getSecurityAssessmentTemplateBaselineComparison.
    """
    def __init__(__self__, auditings=None, authorization_controls=None, category=None, comparison_security_assessment_id=None, data_encryptions=None, db_configurations=None, finding_key=None, fine_grained_access_controls=None, id=None, privileges_and_roles=None, security_assessment_id=None, state=None, target_id=None, template_baseline_id=None, template_baseline_name=None, time_created=None, user_accounts=None):
        if auditings and not isinstance(auditings, list):
            raise TypeError("Expected argument 'auditings' to be a list")
        pulumi.set(__self__, "auditings", auditings)
        if authorization_controls and not isinstance(authorization_controls, list):
            raise TypeError("Expected argument 'authorization_controls' to be a list")
        pulumi.set(__self__, "authorization_controls", authorization_controls)
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if comparison_security_assessment_id and not isinstance(comparison_security_assessment_id, str):
            raise TypeError("Expected argument 'comparison_security_assessment_id' to be a str")
        pulumi.set(__self__, "comparison_security_assessment_id", comparison_security_assessment_id)
        if data_encryptions and not isinstance(data_encryptions, list):
            raise TypeError("Expected argument 'data_encryptions' to be a list")
        pulumi.set(__self__, "data_encryptions", data_encryptions)
        if db_configurations and not isinstance(db_configurations, list):
            raise TypeError("Expected argument 'db_configurations' to be a list")
        pulumi.set(__self__, "db_configurations", db_configurations)
        if finding_key and not isinstance(finding_key, str):
            raise TypeError("Expected argument 'finding_key' to be a str")
        pulumi.set(__self__, "finding_key", finding_key)
        if fine_grained_access_controls and not isinstance(fine_grained_access_controls, list):
            raise TypeError("Expected argument 'fine_grained_access_controls' to be a list")
        pulumi.set(__self__, "fine_grained_access_controls", fine_grained_access_controls)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if privileges_and_roles and not isinstance(privileges_and_roles, list):
            raise TypeError("Expected argument 'privileges_and_roles' to be a list")
        pulumi.set(__self__, "privileges_and_roles", privileges_and_roles)
        if security_assessment_id and not isinstance(security_assessment_id, str):
            raise TypeError("Expected argument 'security_assessment_id' to be a str")
        pulumi.set(__self__, "security_assessment_id", security_assessment_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if target_id and not isinstance(target_id, str):
            raise TypeError("Expected argument 'target_id' to be a str")
        pulumi.set(__self__, "target_id", target_id)
        if template_baseline_id and not isinstance(template_baseline_id, str):
            raise TypeError("Expected argument 'template_baseline_id' to be a str")
        pulumi.set(__self__, "template_baseline_id", template_baseline_id)
        if template_baseline_name and not isinstance(template_baseline_name, str):
            raise TypeError("Expected argument 'template_baseline_name' to be a str")
        pulumi.set(__self__, "template_baseline_name", template_baseline_name)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if user_accounts and not isinstance(user_accounts, list):
            raise TypeError("Expected argument 'user_accounts' to be a list")
        pulumi.set(__self__, "user_accounts", user_accounts)

    @_builtins.property
    @pulumi.getter
    def auditings(self) -> Sequence['outputs.GetSecurityAssessmentTemplateBaselineComparisonAuditingResult']:
        """
        A comparison between findings belonging to Auditing category.
        """
        return pulumi.get(self, "auditings")

    @_builtins.property
    @pulumi.getter(name="authorizationControls")
    def authorization_controls(self) -> Sequence['outputs.GetSecurityAssessmentTemplateBaselineComparisonAuthorizationControlResult']:
        """
        A comparison between findings belonging to Authorization Control category.
        """
        return pulumi.get(self, "authorization_controls")

    @_builtins.property
    @pulumi.getter
    def category(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="comparisonSecurityAssessmentId")
    def comparison_security_assessment_id(self) -> _builtins.str:
        return pulumi.get(self, "comparison_security_assessment_id")

    @_builtins.property
    @pulumi.getter(name="dataEncryptions")
    def data_encryptions(self) -> Sequence['outputs.GetSecurityAssessmentTemplateBaselineComparisonDataEncryptionResult']:
        """
        Comparison between findings belonging to Data Encryption category.
        """
        return pulumi.get(self, "data_encryptions")

    @_builtins.property
    @pulumi.getter(name="dbConfigurations")
    def db_configurations(self) -> Sequence['outputs.GetSecurityAssessmentTemplateBaselineComparisonDbConfigurationResult']:
        """
        Comparison between findings belonging to Database Configuration category.
        """
        return pulumi.get(self, "db_configurations")

    @_builtins.property
    @pulumi.getter(name="findingKey")
    def finding_key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "finding_key")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControls")
    def fine_grained_access_controls(self) -> Sequence['outputs.GetSecurityAssessmentTemplateBaselineComparisonFineGrainedAccessControlResult']:
        """
        Comparison between findings belonging to Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_controls")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRoles")
    def privileges_and_roles(self) -> Sequence['outputs.GetSecurityAssessmentTemplateBaselineComparisonPrivilegesAndRoleResult']:
        """
        Comparison between findings belonging to Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles")

    @_builtins.property
    @pulumi.getter(name="securityAssessmentId")
    def security_assessment_id(self) -> _builtins.str:
        return pulumi.get(self, "security_assessment_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="templateBaselineId")
    def template_baseline_id(self) -> _builtins.str:
        """
        The OCID of the security assessment that is set as a template baseline.
        """
        return pulumi.get(self, "template_baseline_id")

    @_builtins.property
    @pulumi.getter(name="templateBaselineName")
    def template_baseline_name(self) -> _builtins.str:
        """
        The display name of the security assessment that is set as a template baseline.
        """
        return pulumi.get(self, "template_baseline_name")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time when the security assessment comparison was created. Conforms to the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="userAccounts")
    def user_accounts(self) -> Sequence['outputs.GetSecurityAssessmentTemplateBaselineComparisonUserAccountResult']:
        """
        Comparison between findings belonging to User Accounts category.
        """
        return pulumi.get(self, "user_accounts")


class AwaitableGetSecurityAssessmentTemplateBaselineComparisonResult(GetSecurityAssessmentTemplateBaselineComparisonResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityAssessmentTemplateBaselineComparisonResult(
            auditings=self.auditings,
            authorization_controls=self.authorization_controls,
            category=self.category,
            comparison_security_assessment_id=self.comparison_security_assessment_id,
            data_encryptions=self.data_encryptions,
            db_configurations=self.db_configurations,
            finding_key=self.finding_key,
            fine_grained_access_controls=self.fine_grained_access_controls,
            id=self.id,
            privileges_and_roles=self.privileges_and_roles,
            security_assessment_id=self.security_assessment_id,
            state=self.state,
            target_id=self.target_id,
            template_baseline_id=self.template_baseline_id,
            template_baseline_name=self.template_baseline_name,
            time_created=self.time_created,
            user_accounts=self.user_accounts)


def get_security_assessment_template_baseline_comparison(category: Optional[_builtins.str] = None,
                                                         comparison_security_assessment_id: Optional[_builtins.str] = None,
                                                         finding_key: Optional[_builtins.str] = None,
                                                         security_assessment_id: Optional[_builtins.str] = None,
                                                         target_id: Optional[_builtins.str] = None,
                                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityAssessmentTemplateBaselineComparisonResult:
    """
    This data source provides details about a specific Security Assessment Template Baseline Comparison resource in Oracle Cloud Infrastructure Data Safe service.

    Gets the details of the comparison report for the security assessments submitted for comparison.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_security_assessment_template_baseline_comparison = oci.DataSafe.get_security_assessment_template_baseline_comparison(comparison_security_assessment_id=test_security_assessment["id"],
        security_assessment_id=test_security_assessment["id"],
        category=security_assessment_template_baseline_comparison_category,
        finding_key=security_assessment_template_baseline_comparison_finding_key,
        target_id=test_target["id"])
    ```


    :param _builtins.str category: The category of the finding.
    :param _builtins.str comparison_security_assessment_id: The OCID of the security assessment baseline.
    :param _builtins.str finding_key: The unique key that identifies the finding. It is a string and unique within a security assessment.
    :param _builtins.str security_assessment_id: The OCID of the security assessment.
    :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
    """
    __args__ = dict()
    __args__['category'] = category
    __args__['comparisonSecurityAssessmentId'] = comparison_security_assessment_id
    __args__['findingKey'] = finding_key
    __args__['securityAssessmentId'] = security_assessment_id
    __args__['targetId'] = target_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getSecurityAssessmentTemplateBaselineComparison:getSecurityAssessmentTemplateBaselineComparison', __args__, opts=opts, typ=GetSecurityAssessmentTemplateBaselineComparisonResult).value

    return AwaitableGetSecurityAssessmentTemplateBaselineComparisonResult(
        auditings=pulumi.get(__ret__, 'auditings'),
        authorization_controls=pulumi.get(__ret__, 'authorization_controls'),
        category=pulumi.get(__ret__, 'category'),
        comparison_security_assessment_id=pulumi.get(__ret__, 'comparison_security_assessment_id'),
        data_encryptions=pulumi.get(__ret__, 'data_encryptions'),
        db_configurations=pulumi.get(__ret__, 'db_configurations'),
        finding_key=pulumi.get(__ret__, 'finding_key'),
        fine_grained_access_controls=pulumi.get(__ret__, 'fine_grained_access_controls'),
        id=pulumi.get(__ret__, 'id'),
        privileges_and_roles=pulumi.get(__ret__, 'privileges_and_roles'),
        security_assessment_id=pulumi.get(__ret__, 'security_assessment_id'),
        state=pulumi.get(__ret__, 'state'),
        target_id=pulumi.get(__ret__, 'target_id'),
        template_baseline_id=pulumi.get(__ret__, 'template_baseline_id'),
        template_baseline_name=pulumi.get(__ret__, 'template_baseline_name'),
        time_created=pulumi.get(__ret__, 'time_created'),
        user_accounts=pulumi.get(__ret__, 'user_accounts'))
def get_security_assessment_template_baseline_comparison_output(category: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                comparison_security_assessment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                                finding_key: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                security_assessment_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                                target_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSecurityAssessmentTemplateBaselineComparisonResult]:
    """
    This data source provides details about a specific Security Assessment Template Baseline Comparison resource in Oracle Cloud Infrastructure Data Safe service.

    Gets the details of the comparison report for the security assessments submitted for comparison.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_security_assessment_template_baseline_comparison = oci.DataSafe.get_security_assessment_template_baseline_comparison(comparison_security_assessment_id=test_security_assessment["id"],
        security_assessment_id=test_security_assessment["id"],
        category=security_assessment_template_baseline_comparison_category,
        finding_key=security_assessment_template_baseline_comparison_finding_key,
        target_id=test_target["id"])
    ```


    :param _builtins.str category: The category of the finding.
    :param _builtins.str comparison_security_assessment_id: The OCID of the security assessment baseline.
    :param _builtins.str finding_key: The unique key that identifies the finding. It is a string and unique within a security assessment.
    :param _builtins.str security_assessment_id: The OCID of the security assessment.
    :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
    """
    __args__ = dict()
    __args__['category'] = category
    __args__['comparisonSecurityAssessmentId'] = comparison_security_assessment_id
    __args__['findingKey'] = finding_key
    __args__['securityAssessmentId'] = security_assessment_id
    __args__['targetId'] = target_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:DataSafe/getSecurityAssessmentTemplateBaselineComparison:getSecurityAssessmentTemplateBaselineComparison', __args__, opts=opts, typ=GetSecurityAssessmentTemplateBaselineComparisonResult)
    return __ret__.apply(lambda __response__: GetSecurityAssessmentTemplateBaselineComparisonResult(
        auditings=pulumi.get(__response__, 'auditings'),
        authorization_controls=pulumi.get(__response__, 'authorization_controls'),
        category=pulumi.get(__response__, 'category'),
        comparison_security_assessment_id=pulumi.get(__response__, 'comparison_security_assessment_id'),
        data_encryptions=pulumi.get(__response__, 'data_encryptions'),
        db_configurations=pulumi.get(__response__, 'db_configurations'),
        finding_key=pulumi.get(__response__, 'finding_key'),
        fine_grained_access_controls=pulumi.get(__response__, 'fine_grained_access_controls'),
        id=pulumi.get(__response__, 'id'),
        privileges_and_roles=pulumi.get(__response__, 'privileges_and_roles'),
        security_assessment_id=pulumi.get(__response__, 'security_assessment_id'),
        state=pulumi.get(__response__, 'state'),
        target_id=pulumi.get(__response__, 'target_id'),
        template_baseline_id=pulumi.get(__response__, 'template_baseline_id'),
        template_baseline_name=pulumi.get(__response__, 'template_baseline_name'),
        time_created=pulumi.get(__response__, 'time_created'),
        user_accounts=pulumi.get(__response__, 'user_accounts')))
