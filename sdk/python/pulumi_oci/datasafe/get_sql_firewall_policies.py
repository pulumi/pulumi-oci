# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSqlFirewallPoliciesResult',
    'AwaitableGetSqlFirewallPoliciesResult',
    'get_sql_firewall_policies',
    'get_sql_firewall_policies_output',
]

@pulumi.output_type
class GetSqlFirewallPoliciesResult:
    """
    A collection of values returned by getSqlFirewallPolicies.
    """
    def __init__(__self__, access_level=None, compartment_id=None, compartment_id_in_subtree=None, db_user_name=None, display_name=None, filters=None, id=None, security_policy_id=None, sql_firewall_policy_collections=None, sql_firewall_policy_id=None, state=None, time_created_greater_than_or_equal_to=None, time_created_less_than=None, violation_action=None):
        if access_level and not isinstance(access_level, str):
            raise TypeError("Expected argument 'access_level' to be a str")
        pulumi.set(__self__, "access_level", access_level)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_id_in_subtree and not isinstance(compartment_id_in_subtree, bool):
            raise TypeError("Expected argument 'compartment_id_in_subtree' to be a bool")
        pulumi.set(__self__, "compartment_id_in_subtree", compartment_id_in_subtree)
        if db_user_name and not isinstance(db_user_name, str):
            raise TypeError("Expected argument 'db_user_name' to be a str")
        pulumi.set(__self__, "db_user_name", db_user_name)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if security_policy_id and not isinstance(security_policy_id, str):
            raise TypeError("Expected argument 'security_policy_id' to be a str")
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        if sql_firewall_policy_collections and not isinstance(sql_firewall_policy_collections, list):
            raise TypeError("Expected argument 'sql_firewall_policy_collections' to be a list")
        pulumi.set(__self__, "sql_firewall_policy_collections", sql_firewall_policy_collections)
        if sql_firewall_policy_id and not isinstance(sql_firewall_policy_id, str):
            raise TypeError("Expected argument 'sql_firewall_policy_id' to be a str")
        pulumi.set(__self__, "sql_firewall_policy_id", sql_firewall_policy_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_created_greater_than_or_equal_to and not isinstance(time_created_greater_than_or_equal_to, str):
            raise TypeError("Expected argument 'time_created_greater_than_or_equal_to' to be a str")
        pulumi.set(__self__, "time_created_greater_than_or_equal_to", time_created_greater_than_or_equal_to)
        if time_created_less_than and not isinstance(time_created_less_than, str):
            raise TypeError("Expected argument 'time_created_less_than' to be a str")
        pulumi.set(__self__, "time_created_less_than", time_created_less_than)
        if violation_action and not isinstance(violation_action, str):
            raise TypeError("Expected argument 'violation_action' to be a str")
        pulumi.set(__self__, "violation_action", violation_action)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment containing the SQL firewall policy.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentIdInSubtree")
    def compartment_id_in_subtree(self) -> Optional[bool]:
        return pulumi.get(self, "compartment_id_in_subtree")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        """
        The database user name.
        """
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the SQL firewall policy.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSqlFirewallPoliciesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[str]:
        """
        The OCID of the security policy corresponding to the SQL firewall policy.
        """
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter(name="sqlFirewallPolicyCollections")
    def sql_firewall_policy_collections(self) -> Sequence['outputs.GetSqlFirewallPoliciesSqlFirewallPolicyCollectionResult']:
        """
        The list of sql_firewall_policy_collection.
        """
        return pulumi.get(self, "sql_firewall_policy_collections")

    @property
    @pulumi.getter(name="sqlFirewallPolicyId")
    def sql_firewall_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_firewall_policy_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the SQL firewall policy.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreatedGreaterThanOrEqualTo")
    def time_created_greater_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "time_created_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="timeCreatedLessThan")
    def time_created_less_than(self) -> Optional[str]:
        return pulumi.get(self, "time_created_less_than")

    @property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> Optional[str]:
        """
        Specifies the mode in which the SQL firewall policy is enabled.
        """
        return pulumi.get(self, "violation_action")


class AwaitableGetSqlFirewallPoliciesResult(GetSqlFirewallPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlFirewallPoliciesResult(
            access_level=self.access_level,
            compartment_id=self.compartment_id,
            compartment_id_in_subtree=self.compartment_id_in_subtree,
            db_user_name=self.db_user_name,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            security_policy_id=self.security_policy_id,
            sql_firewall_policy_collections=self.sql_firewall_policy_collections,
            sql_firewall_policy_id=self.sql_firewall_policy_id,
            state=self.state,
            time_created_greater_than_or_equal_to=self.time_created_greater_than_or_equal_to,
            time_created_less_than=self.time_created_less_than,
            violation_action=self.violation_action)


def get_sql_firewall_policies(access_level: Optional[str] = None,
                              compartment_id: Optional[str] = None,
                              compartment_id_in_subtree: Optional[bool] = None,
                              db_user_name: Optional[str] = None,
                              display_name: Optional[str] = None,
                              filters: Optional[Sequence[pulumi.InputType['GetSqlFirewallPoliciesFilterArgs']]] = None,
                              security_policy_id: Optional[str] = None,
                              sql_firewall_policy_id: Optional[str] = None,
                              state: Optional[str] = None,
                              time_created_greater_than_or_equal_to: Optional[str] = None,
                              time_created_less_than: Optional[str] = None,
                              violation_action: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlFirewallPoliciesResult:
    """
    This data source provides the list of Sql Firewall Policies in Oracle Cloud Infrastructure Data Safe service.

    Retrieves a list of all SQL firewall policies.

    The ListSqlFirewallPolicies operation returns only the SQL firewall policies in the specified `compartmentId`.

    The parameter `accessLevel` specifies whether to return only those compartments for which the
    requestor has INSPECT permissions on at least one resource directly
    or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
    Principal doesn't have access to even one of the child compartments. This is valid only when
    `compartmentIdInSubtree` is set to `true`.

    The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallPolicies on the
    `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
    To get a full list of all compartments and subcompartments in the tenancy (root compartment),
    set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_sql_firewall_policies = oci.DataSafe.get_sql_firewall_policies(compartment_id=var["compartment_id"],
        access_level=var["sql_firewall_policy_access_level"],
        compartment_id_in_subtree=var["sql_firewall_policy_compartment_id_in_subtree"],
        db_user_name=oci_identity_user["test_user"]["name"],
        display_name=var["sql_firewall_policy_display_name"],
        security_policy_id=oci_data_safe_security_policy["test_security_policy"]["id"],
        sql_firewall_policy_id=oci_data_safe_sql_firewall_policy["test_sql_firewall_policy"]["id"],
        state=var["sql_firewall_policy_state"],
        time_created_greater_than_or_equal_to=var["sql_firewall_policy_time_created_greater_than_or_equal_to"],
        time_created_less_than=var["sql_firewall_policy_time_created_less_than"],
        violation_action=var["sql_firewall_policy_violation_action"])
    ```


    :param str access_level: Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
    :param str compartment_id: A filter to return only resources that match the specified compartment OCID.
    :param bool compartment_id_in_subtree: Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
    :param str db_user_name: A filter to return only items that match the specified user name.
    :param str display_name: A filter to return only resources that match the specified display name.
    :param str security_policy_id: An optional filter to return only resources that match the specified OCID of the security policy resource.
    :param str sql_firewall_policy_id: An optional filter to return only resources that match the specified OCID of the SQL firewall policy resource.
    :param str state: The current state of the SQL firewall policy.
    :param str time_created_greater_than_or_equal_to: A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str time_created_less_than: Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str violation_action: An optional filter to return only resources that match the specified violation action.
    """
    __args__ = dict()
    __args__['accessLevel'] = access_level
    __args__['compartmentId'] = compartment_id
    __args__['compartmentIdInSubtree'] = compartment_id_in_subtree
    __args__['dbUserName'] = db_user_name
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['securityPolicyId'] = security_policy_id
    __args__['sqlFirewallPolicyId'] = sql_firewall_policy_id
    __args__['state'] = state
    __args__['timeCreatedGreaterThanOrEqualTo'] = time_created_greater_than_or_equal_to
    __args__['timeCreatedLessThan'] = time_created_less_than
    __args__['violationAction'] = violation_action
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getSqlFirewallPolicies:getSqlFirewallPolicies', __args__, opts=opts, typ=GetSqlFirewallPoliciesResult).value

    return AwaitableGetSqlFirewallPoliciesResult(
        access_level=pulumi.get(__ret__, 'access_level'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compartment_id_in_subtree=pulumi.get(__ret__, 'compartment_id_in_subtree'),
        db_user_name=pulumi.get(__ret__, 'db_user_name'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        security_policy_id=pulumi.get(__ret__, 'security_policy_id'),
        sql_firewall_policy_collections=pulumi.get(__ret__, 'sql_firewall_policy_collections'),
        sql_firewall_policy_id=pulumi.get(__ret__, 'sql_firewall_policy_id'),
        state=pulumi.get(__ret__, 'state'),
        time_created_greater_than_or_equal_to=pulumi.get(__ret__, 'time_created_greater_than_or_equal_to'),
        time_created_less_than=pulumi.get(__ret__, 'time_created_less_than'),
        violation_action=pulumi.get(__ret__, 'violation_action'))


@_utilities.lift_output_func(get_sql_firewall_policies)
def get_sql_firewall_policies_output(access_level: Optional[pulumi.Input[Optional[str]]] = None,
                                     compartment_id: Optional[pulumi.Input[str]] = None,
                                     compartment_id_in_subtree: Optional[pulumi.Input[Optional[bool]]] = None,
                                     db_user_name: Optional[pulumi.Input[Optional[str]]] = None,
                                     display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                     filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSqlFirewallPoliciesFilterArgs']]]]] = None,
                                     security_policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                     sql_firewall_policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                     state: Optional[pulumi.Input[Optional[str]]] = None,
                                     time_created_greater_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                     time_created_less_than: Optional[pulumi.Input[Optional[str]]] = None,
                                     violation_action: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSqlFirewallPoliciesResult]:
    """
    This data source provides the list of Sql Firewall Policies in Oracle Cloud Infrastructure Data Safe service.

    Retrieves a list of all SQL firewall policies.

    The ListSqlFirewallPolicies operation returns only the SQL firewall policies in the specified `compartmentId`.

    The parameter `accessLevel` specifies whether to return only those compartments for which the
    requestor has INSPECT permissions on at least one resource directly
    or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
    Principal doesn't have access to even one of the child compartments. This is valid only when
    `compartmentIdInSubtree` is set to `true`.

    The parameter `compartmentIdInSubtree` applies when you perform ListSqlFirewallPolicies on the
    `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
    To get a full list of all compartments and subcompartments in the tenancy (root compartment),
    set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_sql_firewall_policies = oci.DataSafe.get_sql_firewall_policies(compartment_id=var["compartment_id"],
        access_level=var["sql_firewall_policy_access_level"],
        compartment_id_in_subtree=var["sql_firewall_policy_compartment_id_in_subtree"],
        db_user_name=oci_identity_user["test_user"]["name"],
        display_name=var["sql_firewall_policy_display_name"],
        security_policy_id=oci_data_safe_security_policy["test_security_policy"]["id"],
        sql_firewall_policy_id=oci_data_safe_sql_firewall_policy["test_sql_firewall_policy"]["id"],
        state=var["sql_firewall_policy_state"],
        time_created_greater_than_or_equal_to=var["sql_firewall_policy_time_created_greater_than_or_equal_to"],
        time_created_less_than=var["sql_firewall_policy_time_created_less_than"],
        violation_action=var["sql_firewall_policy_violation_action"])
    ```


    :param str access_level: Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
    :param str compartment_id: A filter to return only resources that match the specified compartment OCID.
    :param bool compartment_id_in_subtree: Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
    :param str db_user_name: A filter to return only items that match the specified user name.
    :param str display_name: A filter to return only resources that match the specified display name.
    :param str security_policy_id: An optional filter to return only resources that match the specified OCID of the security policy resource.
    :param str sql_firewall_policy_id: An optional filter to return only resources that match the specified OCID of the SQL firewall policy resource.
    :param str state: The current state of the SQL firewall policy.
    :param str time_created_greater_than_or_equal_to: A filter to return only the resources that were created after the specified date and time, as defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Using TimeCreatedGreaterThanOrEqualToQueryParam parameter retrieves all resources created after that date.
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str time_created_less_than: Search for resources that were created before a specific date. Specifying this parameter corresponding `timeCreatedLessThan` parameter will retrieve all resources created before the specified created date, in "YYYY-MM-ddThh:mmZ" format with a Z offset, as defined by RFC 3339.
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str violation_action: An optional filter to return only resources that match the specified violation action.
    """
    ...
