# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTargetDatabasePeerTargetDatabasesResult',
    'AwaitableGetTargetDatabasePeerTargetDatabasesResult',
    'get_target_database_peer_target_databases',
    'get_target_database_peer_target_databases_output',
]

@pulumi.output_type
class GetTargetDatabasePeerTargetDatabasesResult:
    """
    A collection of values returned by getTargetDatabasePeerTargetDatabases.
    """
    def __init__(__self__, filters=None, id=None, peer_target_database_collections=None, target_database_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if peer_target_database_collections and not isinstance(peer_target_database_collections, list):
            raise TypeError("Expected argument 'peer_target_database_collections' to be a list")
        pulumi.set(__self__, "peer_target_database_collections", peer_target_database_collections)
        if target_database_id and not isinstance(target_database_id, str):
            raise TypeError("Expected argument 'target_database_id' to be a str")
        pulumi.set(__self__, "target_database_id", target_database_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetTargetDatabasePeerTargetDatabasesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="peerTargetDatabaseCollections")
    def peer_target_database_collections(self) -> Sequence['outputs.GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionResult']:
        """
        The list of peer_target_database_collection.
        """
        return pulumi.get(self, "peer_target_database_collections")

    @property
    @pulumi.getter(name="targetDatabaseId")
    def target_database_id(self) -> str:
        return pulumi.get(self, "target_database_id")


class AwaitableGetTargetDatabasePeerTargetDatabasesResult(GetTargetDatabasePeerTargetDatabasesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTargetDatabasePeerTargetDatabasesResult(
            filters=self.filters,
            id=self.id,
            peer_target_database_collections=self.peer_target_database_collections,
            target_database_id=self.target_database_id)


def get_target_database_peer_target_databases(filters: Optional[Sequence[pulumi.InputType['GetTargetDatabasePeerTargetDatabasesFilterArgs']]] = None,
                                              target_database_id: Optional[str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTargetDatabasePeerTargetDatabasesResult:
    """
    This data source provides the list of Target Database Peer Target Databases in Oracle Cloud Infrastructure Data Safe service.

    Lists all the peer target databases under the primary target database identified by the OCID passed as path parameter.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_target_database_peer_target_databases = oci.DataSafe.get_target_database_peer_target_databases(target_database_id=oci_data_safe_target_database["test_target_database"]["id"])
    ```


    :param str target_database_id: The OCID of the Data Safe target database.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['targetDatabaseId'] = target_database_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getTargetDatabasePeerTargetDatabases:getTargetDatabasePeerTargetDatabases', __args__, opts=opts, typ=GetTargetDatabasePeerTargetDatabasesResult).value

    return AwaitableGetTargetDatabasePeerTargetDatabasesResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        peer_target_database_collections=pulumi.get(__ret__, 'peer_target_database_collections'),
        target_database_id=pulumi.get(__ret__, 'target_database_id'))


@_utilities.lift_output_func(get_target_database_peer_target_databases)
def get_target_database_peer_target_databases_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTargetDatabasePeerTargetDatabasesFilterArgs']]]]] = None,
                                                     target_database_id: Optional[pulumi.Input[str]] = None,
                                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTargetDatabasePeerTargetDatabasesResult]:
    """
    This data source provides the list of Target Database Peer Target Databases in Oracle Cloud Infrastructure Data Safe service.

    Lists all the peer target databases under the primary target database identified by the OCID passed as path parameter.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_target_database_peer_target_databases = oci.DataSafe.get_target_database_peer_target_databases(target_database_id=oci_data_safe_target_database["test_target_database"]["id"])
    ```


    :param str target_database_id: The OCID of the Data Safe target database.
    """
    ...
