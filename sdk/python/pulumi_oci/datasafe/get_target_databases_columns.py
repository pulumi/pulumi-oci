# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTargetDatabasesColumnsResult',
    'AwaitableGetTargetDatabasesColumnsResult',
    'get_target_databases_columns',
    'get_target_databases_columns_output',
]

@pulumi.output_type
class GetTargetDatabasesColumnsResult:
    """
    A collection of values returned by getTargetDatabasesColumns.
    """
    def __init__(__self__, column_name_contains=None, column_names=None, columns=None, datatypes=None, filters=None, id=None, schema_name_contains=None, schema_names=None, table_name_contains=None, table_names=None, target_database_id=None):
        if column_name_contains and not isinstance(column_name_contains, str):
            raise TypeError("Expected argument 'column_name_contains' to be a str")
        pulumi.set(__self__, "column_name_contains", column_name_contains)
        if column_names and not isinstance(column_names, list):
            raise TypeError("Expected argument 'column_names' to be a list")
        pulumi.set(__self__, "column_names", column_names)
        if columns and not isinstance(columns, list):
            raise TypeError("Expected argument 'columns' to be a list")
        pulumi.set(__self__, "columns", columns)
        if datatypes and not isinstance(datatypes, list):
            raise TypeError("Expected argument 'datatypes' to be a list")
        pulumi.set(__self__, "datatypes", datatypes)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if schema_name_contains and not isinstance(schema_name_contains, str):
            raise TypeError("Expected argument 'schema_name_contains' to be a str")
        pulumi.set(__self__, "schema_name_contains", schema_name_contains)
        if schema_names and not isinstance(schema_names, list):
            raise TypeError("Expected argument 'schema_names' to be a list")
        pulumi.set(__self__, "schema_names", schema_names)
        if table_name_contains and not isinstance(table_name_contains, str):
            raise TypeError("Expected argument 'table_name_contains' to be a str")
        pulumi.set(__self__, "table_name_contains", table_name_contains)
        if table_names and not isinstance(table_names, list):
            raise TypeError("Expected argument 'table_names' to be a list")
        pulumi.set(__self__, "table_names", table_names)
        if target_database_id and not isinstance(target_database_id, str):
            raise TypeError("Expected argument 'target_database_id' to be a str")
        pulumi.set(__self__, "target_database_id", target_database_id)

    @property
    @pulumi.getter(name="columnNameContains")
    def column_name_contains(self) -> Optional[str]:
        return pulumi.get(self, "column_name_contains")

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[Sequence[str]]:
        """
        Name of the column.
        """
        return pulumi.get(self, "column_names")

    @property
    @pulumi.getter
    def columns(self) -> Sequence['outputs.GetTargetDatabasesColumnsColumnResult']:
        """
        The list of columns.
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def datatypes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "datatypes")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetTargetDatabasesColumnsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="schemaNameContains")
    def schema_name_contains(self) -> Optional[str]:
        return pulumi.get(self, "schema_name_contains")

    @property
    @pulumi.getter(name="schemaNames")
    def schema_names(self) -> Optional[Sequence[str]]:
        """
        Name of the schema.
        """
        return pulumi.get(self, "schema_names")

    @property
    @pulumi.getter(name="tableNameContains")
    def table_name_contains(self) -> Optional[str]:
        return pulumi.get(self, "table_name_contains")

    @property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Optional[Sequence[str]]:
        """
        Name of the table.
        """
        return pulumi.get(self, "table_names")

    @property
    @pulumi.getter(name="targetDatabaseId")
    def target_database_id(self) -> str:
        return pulumi.get(self, "target_database_id")


class AwaitableGetTargetDatabasesColumnsResult(GetTargetDatabasesColumnsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTargetDatabasesColumnsResult(
            column_name_contains=self.column_name_contains,
            column_names=self.column_names,
            columns=self.columns,
            datatypes=self.datatypes,
            filters=self.filters,
            id=self.id,
            schema_name_contains=self.schema_name_contains,
            schema_names=self.schema_names,
            table_name_contains=self.table_name_contains,
            table_names=self.table_names,
            target_database_id=self.target_database_id)


def get_target_databases_columns(column_name_contains: Optional[str] = None,
                                 column_names: Optional[Sequence[str]] = None,
                                 datatypes: Optional[Sequence[str]] = None,
                                 filters: Optional[Sequence[pulumi.InputType['GetTargetDatabasesColumnsFilterArgs']]] = None,
                                 schema_name_contains: Optional[str] = None,
                                 schema_names: Optional[Sequence[str]] = None,
                                 table_name_contains: Optional[str] = None,
                                 table_names: Optional[Sequence[str]] = None,
                                 target_database_id: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTargetDatabasesColumnsResult:
    """
    This data source provides the list of Target Databases Columns in Oracle Cloud Infrastructure Data Safe service.

    Returns a list of column metadata objects.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_target_databases_columns = oci.DataSafe.get_target_databases_columns(target_database_id=oci_data_safe_target_database["test_target_database"]["id"],
        column_names=var["target_databases_column_column_name"],
        column_name_contains=var["target_databases_column_column_name_contains"],
        datatypes=var["target_databases_column_datatype"],
        schema_names=var["target_databases_column_schema_name"],
        schema_name_contains=var["target_databases_column_schema_name_contains"],
        table_names=oci_nosql_table["test_table"]["name"],
        table_name_contains=var["target_databases_column_table_name_contains"])
    ```


    :param str column_name_contains: A filter to return only items if column name contains a specific string.
    :param Sequence[str] column_names: A filter to return only a specific column based on column name.
    :param Sequence[str] datatypes: A filter to return only items related to specific datatype.
    :param str schema_name_contains: A filter to return only items if schema name contains a specific string.
    :param Sequence[str] schema_names: A filter to return only items related to specific schema name.
    :param str table_name_contains: A filter to return only items if table name contains a specific string.
    :param Sequence[str] table_names: A filter to return only items related to specific table name.
    :param str target_database_id: The OCID of the Data Safe target database.
    """
    __args__ = dict()
    __args__['columnNameContains'] = column_name_contains
    __args__['columnNames'] = column_names
    __args__['datatypes'] = datatypes
    __args__['filters'] = filters
    __args__['schemaNameContains'] = schema_name_contains
    __args__['schemaNames'] = schema_names
    __args__['tableNameContains'] = table_name_contains
    __args__['tableNames'] = table_names
    __args__['targetDatabaseId'] = target_database_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getTargetDatabasesColumns:getTargetDatabasesColumns', __args__, opts=opts, typ=GetTargetDatabasesColumnsResult).value

    return AwaitableGetTargetDatabasesColumnsResult(
        column_name_contains=pulumi.get(__ret__, 'column_name_contains'),
        column_names=pulumi.get(__ret__, 'column_names'),
        columns=pulumi.get(__ret__, 'columns'),
        datatypes=pulumi.get(__ret__, 'datatypes'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        schema_name_contains=pulumi.get(__ret__, 'schema_name_contains'),
        schema_names=pulumi.get(__ret__, 'schema_names'),
        table_name_contains=pulumi.get(__ret__, 'table_name_contains'),
        table_names=pulumi.get(__ret__, 'table_names'),
        target_database_id=pulumi.get(__ret__, 'target_database_id'))


@_utilities.lift_output_func(get_target_databases_columns)
def get_target_databases_columns_output(column_name_contains: Optional[pulumi.Input[Optional[str]]] = None,
                                        column_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        datatypes: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTargetDatabasesColumnsFilterArgs']]]]] = None,
                                        schema_name_contains: Optional[pulumi.Input[Optional[str]]] = None,
                                        schema_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        table_name_contains: Optional[pulumi.Input[Optional[str]]] = None,
                                        table_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        target_database_id: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTargetDatabasesColumnsResult]:
    """
    This data source provides the list of Target Databases Columns in Oracle Cloud Infrastructure Data Safe service.

    Returns a list of column metadata objects.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_target_databases_columns = oci.DataSafe.get_target_databases_columns(target_database_id=oci_data_safe_target_database["test_target_database"]["id"],
        column_names=var["target_databases_column_column_name"],
        column_name_contains=var["target_databases_column_column_name_contains"],
        datatypes=var["target_databases_column_datatype"],
        schema_names=var["target_databases_column_schema_name"],
        schema_name_contains=var["target_databases_column_schema_name_contains"],
        table_names=oci_nosql_table["test_table"]["name"],
        table_name_contains=var["target_databases_column_table_name_contains"])
    ```


    :param str column_name_contains: A filter to return only items if column name contains a specific string.
    :param Sequence[str] column_names: A filter to return only a specific column based on column name.
    :param Sequence[str] datatypes: A filter to return only items related to specific datatype.
    :param str schema_name_contains: A filter to return only items if schema name contains a specific string.
    :param Sequence[str] schema_names: A filter to return only items related to specific schema name.
    :param str table_name_contains: A filter to return only items if table name contains a specific string.
    :param Sequence[str] table_names: A filter to return only items related to specific table name.
    :param str target_database_id: The OCID of the Data Safe target database.
    """
    ...
