# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetUserAssessmentProfileAnalyticsResult',
    'AwaitableGetUserAssessmentProfileAnalyticsResult',
    'get_user_assessment_profile_analytics',
    'get_user_assessment_profile_analytics_output',
]

@pulumi.output_type
class GetUserAssessmentProfileAnalyticsResult:
    """
    A collection of values returned by getUserAssessmentProfileAnalytics.
    """
    def __init__(__self__, access_level=None, compartment_id=None, compartment_id_in_subtree=None, filters=None, id=None, profile_aggregations=None, profile_name=None, target_id=None, user_assessment_id=None):
        if access_level and not isinstance(access_level, str):
            raise TypeError("Expected argument 'access_level' to be a str")
        pulumi.set(__self__, "access_level", access_level)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compartment_id_in_subtree and not isinstance(compartment_id_in_subtree, bool):
            raise TypeError("Expected argument 'compartment_id_in_subtree' to be a bool")
        pulumi.set(__self__, "compartment_id_in_subtree", compartment_id_in_subtree)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if profile_aggregations and not isinstance(profile_aggregations, list):
            raise TypeError("Expected argument 'profile_aggregations' to be a list")
        pulumi.set(__self__, "profile_aggregations", profile_aggregations)
        if profile_name and not isinstance(profile_name, str):
            raise TypeError("Expected argument 'profile_name' to be a str")
        pulumi.set(__self__, "profile_name", profile_name)
        if target_id and not isinstance(target_id, str):
            raise TypeError("Expected argument 'target_id' to be a str")
        pulumi.set(__self__, "target_id", target_id)
        if user_assessment_id and not isinstance(user_assessment_id, str):
            raise TypeError("Expected argument 'user_assessment_id' to be a str")
        pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compartmentIdInSubtree")
    def compartment_id_in_subtree(self) -> Optional[bool]:
        return pulumi.get(self, "compartment_id_in_subtree")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetUserAssessmentProfileAnalyticsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="profileAggregations")
    def profile_aggregations(self) -> Optional[Sequence['outputs.GetUserAssessmentProfileAnalyticsProfileAggregationResult']]:
        return pulumi.get(self, "profile_aggregations")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[str]:
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> str:
        return pulumi.get(self, "user_assessment_id")


class AwaitableGetUserAssessmentProfileAnalyticsResult(GetUserAssessmentProfileAnalyticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserAssessmentProfileAnalyticsResult(
            access_level=self.access_level,
            compartment_id=self.compartment_id,
            compartment_id_in_subtree=self.compartment_id_in_subtree,
            filters=self.filters,
            id=self.id,
            profile_aggregations=self.profile_aggregations,
            profile_name=self.profile_name,
            target_id=self.target_id,
            user_assessment_id=self.user_assessment_id)


def get_user_assessment_profile_analytics(access_level: Optional[str] = None,
                                          compartment_id: Optional[str] = None,
                                          compartment_id_in_subtree: Optional[bool] = None,
                                          filters: Optional[Sequence[pulumi.InputType['GetUserAssessmentProfileAnalyticsFilterArgs']]] = None,
                                          profile_name: Optional[str] = None,
                                          target_id: Optional[str] = None,
                                          user_assessment_id: Optional[str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserAssessmentProfileAnalyticsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accessLevel'] = access_level
    __args__['compartmentId'] = compartment_id
    __args__['compartmentIdInSubtree'] = compartment_id_in_subtree
    __args__['filters'] = filters
    __args__['profileName'] = profile_name
    __args__['targetId'] = target_id
    __args__['userAssessmentId'] = user_assessment_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getUserAssessmentProfileAnalytics:getUserAssessmentProfileAnalytics', __args__, opts=opts, typ=GetUserAssessmentProfileAnalyticsResult).value

    return AwaitableGetUserAssessmentProfileAnalyticsResult(
        access_level=pulumi.get(__ret__, 'access_level'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compartment_id_in_subtree=pulumi.get(__ret__, 'compartment_id_in_subtree'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        profile_aggregations=pulumi.get(__ret__, 'profile_aggregations'),
        profile_name=pulumi.get(__ret__, 'profile_name'),
        target_id=pulumi.get(__ret__, 'target_id'),
        user_assessment_id=pulumi.get(__ret__, 'user_assessment_id'))


@_utilities.lift_output_func(get_user_assessment_profile_analytics)
def get_user_assessment_profile_analytics_output(access_level: Optional[pulumi.Input[Optional[str]]] = None,
                                                 compartment_id: Optional[pulumi.Input[str]] = None,
                                                 compartment_id_in_subtree: Optional[pulumi.Input[Optional[bool]]] = None,
                                                 filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetUserAssessmentProfileAnalyticsFilterArgs']]]]] = None,
                                                 profile_name: Optional[pulumi.Input[Optional[str]]] = None,
                                                 target_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                 user_assessment_id: Optional[pulumi.Input[str]] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserAssessmentProfileAnalyticsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
