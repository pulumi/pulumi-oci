# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetUserAssessmentUserAnalyticsResult',
    'AwaitableGetUserAssessmentUserAnalyticsResult',
    'get_user_assessment_user_analytics',
    'get_user_assessment_user_analytics_output',
]

@pulumi.output_type
class GetUserAssessmentUserAnalyticsResult:
    """
    A collection of values returned by getUserAssessmentUserAnalytics.
    """
    def __init__(__self__, access_level=None, account_status=None, authentication_type=None, compartment_id_in_subtree=None, filters=None, id=None, target_id=None, time_last_login_greater_than_or_equal_to=None, time_last_login_less_than=None, time_password_last_changed_greater_than_or_equal_to=None, time_password_last_changed_less_than=None, time_user_created_greater_than_or_equal_to=None, time_user_created_less_than=None, user_aggregations=None, user_assessment_id=None, user_category=None, user_key=None, user_name=None):
        if access_level and not isinstance(access_level, str):
            raise TypeError("Expected argument 'access_level' to be a str")
        pulumi.set(__self__, "access_level", access_level)
        if account_status and not isinstance(account_status, str):
            raise TypeError("Expected argument 'account_status' to be a str")
        pulumi.set(__self__, "account_status", account_status)
        if authentication_type and not isinstance(authentication_type, str):
            raise TypeError("Expected argument 'authentication_type' to be a str")
        pulumi.set(__self__, "authentication_type", authentication_type)
        if compartment_id_in_subtree and not isinstance(compartment_id_in_subtree, bool):
            raise TypeError("Expected argument 'compartment_id_in_subtree' to be a bool")
        pulumi.set(__self__, "compartment_id_in_subtree", compartment_id_in_subtree)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if target_id and not isinstance(target_id, str):
            raise TypeError("Expected argument 'target_id' to be a str")
        pulumi.set(__self__, "target_id", target_id)
        if time_last_login_greater_than_or_equal_to and not isinstance(time_last_login_greater_than_or_equal_to, str):
            raise TypeError("Expected argument 'time_last_login_greater_than_or_equal_to' to be a str")
        pulumi.set(__self__, "time_last_login_greater_than_or_equal_to", time_last_login_greater_than_or_equal_to)
        if time_last_login_less_than and not isinstance(time_last_login_less_than, str):
            raise TypeError("Expected argument 'time_last_login_less_than' to be a str")
        pulumi.set(__self__, "time_last_login_less_than", time_last_login_less_than)
        if time_password_last_changed_greater_than_or_equal_to and not isinstance(time_password_last_changed_greater_than_or_equal_to, str):
            raise TypeError("Expected argument 'time_password_last_changed_greater_than_or_equal_to' to be a str")
        pulumi.set(__self__, "time_password_last_changed_greater_than_or_equal_to", time_password_last_changed_greater_than_or_equal_to)
        if time_password_last_changed_less_than and not isinstance(time_password_last_changed_less_than, str):
            raise TypeError("Expected argument 'time_password_last_changed_less_than' to be a str")
        pulumi.set(__self__, "time_password_last_changed_less_than", time_password_last_changed_less_than)
        if time_user_created_greater_than_or_equal_to and not isinstance(time_user_created_greater_than_or_equal_to, str):
            raise TypeError("Expected argument 'time_user_created_greater_than_or_equal_to' to be a str")
        pulumi.set(__self__, "time_user_created_greater_than_or_equal_to", time_user_created_greater_than_or_equal_to)
        if time_user_created_less_than and not isinstance(time_user_created_less_than, str):
            raise TypeError("Expected argument 'time_user_created_less_than' to be a str")
        pulumi.set(__self__, "time_user_created_less_than", time_user_created_less_than)
        if user_aggregations and not isinstance(user_aggregations, list):
            raise TypeError("Expected argument 'user_aggregations' to be a list")
        pulumi.set(__self__, "user_aggregations", user_aggregations)
        if user_assessment_id and not isinstance(user_assessment_id, str):
            raise TypeError("Expected argument 'user_assessment_id' to be a str")
        pulumi.set(__self__, "user_assessment_id", user_assessment_id)
        if user_category and not isinstance(user_category, str):
            raise TypeError("Expected argument 'user_category' to be a str")
        pulumi.set(__self__, "user_category", user_category)
        if user_key and not isinstance(user_key, str):
            raise TypeError("Expected argument 'user_key' to be a str")
        pulumi.set(__self__, "user_key", user_key)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> Optional[str]:
        return pulumi.get(self, "access_level")

    @property
    @pulumi.getter(name="accountStatus")
    def account_status(self) -> Optional[str]:
        return pulumi.get(self, "account_status")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="compartmentIdInSubtree")
    def compartment_id_in_subtree(self) -> Optional[bool]:
        return pulumi.get(self, "compartment_id_in_subtree")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetUserAssessmentUserAnalyticsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeLastLoginGreaterThanOrEqualTo")
    def time_last_login_greater_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "time_last_login_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="timeLastLoginLessThan")
    def time_last_login_less_than(self) -> Optional[str]:
        return pulumi.get(self, "time_last_login_less_than")

    @property
    @pulumi.getter(name="timePasswordLastChangedGreaterThanOrEqualTo")
    def time_password_last_changed_greater_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "time_password_last_changed_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="timePasswordLastChangedLessThan")
    def time_password_last_changed_less_than(self) -> Optional[str]:
        return pulumi.get(self, "time_password_last_changed_less_than")

    @property
    @pulumi.getter(name="timeUserCreatedGreaterThanOrEqualTo")
    def time_user_created_greater_than_or_equal_to(self) -> Optional[str]:
        return pulumi.get(self, "time_user_created_greater_than_or_equal_to")

    @property
    @pulumi.getter(name="timeUserCreatedLessThan")
    def time_user_created_less_than(self) -> Optional[str]:
        return pulumi.get(self, "time_user_created_less_than")

    @property
    @pulumi.getter(name="userAggregations")
    def user_aggregations(self) -> Sequence['outputs.GetUserAssessmentUserAnalyticsUserAggregationResult']:
        """
        The list of user_aggregations.
        """
        return pulumi.get(self, "user_aggregations")

    @property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> str:
        return pulumi.get(self, "user_assessment_id")

    @property
    @pulumi.getter(name="userCategory")
    def user_category(self) -> Optional[str]:
        return pulumi.get(self, "user_category")

    @property
    @pulumi.getter(name="userKey")
    def user_key(self) -> Optional[str]:
        return pulumi.get(self, "user_key")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


class AwaitableGetUserAssessmentUserAnalyticsResult(GetUserAssessmentUserAnalyticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserAssessmentUserAnalyticsResult(
            access_level=self.access_level,
            account_status=self.account_status,
            authentication_type=self.authentication_type,
            compartment_id_in_subtree=self.compartment_id_in_subtree,
            filters=self.filters,
            id=self.id,
            target_id=self.target_id,
            time_last_login_greater_than_or_equal_to=self.time_last_login_greater_than_or_equal_to,
            time_last_login_less_than=self.time_last_login_less_than,
            time_password_last_changed_greater_than_or_equal_to=self.time_password_last_changed_greater_than_or_equal_to,
            time_password_last_changed_less_than=self.time_password_last_changed_less_than,
            time_user_created_greater_than_or_equal_to=self.time_user_created_greater_than_or_equal_to,
            time_user_created_less_than=self.time_user_created_less_than,
            user_aggregations=self.user_aggregations,
            user_assessment_id=self.user_assessment_id,
            user_category=self.user_category,
            user_key=self.user_key,
            user_name=self.user_name)


def get_user_assessment_user_analytics(access_level: Optional[str] = None,
                                       account_status: Optional[str] = None,
                                       authentication_type: Optional[str] = None,
                                       compartment_id_in_subtree: Optional[bool] = None,
                                       filters: Optional[Sequence[pulumi.InputType['GetUserAssessmentUserAnalyticsFilterArgs']]] = None,
                                       target_id: Optional[str] = None,
                                       time_last_login_greater_than_or_equal_to: Optional[str] = None,
                                       time_last_login_less_than: Optional[str] = None,
                                       time_password_last_changed_greater_than_or_equal_to: Optional[str] = None,
                                       time_password_last_changed_less_than: Optional[str] = None,
                                       time_user_created_greater_than_or_equal_to: Optional[str] = None,
                                       time_user_created_less_than: Optional[str] = None,
                                       user_assessment_id: Optional[str] = None,
                                       user_category: Optional[str] = None,
                                       user_key: Optional[str] = None,
                                       user_name: Optional[str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserAssessmentUserAnalyticsResult:
    """
    This data source provides the list of User Assessment User Analytics in Oracle Cloud Infrastructure Data Safe service.

    Gets a list of aggregated user details from the specified user assessment. This provides information about the overall state
    of database user security.  For example, the user details include how many users have the DBA role and how many users are in
    the critical category. This data is especially useful content for dashboards or to support analytics.

    When you perform the ListUserAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
    parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
    permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
    root compartment. If the requestor does not have access to at least one subcompartment of the compartment specified by
    compartmentId, then "Not Authorized" is returned.

    The parameter compartmentIdInSubtree applies when you perform ListUserAnalytics on the compartmentId passed and when it is
    set to true, the entire hierarchy of compartments can be returned.

    To use ListUserAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
    set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_user_assessment_user_analytics = oci.DataSafe.get_user_assessment_user_analytics(user_assessment_id=oci_data_safe_user_assessment["test_user_assessment"]["id"],
        access_level=var["user_assessment_user_analytic_access_level"],
        account_status=var["user_assessment_user_analytic_account_status"],
        authentication_type=var["user_assessment_user_analytic_authentication_type"],
        compartment_id_in_subtree=var["user_assessment_user_analytic_compartment_id_in_subtree"],
        target_id=oci_cloud_guard_target["test_target"]["id"],
        time_last_login_greater_than_or_equal_to=var["user_assessment_user_analytic_time_last_login_greater_than_or_equal_to"],
        time_last_login_less_than=var["user_assessment_user_analytic_time_last_login_less_than"],
        time_password_last_changed_greater_than_or_equal_to=var["user_assessment_user_analytic_time_password_last_changed_greater_than_or_equal_to"],
        time_password_last_changed_less_than=var["user_assessment_user_analytic_time_password_last_changed_less_than"],
        time_user_created_greater_than_or_equal_to=var["user_assessment_user_analytic_time_user_created_greater_than_or_equal_to"],
        time_user_created_less_than=var["user_assessment_user_analytic_time_user_created_less_than"],
        user_category=var["user_assessment_user_analytic_user_category"],
        user_key=var["user_assessment_user_analytic_user_key"],
        user_name=oci_identity_user["test_user"]["name"])
    ```


    :param str access_level: Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
    :param str account_status: A filter to return only items that match the specified account status.
    :param str authentication_type: A filter to return only items that match the specified authentication type.
    :param bool compartment_id_in_subtree: Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
    :param str target_id: A filter to return only items related to a specific target OCID.
    :param str time_last_login_greater_than_or_equal_to: A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str time_last_login_less_than: A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
    :param str time_password_last_changed_greater_than_or_equal_to: A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str time_password_last_changed_less_than: A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str time_user_created_greater_than_or_equal_to: A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
    :param str time_user_created_less_than: A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
    :param str user_assessment_id: The OCID of the user assessment.
    :param str user_category: A filter to return only items that match the specified user category.
    :param str user_key: A filter to return only items that match the specified user key.
    :param str user_name: A filter to return only items that match the specified user name.
    """
    __args__ = dict()
    __args__['accessLevel'] = access_level
    __args__['accountStatus'] = account_status
    __args__['authenticationType'] = authentication_type
    __args__['compartmentIdInSubtree'] = compartment_id_in_subtree
    __args__['filters'] = filters
    __args__['targetId'] = target_id
    __args__['timeLastLoginGreaterThanOrEqualTo'] = time_last_login_greater_than_or_equal_to
    __args__['timeLastLoginLessThan'] = time_last_login_less_than
    __args__['timePasswordLastChangedGreaterThanOrEqualTo'] = time_password_last_changed_greater_than_or_equal_to
    __args__['timePasswordLastChangedLessThan'] = time_password_last_changed_less_than
    __args__['timeUserCreatedGreaterThanOrEqualTo'] = time_user_created_greater_than_or_equal_to
    __args__['timeUserCreatedLessThan'] = time_user_created_less_than
    __args__['userAssessmentId'] = user_assessment_id
    __args__['userCategory'] = user_category
    __args__['userKey'] = user_key
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DataSafe/getUserAssessmentUserAnalytics:getUserAssessmentUserAnalytics', __args__, opts=opts, typ=GetUserAssessmentUserAnalyticsResult).value

    return AwaitableGetUserAssessmentUserAnalyticsResult(
        access_level=pulumi.get(__ret__, 'access_level'),
        account_status=pulumi.get(__ret__, 'account_status'),
        authentication_type=pulumi.get(__ret__, 'authentication_type'),
        compartment_id_in_subtree=pulumi.get(__ret__, 'compartment_id_in_subtree'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        target_id=pulumi.get(__ret__, 'target_id'),
        time_last_login_greater_than_or_equal_to=pulumi.get(__ret__, 'time_last_login_greater_than_or_equal_to'),
        time_last_login_less_than=pulumi.get(__ret__, 'time_last_login_less_than'),
        time_password_last_changed_greater_than_or_equal_to=pulumi.get(__ret__, 'time_password_last_changed_greater_than_or_equal_to'),
        time_password_last_changed_less_than=pulumi.get(__ret__, 'time_password_last_changed_less_than'),
        time_user_created_greater_than_or_equal_to=pulumi.get(__ret__, 'time_user_created_greater_than_or_equal_to'),
        time_user_created_less_than=pulumi.get(__ret__, 'time_user_created_less_than'),
        user_aggregations=pulumi.get(__ret__, 'user_aggregations'),
        user_assessment_id=pulumi.get(__ret__, 'user_assessment_id'),
        user_category=pulumi.get(__ret__, 'user_category'),
        user_key=pulumi.get(__ret__, 'user_key'),
        user_name=pulumi.get(__ret__, 'user_name'))


@_utilities.lift_output_func(get_user_assessment_user_analytics)
def get_user_assessment_user_analytics_output(access_level: Optional[pulumi.Input[Optional[str]]] = None,
                                              account_status: Optional[pulumi.Input[Optional[str]]] = None,
                                              authentication_type: Optional[pulumi.Input[Optional[str]]] = None,
                                              compartment_id_in_subtree: Optional[pulumi.Input[Optional[bool]]] = None,
                                              filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetUserAssessmentUserAnalyticsFilterArgs']]]]] = None,
                                              target_id: Optional[pulumi.Input[Optional[str]]] = None,
                                              time_last_login_greater_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                              time_last_login_less_than: Optional[pulumi.Input[Optional[str]]] = None,
                                              time_password_last_changed_greater_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                              time_password_last_changed_less_than: Optional[pulumi.Input[Optional[str]]] = None,
                                              time_user_created_greater_than_or_equal_to: Optional[pulumi.Input[Optional[str]]] = None,
                                              time_user_created_less_than: Optional[pulumi.Input[Optional[str]]] = None,
                                              user_assessment_id: Optional[pulumi.Input[str]] = None,
                                              user_category: Optional[pulumi.Input[Optional[str]]] = None,
                                              user_key: Optional[pulumi.Input[Optional[str]]] = None,
                                              user_name: Optional[pulumi.Input[Optional[str]]] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserAssessmentUserAnalyticsResult]:
    """
    This data source provides the list of User Assessment User Analytics in Oracle Cloud Infrastructure Data Safe service.

    Gets a list of aggregated user details from the specified user assessment. This provides information about the overall state
    of database user security.  For example, the user details include how many users have the DBA role and how many users are in
    the critical category. This data is especially useful content for dashboards or to support analytics.

    When you perform the ListUserAnalytics operation, if the parameter compartmentIdInSubtree is set to "true," and if the
    parameter accessLevel is set to ACCESSIBLE, then the operation returns compartments in which the requestor has INSPECT
    permissions on at least one resource, directly or indirectly (in subcompartments). If the operation is performed at the
    root compartment. If the requestor does not have access to at least one subcompartment of the compartment specified by
    compartmentId, then "Not Authorized" is returned.

    The parameter compartmentIdInSubtree applies when you perform ListUserAnalytics on the compartmentId passed and when it is
    set to true, the entire hierarchy of compartments can be returned.

    To use ListUserAnalytics to get a full list of all compartments and subcompartments in the tenancy from the root compartment,
    set the parameter compartmentIdInSubtree to true and accessLevel to ACCESSIBLE.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_user_assessment_user_analytics = oci.DataSafe.get_user_assessment_user_analytics(user_assessment_id=oci_data_safe_user_assessment["test_user_assessment"]["id"],
        access_level=var["user_assessment_user_analytic_access_level"],
        account_status=var["user_assessment_user_analytic_account_status"],
        authentication_type=var["user_assessment_user_analytic_authentication_type"],
        compartment_id_in_subtree=var["user_assessment_user_analytic_compartment_id_in_subtree"],
        target_id=oci_cloud_guard_target["test_target"]["id"],
        time_last_login_greater_than_or_equal_to=var["user_assessment_user_analytic_time_last_login_greater_than_or_equal_to"],
        time_last_login_less_than=var["user_assessment_user_analytic_time_last_login_less_than"],
        time_password_last_changed_greater_than_or_equal_to=var["user_assessment_user_analytic_time_password_last_changed_greater_than_or_equal_to"],
        time_password_last_changed_less_than=var["user_assessment_user_analytic_time_password_last_changed_less_than"],
        time_user_created_greater_than_or_equal_to=var["user_assessment_user_analytic_time_user_created_greater_than_or_equal_to"],
        time_user_created_less_than=var["user_assessment_user_analytic_time_user_created_less_than"],
        user_category=var["user_assessment_user_analytic_user_category"],
        user_key=var["user_assessment_user_analytic_user_key"],
        user_name=oci_identity_user["test_user"]["name"])
    ```


    :param str access_level: Valid values are RESTRICTED and ACCESSIBLE. Default is RESTRICTED. Setting this to ACCESSIBLE returns only those compartments for which the user has INSPECT permissions directly or indirectly (permissions can be on a resource in a subcompartment). When set to RESTRICTED permissions are checked and no partial results are displayed.
    :param str account_status: A filter to return only items that match the specified account status.
    :param str authentication_type: A filter to return only items that match the specified authentication type.
    :param bool compartment_id_in_subtree: Default is false. When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned. Depends on the 'accessLevel' setting.
    :param str target_id: A filter to return only items related to a specific target OCID.
    :param str time_last_login_greater_than_or_equal_to: A filter to return users whose last login time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str time_last_login_less_than: A filter to return users whose last login time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
    :param str time_password_last_changed_greater_than_or_equal_to: A filter to return users whose last password change in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str time_password_last_changed_less_than: A filter to return users whose last password change in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
           
           **Example:** 2016-12-19T16:39:57.600Z
    :param str time_user_created_greater_than_or_equal_to: A filter to return users whose creation time in the database is greater than or equal to the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
    :param str time_user_created_less_than: A filter to return users whose creation time in the database is less than the date and time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). **Example:** 2016-12-19T16:39:57.600Z
    :param str user_assessment_id: The OCID of the user assessment.
    :param str user_category: A filter to return only items that match the specified user category.
    :param str user_key: A filter to return only items that match the specified user key.
    :param str user_name: A filter to return only items that match the specified user name.
    """
    ...
