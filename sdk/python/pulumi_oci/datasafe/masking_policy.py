# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MaskingPolicyArgs', 'MaskingPolicy']

@pulumi.input_type
class MaskingPolicyArgs:
    def __init__(__self__, *,
                 column_sources: pulumi.Input[Sequence[pulumi.Input['MaskingPolicyColumnSourceArgs']]],
                 compartment_id: pulumi.Input[str],
                 add_masking_columns_from_sdm_trigger: Optional[pulumi.Input[int]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_drop_temp_tables_enabled: Optional[pulumi.Input[bool]] = None,
                 is_redo_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 is_refresh_stats_enabled: Optional[pulumi.Input[bool]] = None,
                 parallel_degree: Optional[pulumi.Input[str]] = None,
                 post_masking_script: Optional[pulumi.Input[str]] = None,
                 pre_masking_script: Optional[pulumi.Input[str]] = None,
                 recompile: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MaskingPolicy resource.
        """
        pulumi.set(__self__, "column_sources", column_sources)
        pulumi.set(__self__, "compartment_id", compartment_id)
        if add_masking_columns_from_sdm_trigger is not None:
            pulumi.set(__self__, "add_masking_columns_from_sdm_trigger", add_masking_columns_from_sdm_trigger)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_drop_temp_tables_enabled is not None:
            pulumi.set(__self__, "is_drop_temp_tables_enabled", is_drop_temp_tables_enabled)
        if is_redo_logging_enabled is not None:
            pulumi.set(__self__, "is_redo_logging_enabled", is_redo_logging_enabled)
        if is_refresh_stats_enabled is not None:
            pulumi.set(__self__, "is_refresh_stats_enabled", is_refresh_stats_enabled)
        if parallel_degree is not None:
            pulumi.set(__self__, "parallel_degree", parallel_degree)
        if post_masking_script is not None:
            pulumi.set(__self__, "post_masking_script", post_masking_script)
        if pre_masking_script is not None:
            pulumi.set(__self__, "pre_masking_script", pre_masking_script)
        if recompile is not None:
            pulumi.set(__self__, "recompile", recompile)

    @property
    @pulumi.getter(name="columnSources")
    def column_sources(self) -> pulumi.Input[Sequence[pulumi.Input['MaskingPolicyColumnSourceArgs']]]:
        return pulumi.get(self, "column_sources")

    @column_sources.setter
    def column_sources(self, value: pulumi.Input[Sequence[pulumi.Input['MaskingPolicyColumnSourceArgs']]]):
        pulumi.set(self, "column_sources", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="addMaskingColumnsFromSdmTrigger")
    def add_masking_columns_from_sdm_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "add_masking_columns_from_sdm_trigger")

    @add_masking_columns_from_sdm_trigger.setter
    def add_masking_columns_from_sdm_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "add_masking_columns_from_sdm_trigger", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isDropTempTablesEnabled")
    def is_drop_temp_tables_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_drop_temp_tables_enabled")

    @is_drop_temp_tables_enabled.setter
    def is_drop_temp_tables_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_drop_temp_tables_enabled", value)

    @property
    @pulumi.getter(name="isRedoLoggingEnabled")
    def is_redo_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_redo_logging_enabled")

    @is_redo_logging_enabled.setter
    def is_redo_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_redo_logging_enabled", value)

    @property
    @pulumi.getter(name="isRefreshStatsEnabled")
    def is_refresh_stats_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_refresh_stats_enabled")

    @is_refresh_stats_enabled.setter
    def is_refresh_stats_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_refresh_stats_enabled", value)

    @property
    @pulumi.getter(name="parallelDegree")
    def parallel_degree(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parallel_degree")

    @parallel_degree.setter
    def parallel_degree(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parallel_degree", value)

    @property
    @pulumi.getter(name="postMaskingScript")
    def post_masking_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_masking_script")

    @post_masking_script.setter
    def post_masking_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_masking_script", value)

    @property
    @pulumi.getter(name="preMaskingScript")
    def pre_masking_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_masking_script")

    @pre_masking_script.setter
    def pre_masking_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_masking_script", value)

    @property
    @pulumi.getter
    def recompile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recompile")

    @recompile.setter
    def recompile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recompile", value)


@pulumi.input_type
class _MaskingPolicyState:
    def __init__(__self__, *,
                 add_masking_columns_from_sdm_trigger: Optional[pulumi.Input[int]] = None,
                 column_sources: Optional[pulumi.Input[Sequence[pulumi.Input['MaskingPolicyColumnSourceArgs']]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_drop_temp_tables_enabled: Optional[pulumi.Input[bool]] = None,
                 is_redo_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 is_refresh_stats_enabled: Optional[pulumi.Input[bool]] = None,
                 parallel_degree: Optional[pulumi.Input[str]] = None,
                 post_masking_script: Optional[pulumi.Input[str]] = None,
                 pre_masking_script: Optional[pulumi.Input[str]] = None,
                 recompile: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MaskingPolicy resources.
        """
        if add_masking_columns_from_sdm_trigger is not None:
            pulumi.set(__self__, "add_masking_columns_from_sdm_trigger", add_masking_columns_from_sdm_trigger)
        if column_sources is not None:
            pulumi.set(__self__, "column_sources", column_sources)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_drop_temp_tables_enabled is not None:
            pulumi.set(__self__, "is_drop_temp_tables_enabled", is_drop_temp_tables_enabled)
        if is_redo_logging_enabled is not None:
            pulumi.set(__self__, "is_redo_logging_enabled", is_redo_logging_enabled)
        if is_refresh_stats_enabled is not None:
            pulumi.set(__self__, "is_refresh_stats_enabled", is_refresh_stats_enabled)
        if parallel_degree is not None:
            pulumi.set(__self__, "parallel_degree", parallel_degree)
        if post_masking_script is not None:
            pulumi.set(__self__, "post_masking_script", post_masking_script)
        if pre_masking_script is not None:
            pulumi.set(__self__, "pre_masking_script", pre_masking_script)
        if recompile is not None:
            pulumi.set(__self__, "recompile", recompile)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="addMaskingColumnsFromSdmTrigger")
    def add_masking_columns_from_sdm_trigger(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "add_masking_columns_from_sdm_trigger")

    @add_masking_columns_from_sdm_trigger.setter
    def add_masking_columns_from_sdm_trigger(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "add_masking_columns_from_sdm_trigger", value)

    @property
    @pulumi.getter(name="columnSources")
    def column_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MaskingPolicyColumnSourceArgs']]]]:
        return pulumi.get(self, "column_sources")

    @column_sources.setter
    def column_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MaskingPolicyColumnSourceArgs']]]]):
        pulumi.set(self, "column_sources", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isDropTempTablesEnabled")
    def is_drop_temp_tables_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_drop_temp_tables_enabled")

    @is_drop_temp_tables_enabled.setter
    def is_drop_temp_tables_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_drop_temp_tables_enabled", value)

    @property
    @pulumi.getter(name="isRedoLoggingEnabled")
    def is_redo_logging_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_redo_logging_enabled")

    @is_redo_logging_enabled.setter
    def is_redo_logging_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_redo_logging_enabled", value)

    @property
    @pulumi.getter(name="isRefreshStatsEnabled")
    def is_refresh_stats_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_refresh_stats_enabled")

    @is_refresh_stats_enabled.setter
    def is_refresh_stats_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_refresh_stats_enabled", value)

    @property
    @pulumi.getter(name="parallelDegree")
    def parallel_degree(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parallel_degree")

    @parallel_degree.setter
    def parallel_degree(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parallel_degree", value)

    @property
    @pulumi.getter(name="postMaskingScript")
    def post_masking_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "post_masking_script")

    @post_masking_script.setter
    def post_masking_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_masking_script", value)

    @property
    @pulumi.getter(name="preMaskingScript")
    def pre_masking_script(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_masking_script")

    @pre_masking_script.setter
    def pre_masking_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_masking_script", value)

    @property
    @pulumi.getter
    def recompile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "recompile")

    @recompile.setter
    def recompile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recompile", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class MaskingPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_masking_columns_from_sdm_trigger: Optional[pulumi.Input[int]] = None,
                 column_sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MaskingPolicyColumnSourceArgs']]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_drop_temp_tables_enabled: Optional[pulumi.Input[bool]] = None,
                 is_redo_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 is_refresh_stats_enabled: Optional[pulumi.Input[bool]] = None,
                 parallel_degree: Optional[pulumi.Input[str]] = None,
                 post_masking_script: Optional[pulumi.Input[str]] = None,
                 pre_masking_script: Optional[pulumi.Input[str]] = None,
                 recompile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a MaskingPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MaskingPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MaskingPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MaskingPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MaskingPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_masking_columns_from_sdm_trigger: Optional[pulumi.Input[int]] = None,
                 column_sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MaskingPolicyColumnSourceArgs']]]]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_drop_temp_tables_enabled: Optional[pulumi.Input[bool]] = None,
                 is_redo_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 is_refresh_stats_enabled: Optional[pulumi.Input[bool]] = None,
                 parallel_degree: Optional[pulumi.Input[str]] = None,
                 post_masking_script: Optional[pulumi.Input[str]] = None,
                 pre_masking_script: Optional[pulumi.Input[str]] = None,
                 recompile: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MaskingPolicyArgs.__new__(MaskingPolicyArgs)

            __props__.__dict__["add_masking_columns_from_sdm_trigger"] = add_masking_columns_from_sdm_trigger
            if column_sources is None and not opts.urn:
                raise TypeError("Missing required property 'column_sources'")
            __props__.__dict__["column_sources"] = column_sources
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["is_drop_temp_tables_enabled"] = is_drop_temp_tables_enabled
            __props__.__dict__["is_redo_logging_enabled"] = is_redo_logging_enabled
            __props__.__dict__["is_refresh_stats_enabled"] = is_refresh_stats_enabled
            __props__.__dict__["parallel_degree"] = parallel_degree
            __props__.__dict__["post_masking_script"] = post_masking_script
            __props__.__dict__["pre_masking_script"] = pre_masking_script
            __props__.__dict__["recompile"] = recompile
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(MaskingPolicy, __self__).__init__(
            'oci:DataSafe/maskingPolicy:MaskingPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_masking_columns_from_sdm_trigger: Optional[pulumi.Input[int]] = None,
            column_sources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MaskingPolicyColumnSourceArgs']]]]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_drop_temp_tables_enabled: Optional[pulumi.Input[bool]] = None,
            is_redo_logging_enabled: Optional[pulumi.Input[bool]] = None,
            is_refresh_stats_enabled: Optional[pulumi.Input[bool]] = None,
            parallel_degree: Optional[pulumi.Input[str]] = None,
            post_masking_script: Optional[pulumi.Input[str]] = None,
            pre_masking_script: Optional[pulumi.Input[str]] = None,
            recompile: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'MaskingPolicy':
        """
        Get an existing MaskingPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MaskingPolicyState.__new__(_MaskingPolicyState)

        __props__.__dict__["add_masking_columns_from_sdm_trigger"] = add_masking_columns_from_sdm_trigger
        __props__.__dict__["column_sources"] = column_sources
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_drop_temp_tables_enabled"] = is_drop_temp_tables_enabled
        __props__.__dict__["is_redo_logging_enabled"] = is_redo_logging_enabled
        __props__.__dict__["is_refresh_stats_enabled"] = is_refresh_stats_enabled
        __props__.__dict__["parallel_degree"] = parallel_degree
        __props__.__dict__["post_masking_script"] = post_masking_script
        __props__.__dict__["pre_masking_script"] = pre_masking_script
        __props__.__dict__["recompile"] = recompile
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return MaskingPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addMaskingColumnsFromSdmTrigger")
    def add_masking_columns_from_sdm_trigger(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "add_masking_columns_from_sdm_trigger")

    @property
    @pulumi.getter(name="columnSources")
    def column_sources(self) -> pulumi.Output[Sequence['outputs.MaskingPolicyColumnSource']]:
        return pulumi.get(self, "column_sources")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isDropTempTablesEnabled")
    def is_drop_temp_tables_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_drop_temp_tables_enabled")

    @property
    @pulumi.getter(name="isRedoLoggingEnabled")
    def is_redo_logging_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_redo_logging_enabled")

    @property
    @pulumi.getter(name="isRefreshStatsEnabled")
    def is_refresh_stats_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "is_refresh_stats_enabled")

    @property
    @pulumi.getter(name="parallelDegree")
    def parallel_degree(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "parallel_degree")

    @property
    @pulumi.getter(name="postMaskingScript")
    def post_masking_script(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "post_masking_script")

    @property
    @pulumi.getter(name="preMaskingScript")
    def pre_masking_script(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "pre_masking_script")

    @property
    @pulumi.getter
    def recompile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "recompile")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

