# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AlertPolicyAlertPolicyRuleDetail',
    'AuditPolicyAuditCondition',
    'AuditPolicyAuditConditionEnableCondition',
    'AuditPolicyAuditSpecification',
    'AuditPolicyManagementAuditCondition',
    'AuditPolicyManagementAuditConditionEnableCondition',
    'AuditPolicyManagementAuditSpecification',
    'AuditProfileAuditTrail',
    'CalculateAuditVolumeAvailableAvailableAuditVolume',
    'CalculateAuditVolumeCollectedCollectedAuditVolume',
    'DataSafeConfigurationGlobalSetting',
    'DatabaseSecurityConfigManagementSqlFirewallConfig',
    'DatabaseSecurityConfigSqlFirewallConfig',
    'DiscoveryJobsResultModifiedAttribute',
    'DiscoveryModTablesForDiscovery',
    'LibraryMasingFormatFormatEntry',
    'MaskingPoliciesMaskingColumnMaskingFormat',
    'MaskingPoliciesMaskingColumnMaskingFormatFormatEntry',
    'MaskingPolicyColumnSource',
    'ReportDefinitionColumnFilter',
    'ReportDefinitionColumnInfo',
    'ReportDefinitionColumnSorting',
    'ReportDefinitionSummary',
    'SecurityAssessmentStatistic',
    'SecurityAssessmentStatisticAdvisory',
    'SecurityAssessmentStatisticDeferred',
    'SecurityAssessmentStatisticEvaluate',
    'SecurityAssessmentStatisticHighRisk',
    'SecurityAssessmentStatisticLowRisk',
    'SecurityAssessmentStatisticMediumRisk',
    'SecurityAssessmentStatisticPass',
    'SensitiveDataModelReferentialRelationChild',
    'SensitiveDataModelReferentialRelationParent',
    'SensitiveDataModelTablesForDiscovery',
    'SensitiveTypeGroupGroupedSensitiveTypeItem',
    'SensitiveTypeGroupGroupedSensitiveTypePatchOperation',
    'TargetDatabaseConnectionOption',
    'TargetDatabaseCredentials',
    'TargetDatabaseDatabaseDetails',
    'TargetDatabasePeerTargetDatabase',
    'TargetDatabasePeerTargetDatabaseDatabaseDetail',
    'TargetDatabasePeerTargetDatabaseDatabaseDetails',
    'TargetDatabasePeerTargetDatabaseDetail',
    'TargetDatabasePeerTargetDatabaseDetailDatabaseDetails',
    'TargetDatabasePeerTargetDatabaseDetailTlsConfig',
    'TargetDatabasePeerTargetDatabaseTlsConfig',
    'TargetDatabaseTlsConfig',
    'UserAssessmentIgnoredTarget',
    'GetAlertAnalyticItemResult',
    'GetAlertAnalyticItemDimensionResult',
    'GetAlertPoliciesAlertPolicyCollectionResult',
    'GetAlertPoliciesAlertPolicyCollectionItemResult',
    'GetAlertPoliciesAlertPolicyCollectionItemAlertPolicyRuleDetailResult',
    'GetAlertPoliciesFilterResult',
    'GetAlertPolicyAlertPolicyRuleDetailResult',
    'GetAlertPolicyRulesAlertPolicyRuleCollectionResult',
    'GetAlertPolicyRulesAlertPolicyRuleCollectionItemResult',
    'GetAlertPolicyRulesFilterResult',
    'GetAlertsAlertCollectionResult',
    'GetAlertsAlertCollectionItemResult',
    'GetAlertsFilterResult',
    'GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionResult',
    'GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItemResult',
    'GetAuditArchiveRetrievalsFilterResult',
    'GetAuditEventAnalyticItemResult',
    'GetAuditEventAnalyticItemDimensionResult',
    'GetAuditEventItemResult',
    'GetAuditEventsAuditEventCollectionResult',
    'GetAuditEventsAuditEventCollectionItemResult',
    'GetAuditEventsFilterResult',
    'GetAuditPoliciesAuditPolicyCollectionResult',
    'GetAuditPoliciesAuditPolicyCollectionItemResult',
    'GetAuditPoliciesAuditPolicyCollectionItemAuditConditionResult',
    'GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableConditionResult',
    'GetAuditPoliciesAuditPolicyCollectionItemAuditSpecificationResult',
    'GetAuditPoliciesFilterResult',
    'GetAuditPolicyAuditConditionResult',
    'GetAuditPolicyAuditConditionEnableConditionResult',
    'GetAuditPolicyAuditSpecificationResult',
    'GetAuditProfileAnalyticItemResult',
    'GetAuditProfileAnalyticItemDimensionResult',
    'GetAuditProfileAuditTrailResult',
    'GetAuditProfileAvailableAuditVolumeItemResult',
    'GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionResult',
    'GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemResult',
    'GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItemResult',
    'GetAuditProfileAvailableAuditVolumesFilterResult',
    'GetAuditProfileCollectedAuditVolumeItemResult',
    'GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionResult',
    'GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemResult',
    'GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItemResult',
    'GetAuditProfileCollectedAuditVolumesFilterResult',
    'GetAuditProfilesAuditProfileCollectionResult',
    'GetAuditProfilesAuditProfileCollectionItemResult',
    'GetAuditProfilesAuditProfileCollectionItemAuditTrailResult',
    'GetAuditProfilesFilterResult',
    'GetAuditTrailAnalyticItemResult',
    'GetAuditTrailAnalyticItemDimensionResult',
    'GetAuditTrailsAuditTrailCollectionResult',
    'GetAuditTrailsAuditTrailCollectionItemResult',
    'GetAuditTrailsFilterResult',
    'GetCompatibleFormatsForDataTypeFormatsForDataTypeResult',
    'GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormatResult',
    'GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeResult',
    'GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormatResult',
    'GetDataSafeConfigurationGlobalSettingResult',
    'GetDataSafePrivateEndpointsDataSafePrivateEndpointResult',
    'GetDataSafePrivateEndpointsFilterResult',
    'GetDatabaseSecurityConfigSqlFirewallConfigResult',
    'GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionResult',
    'GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemResult',
    'GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemSqlFirewallConfigResult',
    'GetDatabaseSecurityConfigsFilterResult',
    'GetDiscoveryAnalyticItemResult',
    'GetDiscoveryAnalyticItemDimensionResult',
    'GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionResult',
    'GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemResult',
    'GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimensionResult',
    'GetDiscoveryAnalyticsFilterResult',
    'GetDiscoveryJobTablesForDiscoveryResult',
    'GetDiscoveryJobsResultModifiedAttributeResult',
    'GetDiscoveryJobsResultsDiscoveryJobResultCollectionResult',
    'GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemResult',
    'GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttributeResult',
    'GetDiscoveryJobsResultsFilterResult',
    'GetLibraryMaskingFormatFormatEntryResult',
    'GetLibraryMaskingFormatsFilterResult',
    'GetLibraryMaskingFormatsLibraryMaskingFormatCollectionResult',
    'GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemResult',
    'GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult',
    'GetListUserGrantsFilterResult',
    'GetListUserGrantsGrantResult',
    'GetMaskingAnalyticItemResult',
    'GetMaskingAnalyticItemDimensionResult',
    'GetMaskingAnalyticsFilterResult',
    'GetMaskingAnalyticsMaskingAnalyticsCollectionResult',
    'GetMaskingAnalyticsMaskingAnalyticsCollectionItemResult',
    'GetMaskingAnalyticsMaskingAnalyticsCollectionItemDimensionResult',
    'GetMaskingPoliciesFilterResult',
    'GetMaskingPoliciesMaskingColumnMaskingFormatResult',
    'GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntryResult',
    'GetMaskingPoliciesMaskingColumnsFilterResult',
    'GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionResult',
    'GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemResult',
    'GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatResult',
    'GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntryResult',
    'GetMaskingPoliciesMaskingPolicyCollectionResult',
    'GetMaskingPoliciesMaskingPolicyCollectionItemResult',
    'GetMaskingPoliciesMaskingPolicyCollectionItemColumnSourceResult',
    'GetMaskingPolicyColumnSourceResult',
    'GetMaskingPolicyHealthReportLogsFilterResult',
    'GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionResult',
    'GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItemResult',
    'GetMaskingPolicyHealthReportsFilterResult',
    'GetMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionResult',
    'GetMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionItemResult',
    'GetMaskingPolicyMaskingObjectsFilterResult',
    'GetMaskingPolicyMaskingObjectsMaskingObjectCollectionResult',
    'GetMaskingPolicyMaskingObjectsMaskingObjectCollectionItemResult',
    'GetMaskingPolicyMaskingSchemasFilterResult',
    'GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionResult',
    'GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionItemResult',
    'GetMaskingPolicyReferentialRelationsFilterResult',
    'GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionResult',
    'GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemResult',
    'GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChildResult',
    'GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParentResult',
    'GetMaskingReportMaskedColumnsFilterResult',
    'GetMaskingReportMaskedColumnsMaskedColumnCollectionResult',
    'GetMaskingReportMaskedColumnsMaskedColumnCollectionItemResult',
    'GetMaskingReportMaskingErrorsFilterResult',
    'GetMaskingReportMaskingErrorsMaskingErrorCollectionResult',
    'GetMaskingReportMaskingErrorsMaskingErrorCollectionItemResult',
    'GetMaskingReportsFilterResult',
    'GetMaskingReportsMaskedColumnItemResult',
    'GetMaskingReportsMaskingReportCollectionResult',
    'GetMaskingReportsMaskingReportCollectionItemResult',
    'GetOnpremConnectorsFilterResult',
    'GetOnpremConnectorsOnPremConnectorResult',
    'GetReportDefinitionColumnFilterResult',
    'GetReportDefinitionColumnInfoResult',
    'GetReportDefinitionColumnSortingResult',
    'GetReportDefinitionSummaryResult',
    'GetReportDefinitionsFilterResult',
    'GetReportDefinitionsReportDefinitionCollectionResult',
    'GetReportDefinitionsReportDefinitionCollectionItemResult',
    'GetReportDefinitionsReportDefinitionCollectionItemColumnFilterResult',
    'GetReportDefinitionsReportDefinitionCollectionItemColumnInfoResult',
    'GetReportDefinitionsReportDefinitionCollectionItemColumnSortingResult',
    'GetReportDefinitionsReportDefinitionCollectionItemSummaryResult',
    'GetReportsFilterResult',
    'GetReportsReportCollectionResult',
    'GetReportsReportCollectionItemResult',
    'GetSdmMaskingPolicyDifferenceDifferenceColumnsFilterResult',
    'GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionResult',
    'GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItemResult',
    'GetSdmMaskingPolicyDifferencesFilterResult',
    'GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionResult',
    'GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItemResult',
    'GetSecurityAssessmentComparisonTargetResult',
    'GetSecurityAssessmentComparisonTargetAuditingResult',
    'GetSecurityAssessmentComparisonTargetAuditingBaselineResult',
    'GetSecurityAssessmentComparisonTargetAuditingBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetAuditingCurrentResult',
    'GetSecurityAssessmentComparisonTargetAuditingCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionBaselineResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionCurrentResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationBaselineResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationCurrentResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetUserAccountResult',
    'GetSecurityAssessmentComparisonTargetUserAccountBaselineResult',
    'GetSecurityAssessmentComparisonTargetUserAccountBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetUserAccountCurrentResult',
    'GetSecurityAssessmentComparisonTargetUserAccountCurrentReferenceResult',
    'GetSecurityAssessmentFindingAnalyticsFilterResult',
    'GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionResult',
    'GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemResult',
    'GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemDimensionResult',
    'GetSecurityAssessmentFindingFilterResult',
    'GetSecurityAssessmentFindingFindingResult',
    'GetSecurityAssessmentFindingFindingReferenceResult',
    'GetSecurityAssessmentFindingsChangeAuditLogsFilterResult',
    'GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionResult',
    'GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItemResult',
    'GetSecurityAssessmentFindingsFilterResult',
    'GetSecurityAssessmentFindingsFindingResult',
    'GetSecurityAssessmentFindingsFindingReferenceResult',
    'GetSecurityAssessmentSecurityFeatureAnalyticsFilterResult',
    'GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionResult',
    'GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemResult',
    'GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemDimensionResult',
    'GetSecurityAssessmentSecurityFeaturesFilterResult',
    'GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionResult',
    'GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItemResult',
    'GetSecurityAssessmentStatisticResult',
    'GetSecurityAssessmentStatisticAdvisoryResult',
    'GetSecurityAssessmentStatisticDeferredResult',
    'GetSecurityAssessmentStatisticEvaluateResult',
    'GetSecurityAssessmentStatisticHighRiskResult',
    'GetSecurityAssessmentStatisticLowRiskResult',
    'GetSecurityAssessmentStatisticMediumRiskResult',
    'GetSecurityAssessmentStatisticPassResult',
    'GetSecurityAssessmentsFilterResult',
    'GetSecurityAssessmentsSecurityAssessmentResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticAdvisoryResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticDeferredResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticEvaluateResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticHighRiskResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticLowRiskResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticMediumRiskResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticPassResult',
    'GetSecurityPoliciesFilterResult',
    'GetSecurityPoliciesSecurityPolicyCollectionResult',
    'GetSecurityPoliciesSecurityPolicyCollectionItemResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStateEntryDetailResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStatesFilterResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetailResult',
    'GetSecurityPolicyDeploymentsFilterResult',
    'GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionResult',
    'GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItemResult',
    'GetSecurityPolicyReportDatabaseTableAccessEntriesDatabaseTableAccessEntryCollectionResult',
    'GetSecurityPolicyReportDatabaseTableAccessEntriesDatabaseTableAccessEntryCollectionItemResult',
    'GetSecurityPolicyReportDatabaseTableAccessEntriesFilterResult',
    'GetSecurityPolicyReportDatabaseViewAccessEntriesDatabaseViewAccessEntryCollectionResult',
    'GetSecurityPolicyReportDatabaseViewAccessEntriesDatabaseViewAccessEntryCollectionItemResult',
    'GetSecurityPolicyReportDatabaseViewAccessEntriesFilterResult',
    'GetSecurityPolicyReportRoleGrantPathsFilterResult',
    'GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionResult',
    'GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItemResult',
    'GetSecurityPolicyReportsFilterResult',
    'GetSecurityPolicyReportsSecurityPolicyReportCollectionResult',
    'GetSecurityPolicyReportsSecurityPolicyReportCollectionItemResult',
    'GetSensitiveColumnAnalyticsFilterResult',
    'GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionResult',
    'GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemResult',
    'GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemDimensionResult',
    'GetSensitiveDataModelReferentialRelationChildResult',
    'GetSensitiveDataModelReferentialRelationParentResult',
    'GetSensitiveDataModelReferentialRelationsFilterResult',
    'GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionResult',
    'GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemResult',
    'GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChildResult',
    'GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParentResult',
    'GetSensitiveDataModelSensitiveObjectsFilterResult',
    'GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionResult',
    'GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItemResult',
    'GetSensitiveDataModelSensitiveSchemasFilterResult',
    'GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionResult',
    'GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItemResult',
    'GetSensitiveDataModelSensitiveTypesFilterResult',
    'GetSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollectionResult',
    'GetSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollectionItemResult',
    'GetSensitiveDataModelTablesForDiscoveryResult',
    'GetSensitiveDataModelsFilterResult',
    'GetSensitiveDataModelsSensitiveColumnsFilterResult',
    'GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionResult',
    'GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItemResult',
    'GetSensitiveDataModelsSensitiveDataModelCollectionResult',
    'GetSensitiveDataModelsSensitiveDataModelCollectionItemResult',
    'GetSensitiveDataModelsSensitiveDataModelCollectionItemTablesForDiscoveryResult',
    'GetSensitiveTypeGroupGroupedSensitiveTypesFilterResult',
    'GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionResult',
    'GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemResult',
    'GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemItemResult',
    'GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemPatchOperationResult',
    'GetSensitiveTypeGroupsFilterResult',
    'GetSensitiveTypeGroupsSensitiveTypeGroupCollectionResult',
    'GetSensitiveTypeGroupsSensitiveTypeGroupCollectionItemResult',
    'GetSensitiveTypesExportsFilterResult',
    'GetSensitiveTypesExportsSensitiveTypesExportCollectionResult',
    'GetSensitiveTypesExportsSensitiveTypesExportCollectionItemResult',
    'GetSensitiveTypesFilterResult',
    'GetSensitiveTypesSensitiveTypeCollectionResult',
    'GetSensitiveTypesSensitiveTypeCollectionItemResult',
    'GetSqlCollectionAnalyticsFilterResult',
    'GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionResult',
    'GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemResult',
    'GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemDimensionResult',
    'GetSqlCollectionLogInsightsFilterResult',
    'GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionResult',
    'GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemResult',
    'GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemDimensionResult',
    'GetSqlCollectionsFilterResult',
    'GetSqlCollectionsSqlCollectionCollectionResult',
    'GetSqlCollectionsSqlCollectionCollectionItemResult',
    'GetSqlFirewallAllowedSqlAnalyticsFilterResult',
    'GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionResult',
    'GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemResult',
    'GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemDimensionResult',
    'GetSqlFirewallAllowedSqlsFilterResult',
    'GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionResult',
    'GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItemResult',
    'GetSqlFirewallPoliciesFilterResult',
    'GetSqlFirewallPoliciesSqlFirewallPolicyCollectionResult',
    'GetSqlFirewallPoliciesSqlFirewallPolicyCollectionItemResult',
    'GetSqlFirewallPolicyAnalyticsFilterResult',
    'GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionResult',
    'GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemResult',
    'GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemDimensionResult',
    'GetSqlFirewallViolationAnalyticsFilterResult',
    'GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionResult',
    'GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemResult',
    'GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimensionResult',
    'GetSqlFirewallViolationsFilterResult',
    'GetSqlFirewallViolationsSqlFirewallViolationsCollectionResult',
    'GetSqlFirewallViolationsSqlFirewallViolationsCollectionItemResult',
    'GetTargetAlertPolicyAssociationsFilterResult',
    'GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionResult',
    'GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItemResult',
    'GetTargetDatabaseConnectionOptionResult',
    'GetTargetDatabaseCredentialResult',
    'GetTargetDatabaseDatabaseDetailResult',
    'GetTargetDatabasePeerTargetDatabaseResult',
    'GetTargetDatabasePeerTargetDatabaseDatabaseDetailResult',
    'GetTargetDatabasePeerTargetDatabaseDetailResult',
    'GetTargetDatabasePeerTargetDatabaseDetailDatabaseDetailResult',
    'GetTargetDatabasePeerTargetDatabaseDetailTlsConfigResult',
    'GetTargetDatabasePeerTargetDatabaseTlsConfigResult',
    'GetTargetDatabasePeerTargetDatabasesFilterResult',
    'GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionResult',
    'GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemResult',
    'GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemDatabaseDetailsResult',
    'GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemTlsConfigResult',
    'GetTargetDatabaseRoleFilterResult',
    'GetTargetDatabaseRoleRoleResult',
    'GetTargetDatabaseRolesFilterResult',
    'GetTargetDatabaseRolesRoleResult',
    'GetTargetDatabaseTlsConfigResult',
    'GetTargetDatabasesColumnsColumnResult',
    'GetTargetDatabasesColumnsFilterResult',
    'GetTargetDatabasesFilterResult',
    'GetTargetDatabasesSchemasFilterResult',
    'GetTargetDatabasesSchemasSchemaResult',
    'GetTargetDatabasesTablesFilterResult',
    'GetTargetDatabasesTablesTableResult',
    'GetTargetDatabasesTargetDatabaseResult',
    'GetTargetDatabasesTargetDatabaseConnectionOptionResult',
    'GetTargetDatabasesTargetDatabaseCredentialResult',
    'GetTargetDatabasesTargetDatabaseDatabaseDetailResult',
    'GetTargetDatabasesTargetDatabasePeerTargetDatabaseResult',
    'GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetailResult',
    'GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailResult',
    'GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailDatabaseDetailResult',
    'GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailTlsConfigResult',
    'GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfigResult',
    'GetTargetDatabasesTargetDatabaseTlsConfigResult',
    'GetUserAssessmentComparisonSummaryResult',
    'GetUserAssessmentComparisonSummaryBaselineResult',
    'GetUserAssessmentComparisonSummaryCurrentResult',
    'GetUserAssessmentIgnoredTargetResult',
    'GetUserAssessmentPasswordExpiryDateAnalyticsFilterResult',
    'GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationResult',
    'GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationItemResult',
    'GetUserAssessmentProfileAnalyticsFilterResult',
    'GetUserAssessmentProfileAnalyticsProfileAggregationResult',
    'GetUserAssessmentProfilesFilterResult',
    'GetUserAssessmentProfilesProfileResult',
    'GetUserAssessmentUserAccessAnalyticsFilterResult',
    'GetUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollectionResult',
    'GetUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollectionItemResult',
    'GetUserAssessmentUserAnalyticsFilterResult',
    'GetUserAssessmentUserAnalyticsUserAggregationResult',
    'GetUserAssessmentUserAnalyticsUserAggregationItemResult',
    'GetUserAssessmentUsersFilterResult',
    'GetUserAssessmentUsersUserResult',
    'GetUserAssessmentsFilterResult',
    'GetUserAssessmentsIgnoredTargetResult',
    'GetUserAssessmentsUserAssessmentResult',
    'GetUserAssessmentsUserAssessmentIgnoredTargetResult',
]

@pulumi.output_type
class AlertPolicyAlertPolicyRuleDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlertPolicyAlertPolicyRuleDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlertPolicyAlertPolicyRuleDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlertPolicyAlertPolicyRuleDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str expression: The conditional expression of the alert policy rule which evaluates to boolean value.
        :param _builtins.str description: Describes the alert policy rule.
        :param _builtins.str display_name: The display name of the alert policy rule.
        """
        pulumi.set(__self__, "expression", expression)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        The conditional expression of the alert policy rule which evaluates to boolean value.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Describes the alert policy rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The display name of the alert policy rule.
        """
        return pulumi.get(self, "display_name")


@pulumi.output_type
class AuditPolicyAuditCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditPolicyName":
            suggest = "audit_policy_name"
        elif key == "enableConditions":
            suggest = "enable_conditions"
        elif key == "isDataSafeServiceAccountAudited":
            suggest = "is_data_safe_service_account_audited"
        elif key == "isPrivUsersManagedByDataSafe":
            suggest = "is_priv_users_managed_by_data_safe"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditPolicyAuditCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditPolicyAuditCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditPolicyAuditCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_policy_name: Optional[_builtins.str] = None,
                 enable_conditions: Optional[Sequence['outputs.AuditPolicyAuditConditionEnableCondition']] = None,
                 is_data_safe_service_account_audited: Optional[_builtins.bool] = None,
                 is_priv_users_managed_by_data_safe: Optional[_builtins.bool] = None):
        """
        :param _builtins.str audit_policy_name: Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        :param Sequence['AuditPolicyAuditConditionEnableConditionArgs'] enable_conditions: Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
        :param _builtins.bool is_data_safe_service_account_audited: Indicates whether the Data Safe user activity on the target database will be audited by the policy.
        :param _builtins.bool is_priv_users_managed_by_data_safe: Indicates whether the privileged user list is managed by Data Safe.
        """
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if enable_conditions is not None:
            pulumi.set(__self__, "enable_conditions", enable_conditions)
        if is_data_safe_service_account_audited is not None:
            pulumi.set(__self__, "is_data_safe_service_account_audited", is_data_safe_service_account_audited)
        if is_priv_users_managed_by_data_safe is not None:
            pulumi.set(__self__, "is_priv_users_managed_by_data_safe", is_priv_users_managed_by_data_safe)

    @_builtins.property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[_builtins.str]:
        """
        Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        """
        return pulumi.get(self, "audit_policy_name")

    @_builtins.property
    @pulumi.getter(name="enableConditions")
    def enable_conditions(self) -> Optional[Sequence['outputs.AuditPolicyAuditConditionEnableCondition']]:
        """
        Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
        """
        return pulumi.get(self, "enable_conditions")

    @_builtins.property
    @pulumi.getter(name="isDataSafeServiceAccountAudited")
    def is_data_safe_service_account_audited(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the Data Safe user activity on the target database will be audited by the policy.
        """
        return pulumi.get(self, "is_data_safe_service_account_audited")

    @_builtins.property
    @pulumi.getter(name="isPrivUsersManagedByDataSafe")
    def is_priv_users_managed_by_data_safe(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the privileged user list is managed by Data Safe.
        """
        return pulumi.get(self, "is_priv_users_managed_by_data_safe")


@pulumi.output_type
class AuditPolicyAuditConditionEnableCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityNames":
            suggest = "entity_names"
        elif key == "entitySelection":
            suggest = "entity_selection"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "operationStatus":
            suggest = "operation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditPolicyAuditConditionEnableCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditPolicyAuditConditionEnableCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditPolicyAuditConditionEnableCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_names: Optional[Sequence[_builtins.str]] = None,
                 entity_selection: Optional[_builtins.str] = None,
                 entity_type: Optional[_builtins.str] = None,
                 operation_status: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] entity_names: List of users or roles that the policy must be enabled for.
        :param _builtins.str entity_selection: The entity include or exclude selection.
        :param _builtins.str entity_type: The entity type that the policy must be enabled for.
        :param _builtins.str operation_status: The operation status that the policy must be enabled for.
        """
        if entity_names is not None:
            pulumi.set(__self__, "entity_names", entity_names)
        if entity_selection is not None:
            pulumi.set(__self__, "entity_selection", entity_selection)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)

    @_builtins.property
    @pulumi.getter(name="entityNames")
    def entity_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of users or roles that the policy must be enabled for.
        """
        return pulumi.get(self, "entity_names")

    @_builtins.property
    @pulumi.getter(name="entitySelection")
    def entity_selection(self) -> Optional[_builtins.str]:
        """
        The entity include or exclude selection.
        """
        return pulumi.get(self, "entity_selection")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[_builtins.str]:
        """
        The entity type that the policy must be enabled for.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[_builtins.str]:
        """
        The operation status that the policy must be enabled for.
        """
        return pulumi.get(self, "operation_status")


@pulumi.output_type
class AuditPolicyAuditSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditPolicyCategory":
            suggest = "audit_policy_category"
        elif key == "auditPolicyName":
            suggest = "audit_policy_name"
        elif key == "databasePolicyNames":
            suggest = "database_policy_names"
        elif key == "enableStatus":
            suggest = "enable_status"
        elif key == "enabledEntities":
            suggest = "enabled_entities"
        elif key == "isCreated":
            suggest = "is_created"
        elif key == "isEnabledForAllUsers":
            suggest = "is_enabled_for_all_users"
        elif key == "isSeededInDataSafe":
            suggest = "is_seeded_in_data_safe"
        elif key == "isSeededInTarget":
            suggest = "is_seeded_in_target"
        elif key == "isViewOnly":
            suggest = "is_view_only"
        elif key == "partiallyEnabledMsg":
            suggest = "partially_enabled_msg"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditPolicyAuditSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditPolicyAuditSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditPolicyAuditSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_policy_category: Optional[_builtins.str] = None,
                 audit_policy_name: Optional[_builtins.str] = None,
                 database_policy_names: Optional[Sequence[_builtins.str]] = None,
                 enable_status: Optional[_builtins.str] = None,
                 enabled_entities: Optional[_builtins.str] = None,
                 is_created: Optional[_builtins.bool] = None,
                 is_enabled_for_all_users: Optional[_builtins.bool] = None,
                 is_seeded_in_data_safe: Optional[_builtins.bool] = None,
                 is_seeded_in_target: Optional[_builtins.bool] = None,
                 is_view_only: Optional[_builtins.bool] = None,
                 partially_enabled_msg: Optional[_builtins.str] = None):
        """
        :param _builtins.str audit_policy_category: The category to which the audit policy belongs.
        :param _builtins.str audit_policy_name: Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        :param Sequence[_builtins.str] database_policy_names: Indicates the names of corresponding database policy ( or policies) in the target database.
        :param _builtins.str enable_status: Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        :param _builtins.str enabled_entities: Indicates on whom the audit policy is enabled.
        :param _builtins.bool is_created: Indicates whether the policy is already created on the target database.
        :param _builtins.bool is_enabled_for_all_users: Indicates whether the policy by default is enabled for all users with no flexibility to alter the enablement conditions.
        :param _builtins.bool is_seeded_in_data_safe: Indicates whether the audit policy is one of the seeded policies provided by Oracle Data Safe.
        :param _builtins.bool is_seeded_in_target: Indicates whether the audit policy is one of the predefined policies provided by Oracle Database.
        :param _builtins.bool is_view_only: Indicates whether the audit policy is available for provisioning/ de-provisioning from Oracle Data Safe, or is only available for displaying the current provisioning status from the target.
        :param _builtins.str partially_enabled_msg: Provides information about the policy that has been only partially enabled.
        """
        if audit_policy_category is not None:
            pulumi.set(__self__, "audit_policy_category", audit_policy_category)
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if database_policy_names is not None:
            pulumi.set(__self__, "database_policy_names", database_policy_names)
        if enable_status is not None:
            pulumi.set(__self__, "enable_status", enable_status)
        if enabled_entities is not None:
            pulumi.set(__self__, "enabled_entities", enabled_entities)
        if is_created is not None:
            pulumi.set(__self__, "is_created", is_created)
        if is_enabled_for_all_users is not None:
            pulumi.set(__self__, "is_enabled_for_all_users", is_enabled_for_all_users)
        if is_seeded_in_data_safe is not None:
            pulumi.set(__self__, "is_seeded_in_data_safe", is_seeded_in_data_safe)
        if is_seeded_in_target is not None:
            pulumi.set(__self__, "is_seeded_in_target", is_seeded_in_target)
        if is_view_only is not None:
            pulumi.set(__self__, "is_view_only", is_view_only)
        if partially_enabled_msg is not None:
            pulumi.set(__self__, "partially_enabled_msg", partially_enabled_msg)

    @_builtins.property
    @pulumi.getter(name="auditPolicyCategory")
    def audit_policy_category(self) -> Optional[_builtins.str]:
        """
        The category to which the audit policy belongs.
        """
        return pulumi.get(self, "audit_policy_category")

    @_builtins.property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[_builtins.str]:
        """
        Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        """
        return pulumi.get(self, "audit_policy_name")

    @_builtins.property
    @pulumi.getter(name="databasePolicyNames")
    def database_policy_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the names of corresponding database policy ( or policies) in the target database.
        """
        return pulumi.get(self, "database_policy_names")

    @_builtins.property
    @pulumi.getter(name="enableStatus")
    def enable_status(self) -> Optional[_builtins.str]:
        """
        Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        """
        return pulumi.get(self, "enable_status")

    @_builtins.property
    @pulumi.getter(name="enabledEntities")
    def enabled_entities(self) -> Optional[_builtins.str]:
        """
        Indicates on whom the audit policy is enabled.
        """
        return pulumi.get(self, "enabled_entities")

    @_builtins.property
    @pulumi.getter(name="isCreated")
    def is_created(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the policy is already created on the target database.
        """
        return pulumi.get(self, "is_created")

    @_builtins.property
    @pulumi.getter(name="isEnabledForAllUsers")
    def is_enabled_for_all_users(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the policy by default is enabled for all users with no flexibility to alter the enablement conditions.
        """
        return pulumi.get(self, "is_enabled_for_all_users")

    @_builtins.property
    @pulumi.getter(name="isSeededInDataSafe")
    def is_seeded_in_data_safe(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the audit policy is one of the seeded policies provided by Oracle Data Safe.
        """
        return pulumi.get(self, "is_seeded_in_data_safe")

    @_builtins.property
    @pulumi.getter(name="isSeededInTarget")
    def is_seeded_in_target(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the audit policy is one of the predefined policies provided by Oracle Database.
        """
        return pulumi.get(self, "is_seeded_in_target")

    @_builtins.property
    @pulumi.getter(name="isViewOnly")
    def is_view_only(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the audit policy is available for provisioning/ de-provisioning from Oracle Data Safe, or is only available for displaying the current provisioning status from the target.
        """
        return pulumi.get(self, "is_view_only")

    @_builtins.property
    @pulumi.getter(name="partiallyEnabledMsg")
    def partially_enabled_msg(self) -> Optional[_builtins.str]:
        """
        Provides information about the policy that has been only partially enabled.
        """
        return pulumi.get(self, "partially_enabled_msg")


@pulumi.output_type
class AuditPolicyManagementAuditCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditPolicyName":
            suggest = "audit_policy_name"
        elif key == "enableConditions":
            suggest = "enable_conditions"
        elif key == "isDataSafeServiceAccountAudited":
            suggest = "is_data_safe_service_account_audited"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isPrivUsersManagedByDataSafe":
            suggest = "is_priv_users_managed_by_data_safe"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditPolicyManagementAuditCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditPolicyManagementAuditCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditPolicyManagementAuditCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_policy_name: Optional[_builtins.str] = None,
                 enable_conditions: Optional[Sequence['outputs.AuditPolicyManagementAuditConditionEnableCondition']] = None,
                 is_data_safe_service_account_audited: Optional[_builtins.bool] = None,
                 is_enabled: Optional[_builtins.bool] = None,
                 is_priv_users_managed_by_data_safe: Optional[_builtins.bool] = None):
        """
        :param _builtins.str audit_policy_name: Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        :param Sequence['AuditPolicyManagementAuditConditionEnableConditionArgs'] enable_conditions: Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
        :param _builtins.bool is_data_safe_service_account_audited: Indicates whether the Data Safe user activity on the target database will be audited by the policy.
        :param _builtins.bool is_enabled: Indicates whether the policy has to be enabled or disabled in the target database. Set this to true if you want the audit policy to be enabled in the target database. If the seeded audit policy is not already created in the database, the provisioning creates and enables them. If this is set to false, the policy will be disabled in the target database.
        :param _builtins.bool is_priv_users_managed_by_data_safe: Indicates whether the privileged user list is managed by Data Safe.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if enable_conditions is not None:
            pulumi.set(__self__, "enable_conditions", enable_conditions)
        if is_data_safe_service_account_audited is not None:
            pulumi.set(__self__, "is_data_safe_service_account_audited", is_data_safe_service_account_audited)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_priv_users_managed_by_data_safe is not None:
            pulumi.set(__self__, "is_priv_users_managed_by_data_safe", is_priv_users_managed_by_data_safe)

    @_builtins.property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[_builtins.str]:
        """
        Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        """
        return pulumi.get(self, "audit_policy_name")

    @_builtins.property
    @pulumi.getter(name="enableConditions")
    def enable_conditions(self) -> Optional[Sequence['outputs.AuditPolicyManagementAuditConditionEnableCondition']]:
        """
        Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
        """
        return pulumi.get(self, "enable_conditions")

    @_builtins.property
    @pulumi.getter(name="isDataSafeServiceAccountAudited")
    def is_data_safe_service_account_audited(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the Data Safe user activity on the target database will be audited by the policy.
        """
        return pulumi.get(self, "is_data_safe_service_account_audited")

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the policy has to be enabled or disabled in the target database. Set this to true if you want the audit policy to be enabled in the target database. If the seeded audit policy is not already created in the database, the provisioning creates and enables them. If this is set to false, the policy will be disabled in the target database.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="isPrivUsersManagedByDataSafe")
    def is_priv_users_managed_by_data_safe(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the privileged user list is managed by Data Safe.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "is_priv_users_managed_by_data_safe")


@pulumi.output_type
class AuditPolicyManagementAuditConditionEnableCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityNames":
            suggest = "entity_names"
        elif key == "entitySelection":
            suggest = "entity_selection"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "operationStatus":
            suggest = "operation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditPolicyManagementAuditConditionEnableCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditPolicyManagementAuditConditionEnableCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditPolicyManagementAuditConditionEnableCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_names: Optional[Sequence[_builtins.str]] = None,
                 entity_selection: Optional[_builtins.str] = None,
                 entity_type: Optional[_builtins.str] = None,
                 operation_status: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] entity_names: List of users or roles that the policy must be enabled for.
        :param _builtins.str entity_selection: The entity include or exclude selection.
        :param _builtins.str entity_type: The entity type that the policy must be enabled for.
        :param _builtins.str operation_status: The operation status that the policy must be enabled for.
        """
        if entity_names is not None:
            pulumi.set(__self__, "entity_names", entity_names)
        if entity_selection is not None:
            pulumi.set(__self__, "entity_selection", entity_selection)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)

    @_builtins.property
    @pulumi.getter(name="entityNames")
    def entity_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of users or roles that the policy must be enabled for.
        """
        return pulumi.get(self, "entity_names")

    @_builtins.property
    @pulumi.getter(name="entitySelection")
    def entity_selection(self) -> Optional[_builtins.str]:
        """
        The entity include or exclude selection.
        """
        return pulumi.get(self, "entity_selection")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[_builtins.str]:
        """
        The entity type that the policy must be enabled for.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[_builtins.str]:
        """
        The operation status that the policy must be enabled for.
        """
        return pulumi.get(self, "operation_status")


@pulumi.output_type
class AuditPolicyManagementAuditSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditPolicyCategory":
            suggest = "audit_policy_category"
        elif key == "auditPolicyName":
            suggest = "audit_policy_name"
        elif key == "databasePolicyNames":
            suggest = "database_policy_names"
        elif key == "enableStatus":
            suggest = "enable_status"
        elif key == "enabledEntities":
            suggest = "enabled_entities"
        elif key == "isCreated":
            suggest = "is_created"
        elif key == "isEnabledForAllUsers":
            suggest = "is_enabled_for_all_users"
        elif key == "isSeededInDataSafe":
            suggest = "is_seeded_in_data_safe"
        elif key == "isSeededInTarget":
            suggest = "is_seeded_in_target"
        elif key == "isViewOnly":
            suggest = "is_view_only"
        elif key == "partiallyEnabledMsg":
            suggest = "partially_enabled_msg"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditPolicyManagementAuditSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditPolicyManagementAuditSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditPolicyManagementAuditSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_policy_category: Optional[_builtins.str] = None,
                 audit_policy_name: Optional[_builtins.str] = None,
                 database_policy_names: Optional[Sequence[_builtins.str]] = None,
                 enable_status: Optional[_builtins.str] = None,
                 enabled_entities: Optional[_builtins.str] = None,
                 is_created: Optional[_builtins.bool] = None,
                 is_enabled_for_all_users: Optional[_builtins.bool] = None,
                 is_seeded_in_data_safe: Optional[_builtins.bool] = None,
                 is_seeded_in_target: Optional[_builtins.bool] = None,
                 is_view_only: Optional[_builtins.bool] = None,
                 partially_enabled_msg: Optional[_builtins.str] = None):
        """
        :param _builtins.str audit_policy_category: The category to which the audit policy belongs.
        :param _builtins.str audit_policy_name: Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        :param Sequence[_builtins.str] database_policy_names: Indicates the names of corresponding database policy ( or policies) in the target database.
        :param _builtins.str enable_status: Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        :param _builtins.str enabled_entities: Indicates on whom the audit policy is enabled.
        :param _builtins.bool is_created: Indicates whether the policy is already created on the target database.
        :param _builtins.bool is_enabled_for_all_users: Indicates whether the policy by default is enabled for all users with no flexibility to alter the enablement conditions.
        :param _builtins.bool is_seeded_in_data_safe: Indicates whether the audit policy is one of the seeded policies provided by Oracle Data Safe.
        :param _builtins.bool is_seeded_in_target: Indicates whether the audit policy is one of the predefined policies provided by Oracle Database.
        :param _builtins.bool is_view_only: Indicates whether the audit policy is available for provisioning/ de-provisioning from Oracle Data Safe, or is only available for displaying the current provisioning status from the target.
        :param _builtins.str partially_enabled_msg: Provides information about the policy that has been only partially enabled.
        """
        if audit_policy_category is not None:
            pulumi.set(__self__, "audit_policy_category", audit_policy_category)
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if database_policy_names is not None:
            pulumi.set(__self__, "database_policy_names", database_policy_names)
        if enable_status is not None:
            pulumi.set(__self__, "enable_status", enable_status)
        if enabled_entities is not None:
            pulumi.set(__self__, "enabled_entities", enabled_entities)
        if is_created is not None:
            pulumi.set(__self__, "is_created", is_created)
        if is_enabled_for_all_users is not None:
            pulumi.set(__self__, "is_enabled_for_all_users", is_enabled_for_all_users)
        if is_seeded_in_data_safe is not None:
            pulumi.set(__self__, "is_seeded_in_data_safe", is_seeded_in_data_safe)
        if is_seeded_in_target is not None:
            pulumi.set(__self__, "is_seeded_in_target", is_seeded_in_target)
        if is_view_only is not None:
            pulumi.set(__self__, "is_view_only", is_view_only)
        if partially_enabled_msg is not None:
            pulumi.set(__self__, "partially_enabled_msg", partially_enabled_msg)

    @_builtins.property
    @pulumi.getter(name="auditPolicyCategory")
    def audit_policy_category(self) -> Optional[_builtins.str]:
        """
        The category to which the audit policy belongs.
        """
        return pulumi.get(self, "audit_policy_category")

    @_builtins.property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[_builtins.str]:
        """
        Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        """
        return pulumi.get(self, "audit_policy_name")

    @_builtins.property
    @pulumi.getter(name="databasePolicyNames")
    def database_policy_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        Indicates the names of corresponding database policy ( or policies) in the target database.
        """
        return pulumi.get(self, "database_policy_names")

    @_builtins.property
    @pulumi.getter(name="enableStatus")
    def enable_status(self) -> Optional[_builtins.str]:
        """
        Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        """
        return pulumi.get(self, "enable_status")

    @_builtins.property
    @pulumi.getter(name="enabledEntities")
    def enabled_entities(self) -> Optional[_builtins.str]:
        """
        Indicates on whom the audit policy is enabled.
        """
        return pulumi.get(self, "enabled_entities")

    @_builtins.property
    @pulumi.getter(name="isCreated")
    def is_created(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the policy is already created on the target database.
        """
        return pulumi.get(self, "is_created")

    @_builtins.property
    @pulumi.getter(name="isEnabledForAllUsers")
    def is_enabled_for_all_users(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the policy by default is enabled for all users with no flexibility to alter the enablement conditions.
        """
        return pulumi.get(self, "is_enabled_for_all_users")

    @_builtins.property
    @pulumi.getter(name="isSeededInDataSafe")
    def is_seeded_in_data_safe(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the audit policy is one of the seeded policies provided by Oracle Data Safe.
        """
        return pulumi.get(self, "is_seeded_in_data_safe")

    @_builtins.property
    @pulumi.getter(name="isSeededInTarget")
    def is_seeded_in_target(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the audit policy is one of the predefined policies provided by Oracle Database.
        """
        return pulumi.get(self, "is_seeded_in_target")

    @_builtins.property
    @pulumi.getter(name="isViewOnly")
    def is_view_only(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the audit policy is available for provisioning/ de-provisioning from Oracle Data Safe, or is only available for displaying the current provisioning status from the target.
        """
        return pulumi.get(self, "is_view_only")

    @_builtins.property
    @pulumi.getter(name="partiallyEnabledMsg")
    def partially_enabled_msg(self) -> Optional[_builtins.str]:
        """
        Provides information about the policy that has been only partially enabled.
        """
        return pulumi.get(self, "partially_enabled_msg")


@pulumi.output_type
class AuditProfileAuditTrail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditCollectionStartTime":
            suggest = "audit_collection_start_time"
        elif key == "auditProfileId":
            suggest = "audit_profile_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "isAutoPurgeEnabled":
            suggest = "is_auto_purge_enabled"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "peerTargetDatabaseKey":
            suggest = "peer_target_database_key"
        elif key == "purgeJobDetails":
            suggest = "purge_job_details"
        elif key == "purgeJobStatus":
            suggest = "purge_job_status"
        elif key == "purgeJobTime":
            suggest = "purge_job_time"
        elif key == "systemTags":
            suggest = "system_tags"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeLastCollected":
            suggest = "time_last_collected"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "trailLocation":
            suggest = "trail_location"
        elif key == "trailSource":
            suggest = "trail_source"
        elif key == "workRequestId":
            suggest = "work_request_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditProfileAuditTrail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditProfileAuditTrail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditProfileAuditTrail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_collection_start_time: Optional[_builtins.str] = None,
                 audit_profile_id: Optional[_builtins.str] = None,
                 compartment_id: Optional[_builtins.str] = None,
                 defined_tags: Optional[Mapping[str, _builtins.str]] = None,
                 description: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None,
                 freeform_tags: Optional[Mapping[str, _builtins.str]] = None,
                 id: Optional[_builtins.str] = None,
                 is_auto_purge_enabled: Optional[_builtins.bool] = None,
                 lifecycle_details: Optional[_builtins.str] = None,
                 peer_target_database_key: Optional[_builtins.int] = None,
                 purge_job_details: Optional[_builtins.str] = None,
                 purge_job_status: Optional[_builtins.str] = None,
                 purge_job_time: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 system_tags: Optional[Mapping[str, _builtins.str]] = None,
                 target_id: Optional[_builtins.str] = None,
                 time_created: Optional[_builtins.str] = None,
                 time_last_collected: Optional[_builtins.str] = None,
                 time_updated: Optional[_builtins.str] = None,
                 trail_location: Optional[_builtins.str] = None,
                 trail_source: Optional[_builtins.str] = None,
                 work_request_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str audit_collection_start_time: The date from which the audit trail must start collecting data, in the format defined by RFC3339.
        :param _builtins.str audit_profile_id: The OCID of the audit.
        :param _builtins.str compartment_id: (Updatable) The OCID of the compartment that contains the audit.
        :param Mapping[str, _builtins.str] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: (Updatable) The description of the audit profile.
        :param _builtins.str display_name: (Updatable) The display name of the audit profile. The name does not have to be unique, and it's updatable.
        :param Mapping[str, _builtins.str] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the audit profile.
        :param _builtins.bool is_auto_purge_enabled: Indicates if auto purge is enabled on the target database, which helps delete audit data in the target database every seven days so that the database's audit trail does not become too large.
        :param _builtins.str lifecycle_details: Details about the current state of the audit profile in Data Safe.
        :param _builtins.int peer_target_database_key: The secondary id assigned for the peer database registered with Data Safe.
        :param _builtins.str purge_job_details: The details of the audit trail purge job that ran on the "purgeJobTime".
        :param _builtins.str purge_job_status: The current status of the audit trail purge job.
        :param _builtins.str purge_job_time: The date and time of the last purge job, which deletes audit data in the target database every seven days so that the database's audit trail does not become too large. In the format defined by RFC3339.
        :param _builtins.str state: The current state of the audit profile.
        :param _builtins.str status: The current sub-state of the audit trail.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: The OCID of the Data Safe target for which the audit profile is created.
        :param _builtins.str time_created: The date and time the audit profile was created, in the format defined by RFC3339.
        :param _builtins.str time_last_collected: The date and time until when the audit events were collected from the target database by the Data Safe audit trail  collection process, in the format defined by RFC3339.
        :param _builtins.str time_updated: The date and time the audit profile was updated, in the format defined by RFC3339.
        :param _builtins.str trail_location: An audit trail location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        :param _builtins.str trail_source: The underlying source of unified audit trail.
        :param _builtins.str work_request_id: The OCID of the workrequest for audit trail which collects audit records.
        """
        if audit_collection_start_time is not None:
            pulumi.set(__self__, "audit_collection_start_time", audit_collection_start_time)
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_auto_purge_enabled is not None:
            pulumi.set(__self__, "is_auto_purge_enabled", is_auto_purge_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if peer_target_database_key is not None:
            pulumi.set(__self__, "peer_target_database_key", peer_target_database_key)
        if purge_job_details is not None:
            pulumi.set(__self__, "purge_job_details", purge_job_details)
        if purge_job_status is not None:
            pulumi.set(__self__, "purge_job_status", purge_job_status)
        if purge_job_time is not None:
            pulumi.set(__self__, "purge_job_time", purge_job_time)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_collected is not None:
            pulumi.set(__self__, "time_last_collected", time_last_collected)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trail_location is not None:
            pulumi.set(__self__, "trail_location", trail_location)
        if trail_source is not None:
            pulumi.set(__self__, "trail_source", trail_source)
        if work_request_id is not None:
            pulumi.set(__self__, "work_request_id", work_request_id)

    @_builtins.property
    @pulumi.getter(name="auditCollectionStartTime")
    def audit_collection_start_time(self) -> Optional[_builtins.str]:
        """
        The date from which the audit trail must start collecting data, in the format defined by RFC3339.
        """
        return pulumi.get(self, "audit_collection_start_time")

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the audit.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the compartment that contains the audit.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        (Updatable) The description of the audit profile.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The display name of the audit profile. The name does not have to be unique, and it's updatable.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The OCID of the audit profile.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isAutoPurgeEnabled")
    def is_auto_purge_enabled(self) -> Optional[_builtins.bool]:
        """
        Indicates if auto purge is enabled on the target database, which helps delete audit data in the target database every seven days so that the database's audit trail does not become too large.
        """
        return pulumi.get(self, "is_auto_purge_enabled")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[_builtins.str]:
        """
        Details about the current state of the audit profile in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="peerTargetDatabaseKey")
    def peer_target_database_key(self) -> Optional[_builtins.int]:
        """
        The secondary id assigned for the peer database registered with Data Safe.
        """
        return pulumi.get(self, "peer_target_database_key")

    @_builtins.property
    @pulumi.getter(name="purgeJobDetails")
    def purge_job_details(self) -> Optional[_builtins.str]:
        """
        The details of the audit trail purge job that ran on the "purgeJobTime".
        """
        return pulumi.get(self, "purge_job_details")

    @_builtins.property
    @pulumi.getter(name="purgeJobStatus")
    def purge_job_status(self) -> Optional[_builtins.str]:
        """
        The current status of the audit trail purge job.
        """
        return pulumi.get(self, "purge_job_status")

    @_builtins.property
    @pulumi.getter(name="purgeJobTime")
    def purge_job_time(self) -> Optional[_builtins.str]:
        """
        The date and time of the last purge job, which deletes audit data in the target database every seven days so that the database's audit trail does not become too large. In the format defined by RFC3339.
        """
        return pulumi.get(self, "purge_job_time")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The current state of the audit profile.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The current sub-state of the audit trail.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the Data Safe target for which the audit profile is created.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[_builtins.str]:
        """
        The date and time the audit profile was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeLastCollected")
    def time_last_collected(self) -> Optional[_builtins.str]:
        """
        The date and time until when the audit events were collected from the target database by the Data Safe audit trail  collection process, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_last_collected")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[_builtins.str]:
        """
        The date and time the audit profile was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> Optional[_builtins.str]:
        """
        An audit trail location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        """
        return pulumi.get(self, "trail_location")

    @_builtins.property
    @pulumi.getter(name="trailSource")
    def trail_source(self) -> Optional[_builtins.str]:
        """
        The underlying source of unified audit trail.
        """
        return pulumi.get(self, "trail_source")

    @_builtins.property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the workrequest for audit trail which collects audit records.
        """
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class CalculateAuditVolumeAvailableAvailableAuditVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditProfileId":
            suggest = "audit_profile_id"
        elif key == "monthInConsideration":
            suggest = "month_in_consideration"
        elif key == "trailLocation":
            suggest = "trail_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CalculateAuditVolumeAvailableAvailableAuditVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CalculateAuditVolumeAvailableAvailableAuditVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CalculateAuditVolumeAvailableAvailableAuditVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_profile_id: Optional[_builtins.str] = None,
                 month_in_consideration: Optional[_builtins.str] = None,
                 trail_location: Optional[_builtins.str] = None,
                 volume: Optional[_builtins.str] = None):
        """
        :param _builtins.str audit_profile_id: The OCID of the audit.
        """
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if month_in_consideration is not None:
            pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        if trail_location is not None:
            pulumi.set(__self__, "trail_location", trail_location)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the audit.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "month_in_consideration")

    @_builtins.property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trail_location")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "volume")


@pulumi.output_type
class CalculateAuditVolumeCollectedCollectedAuditVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archivedVolume":
            suggest = "archived_volume"
        elif key == "auditProfileId":
            suggest = "audit_profile_id"
        elif key == "monthInConsideration":
            suggest = "month_in_consideration"
        elif key == "onlineVolume":
            suggest = "online_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CalculateAuditVolumeCollectedCollectedAuditVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CalculateAuditVolumeCollectedCollectedAuditVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CalculateAuditVolumeCollectedCollectedAuditVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archived_volume: Optional[_builtins.str] = None,
                 audit_profile_id: Optional[_builtins.str] = None,
                 month_in_consideration: Optional[_builtins.str] = None,
                 online_volume: Optional[_builtins.str] = None):
        """
        :param _builtins.str audit_profile_id: The OCID of the audit.
        """
        if archived_volume is not None:
            pulumi.set(__self__, "archived_volume", archived_volume)
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if month_in_consideration is not None:
            pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        if online_volume is not None:
            pulumi.set(__self__, "online_volume", online_volume)

    @_builtins.property
    @pulumi.getter(name="archivedVolume")
    def archived_volume(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "archived_volume")

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the audit.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "month_in_consideration")

    @_builtins.property
    @pulumi.getter(name="onlineVolume")
    def online_volume(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "online_volume")


@pulumi.output_type
class DataSafeConfigurationGlobalSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPaidUsage":
            suggest = "is_paid_usage"
        elif key == "offlineRetentionPeriod":
            suggest = "offline_retention_period"
        elif key == "onlineRetentionPeriod":
            suggest = "online_retention_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSafeConfigurationGlobalSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSafeConfigurationGlobalSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSafeConfigurationGlobalSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_paid_usage: Optional[_builtins.bool] = None,
                 offline_retention_period: Optional[_builtins.int] = None,
                 online_retention_period: Optional[_builtins.int] = None):
        """
        :param _builtins.bool is_paid_usage: The paid usage option chosen by the customer admin.
        :param _builtins.int offline_retention_period: The offline retention period in months.
        :param _builtins.int online_retention_period: The online retention period in months.
        """
        if is_paid_usage is not None:
            pulumi.set(__self__, "is_paid_usage", is_paid_usage)
        if offline_retention_period is not None:
            pulumi.set(__self__, "offline_retention_period", offline_retention_period)
        if online_retention_period is not None:
            pulumi.set(__self__, "online_retention_period", online_retention_period)

    @_builtins.property
    @pulumi.getter(name="isPaidUsage")
    def is_paid_usage(self) -> Optional[_builtins.bool]:
        """
        The paid usage option chosen by the customer admin.
        """
        return pulumi.get(self, "is_paid_usage")

    @_builtins.property
    @pulumi.getter(name="offlineRetentionPeriod")
    def offline_retention_period(self) -> Optional[_builtins.int]:
        """
        The offline retention period in months.
        """
        return pulumi.get(self, "offline_retention_period")

    @_builtins.property
    @pulumi.getter(name="onlineRetentionPeriod")
    def online_retention_period(self) -> Optional[_builtins.int]:
        """
        The online retention period in months.
        """
        return pulumi.get(self, "online_retention_period")


@pulumi.output_type
class DatabaseSecurityConfigManagementSqlFirewallConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeJob":
            suggest = "exclude_job"
        elif key == "timeStatusUpdated":
            suggest = "time_status_updated"
        elif key == "violationLogAutoPurge":
            suggest = "violation_log_auto_purge"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseSecurityConfigManagementSqlFirewallConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseSecurityConfigManagementSqlFirewallConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseSecurityConfigManagementSqlFirewallConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_job: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 time_status_updated: Optional[_builtins.str] = None,
                 violation_log_auto_purge: Optional[_builtins.str] = None):
        """
        :param _builtins.str exclude_job: (Updatable) Specifies whether the firewall should include or exclude the database internal job activities.
        :param _builtins.str status: (Updatable) Specifies whether the firewall is enabled or disabled on the target database.
        :param _builtins.str time_status_updated: The most recent time when the firewall status is updated, in the format defined by RFC3339.
        :param _builtins.str violation_log_auto_purge: (Updatable) Specifies whether Data Safe should automatically purge the violation logs  from the database after collecting the violation logs and persisting on Data Safe.
        """
        if exclude_job is not None:
            pulumi.set(__self__, "exclude_job", exclude_job)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_status_updated is not None:
            pulumi.set(__self__, "time_status_updated", time_status_updated)
        if violation_log_auto_purge is not None:
            pulumi.set(__self__, "violation_log_auto_purge", violation_log_auto_purge)

    @_builtins.property
    @pulumi.getter(name="excludeJob")
    def exclude_job(self) -> Optional[_builtins.str]:
        """
        (Updatable) Specifies whether the firewall should include or exclude the database internal job activities.
        """
        return pulumi.get(self, "exclude_job")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        (Updatable) Specifies whether the firewall is enabled or disabled on the target database.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> Optional[_builtins.str]:
        """
        The most recent time when the firewall status is updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_status_updated")

    @_builtins.property
    @pulumi.getter(name="violationLogAutoPurge")
    def violation_log_auto_purge(self) -> Optional[_builtins.str]:
        """
        (Updatable) Specifies whether Data Safe should automatically purge the violation logs  from the database after collecting the violation logs and persisting on Data Safe.
        """
        return pulumi.get(self, "violation_log_auto_purge")


@pulumi.output_type
class DatabaseSecurityConfigSqlFirewallConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeJob":
            suggest = "exclude_job"
        elif key == "timeStatusUpdated":
            suggest = "time_status_updated"
        elif key == "violationLogAutoPurge":
            suggest = "violation_log_auto_purge"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseSecurityConfigSqlFirewallConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseSecurityConfigSqlFirewallConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseSecurityConfigSqlFirewallConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_job: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 time_status_updated: Optional[_builtins.str] = None,
                 violation_log_auto_purge: Optional[_builtins.str] = None):
        """
        :param _builtins.str exclude_job: (Updatable) Specifies whether the firewall should include or exclude the database internal job activities.
        :param _builtins.str status: (Updatable) Specifies whether the firewall is enabled or disabled on the target database.
        :param _builtins.str time_status_updated: The most recent time when the firewall status is updated, in the format defined by RFC3339.
        :param _builtins.str violation_log_auto_purge: (Updatable) Specifies whether Data Safe should automatically purge the violation logs  from the database after collecting the violation logs and persisting on Data Safe.
        """
        if exclude_job is not None:
            pulumi.set(__self__, "exclude_job", exclude_job)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_status_updated is not None:
            pulumi.set(__self__, "time_status_updated", time_status_updated)
        if violation_log_auto_purge is not None:
            pulumi.set(__self__, "violation_log_auto_purge", violation_log_auto_purge)

    @_builtins.property
    @pulumi.getter(name="excludeJob")
    def exclude_job(self) -> Optional[_builtins.str]:
        """
        (Updatable) Specifies whether the firewall should include or exclude the database internal job activities.
        """
        return pulumi.get(self, "exclude_job")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        (Updatable) Specifies whether the firewall is enabled or disabled on the target database.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> Optional[_builtins.str]:
        """
        The most recent time when the firewall status is updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_status_updated")

    @_builtins.property
    @pulumi.getter(name="violationLogAutoPurge")
    def violation_log_auto_purge(self) -> Optional[_builtins.str]:
        """
        (Updatable) Specifies whether Data Safe should automatically purge the violation logs  from the database after collecting the violation logs and persisting on Data Safe.
        """
        return pulumi.get(self, "violation_log_auto_purge")


@pulumi.output_type
class DiscoveryJobsResultModifiedAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appDefinedChildColumnKeys":
            suggest = "app_defined_child_column_keys"
        elif key == "dbDefinedChildColumnKeys":
            suggest = "db_defined_child_column_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscoveryJobsResultModifiedAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscoveryJobsResultModifiedAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscoveryJobsResultModifiedAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_defined_child_column_keys: Optional[Sequence[_builtins.str]] = None,
                 db_defined_child_column_keys: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] app_defined_child_column_keys: Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        :param Sequence[_builtins.str] db_defined_child_column_keys: Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        """
        if app_defined_child_column_keys is not None:
            pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        if db_defined_child_column_keys is not None:
            pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)

    @_builtins.property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Optional[Sequence[_builtins.str]]:
        """
        Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        """
        return pulumi.get(self, "app_defined_child_column_keys")

    @_builtins.property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Optional[Sequence[_builtins.str]]:
        """
        Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        """
        return pulumi.get(self, "db_defined_child_column_keys")


@pulumi.output_type
class DiscoveryModTablesForDiscovery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaName":
            suggest = "schema_name"
        elif key == "tableNames":
            suggest = "table_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscoveryModTablesForDiscovery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscoveryModTablesForDiscovery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscoveryModTablesForDiscovery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schema_name: _builtins.str,
                 table_names: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str schema_name: This contains the name of the schema.
        :param Sequence[_builtins.str] table_names: This contains an optional list of the table names.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "schema_name", schema_name)
        if table_names is not None:
            pulumi.set(__self__, "table_names", table_names)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        This contains the name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        This contains an optional list of the table names.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "table_names")


@pulumi.output_type
class LibraryMasingFormatFormatEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "endLength":
            suggest = "end_length"
        elif key == "endValue":
            suggest = "end_value"
        elif key == "fixedNumber":
            suggest = "fixed_number"
        elif key == "fixedString":
            suggest = "fixed_string"
        elif key == "groupingColumns":
            suggest = "grouping_columns"
        elif key == "libraryMaskingFormatId":
            suggest = "library_masking_format_id"
        elif key == "postProcessingFunction":
            suggest = "post_processing_function"
        elif key == "randomLists":
            suggest = "random_lists"
        elif key == "regularExpression":
            suggest = "regular_expression"
        elif key == "replaceWith":
            suggest = "replace_with"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sqlExpression":
            suggest = "sql_expression"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "startLength":
            suggest = "start_length"
        elif key == "startPosition":
            suggest = "start_position"
        elif key == "startValue":
            suggest = "start_value"
        elif key == "tableName":
            suggest = "table_name"
        elif key == "userDefinedFunction":
            suggest = "user_defined_function"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LibraryMasingFormatFormatEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LibraryMasingFormatFormatEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LibraryMasingFormatFormatEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 column_name: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 end_date: Optional[_builtins.str] = None,
                 end_length: Optional[_builtins.int] = None,
                 end_value: Optional[_builtins.float] = None,
                 fixed_number: Optional[_builtins.float] = None,
                 fixed_string: Optional[_builtins.str] = None,
                 grouping_columns: Optional[Sequence[_builtins.str]] = None,
                 length: Optional[_builtins.int] = None,
                 library_masking_format_id: Optional[_builtins.str] = None,
                 pattern: Optional[_builtins.str] = None,
                 post_processing_function: Optional[_builtins.str] = None,
                 random_lists: Optional[Sequence[_builtins.str]] = None,
                 regular_expression: Optional[_builtins.str] = None,
                 replace_with: Optional[_builtins.str] = None,
                 schema_name: Optional[_builtins.str] = None,
                 sql_expression: Optional[_builtins.str] = None,
                 start_date: Optional[_builtins.str] = None,
                 start_length: Optional[_builtins.int] = None,
                 start_position: Optional[_builtins.int] = None,
                 start_value: Optional[_builtins.float] = None,
                 table_name: Optional[_builtins.str] = None,
                 user_defined_function: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: (Updatable) The type of the format entry.
        :param _builtins.str column_name: (Updatable) The name of the substitution column.
        :param _builtins.str description: (Updatable) The description of the format entry.
        :param _builtins.str end_date: (Updatable) The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        :param _builtins.int end_length: (Updatable) The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        :param _builtins.float end_value: (Updatable) The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        :param _builtins.float fixed_number: (Updatable) The constant number to be used for masking.
        :param _builtins.str fixed_string: (Updatable) The constant string to be used for masking.
        :param Sequence[_builtins.str] grouping_columns: (Updatable) One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        :param _builtins.int length: (Updatable) The number of characters that should be there in the substring. It should be an integer and greater than zero.
        :param _builtins.str library_masking_format_id: (Updatable) The OCID of the library masking format.
        :param _builtins.str pattern: (Updatable) The pattern that should be used to mask data.
        :param _builtins.str post_processing_function: (Updatable) The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        :param Sequence[_builtins.str] random_lists: (Updatable) A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        :param _builtins.str regular_expression: (Updatable) The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
               
               In the case of ASCII characters, if a regular expression is not provided,  Deterministic Encryption can encrypt variable-length column values while  preserving their original format.
               
               If a regular expression is provided, the column values in all the rows must match  the regular expression. Deterministic Encryption supports a subset of the regular  expression language. It supports encryption of fixed-length strings, and does not  support * or + syntax of regular expressions. The encrypted values also match the  regular expression, which helps to ensure that the original format is preserved.  If an original value does not match the regular expression, Deterministic Encryption  might not produce a one-to-one mapping. All non-confirming values are mapped to a  single encrypted value, thereby producing a many-to-one mapping.
        :param _builtins.str replace_with: (Updatable) The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        :param _builtins.str schema_name: (Updatable) The name of the schema that contains the substitution column.
        :param _builtins.str sql_expression: (Updatable) The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        :param _builtins.str start_date: (Updatable) The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        :param _builtins.int start_length: (Updatable) The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        :param _builtins.int start_position: (Updatable) The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        :param _builtins.float start_value: (Updatable) The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        :param _builtins.str table_name: (Updatable) The name of the table that contains the substitution column.
        :param _builtins.str user_defined_function: (Updatable) The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        pulumi.set(__self__, "type", type)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_length is not None:
            pulumi.set(__self__, "end_length", end_length)
        if end_value is not None:
            pulumi.set(__self__, "end_value", end_value)
        if fixed_number is not None:
            pulumi.set(__self__, "fixed_number", fixed_number)
        if fixed_string is not None:
            pulumi.set(__self__, "fixed_string", fixed_string)
        if grouping_columns is not None:
            pulumi.set(__self__, "grouping_columns", grouping_columns)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if library_masking_format_id is not None:
            pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if post_processing_function is not None:
            pulumi.set(__self__, "post_processing_function", post_processing_function)
        if random_lists is not None:
            pulumi.set(__self__, "random_lists", random_lists)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replace_with is not None:
            pulumi.set(__self__, "replace_with", replace_with)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sql_expression is not None:
            pulumi.set(__self__, "sql_expression", sql_expression)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_length is not None:
            pulumi.set(__self__, "start_length", start_length)
        if start_position is not None:
            pulumi.set(__self__, "start_position", start_position)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if user_defined_function is not None:
            pulumi.set(__self__, "user_defined_function", user_defined_function)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        (Updatable) The type of the format entry.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The name of the substitution column.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        (Updatable) The description of the format entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[_builtins.str]:
        """
        (Updatable) The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="endLength")
    def end_length(self) -> Optional[_builtins.int]:
        """
        (Updatable) The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        """
        return pulumi.get(self, "end_length")

    @_builtins.property
    @pulumi.getter(name="endValue")
    def end_value(self) -> Optional[_builtins.float]:
        """
        (Updatable) The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        """
        return pulumi.get(self, "end_value")

    @_builtins.property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> Optional[_builtins.float]:
        """
        (Updatable) The constant number to be used for masking.
        """
        return pulumi.get(self, "fixed_number")

    @_builtins.property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> Optional[_builtins.str]:
        """
        (Updatable) The constant string to be used for masking.
        """
        return pulumi.get(self, "fixed_string")

    @_builtins.property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Optional[Sequence[_builtins.str]]:
        """
        (Updatable) One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        """
        return pulumi.get(self, "grouping_columns")

    @_builtins.property
    @pulumi.getter
    def length(self) -> Optional[_builtins.int]:
        """
        (Updatable) The number of characters that should be there in the substring. It should be an integer and greater than zero.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the library masking format.
        """
        return pulumi.get(self, "library_masking_format_id")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[_builtins.str]:
        """
        (Updatable) The pattern that should be used to mask data.
        """
        return pulumi.get(self, "pattern")

    @_builtins.property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> Optional[_builtins.str]:
        """
        (Updatable) The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "post_processing_function")

    @_builtins.property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Optional[Sequence[_builtins.str]]:
        """
        (Updatable) A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        """
        return pulumi.get(self, "random_lists")

    @_builtins.property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[_builtins.str]:
        """
        (Updatable) The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.

        In the case of ASCII characters, if a regular expression is not provided,  Deterministic Encryption can encrypt variable-length column values while  preserving their original format.

        If a regular expression is provided, the column values in all the rows must match  the regular expression. Deterministic Encryption supports a subset of the regular  expression language. It supports encryption of fixed-length strings, and does not  support * or + syntax of regular expressions. The encrypted values also match the  regular expression, which helps to ensure that the original format is preserved.  If an original value does not match the regular expression, Deterministic Encryption  might not produce a one-to-one mapping. All non-confirming values are mapped to a  single encrypted value, thereby producing a many-to-one mapping.
        """
        return pulumi.get(self, "regular_expression")

    @_builtins.property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> Optional[_builtins.str]:
        """
        (Updatable) The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        """
        return pulumi.get(self, "replace_with")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The name of the schema that contains the substitution column.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> Optional[_builtins.str]:
        """
        (Updatable) The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        """
        return pulumi.get(self, "sql_expression")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[_builtins.str]:
        """
        (Updatable) The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="startLength")
    def start_length(self) -> Optional[_builtins.int]:
        """
        (Updatable) The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        """
        return pulumi.get(self, "start_length")

    @_builtins.property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> Optional[_builtins.int]:
        """
        (Updatable) The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        """
        return pulumi.get(self, "start_position")

    @_builtins.property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[_builtins.float]:
        """
        (Updatable) The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        """
        return pulumi.get(self, "start_value")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The name of the table that contains the substitution column.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> Optional[_builtins.str]:
        """
        (Updatable) The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class MaskingPoliciesMaskingColumnMaskingFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatEntries":
            suggest = "format_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaskingPoliciesMaskingColumnMaskingFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaskingPoliciesMaskingColumnMaskingFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaskingPoliciesMaskingColumnMaskingFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_entries: Sequence['outputs.MaskingPoliciesMaskingColumnMaskingFormatFormatEntry'],
                 condition: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None):
        """
        :param Sequence['MaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs'] format_entries: (Updatable) An array of format entries. The combined output of all the format entries is  used for masking the column data values.
        :param _builtins.str condition: (Updatable) A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  <a href="https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html">conditional masking</a>  so that you can mask the column data values differently using different masking  formats and the associated conditions.
        :param _builtins.str description: (Updatable) The description of the masking format.
        """
        pulumi.set(__self__, "format_entries", format_entries)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="formatEntries")
    def format_entries(self) -> Sequence['outputs.MaskingPoliciesMaskingColumnMaskingFormatFormatEntry']:
        """
        (Updatable) An array of format entries. The combined output of all the format entries is  used for masking the column data values.
        """
        return pulumi.get(self, "format_entries")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[_builtins.str]:
        """
        (Updatable) A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  <a href="https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html">conditional masking</a>  so that you can mask the column data values differently using different masking  formats and the associated conditions.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        (Updatable) The description of the masking format.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class MaskingPoliciesMaskingColumnMaskingFormatFormatEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "endLength":
            suggest = "end_length"
        elif key == "endValue":
            suggest = "end_value"
        elif key == "fixedNumber":
            suggest = "fixed_number"
        elif key == "fixedString":
            suggest = "fixed_string"
        elif key == "groupingColumns":
            suggest = "grouping_columns"
        elif key == "libraryMaskingFormatId":
            suggest = "library_masking_format_id"
        elif key == "postProcessingFunction":
            suggest = "post_processing_function"
        elif key == "randomLists":
            suggest = "random_lists"
        elif key == "regularExpression":
            suggest = "regular_expression"
        elif key == "replaceWith":
            suggest = "replace_with"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sqlExpression":
            suggest = "sql_expression"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "startLength":
            suggest = "start_length"
        elif key == "startPosition":
            suggest = "start_position"
        elif key == "startValue":
            suggest = "start_value"
        elif key == "tableName":
            suggest = "table_name"
        elif key == "userDefinedFunction":
            suggest = "user_defined_function"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaskingPoliciesMaskingColumnMaskingFormatFormatEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaskingPoliciesMaskingColumnMaskingFormatFormatEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaskingPoliciesMaskingColumnMaskingFormatFormatEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 column_name: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 end_date: Optional[_builtins.str] = None,
                 end_length: Optional[_builtins.int] = None,
                 end_value: Optional[_builtins.float] = None,
                 fixed_number: Optional[_builtins.float] = None,
                 fixed_string: Optional[_builtins.str] = None,
                 grouping_columns: Optional[Sequence[_builtins.str]] = None,
                 length: Optional[_builtins.int] = None,
                 library_masking_format_id: Optional[_builtins.str] = None,
                 pattern: Optional[_builtins.str] = None,
                 post_processing_function: Optional[_builtins.str] = None,
                 random_lists: Optional[Sequence[_builtins.str]] = None,
                 regular_expression: Optional[_builtins.str] = None,
                 replace_with: Optional[_builtins.str] = None,
                 schema_name: Optional[_builtins.str] = None,
                 sql_expression: Optional[_builtins.str] = None,
                 start_date: Optional[_builtins.str] = None,
                 start_length: Optional[_builtins.int] = None,
                 start_position: Optional[_builtins.int] = None,
                 start_value: Optional[_builtins.float] = None,
                 table_name: Optional[_builtins.str] = None,
                 user_defined_function: Optional[_builtins.str] = None):
        """
        :param _builtins.str type: (Updatable) The type of the format entry.
        :param _builtins.str column_name: (Updatable) The name of the substitution column.
        :param _builtins.str description: (Updatable) The description of the format entry.
        :param _builtins.str end_date: (Updatable) The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        :param _builtins.int end_length: (Updatable) The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        :param _builtins.float end_value: (Updatable) The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        :param _builtins.float fixed_number: (Updatable) The constant number to be used for masking.
        :param _builtins.str fixed_string: (Updatable) The constant string to be used for masking.
        :param Sequence[_builtins.str] grouping_columns: (Updatable) One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        :param _builtins.int length: (Updatable) The number of characters that should be there in the substring. It should be an integer and greater than zero.
        :param _builtins.str library_masking_format_id: (Updatable) The OCID of the library masking format.
        :param _builtins.str pattern: (Updatable) The pattern that should be used to mask data.
        :param _builtins.str post_processing_function: (Updatable) The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        :param Sequence[_builtins.str] random_lists: (Updatable) A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        :param _builtins.str regular_expression: (Updatable) The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
               
               In the case of ASCII characters, if a regular expression is not provided,  Deterministic Encryption can encrypt variable-length column values while  preserving their original format.
               
               If a regular expression is provided, the column values in all the rows must match  the regular expression. Deterministic Encryption supports a subset of the regular  expression language. It supports encryption of fixed-length strings, and does not  support * or + syntax of regular expressions. The encrypted values also match the  regular expression, which helps to ensure that the original format is preserved.  If an original value does not match the regular expression, Deterministic Encryption  might not produce a one-to-one mapping. All non-confirming values are mapped to a  single encrypted value, thereby producing a many-to-one mapping.
        :param _builtins.str replace_with: (Updatable) The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        :param _builtins.str schema_name: (Updatable) The name of the schema that contains the substitution column.
        :param _builtins.str sql_expression: (Updatable) The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        :param _builtins.str start_date: (Updatable) The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        :param _builtins.int start_length: (Updatable) The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        :param _builtins.int start_position: (Updatable) The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        :param _builtins.float start_value: (Updatable) The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        :param _builtins.str table_name: (Updatable) The name of the table that contains the substitution column.
        :param _builtins.str user_defined_function: (Updatable) The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        pulumi.set(__self__, "type", type)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_length is not None:
            pulumi.set(__self__, "end_length", end_length)
        if end_value is not None:
            pulumi.set(__self__, "end_value", end_value)
        if fixed_number is not None:
            pulumi.set(__self__, "fixed_number", fixed_number)
        if fixed_string is not None:
            pulumi.set(__self__, "fixed_string", fixed_string)
        if grouping_columns is not None:
            pulumi.set(__self__, "grouping_columns", grouping_columns)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if library_masking_format_id is not None:
            pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if post_processing_function is not None:
            pulumi.set(__self__, "post_processing_function", post_processing_function)
        if random_lists is not None:
            pulumi.set(__self__, "random_lists", random_lists)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replace_with is not None:
            pulumi.set(__self__, "replace_with", replace_with)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sql_expression is not None:
            pulumi.set(__self__, "sql_expression", sql_expression)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_length is not None:
            pulumi.set(__self__, "start_length", start_length)
        if start_position is not None:
            pulumi.set(__self__, "start_position", start_position)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if user_defined_function is not None:
            pulumi.set(__self__, "user_defined_function", user_defined_function)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        (Updatable) The type of the format entry.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The name of the substitution column.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        (Updatable) The description of the format entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[_builtins.str]:
        """
        (Updatable) The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="endLength")
    def end_length(self) -> Optional[_builtins.int]:
        """
        (Updatable) The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        """
        return pulumi.get(self, "end_length")

    @_builtins.property
    @pulumi.getter(name="endValue")
    def end_value(self) -> Optional[_builtins.float]:
        """
        (Updatable) The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        """
        return pulumi.get(self, "end_value")

    @_builtins.property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> Optional[_builtins.float]:
        """
        (Updatable) The constant number to be used for masking.
        """
        return pulumi.get(self, "fixed_number")

    @_builtins.property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> Optional[_builtins.str]:
        """
        (Updatable) The constant string to be used for masking.
        """
        return pulumi.get(self, "fixed_string")

    @_builtins.property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Optional[Sequence[_builtins.str]]:
        """
        (Updatable) One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        """
        return pulumi.get(self, "grouping_columns")

    @_builtins.property
    @pulumi.getter
    def length(self) -> Optional[_builtins.int]:
        """
        (Updatable) The number of characters that should be there in the substring. It should be an integer and greater than zero.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the library masking format.
        """
        return pulumi.get(self, "library_masking_format_id")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> Optional[_builtins.str]:
        """
        (Updatable) The pattern that should be used to mask data.
        """
        return pulumi.get(self, "pattern")

    @_builtins.property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> Optional[_builtins.str]:
        """
        (Updatable) The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "post_processing_function")

    @_builtins.property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Optional[Sequence[_builtins.str]]:
        """
        (Updatable) A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        """
        return pulumi.get(self, "random_lists")

    @_builtins.property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[_builtins.str]:
        """
        (Updatable) The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.

        In the case of ASCII characters, if a regular expression is not provided,  Deterministic Encryption can encrypt variable-length column values while  preserving their original format.

        If a regular expression is provided, the column values in all the rows must match  the regular expression. Deterministic Encryption supports a subset of the regular  expression language. It supports encryption of fixed-length strings, and does not  support * or + syntax of regular expressions. The encrypted values also match the  regular expression, which helps to ensure that the original format is preserved.  If an original value does not match the regular expression, Deterministic Encryption  might not produce a one-to-one mapping. All non-confirming values are mapped to a  single encrypted value, thereby producing a many-to-one mapping.
        """
        return pulumi.get(self, "regular_expression")

    @_builtins.property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> Optional[_builtins.str]:
        """
        (Updatable) The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        """
        return pulumi.get(self, "replace_with")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The name of the schema that contains the substitution column.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> Optional[_builtins.str]:
        """
        (Updatable) The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        """
        return pulumi.get(self, "sql_expression")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[_builtins.str]:
        """
        (Updatable) The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="startLength")
    def start_length(self) -> Optional[_builtins.int]:
        """
        (Updatable) The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        """
        return pulumi.get(self, "start_length")

    @_builtins.property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> Optional[_builtins.int]:
        """
        (Updatable) The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        """
        return pulumi.get(self, "start_position")

    @_builtins.property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[_builtins.float]:
        """
        (Updatable) The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        """
        return pulumi.get(self, "start_value")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The name of the table that contains the substitution column.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> Optional[_builtins.str]:
        """
        (Updatable) The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class MaskingPolicyColumnSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnSource":
            suggest = "column_source"
        elif key == "sensitiveDataModelId":
            suggest = "sensitive_data_model_id"
        elif key == "targetId":
            suggest = "target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaskingPolicyColumnSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaskingPolicyColumnSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaskingPolicyColumnSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_source: _builtins.str,
                 sensitive_data_model_id: Optional[_builtins.str] = None,
                 target_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str column_source: (Updatable) The source of masking columns.
        :param _builtins.str sensitive_data_model_id: (Updatable) The OCID of the sensitive data model to be associated as the column source with the masking policy.
        :param _builtins.str target_id: (Updatable) The OCID of the target database to be associated as the column source with the masking policy.
        """
        pulumi.set(__self__, "column_source", column_source)
        if sensitive_data_model_id is not None:
            pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter(name="columnSource")
    def column_source(self) -> _builtins.str:
        """
        (Updatable) The source of masking columns.
        """
        return pulumi.get(self, "column_source")

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the sensitive data model to be associated as the column source with the masking policy.
        """
        return pulumi.get(self, "sensitive_data_model_id")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the target database to be associated as the column source with the masking policy.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class ReportDefinitionColumnFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldName":
            suggest = "field_name"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isHidden":
            suggest = "is_hidden"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDefinitionColumnFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDefinitionColumnFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDefinitionColumnFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expressions: Sequence[_builtins.str],
                 field_name: _builtins.str,
                 is_enabled: _builtins.bool,
                 is_hidden: _builtins.bool,
                 operator: _builtins.str):
        """
        :param Sequence[_builtins.str] expressions: (Updatable) An array of expressions based on the operator type. A filter may have one or more expressions.
        :param _builtins.str field_name: (Updatable) Name of the column on which the filter must be applied.
        :param _builtins.bool is_enabled: (Updatable) Indicates whether the filter is enabled. Values can either be 'true' or 'false'.
        :param _builtins.bool is_hidden: (Updatable) Indicates whether the filter is hidden. Values can either be 'true' or 'false'.
        :param _builtins.str operator: (Updatable) Specifies the type of operator that must be applied for example in, eq etc.
        """
        pulumi.set(__self__, "expressions", expressions)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_hidden", is_hidden)
        pulumi.set(__self__, "operator", operator)

    @_builtins.property
    @pulumi.getter
    def expressions(self) -> Sequence[_builtins.str]:
        """
        (Updatable) An array of expressions based on the operator type. A filter may have one or more expressions.
        """
        return pulumi.get(self, "expressions")

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> _builtins.str:
        """
        (Updatable) Name of the column on which the filter must be applied.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        """
        (Updatable) Indicates whether the filter is enabled. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> _builtins.bool:
        """
        (Updatable) Indicates whether the filter is hidden. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_hidden")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        (Updatable) Specifies the type of operator that must be applied for example in, eq etc.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class ReportDefinitionColumnInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "displayOrder":
            suggest = "display_order"
        elif key == "fieldName":
            suggest = "field_name"
        elif key == "isHidden":
            suggest = "is_hidden"
        elif key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDefinitionColumnInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDefinitionColumnInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDefinitionColumnInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: _builtins.str,
                 display_order: _builtins.int,
                 field_name: _builtins.str,
                 is_hidden: _builtins.bool,
                 data_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str display_name: (Updatable) Name of the column displayed on UI.
        :param _builtins.int display_order: (Updatable) Specifies the display order of the column.
        :param _builtins.str field_name: (Updatable) Specifies the corresponding field name in the data source.
        :param _builtins.bool is_hidden: (Updatable) Indicates if the column is hidden. Values can either be 'true' or 'false'.
        :param _builtins.str data_type: (Updatable) Specifies the data type of the column.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_hidden", is_hidden)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        (Updatable) Name of the column displayed on UI.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> _builtins.int:
        """
        (Updatable) Specifies the display order of the column.
        """
        return pulumi.get(self, "display_order")

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> _builtins.str:
        """
        (Updatable) Specifies the corresponding field name in the data source.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> _builtins.bool:
        """
        (Updatable) Indicates if the column is hidden. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_hidden")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[_builtins.str]:
        """
        (Updatable) Specifies the data type of the column.
        """
        return pulumi.get(self, "data_type")


@pulumi.output_type
class ReportDefinitionColumnSorting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldName":
            suggest = "field_name"
        elif key == "isAscending":
            suggest = "is_ascending"
        elif key == "sortingOrder":
            suggest = "sorting_order"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDefinitionColumnSorting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDefinitionColumnSorting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDefinitionColumnSorting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_name: _builtins.str,
                 is_ascending: _builtins.bool,
                 sorting_order: _builtins.int):
        """
        :param _builtins.str field_name: (Updatable) Name of the column that must be sorted.
        :param _builtins.bool is_ascending: (Updatable) Indicates if the column must be sorted in ascending order. Values can either be 'true' or 'false'.
        :param _builtins.int sorting_order: (Updatable) Indicates the order at which column must be sorted.
        """
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_ascending", is_ascending)
        pulumi.set(__self__, "sorting_order", sorting_order)

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> _builtins.str:
        """
        (Updatable) Name of the column that must be sorted.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="isAscending")
    def is_ascending(self) -> _builtins.bool:
        """
        (Updatable) Indicates if the column must be sorted in ascending order. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_ascending")

    @_builtins.property
    @pulumi.getter(name="sortingOrder")
    def sorting_order(self) -> _builtins.int:
        """
        (Updatable) Indicates the order at which column must be sorted.
        """
        return pulumi.get(self, "sorting_order")


@pulumi.output_type
class ReportDefinitionSummary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayOrder":
            suggest = "display_order"
        elif key == "countOf":
            suggest = "count_of"
        elif key == "groupByFieldName":
            suggest = "group_by_field_name"
        elif key == "isHidden":
            suggest = "is_hidden"
        elif key == "scimFilter":
            suggest = "scim_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDefinitionSummary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDefinitionSummary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDefinitionSummary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_order: _builtins.int,
                 name: _builtins.str,
                 count_of: Optional[_builtins.str] = None,
                 group_by_field_name: Optional[_builtins.str] = None,
                 is_hidden: Optional[_builtins.bool] = None,
                 scim_filter: Optional[_builtins.str] = None):
        """
        :param _builtins.int display_order: (Updatable) Specifies the order in which the summary must be displayed.
        :param _builtins.str name: (Updatable) Name of the report summary.
        :param _builtins.str count_of: (Updatable) Name of the key or count of object.
        :param _builtins.str group_by_field_name: (Updatable) A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
        :param _builtins.bool is_hidden: (Updatable) Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        :param _builtins.str scim_filter: (Updatable) Additional scim filters used to get the specific summary.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "name", name)
        if count_of is not None:
            pulumi.set(__self__, "count_of", count_of)
        if group_by_field_name is not None:
            pulumi.set(__self__, "group_by_field_name", group_by_field_name)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if scim_filter is not None:
            pulumi.set(__self__, "scim_filter", scim_filter)

    @_builtins.property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> _builtins.int:
        """
        (Updatable) Specifies the order in which the summary must be displayed.
        """
        return pulumi.get(self, "display_order")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        (Updatable) Name of the report summary.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="countOf")
    def count_of(self) -> Optional[_builtins.str]:
        """
        (Updatable) Name of the key or count of object.
        """
        return pulumi.get(self, "count_of")

    @_builtins.property
    @pulumi.getter(name="groupByFieldName")
    def group_by_field_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
        """
        return pulumi.get(self, "group_by_field_name")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[_builtins.bool]:
        """
        (Updatable) Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_hidden")

    @_builtins.property
    @pulumi.getter(name="scimFilter")
    def scim_filter(self) -> Optional[_builtins.str]:
        """
        (Updatable) Additional scim filters used to get the specific summary.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "scim_filter")


@pulumi.output_type
class SecurityAssessmentStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "highRisks":
            suggest = "high_risks"
        elif key == "lowRisks":
            suggest = "low_risks"
        elif key == "mediumRisks":
            suggest = "medium_risks"
        elif key == "targetsCount":
            suggest = "targets_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advisories: Optional[Sequence['outputs.SecurityAssessmentStatisticAdvisory']] = None,
                 deferreds: Optional[Sequence['outputs.SecurityAssessmentStatisticDeferred']] = None,
                 evaluates: Optional[Sequence['outputs.SecurityAssessmentStatisticEvaluate']] = None,
                 high_risks: Optional[Sequence['outputs.SecurityAssessmentStatisticHighRisk']] = None,
                 low_risks: Optional[Sequence['outputs.SecurityAssessmentStatisticLowRisk']] = None,
                 medium_risks: Optional[Sequence['outputs.SecurityAssessmentStatisticMediumRisk']] = None,
                 passes: Optional[Sequence['outputs.SecurityAssessmentStatisticPass']] = None,
                 targets_count: Optional[_builtins.int] = None):
        """
        :param Sequence['SecurityAssessmentStatisticAdvisoryArgs'] advisories: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['SecurityAssessmentStatisticDeferredArgs'] deferreds: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['SecurityAssessmentStatisticEvaluateArgs'] evaluates: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['SecurityAssessmentStatisticHighRiskArgs'] high_risks: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['SecurityAssessmentStatisticLowRiskArgs'] low_risks: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['SecurityAssessmentStatisticMediumRiskArgs'] medium_risks: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['SecurityAssessmentStatisticPassArgs'] passes: Statistics showing the number of findings with a particular risk level for each category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        """
        if advisories is not None:
            pulumi.set(__self__, "advisories", advisories)
        if deferreds is not None:
            pulumi.set(__self__, "deferreds", deferreds)
        if evaluates is not None:
            pulumi.set(__self__, "evaluates", evaluates)
        if high_risks is not None:
            pulumi.set(__self__, "high_risks", high_risks)
        if low_risks is not None:
            pulumi.set(__self__, "low_risks", low_risks)
        if medium_risks is not None:
            pulumi.set(__self__, "medium_risks", medium_risks)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)

    @_builtins.property
    @pulumi.getter
    def advisories(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticAdvisory']]:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "advisories")

    @_builtins.property
    @pulumi.getter
    def deferreds(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticDeferred']]:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "deferreds")

    @_builtins.property
    @pulumi.getter
    def evaluates(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticEvaluate']]:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "evaluates")

    @_builtins.property
    @pulumi.getter(name="highRisks")
    def high_risks(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticHighRisk']]:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "high_risks")

    @_builtins.property
    @pulumi.getter(name="lowRisks")
    def low_risks(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticLowRisk']]:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "low_risks")

    @_builtins.property
    @pulumi.getter(name="mediumRisks")
    def medium_risks(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticMediumRisk']]:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "medium_risks")

    @_builtins.property
    @pulumi.getter
    def passes(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticPass']]:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "passes")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[_builtins.int]:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")


@pulumi.output_type
class SecurityAssessmentStatisticAdvisory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticAdvisory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticAdvisory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticAdvisory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[_builtins.int] = None,
                 authorization_control_findings_count: Optional[_builtins.int] = None,
                 data_encryption_findings_count: Optional[_builtins.int] = None,
                 db_configuration_findings_count: Optional[_builtins.int] = None,
                 fine_grained_access_control_findings_count: Optional[_builtins.int] = None,
                 privileges_and_roles_findings_count: Optional[_builtins.int] = None,
                 targets_count: Optional[_builtins.int] = None,
                 user_accounts_findings_count: Optional[_builtins.int] = None):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[_builtins.int]:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticDeferred(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticDeferred. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticDeferred.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticDeferred.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[_builtins.int] = None,
                 authorization_control_findings_count: Optional[_builtins.int] = None,
                 data_encryption_findings_count: Optional[_builtins.int] = None,
                 db_configuration_findings_count: Optional[_builtins.int] = None,
                 fine_grained_access_control_findings_count: Optional[_builtins.int] = None,
                 privileges_and_roles_findings_count: Optional[_builtins.int] = None,
                 targets_count: Optional[_builtins.int] = None,
                 user_accounts_findings_count: Optional[_builtins.int] = None):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[_builtins.int]:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticEvaluate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticEvaluate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticEvaluate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticEvaluate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[_builtins.int] = None,
                 authorization_control_findings_count: Optional[_builtins.int] = None,
                 data_encryption_findings_count: Optional[_builtins.int] = None,
                 db_configuration_findings_count: Optional[_builtins.int] = None,
                 fine_grained_access_control_findings_count: Optional[_builtins.int] = None,
                 privileges_and_roles_findings_count: Optional[_builtins.int] = None,
                 targets_count: Optional[_builtins.int] = None,
                 user_accounts_findings_count: Optional[_builtins.int] = None):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[_builtins.int]:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticHighRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticHighRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticHighRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticHighRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[_builtins.int] = None,
                 authorization_control_findings_count: Optional[_builtins.int] = None,
                 data_encryption_findings_count: Optional[_builtins.int] = None,
                 db_configuration_findings_count: Optional[_builtins.int] = None,
                 fine_grained_access_control_findings_count: Optional[_builtins.int] = None,
                 privileges_and_roles_findings_count: Optional[_builtins.int] = None,
                 targets_count: Optional[_builtins.int] = None,
                 user_accounts_findings_count: Optional[_builtins.int] = None):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[_builtins.int]:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticLowRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticLowRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticLowRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticLowRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[_builtins.int] = None,
                 authorization_control_findings_count: Optional[_builtins.int] = None,
                 data_encryption_findings_count: Optional[_builtins.int] = None,
                 db_configuration_findings_count: Optional[_builtins.int] = None,
                 fine_grained_access_control_findings_count: Optional[_builtins.int] = None,
                 privileges_and_roles_findings_count: Optional[_builtins.int] = None,
                 targets_count: Optional[_builtins.int] = None,
                 user_accounts_findings_count: Optional[_builtins.int] = None):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[_builtins.int]:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticMediumRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticMediumRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticMediumRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticMediumRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[_builtins.int] = None,
                 authorization_control_findings_count: Optional[_builtins.int] = None,
                 data_encryption_findings_count: Optional[_builtins.int] = None,
                 db_configuration_findings_count: Optional[_builtins.int] = None,
                 fine_grained_access_control_findings_count: Optional[_builtins.int] = None,
                 privileges_and_roles_findings_count: Optional[_builtins.int] = None,
                 targets_count: Optional[_builtins.int] = None,
                 user_accounts_findings_count: Optional[_builtins.int] = None):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[_builtins.int]:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticPass(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticPass. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticPass.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticPass.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[_builtins.int] = None,
                 authorization_control_findings_count: Optional[_builtins.int] = None,
                 data_encryption_findings_count: Optional[_builtins.int] = None,
                 db_configuration_findings_count: Optional[_builtins.int] = None,
                 fine_grained_access_control_findings_count: Optional[_builtins.int] = None,
                 privileges_and_roles_findings_count: Optional[_builtins.int] = None,
                 targets_count: Optional[_builtins.int] = None,
                 user_accounts_findings_count: Optional[_builtins.int] = None):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[_builtins.int]:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[_builtins.int]:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SensitiveDataModelReferentialRelationChild(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appName":
            suggest = "app_name"
        elif key == "columnGroups":
            suggest = "column_groups"
        elif key == "objectType":
            suggest = "object_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sensitiveTypeIds":
            suggest = "sensitive_type_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensitiveDataModelReferentialRelationChild. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensitiveDataModelReferentialRelationChild.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensitiveDataModelReferentialRelationChild.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_name: _builtins.str,
                 column_groups: Sequence[_builtins.str],
                 object: _builtins.str,
                 object_type: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_type_ids: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str app_name: The application name.
        :param Sequence[_builtins.str] column_groups: Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        :param _builtins.str object: The database object that contains the columns.
        :param _builtins.str object_type: The type of the database object that contains the sensitive column.
        :param _builtins.str schema_name: The schema name.
        :param Sequence[_builtins.str] sensitive_type_ids: Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "column_groups", column_groups)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "schema_name", schema_name)
        if sensitive_type_ids is not None:
            pulumi.set(__self__, "sensitive_type_ids", sensitive_type_ids)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The application name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="columnGroups")
    def column_groups(self) -> Sequence[_builtins.str]:
        """
        Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        """
        return pulumi.get(self, "column_groups")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The database object that contains the columns.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the database object that contains the sensitive column.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        The schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeIds")
    def sensitive_type_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        return pulumi.get(self, "sensitive_type_ids")


@pulumi.output_type
class SensitiveDataModelReferentialRelationParent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appName":
            suggest = "app_name"
        elif key == "columnGroups":
            suggest = "column_groups"
        elif key == "objectType":
            suggest = "object_type"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sensitiveTypeIds":
            suggest = "sensitive_type_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensitiveDataModelReferentialRelationParent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensitiveDataModelReferentialRelationParent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensitiveDataModelReferentialRelationParent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_name: _builtins.str,
                 column_groups: Sequence[_builtins.str],
                 object: _builtins.str,
                 object_type: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_type_ids: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str app_name: The application name.
        :param Sequence[_builtins.str] column_groups: Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        :param _builtins.str object: The database object that contains the columns.
        :param _builtins.str object_type: The type of the database object that contains the sensitive column.
        :param _builtins.str schema_name: The schema name.
        :param Sequence[_builtins.str] sensitive_type_ids: Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "column_groups", column_groups)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "schema_name", schema_name)
        if sensitive_type_ids is not None:
            pulumi.set(__self__, "sensitive_type_ids", sensitive_type_ids)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The application name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="columnGroups")
    def column_groups(self) -> Sequence[_builtins.str]:
        """
        Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        """
        return pulumi.get(self, "column_groups")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The database object that contains the columns.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the database object that contains the sensitive column.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        The schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeIds")
    def sensitive_type_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        return pulumi.get(self, "sensitive_type_ids")


@pulumi.output_type
class SensitiveDataModelTablesForDiscovery(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaName":
            suggest = "schema_name"
        elif key == "tableNames":
            suggest = "table_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensitiveDataModelTablesForDiscovery. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensitiveDataModelTablesForDiscovery.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensitiveDataModelTablesForDiscovery.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schema_name: _builtins.str,
                 table_names: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str schema_name: (Updatable) This contains the name of the schema.
        :param Sequence[_builtins.str] table_names: (Updatable) This contains an optional list of the table names.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        if table_names is not None:
            pulumi.set(__self__, "table_names", table_names)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        (Updatable) This contains the name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        (Updatable) This contains an optional list of the table names.
        """
        return pulumi.get(self, "table_names")


@pulumi.output_type
class SensitiveTypeGroupGroupedSensitiveTypeItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sensitiveTypeId":
            suggest = "sensitive_type_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SensitiveTypeGroupGroupedSensitiveTypeItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SensitiveTypeGroupGroupedSensitiveTypeItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SensitiveTypeGroupGroupedSensitiveTypeItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sensitive_type_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str sensitive_type_id: The OCID of the sensitive type.
        """
        if sensitive_type_id is not None:
            pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the sensitive type.
        """
        return pulumi.get(self, "sensitive_type_id")


@pulumi.output_type
class SensitiveTypeGroupGroupedSensitiveTypePatchOperation(dict):
    def __init__(__self__, *,
                 operation: _builtins.str,
                 selection: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        """
        :param _builtins.str operation: (Updatable) The operation can be one of these values: `INSERT`, `MERGE`, `REMOVE`
        :param _builtins.str selection: (Updatable)
        :param Mapping[str, _builtins.str] value: (Updatable)
        """
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        (Updatable) The operation can be one of these values: `INSERT`, `MERGE`, `REMOVE`
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def selection(self) -> _builtins.str:
        """
        (Updatable)
        """
        return pulumi.get(self, "selection")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        """
        (Updatable)
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TargetDatabaseConnectionOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionType":
            suggest = "connection_type"
        elif key == "datasafePrivateEndpointId":
            suggest = "datasafe_private_endpoint_id"
        elif key == "onPremConnectorId":
            suggest = "on_prem_connector_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseConnectionOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseConnectionOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseConnectionOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_type: _builtins.str,
                 datasafe_private_endpoint_id: Optional[_builtins.str] = None,
                 on_prem_connector_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str connection_type: (Updatable) The connection type used to connect to the database. Allowed values:
               * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
               * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        :param _builtins.str datasafe_private_endpoint_id: (Updatable) The OCID of the Data Safe private endpoint.
        :param _builtins.str on_prem_connector_id: (Updatable) The OCID of the on-premises connector.
        """
        pulumi.set(__self__, "connection_type", connection_type)
        if datasafe_private_endpoint_id is not None:
            pulumi.set(__self__, "datasafe_private_endpoint_id", datasafe_private_endpoint_id)
        if on_prem_connector_id is not None:
            pulumi.set(__self__, "on_prem_connector_id", on_prem_connector_id)

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        (Updatable) The connection type used to connect to the database. Allowed values:
        * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
        * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter(name="datasafePrivateEndpointId")
    def datasafe_private_endpoint_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the Data Safe private endpoint.
        """
        return pulumi.get(self, "datasafe_private_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="onPremConnectorId")
    def on_prem_connector_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the on-premises connector.
        """
        return pulumi.get(self, "on_prem_connector_id")


@pulumi.output_type
class TargetDatabaseCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str password: (Updatable) The password of the database user.
        :param _builtins.str user_name: (Updatable) The database user name.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        (Updatable) The password of the database user.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        (Updatable) The database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class TargetDatabaseDatabaseDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseType":
            suggest = "database_type"
        elif key == "infrastructureType":
            suggest = "infrastructure_type"
        elif key == "autonomousDatabaseId":
            suggest = "autonomous_database_id"
        elif key == "dbSystemId":
            suggest = "db_system_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "listenerPort":
            suggest = "listener_port"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "vmClusterId":
            suggest = "vm_cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseDatabaseDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseDatabaseDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseDatabaseDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_type: _builtins.str,
                 infrastructure_type: _builtins.str,
                 autonomous_database_id: Optional[_builtins.str] = None,
                 db_system_id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 ip_addresses: Optional[Sequence[_builtins.str]] = None,
                 listener_port: Optional[_builtins.int] = None,
                 service_name: Optional[_builtins.str] = None,
                 vm_cluster_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str database_type: (Updatable) The database type.
        :param _builtins.str infrastructure_type: (Updatable) The infrastructure type the database is running on.
        :param _builtins.str autonomous_database_id: (Updatable) The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str db_system_id: (Updatable) The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str instance_id: (Updatable) The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: (Updatable) The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: (Updatable) The port number of the database listener.
        :param _builtins.str service_name: (Updatable) The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: (Updatable) The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        if autonomous_database_id is not None:
            pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if vm_cluster_id is not None:
            pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        (Updatable) The database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        (Updatable) The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        (Updatable) The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[_builtins.int]:
        """
        (Updatable) The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class TargetDatabasePeerTargetDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseDetails":
            suggest = "database_details"
        elif key == "databaseUniqueName":
            suggest = "database_unique_name"
        elif key == "dataguardAssociationId":
            suggest = "dataguard_association_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "tlsConfigs":
            suggest = "tls_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabasePeerTargetDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabasePeerTargetDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabasePeerTargetDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_details: Optional[Sequence['outputs.TargetDatabasePeerTargetDatabaseDatabaseDetail']] = None,
                 database_unique_name: Optional[_builtins.str] = None,
                 dataguard_association_id: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None,
                 key: Optional[_builtins.int] = None,
                 lifecycle_details: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None,
                 time_created: Optional[_builtins.str] = None,
                 tls_configs: Optional[Sequence['outputs.TargetDatabasePeerTargetDatabaseTlsConfig']] = None):
        """
        :param Sequence['TargetDatabasePeerTargetDatabaseDatabaseDetailArgs'] database_details: (Updatable) Details of the database for the registration in Data Safe.
        :param _builtins.str database_unique_name: Unique name of the database associated to the peer target database.
        :param _builtins.str dataguard_association_id: The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        :param _builtins.str description: (Updatable) The description of the target database in Data Safe.
        :param _builtins.str display_name: (Updatable) The display name of the target database in Data Safe. The name is modifiable and does not need to be unique.
        :param _builtins.int key: The secondary key assigned for the peer target database in Data Safe.
        :param _builtins.str lifecycle_details: Details about the current state of the peer target database in Data Safe.
        :param _builtins.str role: Role of the database associated to the peer target database.
        :param _builtins.str state: The current state of the target database in Data Safe.
        :param _builtins.str time_created: The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        :param Sequence['TargetDatabasePeerTargetDatabaseTlsConfigArgs'] tls_configs: (Updatable) The details required to establish a TLS enabled connection.
        """
        if database_details is not None:
            pulumi.set(__self__, "database_details", database_details)
        if database_unique_name is not None:
            pulumi.set(__self__, "database_unique_name", database_unique_name)
        if dataguard_association_id is not None:
            pulumi.set(__self__, "dataguard_association_id", dataguard_association_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if tls_configs is not None:
            pulumi.set(__self__, "tls_configs", tls_configs)

    @_builtins.property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> Optional[Sequence['outputs.TargetDatabasePeerTargetDatabaseDatabaseDetail']]:
        """
        (Updatable) Details of the database for the registration in Data Safe.
        """
        return pulumi.get(self, "database_details")

    @_builtins.property
    @pulumi.getter(name="databaseUniqueName")
    def database_unique_name(self) -> Optional[_builtins.str]:
        """
        Unique name of the database associated to the peer target database.
        """
        return pulumi.get(self, "database_unique_name")

    @_builtins.property
    @pulumi.getter(name="dataguardAssociationId")
    def dataguard_association_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        """
        return pulumi.get(self, "dataguard_association_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        (Updatable) The description of the target database in Data Safe.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The display name of the target database in Data Safe. The name is modifiable and does not need to be unique.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.int]:
        """
        The secondary key assigned for the peer target database in Data Safe.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[_builtins.str]:
        """
        Details about the current state of the peer target database in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Role of the database associated to the peer target database.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The current state of the target database in Data Safe.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[_builtins.str]:
        """
        The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="tlsConfigs")
    def tls_configs(self) -> Optional[Sequence['outputs.TargetDatabasePeerTargetDatabaseTlsConfig']]:
        """
        (Updatable) The details required to establish a TLS enabled connection.
        """
        return pulumi.get(self, "tls_configs")


@pulumi.output_type
class TargetDatabasePeerTargetDatabaseDatabaseDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autonomousDatabaseId":
            suggest = "autonomous_database_id"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "dbSystemId":
            suggest = "db_system_id"
        elif key == "infrastructureType":
            suggest = "infrastructure_type"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "listenerPort":
            suggest = "listener_port"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "vmClusterId":
            suggest = "vm_cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabasePeerTargetDatabaseDatabaseDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabasePeerTargetDatabaseDatabaseDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabasePeerTargetDatabaseDatabaseDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 autonomous_database_id: Optional[_builtins.str] = None,
                 database_type: Optional[_builtins.str] = None,
                 db_system_id: Optional[_builtins.str] = None,
                 infrastructure_type: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 ip_addresses: Optional[Sequence[_builtins.str]] = None,
                 listener_port: Optional[_builtins.int] = None,
                 service_name: Optional[_builtins.str] = None,
                 vm_cluster_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str autonomous_database_id: (Updatable) The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str database_type: (Updatable) The database type.
        :param _builtins.str db_system_id: (Updatable) The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str infrastructure_type: (Updatable) The infrastructure type the database is running on.
        :param _builtins.str instance_id: (Updatable) The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: (Updatable) The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: (Updatable) The port number of the database listener.
        :param _builtins.str service_name: (Updatable) The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: (Updatable) The OCID of the VM cluster in which the database is running.
        """
        if autonomous_database_id is not None:
            pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if infrastructure_type is not None:
            pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if vm_cluster_id is not None:
            pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[_builtins.str]:
        """
        (Updatable) The database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> Optional[_builtins.str]:
        """
        (Updatable) The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        (Updatable) The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[_builtins.int]:
        """
        (Updatable) The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class TargetDatabasePeerTargetDatabaseDatabaseDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseType":
            suggest = "database_type"
        elif key == "infrastructureType":
            suggest = "infrastructure_type"
        elif key == "autonomousDatabaseId":
            suggest = "autonomous_database_id"
        elif key == "dbSystemId":
            suggest = "db_system_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "listenerPort":
            suggest = "listener_port"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "vmClusterId":
            suggest = "vm_cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabasePeerTargetDatabaseDatabaseDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabasePeerTargetDatabaseDatabaseDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabasePeerTargetDatabaseDatabaseDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_type: _builtins.str,
                 infrastructure_type: _builtins.str,
                 autonomous_database_id: Optional[_builtins.str] = None,
                 db_system_id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 ip_addresses: Optional[Sequence[_builtins.str]] = None,
                 listener_port: Optional[_builtins.int] = None,
                 service_name: Optional[_builtins.str] = None,
                 vm_cluster_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str database_type: (Updatable) The database type.
        :param _builtins.str infrastructure_type: (Updatable) The infrastructure type the database is running on.
        :param _builtins.str autonomous_database_id: (Updatable) The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str db_system_id: (Updatable) The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str instance_id: (Updatable) The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: (Updatable) The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: (Updatable) The port number of the database listener.
        :param _builtins.str service_name: (Updatable) The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: (Updatable) The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        if autonomous_database_id is not None:
            pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if vm_cluster_id is not None:
            pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        (Updatable) The database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        (Updatable) The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        (Updatable) The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[_builtins.int]:
        """
        (Updatable) The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[_builtins.str]:
        """
        (Updatable) The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> Optional[_builtins.str]:
        """
        (Updatable) The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class TargetDatabasePeerTargetDatabaseDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseDetails":
            suggest = "database_details"
        elif key == "dataguardAssociationId":
            suggest = "dataguard_association_id"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "tlsConfig":
            suggest = "tls_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabasePeerTargetDatabaseDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabasePeerTargetDatabaseDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabasePeerTargetDatabaseDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_details: 'outputs.TargetDatabasePeerTargetDatabaseDetailDatabaseDetails',
                 dataguard_association_id: Optional[_builtins.str] = None,
                 description: Optional[_builtins.str] = None,
                 display_name: Optional[_builtins.str] = None,
                 tls_config: Optional['outputs.TargetDatabasePeerTargetDatabaseDetailTlsConfig'] = None):
        """
        :param 'TargetDatabasePeerTargetDatabaseDetailDatabaseDetailsArgs' database_details: Details of the database for the registration in Data Safe.
        :param _builtins.str dataguard_association_id: The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
        :param _builtins.str description: The description of the peer target database in Data Safe.
        :param _builtins.str display_name: The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
        :param 'TargetDatabasePeerTargetDatabaseDetailTlsConfigArgs' tls_config: The details required to establish a TLS enabled connection.
        """
        pulumi.set(__self__, "database_details", database_details)
        if dataguard_association_id is not None:
            pulumi.set(__self__, "dataguard_association_id", dataguard_association_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if tls_config is not None:
            pulumi.set(__self__, "tls_config", tls_config)

    @_builtins.property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> 'outputs.TargetDatabasePeerTargetDatabaseDetailDatabaseDetails':
        """
        Details of the database for the registration in Data Safe.
        """
        return pulumi.get(self, "database_details")

    @_builtins.property
    @pulumi.getter(name="dataguardAssociationId")
    def dataguard_association_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the Data Guard Association resource in which the database being registered is considered as peer database to the primary database.
        """
        return pulumi.get(self, "dataguard_association_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the peer target database in Data Safe.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The display name of the peer target database in Data Safe. The name is modifiable and does not need to be unique.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> Optional['outputs.TargetDatabasePeerTargetDatabaseDetailTlsConfig']:
        """
        The details required to establish a TLS enabled connection.
        """
        return pulumi.get(self, "tls_config")


@pulumi.output_type
class TargetDatabasePeerTargetDatabaseDetailDatabaseDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseType":
            suggest = "database_type"
        elif key == "infrastructureType":
            suggest = "infrastructure_type"
        elif key == "autonomousDatabaseId":
            suggest = "autonomous_database_id"
        elif key == "dbSystemId":
            suggest = "db_system_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "listenerPort":
            suggest = "listener_port"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "vmClusterId":
            suggest = "vm_cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabasePeerTargetDatabaseDetailDatabaseDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabasePeerTargetDatabaseDetailDatabaseDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabasePeerTargetDatabaseDetailDatabaseDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_type: _builtins.str,
                 infrastructure_type: _builtins.str,
                 autonomous_database_id: Optional[_builtins.str] = None,
                 db_system_id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 ip_addresses: Optional[Sequence[_builtins.str]] = None,
                 listener_port: Optional[_builtins.int] = None,
                 service_name: Optional[_builtins.str] = None,
                 vm_cluster_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str database_type: The database type.
        :param _builtins.str infrastructure_type: The infrastructure type the database is running on.
        :param _builtins.str autonomous_database_id: The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str db_system_id: The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: The port number of the database listener.
        :param _builtins.str service_name: The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        if autonomous_database_id is not None:
            pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if vm_cluster_id is not None:
            pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        The database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[_builtins.int]:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[_builtins.str]:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class TargetDatabasePeerTargetDatabaseDetailTlsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateStoreType":
            suggest = "certificate_store_type"
        elif key == "keyStoreContent":
            suggest = "key_store_content"
        elif key == "storePassword":
            suggest = "store_password"
        elif key == "trustStoreContent":
            suggest = "trust_store_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabasePeerTargetDatabaseDetailTlsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabasePeerTargetDatabaseDetailTlsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabasePeerTargetDatabaseDetailTlsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 certificate_store_type: Optional[_builtins.str] = None,
                 key_store_content: Optional[_builtins.str] = None,
                 store_password: Optional[_builtins.str] = None,
                 trust_store_content: Optional[_builtins.str] = None):
        """
        :param _builtins.str status: Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str certificate_store_type: The format of the certificate store.
        :param _builtins.str key_store_content: Base64 encoded string of key store file content.
        :param _builtins.str store_password: The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "status", status)
        if certificate_store_type is not None:
            pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        if key_store_content is not None:
            pulumi.set(__self__, "key_store_content", key_store_content)
        if store_password is not None:
            pulumi.set(__self__, "store_password", store_password)
        if trust_store_content is not None:
            pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> Optional[_builtins.str]:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> Optional[_builtins.str]:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> Optional[_builtins.str]:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> Optional[_builtins.str]:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class TargetDatabasePeerTargetDatabaseTlsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateStoreType":
            suggest = "certificate_store_type"
        elif key == "keyStoreContent":
            suggest = "key_store_content"
        elif key == "storePassword":
            suggest = "store_password"
        elif key == "trustStoreContent":
            suggest = "trust_store_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabasePeerTargetDatabaseTlsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabasePeerTargetDatabaseTlsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabasePeerTargetDatabaseTlsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 certificate_store_type: Optional[_builtins.str] = None,
                 key_store_content: Optional[_builtins.str] = None,
                 store_password: Optional[_builtins.str] = None,
                 trust_store_content: Optional[_builtins.str] = None):
        """
        :param _builtins.str status: (Updatable) Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str certificate_store_type: (Updatable) The format of the certificate store.
        :param _builtins.str key_store_content: (Updatable) Base64 encoded string of key store file content.
        :param _builtins.str store_password: (Updatable) The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: (Updatable) Base64 encoded string of trust store file content.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "status", status)
        if certificate_store_type is not None:
            pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        if key_store_content is not None:
            pulumi.set(__self__, "key_store_content", key_store_content)
        if store_password is not None:
            pulumi.set(__self__, "store_password", store_password)
        if trust_store_content is not None:
            pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        (Updatable) Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> Optional[_builtins.str]:
        """
        (Updatable) The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> Optional[_builtins.str]:
        """
        (Updatable) Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> Optional[_builtins.str]:
        """
        (Updatable) The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> Optional[_builtins.str]:
        """
        (Updatable) Base64 encoded string of trust store file content.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class TargetDatabaseTlsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateStoreType":
            suggest = "certificate_store_type"
        elif key == "keyStoreContent":
            suggest = "key_store_content"
        elif key == "storePassword":
            suggest = "store_password"
        elif key == "trustStoreContent":
            suggest = "trust_store_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseTlsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseTlsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseTlsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: _builtins.str,
                 certificate_store_type: Optional[_builtins.str] = None,
                 key_store_content: Optional[_builtins.str] = None,
                 store_password: Optional[_builtins.str] = None,
                 trust_store_content: Optional[_builtins.str] = None):
        """
        :param _builtins.str status: (Updatable) Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str certificate_store_type: (Updatable) The format of the certificate store.
        :param _builtins.str key_store_content: (Updatable) Base64 encoded string of key store file content.
        :param _builtins.str store_password: (Updatable) The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: (Updatable) Base64 encoded string of trust store file content.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "status", status)
        if certificate_store_type is not None:
            pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        if key_store_content is not None:
            pulumi.set(__self__, "key_store_content", key_store_content)
        if store_password is not None:
            pulumi.set(__self__, "store_password", store_password)
        if trust_store_content is not None:
            pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        (Updatable) Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> Optional[_builtins.str]:
        """
        (Updatable) The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> Optional[_builtins.str]:
        """
        (Updatable) Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> Optional[_builtins.str]:
        """
        (Updatable) The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> Optional[_builtins.str]:
        """
        (Updatable) Base64 encoded string of trust store file content.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class UserAssessmentIgnoredTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lifecycleState":
            suggest = "lifecycle_state"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "userAssessmentId":
            suggest = "user_assessment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssessmentIgnoredTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssessmentIgnoredTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssessmentIgnoredTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lifecycle_state: Optional[_builtins.str] = None,
                 target_id: Optional[_builtins.str] = None,
                 user_assessment_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str target_id: The OCID of the target database on which the user assessment is to be run.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if user_assessment_id is not None:
            pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[_builtins.str]:
        """
        The OCID of the target database on which the user assessment is to be run.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetAlertAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: _builtins.str,
                 dimensions: Sequence['outputs.GetAlertAnalyticItemDimensionResult'],
                 metric_name: _builtins.str,
                 time_ended: _builtins.str,
                 time_started: _builtins.str):
        """
        :param _builtins.str count: Total count of aggregated values.
        :param Sequence['GetAlertAnalyticItemDimensionArgs'] dimensions: Details of aggregation dimension summarizing alerts.
        :param _builtins.str metric_name: The name of the aggregation.
        :param _builtins.str time_ended: An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_started: An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        Total count of aggregated values.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAlertAnalyticItemDimensionResult']:
        """
        Details of aggregation dimension summarizing alerts.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The name of the aggregation.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> _builtins.str:
        """
        An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_ended")

    @_builtins.property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> _builtins.str:
        """
        An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetAlertAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 group_by: Mapping[str, _builtins.str]):
        """
        :param Mapping[str, _builtins.str] group_by: A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
        """
        pulumi.set(__self__, "group_by", group_by)

    @_builtins.property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Mapping[str, _builtins.str]:
        """
        A groupBy can only be used in combination with summaryField parameter. A groupBy value has to be a subset of the values mentioned in summaryField parameter.
        """
        return pulumi.get(self, "group_by")


@pulumi.output_type
class GetAlertPoliciesAlertPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAlertPoliciesAlertPolicyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAlertPoliciesAlertPolicyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAlertPoliciesAlertPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 alert_policy_rule_details: Sequence['outputs.GetAlertPoliciesAlertPolicyCollectionItemAlertPolicyRuleDetailResult'],
                 alert_policy_type: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_user_defined: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str alert_policy_type: Indicates the Data Safe feature to which the alert policy belongs.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the alert policy.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the alert policy.
        :param _builtins.bool is_user_defined: An optional filter to return only alert policies that are user-defined or not.
        :param _builtins.str lifecycle_details: Details about the current state of the alert policy.
        :param _builtins.str severity: Severity level of the alert raised by this policy.
        :param _builtins.str state: An optional filter to return only alert policies that have the given life-cycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: Creation date and time of the alert policy, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: Last date and time the alert policy was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "alert_policy_rule_details", alert_policy_rule_details)
        pulumi.set(__self__, "alert_policy_type", alert_policy_type)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_user_defined", is_user_defined)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="alertPolicyRuleDetails")
    def alert_policy_rule_details(self) -> Sequence['outputs.GetAlertPoliciesAlertPolicyCollectionItemAlertPolicyRuleDetailResult']:
        return pulumi.get(self, "alert_policy_rule_details")

    @_builtins.property
    @pulumi.getter(name="alertPolicyType")
    def alert_policy_type(self) -> _builtins.str:
        """
        Indicates the Data Safe feature to which the alert policy belongs.
        """
        return pulumi.get(self, "alert_policy_type")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the alert policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the alert policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isUserDefined")
    def is_user_defined(self) -> _builtins.bool:
        """
        An optional filter to return only alert policies that are user-defined or not.
        """
        return pulumi.get(self, "is_user_defined")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the alert policy.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Severity level of the alert raised by this policy.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        An optional filter to return only alert policies that have the given life-cycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        Creation date and time of the alert policy, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        Last date and time the alert policy was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAlertPoliciesAlertPolicyCollectionItemAlertPolicyRuleDetailResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 expression: _builtins.str):
        """
        :param _builtins.str description: The description of the alert policy.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "expression", expression)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the alert policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")


@pulumi.output_type
class GetAlertPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAlertPolicyAlertPolicyRuleDetailResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 expression: _builtins.str):
        """
        :param _builtins.str description: The description of the alert policy.
        :param _builtins.str display_name: The display name of the alert policy.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "expression", expression)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the alert policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the alert policy.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        return pulumi.get(self, "expression")


@pulumi.output_type
class GetAlertPolicyRulesAlertPolicyRuleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAlertPolicyRulesAlertPolicyRuleCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAlertPolicyRulesAlertPolicyRuleCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAlertPolicyRulesAlertPolicyRuleCollectionItemResult(dict):
    def __init__(__self__, *,
                 alert_policy_id: _builtins.str,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 expression: _builtins.str,
                 key: _builtins.str,
                 state: _builtins.str,
                 time_created: _builtins.str):
        """
        :param _builtins.str alert_policy_id: The OCID of the alert policy.
        :param _builtins.str description: Describes the alert policy rule.
        :param _builtins.str display_name: The display name of the alert policy rule.
        :param _builtins.str expression: The conditional expression of the alert policy rule which evaluates to boolean value.
        :param _builtins.str key: The unique key of the alert policy rule.
        :param _builtins.str state: The current state of the alert policy rule.
        :param _builtins.str time_created: Creation date and time of the alert policy rule, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "alert_policy_id", alert_policy_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @_builtins.property
    @pulumi.getter(name="alertPolicyId")
    def alert_policy_id(self) -> _builtins.str:
        """
        The OCID of the alert policy.
        """
        return pulumi.get(self, "alert_policy_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Describes the alert policy rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the alert policy rule.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        The conditional expression of the alert policy rule which evaluates to boolean value.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key of the alert policy rule.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the alert policy rule.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        Creation date and time of the alert policy rule, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetAlertPolicyRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAlertsAlertCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAlertsAlertCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAlertsAlertCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAlertsAlertCollectionItemResult(dict):
    def __init__(__self__, *,
                 alert_id: _builtins.str,
                 alert_policy_rule_key: _builtins.str,
                 alert_policy_rule_name: _builtins.str,
                 alert_type: _builtins.str,
                 comment: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 feature_details: Mapping[str, _builtins.str],
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 operation: _builtins.str,
                 operation_status: _builtins.str,
                 operation_time: _builtins.str,
                 policy_id: _builtins.str,
                 resource_name: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 status: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_ids: Sequence[_builtins.str],
                 target_names: Sequence[_builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str alert_policy_rule_key: The key of the rule of alert policy that triggered alert.
        :param _builtins.str alert_policy_rule_name: The display name of the rule of alert policy that triggered alert.
        :param _builtins.str alert_type: Type of the alert. Indicates the Data Safe feature triggering the alert.
        :param _builtins.str comment: A comment for the alert. Entered by the user.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the alert.
        :param _builtins.str display_name: The display name of the alert.
        :param Mapping[str, _builtins.str] feature_details: Map that contains maps of values. Example: `{"Operations": {"CostCenter": "42"}}`
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: A filter to return alert by it's OCID.
        :param _builtins.str operation: The operation (event) that triggered alert.
        :param _builtins.str operation_status: The result of the operation (event) that triggered alert.
        :param _builtins.str operation_time: Creation date and time of the operation that triggered alert, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str policy_id: The OCID of the policy that triggered alert.
        :param _builtins.str resource_name: The resource endpoint that triggered the alert.
        :param _builtins.str severity: Severity level of the alert.
        :param _builtins.str state: The current state of the alert.
        :param _builtins.str status: The status of the alert.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param Sequence[_builtins.str] target_ids: Array of OCIDs of the target database which are associated with the alert.
        :param Sequence[_builtins.str] target_names: Array of names of the target database.
        :param _builtins.str time_created: Creation date and time of the alert, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: Last date and time the alert was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "alert_id", alert_id)
        pulumi.set(__self__, "alert_policy_rule_key", alert_policy_rule_key)
        pulumi.set(__self__, "alert_policy_rule_name", alert_policy_rule_name)
        pulumi.set(__self__, "alert_type", alert_type)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "feature_details", feature_details)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operation_status", operation_status)
        pulumi.set(__self__, "operation_time", operation_time)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_ids", target_ids)
        pulumi.set(__self__, "target_names", target_names)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> _builtins.str:
        return pulumi.get(self, "alert_id")

    @_builtins.property
    @pulumi.getter(name="alertPolicyRuleKey")
    def alert_policy_rule_key(self) -> _builtins.str:
        """
        The key of the rule of alert policy that triggered alert.
        """
        return pulumi.get(self, "alert_policy_rule_key")

    @_builtins.property
    @pulumi.getter(name="alertPolicyRuleName")
    def alert_policy_rule_name(self) -> _builtins.str:
        """
        The display name of the rule of alert policy that triggered alert.
        """
        return pulumi.get(self, "alert_policy_rule_name")

    @_builtins.property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> _builtins.str:
        """
        Type of the alert. Indicates the Data Safe feature triggering the alert.
        """
        return pulumi.get(self, "alert_type")

    @_builtins.property
    @pulumi.getter
    def comment(self) -> _builtins.str:
        """
        A comment for the alert. Entered by the user.
        """
        return pulumi.get(self, "comment")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the alert.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the alert.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="featureDetails")
    def feature_details(self) -> Mapping[str, _builtins.str]:
        """
        Map that contains maps of values. Example: `{"Operations": {"CostCenter": "42"}}`
        """
        return pulumi.get(self, "feature_details")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        A filter to return alert by it's OCID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        The operation (event) that triggered alert.
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> _builtins.str:
        """
        The result of the operation (event) that triggered alert.
        """
        return pulumi.get(self, "operation_status")

    @_builtins.property
    @pulumi.getter(name="operationTime")
    def operation_time(self) -> _builtins.str:
        """
        Creation date and time of the operation that triggered alert, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "operation_time")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The OCID of the policy that triggered alert.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The resource endpoint that triggered the alert.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        Severity level of the alert.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the alert.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the alert.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Sequence[_builtins.str]:
        """
        Array of OCIDs of the target database which are associated with the alert.
        """
        return pulumi.get(self, "target_ids")

    @_builtins.property
    @pulumi.getter(name="targetNames")
    def target_names(self) -> Sequence[_builtins.str]:
        """
        Array of names of the target database.
        """
        return pulumi.get(self, "target_names")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        Creation date and time of the alert, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        Last date and time the alert was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAlertsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItemResult(dict):
    def __init__(__self__, *,
                 audit_event_count: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 end_date: _builtins.str,
                 error_info: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 start_date: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_completed: _builtins.str,
                 time_of_expiry: _builtins.str,
                 time_requested: _builtins.str):
        """
        :param _builtins.str audit_event_count: Total count of audit events to be retrieved from the archive for the specified date range.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: Description of the archive retrieval.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param _builtins.str end_date: End month of the archive retrieval, in the format defined by RFC3339.
        :param _builtins.str error_info: The Error details of a failed archive retrieval.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the archive retrieval.
        :param _builtins.str lifecycle_details: Details about the current state of the archive retrieval.
        :param _builtins.str start_date: Start month of the archive retrieval, in the format defined by RFC3339.
        :param _builtins.str state: A filter to return only resources that matches the specified lifecycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: The OCID of the target associated with the archive retrieval.
        :param _builtins.str time_completed: The date time when archive retrieval request was fulfilled, in the format defined by RFC3339.
        :param _builtins.str time_of_expiry: The date time when retrieved archive data will be deleted from Data Safe and unloaded back into archival.
        :param _builtins.str time_requested: The date time when archive retrieval was requested, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "audit_event_count", audit_event_count)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "error_info", error_info)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_completed", time_completed)
        pulumi.set(__self__, "time_of_expiry", time_of_expiry)
        pulumi.set(__self__, "time_requested", time_requested)

    @_builtins.property
    @pulumi.getter(name="auditEventCount")
    def audit_event_count(self) -> _builtins.str:
        """
        Total count of audit events to be retrieved from the archive for the specified date range.
        """
        return pulumi.get(self, "audit_event_count")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the archive retrieval.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> _builtins.str:
        """
        End month of the archive retrieval, in the format defined by RFC3339.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="errorInfo")
    def error_info(self) -> _builtins.str:
        """
        The Error details of a failed archive retrieval.
        """
        return pulumi.get(self, "error_info")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the archive retrieval.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the archive retrieval.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> _builtins.str:
        """
        Start month of the archive retrieval, in the format defined by RFC3339.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that matches the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target associated with the archive retrieval.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCompleted")
    def time_completed(self) -> _builtins.str:
        """
        The date time when archive retrieval request was fulfilled, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_completed")

    @_builtins.property
    @pulumi.getter(name="timeOfExpiry")
    def time_of_expiry(self) -> _builtins.str:
        """
        The date time when retrieved archive data will be deleted from Data Safe and unloaded back into archival.
        """
        return pulumi.get(self, "time_of_expiry")

    @_builtins.property
    @pulumi.getter(name="timeRequested")
    def time_requested(self) -> _builtins.str:
        """
        The date time when archive retrieval was requested, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_requested")


@pulumi.output_type
class GetAuditArchiveRetrievalsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditEventAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: _builtins.str,
                 dimensions: Sequence['outputs.GetAuditEventAnalyticItemDimensionResult'],
                 display_name: _builtins.str,
                 metric_name: _builtins.str,
                 time_ended: _builtins.str,
                 time_started: _builtins.str):
        """
        :param _builtins.str count: Total count of aggregated value.
        :param Sequence['GetAuditEventAnalyticItemDimensionArgs'] dimensions: Details of aggregation dimensions used for summarizing audit events.
        :param _builtins.str display_name: Display Name of aggregation field.
        :param _builtins.str metric_name: Name of the aggregation.
        :param _builtins.str time_ended: An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_started: An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        Total count of aggregated value.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAuditEventAnalyticItemDimensionResult']:
        """
        Details of aggregation dimensions used for summarizing audit events.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Display Name of aggregation field.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        Name of the aggregation.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> _builtins.str:
        """
        An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_ended")

    @_builtins.property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> _builtins.str:
        """
        An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetAuditEventAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 audit_event_times: Sequence[_builtins.str],
                 audit_types: Sequence[_builtins.str],
                 client_hostnames: Sequence[_builtins.str],
                 client_ids: Sequence[_builtins.str],
                 client_programs: Sequence[_builtins.str],
                 db_user_names: Sequence[_builtins.str],
                 event_names: Sequence[_builtins.str],
                 object_types: Sequence[_builtins.str],
                 target_classes: Sequence[_builtins.str],
                 target_ids: Sequence[_builtins.str],
                 target_names: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] audit_event_times: Time of audit event occurrence in the target database.
        :param Sequence[_builtins.str] audit_types: Type of auditing.
        :param Sequence[_builtins.str] client_hostnames: Name of the host machine from which the session was spawned.
        :param Sequence[_builtins.str] client_ids: The client identifier in each Oracle session.
        :param Sequence[_builtins.str] client_programs: The application from which the audit event was generated. Examples SQL Plus or SQL Developer.
        :param Sequence[_builtins.str] db_user_names: Name of the database user whose actions were audited.
        :param Sequence[_builtins.str] event_names: Name of the detail action executed by the user on the target database. i.e ALTER SEQUENCE, CREATE TRIGGER, CREATE INDEX.
        :param Sequence[_builtins.str] object_types: Type of object in the source database affected by the action. i.e PL/SQL, SYNONYM, PACKAGE BODY.
        :param Sequence[_builtins.str] target_classes: Class of the target that was audited.
        :param Sequence[_builtins.str] target_ids: The OCID of the target database that was audited.
        :param Sequence[_builtins.str] target_names: The name of the target database that was audited.
        """
        pulumi.set(__self__, "audit_event_times", audit_event_times)
        pulumi.set(__self__, "audit_types", audit_types)
        pulumi.set(__self__, "client_hostnames", client_hostnames)
        pulumi.set(__self__, "client_ids", client_ids)
        pulumi.set(__self__, "client_programs", client_programs)
        pulumi.set(__self__, "db_user_names", db_user_names)
        pulumi.set(__self__, "event_names", event_names)
        pulumi.set(__self__, "object_types", object_types)
        pulumi.set(__self__, "target_classes", target_classes)
        pulumi.set(__self__, "target_ids", target_ids)
        pulumi.set(__self__, "target_names", target_names)

    @_builtins.property
    @pulumi.getter(name="auditEventTimes")
    def audit_event_times(self) -> Sequence[_builtins.str]:
        """
        Time of audit event occurrence in the target database.
        """
        return pulumi.get(self, "audit_event_times")

    @_builtins.property
    @pulumi.getter(name="auditTypes")
    def audit_types(self) -> Sequence[_builtins.str]:
        """
        Type of auditing.
        """
        return pulumi.get(self, "audit_types")

    @_builtins.property
    @pulumi.getter(name="clientHostnames")
    def client_hostnames(self) -> Sequence[_builtins.str]:
        """
        Name of the host machine from which the session was spawned.
        """
        return pulumi.get(self, "client_hostnames")

    @_builtins.property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Sequence[_builtins.str]:
        """
        The client identifier in each Oracle session.
        """
        return pulumi.get(self, "client_ids")

    @_builtins.property
    @pulumi.getter(name="clientPrograms")
    def client_programs(self) -> Sequence[_builtins.str]:
        """
        The application from which the audit event was generated. Examples SQL Plus or SQL Developer.
        """
        return pulumi.get(self, "client_programs")

    @_builtins.property
    @pulumi.getter(name="dbUserNames")
    def db_user_names(self) -> Sequence[_builtins.str]:
        """
        Name of the database user whose actions were audited.
        """
        return pulumi.get(self, "db_user_names")

    @_builtins.property
    @pulumi.getter(name="eventNames")
    def event_names(self) -> Sequence[_builtins.str]:
        """
        Name of the detail action executed by the user on the target database. i.e ALTER SEQUENCE, CREATE TRIGGER, CREATE INDEX.
        """
        return pulumi.get(self, "event_names")

    @_builtins.property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> Sequence[_builtins.str]:
        """
        Type of object in the source database affected by the action. i.e PL/SQL, SYNONYM, PACKAGE BODY.
        """
        return pulumi.get(self, "object_types")

    @_builtins.property
    @pulumi.getter(name="targetClasses")
    def target_classes(self) -> Sequence[_builtins.str]:
        """
        Class of the target that was audited.
        """
        return pulumi.get(self, "target_classes")

    @_builtins.property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Sequence[_builtins.str]:
        """
        The OCID of the target database that was audited.
        """
        return pulumi.get(self, "target_ids")

    @_builtins.property
    @pulumi.getter(name="targetNames")
    def target_names(self) -> Sequence[_builtins.str]:
        """
        The name of the target database that was audited.
        """
        return pulumi.get(self, "target_names")


@pulumi.output_type
class GetAuditEventItemResult(dict):
    def __init__(__self__, *,
                 action_taken: _builtins.str,
                 audit_event_time: _builtins.str,
                 audit_location: _builtins.str,
                 audit_policies: _builtins.str,
                 audit_trail_id: _builtins.str,
                 audit_type: _builtins.str,
                 client_hostname: _builtins.str,
                 client_id: _builtins.str,
                 client_ip: _builtins.str,
                 client_program: _builtins.str,
                 command_param: _builtins.str,
                 command_text: _builtins.str,
                 compartment_id: _builtins.str,
                 database_type: _builtins.str,
                 db_user_name: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 error_code: _builtins.str,
                 error_message: _builtins.str,
                 event_name: _builtins.str,
                 extended_event_attributes: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_alerted: _builtins.bool,
                 object: _builtins.str,
                 object_owner: _builtins.str,
                 object_type: _builtins.str,
                 operation: _builtins.str,
                 operation_status: _builtins.str,
                 os_terminal: _builtins.str,
                 os_user_name: _builtins.str,
                 target_class: _builtins.str,
                 target_id: _builtins.str,
                 target_name: _builtins.str,
                 time_collected: _builtins.str):
        """
        :param _builtins.str action_taken: The action taken for this audit event.
        :param _builtins.str audit_event_time: Time of audit event occurrence in the target database.
        :param _builtins.str audit_location: The location of the audit. Currently the value is audit table.
        :param _builtins.str audit_policies: Comma-seperated list of audit policies that caused the current audit event.
        :param _builtins.str audit_trail_id: The OCID of the audit trail that generated this audit event. To be noted, this field has been deprecated.
        :param _builtins.str audit_type: Type of auditing.
        :param _builtins.str client_hostname: Name of the host machine from which the session was spawned.
        :param _builtins.str client_id: The client identifier in each Oracle session.
        :param _builtins.str client_ip: IP address of the host from which the session was spawned.
        :param _builtins.str client_program: The application from which the audit event was generated. Examples SQL Plus or SQL Developer.
        :param _builtins.str command_param: List of bind variables associated with the command text.
        :param _builtins.str command_text: The SQL associated with the audit event.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str database_type: The type of the target database that was audited. Allowed values are
               * DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
               * AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
               * INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
        :param _builtins.str db_user_name: Name of the database user whose actions were audited.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str error_code: Oracle Error code generated by the action. Zero indicates the action was successful.
        :param _builtins.str error_message: Detailed message on why the Error occurred.
        :param _builtins.str event_name: Name of the detail action executed by the user on the target database. i.e ALTER SEQUENCE, CREATE TRIGGER, CREATE INDEX.
        :param _builtins.str extended_event_attributes: List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the audit event.
        :param _builtins.bool is_alerted: Indicates whether an alert was raised for this audit event.
        :param _builtins.str object: Name of the object affected by the action.
        :param _builtins.str object_owner: Schema name of object affected but the action.
        :param _builtins.str object_type: Type of object in the source database affected by the action. i.e PL/SQL, SYNONYM, PACKAGE BODY.
        :param _builtins.str operation: Name of the action executed by the user on the target database. i.e ALTER, CREATE, DROP.
        :param _builtins.str operation_status: Indicates whether the operation was a success or a failure.
        :param _builtins.str os_terminal: The operating system terminal of the user session.
        :param _builtins.str os_user_name: Name of the operating system user for the database session.
        :param _builtins.str target_class: Class of the target that was audited.
        :param _builtins.str target_id: The OCID of the target database that was audited.
        :param _builtins.str target_name: The name of the target database that was audited.
        :param _builtins.str time_collected: Timestamp when this audit event was collected from the target database by Data Safe.
        """
        pulumi.set(__self__, "action_taken", action_taken)
        pulumi.set(__self__, "audit_event_time", audit_event_time)
        pulumi.set(__self__, "audit_location", audit_location)
        pulumi.set(__self__, "audit_policies", audit_policies)
        pulumi.set(__self__, "audit_trail_id", audit_trail_id)
        pulumi.set(__self__, "audit_type", audit_type)
        pulumi.set(__self__, "client_hostname", client_hostname)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "client_program", client_program)
        pulumi.set(__self__, "command_param", command_param)
        pulumi.set(__self__, "command_text", command_text)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "extended_event_attributes", extended_event_attributes)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_alerted", is_alerted)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_owner", object_owner)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operation_status", operation_status)
        pulumi.set(__self__, "os_terminal", os_terminal)
        pulumi.set(__self__, "os_user_name", os_user_name)
        pulumi.set(__self__, "target_class", target_class)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)
        pulumi.set(__self__, "time_collected", time_collected)

    @_builtins.property
    @pulumi.getter(name="actionTaken")
    def action_taken(self) -> _builtins.str:
        """
        The action taken for this audit event.
        """
        return pulumi.get(self, "action_taken")

    @_builtins.property
    @pulumi.getter(name="auditEventTime")
    def audit_event_time(self) -> _builtins.str:
        """
        Time of audit event occurrence in the target database.
        """
        return pulumi.get(self, "audit_event_time")

    @_builtins.property
    @pulumi.getter(name="auditLocation")
    def audit_location(self) -> _builtins.str:
        """
        The location of the audit. Currently the value is audit table.
        """
        return pulumi.get(self, "audit_location")

    @_builtins.property
    @pulumi.getter(name="auditPolicies")
    def audit_policies(self) -> _builtins.str:
        """
        Comma-seperated list of audit policies that caused the current audit event.
        """
        return pulumi.get(self, "audit_policies")

    @_builtins.property
    @pulumi.getter(name="auditTrailId")
    def audit_trail_id(self) -> _builtins.str:
        """
        The OCID of the audit trail that generated this audit event. To be noted, this field has been deprecated.
        """
        return pulumi.get(self, "audit_trail_id")

    @_builtins.property
    @pulumi.getter(name="auditType")
    def audit_type(self) -> _builtins.str:
        """
        Type of auditing.
        """
        return pulumi.get(self, "audit_type")

    @_builtins.property
    @pulumi.getter(name="clientHostname")
    def client_hostname(self) -> _builtins.str:
        """
        Name of the host machine from which the session was spawned.
        """
        return pulumi.get(self, "client_hostname")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The client identifier in each Oracle session.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> _builtins.str:
        """
        IP address of the host from which the session was spawned.
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter(name="clientProgram")
    def client_program(self) -> _builtins.str:
        """
        The application from which the audit event was generated. Examples SQL Plus or SQL Developer.
        """
        return pulumi.get(self, "client_program")

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> _builtins.str:
        """
        List of bind variables associated with the command text.
        """
        return pulumi.get(self, "command_param")

    @_builtins.property
    @pulumi.getter(name="commandText")
    def command_text(self) -> _builtins.str:
        """
        The SQL associated with the audit event.
        """
        return pulumi.get(self, "command_text")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        The type of the target database that was audited. Allowed values are
        * DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
        * AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
        * INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        Name of the database user whose actions were audited.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        Oracle Error code generated by the action. Zero indicates the action was successful.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> _builtins.str:
        """
        Detailed message on why the Error occurred.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> _builtins.str:
        """
        Name of the detail action executed by the user on the target database. i.e ALTER SEQUENCE, CREATE TRIGGER, CREATE INDEX.
        """
        return pulumi.get(self, "event_name")

    @_builtins.property
    @pulumi.getter(name="extendedEventAttributes")
    def extended_event_attributes(self) -> _builtins.str:
        """
        List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
        """
        return pulumi.get(self, "extended_event_attributes")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the audit event.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isAlerted")
    def is_alerted(self) -> _builtins.bool:
        """
        Indicates whether an alert was raised for this audit event.
        """
        return pulumi.get(self, "is_alerted")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        Name of the object affected by the action.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectOwner")
    def object_owner(self) -> _builtins.str:
        """
        Schema name of object affected but the action.
        """
        return pulumi.get(self, "object_owner")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        Type of object in the source database affected by the action. i.e PL/SQL, SYNONYM, PACKAGE BODY.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        Name of the action executed by the user on the target database. i.e ALTER, CREATE, DROP.
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> _builtins.str:
        """
        Indicates whether the operation was a success or a failure.
        """
        return pulumi.get(self, "operation_status")

    @_builtins.property
    @pulumi.getter(name="osTerminal")
    def os_terminal(self) -> _builtins.str:
        """
        The operating system terminal of the user session.
        """
        return pulumi.get(self, "os_terminal")

    @_builtins.property
    @pulumi.getter(name="osUserName")
    def os_user_name(self) -> _builtins.str:
        """
        Name of the operating system user for the database session.
        """
        return pulumi.get(self, "os_user_name")

    @_builtins.property
    @pulumi.getter(name="targetClass")
    def target_class(self) -> _builtins.str:
        """
        Class of the target that was audited.
        """
        return pulumi.get(self, "target_class")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database that was audited.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetName")
    def target_name(self) -> _builtins.str:
        """
        The name of the target database that was audited.
        """
        return pulumi.get(self, "target_name")

    @_builtins.property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> _builtins.str:
        """
        Timestamp when this audit event was collected from the target database by Data Safe.
        """
        return pulumi.get(self, "time_collected")


@pulumi.output_type
class GetAuditEventsAuditEventCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAuditEventsAuditEventCollectionItemResult']):
        """
        :param Sequence['GetAuditEventsAuditEventCollectionItemArgs'] items: Array of audit event summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditEventsAuditEventCollectionItemResult']:
        """
        Array of audit event summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditEventsAuditEventCollectionItemResult(dict):
    def __init__(__self__, *,
                 action_taken: _builtins.str,
                 application_contexts: _builtins.str,
                 audit_event_time: _builtins.str,
                 audit_location: _builtins.str,
                 audit_policies: _builtins.str,
                 audit_trail_id: _builtins.str,
                 audit_type: _builtins.str,
                 client_hostname: _builtins.str,
                 client_id: _builtins.str,
                 client_ip: _builtins.str,
                 client_program: _builtins.str,
                 command_param: _builtins.str,
                 command_text: _builtins.str,
                 compartment_id: _builtins.str,
                 database_type: _builtins.str,
                 database_unique_name: _builtins.str,
                 db_user_name: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 error_code: _builtins.str,
                 error_message: _builtins.str,
                 event_name: _builtins.str,
                 extended_event_attributes: _builtins.str,
                 fga_policy_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_alerted: _builtins.bool,
                 object: _builtins.str,
                 object_owner: _builtins.str,
                 object_type: _builtins.str,
                 operation: _builtins.str,
                 operation_status: _builtins.str,
                 os_terminal: _builtins.str,
                 os_user_name: _builtins.str,
                 peer_target_database_key: _builtins.int,
                 target_class: _builtins.str,
                 target_id: _builtins.str,
                 target_name: _builtins.str,
                 time_collected: _builtins.str,
                 trail_source: _builtins.str):
        """
        :param _builtins.str action_taken: The action taken for this audit event.
        :param _builtins.str application_contexts: Semicolon-seperated list of application context namespace, attribute, value information in (APPCTX_NSPACE,APPCTX_ATTRIBUTE=<value>) format.
        :param _builtins.str audit_event_time: The time that the audit event occurs in the target database.
        :param _builtins.str audit_location: The location of the audit. Currently the value is audit table.
        :param _builtins.str audit_policies: Comma-seperated list of audit policies that caused the current audit event.
        :param _builtins.str audit_trail_id: The OCID of the audit trail that generated this audit event. To be noted, this field has been deprecated.
        :param _builtins.str audit_type: The type of the auditing.
        :param _builtins.str client_hostname: The name of the host machine from which the session was spawned.
        :param _builtins.str client_id: The client identifier in each Oracle session.
        :param _builtins.str client_ip: The IP address of the host machine from which the session was spawned.
        :param _builtins.str client_program: The application from which the audit event was generated. For example SQL Plus or SQL Developer.
        :param _builtins.str command_param: List of bind variables associated with the command text.
        :param _builtins.str command_text: The SQL associated with the audit event.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str database_type: The type of the target database that was audited. Allowed values are
               * DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
               * AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
               * INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
        :param _builtins.str database_unique_name: Unique name of the database associated to the peer target database.
        :param _builtins.str db_user_name: The name of the database user whose actions were audited.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str error_code: Oracle Error code generated by the action. Zero indicates the action was successful.
        :param _builtins.str error_message: The detailed message on why the error occurred.
        :param _builtins.str event_name: The name of the detail action executed by the user on the target database. For example ALTER SEQUENCE, CREATE TRIGGER or CREATE INDEX.
        :param _builtins.str extended_event_attributes: List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
        :param _builtins.str fga_policy_name: Fine-grained auditing (FGA) policy name that generated this audit record.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the audit event.
        :param _builtins.bool is_alerted: Indicates whether an alert was raised for this audit event.
        :param _builtins.str object: The name of the object affected by the action.
        :param _builtins.str object_owner: The schema name of the object affected by the action.
        :param _builtins.str object_type: The type of the object in the source database affected by the action. For example PL/SQL, SYNONYM or PACKAGE BODY.
        :param _builtins.str operation: The name of the action executed by the user on the target database. For example ALTER, CREATE or DROP.
        :param _builtins.str operation_status: Indicates whether the operation was a success or a failure.
        :param _builtins.str os_terminal: The operating system terminal of the user session.
        :param _builtins.str os_user_name: The name of the operating system user for the database session.
        :param _builtins.int peer_target_database_key: The secondary id assigned for the peer database registered with Data Safe.
        :param _builtins.str target_class: The class of the target that was audited.
        :param _builtins.str target_id: The OCID of the target database that was audited.
        :param _builtins.str target_name: The name of the target database that was audited.
        :param _builtins.str time_collected: The timestamp when this audit event was collected from the target database by Data Safe.
        :param _builtins.str trail_source: The underlying source of unified audit trail.
        """
        pulumi.set(__self__, "action_taken", action_taken)
        pulumi.set(__self__, "application_contexts", application_contexts)
        pulumi.set(__self__, "audit_event_time", audit_event_time)
        pulumi.set(__self__, "audit_location", audit_location)
        pulumi.set(__self__, "audit_policies", audit_policies)
        pulumi.set(__self__, "audit_trail_id", audit_trail_id)
        pulumi.set(__self__, "audit_type", audit_type)
        pulumi.set(__self__, "client_hostname", client_hostname)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "client_program", client_program)
        pulumi.set(__self__, "command_param", command_param)
        pulumi.set(__self__, "command_text", command_text)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "database_unique_name", database_unique_name)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "error_code", error_code)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "event_name", event_name)
        pulumi.set(__self__, "extended_event_attributes", extended_event_attributes)
        pulumi.set(__self__, "fga_policy_name", fga_policy_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_alerted", is_alerted)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_owner", object_owner)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operation_status", operation_status)
        pulumi.set(__self__, "os_terminal", os_terminal)
        pulumi.set(__self__, "os_user_name", os_user_name)
        pulumi.set(__self__, "peer_target_database_key", peer_target_database_key)
        pulumi.set(__self__, "target_class", target_class)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)
        pulumi.set(__self__, "time_collected", time_collected)
        pulumi.set(__self__, "trail_source", trail_source)

    @_builtins.property
    @pulumi.getter(name="actionTaken")
    def action_taken(self) -> _builtins.str:
        """
        The action taken for this audit event.
        """
        return pulumi.get(self, "action_taken")

    @_builtins.property
    @pulumi.getter(name="applicationContexts")
    def application_contexts(self) -> _builtins.str:
        """
        Semicolon-seperated list of application context namespace, attribute, value information in (APPCTX_NSPACE,APPCTX_ATTRIBUTE=<value>) format.
        """
        return pulumi.get(self, "application_contexts")

    @_builtins.property
    @pulumi.getter(name="auditEventTime")
    def audit_event_time(self) -> _builtins.str:
        """
        The time that the audit event occurs in the target database.
        """
        return pulumi.get(self, "audit_event_time")

    @_builtins.property
    @pulumi.getter(name="auditLocation")
    def audit_location(self) -> _builtins.str:
        """
        The location of the audit. Currently the value is audit table.
        """
        return pulumi.get(self, "audit_location")

    @_builtins.property
    @pulumi.getter(name="auditPolicies")
    def audit_policies(self) -> _builtins.str:
        """
        Comma-seperated list of audit policies that caused the current audit event.
        """
        return pulumi.get(self, "audit_policies")

    @_builtins.property
    @pulumi.getter(name="auditTrailId")
    def audit_trail_id(self) -> _builtins.str:
        """
        The OCID of the audit trail that generated this audit event. To be noted, this field has been deprecated.
        """
        return pulumi.get(self, "audit_trail_id")

    @_builtins.property
    @pulumi.getter(name="auditType")
    def audit_type(self) -> _builtins.str:
        """
        The type of the auditing.
        """
        return pulumi.get(self, "audit_type")

    @_builtins.property
    @pulumi.getter(name="clientHostname")
    def client_hostname(self) -> _builtins.str:
        """
        The name of the host machine from which the session was spawned.
        """
        return pulumi.get(self, "client_hostname")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        The client identifier in each Oracle session.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> _builtins.str:
        """
        The IP address of the host machine from which the session was spawned.
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter(name="clientProgram")
    def client_program(self) -> _builtins.str:
        """
        The application from which the audit event was generated. For example SQL Plus or SQL Developer.
        """
        return pulumi.get(self, "client_program")

    @_builtins.property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> _builtins.str:
        """
        List of bind variables associated with the command text.
        """
        return pulumi.get(self, "command_param")

    @_builtins.property
    @pulumi.getter(name="commandText")
    def command_text(self) -> _builtins.str:
        """
        The SQL associated with the audit event.
        """
        return pulumi.get(self, "command_text")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        The type of the target database that was audited. Allowed values are
        * DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
        * AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
        * INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="databaseUniqueName")
    def database_unique_name(self) -> _builtins.str:
        """
        Unique name of the database associated to the peer target database.
        """
        return pulumi.get(self, "database_unique_name")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        The name of the database user whose actions were audited.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> _builtins.str:
        """
        Oracle Error code generated by the action. Zero indicates the action was successful.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> _builtins.str:
        """
        The detailed message on why the error occurred.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="eventName")
    def event_name(self) -> _builtins.str:
        """
        The name of the detail action executed by the user on the target database. For example ALTER SEQUENCE, CREATE TRIGGER or CREATE INDEX.
        """
        return pulumi.get(self, "event_name")

    @_builtins.property
    @pulumi.getter(name="extendedEventAttributes")
    def extended_event_attributes(self) -> _builtins.str:
        """
        List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
        """
        return pulumi.get(self, "extended_event_attributes")

    @_builtins.property
    @pulumi.getter(name="fgaPolicyName")
    def fga_policy_name(self) -> _builtins.str:
        """
        Fine-grained auditing (FGA) policy name that generated this audit record.
        """
        return pulumi.get(self, "fga_policy_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the audit event.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isAlerted")
    def is_alerted(self) -> _builtins.bool:
        """
        Indicates whether an alert was raised for this audit event.
        """
        return pulumi.get(self, "is_alerted")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The name of the object affected by the action.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectOwner")
    def object_owner(self) -> _builtins.str:
        """
        The schema name of the object affected by the action.
        """
        return pulumi.get(self, "object_owner")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the object in the source database affected by the action. For example PL/SQL, SYNONYM or PACKAGE BODY.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        The name of the action executed by the user on the target database. For example ALTER, CREATE or DROP.
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> _builtins.str:
        """
        Indicates whether the operation was a success or a failure.
        """
        return pulumi.get(self, "operation_status")

    @_builtins.property
    @pulumi.getter(name="osTerminal")
    def os_terminal(self) -> _builtins.str:
        """
        The operating system terminal of the user session.
        """
        return pulumi.get(self, "os_terminal")

    @_builtins.property
    @pulumi.getter(name="osUserName")
    def os_user_name(self) -> _builtins.str:
        """
        The name of the operating system user for the database session.
        """
        return pulumi.get(self, "os_user_name")

    @_builtins.property
    @pulumi.getter(name="peerTargetDatabaseKey")
    def peer_target_database_key(self) -> _builtins.int:
        """
        The secondary id assigned for the peer database registered with Data Safe.
        """
        return pulumi.get(self, "peer_target_database_key")

    @_builtins.property
    @pulumi.getter(name="targetClass")
    def target_class(self) -> _builtins.str:
        """
        The class of the target that was audited.
        """
        return pulumi.get(self, "target_class")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database that was audited.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetName")
    def target_name(self) -> _builtins.str:
        """
        The name of the target database that was audited.
        """
        return pulumi.get(self, "target_name")

    @_builtins.property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> _builtins.str:
        """
        The timestamp when this audit event was collected from the target database by Data Safe.
        """
        return pulumi.get(self, "time_collected")

    @_builtins.property
    @pulumi.getter(name="trailSource")
    def trail_source(self) -> _builtins.str:
        """
        The underlying source of unified audit trail.
        """
        return pulumi.get(self, "trail_source")


@pulumi.output_type
class GetAuditEventsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 audit_conditions: Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditConditionResult'],
                 audit_policy_id: _builtins.str,
                 audit_specifications: Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditSpecificationResult'],
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_data_safe_service_account_excluded: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 provision_trigger: _builtins.int,
                 retrieve_from_target_trigger: _builtins.int,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_last_provisioned: _builtins.str,
                 time_last_retrieved: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param Sequence['GetAuditPoliciesAuditPolicyCollectionItemAuditConditionArgs'] audit_conditions: Lists the audit policy provisioning conditions for the target database.
        :param _builtins.str audit_policy_id: An optional filter to return only resources that match the specified id.
        :param Sequence['GetAuditPoliciesAuditPolicyCollectionItemAuditSpecificationArgs'] audit_specifications: Represents all available audit policy specifications relevant for the target database. For more details on available audit polcies, refer to [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827).
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: Description of the audit policy.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the audit policy.
        :param _builtins.bool is_data_safe_service_account_excluded: Option provided to users at the target to indicate whether the Data Safe service account has to be excluded while provisioning the audit policies.
        :param _builtins.str lifecycle_details: Details about the current state of the audit policy in Data Safe.
        :param _builtins.str state: The current state of the audit policy.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The time the the audit policy was created, in the format defined by RFC3339.
        :param _builtins.str time_last_provisioned: Indicates the last provisioning time of audit policies on the target, in the format defined by RFC3339.
        :param _builtins.str time_last_retrieved: The time when the audit policies was last retrieved from this target, in the format defined by RFC3339.
        :param _builtins.str time_updated: The last date and time the audit policy was updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "audit_conditions", audit_conditions)
        pulumi.set(__self__, "audit_policy_id", audit_policy_id)
        pulumi.set(__self__, "audit_specifications", audit_specifications)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_data_safe_service_account_excluded", is_data_safe_service_account_excluded)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "provision_trigger", provision_trigger)
        pulumi.set(__self__, "retrieve_from_target_trigger", retrieve_from_target_trigger)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_provisioned", time_last_provisioned)
        pulumi.set(__self__, "time_last_retrieved", time_last_retrieved)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="auditConditions")
    def audit_conditions(self) -> Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditConditionResult']:
        """
        Lists the audit policy provisioning conditions for the target database.
        """
        return pulumi.get(self, "audit_conditions")

    @_builtins.property
    @pulumi.getter(name="auditPolicyId")
    def audit_policy_id(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified id.
        """
        return pulumi.get(self, "audit_policy_id")

    @_builtins.property
    @pulumi.getter(name="auditSpecifications")
    def audit_specifications(self) -> Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditSpecificationResult']:
        """
        Represents all available audit policy specifications relevant for the target database. For more details on available audit polcies, refer to [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827).
        """
        return pulumi.get(self, "audit_specifications")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the audit policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the audit policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDataSafeServiceAccountExcluded")
    def is_data_safe_service_account_excluded(self) -> _builtins.bool:
        """
        Option provided to users at the target to indicate whether the Data Safe service account has to be excluded while provisioning the audit policies.
        """
        return pulumi.get(self, "is_data_safe_service_account_excluded")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the audit policy in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="provisionTrigger")
    def provision_trigger(self) -> _builtins.int:
        return pulumi.get(self, "provision_trigger")

    @_builtins.property
    @pulumi.getter(name="retrieveFromTargetTrigger")
    def retrieve_from_target_trigger(self) -> _builtins.int:
        return pulumi.get(self, "retrieve_from_target_trigger")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the audit policy.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time the the audit policy was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeLastProvisioned")
    def time_last_provisioned(self) -> _builtins.str:
        """
        Indicates the last provisioning time of audit policies on the target, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_last_provisioned")

    @_builtins.property
    @pulumi.getter(name="timeLastRetrieved")
    def time_last_retrieved(self) -> _builtins.str:
        """
        The time when the audit policies was last retrieved from this target, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_last_retrieved")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The last date and time the audit policy was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionItemAuditConditionResult(dict):
    def __init__(__self__, *,
                 audit_policy_name: _builtins.str,
                 enable_conditions: Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableConditionResult'],
                 is_data_safe_service_account_audited: _builtins.bool,
                 is_priv_users_managed_by_data_safe: _builtins.bool):
        """
        :param _builtins.str audit_policy_name: Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        :param Sequence['GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableConditionArgs'] enable_conditions: Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
        :param _builtins.bool is_data_safe_service_account_audited: Indicates whether the Data Safe user activity on the target database will be audited by the policy.
        :param _builtins.bool is_priv_users_managed_by_data_safe: Indicates whether the privileged user list is managed by Data Safe.
        """
        pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        pulumi.set(__self__, "enable_conditions", enable_conditions)
        pulumi.set(__self__, "is_data_safe_service_account_audited", is_data_safe_service_account_audited)
        pulumi.set(__self__, "is_priv_users_managed_by_data_safe", is_priv_users_managed_by_data_safe)

    @_builtins.property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> _builtins.str:
        """
        Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        """
        return pulumi.get(self, "audit_policy_name")

    @_builtins.property
    @pulumi.getter(name="enableConditions")
    def enable_conditions(self) -> Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableConditionResult']:
        """
        Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
        """
        return pulumi.get(self, "enable_conditions")

    @_builtins.property
    @pulumi.getter(name="isDataSafeServiceAccountAudited")
    def is_data_safe_service_account_audited(self) -> _builtins.bool:
        """
        Indicates whether the Data Safe user activity on the target database will be audited by the policy.
        """
        return pulumi.get(self, "is_data_safe_service_account_audited")

    @_builtins.property
    @pulumi.getter(name="isPrivUsersManagedByDataSafe")
    def is_priv_users_managed_by_data_safe(self) -> _builtins.bool:
        """
        Indicates whether the privileged user list is managed by Data Safe.
        """
        return pulumi.get(self, "is_priv_users_managed_by_data_safe")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableConditionResult(dict):
    def __init__(__self__, *,
                 entity_names: Sequence[_builtins.str],
                 entity_selection: _builtins.str,
                 entity_type: _builtins.str,
                 operation_status: _builtins.str):
        """
        :param Sequence[_builtins.str] entity_names: List of users or roles that the policy must be enabled for.
        :param _builtins.str entity_selection: The entity include or exclude selection.
        :param _builtins.str entity_type: The entity type that the policy must be enabled for.
        :param _builtins.str operation_status: The operation status that the policy must be enabled for.
        """
        pulumi.set(__self__, "entity_names", entity_names)
        pulumi.set(__self__, "entity_selection", entity_selection)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "operation_status", operation_status)

    @_builtins.property
    @pulumi.getter(name="entityNames")
    def entity_names(self) -> Sequence[_builtins.str]:
        """
        List of users or roles that the policy must be enabled for.
        """
        return pulumi.get(self, "entity_names")

    @_builtins.property
    @pulumi.getter(name="entitySelection")
    def entity_selection(self) -> _builtins.str:
        """
        The entity include or exclude selection.
        """
        return pulumi.get(self, "entity_selection")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> _builtins.str:
        """
        The entity type that the policy must be enabled for.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> _builtins.str:
        """
        The operation status that the policy must be enabled for.
        """
        return pulumi.get(self, "operation_status")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionItemAuditSpecificationResult(dict):
    def __init__(__self__, *,
                 audit_policy_category: _builtins.str,
                 audit_policy_name: _builtins.str,
                 database_policy_names: Sequence[_builtins.str],
                 enable_status: _builtins.str,
                 enabled_entities: _builtins.str,
                 is_created: _builtins.bool,
                 is_enabled_for_all_users: _builtins.bool,
                 is_seeded_in_data_safe: _builtins.bool,
                 is_seeded_in_target: _builtins.bool,
                 is_view_only: _builtins.bool,
                 partially_enabled_msg: _builtins.str):
        """
        :param _builtins.str audit_policy_category: The category to which the audit policy belongs.
        :param _builtins.str audit_policy_name: Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        :param Sequence[_builtins.str] database_policy_names: Indicates the names of corresponding database policy ( or policies) in the target database.
        :param _builtins.str enable_status: Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        :param _builtins.str enabled_entities: Indicates on whom the audit policy is enabled.
        :param _builtins.bool is_created: Indicates whether the policy is already created on the target database.
        :param _builtins.bool is_enabled_for_all_users: Indicates whether the policy by default is enabled for all users with no flexibility to alter the enablement conditions.
        :param _builtins.bool is_seeded_in_data_safe: Indicates whether the audit policy is one of the seeded policies provided by Oracle Data Safe.
        :param _builtins.bool is_seeded_in_target: Indicates whether the audit policy is one of the predefined policies provided by Oracle Database.
        :param _builtins.bool is_view_only: Indicates whether the audit policy is available for provisioning/ de-provisioning from Oracle Data Safe, or is only available for displaying the current provisioning status from the target.
        :param _builtins.str partially_enabled_msg: Provides information about the policy that has been only partially enabled.
        """
        pulumi.set(__self__, "audit_policy_category", audit_policy_category)
        pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        pulumi.set(__self__, "database_policy_names", database_policy_names)
        pulumi.set(__self__, "enable_status", enable_status)
        pulumi.set(__self__, "enabled_entities", enabled_entities)
        pulumi.set(__self__, "is_created", is_created)
        pulumi.set(__self__, "is_enabled_for_all_users", is_enabled_for_all_users)
        pulumi.set(__self__, "is_seeded_in_data_safe", is_seeded_in_data_safe)
        pulumi.set(__self__, "is_seeded_in_target", is_seeded_in_target)
        pulumi.set(__self__, "is_view_only", is_view_only)
        pulumi.set(__self__, "partially_enabled_msg", partially_enabled_msg)

    @_builtins.property
    @pulumi.getter(name="auditPolicyCategory")
    def audit_policy_category(self) -> _builtins.str:
        """
        The category to which the audit policy belongs.
        """
        return pulumi.get(self, "audit_policy_category")

    @_builtins.property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> _builtins.str:
        """
        Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        """
        return pulumi.get(self, "audit_policy_name")

    @_builtins.property
    @pulumi.getter(name="databasePolicyNames")
    def database_policy_names(self) -> Sequence[_builtins.str]:
        """
        Indicates the names of corresponding database policy ( or policies) in the target database.
        """
        return pulumi.get(self, "database_policy_names")

    @_builtins.property
    @pulumi.getter(name="enableStatus")
    def enable_status(self) -> _builtins.str:
        """
        Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        """
        return pulumi.get(self, "enable_status")

    @_builtins.property
    @pulumi.getter(name="enabledEntities")
    def enabled_entities(self) -> _builtins.str:
        """
        Indicates on whom the audit policy is enabled.
        """
        return pulumi.get(self, "enabled_entities")

    @_builtins.property
    @pulumi.getter(name="isCreated")
    def is_created(self) -> _builtins.bool:
        """
        Indicates whether the policy is already created on the target database.
        """
        return pulumi.get(self, "is_created")

    @_builtins.property
    @pulumi.getter(name="isEnabledForAllUsers")
    def is_enabled_for_all_users(self) -> _builtins.bool:
        """
        Indicates whether the policy by default is enabled for all users with no flexibility to alter the enablement conditions.
        """
        return pulumi.get(self, "is_enabled_for_all_users")

    @_builtins.property
    @pulumi.getter(name="isSeededInDataSafe")
    def is_seeded_in_data_safe(self) -> _builtins.bool:
        """
        Indicates whether the audit policy is one of the seeded policies provided by Oracle Data Safe.
        """
        return pulumi.get(self, "is_seeded_in_data_safe")

    @_builtins.property
    @pulumi.getter(name="isSeededInTarget")
    def is_seeded_in_target(self) -> _builtins.bool:
        """
        Indicates whether the audit policy is one of the predefined policies provided by Oracle Database.
        """
        return pulumi.get(self, "is_seeded_in_target")

    @_builtins.property
    @pulumi.getter(name="isViewOnly")
    def is_view_only(self) -> _builtins.bool:
        """
        Indicates whether the audit policy is available for provisioning/ de-provisioning from Oracle Data Safe, or is only available for displaying the current provisioning status from the target.
        """
        return pulumi.get(self, "is_view_only")

    @_builtins.property
    @pulumi.getter(name="partiallyEnabledMsg")
    def partially_enabled_msg(self) -> _builtins.str:
        """
        Provides information about the policy that has been only partially enabled.
        """
        return pulumi.get(self, "partially_enabled_msg")


@pulumi.output_type
class GetAuditPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditPolicyAuditConditionResult(dict):
    def __init__(__self__, *,
                 audit_policy_name: _builtins.str,
                 enable_conditions: Sequence['outputs.GetAuditPolicyAuditConditionEnableConditionResult'],
                 is_data_safe_service_account_audited: _builtins.bool,
                 is_priv_users_managed_by_data_safe: _builtins.bool):
        """
        :param _builtins.str audit_policy_name: Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        :param Sequence['GetAuditPolicyAuditConditionEnableConditionArgs'] enable_conditions: Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
        :param _builtins.bool is_data_safe_service_account_audited: Indicates whether the Data Safe user activity on the target database will be audited by the policy.
        :param _builtins.bool is_priv_users_managed_by_data_safe: Indicates whether the privileged user list is managed by Data Safe.
        """
        pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        pulumi.set(__self__, "enable_conditions", enable_conditions)
        pulumi.set(__self__, "is_data_safe_service_account_audited", is_data_safe_service_account_audited)
        pulumi.set(__self__, "is_priv_users_managed_by_data_safe", is_priv_users_managed_by_data_safe)

    @_builtins.property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> _builtins.str:
        """
        Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        """
        return pulumi.get(self, "audit_policy_name")

    @_builtins.property
    @pulumi.getter(name="enableConditions")
    def enable_conditions(self) -> Sequence['outputs.GetAuditPolicyAuditConditionEnableConditionResult']:
        """
        Indicates the users/roles in the target database for which the audit policy is enforced, and the success/failure event condition to generate the audit event..
        """
        return pulumi.get(self, "enable_conditions")

    @_builtins.property
    @pulumi.getter(name="isDataSafeServiceAccountAudited")
    def is_data_safe_service_account_audited(self) -> _builtins.bool:
        """
        Indicates whether the Data Safe user activity on the target database will be audited by the policy.
        """
        return pulumi.get(self, "is_data_safe_service_account_audited")

    @_builtins.property
    @pulumi.getter(name="isPrivUsersManagedByDataSafe")
    def is_priv_users_managed_by_data_safe(self) -> _builtins.bool:
        """
        Indicates whether the privileged user list is managed by Data Safe.
        """
        return pulumi.get(self, "is_priv_users_managed_by_data_safe")


@pulumi.output_type
class GetAuditPolicyAuditConditionEnableConditionResult(dict):
    def __init__(__self__, *,
                 entity_names: Sequence[_builtins.str],
                 entity_selection: _builtins.str,
                 entity_type: _builtins.str,
                 operation_status: _builtins.str):
        """
        :param Sequence[_builtins.str] entity_names: List of users or roles that the policy must be enabled for.
        :param _builtins.str entity_selection: The entity include or exclude selection.
        :param _builtins.str entity_type: The entity type that the policy must be enabled for.
        :param _builtins.str operation_status: The operation status that the policy must be enabled for.
        """
        pulumi.set(__self__, "entity_names", entity_names)
        pulumi.set(__self__, "entity_selection", entity_selection)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "operation_status", operation_status)

    @_builtins.property
    @pulumi.getter(name="entityNames")
    def entity_names(self) -> Sequence[_builtins.str]:
        """
        List of users or roles that the policy must be enabled for.
        """
        return pulumi.get(self, "entity_names")

    @_builtins.property
    @pulumi.getter(name="entitySelection")
    def entity_selection(self) -> _builtins.str:
        """
        The entity include or exclude selection.
        """
        return pulumi.get(self, "entity_selection")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> _builtins.str:
        """
        The entity type that the policy must be enabled for.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> _builtins.str:
        """
        The operation status that the policy must be enabled for.
        """
        return pulumi.get(self, "operation_status")


@pulumi.output_type
class GetAuditPolicyAuditSpecificationResult(dict):
    def __init__(__self__, *,
                 audit_policy_category: _builtins.str,
                 audit_policy_name: _builtins.str,
                 database_policy_names: Sequence[_builtins.str],
                 enable_status: _builtins.str,
                 enabled_entities: _builtins.str,
                 is_created: _builtins.bool,
                 is_enabled_for_all_users: _builtins.bool,
                 is_seeded_in_data_safe: _builtins.bool,
                 is_seeded_in_target: _builtins.bool,
                 is_view_only: _builtins.bool,
                 partially_enabled_msg: _builtins.str):
        """
        :param _builtins.str audit_policy_category: The category to which the audit policy belongs.
        :param _builtins.str audit_policy_name: Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        :param Sequence[_builtins.str] database_policy_names: Indicates the names of corresponding database policy ( or policies) in the target database.
        :param _builtins.str enable_status: Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        :param _builtins.str enabled_entities: Indicates on whom the audit policy is enabled.
        :param _builtins.bool is_created: Indicates whether the policy is already created on the target database.
        :param _builtins.bool is_enabled_for_all_users: Indicates whether the policy by default is enabled for all users with no flexibility to alter the enablement conditions.
        :param _builtins.bool is_seeded_in_data_safe: Indicates whether the audit policy is one of the seeded policies provided by Oracle Data Safe.
        :param _builtins.bool is_seeded_in_target: Indicates whether the audit policy is one of the predefined policies provided by Oracle Database.
        :param _builtins.bool is_view_only: Indicates whether the audit policy is available for provisioning/ de-provisioning from Oracle Data Safe, or is only available for displaying the current provisioning status from the target.
        :param _builtins.str partially_enabled_msg: Provides information about the policy that has been only partially enabled.
        """
        pulumi.set(__self__, "audit_policy_category", audit_policy_category)
        pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        pulumi.set(__self__, "database_policy_names", database_policy_names)
        pulumi.set(__self__, "enable_status", enable_status)
        pulumi.set(__self__, "enabled_entities", enabled_entities)
        pulumi.set(__self__, "is_created", is_created)
        pulumi.set(__self__, "is_enabled_for_all_users", is_enabled_for_all_users)
        pulumi.set(__self__, "is_seeded_in_data_safe", is_seeded_in_data_safe)
        pulumi.set(__self__, "is_seeded_in_target", is_seeded_in_target)
        pulumi.set(__self__, "is_view_only", is_view_only)
        pulumi.set(__self__, "partially_enabled_msg", partially_enabled_msg)

    @_builtins.property
    @pulumi.getter(name="auditPolicyCategory")
    def audit_policy_category(self) -> _builtins.str:
        """
        The category to which the audit policy belongs.
        """
        return pulumi.get(self, "audit_policy_category")

    @_builtins.property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> _builtins.str:
        """
        Indicates the audit policy name. Refer to the [documentation](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/audit-policies.html#GUID-361A9A9A-7C21-4F5A-8945-9B3A0C472827) for seeded audit policy names. For custom policies, refer to the user-defined policy name created in the target database.
        """
        return pulumi.get(self, "audit_policy_name")

    @_builtins.property
    @pulumi.getter(name="databasePolicyNames")
    def database_policy_names(self) -> Sequence[_builtins.str]:
        """
        Indicates the names of corresponding database policy ( or policies) in the target database.
        """
        return pulumi.get(self, "database_policy_names")

    @_builtins.property
    @pulumi.getter(name="enableStatus")
    def enable_status(self) -> _builtins.str:
        """
        Indicates whether the policy has been enabled, disabled or partially enabled in the target database. The status is PARTIALLY_ENABLED if any of the constituent database audit policies is not enabled.
        """
        return pulumi.get(self, "enable_status")

    @_builtins.property
    @pulumi.getter(name="enabledEntities")
    def enabled_entities(self) -> _builtins.str:
        """
        Indicates on whom the audit policy is enabled.
        """
        return pulumi.get(self, "enabled_entities")

    @_builtins.property
    @pulumi.getter(name="isCreated")
    def is_created(self) -> _builtins.bool:
        """
        Indicates whether the policy is already created on the target database.
        """
        return pulumi.get(self, "is_created")

    @_builtins.property
    @pulumi.getter(name="isEnabledForAllUsers")
    def is_enabled_for_all_users(self) -> _builtins.bool:
        """
        Indicates whether the policy by default is enabled for all users with no flexibility to alter the enablement conditions.
        """
        return pulumi.get(self, "is_enabled_for_all_users")

    @_builtins.property
    @pulumi.getter(name="isSeededInDataSafe")
    def is_seeded_in_data_safe(self) -> _builtins.bool:
        """
        Indicates whether the audit policy is one of the seeded policies provided by Oracle Data Safe.
        """
        return pulumi.get(self, "is_seeded_in_data_safe")

    @_builtins.property
    @pulumi.getter(name="isSeededInTarget")
    def is_seeded_in_target(self) -> _builtins.bool:
        """
        Indicates whether the audit policy is one of the predefined policies provided by Oracle Database.
        """
        return pulumi.get(self, "is_seeded_in_target")

    @_builtins.property
    @pulumi.getter(name="isViewOnly")
    def is_view_only(self) -> _builtins.bool:
        """
        Indicates whether the audit policy is available for provisioning/ de-provisioning from Oracle Data Safe, or is only available for displaying the current provisioning status from the target.
        """
        return pulumi.get(self, "is_view_only")

    @_builtins.property
    @pulumi.getter(name="partiallyEnabledMsg")
    def partially_enabled_msg(self) -> _builtins.str:
        """
        Provides information about the policy that has been only partially enabled.
        """
        return pulumi.get(self, "partially_enabled_msg")


@pulumi.output_type
class GetAuditProfileAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: _builtins.str,
                 dimensions: Sequence['outputs.GetAuditProfileAnalyticItemDimensionResult']):
        """
        :param _builtins.str count: Total count of aggregated metric.
        :param Sequence['GetAuditProfileAnalyticItemDimensionArgs'] dimensions: Details of aggregation dimensions used for summarizing audit profiles.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "dimensions", dimensions)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        Total count of aggregated metric.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAuditProfileAnalyticItemDimensionResult']:
        """
        Details of aggregation dimensions used for summarizing audit profiles.
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetAuditProfileAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 is_paid_usage_enabled: _builtins.bool):
        """
        :param _builtins.bool is_paid_usage_enabled: Indicates if you want to continue collecting audit records beyond the free limit of one million audit records per month per target database, potentially incurring additional charges. The default value is inherited from the global settings.  You can change at the global level or at the target level.
        """
        pulumi.set(__self__, "is_paid_usage_enabled", is_paid_usage_enabled)

    @_builtins.property
    @pulumi.getter(name="isPaidUsageEnabled")
    def is_paid_usage_enabled(self) -> _builtins.bool:
        """
        Indicates if you want to continue collecting audit records beyond the free limit of one million audit records per month per target database, potentially incurring additional charges. The default value is inherited from the global settings.  You can change at the global level or at the target level.
        """
        return pulumi.get(self, "is_paid_usage_enabled")


@pulumi.output_type
class GetAuditProfileAuditTrailResult(dict):
    def __init__(__self__, *,
                 audit_collection_start_time: _builtins.str,
                 audit_profile_id: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_auto_purge_enabled: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 peer_target_database_key: _builtins.int,
                 purge_job_details: _builtins.str,
                 purge_job_status: _builtins.str,
                 purge_job_time: _builtins.str,
                 state: _builtins.str,
                 status: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_last_collected: _builtins.str,
                 time_updated: _builtins.str,
                 trail_location: _builtins.str,
                 trail_source: _builtins.str,
                 work_request_id: _builtins.str):
        """
        :param _builtins.str audit_collection_start_time: The date from which the audit trail must start collecting data, in the format defined by RFC3339.
        :param _builtins.str audit_profile_id: The OCID of the audit.
        :param _builtins.str compartment_id: The OCID of the compartment that contains the audit.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the audit profile.
        :param _builtins.str display_name: The display name of the audit profile.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the audit profile.
        :param _builtins.bool is_auto_purge_enabled: Indicates if auto purge is enabled on the target database, which helps delete audit data in the target database every seven days so that the database's audit trail does not become too large.
        :param _builtins.str lifecycle_details: Details about the current state of the audit profile in Data Safe.
        :param _builtins.int peer_target_database_key: The secondary id assigned for the peer database registered with Data Safe.
        :param _builtins.str purge_job_details: The details of the audit trail purge job that ran on the "purgeJobTime".
        :param _builtins.str purge_job_status: The current status of the audit trail purge job.
        :param _builtins.str purge_job_time: The date and time of the last purge job, which deletes audit data in the target database every seven days so that the database's audit trail does not become too large. In the format defined by RFC3339.
        :param _builtins.str state: The current state of the audit profile.
        :param _builtins.str status: The current sub-state of the audit trail.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: The OCID of the Data Safe target for which the audit profile is created.
        :param _builtins.str time_created: The date and time the audit profile was created, in the format defined by RFC3339.
        :param _builtins.str time_last_collected: The date and time until when the audit events were collected from the target database by the Data Safe audit trail  collection process, in the format defined by RFC3339.
        :param _builtins.str time_updated: The date and time the audit profile was updated, in the format defined by RFC3339.
        :param _builtins.str trail_location: An audit trail location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        :param _builtins.str trail_source: The underlying source of unified audit trail.
        :param _builtins.str work_request_id: The OCID of the workrequest for audit trail which collects audit records.
        """
        pulumi.set(__self__, "audit_collection_start_time", audit_collection_start_time)
        pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_auto_purge_enabled", is_auto_purge_enabled)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "peer_target_database_key", peer_target_database_key)
        pulumi.set(__self__, "purge_job_details", purge_job_details)
        pulumi.set(__self__, "purge_job_status", purge_job_status)
        pulumi.set(__self__, "purge_job_time", purge_job_time)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_collected", time_last_collected)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "trail_location", trail_location)
        pulumi.set(__self__, "trail_source", trail_source)
        pulumi.set(__self__, "work_request_id", work_request_id)

    @_builtins.property
    @pulumi.getter(name="auditCollectionStartTime")
    def audit_collection_start_time(self) -> _builtins.str:
        """
        The date from which the audit trail must start collecting data, in the format defined by RFC3339.
        """
        return pulumi.get(self, "audit_collection_start_time")

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> _builtins.str:
        """
        The OCID of the audit.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        The OCID of the compartment that contains the audit.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the audit profile.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the audit profile.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the audit profile.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isAutoPurgeEnabled")
    def is_auto_purge_enabled(self) -> _builtins.bool:
        """
        Indicates if auto purge is enabled on the target database, which helps delete audit data in the target database every seven days so that the database's audit trail does not become too large.
        """
        return pulumi.get(self, "is_auto_purge_enabled")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the audit profile in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="peerTargetDatabaseKey")
    def peer_target_database_key(self) -> _builtins.int:
        """
        The secondary id assigned for the peer database registered with Data Safe.
        """
        return pulumi.get(self, "peer_target_database_key")

    @_builtins.property
    @pulumi.getter(name="purgeJobDetails")
    def purge_job_details(self) -> _builtins.str:
        """
        The details of the audit trail purge job that ran on the "purgeJobTime".
        """
        return pulumi.get(self, "purge_job_details")

    @_builtins.property
    @pulumi.getter(name="purgeJobStatus")
    def purge_job_status(self) -> _builtins.str:
        """
        The current status of the audit trail purge job.
        """
        return pulumi.get(self, "purge_job_status")

    @_builtins.property
    @pulumi.getter(name="purgeJobTime")
    def purge_job_time(self) -> _builtins.str:
        """
        The date and time of the last purge job, which deletes audit data in the target database every seven days so that the database's audit trail does not become too large. In the format defined by RFC3339.
        """
        return pulumi.get(self, "purge_job_time")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the audit profile.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current sub-state of the audit trail.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the Data Safe target for which the audit profile is created.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the audit profile was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeLastCollected")
    def time_last_collected(self) -> _builtins.str:
        """
        The date and time until when the audit events were collected from the target database by the Data Safe audit trail  collection process, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_last_collected")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the audit profile was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> _builtins.str:
        """
        An audit trail location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        """
        return pulumi.get(self, "trail_location")

    @_builtins.property
    @pulumi.getter(name="trailSource")
    def trail_source(self) -> _builtins.str:
        """
        The underlying source of unified audit trail.
        """
        return pulumi.get(self, "trail_source")

    @_builtins.property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> _builtins.str:
        """
        The OCID of the workrequest for audit trail which collects audit records.
        """
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumeItemResult(dict):
    def __init__(__self__, *,
                 audit_profile_id: _builtins.str,
                 month_in_consideration: _builtins.str,
                 trail_location: _builtins.str,
                 volume: _builtins.str):
        """
        :param _builtins.str audit_profile_id: The OCID of the audit.
        :param _builtins.str month_in_consideration: Represents the month under consideration for which aggregated audit data volume available at the target is computed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
        :param _builtins.str trail_location: The audit trail location.
        :param _builtins.str volume: Represents the aggregated audit data volume available in the audit trails on the target database which is yet to be collected by Data Safe for the specified month.
        """
        pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        pulumi.set(__self__, "trail_location", trail_location)
        pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> _builtins.str:
        """
        The OCID of the audit.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> _builtins.str:
        """
        Represents the month under consideration for which aggregated audit data volume available at the target is computed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
        """
        return pulumi.get(self, "month_in_consideration")

    @_builtins.property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> _builtins.str:
        """
        The audit trail location.
        """
        return pulumi.get(self, "trail_location")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> _builtins.str:
        """
        Represents the aggregated audit data volume available in the audit trails on the target database which is yet to be collected by Data Safe for the specified month.
        """
        return pulumi.get(self, "volume")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemResult']):
        """
        :param Sequence['GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemArgs'] items: Array of available audit volume summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemResult']:
        """
        Array of available audit volume summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItemResult']):
        """
        :param Sequence['GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItemArgs'] items: Array of available audit volume summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItemResult']:
        """
        Array of available audit volume summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 audit_profile_id: _builtins.str,
                 audit_trail_id: _builtins.str,
                 database_unique_name: _builtins.str,
                 month_in_consideration: _builtins.str,
                 trail_location: _builtins.str,
                 volume: _builtins.str):
        """
        :param _builtins.str audit_profile_id: The OCID of the audit.
        :param _builtins.str audit_trail_id: The OCID of the audit trail.
        :param _builtins.str database_unique_name: Unique name of the database associated to the peer target database.
        :param _builtins.str month_in_consideration: Represents the month under consideration for which aggregated audit data volume available at the target is computed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
        :param _builtins.str trail_location: The audit trail location.
        :param _builtins.str volume: Represents the aggregated audit data volume available in the audit trails on the target database which is yet to be collected by Data Safe for the specified month.
        """
        pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        pulumi.set(__self__, "audit_trail_id", audit_trail_id)
        pulumi.set(__self__, "database_unique_name", database_unique_name)
        pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        pulumi.set(__self__, "trail_location", trail_location)
        pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> _builtins.str:
        """
        The OCID of the audit.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="auditTrailId")
    def audit_trail_id(self) -> _builtins.str:
        """
        The OCID of the audit trail.
        """
        return pulumi.get(self, "audit_trail_id")

    @_builtins.property
    @pulumi.getter(name="databaseUniqueName")
    def database_unique_name(self) -> _builtins.str:
        """
        Unique name of the database associated to the peer target database.
        """
        return pulumi.get(self, "database_unique_name")

    @_builtins.property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> _builtins.str:
        """
        Represents the month under consideration for which aggregated audit data volume available at the target is computed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
        """
        return pulumi.get(self, "month_in_consideration")

    @_builtins.property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> _builtins.str:
        """
        The audit trail location.
        """
        return pulumi.get(self, "trail_location")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> _builtins.str:
        """
        Represents the aggregated audit data volume available in the audit trails on the target database which is yet to be collected by Data Safe for the specified month.
        """
        return pulumi.get(self, "volume")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumeItemResult(dict):
    def __init__(__self__, *,
                 archived_volume: _builtins.str,
                 audit_profile_id: _builtins.str,
                 month_in_consideration: _builtins.str,
                 online_volume: _builtins.str):
        """
        :param _builtins.str archived_volume: The audit data volume collected by Data Safe and is available in archive storage.
        :param _builtins.str audit_profile_id: The OCID of the audit.
        :param _builtins.str month_in_consideration: Represents the month under consideration in which the aggregated audit data volume collected by Data Safe is displayed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
        :param _builtins.str online_volume: The audit data volume collected by Data Safe and is available online in repository.
        """
        pulumi.set(__self__, "archived_volume", archived_volume)
        pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        pulumi.set(__self__, "online_volume", online_volume)

    @_builtins.property
    @pulumi.getter(name="archivedVolume")
    def archived_volume(self) -> _builtins.str:
        """
        The audit data volume collected by Data Safe and is available in archive storage.
        """
        return pulumi.get(self, "archived_volume")

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> _builtins.str:
        """
        The OCID of the audit.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> _builtins.str:
        """
        Represents the month under consideration in which the aggregated audit data volume collected by Data Safe is displayed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
        """
        return pulumi.get(self, "month_in_consideration")

    @_builtins.property
    @pulumi.getter(name="onlineVolume")
    def online_volume(self) -> _builtins.str:
        """
        The audit data volume collected by Data Safe and is available online in repository.
        """
        return pulumi.get(self, "online_volume")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemResult']):
        """
        :param Sequence['GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemArgs'] items: Array of collected audit volume summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemResult']:
        """
        Array of collected audit volume summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItemResult']):
        """
        :param Sequence['GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItemArgs'] items: Array of collected audit volume summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItemResult']:
        """
        Array of collected audit volume summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 archived_volume: _builtins.str,
                 audit_profile_id: _builtins.str,
                 month_in_consideration: _builtins.str,
                 online_volume: _builtins.str):
        """
        :param _builtins.str archived_volume: The audit data volume collected by Data Safe and is available in archive storage.
        :param _builtins.str audit_profile_id: The OCID of the audit.
        :param _builtins.str month_in_consideration: Represents the month under consideration in which the aggregated audit data volume collected by Data Safe is displayed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
        :param _builtins.str online_volume: The audit data volume collected by Data Safe and is available online in repository.
        """
        pulumi.set(__self__, "archived_volume", archived_volume)
        pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        pulumi.set(__self__, "online_volume", online_volume)

    @_builtins.property
    @pulumi.getter(name="archivedVolume")
    def archived_volume(self) -> _builtins.str:
        """
        The audit data volume collected by Data Safe and is available in archive storage.
        """
        return pulumi.get(self, "archived_volume")

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> _builtins.str:
        """
        The OCID of the audit.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> _builtins.str:
        """
        Represents the month under consideration in which the aggregated audit data volume collected by Data Safe is displayed. This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339.. For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
        """
        return pulumi.get(self, "month_in_consideration")

    @_builtins.property
    @pulumi.getter(name="onlineVolume")
    def online_volume(self) -> _builtins.str:
        """
        The audit data volume collected by Data Safe and is available online in repository.
        """
        return pulumi.get(self, "online_volume")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditProfilesAuditProfileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAuditProfilesAuditProfileCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditProfilesAuditProfileCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfilesAuditProfileCollectionItemResult(dict):
    def __init__(__self__, *,
                 audit_collected_volume: _builtins.str,
                 audit_profile_id: _builtins.str,
                 audit_trails: Sequence['outputs.GetAuditProfilesAuditProfileCollectionItemAuditTrailResult'],
                 change_retention_trigger: _builtins.int,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_override_global_retention_setting: _builtins.bool,
                 is_paid_usage_enabled: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 offline_months: _builtins.int,
                 online_months: _builtins.int,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str audit_collected_volume: Indicates number of audit records collected by Data Safe in the current calendar month.  Audit records for the Data Safe service account are excluded and are not counted towards your monthly free limit.
        :param _builtins.str audit_profile_id: A optional filter to return only resources that match the specified id.
        :param Sequence['GetAuditProfilesAuditProfileCollectionItemAuditTrailArgs'] audit_trails: Indicates the list of available audit trails on the target.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the audit profile.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the audit profile.
        :param _builtins.bool is_override_global_retention_setting: A optional filter to return only resources that match the specified retention configured value.
        :param _builtins.bool is_paid_usage_enabled: Indicates if you want to continue audit record collection beyond the free limit of one million audit records per month per target database, incurring additional charges. The default value is inherited from the global settings. You can change at the global level or at the target level.
        :param _builtins.str lifecycle_details: Details about the current state of the audit profile in Data Safe.
        :param _builtins.int offline_months: Indicates the number of months the audit records will be stored offline in the Data Safe audit archive. Minimum: 0; Maximum: 72 months. If you have a requirement to store the audit data even longer in archive, please contact the Oracle Support.
        :param _builtins.int online_months: Indicates the number of months the audit records will be stored online in Oracle Data Safe audit repository for immediate reporting and analysis.  Minimum: 1; Maximum: 12 months
        :param _builtins.str state: A optional filter to return only resources that match the specified lifecycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The date and time the audit profile was created, in the format defined by RFC3339.
        :param _builtins.str time_updated: The date and time the audit profile was updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "audit_collected_volume", audit_collected_volume)
        pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        pulumi.set(__self__, "audit_trails", audit_trails)
        pulumi.set(__self__, "change_retention_trigger", change_retention_trigger)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_override_global_retention_setting", is_override_global_retention_setting)
        pulumi.set(__self__, "is_paid_usage_enabled", is_paid_usage_enabled)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "offline_months", offline_months)
        pulumi.set(__self__, "online_months", online_months)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="auditCollectedVolume")
    def audit_collected_volume(self) -> _builtins.str:
        """
        Indicates number of audit records collected by Data Safe in the current calendar month.  Audit records for the Data Safe service account are excluded and are not counted towards your monthly free limit.
        """
        return pulumi.get(self, "audit_collected_volume")

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> _builtins.str:
        """
        A optional filter to return only resources that match the specified id.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="auditTrails")
    def audit_trails(self) -> Sequence['outputs.GetAuditProfilesAuditProfileCollectionItemAuditTrailResult']:
        """
        Indicates the list of available audit trails on the target.
        """
        return pulumi.get(self, "audit_trails")

    @_builtins.property
    @pulumi.getter(name="changeRetentionTrigger")
    def change_retention_trigger(self) -> _builtins.int:
        return pulumi.get(self, "change_retention_trigger")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the audit profile.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the audit profile.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isOverrideGlobalRetentionSetting")
    def is_override_global_retention_setting(self) -> _builtins.bool:
        """
        A optional filter to return only resources that match the specified retention configured value.
        """
        return pulumi.get(self, "is_override_global_retention_setting")

    @_builtins.property
    @pulumi.getter(name="isPaidUsageEnabled")
    def is_paid_usage_enabled(self) -> _builtins.bool:
        """
        Indicates if you want to continue audit record collection beyond the free limit of one million audit records per month per target database, incurring additional charges. The default value is inherited from the global settings. You can change at the global level or at the target level.
        """
        return pulumi.get(self, "is_paid_usage_enabled")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the audit profile in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="offlineMonths")
    def offline_months(self) -> _builtins.int:
        """
        Indicates the number of months the audit records will be stored offline in the Data Safe audit archive. Minimum: 0; Maximum: 72 months. If you have a requirement to store the audit data even longer in archive, please contact the Oracle Support.
        """
        return pulumi.get(self, "offline_months")

    @_builtins.property
    @pulumi.getter(name="onlineMonths")
    def online_months(self) -> _builtins.int:
        """
        Indicates the number of months the audit records will be stored online in Oracle Data Safe audit repository for immediate reporting and analysis.  Minimum: 1; Maximum: 12 months
        """
        return pulumi.get(self, "online_months")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A optional filter to return only resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the audit profile was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the audit profile was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAuditProfilesAuditProfileCollectionItemAuditTrailResult(dict):
    def __init__(__self__, *,
                 audit_collection_start_time: _builtins.str,
                 audit_profile_id: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_auto_purge_enabled: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 peer_target_database_key: _builtins.int,
                 purge_job_details: _builtins.str,
                 purge_job_status: _builtins.str,
                 purge_job_time: _builtins.str,
                 state: _builtins.str,
                 status: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_last_collected: _builtins.str,
                 time_updated: _builtins.str,
                 trail_location: _builtins.str,
                 trail_source: _builtins.str,
                 work_request_id: _builtins.str):
        """
        :param _builtins.str audit_collection_start_time: The date from which the audit trail must start collecting data, in the format defined by RFC3339.
        :param _builtins.str audit_profile_id: A optional filter to return only resources that match the specified id.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the audit profile.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the audit profile.
        :param _builtins.bool is_auto_purge_enabled: Indicates if auto purge is enabled on the target database, which helps delete audit data in the target database every seven days so that the database's audit trail does not become too large.
        :param _builtins.str lifecycle_details: Details about the current state of the audit profile in Data Safe.
        :param _builtins.int peer_target_database_key: The secondary id assigned for the peer database registered with Data Safe.
        :param _builtins.str purge_job_details: The details of the audit trail purge job that ran on the "purgeJobTime".
        :param _builtins.str purge_job_status: The current status of the audit trail purge job.
        :param _builtins.str purge_job_time: The date and time of the last purge job, which deletes audit data in the target database every seven days so that the database's audit trail does not become too large. In the format defined by RFC3339.
        :param _builtins.str state: A optional filter to return only resources that match the specified lifecycle state.
        :param _builtins.str status: The current sub-state of the audit trail.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The date and time the audit profile was created, in the format defined by RFC3339.
        :param _builtins.str time_last_collected: The date and time until when the audit events were collected from the target database by the Data Safe audit trail  collection process, in the format defined by RFC3339.
        :param _builtins.str time_updated: The date and time the audit profile was updated, in the format defined by RFC3339.
        :param _builtins.str trail_location: An audit trail location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        :param _builtins.str trail_source: The underlying source of unified audit trail.
        :param _builtins.str work_request_id: The OCID of the workrequest for audit trail which collects audit records.
        """
        pulumi.set(__self__, "audit_collection_start_time", audit_collection_start_time)
        pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_auto_purge_enabled", is_auto_purge_enabled)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "peer_target_database_key", peer_target_database_key)
        pulumi.set(__self__, "purge_job_details", purge_job_details)
        pulumi.set(__self__, "purge_job_status", purge_job_status)
        pulumi.set(__self__, "purge_job_time", purge_job_time)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_collected", time_last_collected)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "trail_location", trail_location)
        pulumi.set(__self__, "trail_source", trail_source)
        pulumi.set(__self__, "work_request_id", work_request_id)

    @_builtins.property
    @pulumi.getter(name="auditCollectionStartTime")
    def audit_collection_start_time(self) -> _builtins.str:
        """
        The date from which the audit trail must start collecting data, in the format defined by RFC3339.
        """
        return pulumi.get(self, "audit_collection_start_time")

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> _builtins.str:
        """
        A optional filter to return only resources that match the specified id.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the audit profile.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the audit profile.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isAutoPurgeEnabled")
    def is_auto_purge_enabled(self) -> _builtins.bool:
        """
        Indicates if auto purge is enabled on the target database, which helps delete audit data in the target database every seven days so that the database's audit trail does not become too large.
        """
        return pulumi.get(self, "is_auto_purge_enabled")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the audit profile in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="peerTargetDatabaseKey")
    def peer_target_database_key(self) -> _builtins.int:
        """
        The secondary id assigned for the peer database registered with Data Safe.
        """
        return pulumi.get(self, "peer_target_database_key")

    @_builtins.property
    @pulumi.getter(name="purgeJobDetails")
    def purge_job_details(self) -> _builtins.str:
        """
        The details of the audit trail purge job that ran on the "purgeJobTime".
        """
        return pulumi.get(self, "purge_job_details")

    @_builtins.property
    @pulumi.getter(name="purgeJobStatus")
    def purge_job_status(self) -> _builtins.str:
        """
        The current status of the audit trail purge job.
        """
        return pulumi.get(self, "purge_job_status")

    @_builtins.property
    @pulumi.getter(name="purgeJobTime")
    def purge_job_time(self) -> _builtins.str:
        """
        The date and time of the last purge job, which deletes audit data in the target database every seven days so that the database's audit trail does not become too large. In the format defined by RFC3339.
        """
        return pulumi.get(self, "purge_job_time")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A optional filter to return only resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current sub-state of the audit trail.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the audit profile was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeLastCollected")
    def time_last_collected(self) -> _builtins.str:
        """
        The date and time until when the audit events were collected from the target database by the Data Safe audit trail  collection process, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_last_collected")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the audit profile was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> _builtins.str:
        """
        An audit trail location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        """
        return pulumi.get(self, "trail_location")

    @_builtins.property
    @pulumi.getter(name="trailSource")
    def trail_source(self) -> _builtins.str:
        """
        The underlying source of unified audit trail.
        """
        return pulumi.get(self, "trail_source")

    @_builtins.property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> _builtins.str:
        """
        The OCID of the workrequest for audit trail which collects audit records.
        """
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetAuditProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditTrailAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: _builtins.str,
                 dimensions: Sequence['outputs.GetAuditTrailAnalyticItemDimensionResult']):
        """
        :param _builtins.str count: Total count of aggregated metric.
        :param Sequence['GetAuditTrailAnalyticItemDimensionArgs'] dimensions: Details of aggregation dimensions used for summarizing audit trails.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "dimensions", dimensions)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        Total count of aggregated metric.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetAuditTrailAnalyticItemDimensionResult']:
        """
        Details of aggregation dimensions used for summarizing audit trails.
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetAuditTrailAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 location: _builtins.str,
                 state: _builtins.str,
                 status: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str location: The location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        :param _builtins.str state: The current state of the audit trail.
        :param _builtins.str status: The current sub-state of the audit trail..
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        The location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the audit trail.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current sub-state of the audit trail..
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetAuditTrailsAuditTrailCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAuditTrailsAuditTrailCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditTrailsAuditTrailCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditTrailsAuditTrailCollectionItemResult(dict):
    def __init__(__self__, *,
                 audit_collection_start_time: _builtins.str,
                 audit_profile_id: _builtins.str,
                 audit_trail_id: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_auto_purge_enabled: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 peer_target_database_key: _builtins.int,
                 purge_job_details: _builtins.str,
                 purge_job_status: _builtins.str,
                 purge_job_time: _builtins.str,
                 resume_trigger: _builtins.int,
                 state: _builtins.str,
                 status: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_last_collected: _builtins.str,
                 time_updated: _builtins.str,
                 trail_location: _builtins.str,
                 trail_source: _builtins.str,
                 work_request_id: _builtins.str):
        """
        :param _builtins.str audit_collection_start_time: The date from which the audit trail must start collecting data, in the format defined by RFC3339.
        :param _builtins.str audit_profile_id: The OCID of the  parent audit.
        :param _builtins.str audit_trail_id: A optional filter to return only resources that match the specified id.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the audit trail.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the audit trail.
        :param _builtins.bool is_auto_purge_enabled: Indicates if auto purge is enabled on the target database, which helps delete audit data in the target database every seven days so that the database's audit trail does not become too large.
        :param _builtins.str lifecycle_details: Details about the current state of the audit trail in Data Safe.
        :param _builtins.int peer_target_database_key: The secondary id assigned for the peer database registered with Data Safe.
        :param _builtins.str purge_job_details: The details of the audit trail purge job that ran on the "purgeJobTime".
        :param _builtins.str purge_job_status: The current status of the audit trail purge job.
        :param _builtins.str purge_job_time: The date and time of the last purge job, which deletes audit data in the target database every seven days so that the database's audit trail does not become too large. In the format defined by RFC3339.
        :param _builtins.str state: A optional filter to return only resources that match the specified lifecycle state.
        :param _builtins.str status: A optional filter to return only resources that match the specified sub-state of audit trail.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The date and time the audit trail was created, in the format defined by RFC3339.
        :param _builtins.str time_last_collected: The date and time until when the audit events were collected from the target database by the Data Safe audit trail  collection process, in the format defined by RFC3339.
        :param _builtins.str time_updated: The date and time the audit trail was updated, in the format defined by RFC3339.
        :param _builtins.str trail_location: An audit trail location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        :param _builtins.str trail_source: The underlying source of unified audit trail.
        :param _builtins.str work_request_id: The OCID of the workrequest for audit trail which collects audit records.
        """
        pulumi.set(__self__, "audit_collection_start_time", audit_collection_start_time)
        pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        pulumi.set(__self__, "audit_trail_id", audit_trail_id)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_auto_purge_enabled", is_auto_purge_enabled)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "peer_target_database_key", peer_target_database_key)
        pulumi.set(__self__, "purge_job_details", purge_job_details)
        pulumi.set(__self__, "purge_job_status", purge_job_status)
        pulumi.set(__self__, "purge_job_time", purge_job_time)
        pulumi.set(__self__, "resume_trigger", resume_trigger)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_collected", time_last_collected)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "trail_location", trail_location)
        pulumi.set(__self__, "trail_source", trail_source)
        pulumi.set(__self__, "work_request_id", work_request_id)

    @_builtins.property
    @pulumi.getter(name="auditCollectionStartTime")
    def audit_collection_start_time(self) -> _builtins.str:
        """
        The date from which the audit trail must start collecting data, in the format defined by RFC3339.
        """
        return pulumi.get(self, "audit_collection_start_time")

    @_builtins.property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> _builtins.str:
        """
        The OCID of the  parent audit.
        """
        return pulumi.get(self, "audit_profile_id")

    @_builtins.property
    @pulumi.getter(name="auditTrailId")
    def audit_trail_id(self) -> _builtins.str:
        """
        A optional filter to return only resources that match the specified id.
        """
        return pulumi.get(self, "audit_trail_id")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the audit trail.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the audit trail.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isAutoPurgeEnabled")
    def is_auto_purge_enabled(self) -> _builtins.bool:
        """
        Indicates if auto purge is enabled on the target database, which helps delete audit data in the target database every seven days so that the database's audit trail does not become too large.
        """
        return pulumi.get(self, "is_auto_purge_enabled")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the audit trail in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="peerTargetDatabaseKey")
    def peer_target_database_key(self) -> _builtins.int:
        """
        The secondary id assigned for the peer database registered with Data Safe.
        """
        return pulumi.get(self, "peer_target_database_key")

    @_builtins.property
    @pulumi.getter(name="purgeJobDetails")
    def purge_job_details(self) -> _builtins.str:
        """
        The details of the audit trail purge job that ran on the "purgeJobTime".
        """
        return pulumi.get(self, "purge_job_details")

    @_builtins.property
    @pulumi.getter(name="purgeJobStatus")
    def purge_job_status(self) -> _builtins.str:
        """
        The current status of the audit trail purge job.
        """
        return pulumi.get(self, "purge_job_status")

    @_builtins.property
    @pulumi.getter(name="purgeJobTime")
    def purge_job_time(self) -> _builtins.str:
        """
        The date and time of the last purge job, which deletes audit data in the target database every seven days so that the database's audit trail does not become too large. In the format defined by RFC3339.
        """
        return pulumi.get(self, "purge_job_time")

    @_builtins.property
    @pulumi.getter(name="resumeTrigger")
    def resume_trigger(self) -> _builtins.int:
        return pulumi.get(self, "resume_trigger")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A optional filter to return only resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        A optional filter to return only resources that match the specified sub-state of audit trail.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the audit trail was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeLastCollected")
    def time_last_collected(self) -> _builtins.str:
        """
        The date and time until when the audit events were collected from the target database by the Data Safe audit trail  collection process, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_last_collected")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the audit trail was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> _builtins.str:
        """
        An audit trail location represents the source of audit records that provides documentary evidence of the sequence of activities in the target database.
        """
        return pulumi.get(self, "trail_location")

    @_builtins.property
    @pulumi.getter(name="trailSource")
    def trail_source(self) -> _builtins.str:
        """
        The underlying source of unified audit trail.
        """
        return pulumi.get(self, "trail_source")

    @_builtins.property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> _builtins.str:
        """
        The OCID of the workrequest for audit trail which collects audit records.
        """
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetAuditTrailsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCompatibleFormatsForDataTypeFormatsForDataTypeResult(dict):
    def __init__(__self__, *,
                 data_type: _builtins.str,
                 masking_formats: Sequence['outputs.GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormatResult']):
        """
        :param _builtins.str data_type: The data type category, which can be one of the following - Character - Includes CHAR, NCHAR, VARCHAR2, and NVARCHAR2 Numeric - Includes NUMBER, FLOAT, RAW, BINARY_FLOAT, and BINARY_DOUBLE Date - Includes DATE and TIMESTAMP LOB - Includes BLOB, CLOB, and NCLOB All - Includes all the supported data types
        :param Sequence['GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormatArgs'] masking_formats: An array of the basic masking formats compatible with the data type category.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "masking_formats", masking_formats)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        """
        The data type category, which can be one of the following - Character - Includes CHAR, NCHAR, VARCHAR2, and NVARCHAR2 Numeric - Includes NUMBER, FLOAT, RAW, BINARY_FLOAT, and BINARY_DOUBLE Date - Includes DATE and TIMESTAMP LOB - Includes BLOB, CLOB, and NCLOB All - Includes all the supported data types
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter(name="maskingFormats")
    def masking_formats(self) -> Sequence['outputs.GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormatResult']:
        """
        An array of the basic masking formats compatible with the data type category.
        """
        return pulumi.get(self, "masking_formats")


@pulumi.output_type
class GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormatResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str description: The description of the masking format.
        :param _builtins.str id: The OCID of the masking format.
        :param _builtins.str name: The name of the masking format.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the masking format.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the masking format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the masking format.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeResult(dict):
    def __init__(__self__, *,
                 masking_formats: Sequence['outputs.GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormatResult'],
                 sensitive_type_id: _builtins.str):
        """
        :param Sequence['GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormatArgs'] masking_formats: An array of the library masking formats compatible with the sensitive type.
        :param _builtins.str sensitive_type_id: The OCID of the sensitive type.
        """
        pulumi.set(__self__, "masking_formats", masking_formats)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)

    @_builtins.property
    @pulumi.getter(name="maskingFormats")
    def masking_formats(self) -> Sequence['outputs.GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormatResult']:
        """
        An array of the library masking formats compatible with the sensitive type.
        """
        return pulumi.get(self, "masking_formats")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        The OCID of the sensitive type.
        """
        return pulumi.get(self, "sensitive_type_id")


@pulumi.output_type
class GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormatResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str description: The description of the masking format.
        :param _builtins.str id: The OCID of the masking format.
        :param _builtins.str name: The name of the masking format.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the masking format.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the masking format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the masking format.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDataSafeConfigurationGlobalSettingResult(dict):
    def __init__(__self__, *,
                 is_paid_usage: _builtins.bool,
                 offline_retention_period: _builtins.int,
                 online_retention_period: _builtins.int):
        """
        :param _builtins.bool is_paid_usage: The paid usage option chosen by the customer admin.
        :param _builtins.int offline_retention_period: The offline retention period in months.
        :param _builtins.int online_retention_period: The online retention period in months.
        """
        pulumi.set(__self__, "is_paid_usage", is_paid_usage)
        pulumi.set(__self__, "offline_retention_period", offline_retention_period)
        pulumi.set(__self__, "online_retention_period", online_retention_period)

    @_builtins.property
    @pulumi.getter(name="isPaidUsage")
    def is_paid_usage(self) -> _builtins.bool:
        """
        The paid usage option chosen by the customer admin.
        """
        return pulumi.get(self, "is_paid_usage")

    @_builtins.property
    @pulumi.getter(name="offlineRetentionPeriod")
    def offline_retention_period(self) -> _builtins.int:
        """
        The offline retention period in months.
        """
        return pulumi.get(self, "offline_retention_period")

    @_builtins.property
    @pulumi.getter(name="onlineRetentionPeriod")
    def online_retention_period(self) -> _builtins.int:
        """
        The online retention period in months.
        """
        return pulumi.get(self, "online_retention_period")


@pulumi.output_type
class GetDataSafePrivateEndpointsDataSafePrivateEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 endpoint_fqdn: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 nsg_ids: Sequence[_builtins.str],
                 private_endpoint_id: _builtins.str,
                 private_endpoint_ip: _builtins.str,
                 state: _builtins.str,
                 subnet_id: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 vcn_id: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the private endpoint.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param _builtins.str endpoint_fqdn: The three-label fully qualified domain name (FQDN) of the private endpoint. The customer VCN's DNS records are updated with this FQDN.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the Data Safe private endpoint.
        :param Sequence[_builtins.str] nsg_ids: The OCIDs of the network security groups that the private endpoint belongs to.
        :param _builtins.str private_endpoint_id: The OCID of the underlying private endpoint.
        :param _builtins.str private_endpoint_ip: The private IP address of the private endpoint.
        :param _builtins.str state: A filter to return only resources that match the specified lifecycle state.
        :param _builtins.str subnet_id: The OCID of the subnet.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str vcn_id: A filter to return only resources that match the specified VCN OCID.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "endpoint_fqdn", endpoint_fqdn)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the private endpoint.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="endpointFqdn")
    def endpoint_fqdn(self) -> _builtins.str:
        """
        The three-label fully qualified domain name (FQDN) of the private endpoint. The customer VCN's DNS records are updated with this FQDN.
        """
        return pulumi.get(self, "endpoint_fqdn")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the Data Safe private endpoint.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[_builtins.str]:
        """
        The OCIDs of the network security groups that the private endpoint belongs to.
        """
        return pulumi.get(self, "nsg_ids")

    @_builtins.property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> _builtins.str:
        """
        The OCID of the underlying private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> _builtins.str:
        """
        The private IP address of the private endpoint.
        """
        return pulumi.get(self, "private_endpoint_ip")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The OCID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the private endpoint was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified VCN OCID.
        """
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetDataSafePrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseSecurityConfigSqlFirewallConfigResult(dict):
    def __init__(__self__, *,
                 exclude_job: _builtins.str,
                 status: _builtins.str,
                 time_status_updated: _builtins.str,
                 violation_log_auto_purge: _builtins.str):
        """
        :param _builtins.str exclude_job: Specifies whether the firewall should include or exclude the database internal job activities.
        :param _builtins.str status: Specifies if the firewall is enabled or disabled on the target database.
        :param _builtins.str time_status_updated: The most recent time when the firewall status is updated, in the format defined by RFC3339.
        :param _builtins.str violation_log_auto_purge: Specifies whether Data Safe should automatically purge the violation logs  from the database after collecting the violation logs and persisting on Data Safe.
        """
        pulumi.set(__self__, "exclude_job", exclude_job)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_status_updated", time_status_updated)
        pulumi.set(__self__, "violation_log_auto_purge", violation_log_auto_purge)

    @_builtins.property
    @pulumi.getter(name="excludeJob")
    def exclude_job(self) -> _builtins.str:
        """
        Specifies whether the firewall should include or exclude the database internal job activities.
        """
        return pulumi.get(self, "exclude_job")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies if the firewall is enabled or disabled on the target database.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> _builtins.str:
        """
        The most recent time when the firewall status is updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_status_updated")

    @_builtins.property
    @pulumi.getter(name="violationLogAutoPurge")
    def violation_log_auto_purge(self) -> _builtins.str:
        """
        Specifies whether Data Safe should automatically purge the violation logs  from the database after collecting the violation logs and persisting on Data Safe.
        """
        return pulumi.get(self, "violation_log_auto_purge")


@pulumi.output_type
class GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 database_security_config_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 refresh_trigger: _builtins.int,
                 sql_firewall_configs: Sequence['outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemSqlFirewallConfigResult'],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_last_refreshed: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str database_security_config_id: An optional filter to return only resources that match the specified OCID of the database security configuration resource.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the database security config.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the database security config.
        :param _builtins.str lifecycle_details: Details about the current state of the database security config in Data Safe.
        :param Sequence['GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemSqlFirewallConfigArgs'] sql_firewall_configs: The SQL Firewall related configurations.
        :param _builtins.str state: The current state of the database security configuration.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The time that the database security config was created, in the format defined by RFC3339.
        :param _builtins.str time_last_refreshed: The last date and time the database security config was refreshed, in the format defined by RFC3339.
        :param _builtins.str time_updated: The date and time the database security configuration was last updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_security_config_id", database_security_config_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "refresh_trigger", refresh_trigger)
        pulumi.set(__self__, "sql_firewall_configs", sql_firewall_configs)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_refreshed", time_last_refreshed)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="databaseSecurityConfigId")
    def database_security_config_id(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified OCID of the database security configuration resource.
        """
        return pulumi.get(self, "database_security_config_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the database security config.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the database security config.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the database security config in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="refreshTrigger")
    def refresh_trigger(self) -> _builtins.int:
        return pulumi.get(self, "refresh_trigger")

    @_builtins.property
    @pulumi.getter(name="sqlFirewallConfigs")
    def sql_firewall_configs(self) -> Sequence['outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemSqlFirewallConfigResult']:
        """
        The SQL Firewall related configurations.
        """
        return pulumi.get(self, "sql_firewall_configs")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the database security configuration.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time that the database security config was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeLastRefreshed")
    def time_last_refreshed(self) -> _builtins.str:
        """
        The last date and time the database security config was refreshed, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_last_refreshed")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the database security configuration was last updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemSqlFirewallConfigResult(dict):
    def __init__(__self__, *,
                 exclude_job: _builtins.str,
                 status: _builtins.str,
                 time_status_updated: _builtins.str,
                 violation_log_auto_purge: _builtins.str):
        """
        :param _builtins.str exclude_job: Specifies whether the firewall should include or exclude the database internal job activities.
        :param _builtins.str status: Specifies if the firewall is enabled or disabled on the target database.
        :param _builtins.str time_status_updated: The most recent time when the firewall status is updated, in the format defined by RFC3339.
        :param _builtins.str violation_log_auto_purge: Specifies whether Data Safe should automatically purge the violation logs  from the database after collecting the violation logs and persisting on Data Safe.
        """
        pulumi.set(__self__, "exclude_job", exclude_job)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_status_updated", time_status_updated)
        pulumi.set(__self__, "violation_log_auto_purge", violation_log_auto_purge)

    @_builtins.property
    @pulumi.getter(name="excludeJob")
    def exclude_job(self) -> _builtins.str:
        """
        Specifies whether the firewall should include or exclude the database internal job activities.
        """
        return pulumi.get(self, "exclude_job")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies if the firewall is enabled or disabled on the target database.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> _builtins.str:
        """
        The most recent time when the firewall status is updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_status_updated")

    @_builtins.property
    @pulumi.getter(name="violationLogAutoPurge")
    def violation_log_auto_purge(self) -> _builtins.str:
        """
        Specifies whether Data Safe should automatically purge the violation logs  from the database after collecting the violation logs and persisting on Data Safe.
        """
        return pulumi.get(self, "violation_log_auto_purge")


@pulumi.output_type
class GetDatabaseSecurityConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDiscoveryAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: _builtins.str,
                 dimensions: Sequence['outputs.GetDiscoveryAnalyticItemDimensionResult'],
                 metric_name: _builtins.str):
        """
        :param _builtins.str count: The total count for the aggregation metric.
        :param Sequence['GetDiscoveryAnalyticItemDimensionArgs'] dimensions: The scope of analytics data.
        :param _builtins.str metric_name: The name of the aggregation metric.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        The total count for the aggregation metric.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetDiscoveryAnalyticItemDimensionResult']:
        """
        The scope of analytics data.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The name of the aggregation metric.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetDiscoveryAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 sensitive_data_model_id: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str sensitive_data_model_id: A filter to return only the resources that match the specified sensitive data model OCID.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified sensitive data model OCID.
        """
        return pulumi.get(self, "sensitive_data_model_id")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemArgs'] items: An array of discovery analytics summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemResult']:
        """
        An array of discovery analytics summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 count: _builtins.str,
                 dimensions: Sequence['outputs.GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimensionResult'],
                 metric_name: _builtins.str):
        """
        :param _builtins.str count: The total count for the aggregation metric.
        :param Sequence['GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimensionArgs'] dimensions: The scope of analytics data.
        :param _builtins.str metric_name: The name of the aggregation metric.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        The total count for the aggregation metric.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimensionResult']:
        """
        The scope of analytics data.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The name of the aggregation metric.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 sensitive_data_model_id: _builtins.str,
                 sensitive_type_id: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str sensitive_data_model_id: A filter to return only the resources that match the specified sensitive data model OCID.
        :param _builtins.str sensitive_type_id: A filter to return only items related to a specific sensitive type OCID.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified sensitive data model OCID.
        """
        return pulumi.get(self, "sensitive_data_model_id")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific sensitive type OCID.
        """
        return pulumi.get(self, "sensitive_type_id")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetDiscoveryAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDiscoveryJobTablesForDiscoveryResult(dict):
    def __init__(__self__, *,
                 schema_name: _builtins.str,
                 table_names: Sequence[_builtins.str]):
        """
        :param _builtins.str schema_name: This contains the name of the schema.
        :param Sequence[_builtins.str] table_names: This contains an optional list of the table names.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "table_names", table_names)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        This contains the name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Sequence[_builtins.str]:
        """
        This contains an optional list of the table names.
        """
        return pulumi.get(self, "table_names")


@pulumi.output_type
class GetDiscoveryJobsResultModifiedAttributeResult(dict):
    def __init__(__self__, *,
                 app_defined_child_column_keys: Sequence[_builtins.str],
                 db_defined_child_column_keys: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] app_defined_child_column_keys: Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        :param Sequence[_builtins.str] db_defined_child_column_keys: Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        """
        pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)

    @_builtins.property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        """
        return pulumi.get(self, "app_defined_child_column_keys")

    @_builtins.property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        """
        return pulumi.get(self, "db_defined_child_column_keys")


@pulumi.output_type
class GetDiscoveryJobsResultsDiscoveryJobResultCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemResult(dict):
    def __init__(__self__, *,
                 app_defined_child_column_keys: Sequence[_builtins.str],
                 app_name: _builtins.str,
                 column_name: _builtins.str,
                 data_type: _builtins.str,
                 db_defined_child_column_keys: Sequence[_builtins.str],
                 discovery_job_id: _builtins.str,
                 discovery_type: _builtins.str,
                 estimated_data_value_count: _builtins.str,
                 is_result_applied: _builtins.bool,
                 key: _builtins.str,
                 modified_attributes: Sequence['outputs.GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttributeResult'],
                 object: _builtins.str,
                 object_type: _builtins.str,
                 parent_column_keys: Sequence[_builtins.str],
                 planned_action: _builtins.str,
                 relation_type: _builtins.str,
                 sample_data_values: Sequence[_builtins.str],
                 schema_name: _builtins.str,
                 sensitive_columnkey: _builtins.str,
                 sensitive_type_id: _builtins.str):
        """
        :param Sequence[_builtins.str] app_defined_child_column_keys: Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        :param _builtins.str app_name: The name of the application. An application is an entity that is identified by a schema and stores sensitive information for that schema. Its value will be same as schemaName, if no value is passed.
        :param _builtins.str column_name: A filter to return only a specific column based on column name.
        :param _builtins.str data_type: The data type of the sensitive column.
        :param Sequence[_builtins.str] db_defined_child_column_keys: Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        :param _builtins.str discovery_job_id: The OCID of the discovery job.
        :param _builtins.str discovery_type: A filter to return only the resources that match the specified discovery type.
        :param _builtins.str estimated_data_value_count: The estimated number of data values the column has in the associated database.
        :param _builtins.bool is_result_applied: A filter to return the discovery result resources based on the value of their isResultApplied attribute.
        :param _builtins.str key: The unique key that identifies the discovery result.
        :param Sequence['GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttributeArgs'] modified_attributes: The attributes of a sensitive column that have been modified in the target database. It's populated only in the case of MODIFIED discovery results and shows the new values of the modified attributes.
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: The type of the database object that contains the sensitive column.
        :param Sequence[_builtins.str] parent_column_keys: Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
        :param _builtins.str planned_action: A filter to return only the resources that match the specified planned action.
        :param _builtins.str relation_type: The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
        :param Sequence[_builtins.str] sample_data_values: Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str sensitive_columnkey: The unique key that identifies the sensitive column represented by the discovery result.
        :param _builtins.str sensitive_type_id: The OCID of the sensitive type associated with the sensitive column.
        """
        pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)
        pulumi.set(__self__, "discovery_job_id", discovery_job_id)
        pulumi.set(__self__, "discovery_type", discovery_type)
        pulumi.set(__self__, "estimated_data_value_count", estimated_data_value_count)
        pulumi.set(__self__, "is_result_applied", is_result_applied)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "modified_attributes", modified_attributes)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "parent_column_keys", parent_column_keys)
        pulumi.set(__self__, "planned_action", planned_action)
        pulumi.set(__self__, "relation_type", relation_type)
        pulumi.set(__self__, "sample_data_values", sample_data_values)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_columnkey", sensitive_columnkey)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)

    @_builtins.property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        """
        return pulumi.get(self, "app_defined_child_column_keys")

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The name of the application. An application is an entity that is identified by a schema and stores sensitive information for that schema. Its value will be same as schemaName, if no value is passed.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        A filter to return only a specific column based on column name.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        """
        The data type of the sensitive column.
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        """
        return pulumi.get(self, "db_defined_child_column_keys")

    @_builtins.property
    @pulumi.getter(name="discoveryJobId")
    @_utilities.deprecated("""The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""")
    def discovery_job_id(self) -> _builtins.str:
        """
        The OCID of the discovery job.
        """
        return pulumi.get(self, "discovery_job_id")

    @_builtins.property
    @pulumi.getter(name="discoveryType")
    @_utilities.deprecated("""The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""")
    def discovery_type(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified discovery type.
        """
        return pulumi.get(self, "discovery_type")

    @_builtins.property
    @pulumi.getter(name="estimatedDataValueCount")
    def estimated_data_value_count(self) -> _builtins.str:
        """
        The estimated number of data values the column has in the associated database.
        """
        return pulumi.get(self, "estimated_data_value_count")

    @_builtins.property
    @pulumi.getter(name="isResultApplied")
    def is_result_applied(self) -> _builtins.bool:
        """
        A filter to return the discovery result resources based on the value of their isResultApplied attribute.
        """
        return pulumi.get(self, "is_result_applied")

    @_builtins.property
    @pulumi.getter
    @_utilities.deprecated("""The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""")
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the discovery result.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="modifiedAttributes")
    def modified_attributes(self) -> Sequence['outputs.GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttributeResult']:
        """
        The attributes of a sensitive column that have been modified in the target database. It's populated only in the case of MODIFIED discovery results and shows the new values of the modified attributes.
        """
        return pulumi.get(self, "modified_attributes")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the database object that contains the sensitive column.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="parentColumnKeys")
    def parent_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
        """
        return pulumi.get(self, "parent_column_keys")

    @_builtins.property
    @pulumi.getter(name="plannedAction")
    def planned_action(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified planned action.
        """
        return pulumi.get(self, "planned_action")

    @_builtins.property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> _builtins.str:
        """
        The type of referential relationship the sensitive column has with its parent. NONE indicates that the sensitive column does not have a parent. DB_DEFINED indicates that the relationship is defined in the database dictionary. APP_DEFINED indicates that the relationship is defined at the application level and not in the database dictionary.
        """
        return pulumi.get(self, "relation_type")

    @_builtins.property
    @pulumi.getter(name="sampleDataValues")
    def sample_data_values(self) -> Sequence[_builtins.str]:
        """
        Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
        """
        return pulumi.get(self, "sample_data_values")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveColumnkey")
    def sensitive_columnkey(self) -> _builtins.str:
        """
        The unique key that identifies the sensitive column represented by the discovery result.
        """
        return pulumi.get(self, "sensitive_columnkey")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        The OCID of the sensitive type associated with the sensitive column.
        """
        return pulumi.get(self, "sensitive_type_id")


@pulumi.output_type
class GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttributeResult(dict):
    def __init__(__self__, *,
                 app_defined_child_column_keys: Sequence[_builtins.str],
                 db_defined_child_column_keys: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] app_defined_child_column_keys: Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        :param Sequence[_builtins.str] db_defined_child_column_keys: Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        """
        pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)

    @_builtins.property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        """
        return pulumi.get(self, "app_defined_child_column_keys")

    @_builtins.property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        """
        return pulumi.get(self, "db_defined_child_column_keys")


@pulumi.output_type
class GetDiscoveryJobsResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLibraryMaskingFormatFormatEntryResult(dict):
    def __init__(__self__, *,
                 column_name: _builtins.str,
                 description: _builtins.str,
                 end_date: _builtins.str,
                 end_length: _builtins.int,
                 end_value: _builtins.float,
                 fixed_number: _builtins.float,
                 fixed_string: _builtins.str,
                 grouping_columns: Sequence[_builtins.str],
                 length: _builtins.int,
                 library_masking_format_id: _builtins.str,
                 pattern: _builtins.str,
                 post_processing_function: _builtins.str,
                 random_lists: Sequence[_builtins.str],
                 regular_expression: _builtins.str,
                 replace_with: _builtins.str,
                 schema_name: _builtins.str,
                 sql_expression: _builtins.str,
                 start_date: _builtins.str,
                 start_length: _builtins.int,
                 start_position: _builtins.int,
                 start_value: _builtins.float,
                 table_name: _builtins.str,
                 type: _builtins.str,
                 user_defined_function: _builtins.str):
        """
        :param _builtins.str column_name: The name of the substitution column.
        :param _builtins.str description: The description of the format entry.
        :param _builtins.str end_date: The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        :param _builtins.int end_length: The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        :param _builtins.float end_value: The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        :param _builtins.float fixed_number: The constant number to be used for masking.
        :param _builtins.str fixed_string: The constant string to be used for masking.
        :param Sequence[_builtins.str] grouping_columns: One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        :param _builtins.int length: The number of characters that should be there in the substring. It should be an integer and greater than zero.
        :param _builtins.str library_masking_format_id: The OCID of the library masking format.
        :param _builtins.str pattern: The pattern that should be used to mask data.
        :param _builtins.str post_processing_function: The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        :param Sequence[_builtins.str] random_lists: A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        :param _builtins.str regular_expression: The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        :param _builtins.str replace_with: The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        :param _builtins.str schema_name: The name of the schema that contains the substitution column.
        :param _builtins.str sql_expression: The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        :param _builtins.str start_date: The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        :param _builtins.int start_length: The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        :param _builtins.int start_position: The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        :param _builtins.float start_value: The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        :param _builtins.str table_name: The name of the table that contains the substitution column.
        :param _builtins.str type: The type of the format entry.
        :param _builtins.str user_defined_function: The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "end_length", end_length)
        pulumi.set(__self__, "end_value", end_value)
        pulumi.set(__self__, "fixed_number", fixed_number)
        pulumi.set(__self__, "fixed_string", fixed_string)
        pulumi.set(__self__, "grouping_columns", grouping_columns)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "post_processing_function", post_processing_function)
        pulumi.set(__self__, "random_lists", random_lists)
        pulumi.set(__self__, "regular_expression", regular_expression)
        pulumi.set(__self__, "replace_with", replace_with)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sql_expression", sql_expression)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "start_length", start_length)
        pulumi.set(__self__, "start_position", start_position)
        pulumi.set(__self__, "start_value", start_value)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_defined_function", user_defined_function)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        The name of the substitution column.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the format entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> _builtins.str:
        """
        The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="endLength")
    def end_length(self) -> _builtins.int:
        """
        The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        """
        return pulumi.get(self, "end_length")

    @_builtins.property
    @pulumi.getter(name="endValue")
    def end_value(self) -> _builtins.float:
        """
        The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        """
        return pulumi.get(self, "end_value")

    @_builtins.property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> _builtins.float:
        """
        The constant number to be used for masking.
        """
        return pulumi.get(self, "fixed_number")

    @_builtins.property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> _builtins.str:
        """
        The constant string to be used for masking.
        """
        return pulumi.get(self, "fixed_string")

    @_builtins.property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Sequence[_builtins.str]:
        """
        One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        """
        return pulumi.get(self, "grouping_columns")

    @_builtins.property
    @pulumi.getter
    def length(self) -> _builtins.int:
        """
        The number of characters that should be there in the substring. It should be an integer and greater than zero.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> _builtins.str:
        """
        The OCID of the library masking format.
        """
        return pulumi.get(self, "library_masking_format_id")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> _builtins.str:
        """
        The pattern that should be used to mask data.
        """
        return pulumi.get(self, "pattern")

    @_builtins.property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> _builtins.str:
        """
        The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "post_processing_function")

    @_builtins.property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Sequence[_builtins.str]:
        """
        A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        """
        return pulumi.get(self, "random_lists")

    @_builtins.property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> _builtins.str:
        """
        The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        """
        return pulumi.get(self, "regular_expression")

    @_builtins.property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> _builtins.str:
        """
        The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        """
        return pulumi.get(self, "replace_with")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        The name of the schema that contains the substitution column.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> _builtins.str:
        """
        The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        """
        return pulumi.get(self, "sql_expression")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> _builtins.str:
        """
        The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="startLength")
    def start_length(self) -> _builtins.int:
        """
        The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        """
        return pulumi.get(self, "start_length")

    @_builtins.property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> _builtins.int:
        """
        The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        """
        return pulumi.get(self, "start_position")

    @_builtins.property
    @pulumi.getter(name="startValue")
    def start_value(self) -> _builtins.float:
        """
        The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        """
        return pulumi.get(self, "start_value")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        The name of the table that contains the substitution column.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the format entry.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> _builtins.str:
        """
        The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class GetLibraryMaskingFormatsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLibraryMaskingFormatsLibraryMaskingFormatCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 format_entries: Sequence['outputs.GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult'],
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 sensitive_type_ids: Sequence[_builtins.str],
                 source: _builtins.str,
                 state: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the format entry.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Sequence['GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryArgs'] format_entries: An array of format entries. The combined output of all the format entries is used for masking.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the library masking format.
        :param Sequence[_builtins.str] sensitive_type_ids: An array of OCIDs of the sensitive types compatible with the library masking format.
        :param _builtins.str source: Specifies whether the library masking format is user-defined or predefined.
        :param _builtins.str state: A filter to return only the resources that match the specified lifecycle states.
        :param _builtins.str time_created: The date and time the library masking format was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        :param _builtins.str time_updated: The date and time the library masking format was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "format_entries", format_entries)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "sensitive_type_ids", sensitive_type_ids)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the format entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="formatEntries")
    def format_entries(self) -> Sequence['outputs.GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult']:
        """
        An array of format entries. The combined output of all the format entries is used for masking.
        """
        return pulumi.get(self, "format_entries")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the library masking format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeIds")
    def sensitive_type_ids(self) -> Sequence[_builtins.str]:
        """
        An array of OCIDs of the sensitive types compatible with the library masking format.
        """
        return pulumi.get(self, "sensitive_type_ids")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        Specifies whether the library masking format is user-defined or predefined.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified lifecycle states.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the library masking format was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the library masking format was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult(dict):
    def __init__(__self__, *,
                 column_name: _builtins.str,
                 description: _builtins.str,
                 end_date: _builtins.str,
                 end_length: _builtins.int,
                 end_value: _builtins.float,
                 fixed_number: _builtins.float,
                 fixed_string: _builtins.str,
                 grouping_columns: Sequence[_builtins.str],
                 length: _builtins.int,
                 library_masking_format_id: _builtins.str,
                 pattern: _builtins.str,
                 post_processing_function: _builtins.str,
                 random_lists: Sequence[_builtins.str],
                 regular_expression: _builtins.str,
                 replace_with: _builtins.str,
                 schema_name: _builtins.str,
                 sql_expression: _builtins.str,
                 start_date: _builtins.str,
                 start_length: _builtins.int,
                 start_position: _builtins.int,
                 start_value: _builtins.float,
                 table_name: _builtins.str,
                 type: _builtins.str,
                 user_defined_function: _builtins.str):
        """
        :param _builtins.str column_name: The name of the substitution column.
        :param _builtins.str description: The description of the format entry.
        :param _builtins.str end_date: The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        :param _builtins.int end_length: The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        :param _builtins.float end_value: The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        :param _builtins.float fixed_number: The constant number to be used for masking.
        :param _builtins.str fixed_string: The constant string to be used for masking.
        :param Sequence[_builtins.str] grouping_columns: One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        :param _builtins.int length: The number of characters that should be there in the substring. It should be an integer and greater than zero.
        :param _builtins.str library_masking_format_id: A filter to return only the resources that match the specified library masking format OCID.
        :param _builtins.str pattern: The pattern that should be used to mask data.
        :param _builtins.str post_processing_function: The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        :param Sequence[_builtins.str] random_lists: A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        :param _builtins.str regular_expression: The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        :param _builtins.str replace_with: The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        :param _builtins.str schema_name: The name of the schema that contains the substitution column.
        :param _builtins.str sql_expression: The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        :param _builtins.str start_date: The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        :param _builtins.int start_length: The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        :param _builtins.int start_position: The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        :param _builtins.float start_value: The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        :param _builtins.str table_name: The name of the table that contains the substitution column.
        :param _builtins.str type: The type of the format entry.
        :param _builtins.str user_defined_function: The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "end_length", end_length)
        pulumi.set(__self__, "end_value", end_value)
        pulumi.set(__self__, "fixed_number", fixed_number)
        pulumi.set(__self__, "fixed_string", fixed_string)
        pulumi.set(__self__, "grouping_columns", grouping_columns)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "post_processing_function", post_processing_function)
        pulumi.set(__self__, "random_lists", random_lists)
        pulumi.set(__self__, "regular_expression", regular_expression)
        pulumi.set(__self__, "replace_with", replace_with)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sql_expression", sql_expression)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "start_length", start_length)
        pulumi.set(__self__, "start_position", start_position)
        pulumi.set(__self__, "start_value", start_value)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_defined_function", user_defined_function)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        The name of the substitution column.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the format entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> _builtins.str:
        """
        The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="endLength")
    def end_length(self) -> _builtins.int:
        """
        The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        """
        return pulumi.get(self, "end_length")

    @_builtins.property
    @pulumi.getter(name="endValue")
    def end_value(self) -> _builtins.float:
        """
        The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        """
        return pulumi.get(self, "end_value")

    @_builtins.property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> _builtins.float:
        """
        The constant number to be used for masking.
        """
        return pulumi.get(self, "fixed_number")

    @_builtins.property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> _builtins.str:
        """
        The constant string to be used for masking.
        """
        return pulumi.get(self, "fixed_string")

    @_builtins.property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Sequence[_builtins.str]:
        """
        One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        """
        return pulumi.get(self, "grouping_columns")

    @_builtins.property
    @pulumi.getter
    def length(self) -> _builtins.int:
        """
        The number of characters that should be there in the substring. It should be an integer and greater than zero.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified library masking format OCID.
        """
        return pulumi.get(self, "library_masking_format_id")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> _builtins.str:
        """
        The pattern that should be used to mask data.
        """
        return pulumi.get(self, "pattern")

    @_builtins.property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> _builtins.str:
        """
        The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "post_processing_function")

    @_builtins.property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Sequence[_builtins.str]:
        """
        A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        """
        return pulumi.get(self, "random_lists")

    @_builtins.property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> _builtins.str:
        """
        The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        """
        return pulumi.get(self, "regular_expression")

    @_builtins.property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> _builtins.str:
        """
        The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        """
        return pulumi.get(self, "replace_with")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        The name of the schema that contains the substitution column.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> _builtins.str:
        """
        The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        """
        return pulumi.get(self, "sql_expression")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> _builtins.str:
        """
        The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="startLength")
    def start_length(self) -> _builtins.int:
        """
        The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        """
        return pulumi.get(self, "start_length")

    @_builtins.property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> _builtins.int:
        """
        The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        """
        return pulumi.get(self, "start_position")

    @_builtins.property
    @pulumi.getter(name="startValue")
    def start_value(self) -> _builtins.float:
        """
        The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        """
        return pulumi.get(self, "start_value")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        The name of the table that contains the substitution column.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the format entry.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> _builtins.str:
        """
        The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class GetListUserGrantsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetListUserGrantsGrantResult(dict):
    def __init__(__self__, *,
                 depth_level: _builtins.int,
                 grant_name: _builtins.str,
                 key: _builtins.str,
                 privilege_category: _builtins.str,
                 privilege_type: _builtins.str):
        """
        :param _builtins.int depth_level: A filter to return only items that match the specified user grant depth level.
        :param _builtins.str grant_name: A filter to return only items that match the specified user grant name.
        :param _builtins.str key: The unique key of a user grant.
        :param _builtins.str privilege_category: A filter to return only items that match the specified user privilege category.
        :param _builtins.str privilege_type: A filter to return only items that match the specified privilege grant type.
        """
        pulumi.set(__self__, "depth_level", depth_level)
        pulumi.set(__self__, "grant_name", grant_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "privilege_category", privilege_category)
        pulumi.set(__self__, "privilege_type", privilege_type)

    @_builtins.property
    @pulumi.getter(name="depthLevel")
    def depth_level(self) -> _builtins.int:
        """
        A filter to return only items that match the specified user grant depth level.
        """
        return pulumi.get(self, "depth_level")

    @_builtins.property
    @pulumi.getter(name="grantName")
    def grant_name(self) -> _builtins.str:
        """
        A filter to return only items that match the specified user grant name.
        """
        return pulumi.get(self, "grant_name")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key of a user grant.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="privilegeCategory")
    def privilege_category(self) -> _builtins.str:
        """
        A filter to return only items that match the specified user privilege category.
        """
        return pulumi.get(self, "privilege_category")

    @_builtins.property
    @pulumi.getter(name="privilegeType")
    def privilege_type(self) -> _builtins.str:
        """
        A filter to return only items that match the specified privilege grant type.
        """
        return pulumi.get(self, "privilege_type")


@pulumi.output_type
class GetMaskingAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: _builtins.str,
                 dimensions: Sequence['outputs.GetMaskingAnalyticItemDimensionResult'],
                 metric_name: _builtins.str):
        """
        :param _builtins.str count: The total count for the aggregation metric.
        :param Sequence['GetMaskingAnalyticItemDimensionArgs'] dimensions: The scope of analytics data.
        :param _builtins.str metric_name: The name of the aggregation metric.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        The total count for the aggregation metric.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetMaskingAnalyticItemDimensionResult']:
        """
        The scope of analytics data.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The name of the aggregation metric.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetMaskingAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 policy_id: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str policy_id: The OCID of the masking policy..
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The OCID of the masking policy..
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetMaskingAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingAnalyticsMaskingAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetMaskingAnalyticsMaskingAnalyticsCollectionItemArgs'] items: An array of masking analytics summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionItemResult']:
        """
        An array of masking analytics summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingAnalyticsMaskingAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 count: _builtins.str,
                 dimensions: Sequence['outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionItemDimensionResult'],
                 metric_name: _builtins.str):
        """
        :param _builtins.str count: The total count for the aggregation metric.
        :param Sequence['GetMaskingAnalyticsMaskingAnalyticsCollectionItemDimensionArgs'] dimensions: The scope of analytics data.
        :param _builtins.str metric_name: The name of the aggregation metric.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.str:
        """
        The total count for the aggregation metric.
        """
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionItemDimensionResult']:
        """
        The scope of analytics data.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The name of the aggregation metric.
        """
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetMaskingAnalyticsMaskingAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 policy_id: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str policy_id: The OCID of the masking policy.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The OCID of the masking policy.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetMaskingPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnMaskingFormatResult(dict):
    def __init__(__self__, *,
                 condition: _builtins.str,
                 description: _builtins.str,
                 format_entries: Sequence['outputs.GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntryResult']):
        """
        :param _builtins.str condition: A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  <a href="https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html">conditional masking</a>  so that you can mask the column data values differently using different masking  formats and the associated conditions.
        :param _builtins.str description: The description of the format entry.
        :param Sequence['GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntryArgs'] format_entries: An array of format entries. The combined output of all the format entries is  used for masking the column data values.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "format_entries", format_entries)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        """
        A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  <a href="https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html">conditional masking</a>  so that you can mask the column data values differently using different masking  formats and the associated conditions.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the format entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="formatEntries")
    def format_entries(self) -> Sequence['outputs.GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntryResult']:
        """
        An array of format entries. The combined output of all the format entries is  used for masking the column data values.
        """
        return pulumi.get(self, "format_entries")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntryResult(dict):
    def __init__(__self__, *,
                 column_name: _builtins.str,
                 description: _builtins.str,
                 end_date: _builtins.str,
                 end_length: _builtins.int,
                 end_value: _builtins.float,
                 fixed_number: _builtins.float,
                 fixed_string: _builtins.str,
                 grouping_columns: Sequence[_builtins.str],
                 length: _builtins.int,
                 library_masking_format_id: _builtins.str,
                 pattern: _builtins.str,
                 post_processing_function: _builtins.str,
                 random_lists: Sequence[_builtins.str],
                 regular_expression: _builtins.str,
                 replace_with: _builtins.str,
                 schema_name: _builtins.str,
                 sql_expression: _builtins.str,
                 start_date: _builtins.str,
                 start_length: _builtins.int,
                 start_position: _builtins.int,
                 start_value: _builtins.float,
                 table_name: _builtins.str,
                 type: _builtins.str,
                 user_defined_function: _builtins.str):
        """
        :param _builtins.str column_name: The name of the substitution column.
        :param _builtins.str description: The description of the format entry.
        :param _builtins.str end_date: The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        :param _builtins.int end_length: The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        :param _builtins.float end_value: The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        :param _builtins.float fixed_number: The constant number to be used for masking.
        :param _builtins.str fixed_string: The constant string to be used for masking.
        :param Sequence[_builtins.str] grouping_columns: One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        :param _builtins.int length: The number of characters that should be there in the substring. It should be an integer and greater than zero.
        :param _builtins.str library_masking_format_id: The OCID of the library masking format.
        :param _builtins.str pattern: The pattern that should be used to mask data.
        :param _builtins.str post_processing_function: The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        :param Sequence[_builtins.str] random_lists: A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        :param _builtins.str regular_expression: The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        :param _builtins.str replace_with: The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        :param _builtins.str schema_name: The name of the schema that contains the database column.
        :param _builtins.str sql_expression: The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        :param _builtins.str start_date: The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        :param _builtins.int start_length: The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        :param _builtins.int start_position: The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        :param _builtins.float start_value: The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        :param _builtins.str table_name: The name of the table that contains the substitution column.
        :param _builtins.str type: The type of the format entry.
        :param _builtins.str user_defined_function: The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "end_length", end_length)
        pulumi.set(__self__, "end_value", end_value)
        pulumi.set(__self__, "fixed_number", fixed_number)
        pulumi.set(__self__, "fixed_string", fixed_string)
        pulumi.set(__self__, "grouping_columns", grouping_columns)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "post_processing_function", post_processing_function)
        pulumi.set(__self__, "random_lists", random_lists)
        pulumi.set(__self__, "regular_expression", regular_expression)
        pulumi.set(__self__, "replace_with", replace_with)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sql_expression", sql_expression)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "start_length", start_length)
        pulumi.set(__self__, "start_position", start_position)
        pulumi.set(__self__, "start_value", start_value)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_defined_function", user_defined_function)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        The name of the substitution column.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the format entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> _builtins.str:
        """
        The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="endLength")
    def end_length(self) -> _builtins.int:
        """
        The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        """
        return pulumi.get(self, "end_length")

    @_builtins.property
    @pulumi.getter(name="endValue")
    def end_value(self) -> _builtins.float:
        """
        The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        """
        return pulumi.get(self, "end_value")

    @_builtins.property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> _builtins.float:
        """
        The constant number to be used for masking.
        """
        return pulumi.get(self, "fixed_number")

    @_builtins.property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> _builtins.str:
        """
        The constant string to be used for masking.
        """
        return pulumi.get(self, "fixed_string")

    @_builtins.property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Sequence[_builtins.str]:
        """
        One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        """
        return pulumi.get(self, "grouping_columns")

    @_builtins.property
    @pulumi.getter
    def length(self) -> _builtins.int:
        """
        The number of characters that should be there in the substring. It should be an integer and greater than zero.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> _builtins.str:
        """
        The OCID of the library masking format.
        """
        return pulumi.get(self, "library_masking_format_id")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> _builtins.str:
        """
        The pattern that should be used to mask data.
        """
        return pulumi.get(self, "pattern")

    @_builtins.property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> _builtins.str:
        """
        The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "post_processing_function")

    @_builtins.property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Sequence[_builtins.str]:
        """
        A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        """
        return pulumi.get(self, "random_lists")

    @_builtins.property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> _builtins.str:
        """
        The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        """
        return pulumi.get(self, "regular_expression")

    @_builtins.property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> _builtins.str:
        """
        The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        """
        return pulumi.get(self, "replace_with")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        The name of the schema that contains the database column.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> _builtins.str:
        """
        The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        """
        return pulumi.get(self, "sql_expression")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> _builtins.str:
        """
        The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="startLength")
    def start_length(self) -> _builtins.int:
        """
        The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        """
        return pulumi.get(self, "start_length")

    @_builtins.property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> _builtins.int:
        """
        The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        """
        return pulumi.get(self, "start_position")

    @_builtins.property
    @pulumi.getter(name="startValue")
    def start_value(self) -> _builtins.float:
        """
        The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        """
        return pulumi.get(self, "start_value")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        The name of the table that contains the substitution column.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the format entry.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> _builtins.str:
        """
        The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemResult(dict):
    def __init__(__self__, *,
                 child_columns: Sequence[_builtins.str],
                 column_name: _builtins.str,
                 data_type: _builtins.str,
                 is_masking_enabled: _builtins.bool,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 masking_column_group: _builtins.str,
                 masking_formats: Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatResult'],
                 masking_policy_id: _builtins.str,
                 object: _builtins.str,
                 object_type: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_type_id: _builtins.str,
                 state: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param Sequence[_builtins.str] child_columns: An array of child columns that are in referential relationship with the masking column.
        :param _builtins.str column_name: A filter to return only a specific column based on column name.
        :param _builtins.str data_type: A filter to return only resources that match the specified data types.
        :param _builtins.bool is_masking_enabled: A filter to return the masking column resources based on the value of their isMaskingEnabled attribute. A value of true returns only those columns for which masking is enabled. A value of false returns only those columns for which masking is disabled. Omitting this parameter returns all the masking columns in a masking policy.
        :param _builtins.str key: The unique key that identifies the masking column. It's numeric and unique within a masking policy.
        :param _builtins.str lifecycle_details: Details about the current state of the masking column.
        :param _builtins.str masking_column_group: A filter to return only the resources that match the specified masking column group.
        :param Sequence['GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatArgs'] masking_formats: An array of masking formats assigned to the masking column.
        :param _builtins.str masking_policy_id: The OCID of the masking policy.
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: A filter to return only items related to a specific object type.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str sensitive_type_id: A filter to return only items related to a specific sensitive type OCID.
        :param _builtins.str state: The current state of the masking column.
        :param _builtins.str time_created: The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "child_columns", child_columns)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "is_masking_enabled", is_masking_enabled)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "masking_column_group", masking_column_group)
        pulumi.set(__self__, "masking_formats", masking_formats)
        pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="childColumns")
    def child_columns(self) -> Sequence[_builtins.str]:
        """
        An array of child columns that are in referential relationship with the masking column.
        """
        return pulumi.get(self, "child_columns")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        A filter to return only a specific column based on column name.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified data types.
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter(name="isMaskingEnabled")
    def is_masking_enabled(self) -> _builtins.bool:
        """
        A filter to return the masking column resources based on the value of their isMaskingEnabled attribute. A value of true returns only those columns for which masking is enabled. A value of false returns only those columns for which masking is disabled. Omitting this parameter returns all the masking columns in a masking policy.
        """
        return pulumi.get(self, "is_masking_enabled")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the masking column. It's numeric and unique within a masking policy.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the masking column.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="maskingColumnGroup")
    def masking_column_group(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified masking column group.
        """
        return pulumi.get(self, "masking_column_group")

    @_builtins.property
    @pulumi.getter(name="maskingFormats")
    def masking_formats(self) -> Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatResult']:
        """
        An array of masking formats assigned to the masking column.
        """
        return pulumi.get(self, "masking_formats")

    @_builtins.property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> _builtins.str:
        """
        The OCID of the masking policy.
        """
        return pulumi.get(self, "masking_policy_id")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object type.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific sensitive type OCID.
        """
        return pulumi.get(self, "sensitive_type_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the masking column.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the masking column was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the masking column was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatResult(dict):
    def __init__(__self__, *,
                 condition: _builtins.str,
                 description: _builtins.str,
                 format_entries: Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntryResult']):
        """
        :param _builtins.str condition: A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  <a href="https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html">conditional masking</a>  so that you can mask the column data values differently using different masking  formats and the associated conditions.
        :param _builtins.str description: The description of the format entry.
        :param Sequence['GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntryArgs'] format_entries: An array of format entries. The combined output of all the format entries is  used for masking the column data values.
        """
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "format_entries", format_entries)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        """
        A condition that must be true for applying the masking format. It can be any valid  SQL construct that can be used in a SQL predicate. It enables you to do  <a href="https://docs.oracle.com/en/cloud/paas/data-safe/udscs/conditional-masking.html">conditional masking</a>  so that you can mask the column data values differently using different masking  formats and the associated conditions.
        """
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the format entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="formatEntries")
    def format_entries(self) -> Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntryResult']:
        """
        An array of format entries. The combined output of all the format entries is  used for masking the column data values.
        """
        return pulumi.get(self, "format_entries")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntryResult(dict):
    def __init__(__self__, *,
                 column_name: _builtins.str,
                 description: _builtins.str,
                 end_date: _builtins.str,
                 end_length: _builtins.int,
                 end_value: _builtins.float,
                 fixed_number: _builtins.float,
                 fixed_string: _builtins.str,
                 grouping_columns: Sequence[_builtins.str],
                 length: _builtins.int,
                 library_masking_format_id: _builtins.str,
                 pattern: _builtins.str,
                 post_processing_function: _builtins.str,
                 random_lists: Sequence[_builtins.str],
                 regular_expression: _builtins.str,
                 replace_with: _builtins.str,
                 schema_name: _builtins.str,
                 sql_expression: _builtins.str,
                 start_date: _builtins.str,
                 start_length: _builtins.int,
                 start_position: _builtins.int,
                 start_value: _builtins.float,
                 table_name: _builtins.str,
                 type: _builtins.str,
                 user_defined_function: _builtins.str):
        """
        :param _builtins.str column_name: A filter to return only a specific column based on column name.
        :param _builtins.str description: The description of the format entry.
        :param _builtins.str end_date: The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        :param _builtins.int end_length: The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        :param _builtins.float end_value: The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        :param _builtins.float fixed_number: The constant number to be used for masking.
        :param _builtins.str fixed_string: The constant string to be used for masking.
        :param Sequence[_builtins.str] grouping_columns: One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        :param _builtins.int length: The number of characters that should be there in the substring. It should be an integer and greater than zero.
        :param _builtins.str library_masking_format_id: The OCID of the library masking format.
        :param _builtins.str pattern: The pattern that should be used to mask data.
        :param _builtins.str post_processing_function: The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        :param Sequence[_builtins.str] random_lists: A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        :param _builtins.str regular_expression: The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        :param _builtins.str replace_with: The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str sql_expression: The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        :param _builtins.str start_date: The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        :param _builtins.int start_length: The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        :param _builtins.int start_position: The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        :param _builtins.float start_value: The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        :param _builtins.str table_name: The name of the table that contains the substitution column.
        :param _builtins.str type: The type of the format entry.
        :param _builtins.str user_defined_function: The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "end_length", end_length)
        pulumi.set(__self__, "end_value", end_value)
        pulumi.set(__self__, "fixed_number", fixed_number)
        pulumi.set(__self__, "fixed_string", fixed_string)
        pulumi.set(__self__, "grouping_columns", grouping_columns)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "post_processing_function", post_processing_function)
        pulumi.set(__self__, "random_lists", random_lists)
        pulumi.set(__self__, "regular_expression", regular_expression)
        pulumi.set(__self__, "replace_with", replace_with)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sql_expression", sql_expression)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "start_length", start_length)
        pulumi.set(__self__, "start_position", start_position)
        pulumi.set(__self__, "start_value", start_value)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_defined_function", user_defined_function)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        A filter to return only a specific column based on column name.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the format entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="endDate")
    def end_date(self) -> _builtins.str:
        """
        The upper bound of the range within which all the original column values fall. The end date must be greater than or equal to the start date.
        """
        return pulumi.get(self, "end_date")

    @_builtins.property
    @pulumi.getter(name="endLength")
    def end_length(self) -> _builtins.int:
        """
        The maximum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be greater than or equal to  the start length.
        """
        return pulumi.get(self, "end_length")

    @_builtins.property
    @pulumi.getter(name="endValue")
    def end_value(self) -> _builtins.float:
        """
        The upper bound of the range within which random decimal numbers should be generated. It must be greater than or equal to the start value. It supports  input of double type.
        """
        return pulumi.get(self, "end_value")

    @_builtins.property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> _builtins.float:
        """
        The constant number to be used for masking.
        """
        return pulumi.get(self, "fixed_number")

    @_builtins.property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> _builtins.str:
        """
        The constant string to be used for masking.
        """
        return pulumi.get(self, "fixed_string")

    @_builtins.property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Sequence[_builtins.str]:
        """
        One or more reference columns to be used to group column values so that they can be shuffled within their own group. The grouping columns and  the column to be masked must belong to the same table.
        """
        return pulumi.get(self, "grouping_columns")

    @_builtins.property
    @pulumi.getter
    def length(self) -> _builtins.int:
        """
        The number of characters that should be there in the substring. It should be an integer and greater than zero.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> _builtins.str:
        """
        The OCID of the library masking format.
        """
        return pulumi.get(self, "library_masking_format_id")

    @_builtins.property
    @pulumi.getter
    def pattern(self) -> _builtins.str:
        """
        The pattern that should be used to mask data.
        """
        return pulumi.get(self, "pattern")

    @_builtins.property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> _builtins.str:
        """
        The post processing function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format. It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "post_processing_function")

    @_builtins.property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Sequence[_builtins.str]:
        """
        A comma-separated list of values to be used to replace column values. The list can be of strings, numbers, or dates. The data type of each value in the list must be compatible with the data type of the column. The number of entries in the list cannot be more than 999.
        """
        return pulumi.get(self, "random_lists")

    @_builtins.property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> _builtins.str:
        """
        The regular expression to be used for masking. For data with characters in the ASCII character set, providing a regular expression is optional. However, it  is required if the data contains multi-byte characters. If not provided, an  error is returned when a multi-byte character is found.
        """
        return pulumi.get(self, "regular_expression")

    @_builtins.property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> _builtins.str:
        """
        The value that should be used to replace the data matching the regular  expression. It can be a fixed string, fixed number or null value.
        """
        return pulumi.get(self, "replace_with")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> _builtins.str:
        """
        The SQL expression to be used to generate the masked values. It can  consist of one or more values, operators, and SQL functions that  evaluate to a value. It can also contain substitution columns from  the same table. Specify the substitution columns within percent (%)  symbols.
        """
        return pulumi.get(self, "sql_expression")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> _builtins.str:
        """
        The lower bound of the range within which all the original column values fall. The start date must be less than or equal to the end date.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter(name="startLength")
    def start_length(self) -> _builtins.int:
        """
        The minimum number of characters the generated strings should have. It can  be any integer greater than zero, but it must be less than or equal to the  end length.
        """
        return pulumi.get(self, "start_length")

    @_builtins.property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> _builtins.int:
        """
        The starting position in the original string from where the substring should be extracted. It can be either a positive or a negative integer. If It's negative, the counting starts from the end of the string.
        """
        return pulumi.get(self, "start_position")

    @_builtins.property
    @pulumi.getter(name="startValue")
    def start_value(self) -> _builtins.float:
        """
        The lower bound of the range within which random decimal numbers should  be generated. It must be less than or equal to the end value. It supports  input of double type.
        """
        return pulumi.get(self, "start_value")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        The name of the table that contains the substitution column.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the format entry.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> _builtins.str:
        """
        The user-defined function in SCHEMA_NAME.PACKAGE_NAME.FUNCTION_NAME format.  It can be a standalone or packaged function, so PACKAGE_NAME is optional.
        """
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingPoliciesMaskingPolicyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingPoliciesMaskingPolicyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 add_masking_columns_from_sdm_trigger: _builtins.int,
                 column_sources: Sequence['outputs.GetMaskingPoliciesMaskingPolicyCollectionItemColumnSourceResult'],
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 generate_health_report_trigger: _builtins.int,
                 id: _builtins.str,
                 is_drop_temp_tables_enabled: _builtins.bool,
                 is_redo_logging_enabled: _builtins.bool,
                 is_refresh_stats_enabled: _builtins.bool,
                 parallel_degree: _builtins.str,
                 post_masking_script: _builtins.str,
                 pre_masking_script: _builtins.str,
                 recompile: _builtins.str,
                 state: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param Sequence['GetMaskingPoliciesMaskingPolicyCollectionItemColumnSourceArgs'] column_sources: The source of masking columns.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the masking policy.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the masking policy.
        :param _builtins.bool is_drop_temp_tables_enabled: Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
        :param _builtins.bool is_redo_logging_enabled: Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
        :param _builtins.bool is_refresh_stats_enabled: Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
        :param _builtins.str parallel_degree: Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
        :param _builtins.str post_masking_script: A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
        :param _builtins.str pre_masking_script: A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
        :param _builtins.str recompile: Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
        :param _builtins.str state: A filter to return only the resources that match the specified lifecycle states.
        :param _builtins.str time_created: The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        """
        pulumi.set(__self__, "add_masking_columns_from_sdm_trigger", add_masking_columns_from_sdm_trigger)
        pulumi.set(__self__, "column_sources", column_sources)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "generate_health_report_trigger", generate_health_report_trigger)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_drop_temp_tables_enabled", is_drop_temp_tables_enabled)
        pulumi.set(__self__, "is_redo_logging_enabled", is_redo_logging_enabled)
        pulumi.set(__self__, "is_refresh_stats_enabled", is_refresh_stats_enabled)
        pulumi.set(__self__, "parallel_degree", parallel_degree)
        pulumi.set(__self__, "post_masking_script", post_masking_script)
        pulumi.set(__self__, "pre_masking_script", pre_masking_script)
        pulumi.set(__self__, "recompile", recompile)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="addMaskingColumnsFromSdmTrigger")
    def add_masking_columns_from_sdm_trigger(self) -> _builtins.int:
        return pulumi.get(self, "add_masking_columns_from_sdm_trigger")

    @_builtins.property
    @pulumi.getter(name="columnSources")
    def column_sources(self) -> Sequence['outputs.GetMaskingPoliciesMaskingPolicyCollectionItemColumnSourceResult']:
        """
        The source of masking columns.
        """
        return pulumi.get(self, "column_sources")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the masking policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter(name="generateHealthReportTrigger")
    def generate_health_report_trigger(self) -> _builtins.int:
        return pulumi.get(self, "generate_health_report_trigger")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the masking policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDropTempTablesEnabled")
    def is_drop_temp_tables_enabled(self) -> _builtins.bool:
        """
        Indicates if the temporary tables created during a masking operation should be dropped after masking. It's enabled by default. Set this attribute to false to preserve the temporary tables. Masking creates temporary tables that map the original sensitive  data values to mask values. By default, these temporary tables are dropped after masking. But, in some cases, you may want  to preserve this information to track how masking changed your data. Note that doing so compromises security. These tables  must be dropped before the database is available for unprivileged users.
        """
        return pulumi.get(self, "is_drop_temp_tables_enabled")

    @_builtins.property
    @pulumi.getter(name="isRedoLoggingEnabled")
    def is_redo_logging_enabled(self) -> _builtins.bool:
        """
        Indicates if redo logging is enabled during a masking operation. It's disabled by default. Set this attribute to true to enable redo logging. By default, masking disables redo logging and flashback logging to purge any original unmasked  data from logs. However, in certain circumstances when you only want to test masking, rollback changes, and retry masking, you could enable logging and use a flashback database to retrieve the original unmasked data after it has been masked.
        """
        return pulumi.get(self, "is_redo_logging_enabled")

    @_builtins.property
    @pulumi.getter(name="isRefreshStatsEnabled")
    def is_refresh_stats_enabled(self) -> _builtins.bool:
        """
        Indicates if statistics gathering is enabled. It's enabled by default. Set this attribute to false to disable statistics gathering. The masking process gathers statistics on masked database tables after masking completes.
        """
        return pulumi.get(self, "is_refresh_stats_enabled")

    @_builtins.property
    @pulumi.getter(name="parallelDegree")
    def parallel_degree(self) -> _builtins.str:
        """
        Specifies options to enable parallel execution when running data masking. Allowed values are 'NONE' (no parallelism), 'DEFAULT' (the Oracle Database computes the optimum degree of parallelism) or an integer value to be used as the degree of parallelism. Parallel execution helps effectively use multiple CPUs and improve masking performance. Refer to the Oracle Database parallel execution framework when choosing an explicit degree of parallelism.
        """
        return pulumi.get(self, "parallel_degree")

    @_builtins.property
    @pulumi.getter(name="postMaskingScript")
    def post_masking_script(self) -> _builtins.str:
        """
        A post-masking script, which can contain SQL and PL/SQL statements. It's executed after the core masking script generated using the masking policy. It's usually used to perform additional transformation or cleanup work after masking.
        """
        return pulumi.get(self, "post_masking_script")

    @_builtins.property
    @pulumi.getter(name="preMaskingScript")
    def pre_masking_script(self) -> _builtins.str:
        """
        A pre-masking script, which can contain SQL and PL/SQL statements. It's executed before  the core masking script generated using the masking policy. It's usually used to perform any preparation or prerequisite work before masking data.
        """
        return pulumi.get(self, "pre_masking_script")

    @_builtins.property
    @pulumi.getter
    def recompile(self) -> _builtins.str:
        """
        Specifies how to recompile invalid objects post data masking. Allowed values are 'SERIAL' (recompile in serial),  'PARALLEL' (recompile in parallel), 'NONE' (do not recompile). If it's set to PARALLEL, the value of parallelDegree attribute is used. Use the built-in UTL_RECOMP package to recompile any remaining invalid objects after masking completes.
        """
        return pulumi.get(self, "recompile")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified lifecycle states.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the masking policy was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the masking policy was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyCollectionItemColumnSourceResult(dict):
    def __init__(__self__, *,
                 column_source: _builtins.str,
                 sensitive_data_model_id: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str column_source: The source of masking columns.
        :param _builtins.str sensitive_data_model_id: A filter to return only the resources that match the specified sensitive data model OCID.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "column_source", column_source)
        pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter(name="columnSource")
    def column_source(self) -> _builtins.str:
        """
        The source of masking columns.
        """
        return pulumi.get(self, "column_source")

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified sensitive data model OCID.
        """
        return pulumi.get(self, "sensitive_data_model_id")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetMaskingPolicyColumnSourceResult(dict):
    def __init__(__self__, *,
                 column_source: _builtins.str,
                 sensitive_data_model_id: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str column_source: The source of masking columns.
        :param _builtins.str sensitive_data_model_id: The OCID of the sensitive data model that's used as the source of masking columns.
        :param _builtins.str target_id: The OCID of the target database that's used as the source of masking columns.
        """
        pulumi.set(__self__, "column_source", column_source)
        pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter(name="columnSource")
    def column_source(self) -> _builtins.str:
        """
        The source of masking columns.
        """
        return pulumi.get(self, "column_source")

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> _builtins.str:
        """
        The OCID of the sensitive data model that's used as the source of masking columns.
        """
        return pulumi.get(self, "sensitive_data_model_id")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database that's used as the source of masking columns.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetMaskingPolicyHealthReportLogsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItemResult']):
        """
        :param Sequence['GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItemArgs'] items: An array of masking policy health report objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItemResult']:
        """
        An array of masking policy health report objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPolicyHealthReportLogsMaskingPolicyHealthReportLogCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 health_check_type: _builtins.str,
                 message: _builtins.str,
                 message_type: _builtins.str,
                 remediation: _builtins.str,
                 timestamp: _builtins.str):
        """
        :param _builtins.str description: A human-readable description for the log entry.
        :param _builtins.str health_check_type: An enum type entry for each health check in the masking policy. Each enum describes a type of health check. INVALID_OBJECT_CHECK checks if there exist any invalid objects in the masking tables. PRIVILEGE_CHECK checks if the masking user has sufficient privilege to run masking. TABLESPACE_CHECK checks if the user has sufficient default and TEMP tablespace. DATABASE_OR_SYSTEM_TRIGGERS_CHECK checks if there exist any database/system triggers available. UNDO_TABLESPACE_CHECK checks if the AUTOEXTEND feature is enabled for the undo tablespace. If it's not enabled, it further checks if the undo tablespace has any space remaining STATE_STATS_CHECK checks if all the statistics of the masking table is upto date or not. OLS_POLICY_CHECK , VPD_POLICY_CHECK and REDACTION_POLICY_CHECK checks if the masking tables has Oracle Label Security (OLS) or Virtual Private Database (VPD) or Redaction policies enabled. DV_ENABLE_CHECK checks if database has Database Vault(DV) enabled DE_COL_SIZE_CHECK checks if any masking column with DETERMINISTIC ENCRYPTION as masking format has average column size greater than 27 or not. ACTIVE_MASK_JOB_CHECK checks if there is any active masking job running on the target database. DETERMINISTIC_ENCRYPTION_FORMAT_CHECK checks if any masking column has deterministic encryption masking format. COLUMN_EXIST_CHECK checks if the masking columns are available in the target database.
        :param _builtins.str message: A human-readable log entry.
        :param _builtins.str message_type: A filter to return only the resources that match the specified log message type.
        :param _builtins.str remediation: A human-readable log entry to remedy any error or warnings in the masking policy.
        :param _builtins.str timestamp: The date and time the log entry was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "health_check_type", health_check_type)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "message_type", message_type)
        pulumi.set(__self__, "remediation", remediation)
        pulumi.set(__self__, "timestamp", timestamp)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A human-readable description for the log entry.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> _builtins.str:
        """
        An enum type entry for each health check in the masking policy. Each enum describes a type of health check. INVALID_OBJECT_CHECK checks if there exist any invalid objects in the masking tables. PRIVILEGE_CHECK checks if the masking user has sufficient privilege to run masking. TABLESPACE_CHECK checks if the user has sufficient default and TEMP tablespace. DATABASE_OR_SYSTEM_TRIGGERS_CHECK checks if there exist any database/system triggers available. UNDO_TABLESPACE_CHECK checks if the AUTOEXTEND feature is enabled for the undo tablespace. If it's not enabled, it further checks if the undo tablespace has any space remaining STATE_STATS_CHECK checks if all the statistics of the masking table is upto date or not. OLS_POLICY_CHECK , VPD_POLICY_CHECK and REDACTION_POLICY_CHECK checks if the masking tables has Oracle Label Security (OLS) or Virtual Private Database (VPD) or Redaction policies enabled. DV_ENABLE_CHECK checks if database has Database Vault(DV) enabled DE_COL_SIZE_CHECK checks if any masking column with DETERMINISTIC ENCRYPTION as masking format has average column size greater than 27 or not. ACTIVE_MASK_JOB_CHECK checks if there is any active masking job running on the target database. DETERMINISTIC_ENCRYPTION_FORMAT_CHECK checks if any masking column has deterministic encryption masking format. COLUMN_EXIST_CHECK checks if the masking columns are available in the target database.
        """
        return pulumi.get(self, "health_check_type")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        A human-readable log entry.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="messageType")
    def message_type(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified log message type.
        """
        return pulumi.get(self, "message_type")

    @_builtins.property
    @pulumi.getter
    def remediation(self) -> _builtins.str:
        """
        A human-readable log entry to remedy any error or warnings in the masking policy.
        """
        return pulumi.get(self, "remediation")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.str:
        """
        The date and time the log entry was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetMaskingPolicyHealthReportsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPolicyHealthReportsMaskingPolicyHealthReportCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 error_count: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 masking_policy_id: _builtins.str,
                 state: _builtins.str,
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str,
                 warning_count: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the masking health report.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param _builtins.str error_count: The count of errors in the masking health report.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the health report.
        :param _builtins.str masking_policy_id: A filter to return only the resources that match the specified masking policy OCID.
        :param _builtins.str state: A filter to return only the resources that match the specified lifecycle states.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The date and time the report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the report was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        :param _builtins.str warning_count: The count of warnings in the masking health report.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "error_count", error_count)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "warning_count", warning_count)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the masking health report.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="errorCount")
    def error_count(self) -> _builtins.str:
        """
        The count of errors in the masking health report.
        """
        return pulumi.get(self, "error_count")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the health report.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified masking policy OCID.
        """
        return pulumi.get(self, "masking_policy_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified lifecycle states.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the report was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="warningCount")
    def warning_count(self) -> _builtins.str:
        """
        The count of warnings in the masking health report.
        """
        return pulumi.get(self, "warning_count")


@pulumi.output_type
class GetMaskingPolicyMaskingObjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPolicyMaskingObjectsMaskingObjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingPolicyMaskingObjectsMaskingObjectCollectionItemResult']):
        """
        :param Sequence['GetMaskingPolicyMaskingObjectsMaskingObjectCollectionItemArgs'] items: An array of masking object summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingPolicyMaskingObjectsMaskingObjectCollectionItemResult']:
        """
        An array of masking object summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPolicyMaskingObjectsMaskingObjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 object: _builtins.str,
                 object_type: _builtins.str,
                 schema_name: _builtins.str):
        """
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: A filter to return only items related to a specific object type.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        """
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object type.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetMaskingPolicyMaskingSchemasFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionItemResult']):
        """
        :param Sequence['GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionItemArgs'] items: An array of masking schema summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionItemResult']:
        """
        An array of masking schema summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionItemResult(dict):
    def __init__(__self__, *,
                 schema_name: _builtins.str):
        """
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        """
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetMaskingPolicyReferentialRelationsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemResult']):
        """
        :param Sequence['GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemArgs'] items: An array of referential relation summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemResult']:
        """
        An array of referential relation summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemResult(dict):
    def __init__(__self__, *,
                 children: Sequence['outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChildResult'],
                 masking_formats: Sequence[_builtins.str],
                 masking_policy_id: _builtins.str,
                 parents: Sequence['outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParentResult'],
                 relation_type: _builtins.str):
        """
        :param Sequence['GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChildArgs'] children: maskingPolicyColumnsInfo object has details of column group with schema details.
        :param Sequence[_builtins.str] masking_formats: The masking format associated with the parent column.
        :param _builtins.str masking_policy_id: The OCID of the masking policy.
        :param Sequence['GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParentArgs'] parents: maskingPolicyColumnsInfo object has details of column group with schema details.
        :param _builtins.str relation_type: A filter to return columns based on their relationship with their parent columns. If set to NONE, it returns the columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
        """
        pulumi.set(__self__, "children", children)
        pulumi.set(__self__, "masking_formats", masking_formats)
        pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        pulumi.set(__self__, "parents", parents)
        pulumi.set(__self__, "relation_type", relation_type)

    @_builtins.property
    @pulumi.getter
    def children(self) -> Sequence['outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChildResult']:
        """
        maskingPolicyColumnsInfo object has details of column group with schema details.
        """
        return pulumi.get(self, "children")

    @_builtins.property
    @pulumi.getter(name="maskingFormats")
    def masking_formats(self) -> Sequence[_builtins.str]:
        """
        The masking format associated with the parent column.
        """
        return pulumi.get(self, "masking_formats")

    @_builtins.property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> _builtins.str:
        """
        The OCID of the masking policy.
        """
        return pulumi.get(self, "masking_policy_id")

    @_builtins.property
    @pulumi.getter
    def parents(self) -> Sequence['outputs.GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParentResult']:
        """
        maskingPolicyColumnsInfo object has details of column group with schema details.
        """
        return pulumi.get(self, "parents")

    @_builtins.property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> _builtins.str:
        """
        A filter to return columns based on their relationship with their parent columns. If set to NONE, it returns the columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
        """
        return pulumi.get(self, "relation_type")


@pulumi.output_type
class GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemChildResult(dict):
    def __init__(__self__, *,
                 object: _builtins.str,
                 object_type: _builtins.str,
                 referential_column_groups: Sequence[_builtins.str],
                 schema_name: _builtins.str):
        """
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: The type of the database object that contains the masking policy.
        :param Sequence[_builtins.str] referential_column_groups: Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        """
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "referential_column_groups", referential_column_groups)
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the database object that contains the masking policy.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="referentialColumnGroups")
    def referential_column_groups(self) -> Sequence[_builtins.str]:
        """
        Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        """
        return pulumi.get(self, "referential_column_groups")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetMaskingPolicyReferentialRelationsMaskingPolicyReferentialRelationCollectionItemParentResult(dict):
    def __init__(__self__, *,
                 object: _builtins.str,
                 object_type: _builtins.str,
                 referential_column_groups: Sequence[_builtins.str],
                 schema_name: _builtins.str):
        """
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: The type of the database object that contains the masking policy.
        :param Sequence[_builtins.str] referential_column_groups: Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        """
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "referential_column_groups", referential_column_groups)
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the database object that contains the masking policy.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="referentialColumnGroups")
    def referential_column_groups(self) -> Sequence[_builtins.str]:
        """
        Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        """
        return pulumi.get(self, "referential_column_groups")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetMaskingReportMaskedColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingReportMaskedColumnsMaskedColumnCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingReportMaskedColumnsMaskedColumnCollectionItemResult']):
        """
        :param Sequence['GetMaskingReportMaskedColumnsMaskedColumnCollectionItemArgs'] items: An array of masking column summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingReportMaskedColumnsMaskedColumnCollectionItemResult']:
        """
        An array of masking column summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingReportMaskedColumnsMaskedColumnCollectionItemResult(dict):
    def __init__(__self__, *,
                 column_name: _builtins.str,
                 key: _builtins.str,
                 masking_column_group: _builtins.str,
                 masking_format_used: _builtins.str,
                 object: _builtins.str,
                 object_type: _builtins.str,
                 parent_column_key: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_type_id: _builtins.str,
                 total_masked_values: _builtins.str):
        """
        :param _builtins.str column_name: A filter to return only a specific column based on column name.
        :param _builtins.str key: The unique key that identifies the masked column. It's numeric and unique within a masking policy.
        :param _builtins.str masking_column_group: A filter to return only the resources that match the specified masking column group.
        :param _builtins.str masking_format_used: The masking format used for masking the column.
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: A filter to return only items related to a specific object type.
        :param _builtins.str parent_column_key: The unique key that identifies the parent column of the masked column.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str sensitive_type_id: A filter to return only items related to a specific sensitive type OCID.
        :param _builtins.str total_masked_values: The total number of values masked in the column.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "masking_column_group", masking_column_group)
        pulumi.set(__self__, "masking_format_used", masking_format_used)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "parent_column_key", parent_column_key)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        pulumi.set(__self__, "total_masked_values", total_masked_values)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        A filter to return only a specific column based on column name.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the masked column. It's numeric and unique within a masking policy.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="maskingColumnGroup")
    def masking_column_group(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified masking column group.
        """
        return pulumi.get(self, "masking_column_group")

    @_builtins.property
    @pulumi.getter(name="maskingFormatUsed")
    def masking_format_used(self) -> _builtins.str:
        """
        The masking format used for masking the column.
        """
        return pulumi.get(self, "masking_format_used")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object type.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="parentColumnKey")
    def parent_column_key(self) -> _builtins.str:
        """
        The unique key that identifies the parent column of the masked column.
        """
        return pulumi.get(self, "parent_column_key")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific sensitive type OCID.
        """
        return pulumi.get(self, "sensitive_type_id")

    @_builtins.property
    @pulumi.getter(name="totalMaskedValues")
    def total_masked_values(self) -> _builtins.str:
        """
        The total number of values masked in the column.
        """
        return pulumi.get(self, "total_masked_values")


@pulumi.output_type
class GetMaskingReportMaskingErrorsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingReportMaskingErrorsMaskingErrorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingReportMaskingErrorsMaskingErrorCollectionItemResult']):
        """
        :param Sequence['GetMaskingReportMaskingErrorsMaskingErrorCollectionItemArgs'] items: An array of masking error objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingReportMaskingErrorsMaskingErrorCollectionItemResult']:
        """
        An array of masking error objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingReportMaskingErrorsMaskingErrorCollectionItemResult(dict):
    def __init__(__self__, *,
                 error: _builtins.str,
                 failed_statement: _builtins.str,
                 step_name: _builtins.str,
                 time_created: _builtins.str):
        """
        :param _builtins.str error: The text of the masking error.
        :param _builtins.str failed_statement: The statement resulting into the error.
        :param _builtins.str step_name: A filter to return only masking errors that match the specified step name.
        :param _builtins.str time_created: The date and time the error entry was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "error", error)
        pulumi.set(__self__, "failed_statement", failed_statement)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "time_created", time_created)

    @_builtins.property
    @pulumi.getter
    def error(self) -> _builtins.str:
        """
        The text of the masking error.
        """
        return pulumi.get(self, "error")

    @_builtins.property
    @pulumi.getter(name="failedStatement")
    def failed_statement(self) -> _builtins.str:
        """
        The statement resulting into the error.
        """
        return pulumi.get(self, "failed_statement")

    @_builtins.property
    @pulumi.getter(name="stepName")
    def step_name(self) -> _builtins.str:
        """
        A filter to return only masking errors that match the specified step name.
        """
        return pulumi.get(self, "step_name")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the error entry was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetMaskingReportsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingReportsMaskedColumnItemResult(dict):
    def __init__(__self__, *,
                 column_name: _builtins.str,
                 key: _builtins.str,
                 masking_column_group: _builtins.str,
                 masking_format_used: _builtins.str,
                 object: _builtins.str,
                 object_type: _builtins.str,
                 parent_column_key: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_type_id: _builtins.str,
                 total_masked_values: _builtins.str):
        """
        :param _builtins.str column_name: A filter to return only a specific column based on column name.
        :param _builtins.str key: The unique key that identifies the masked column. It's numeric and unique within a masking policy.
        :param _builtins.str masking_column_group: A filter to return only the resources that match the specified masking column group.
        :param _builtins.str masking_format_used: The masking format used for masking the column.
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: A filter to return only items related to a specific object type.
        :param _builtins.str parent_column_key: The unique key that identifies the parent column of the masked column.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str sensitive_type_id: A filter to return only items related to a specific sensitive type OCID.
        :param _builtins.str total_masked_values: The total number of values masked in the column.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "masking_column_group", masking_column_group)
        pulumi.set(__self__, "masking_format_used", masking_format_used)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "parent_column_key", parent_column_key)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        pulumi.set(__self__, "total_masked_values", total_masked_values)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        A filter to return only a specific column based on column name.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the masked column. It's numeric and unique within a masking policy.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="maskingColumnGroup")
    def masking_column_group(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified masking column group.
        """
        return pulumi.get(self, "masking_column_group")

    @_builtins.property
    @pulumi.getter(name="maskingFormatUsed")
    def masking_format_used(self) -> _builtins.str:
        """
        The masking format used for masking the column.
        """
        return pulumi.get(self, "masking_format_used")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object type.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="parentColumnKey")
    def parent_column_key(self) -> _builtins.str:
        """
        The unique key that identifies the parent column of the masked column.
        """
        return pulumi.get(self, "parent_column_key")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific sensitive type OCID.
        """
        return pulumi.get(self, "sensitive_type_id")

    @_builtins.property
    @pulumi.getter(name="totalMaskedValues")
    def total_masked_values(self) -> _builtins.str:
        """
        The total number of values masked in the column.
        """
        return pulumi.get(self, "total_masked_values")


@pulumi.output_type
class GetMaskingReportsMaskingReportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMaskingReportsMaskingReportCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMaskingReportsMaskingReportCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingReportsMaskingReportCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 id: _builtins.str,
                 is_drop_temp_tables_enabled: _builtins.bool,
                 is_redo_logging_enabled: _builtins.bool,
                 is_refresh_stats_enabled: _builtins.bool,
                 masking_policy_id: _builtins.str,
                 masking_status: _builtins.str,
                 masking_work_request_id: _builtins.str,
                 parallel_degree: _builtins.str,
                 recompile: _builtins.str,
                 state: _builtins.str,
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_masking_finished: _builtins.str,
                 time_masking_started: _builtins.str,
                 total_masked_columns: _builtins.str,
                 total_masked_objects: _builtins.str,
                 total_masked_schemas: _builtins.str,
                 total_masked_sensitive_types: _builtins.str,
                 total_masked_values: _builtins.str,
                 total_post_masking_script_errors: _builtins.str,
                 total_pre_masking_script_errors: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str id: The OCID of the masking report.
        :param _builtins.bool is_drop_temp_tables_enabled: Indicates if the temporary tables created during the masking operation were dropped after masking.
        :param _builtins.bool is_redo_logging_enabled: Indicates if redo logging was enabled during the masking operation.
        :param _builtins.bool is_refresh_stats_enabled: Indicates if statistics gathering was enabled during the masking operation.
        :param _builtins.str masking_policy_id: A filter to return only the resources that match the specified masking policy OCID.
        :param _builtins.str masking_status: The status of the masking job.
        :param _builtins.str masking_work_request_id: The OCID of the masking work request that resulted in this masking report.
        :param _builtins.str parallel_degree: Indicates if parallel execution was enabled during the masking operation.
        :param _builtins.str recompile: Indicates how invalid objects were recompiled post the masking operation.
        :param _builtins.str state: The current state of the masking report.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_masking_finished: The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        :param _builtins.str time_masking_started: The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        :param _builtins.str total_masked_columns: The total number of masked columns.
        :param _builtins.str total_masked_objects: The total number of unique objects (tables and editioning views) that contain the masked columns.
        :param _builtins.str total_masked_schemas: The total number of unique schemas that contain the masked columns.
        :param _builtins.str total_masked_sensitive_types: The total number of unique sensitive types associated with the masked columns.
        :param _builtins.str total_masked_values: The total number of masked values.
        :param _builtins.str total_post_masking_script_errors: The total number of errors in post-masking script.
        :param _builtins.str total_pre_masking_script_errors: The total number of errors in pre-masking script.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_drop_temp_tables_enabled", is_drop_temp_tables_enabled)
        pulumi.set(__self__, "is_redo_logging_enabled", is_redo_logging_enabled)
        pulumi.set(__self__, "is_refresh_stats_enabled", is_refresh_stats_enabled)
        pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        pulumi.set(__self__, "masking_status", masking_status)
        pulumi.set(__self__, "masking_work_request_id", masking_work_request_id)
        pulumi.set(__self__, "parallel_degree", parallel_degree)
        pulumi.set(__self__, "recompile", recompile)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_masking_finished", time_masking_finished)
        pulumi.set(__self__, "time_masking_started", time_masking_started)
        pulumi.set(__self__, "total_masked_columns", total_masked_columns)
        pulumi.set(__self__, "total_masked_objects", total_masked_objects)
        pulumi.set(__self__, "total_masked_schemas", total_masked_schemas)
        pulumi.set(__self__, "total_masked_sensitive_types", total_masked_sensitive_types)
        pulumi.set(__self__, "total_masked_values", total_masked_values)
        pulumi.set(__self__, "total_post_masking_script_errors", total_post_masking_script_errors)
        pulumi.set(__self__, "total_pre_masking_script_errors", total_pre_masking_script_errors)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the masking report.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDropTempTablesEnabled")
    def is_drop_temp_tables_enabled(self) -> _builtins.bool:
        """
        Indicates if the temporary tables created during the masking operation were dropped after masking.
        """
        return pulumi.get(self, "is_drop_temp_tables_enabled")

    @_builtins.property
    @pulumi.getter(name="isRedoLoggingEnabled")
    def is_redo_logging_enabled(self) -> _builtins.bool:
        """
        Indicates if redo logging was enabled during the masking operation.
        """
        return pulumi.get(self, "is_redo_logging_enabled")

    @_builtins.property
    @pulumi.getter(name="isRefreshStatsEnabled")
    def is_refresh_stats_enabled(self) -> _builtins.bool:
        """
        Indicates if statistics gathering was enabled during the masking operation.
        """
        return pulumi.get(self, "is_refresh_stats_enabled")

    @_builtins.property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified masking policy OCID.
        """
        return pulumi.get(self, "masking_policy_id")

    @_builtins.property
    @pulumi.getter(name="maskingStatus")
    def masking_status(self) -> _builtins.str:
        """
        The status of the masking job.
        """
        return pulumi.get(self, "masking_status")

    @_builtins.property
    @pulumi.getter(name="maskingWorkRequestId")
    def masking_work_request_id(self) -> _builtins.str:
        """
        The OCID of the masking work request that resulted in this masking report.
        """
        return pulumi.get(self, "masking_work_request_id")

    @_builtins.property
    @pulumi.getter(name="parallelDegree")
    def parallel_degree(self) -> _builtins.str:
        """
        Indicates if parallel execution was enabled during the masking operation.
        """
        return pulumi.get(self, "parallel_degree")

    @_builtins.property
    @pulumi.getter
    def recompile(self) -> _builtins.str:
        """
        Indicates how invalid objects were recompiled post the masking operation.
        """
        return pulumi.get(self, "recompile")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the masking report.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the masking report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeMaskingFinished")
    def time_masking_finished(self) -> _builtins.str:
        """
        The date and time data masking finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        """
        return pulumi.get(self, "time_masking_finished")

    @_builtins.property
    @pulumi.getter(name="timeMaskingStarted")
    def time_masking_started(self) -> _builtins.str:
        """
        The date and time data masking started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)
        """
        return pulumi.get(self, "time_masking_started")

    @_builtins.property
    @pulumi.getter(name="totalMaskedColumns")
    def total_masked_columns(self) -> _builtins.str:
        """
        The total number of masked columns.
        """
        return pulumi.get(self, "total_masked_columns")

    @_builtins.property
    @pulumi.getter(name="totalMaskedObjects")
    def total_masked_objects(self) -> _builtins.str:
        """
        The total number of unique objects (tables and editioning views) that contain the masked columns.
        """
        return pulumi.get(self, "total_masked_objects")

    @_builtins.property
    @pulumi.getter(name="totalMaskedSchemas")
    def total_masked_schemas(self) -> _builtins.str:
        """
        The total number of unique schemas that contain the masked columns.
        """
        return pulumi.get(self, "total_masked_schemas")

    @_builtins.property
    @pulumi.getter(name="totalMaskedSensitiveTypes")
    def total_masked_sensitive_types(self) -> _builtins.str:
        """
        The total number of unique sensitive types associated with the masked columns.
        """
        return pulumi.get(self, "total_masked_sensitive_types")

    @_builtins.property
    @pulumi.getter(name="totalMaskedValues")
    def total_masked_values(self) -> _builtins.str:
        """
        The total number of masked values.
        """
        return pulumi.get(self, "total_masked_values")

    @_builtins.property
    @pulumi.getter(name="totalPostMaskingScriptErrors")
    def total_post_masking_script_errors(self) -> _builtins.str:
        """
        The total number of errors in post-masking script.
        """
        return pulumi.get(self, "total_post_masking_script_errors")

    @_builtins.property
    @pulumi.getter(name="totalPreMaskingScriptErrors")
    def total_pre_masking_script_errors(self) -> _builtins.str:
        """
        The total number of errors in pre-masking script.
        """
        return pulumi.get(self, "total_pre_masking_script_errors")


@pulumi.output_type
class GetOnpremConnectorsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOnpremConnectorsOnPremConnectorResult(dict):
    def __init__(__self__, *,
                 available_version: _builtins.str,
                 compartment_id: _builtins.str,
                 created_version: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str):
        """
        :param _builtins.str available_version: Latest available version of the on-premises connector.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str created_version: Created version of the on-premises connector.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the on-premises connector.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the on-premises connector.
        :param _builtins.str lifecycle_details: Details about the current state of the on-premises connector.
        :param _builtins.str state: The current state of the on-premises connector.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the on-premises connector was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "available_version", available_version)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_version", created_version)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)

    @_builtins.property
    @pulumi.getter(name="availableVersion")
    def available_version(self) -> _builtins.str:
        """
        Latest available version of the on-premises connector.
        """
        return pulumi.get(self, "available_version")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="createdVersion")
    def created_version(self) -> _builtins.str:
        """
        Created version of the on-premises connector.
        """
        return pulumi.get(self, "created_version")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the on-premises connector.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the on-premises connector.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the on-premises connector.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the on-premises connector.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the on-premises connector was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetReportDefinitionColumnFilterResult(dict):
    def __init__(__self__, *,
                 expressions: Sequence[_builtins.str],
                 field_name: _builtins.str,
                 is_enabled: _builtins.bool,
                 is_hidden: _builtins.bool,
                 operator: _builtins.str):
        """
        :param Sequence[_builtins.str] expressions: An array of expressions based on the operator type. A filter may have one or more expressions.
        :param _builtins.str field_name: Name of the column that must be sorted.
        :param _builtins.bool is_enabled: Indicates whether the filter is enabled. Values can either be 'true' or 'false'.
        :param _builtins.bool is_hidden: Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        :param _builtins.str operator: Specifies the type of operator that must be applied for example in, eq etc.
        """
        pulumi.set(__self__, "expressions", expressions)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_hidden", is_hidden)
        pulumi.set(__self__, "operator", operator)

    @_builtins.property
    @pulumi.getter
    def expressions(self) -> Sequence[_builtins.str]:
        """
        An array of expressions based on the operator type. A filter may have one or more expressions.
        """
        return pulumi.get(self, "expressions")

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> _builtins.str:
        """
        Name of the column that must be sorted.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        """
        Indicates whether the filter is enabled. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> _builtins.bool:
        """
        Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_hidden")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Specifies the type of operator that must be applied for example in, eq etc.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetReportDefinitionColumnInfoResult(dict):
    def __init__(__self__, *,
                 data_type: _builtins.str,
                 display_name: _builtins.str,
                 display_order: _builtins.int,
                 field_name: _builtins.str,
                 is_hidden: _builtins.bool):
        """
        :param _builtins.str data_type: Specifies the data type of the column.
        :param _builtins.str display_name: Name of the report definition.
        :param _builtins.int display_order: Specifies the order in which the summary must be displayed.
        :param _builtins.str field_name: Name of the column that must be sorted.
        :param _builtins.bool is_hidden: Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_hidden", is_hidden)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        """
        Specifies the data type of the column.
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Name of the report definition.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> _builtins.int:
        """
        Specifies the order in which the summary must be displayed.
        """
        return pulumi.get(self, "display_order")

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> _builtins.str:
        """
        Name of the column that must be sorted.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> _builtins.bool:
        """
        Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_hidden")


@pulumi.output_type
class GetReportDefinitionColumnSortingResult(dict):
    def __init__(__self__, *,
                 field_name: _builtins.str,
                 is_ascending: _builtins.bool,
                 sorting_order: _builtins.int):
        """
        :param _builtins.str field_name: Name of the column that must be sorted.
        :param _builtins.bool is_ascending: Indicates if the column must be sorted in ascending order. Values can either be 'true' or 'false'.
        :param _builtins.int sorting_order: Indicates the order at which column must be sorted.
        """
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_ascending", is_ascending)
        pulumi.set(__self__, "sorting_order", sorting_order)

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> _builtins.str:
        """
        Name of the column that must be sorted.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="isAscending")
    def is_ascending(self) -> _builtins.bool:
        """
        Indicates if the column must be sorted in ascending order. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_ascending")

    @_builtins.property
    @pulumi.getter(name="sortingOrder")
    def sorting_order(self) -> _builtins.int:
        """
        Indicates the order at which column must be sorted.
        """
        return pulumi.get(self, "sorting_order")


@pulumi.output_type
class GetReportDefinitionSummaryResult(dict):
    def __init__(__self__, *,
                 count_of: _builtins.str,
                 display_order: _builtins.int,
                 group_by_field_name: _builtins.str,
                 is_hidden: _builtins.bool,
                 name: _builtins.str,
                 scim_filter: _builtins.str):
        """
        :param _builtins.str count_of: Name of the key or count of object.
        :param _builtins.int display_order: Specifies the order in which the summary must be displayed.
        :param _builtins.str group_by_field_name: A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
        :param _builtins.bool is_hidden: Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        :param _builtins.str name: Name of the report summary.
        :param _builtins.str scim_filter: Additional scim filters used to get the specific summary.
        """
        pulumi.set(__self__, "count_of", count_of)
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "group_by_field_name", group_by_field_name)
        pulumi.set(__self__, "is_hidden", is_hidden)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scim_filter", scim_filter)

    @_builtins.property
    @pulumi.getter(name="countOf")
    def count_of(self) -> _builtins.str:
        """
        Name of the key or count of object.
        """
        return pulumi.get(self, "count_of")

    @_builtins.property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> _builtins.int:
        """
        Specifies the order in which the summary must be displayed.
        """
        return pulumi.get(self, "display_order")

    @_builtins.property
    @pulumi.getter(name="groupByFieldName")
    def group_by_field_name(self) -> _builtins.str:
        """
        A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
        """
        return pulumi.get(self, "group_by_field_name")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> _builtins.bool:
        """
        Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_hidden")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the report summary.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="scimFilter")
    def scim_filter(self) -> _builtins.str:
        """
        Additional scim filters used to get the specific summary.
        """
        return pulumi.get(self, "scim_filter")


@pulumi.output_type
class GetReportDefinitionsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        """
        :param _builtins.str name: Name of the report summary.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the report summary.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 column_filters: Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnFilterResult'],
                 column_infos: Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnInfoResult'],
                 column_sortings: Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnSortingResult'],
                 compartment_id: _builtins.str,
                 compliance_standards: Sequence[_builtins.str],
                 data_source: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 display_order: _builtins.int,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_seeded: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 parent_id: _builtins.str,
                 record_time_span: _builtins.str,
                 schedule: _builtins.str,
                 scheduled_report_compartment_id: _builtins.str,
                 scheduled_report_mime_type: _builtins.str,
                 scheduled_report_name: _builtins.str,
                 scheduled_report_row_limit: _builtins.int,
                 scim_filter: _builtins.str,
                 state: _builtins.str,
                 summaries: Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemSummaryResult'],
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str category: An optional filter to return only resources that match the specified category.
        :param Sequence['GetReportDefinitionsReportDefinitionCollectionItemColumnFilterArgs'] column_filters: An array of columnFilter objects. A columnFilter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
        :param Sequence['GetReportDefinitionsReportDefinitionCollectionItemColumnInfoArgs'] column_infos: An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
        :param Sequence['GetReportDefinitionsReportDefinitionCollectionItemColumnSortingArgs'] column_sortings: An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Sequence[_builtins.str] compliance_standards: The list of the data protection regulations/standards used in the report that will help demonstrate compliance.
        :param _builtins.str data_source: Specifies the name of a resource that provides data for the report. For example  alerts, events.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: A description of the report definition.
        :param _builtins.str display_name: The name of the report definition to query.
        :param _builtins.int display_order: Specifies the order in which the summary must be displayed.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the report definition.
        :param _builtins.bool is_seeded: A boolean flag indicating to list seeded report definitions. Set this parameter to get list of seeded report definitions.
        :param _builtins.str lifecycle_details: Details about the current state of the report definition in Data Safe.
        :param _builtins.str parent_id: The OCID of the parent report definition. In the case of seeded report definition, this is same as definition OCID.
        :param _builtins.str record_time_span: The time span for the records in the report to be scheduled. <period-value><period> Allowed period strings - "H","D","M","Y" Each of the above fields potentially introduce constraints. A workRequest is created only when period-value satisfies all the constraints. Constraints introduced: 1. period = H (The allowed range for period-value is [1, 23]) 2. period = D (The allowed range for period-value is [1, 30]) 3. period = M (The allowed range for period-value is [1, 11]) 4. period = Y (The minimum period-value is 1)
        :param _builtins.str schedule: The schedule to generate the report periodically in the specified format: <version-string>;<version-specific-schedule>
        :param _builtins.str scheduled_report_compartment_id: The OCID of the compartment in which the scheduled resource will be created.
        :param _builtins.str scheduled_report_mime_type: Specifies the format of the report ( either .xls or .pdf or .json)
        :param _builtins.str scheduled_report_name: The name of the report to be scheduled.
        :param _builtins.int scheduled_report_row_limit: Specifies the limit on the number of rows in the report.
        :param _builtins.str scim_filter: Additional scim filters used to get the specific summary.
        :param _builtins.str state: An optional filter to return only resources that match the specified lifecycle state.
        :param Sequence['GetReportDefinitionsReportDefinitionCollectionItemSummaryArgs'] summaries: An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: Specifies the date and time the report definition was created.
        :param _builtins.str time_updated: The date and time the report definition was updated.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "column_filters", column_filters)
        pulumi.set(__self__, "column_infos", column_infos)
        pulumi.set(__self__, "column_sortings", column_sortings)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compliance_standards", compliance_standards)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_seeded", is_seeded)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "record_time_span", record_time_span)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "scheduled_report_compartment_id", scheduled_report_compartment_id)
        pulumi.set(__self__, "scheduled_report_mime_type", scheduled_report_mime_type)
        pulumi.set(__self__, "scheduled_report_name", scheduled_report_name)
        pulumi.set(__self__, "scheduled_report_row_limit", scheduled_report_row_limit)
        pulumi.set(__self__, "scim_filter", scim_filter)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summaries", summaries)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified category.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter(name="columnFilters")
    def column_filters(self) -> Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnFilterResult']:
        """
        An array of columnFilter objects. A columnFilter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
        """
        return pulumi.get(self, "column_filters")

    @_builtins.property
    @pulumi.getter(name="columnInfos")
    def column_infos(self) -> Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnInfoResult']:
        """
        An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
        """
        return pulumi.get(self, "column_infos")

    @_builtins.property
    @pulumi.getter(name="columnSortings")
    def column_sortings(self) -> Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnSortingResult']:
        """
        An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
        """
        return pulumi.get(self, "column_sortings")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="complianceStandards")
    def compliance_standards(self) -> Sequence[_builtins.str]:
        """
        The list of the data protection regulations/standards used in the report that will help demonstrate compliance.
        """
        return pulumi.get(self, "compliance_standards")

    @_builtins.property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> _builtins.str:
        """
        Specifies the name of a resource that provides data for the report. For example  alerts, events.
        """
        return pulumi.get(self, "data_source")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A description of the report definition.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The name of the report definition to query.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> _builtins.int:
        """
        Specifies the order in which the summary must be displayed.
        """
        return pulumi.get(self, "display_order")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the report definition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isSeeded")
    def is_seeded(self) -> _builtins.bool:
        """
        A boolean flag indicating to list seeded report definitions. Set this parameter to get list of seeded report definitions.
        """
        return pulumi.get(self, "is_seeded")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the report definition in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> _builtins.str:
        """
        The OCID of the parent report definition. In the case of seeded report definition, this is same as definition OCID.
        """
        return pulumi.get(self, "parent_id")

    @_builtins.property
    @pulumi.getter(name="recordTimeSpan")
    def record_time_span(self) -> _builtins.str:
        """
        The time span for the records in the report to be scheduled. <period-value><period> Allowed period strings - "H","D","M","Y" Each of the above fields potentially introduce constraints. A workRequest is created only when period-value satisfies all the constraints. Constraints introduced: 1. period = H (The allowed range for period-value is [1, 23]) 2. period = D (The allowed range for period-value is [1, 30]) 3. period = M (The allowed range for period-value is [1, 11]) 4. period = Y (The minimum period-value is 1)
        """
        return pulumi.get(self, "record_time_span")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> _builtins.str:
        """
        The schedule to generate the report periodically in the specified format: <version-string>;<version-specific-schedule>
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter(name="scheduledReportCompartmentId")
    def scheduled_report_compartment_id(self) -> _builtins.str:
        """
        The OCID of the compartment in which the scheduled resource will be created.
        """
        return pulumi.get(self, "scheduled_report_compartment_id")

    @_builtins.property
    @pulumi.getter(name="scheduledReportMimeType")
    def scheduled_report_mime_type(self) -> _builtins.str:
        """
        Specifies the format of the report ( either .xls or .pdf or .json)
        """
        return pulumi.get(self, "scheduled_report_mime_type")

    @_builtins.property
    @pulumi.getter(name="scheduledReportName")
    def scheduled_report_name(self) -> _builtins.str:
        """
        The name of the report to be scheduled.
        """
        return pulumi.get(self, "scheduled_report_name")

    @_builtins.property
    @pulumi.getter(name="scheduledReportRowLimit")
    def scheduled_report_row_limit(self) -> _builtins.int:
        """
        Specifies the limit on the number of rows in the report.
        """
        return pulumi.get(self, "scheduled_report_row_limit")

    @_builtins.property
    @pulumi.getter(name="scimFilter")
    def scim_filter(self) -> _builtins.str:
        """
        Additional scim filters used to get the specific summary.
        """
        return pulumi.get(self, "scim_filter")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summaries(self) -> Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemSummaryResult']:
        """
        An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
        """
        return pulumi.get(self, "summaries")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        Specifies the date and time the report definition was created.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the report definition was updated.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemColumnFilterResult(dict):
    def __init__(__self__, *,
                 expressions: Sequence[_builtins.str],
                 field_name: _builtins.str,
                 is_enabled: _builtins.bool,
                 is_hidden: _builtins.bool,
                 operator: _builtins.str):
        """
        :param Sequence[_builtins.str] expressions: An array of expressions based on the operator type. A filter may have one or more expressions.
        :param _builtins.str field_name: Name of the column that must be sorted.
        :param _builtins.bool is_enabled: Indicates whether the filter is enabled. Values can either be 'true' or 'false'.
        :param _builtins.bool is_hidden: Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        :param _builtins.str operator: Specifies the type of operator that must be applied for example in, eq etc.
        """
        pulumi.set(__self__, "expressions", expressions)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_hidden", is_hidden)
        pulumi.set(__self__, "operator", operator)

    @_builtins.property
    @pulumi.getter
    def expressions(self) -> Sequence[_builtins.str]:
        """
        An array of expressions based on the operator type. A filter may have one or more expressions.
        """
        return pulumi.get(self, "expressions")

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> _builtins.str:
        """
        Name of the column that must be sorted.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        """
        Indicates whether the filter is enabled. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> _builtins.bool:
        """
        Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_hidden")

    @_builtins.property
    @pulumi.getter
    def operator(self) -> _builtins.str:
        """
        Specifies the type of operator that must be applied for example in, eq etc.
        """
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemColumnInfoResult(dict):
    def __init__(__self__, *,
                 data_type: _builtins.str,
                 display_name: _builtins.str,
                 display_order: _builtins.int,
                 field_name: _builtins.str,
                 is_hidden: _builtins.bool):
        """
        :param _builtins.str data_type: Specifies the data type of the column.
        :param _builtins.str display_name: The name of the report definition to query.
        :param _builtins.int display_order: Specifies the order in which the summary must be displayed.
        :param _builtins.str field_name: Name of the column that must be sorted.
        :param _builtins.bool is_hidden: Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_hidden", is_hidden)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        """
        Specifies the data type of the column.
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The name of the report definition to query.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> _builtins.int:
        """
        Specifies the order in which the summary must be displayed.
        """
        return pulumi.get(self, "display_order")

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> _builtins.str:
        """
        Name of the column that must be sorted.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> _builtins.bool:
        """
        Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_hidden")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemColumnSortingResult(dict):
    def __init__(__self__, *,
                 field_name: _builtins.str,
                 is_ascending: _builtins.bool,
                 sorting_order: _builtins.int):
        """
        :param _builtins.str field_name: Name of the column that must be sorted.
        :param _builtins.bool is_ascending: Indicates if the column must be sorted in ascending order. Values can either be 'true' or 'false'.
        :param _builtins.int sorting_order: Indicates the order at which column must be sorted.
        """
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_ascending", is_ascending)
        pulumi.set(__self__, "sorting_order", sorting_order)

    @_builtins.property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> _builtins.str:
        """
        Name of the column that must be sorted.
        """
        return pulumi.get(self, "field_name")

    @_builtins.property
    @pulumi.getter(name="isAscending")
    def is_ascending(self) -> _builtins.bool:
        """
        Indicates if the column must be sorted in ascending order. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_ascending")

    @_builtins.property
    @pulumi.getter(name="sortingOrder")
    def sorting_order(self) -> _builtins.int:
        """
        Indicates the order at which column must be sorted.
        """
        return pulumi.get(self, "sorting_order")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemSummaryResult(dict):
    def __init__(__self__, *,
                 count_of: _builtins.str,
                 display_order: _builtins.int,
                 group_by_field_name: _builtins.str,
                 is_hidden: _builtins.bool,
                 name: _builtins.str,
                 scim_filter: _builtins.str):
        """
        :param _builtins.str count_of: Name of the key or count of object.
        :param _builtins.int display_order: Specifies the order in which the summary must be displayed.
        :param _builtins.str group_by_field_name: A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
        :param _builtins.bool is_hidden: Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        :param _builtins.str name: Name of the report summary.
        :param _builtins.str scim_filter: Additional scim filters used to get the specific summary.
        """
        pulumi.set(__self__, "count_of", count_of)
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "group_by_field_name", group_by_field_name)
        pulumi.set(__self__, "is_hidden", is_hidden)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scim_filter", scim_filter)

    @_builtins.property
    @pulumi.getter(name="countOf")
    def count_of(self) -> _builtins.str:
        """
        Name of the key or count of object.
        """
        return pulumi.get(self, "count_of")

    @_builtins.property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> _builtins.int:
        """
        Specifies the order in which the summary must be displayed.
        """
        return pulumi.get(self, "display_order")

    @_builtins.property
    @pulumi.getter(name="groupByFieldName")
    def group_by_field_name(self) -> _builtins.str:
        """
        A comma-delimited string that specifies the names of the fields by which the records must be aggregated to get the summary.
        """
        return pulumi.get(self, "group_by_field_name")

    @_builtins.property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> _builtins.bool:
        """
        Indicates if the summary is hidden. Values can either be 'true' or 'false'.
        """
        return pulumi.get(self, "is_hidden")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the report summary.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="scimFilter")
    def scim_filter(self) -> _builtins.str:
        """
        Additional scim filters used to get the specific summary.
        """
        return pulumi.get(self, "scim_filter")


@pulumi.output_type
class GetReportsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetReportsReportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetReportsReportCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetReportsReportCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetReportsReportCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 mime_type: _builtins.str,
                 report_definition_id: _builtins.str,
                 report_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_generated: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: Specifies a description of the report.
        :param _builtins.str display_name: The name of the report definition to query.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the report.
        :param _builtins.str lifecycle_details: Details about the current state of the report in Data Safe.
        :param _builtins.str mime_type: An optional filter to return only resources that match the specified mime type.
        :param _builtins.str report_definition_id: The ID of the report definition to filter the list of reports
        :param _builtins.str state: An optional filter to return only resources that match the specified lifecycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_generated: Specifies the date and time the report was generated.
        :param _builtins.str type: An optional filter to return only resources that match the specified type.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "mime_type", mime_type)
        pulumi.set(__self__, "report_definition_id", report_definition_id)
        pulumi.set(__self__, "report_id", report_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_generated", time_generated)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies a description of the report.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The name of the report definition to query.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the report.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the report in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified mime type.
        """
        return pulumi.get(self, "mime_type")

    @_builtins.property
    @pulumi.getter(name="reportDefinitionId")
    def report_definition_id(self) -> _builtins.str:
        """
        The ID of the report definition to filter the list of reports
        """
        return pulumi.get(self, "report_definition_id")

    @_builtins.property
    @pulumi.getter(name="reportId")
    def report_id(self) -> _builtins.str:
        return pulumi.get(self, "report_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeGenerated")
    def time_generated(self) -> _builtins.str:
        """
        Specifies the date and time the report was generated.
        """
        return pulumi.get(self, "time_generated")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSdmMaskingPolicyDifferenceDifferenceColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItemResult(dict):
    def __init__(__self__, *,
                 column_name: _builtins.str,
                 difference_type: _builtins.str,
                 key: _builtins.str,
                 masking_columnkey: _builtins.str,
                 object: _builtins.str,
                 planned_action: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_columnkey: _builtins.str,
                 sensitive_type_id: _builtins.str,
                 sync_status: _builtins.str,
                 time_last_synced: _builtins.str):
        """
        :param _builtins.str column_name: A filter to return only a specific column based on column name.
        :param _builtins.str difference_type: A filter to return only the SDM masking policy difference columns that match the specified difference type
        :param _builtins.str key: The unique key that identifies the SDM masking policy difference column.
        :param _builtins.str masking_columnkey: The unique key that identifies the masking column represented by the SDM masking policy difference column.
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str planned_action: A filter to return only the SDM masking policy difference columns that match the specified planned action.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str sensitive_columnkey: The unique key that identifies the sensitive column represented by the SDM masking policy difference column.
        :param _builtins.str sensitive_type_id: The OCID of the sensitive type associated with the difference column.
        :param _builtins.str sync_status: A filter to return the SDM masking policy difference columns based on the value of their syncStatus attribute.
        :param _builtins.str time_last_synced: The date and time the SDM masking policy difference column was last synced, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "difference_type", difference_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "masking_columnkey", masking_columnkey)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "planned_action", planned_action)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_columnkey", sensitive_columnkey)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        pulumi.set(__self__, "sync_status", sync_status)
        pulumi.set(__self__, "time_last_synced", time_last_synced)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        A filter to return only a specific column based on column name.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter(name="differenceType")
    def difference_type(self) -> _builtins.str:
        """
        A filter to return only the SDM masking policy difference columns that match the specified difference type
        """
        return pulumi.get(self, "difference_type")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the SDM masking policy difference column.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="maskingColumnkey")
    def masking_columnkey(self) -> _builtins.str:
        """
        The unique key that identifies the masking column represented by the SDM masking policy difference column.
        """
        return pulumi.get(self, "masking_columnkey")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="plannedAction")
    def planned_action(self) -> _builtins.str:
        """
        A filter to return only the SDM masking policy difference columns that match the specified planned action.
        """
        return pulumi.get(self, "planned_action")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveColumnkey")
    def sensitive_columnkey(self) -> _builtins.str:
        """
        The unique key that identifies the sensitive column represented by the SDM masking policy difference column.
        """
        return pulumi.get(self, "sensitive_columnkey")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        The OCID of the sensitive type associated with the difference column.
        """
        return pulumi.get(self, "sensitive_type_id")

    @_builtins.property
    @pulumi.getter(name="syncStatus")
    def sync_status(self) -> _builtins.str:
        """
        A filter to return the SDM masking policy difference columns based on the value of their syncStatus attribute.
        """
        return pulumi.get(self, "sync_status")

    @_builtins.property
    @pulumi.getter(name="timeLastSynced")
    def time_last_synced(self) -> _builtins.str:
        """
        The date and time the SDM masking policy difference column was last synced, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_last_synced")


@pulumi.output_type
class GetSdmMaskingPolicyDifferencesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 difference_type: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 masking_policy_id: _builtins.str,
                 sensitive_data_model_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_creation_started: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str difference_type: The type of the SDM masking policy difference. It defines the difference scope. NEW identifies new sensitive columns in the sensitive data model that are not in the masking policy. DELETED identifies columns that are present in the masking policy but have been deleted from the sensitive data model. MODIFIED identifies columns that are present in the sensitive data model as well as the masking policy but some of their attributes have been modified. ALL covers all the above three scenarios and reports new, deleted and modified columns.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the Sensitive data model and masking policy difference resource.
        :param _builtins.str masking_policy_id: A filter to return only the resources that match the specified masking policy OCID.
        :param _builtins.str sensitive_data_model_id: A filter to return only the resources that match the specified sensitive data model OCID.
        :param _builtins.str state: A filter to return only the resources that match the specified lifecycle states.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the SDM masking policy difference was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_creation_started: The date and time the SDM masking policy difference creation started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "difference_type", difference_type)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_creation_started", time_creation_started)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="differenceType")
    def difference_type(self) -> _builtins.str:
        """
        The type of the SDM masking policy difference. It defines the difference scope. NEW identifies new sensitive columns in the sensitive data model that are not in the masking policy. DELETED identifies columns that are present in the masking policy but have been deleted from the sensitive data model. MODIFIED identifies columns that are present in the sensitive data model as well as the masking policy but some of their attributes have been modified. ALL covers all the above three scenarios and reports new, deleted and modified columns.
        """
        return pulumi.get(self, "difference_type")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the Sensitive data model and masking policy difference resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified masking policy OCID.
        """
        return pulumi.get(self, "masking_policy_id")

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified sensitive data model OCID.
        """
        return pulumi.get(self, "sensitive_data_model_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified lifecycle states.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the SDM masking policy difference was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeCreationStarted")
    def time_creation_started(self) -> _builtins.str:
        """
        The date and time the SDM masking policy difference creation started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_creation_started")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetResult(dict):
    def __init__(__self__, *,
                 auditings: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingResult'],
                 authorization_controls: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlResult'],
                 baseline_target_id: _builtins.str,
                 current_target_id: _builtins.str,
                 data_encryptions: Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionResult'],
                 db_configurations: Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationResult'],
                 fine_grained_access_controls: Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlResult'],
                 privileges_and_roles: Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleResult'],
                 user_accounts: Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountResult']):
        """
        :param Sequence['GetSecurityAssessmentComparisonTargetAuditingArgs'] auditings: A comparison between findings belonging to Auditing category.
        :param Sequence['GetSecurityAssessmentComparisonTargetAuthorizationControlArgs'] authorization_controls: A comparison between findings belonging to Authorization Control category.
        :param _builtins.str baseline_target_id: The OCID of the target that is used as a baseline in this comparison.
        :param _builtins.str current_target_id: The OCID of the target to be compared against the baseline target.
        :param Sequence['GetSecurityAssessmentComparisonTargetDataEncryptionArgs'] data_encryptions: Comparison between findings belonging to Data Encryption category.
        :param Sequence['GetSecurityAssessmentComparisonTargetDbConfigurationArgs'] db_configurations: Comparison between findings belonging to Database Configuration category.
        :param Sequence['GetSecurityAssessmentComparisonTargetFineGrainedAccessControlArgs'] fine_grained_access_controls: Comparison between findings belonging to Fine-Grained Access Control category.
        :param Sequence['GetSecurityAssessmentComparisonTargetPrivilegesAndRoleArgs'] privileges_and_roles: Comparison between findings belonging to Privileges and Roles category.
        :param Sequence['GetSecurityAssessmentComparisonTargetUserAccountArgs'] user_accounts: Comparison between findings belonging to User Accounts category.
        """
        pulumi.set(__self__, "auditings", auditings)
        pulumi.set(__self__, "authorization_controls", authorization_controls)
        pulumi.set(__self__, "baseline_target_id", baseline_target_id)
        pulumi.set(__self__, "current_target_id", current_target_id)
        pulumi.set(__self__, "data_encryptions", data_encryptions)
        pulumi.set(__self__, "db_configurations", db_configurations)
        pulumi.set(__self__, "fine_grained_access_controls", fine_grained_access_controls)
        pulumi.set(__self__, "privileges_and_roles", privileges_and_roles)
        pulumi.set(__self__, "user_accounts", user_accounts)

    @_builtins.property
    @pulumi.getter
    def auditings(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingResult']:
        """
        A comparison between findings belonging to Auditing category.
        """
        return pulumi.get(self, "auditings")

    @_builtins.property
    @pulumi.getter(name="authorizationControls")
    def authorization_controls(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlResult']:
        """
        A comparison between findings belonging to Authorization Control category.
        """
        return pulumi.get(self, "authorization_controls")

    @_builtins.property
    @pulumi.getter(name="baselineTargetId")
    def baseline_target_id(self) -> _builtins.str:
        """
        The OCID of the target that is used as a baseline in this comparison.
        """
        return pulumi.get(self, "baseline_target_id")

    @_builtins.property
    @pulumi.getter(name="currentTargetId")
    def current_target_id(self) -> _builtins.str:
        """
        The OCID of the target to be compared against the baseline target.
        """
        return pulumi.get(self, "current_target_id")

    @_builtins.property
    @pulumi.getter(name="dataEncryptions")
    def data_encryptions(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionResult']:
        """
        Comparison between findings belonging to Data Encryption category.
        """
        return pulumi.get(self, "data_encryptions")

    @_builtins.property
    @pulumi.getter(name="dbConfigurations")
    def db_configurations(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationResult']:
        """
        Comparison between findings belonging to Database Configuration category.
        """
        return pulumi.get(self, "db_configurations")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControls")
    def fine_grained_access_controls(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlResult']:
        """
        Comparison between findings belonging to Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_controls")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRoles")
    def privileges_and_roles(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleResult']:
        """
        Comparison between findings belonging to Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles")

    @_builtins.property
    @pulumi.getter(name="userAccounts")
    def user_accounts(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountResult']:
        """
        Comparison between findings belonging to User Accounts category.
        """
        return pulumi.get(self, "user_accounts")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingResult(dict):
    def __init__(__self__, *,
                 added_items: Sequence[_builtins.str],
                 baselines: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingBaselineResult'],
                 currents: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingCurrentResult'],
                 modified_items: Sequence[_builtins.str],
                 removed_items: Sequence[_builtins.str],
                 severity: _builtins.str):
        """
        :param Sequence[_builtins.str] added_items: This array identifies the items that are present in the current assessment, but are missing from the baseline.
        :param Sequence['GetSecurityAssessmentComparisonTargetAuditingBaselineArgs'] baselines: The particular finding reported by the security assessment.
        :param Sequence['GetSecurityAssessmentComparisonTargetAuditingCurrentArgs'] currents: The particular finding reported by the security assessment.
        :param Sequence[_builtins.str] modified_items: This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        :param Sequence[_builtins.str] removed_items: This array identifies the items that are present in the baseline, but are missing from the current assessment.
        :param _builtins.str severity: The severity of this diff.
        """
        pulumi.set(__self__, "added_items", added_items)
        pulumi.set(__self__, "baselines", baselines)
        pulumi.set(__self__, "currents", currents)
        pulumi.set(__self__, "modified_items", modified_items)
        pulumi.set(__self__, "removed_items", removed_items)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the current assessment, but are missing from the baseline.
        """
        return pulumi.get(self, "added_items")

    @_builtins.property
    @pulumi.getter
    def baselines(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingBaselineResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "baselines")

    @_builtins.property
    @pulumi.getter
    def currents(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingCurrentResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "currents")

    @_builtins.property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Sequence[_builtins.str]:
        """
        This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        """
        return pulumi.get(self, "modified_items")

    @_builtins.property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the baseline, but are missing from the current assessment.
        """
        return pulumi.get(self, "removed_items")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingBaselineResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingBaselineReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetAuditingBaselineReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingBaselineReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingCurrentResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingCurrentReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetAuditingCurrentReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingCurrentReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlResult(dict):
    def __init__(__self__, *,
                 added_items: Sequence[_builtins.str],
                 baselines: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineResult'],
                 currents: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentResult'],
                 modified_items: Sequence[_builtins.str],
                 removed_items: Sequence[_builtins.str],
                 severity: _builtins.str):
        """
        :param Sequence[_builtins.str] added_items: This array identifies the items that are present in the current assessment, but are missing from the baseline.
        :param Sequence['GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineArgs'] baselines: The particular finding reported by the security assessment.
        :param Sequence['GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentArgs'] currents: The particular finding reported by the security assessment.
        :param Sequence[_builtins.str] modified_items: This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        :param Sequence[_builtins.str] removed_items: This array identifies the items that are present in the baseline, but are missing from the current assessment.
        :param _builtins.str severity: The severity of this diff.
        """
        pulumi.set(__self__, "added_items", added_items)
        pulumi.set(__self__, "baselines", baselines)
        pulumi.set(__self__, "currents", currents)
        pulumi.set(__self__, "modified_items", modified_items)
        pulumi.set(__self__, "removed_items", removed_items)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the current assessment, but are missing from the baseline.
        """
        return pulumi.get(self, "added_items")

    @_builtins.property
    @pulumi.getter
    def baselines(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "baselines")

    @_builtins.property
    @pulumi.getter
    def currents(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "currents")

    @_builtins.property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Sequence[_builtins.str]:
        """
        This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        """
        return pulumi.get(self, "modified_items")

    @_builtins.property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the baseline, but are missing from the current assessment.
        """
        return pulumi.get(self, "removed_items")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionResult(dict):
    def __init__(__self__, *,
                 added_items: Sequence[_builtins.str],
                 baselines: Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionBaselineResult'],
                 currents: Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionCurrentResult'],
                 modified_items: Sequence[_builtins.str],
                 removed_items: Sequence[_builtins.str],
                 severity: _builtins.str):
        """
        :param Sequence[_builtins.str] added_items: This array identifies the items that are present in the current assessment, but are missing from the baseline.
        :param Sequence['GetSecurityAssessmentComparisonTargetDataEncryptionBaselineArgs'] baselines: The particular finding reported by the security assessment.
        :param Sequence['GetSecurityAssessmentComparisonTargetDataEncryptionCurrentArgs'] currents: The particular finding reported by the security assessment.
        :param Sequence[_builtins.str] modified_items: This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        :param Sequence[_builtins.str] removed_items: This array identifies the items that are present in the baseline, but are missing from the current assessment.
        :param _builtins.str severity: The severity of this diff.
        """
        pulumi.set(__self__, "added_items", added_items)
        pulumi.set(__self__, "baselines", baselines)
        pulumi.set(__self__, "currents", currents)
        pulumi.set(__self__, "modified_items", modified_items)
        pulumi.set(__self__, "removed_items", removed_items)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the current assessment, but are missing from the baseline.
        """
        return pulumi.get(self, "added_items")

    @_builtins.property
    @pulumi.getter
    def baselines(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionBaselineResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "baselines")

    @_builtins.property
    @pulumi.getter
    def currents(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionCurrentResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "currents")

    @_builtins.property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Sequence[_builtins.str]:
        """
        This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        """
        return pulumi.get(self, "modified_items")

    @_builtins.property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the baseline, but are missing from the current assessment.
        """
        return pulumi.get(self, "removed_items")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionBaselineResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionBaselineReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetDataEncryptionBaselineReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionBaselineReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionCurrentResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionCurrentReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetDataEncryptionCurrentReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionCurrentReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationResult(dict):
    def __init__(__self__, *,
                 added_items: Sequence[_builtins.str],
                 baselines: Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationBaselineResult'],
                 currents: Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationCurrentResult'],
                 modified_items: Sequence[_builtins.str],
                 removed_items: Sequence[_builtins.str],
                 severity: _builtins.str):
        """
        :param Sequence[_builtins.str] added_items: This array identifies the items that are present in the current assessment, but are missing from the baseline.
        :param Sequence['GetSecurityAssessmentComparisonTargetDbConfigurationBaselineArgs'] baselines: The particular finding reported by the security assessment.
        :param Sequence['GetSecurityAssessmentComparisonTargetDbConfigurationCurrentArgs'] currents: The particular finding reported by the security assessment.
        :param Sequence[_builtins.str] modified_items: This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        :param Sequence[_builtins.str] removed_items: This array identifies the items that are present in the baseline, but are missing from the current assessment.
        :param _builtins.str severity: The severity of this diff.
        """
        pulumi.set(__self__, "added_items", added_items)
        pulumi.set(__self__, "baselines", baselines)
        pulumi.set(__self__, "currents", currents)
        pulumi.set(__self__, "modified_items", modified_items)
        pulumi.set(__self__, "removed_items", removed_items)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the current assessment, but are missing from the baseline.
        """
        return pulumi.get(self, "added_items")

    @_builtins.property
    @pulumi.getter
    def baselines(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationBaselineResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "baselines")

    @_builtins.property
    @pulumi.getter
    def currents(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationCurrentResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "currents")

    @_builtins.property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Sequence[_builtins.str]:
        """
        This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        """
        return pulumi.get(self, "modified_items")

    @_builtins.property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the baseline, but are missing from the current assessment.
        """
        return pulumi.get(self, "removed_items")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationBaselineResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationBaselineReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetDbConfigurationBaselineReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationBaselineReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationCurrentResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationCurrentReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetDbConfigurationCurrentReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationCurrentReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlResult(dict):
    def __init__(__self__, *,
                 added_items: Sequence[_builtins.str],
                 baselines: Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineResult'],
                 currents: Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentResult'],
                 modified_items: Sequence[_builtins.str],
                 removed_items: Sequence[_builtins.str],
                 severity: _builtins.str):
        """
        :param Sequence[_builtins.str] added_items: This array identifies the items that are present in the current assessment, but are missing from the baseline.
        :param Sequence['GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineArgs'] baselines: The particular finding reported by the security assessment.
        :param Sequence['GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentArgs'] currents: The particular finding reported by the security assessment.
        :param Sequence[_builtins.str] modified_items: This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        :param Sequence[_builtins.str] removed_items: This array identifies the items that are present in the baseline, but are missing from the current assessment.
        :param _builtins.str severity: The severity of this diff.
        """
        pulumi.set(__self__, "added_items", added_items)
        pulumi.set(__self__, "baselines", baselines)
        pulumi.set(__self__, "currents", currents)
        pulumi.set(__self__, "modified_items", modified_items)
        pulumi.set(__self__, "removed_items", removed_items)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the current assessment, but are missing from the baseline.
        """
        return pulumi.get(self, "added_items")

    @_builtins.property
    @pulumi.getter
    def baselines(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "baselines")

    @_builtins.property
    @pulumi.getter
    def currents(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "currents")

    @_builtins.property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Sequence[_builtins.str]:
        """
        This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        """
        return pulumi.get(self, "modified_items")

    @_builtins.property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the baseline, but are missing from the current assessment.
        """
        return pulumi.get(self, "removed_items")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleResult(dict):
    def __init__(__self__, *,
                 added_items: Sequence[_builtins.str],
                 baselines: Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineResult'],
                 currents: Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentResult'],
                 modified_items: Sequence[_builtins.str],
                 removed_items: Sequence[_builtins.str],
                 severity: _builtins.str):
        """
        :param Sequence[_builtins.str] added_items: This array identifies the items that are present in the current assessment, but are missing from the baseline.
        :param Sequence['GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineArgs'] baselines: The particular finding reported by the security assessment.
        :param Sequence['GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentArgs'] currents: The particular finding reported by the security assessment.
        :param Sequence[_builtins.str] modified_items: This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        :param Sequence[_builtins.str] removed_items: This array identifies the items that are present in the baseline, but are missing from the current assessment.
        :param _builtins.str severity: The severity of this diff.
        """
        pulumi.set(__self__, "added_items", added_items)
        pulumi.set(__self__, "baselines", baselines)
        pulumi.set(__self__, "currents", currents)
        pulumi.set(__self__, "modified_items", modified_items)
        pulumi.set(__self__, "removed_items", removed_items)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the current assessment, but are missing from the baseline.
        """
        return pulumi.get(self, "added_items")

    @_builtins.property
    @pulumi.getter
    def baselines(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "baselines")

    @_builtins.property
    @pulumi.getter
    def currents(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "currents")

    @_builtins.property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Sequence[_builtins.str]:
        """
        This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        """
        return pulumi.get(self, "modified_items")

    @_builtins.property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the baseline, but are missing from the current assessment.
        """
        return pulumi.get(self, "removed_items")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountResult(dict):
    def __init__(__self__, *,
                 added_items: Sequence[_builtins.str],
                 baselines: Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountBaselineResult'],
                 currents: Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountCurrentResult'],
                 modified_items: Sequence[_builtins.str],
                 removed_items: Sequence[_builtins.str],
                 severity: _builtins.str):
        """
        :param Sequence[_builtins.str] added_items: This array identifies the items that are present in the current assessment, but are missing from the baseline.
        :param Sequence['GetSecurityAssessmentComparisonTargetUserAccountBaselineArgs'] baselines: The particular finding reported by the security assessment.
        :param Sequence['GetSecurityAssessmentComparisonTargetUserAccountCurrentArgs'] currents: The particular finding reported by the security assessment.
        :param Sequence[_builtins.str] modified_items: This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        :param Sequence[_builtins.str] removed_items: This array identifies the items that are present in the baseline, but are missing from the current assessment.
        :param _builtins.str severity: The severity of this diff.
        """
        pulumi.set(__self__, "added_items", added_items)
        pulumi.set(__self__, "baselines", baselines)
        pulumi.set(__self__, "currents", currents)
        pulumi.set(__self__, "modified_items", modified_items)
        pulumi.set(__self__, "removed_items", removed_items)
        pulumi.set(__self__, "severity", severity)

    @_builtins.property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the current assessment, but are missing from the baseline.
        """
        return pulumi.get(self, "added_items")

    @_builtins.property
    @pulumi.getter
    def baselines(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountBaselineResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "baselines")

    @_builtins.property
    @pulumi.getter
    def currents(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountCurrentResult']:
        """
        The particular finding reported by the security assessment.
        """
        return pulumi.get(self, "currents")

    @_builtins.property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Sequence[_builtins.str]:
        """
        This array contains the items that are present in both the current assessment and the baseline, but are different in the two assessments.
        """
        return pulumi.get(self, "modified_items")

    @_builtins.property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Sequence[_builtins.str]:
        """
        This array identifies the items that are present in the baseline, but are missing from the current assessment.
        """
        return pulumi.get(self, "removed_items")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountBaselineResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountBaselineReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetUserAccountBaselineReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountBaselineReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountCurrentResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountCurrentReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: A unique identifier for the finding. This is common for the finding across targets.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentComparisonTargetUserAccountCurrentReferenceArgs'] references: Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: The severity of this diff.
        :param _builtins.str state: The current state of the finding.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred/modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        A unique identifier for the finding. This is common for the finding across targets.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountCurrentReferenceResult']:
        """
        Provides information on whether the finding is related to a CIS Oracle Database Benchmark recommendation, STIG rule, or related to a GDPR Article/Recital.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        The severity of this diff.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the finding.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred/modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentFindingAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemArgs'] items: The array of the summary objects of the analytics data of findings or top findings.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemResult']:
        """
        The array of the summary objects of the analytics data of findings or top findings.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemDimensionResult'],
                 metric_name: _builtins.str,
                 security_assessment_finding_analytic_count: _builtins.str):
        """
        :param Sequence['GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemDimensionArgs'] dimensions: The scope of analytics data.
        :param _builtins.str metric_name: The name of the aggregation metric.
        :param _builtins.str security_assessment_finding_analytic_count: The total count for the aggregation metric.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "security_assessment_finding_analytic_count", security_assessment_finding_analytic_count)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemDimensionResult']:
        """
        The scope of analytics data.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The name of the aggregation metric.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter(name="securityAssessmentFindingAnalyticCount")
    def security_assessment_finding_analytic_count(self) -> _builtins.str:
        """
        The total count for the aggregation metric.
        """
        return pulumi.get(self, "security_assessment_finding_analytic_count")


@pulumi.output_type
class GetSecurityAssessmentFindingAnalyticsFindingAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 severity: _builtins.str,
                 target_id: _builtins.str,
                 title: _builtins.str,
                 top_finding_category: _builtins.str,
                 top_finding_status: _builtins.str):
        """
        :param _builtins.str key: Each finding in security assessment has an associated key (think of key as a finding's name). For a given finding, the key will be the same across targets. The user can use these keys to filter the findings.
        :param _builtins.str severity: A filter to return only findings of a particular risk level.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str title: The short title of the finding.
        :param _builtins.str top_finding_category: The category of the top finding.
        :param _builtins.str top_finding_status: An optional filter to return only the top finding that match the specified status.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "top_finding_category", top_finding_category)
        pulumi.set(__self__, "top_finding_status", top_finding_status)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Each finding in security assessment has an associated key (think of key as a finding's name). For a given finding, the key will be the same across targets. The user can use these keys to filter the findings.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        A filter to return only findings of a particular risk level.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title of the finding.
        """
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter(name="topFindingCategory")
    def top_finding_category(self) -> _builtins.str:
        """
        The category of the top finding.
        """
        return pulumi.get(self, "top_finding_category")

    @_builtins.property
    @pulumi.getter(name="topFindingStatus")
    def top_finding_status(self) -> _builtins.str:
        """
        An optional filter to return only the top finding that match the specified status.
        """
        return pulumi.get(self, "top_finding_status")


@pulumi.output_type
class GetSecurityAssessmentFindingFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentFindingFindingResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 doclink: _builtins.str,
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 is_top_finding: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oneline: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentFindingFindingReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "doclink", doclink)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "is_top_finding", is_top_finding)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oneline", oneline)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter
    def doclink(self) -> _builtins.str:
        return pulumi.get(self, "doclink")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter(name="isTopFinding")
    def is_top_finding(self) -> _builtins.bool:
        return pulumi.get(self, "is_top_finding")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def oneline(self) -> _builtins.str:
        return pulumi.get(self, "oneline")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentFindingFindingReferenceResult']:
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentFindingFindingReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentFindingsChangeAuditLogsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItemResult']):
        """
        :param Sequence['GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItemArgs'] items: An array of finding risk change audit log summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItemResult']:
        """
        An array of finding risk change audit log summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityAssessmentFindingsChangeAuditLogsFindingsChangeAuditLogCollectionItemResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 finding_key: _builtins.str,
                 finding_title: _builtins.str,
                 is_risk_deferred: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 modified_by: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 previous_severity: _builtins.str,
                 severity: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the latest security assessment.
        :param _builtins.str finding_key: The unique key that identifies the finding. It is a string and unique within a security assessment.
        :param _builtins.str finding_title: The unique title that identifies the finding. It is a string and unique within a security assessment.
        :param _builtins.bool is_risk_deferred: A filter to check findings whose risks were deferred by the user.
        :param _builtins.str justification: The justification given by the user for accepting or modifying the risk level.
        :param _builtins.str key: The unique key that identifies the finding risk change.
        :param _builtins.str modified_by: A filter to check which user modified the risk level of the finding.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment by Oracle.
        :param _builtins.str previous_severity: If the risk level is changed more than once, the previous modified value.
        :param _builtins.str severity: A filter to return only findings of a particular risk level.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the risk level change as updated by user is valid until. After this date passes, the risk level will be that of what is determined by the latest security assessment.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "finding_key", finding_key)
        pulumi.set(__self__, "finding_title", finding_title)
        pulumi.set(__self__, "is_risk_deferred", is_risk_deferred)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "modified_by", modified_by)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "previous_severity", previous_severity)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the latest security assessment.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter(name="findingKey")
    def finding_key(self) -> _builtins.str:
        """
        The unique key that identifies the finding. It is a string and unique within a security assessment.
        """
        return pulumi.get(self, "finding_key")

    @_builtins.property
    @pulumi.getter(name="findingTitle")
    def finding_title(self) -> _builtins.str:
        """
        The unique title that identifies the finding. It is a string and unique within a security assessment.
        """
        return pulumi.get(self, "finding_title")

    @_builtins.property
    @pulumi.getter(name="isRiskDeferred")
    def is_risk_deferred(self) -> _builtins.bool:
        """
        A filter to check findings whose risks were deferred by the user.
        """
        return pulumi.get(self, "is_risk_deferred")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        The justification given by the user for accepting or modifying the risk level.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the finding risk change.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="modifiedBy")
    def modified_by(self) -> _builtins.str:
        """
        A filter to check which user modified the risk level of the finding.
        """
        return pulumi.get(self, "modified_by")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment by Oracle.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter(name="previousSeverity")
    def previous_severity(self) -> _builtins.str:
        """
        If the risk level is changed more than once, the previous modified value.
        """
        return pulumi.get(self, "previous_severity")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        A filter to return only findings of a particular risk level.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the risk level change as updated by user is valid until. After this date passes, the risk level will be that of what is determined by the latest security assessment.
        """
        return pulumi.get(self, "time_valid_until")


@pulumi.output_type
class GetSecurityAssessmentFindingsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentFindingsFindingResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 details: Sequence[_builtins.str],
                 doclink: _builtins.str,
                 has_target_db_risk_level_changed: _builtins.bool,
                 is_risk_modified: _builtins.bool,
                 is_top_finding: _builtins.bool,
                 justification: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 oneline: _builtins.str,
                 oracle_defined_severity: _builtins.str,
                 references: Sequence['outputs.GetSecurityAssessmentFindingsFindingReferenceResult'],
                 remarks: _builtins.str,
                 severity: _builtins.str,
                 state: _builtins.str,
                 summary: _builtins.str,
                 target_id: _builtins.str,
                 time_updated: _builtins.str,
                 time_valid_until: _builtins.str,
                 title: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generated this finding.
        :param Sequence[_builtins.str] details: The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        :param _builtins.str doclink: Documentation link provided by Oracle that explains a specific security finding or check.
        :param _builtins.bool has_target_db_risk_level_changed: Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        :param _builtins.bool is_risk_modified: Determines if this risk level was modified by user.
        :param _builtins.bool is_top_finding: A filter to return only the findings that are marked as top findings.
        :param _builtins.str justification: User provided reason for accepting or modifying this finding if they choose to do so.
        :param _builtins.str key: The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
        :param _builtins.str lifecycle_details: Details about the current state of the finding.
        :param _builtins.str oneline: Provides a recommended approach to take to remediate the finding reported.
        :param _builtins.str oracle_defined_severity: The severity of the finding as determined by security assessment. This cannot be modified by user.
        :param Sequence['GetSecurityAssessmentFindingsFindingReferenceArgs'] references: An optional filter to return only findings that match the specified reference.
        :param _builtins.str remarks: The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        :param _builtins.str severity: A filter to return only findings of a particular risk level.
        :param _builtins.str state: A filter to return only the findings that match the specified lifecycle states.
        :param _builtins.str summary: The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_updated: The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_valid_until: The time until which the change in severity(deferred / modified) of this finding is valid.
        :param _builtins.str title: The short title for the finding.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "doclink", doclink)
        pulumi.set(__self__, "has_target_db_risk_level_changed", has_target_db_risk_level_changed)
        pulumi.set(__self__, "is_risk_modified", is_risk_modified)
        pulumi.set(__self__, "is_top_finding", is_top_finding)
        pulumi.set(__self__, "justification", justification)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "oneline", oneline)
        pulumi.set(__self__, "oracle_defined_severity", oracle_defined_severity)
        pulumi.set(__self__, "references", references)
        pulumi.set(__self__, "remarks", remarks)
        pulumi.set(__self__, "severity", severity)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "time_valid_until", time_valid_until)
        pulumi.set(__self__, "title", title)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generated this finding.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter
    def details(self) -> Sequence[_builtins.str]:
        """
        The details of the finding. Provides detailed information to explain the finding summary, typically results from the assessed database, followed by any recommendations for changes.
        """
        return pulumi.get(self, "details")

    @_builtins.property
    @pulumi.getter
    def doclink(self) -> _builtins.str:
        """
        Documentation link provided by Oracle that explains a specific security finding or check.
        """
        return pulumi.get(self, "doclink")

    @_builtins.property
    @pulumi.getter(name="hasTargetDbRiskLevelChanged")
    def has_target_db_risk_level_changed(self) -> _builtins.bool:
        """
        Determines if this risk level has changed on the target database since the last time 'severity' was modified by user.
        """
        return pulumi.get(self, "has_target_db_risk_level_changed")

    @_builtins.property
    @pulumi.getter(name="isRiskModified")
    def is_risk_modified(self) -> _builtins.bool:
        """
        Determines if this risk level was modified by user.
        """
        return pulumi.get(self, "is_risk_modified")

    @_builtins.property
    @pulumi.getter(name="isTopFinding")
    def is_top_finding(self) -> _builtins.bool:
        """
        A filter to return only the findings that are marked as top findings.
        """
        return pulumi.get(self, "is_top_finding")

    @_builtins.property
    @pulumi.getter
    def justification(self) -> _builtins.str:
        """
        User provided reason for accepting or modifying this finding if they choose to do so.
        """
        return pulumi.get(self, "justification")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique finding key. This is a system-generated identifier. To get the finding key for a finding, use ListFindings.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the finding.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def oneline(self) -> _builtins.str:
        """
        Provides a recommended approach to take to remediate the finding reported.
        """
        return pulumi.get(self, "oneline")

    @_builtins.property
    @pulumi.getter(name="oracleDefinedSeverity")
    def oracle_defined_severity(self) -> _builtins.str:
        """
        The severity of the finding as determined by security assessment. This cannot be modified by user.
        """
        return pulumi.get(self, "oracle_defined_severity")

    @_builtins.property
    @pulumi.getter
    def references(self) -> Sequence['outputs.GetSecurityAssessmentFindingsFindingReferenceResult']:
        """
        An optional filter to return only findings that match the specified reference.
        """
        return pulumi.get(self, "references")

    @_builtins.property
    @pulumi.getter
    def remarks(self) -> _builtins.str:
        """
        The explanation of the issue in this finding. It explains the reason for the rule and, if a risk is reported, it may also explain the recommended actions for remediation.
        """
        return pulumi.get(self, "remarks")

    @_builtins.property
    @pulumi.getter
    def severity(self) -> _builtins.str:
        """
        A filter to return only findings of a particular risk level.
        """
        return pulumi.get(self, "severity")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the findings that match the specified lifecycle states.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def summary(self) -> _builtins.str:
        """
        The brief summary of the finding. When the finding is informational, the summary typically reports only the number of data elements that were examined.
        """
        return pulumi.get(self, "summary")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the risk level of finding was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="timeValidUntil")
    def time_valid_until(self) -> _builtins.str:
        """
        The time until which the change in severity(deferred / modified) of this finding is valid.
        """
        return pulumi.get(self, "time_valid_until")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        """
        The short title for the finding.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentFindingsFindingReferenceResult(dict):
    def __init__(__self__, *,
                 cis: _builtins.str,
                 gdpr: _builtins.str,
                 obp: _builtins.str,
                 orp: _builtins.str,
                 stig: _builtins.str):
        """
        :param _builtins.str cis: Relevant section from CIS.
        :param _builtins.str gdpr: Relevant section from GDPR.
        :param _builtins.str obp: Relevant section from OBP.
        :param _builtins.str orp: Relevant section from ORP.
        :param _builtins.str stig: Relevant section from STIG.
        """
        pulumi.set(__self__, "cis", cis)
        pulumi.set(__self__, "gdpr", gdpr)
        pulumi.set(__self__, "obp", obp)
        pulumi.set(__self__, "orp", orp)
        pulumi.set(__self__, "stig", stig)

    @_builtins.property
    @pulumi.getter
    def cis(self) -> _builtins.str:
        """
        Relevant section from CIS.
        """
        return pulumi.get(self, "cis")

    @_builtins.property
    @pulumi.getter
    def gdpr(self) -> _builtins.str:
        """
        Relevant section from GDPR.
        """
        return pulumi.get(self, "gdpr")

    @_builtins.property
    @pulumi.getter
    def obp(self) -> _builtins.str:
        """
        Relevant section from OBP.
        """
        return pulumi.get(self, "obp")

    @_builtins.property
    @pulumi.getter
    def orp(self) -> _builtins.str:
        """
        Relevant section from ORP.
        """
        return pulumi.get(self, "orp")

    @_builtins.property
    @pulumi.getter
    def stig(self) -> _builtins.str:
        """
        Relevant section from STIG.
        """
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentSecurityFeatureAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemArgs'] items: The array of database security feature analytics summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemResult']:
        """
        The array of database security feature analytics summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemDimensionResult'],
                 metric_name: _builtins.str,
                 security_assessment_security_feature_analytic_count: _builtins.str):
        """
        :param Sequence['GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemDimensionArgs'] dimensions: The scope of analytics data.
        :param _builtins.str metric_name: The name of the aggregation metric.
        :param _builtins.str security_assessment_security_feature_analytic_count: The total count for the aggregation metric.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "security_assessment_security_feature_analytic_count", security_assessment_security_feature_analytic_count)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemDimensionResult']:
        """
        The scope of analytics data.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The name of the aggregation metric.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter(name="securityAssessmentSecurityFeatureAnalyticCount")
    def security_assessment_security_feature_analytic_count(self) -> _builtins.str:
        """
        The total count for the aggregation metric.
        """
        return pulumi.get(self, "security_assessment_security_feature_analytic_count")


@pulumi.output_type
class GetSecurityAssessmentSecurityFeatureAnalyticsSecurityFeatureAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 security_feature: _builtins.str):
        """
        :param _builtins.str security_feature: The name of the security feature.
        """
        pulumi.set(__self__, "security_feature", security_feature)

    @_builtins.property
    @pulumi.getter(name="securityFeature")
    def security_feature(self) -> _builtins.str:
        """
        The name of the security feature.
        """
        return pulumi.get(self, "security_feature")


@pulumi.output_type
class GetSecurityAssessmentSecurityFeaturesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItemResult']):
        """
        :param Sequence['GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItemArgs'] items: Array of database security feature summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItemResult']:
        """
        Array of database security feature summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityAssessmentSecurityFeaturesSecurityFeatureCollectionItemResult(dict):
    def __init__(__self__, *,
                 assessment_id: _builtins.str,
                 column_encryption: _builtins.str,
                 compartment_id: _builtins.str,
                 database_vault: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 external_authentication: _builtins.str,
                 fine_grained_audit: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 global_authentication: _builtins.str,
                 network_encryption: _builtins.str,
                 password_authentication: _builtins.str,
                 privilege_analysis: _builtins.str,
                 tablespace_encryption: _builtins.str,
                 target_id: _builtins.str,
                 traditional_audit: _builtins.str,
                 unified_audit: _builtins.str):
        """
        :param _builtins.str assessment_id: The OCID of the assessment that generates this security feature usage result.
        :param _builtins.str column_encryption: The usage of security feature - Column Encryption.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str database_vault: The usage of security feature - Database Vault.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str external_authentication: The usage of security feature - External Authentication.
        :param _builtins.str fine_grained_audit: The usage of security feature - Fine Grained Audit.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str global_authentication: The usage of security feature - Global Authentication.
        :param _builtins.str network_encryption: The usage of security feature - Network Encryption.
        :param _builtins.str password_authentication: The usage of security feature - Password Authentication.
        :param _builtins.str privilege_analysis: The usage of security feature - Privilege Analysis.
        :param _builtins.str tablespace_encryption: The usage of security feature - Tablespace Encryption.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str traditional_audit: The usage of security feature - Traditional Audit.
        :param _builtins.str unified_audit: The usage of security feature - Unified Audit.
        """
        pulumi.set(__self__, "assessment_id", assessment_id)
        pulumi.set(__self__, "column_encryption", column_encryption)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "database_vault", database_vault)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "external_authentication", external_authentication)
        pulumi.set(__self__, "fine_grained_audit", fine_grained_audit)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "global_authentication", global_authentication)
        pulumi.set(__self__, "network_encryption", network_encryption)
        pulumi.set(__self__, "password_authentication", password_authentication)
        pulumi.set(__self__, "privilege_analysis", privilege_analysis)
        pulumi.set(__self__, "tablespace_encryption", tablespace_encryption)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "traditional_audit", traditional_audit)
        pulumi.set(__self__, "unified_audit", unified_audit)

    @_builtins.property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> _builtins.str:
        """
        The OCID of the assessment that generates this security feature usage result.
        """
        return pulumi.get(self, "assessment_id")

    @_builtins.property
    @pulumi.getter(name="columnEncryption")
    def column_encryption(self) -> _builtins.str:
        """
        The usage of security feature - Column Encryption.
        """
        return pulumi.get(self, "column_encryption")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="databaseVault")
    def database_vault(self) -> _builtins.str:
        """
        The usage of security feature - Database Vault.
        """
        return pulumi.get(self, "database_vault")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="externalAuthentication")
    def external_authentication(self) -> _builtins.str:
        """
        The usage of security feature - External Authentication.
        """
        return pulumi.get(self, "external_authentication")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAudit")
    def fine_grained_audit(self) -> _builtins.str:
        """
        The usage of security feature - Fine Grained Audit.
        """
        return pulumi.get(self, "fine_grained_audit")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter(name="globalAuthentication")
    def global_authentication(self) -> _builtins.str:
        """
        The usage of security feature - Global Authentication.
        """
        return pulumi.get(self, "global_authentication")

    @_builtins.property
    @pulumi.getter(name="networkEncryption")
    def network_encryption(self) -> _builtins.str:
        """
        The usage of security feature - Network Encryption.
        """
        return pulumi.get(self, "network_encryption")

    @_builtins.property
    @pulumi.getter(name="passwordAuthentication")
    def password_authentication(self) -> _builtins.str:
        """
        The usage of security feature - Password Authentication.
        """
        return pulumi.get(self, "password_authentication")

    @_builtins.property
    @pulumi.getter(name="privilegeAnalysis")
    def privilege_analysis(self) -> _builtins.str:
        """
        The usage of security feature - Privilege Analysis.
        """
        return pulumi.get(self, "privilege_analysis")

    @_builtins.property
    @pulumi.getter(name="tablespaceEncryption")
    def tablespace_encryption(self) -> _builtins.str:
        """
        The usage of security feature - Tablespace Encryption.
        """
        return pulumi.get(self, "tablespace_encryption")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="traditionalAudit")
    def traditional_audit(self) -> _builtins.str:
        """
        The usage of security feature - Traditional Audit.
        """
        return pulumi.get(self, "traditional_audit")

    @_builtins.property
    @pulumi.getter(name="unifiedAudit")
    def unified_audit(self) -> _builtins.str:
        """
        The usage of security feature - Unified Audit.
        """
        return pulumi.get(self, "unified_audit")


@pulumi.output_type
class GetSecurityAssessmentStatisticResult(dict):
    def __init__(__self__, *,
                 advisories: Sequence['outputs.GetSecurityAssessmentStatisticAdvisoryResult'],
                 deferreds: Sequence['outputs.GetSecurityAssessmentStatisticDeferredResult'],
                 evaluates: Sequence['outputs.GetSecurityAssessmentStatisticEvaluateResult'],
                 high_risks: Sequence['outputs.GetSecurityAssessmentStatisticHighRiskResult'],
                 low_risks: Sequence['outputs.GetSecurityAssessmentStatisticLowRiskResult'],
                 medium_risks: Sequence['outputs.GetSecurityAssessmentStatisticMediumRiskResult'],
                 passes: Sequence['outputs.GetSecurityAssessmentStatisticPassResult'],
                 targets_count: _builtins.int):
        """
        :param Sequence['GetSecurityAssessmentStatisticAdvisoryArgs'] advisories: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentStatisticDeferredArgs'] deferreds: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentStatisticEvaluateArgs'] evaluates: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentStatisticHighRiskArgs'] high_risks: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentStatisticLowRiskArgs'] low_risks: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentStatisticMediumRiskArgs'] medium_risks: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentStatisticPassArgs'] passes: Statistics showing the number of findings with a particular risk level for each category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        """
        pulumi.set(__self__, "advisories", advisories)
        pulumi.set(__self__, "deferreds", deferreds)
        pulumi.set(__self__, "evaluates", evaluates)
        pulumi.set(__self__, "high_risks", high_risks)
        pulumi.set(__self__, "low_risks", low_risks)
        pulumi.set(__self__, "medium_risks", medium_risks)
        pulumi.set(__self__, "passes", passes)
        pulumi.set(__self__, "targets_count", targets_count)

    @_builtins.property
    @pulumi.getter
    def advisories(self) -> Sequence['outputs.GetSecurityAssessmentStatisticAdvisoryResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "advisories")

    @_builtins.property
    @pulumi.getter
    def deferreds(self) -> Sequence['outputs.GetSecurityAssessmentStatisticDeferredResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "deferreds")

    @_builtins.property
    @pulumi.getter
    def evaluates(self) -> Sequence['outputs.GetSecurityAssessmentStatisticEvaluateResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "evaluates")

    @_builtins.property
    @pulumi.getter(name="highRisks")
    def high_risks(self) -> Sequence['outputs.GetSecurityAssessmentStatisticHighRiskResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "high_risks")

    @_builtins.property
    @pulumi.getter(name="lowRisks")
    def low_risks(self) -> Sequence['outputs.GetSecurityAssessmentStatisticLowRiskResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "low_risks")

    @_builtins.property
    @pulumi.getter(name="mediumRisks")
    def medium_risks(self) -> Sequence['outputs.GetSecurityAssessmentStatisticMediumRiskResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "medium_risks")

    @_builtins.property
    @pulumi.getter
    def passes(self) -> Sequence['outputs.GetSecurityAssessmentStatisticPassResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "passes")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticAdvisoryResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticDeferredResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticEvaluateResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticHighRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticLowRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticMediumRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticPassResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 ignored_assessment_ids: Sequence[_builtins.str],
                 ignored_targets: Sequence[_builtins.str],
                 is_assessment_scheduled: _builtins.bool,
                 is_baseline: _builtins.bool,
                 is_deviated_from_baseline: _builtins.bool,
                 last_compared_baseline_id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 link: _builtins.str,
                 schedule: _builtins.str,
                 schedule_security_assessment_id: _builtins.str,
                 state: _builtins.str,
                 statistics: Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticResult'],
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 target_ids: Sequence[_builtins.str],
                 target_version: _builtins.str,
                 time_created: _builtins.str,
                 time_last_assessed: _builtins.str,
                 time_updated: _builtins.str,
                 triggered_by: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the security assessment.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the security assessment.
        :param Sequence[_builtins.str] ignored_assessment_ids: List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        :param Sequence[_builtins.str] ignored_targets: List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        :param _builtins.bool is_assessment_scheduled: Indicates whether the assessment is scheduled to run.
        :param _builtins.bool is_baseline: A filter to return only the security assessments that are set as a baseline.
        :param _builtins.bool is_deviated_from_baseline: Indicates whether or not the security assessment deviates from the baseline.
        :param _builtins.str last_compared_baseline_id: The OCID of the baseline against which the latest security assessment was compared.
        :param _builtins.str lifecycle_details: Details about the current state of the security assessment.
        :param _builtins.str link: The summary of findings for the security assessment.
        :param _builtins.str schedule: Schedule of the assessment that runs periodically in the specified format: - <version-string>;<version-specific-schedule>
        :param _builtins.str schedule_security_assessment_id: The OCID of the security assessment that is responsible for creating this scheduled save assessment.
        :param _builtins.str state: A filter to return only resources that match the specified lifecycle state.
        :param Sequence['GetSecurityAssessmentsSecurityAssessmentStatisticArgs'] statistics: Statistics showing the number of findings for each category grouped by risk levels for all the targets in the specified security assessment.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param Sequence[_builtins.str] target_ids: Array of database target OCIDs.
        :param _builtins.str target_version: The version of the target database.
        :param _builtins.str time_created: The date and time the security assessment was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_last_assessed: The date and time the security assessment was last executed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the security assessment was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str triggered_by: A filter to return only security assessments that were created by either user or system.
        :param _builtins.str type: A filter to return only items that match the specified security assessment type.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ignored_assessment_ids", ignored_assessment_ids)
        pulumi.set(__self__, "ignored_targets", ignored_targets)
        pulumi.set(__self__, "is_assessment_scheduled", is_assessment_scheduled)
        pulumi.set(__self__, "is_baseline", is_baseline)
        pulumi.set(__self__, "is_deviated_from_baseline", is_deviated_from_baseline)
        pulumi.set(__self__, "last_compared_baseline_id", last_compared_baseline_id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "link", link)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "schedule_security_assessment_id", schedule_security_assessment_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "statistics", statistics)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_ids", target_ids)
        pulumi.set(__self__, "target_version", target_version)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_assessed", time_last_assessed)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "triggered_by", triggered_by)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the security assessment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the security assessment.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ignoredAssessmentIds")
    def ignored_assessment_ids(self) -> Sequence[_builtins.str]:
        """
        List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        """
        return pulumi.get(self, "ignored_assessment_ids")

    @_builtins.property
    @pulumi.getter(name="ignoredTargets")
    def ignored_targets(self) -> Sequence[_builtins.str]:
        """
        List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        """
        return pulumi.get(self, "ignored_targets")

    @_builtins.property
    @pulumi.getter(name="isAssessmentScheduled")
    def is_assessment_scheduled(self) -> _builtins.bool:
        """
        Indicates whether the assessment is scheduled to run.
        """
        return pulumi.get(self, "is_assessment_scheduled")

    @_builtins.property
    @pulumi.getter(name="isBaseline")
    def is_baseline(self) -> _builtins.bool:
        """
        A filter to return only the security assessments that are set as a baseline.
        """
        return pulumi.get(self, "is_baseline")

    @_builtins.property
    @pulumi.getter(name="isDeviatedFromBaseline")
    def is_deviated_from_baseline(self) -> _builtins.bool:
        """
        Indicates whether or not the security assessment deviates from the baseline.
        """
        return pulumi.get(self, "is_deviated_from_baseline")

    @_builtins.property
    @pulumi.getter(name="lastComparedBaselineId")
    def last_compared_baseline_id(self) -> _builtins.str:
        """
        The OCID of the baseline against which the latest security assessment was compared.
        """
        return pulumi.get(self, "last_compared_baseline_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the security assessment.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def link(self) -> _builtins.str:
        """
        The summary of findings for the security assessment.
        """
        return pulumi.get(self, "link")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> _builtins.str:
        """
        Schedule of the assessment that runs periodically in the specified format: - <version-string>;<version-specific-schedule>
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter(name="scheduleSecurityAssessmentId")
    def schedule_security_assessment_id(self) -> _builtins.str:
        """
        The OCID of the security assessment that is responsible for creating this scheduled save assessment.
        """
        return pulumi.get(self, "schedule_security_assessment_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def statistics(self) -> Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticResult']:
        """
        Statistics showing the number of findings for each category grouped by risk levels for all the targets in the specified security assessment.
        """
        return pulumi.get(self, "statistics")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Sequence[_builtins.str]:
        """
        Array of database target OCIDs.
        """
        return pulumi.get(self, "target_ids")

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> _builtins.str:
        """
        The version of the target database.
        """
        return pulumi.get(self, "target_version")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the security assessment was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeLastAssessed")
    def time_last_assessed(self) -> _builtins.str:
        """
        The date and time the security assessment was last executed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_last_assessed")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the security assessment was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="triggeredBy")
    def triggered_by(self) -> _builtins.str:
        """
        A filter to return only security assessments that were created by either user or system.
        """
        return pulumi.get(self, "triggered_by")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        A filter to return only items that match the specified security assessment type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticResult(dict):
    def __init__(__self__, *,
                 advisories: Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticAdvisoryResult'],
                 deferreds: Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticDeferredResult'],
                 evaluates: Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticEvaluateResult'],
                 high_risks: Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticHighRiskResult'],
                 low_risks: Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticLowRiskResult'],
                 medium_risks: Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticMediumRiskResult'],
                 passes: Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticPassResult'],
                 targets_count: _builtins.int):
        """
        :param Sequence['GetSecurityAssessmentsSecurityAssessmentStatisticAdvisoryArgs'] advisories: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentsSecurityAssessmentStatisticDeferredArgs'] deferreds: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentsSecurityAssessmentStatisticEvaluateArgs'] evaluates: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentsSecurityAssessmentStatisticHighRiskArgs'] high_risks: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentsSecurityAssessmentStatisticLowRiskArgs'] low_risks: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentsSecurityAssessmentStatisticMediumRiskArgs'] medium_risks: Statistics showing the number of findings with a particular risk level for each category.
        :param Sequence['GetSecurityAssessmentsSecurityAssessmentStatisticPassArgs'] passes: Statistics showing the number of findings with a particular risk level for each category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        """
        pulumi.set(__self__, "advisories", advisories)
        pulumi.set(__self__, "deferreds", deferreds)
        pulumi.set(__self__, "evaluates", evaluates)
        pulumi.set(__self__, "high_risks", high_risks)
        pulumi.set(__self__, "low_risks", low_risks)
        pulumi.set(__self__, "medium_risks", medium_risks)
        pulumi.set(__self__, "passes", passes)
        pulumi.set(__self__, "targets_count", targets_count)

    @_builtins.property
    @pulumi.getter
    def advisories(self) -> Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticAdvisoryResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "advisories")

    @_builtins.property
    @pulumi.getter
    def deferreds(self) -> Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticDeferredResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "deferreds")

    @_builtins.property
    @pulumi.getter
    def evaluates(self) -> Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticEvaluateResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "evaluates")

    @_builtins.property
    @pulumi.getter(name="highRisks")
    def high_risks(self) -> Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticHighRiskResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "high_risks")

    @_builtins.property
    @pulumi.getter(name="lowRisks")
    def low_risks(self) -> Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticLowRiskResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "low_risks")

    @_builtins.property
    @pulumi.getter(name="mediumRisks")
    def medium_risks(self) -> Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticMediumRiskResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "medium_risks")

    @_builtins.property
    @pulumi.getter
    def passes(self) -> Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticPassResult']:
        """
        Statistics showing the number of findings with a particular risk level for each category.
        """
        return pulumi.get(self, "passes")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticAdvisoryResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticDeferredResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticEvaluateResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticHighRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticLowRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticMediumRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticPassResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: _builtins.int,
                 authorization_control_findings_count: _builtins.int,
                 data_encryption_findings_count: _builtins.int,
                 db_configuration_findings_count: _builtins.int,
                 fine_grained_access_control_findings_count: _builtins.int,
                 privileges_and_roles_findings_count: _builtins.int,
                 targets_count: _builtins.int,
                 user_accounts_findings_count: _builtins.int):
        """
        :param _builtins.int auditing_findings_count: The number of findings in the Auditing category.
        :param _builtins.int authorization_control_findings_count: The number of findings in the Authorization Control category.
        :param _builtins.int data_encryption_findings_count: The number of findings in the Data Encryption category.
        :param _builtins.int db_configuration_findings_count: The number of findings in the Database Configuration category.
        :param _builtins.int fine_grained_access_control_findings_count: The number of findings in the Fine-Grained Access Control category.
        :param _builtins.int privileges_and_roles_findings_count: The number of findings in the Privileges and Roles category.
        :param _builtins.int targets_count: The total number of targets in this security assessment.
        :param _builtins.int user_accounts_findings_count: The number of findings in the User Accounts category.
        """
        pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        pulumi.set(__self__, "targets_count", targets_count)
        pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @_builtins.property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Auditing category.
        """
        return pulumi.get(self, "auditing_findings_count")

    @_builtins.property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Authorization Control category.
        """
        return pulumi.get(self, "authorization_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Data Encryption category.
        """
        return pulumi.get(self, "data_encryption_findings_count")

    @_builtins.property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Database Configuration category.
        """
        return pulumi.get(self, "db_configuration_findings_count")

    @_builtins.property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Fine-Grained Access Control category.
        """
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @_builtins.property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> _builtins.int:
        """
        The number of findings in the Privileges and Roles category.
        """
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @_builtins.property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> _builtins.int:
        """
        The total number of targets in this security assessment.
        """
        return pulumi.get(self, "targets_count")

    @_builtins.property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> _builtins.int:
        """
        The number of findings in the User Accounts category.
        """
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPoliciesSecurityPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityPoliciesSecurityPolicyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityPoliciesSecurityPolicyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPoliciesSecurityPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 security_policy_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the security policy.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the security policy.
        :param _builtins.str lifecycle_details: Details about the current state of the security policy in Data Safe.
        :param _builtins.str security_policy_id: An optional filter to return only resources that match the specified OCID of the security policy resource.
        :param _builtins.str state: The current state of the security policy.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time that the security policy was created, in the format defined by RFC3339.
        :param _builtins.str time_updated: The last date and time the security policy was updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the security policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the security policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the security policy in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified OCID of the security policy resource.
        """
        return pulumi.get(self, "security_policy_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the security policy.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time that the security policy was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The last date and time the security policy was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStateEntryDetailResult(dict):
    def __init__(__self__, *,
                 entry_type: _builtins.str,
                 time_generated: _builtins.str,
                 time_status_updated: _builtins.str):
        """
        :param _builtins.str entry_type: The security policy entry type. Allowed values:
               * FIREWALL_POLICY - The SQL Firewall policy entry type.
        :param _builtins.str time_generated: The time the the SQL Firewall policy was generated on the target database, in the format defined by RFC3339.
        :param _builtins.str time_status_updated: The last date and time the status of the SQL Firewall policy was updated on the target database, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "entry_type", entry_type)
        pulumi.set(__self__, "time_generated", time_generated)
        pulumi.set(__self__, "time_status_updated", time_status_updated)

    @_builtins.property
    @pulumi.getter(name="entryType")
    def entry_type(self) -> _builtins.str:
        """
        The security policy entry type. Allowed values:
        * FIREWALL_POLICY - The SQL Firewall policy entry type.
        """
        return pulumi.get(self, "entry_type")

    @_builtins.property
    @pulumi.getter(name="timeGenerated")
    def time_generated(self) -> _builtins.str:
        """
        The time the the SQL Firewall policy was generated on the target database, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_generated")

    @_builtins.property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> _builtins.str:
        """
        The last date and time the status of the SQL Firewall policy was updated on the target database, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_status_updated")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStatesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemResult(dict):
    def __init__(__self__, *,
                 deployment_status: _builtins.str,
                 entry_details: Sequence['outputs.GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetailResult'],
                 id: _builtins.str,
                 security_policy_deployment_id: _builtins.str,
                 security_policy_entry_id: _builtins.str):
        """
        :param _builtins.str deployment_status: The current state of the security policy deployment.
        :param Sequence['GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetailArgs'] entry_details: Details specific to the security policy entry.
        :param _builtins.str id: Unique id of the security policy entry state.
        :param _builtins.str security_policy_deployment_id: The OCID of the security policy deployment resource.
        :param _builtins.str security_policy_entry_id: An optional filter to return only resources that match the specified security policy entry OCID.
        """
        pulumi.set(__self__, "deployment_status", deployment_status)
        pulumi.set(__self__, "entry_details", entry_details)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "security_policy_deployment_id", security_policy_deployment_id)
        pulumi.set(__self__, "security_policy_entry_id", security_policy_entry_id)

    @_builtins.property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> _builtins.str:
        """
        The current state of the security policy deployment.
        """
        return pulumi.get(self, "deployment_status")

    @_builtins.property
    @pulumi.getter(name="entryDetails")
    def entry_details(self) -> Sequence['outputs.GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetailResult']:
        """
        Details specific to the security policy entry.
        """
        return pulumi.get(self, "entry_details")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Unique id of the security policy entry state.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="securityPolicyDeploymentId")
    def security_policy_deployment_id(self) -> _builtins.str:
        """
        The OCID of the security policy deployment resource.
        """
        return pulumi.get(self, "security_policy_deployment_id")

    @_builtins.property
    @pulumi.getter(name="securityPolicyEntryId")
    def security_policy_entry_id(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified security policy entry OCID.
        """
        return pulumi.get(self, "security_policy_entry_id")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetailResult(dict):
    def __init__(__self__, *,
                 entry_type: _builtins.str,
                 time_generated: _builtins.str,
                 time_status_updated: _builtins.str):
        """
        :param _builtins.str entry_type: The security policy entry type. Allowed values:
               * FIREWALL_POLICY - The SQL Firewall policy entry type.
        :param _builtins.str time_generated: The time the the SQL Firewall policy was generated on the target database, in the format defined by RFC3339.
        :param _builtins.str time_status_updated: The last date and time the status of the SQL Firewall policy was updated on the target database, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "entry_type", entry_type)
        pulumi.set(__self__, "time_generated", time_generated)
        pulumi.set(__self__, "time_status_updated", time_status_updated)

    @_builtins.property
    @pulumi.getter(name="entryType")
    def entry_type(self) -> _builtins.str:
        """
        The security policy entry type. Allowed values:
        * FIREWALL_POLICY - The SQL Firewall policy entry type.
        """
        return pulumi.get(self, "entry_type")

    @_builtins.property
    @pulumi.getter(name="timeGenerated")
    def time_generated(self) -> _builtins.str:
        """
        The time the the SQL Firewall policy was generated on the target database, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_generated")

    @_builtins.property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> _builtins.str:
        """
        The last date and time the status of the SQL Firewall policy was updated on the target database, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_status_updated")


@pulumi.output_type
class GetSecurityPolicyDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 security_policy_deployment_id: _builtins.str,
                 security_policy_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the security policy deployment.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the security policy deployment.
        :param _builtins.str lifecycle_details: Details about the current state of the security policy deployment in Data Safe.
        :param _builtins.str security_policy_deployment_id: An optional filter to return only resources that match the specified OCID of the security policy deployment resource.
        :param _builtins.str security_policy_id: An optional filter to return only resources that match the specified OCID of the security policy resource.
        :param _builtins.str state: The current state of the security policy deployment.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The time that the security policy deployment was created, in the format defined by RFC3339.
        :param _builtins.str time_updated: The last date and time the security policy deployment was updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "security_policy_deployment_id", security_policy_deployment_id)
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the security policy deployment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the security policy deployment.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the security policy deployment in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="securityPolicyDeploymentId")
    def security_policy_deployment_id(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified OCID of the security policy deployment resource.
        """
        return pulumi.get(self, "security_policy_deployment_id")

    @_builtins.property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified OCID of the security policy resource.
        """
        return pulumi.get(self, "security_policy_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the security policy deployment.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time that the security policy deployment was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The last date and time the security policy deployment was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSecurityPolicyReportDatabaseTableAccessEntriesDatabaseTableAccessEntryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityPolicyReportDatabaseTableAccessEntriesDatabaseTableAccessEntryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityPolicyReportDatabaseTableAccessEntriesDatabaseTableAccessEntryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPolicyReportDatabaseTableAccessEntriesDatabaseTableAccessEntryCollectionItemResult(dict):
    def __init__(__self__, *,
                 access_through_object: _builtins.str,
                 access_type: _builtins.str,
                 are_all_tables_accessible: _builtins.bool,
                 column_name: _builtins.str,
                 grant_from_role: _builtins.str,
                 grantee: _builtins.str,
                 grantor: _builtins.str,
                 is_access_constrained_by_database_vault: _builtins.bool,
                 is_access_constrained_by_label_security: _builtins.bool,
                 is_access_constrained_by_real_application_security: _builtins.bool,
                 is_access_constrained_by_redaction: _builtins.bool,
                 is_access_constrained_by_sql_firewall: _builtins.bool,
                 is_access_constrained_by_view: _builtins.bool,
                 is_access_constrained_by_virtual_private_database: _builtins.bool,
                 is_sensitive: _builtins.bool,
                 key: _builtins.str,
                 privilege: _builtins.str,
                 privilege_grantable: _builtins.str,
                 privilege_type: _builtins.str,
                 table_name: _builtins.str,
                 table_schema: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str access_through_object: A non-null value in this field indicates the object through which user has access to table, possible values could be table or view.
        :param _builtins.str access_type: The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT, OWNER or DELETE.
        :param _builtins.bool are_all_tables_accessible: Indicates whether the user has access to all the tables in the schema.
        :param _builtins.str column_name: If there are column level privileges on a table or view.
        :param _builtins.str grant_from_role: This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
        :param _builtins.str grantee: Grantee is the user who can access the table
        :param _builtins.str grantor: The one who granted this privilege.
        :param _builtins.bool is_access_constrained_by_database_vault: Indicates whether the table access is constrained via Oracle Database Vault.
        :param _builtins.bool is_access_constrained_by_label_security: Indicates whether the table access is constrained via Oracle Label Security.
        :param _builtins.bool is_access_constrained_by_real_application_security: Indicates whether the table access is constrained via Real Application Security.
        :param _builtins.bool is_access_constrained_by_redaction: Indicates whether the table access is constrained via Oracle Data Redaction.
        :param _builtins.bool is_access_constrained_by_sql_firewall: Indicates whether the table access is constrained via Oracle Database SQL Firewall.
        :param _builtins.bool is_access_constrained_by_view: Indicates whether the access is constrained on a table via a view.
        :param _builtins.bool is_access_constrained_by_virtual_private_database: Indicates whether the table access is constrained via Virtual Private Database.
        :param _builtins.bool is_sensitive: Indicates whether the table is marked as sensitive.
        :param _builtins.str key: The unique key that identifies the table access report. It is numeric and unique within a security policy report.
        :param _builtins.str privilege: Name of the privilege.
        :param _builtins.str privilege_grantable: Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
        :param _builtins.str privilege_type: Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
        :param _builtins.str table_name: The name of the database table the user has access to.
        :param _builtins.str table_schema: The name of the schema the table belongs to.
        :param _builtins.str target_id: The OCID of the of the  target database.
        """
        pulumi.set(__self__, "access_through_object", access_through_object)
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "are_all_tables_accessible", are_all_tables_accessible)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "grant_from_role", grant_from_role)
        pulumi.set(__self__, "grantee", grantee)
        pulumi.set(__self__, "grantor", grantor)
        pulumi.set(__self__, "is_access_constrained_by_database_vault", is_access_constrained_by_database_vault)
        pulumi.set(__self__, "is_access_constrained_by_label_security", is_access_constrained_by_label_security)
        pulumi.set(__self__, "is_access_constrained_by_real_application_security", is_access_constrained_by_real_application_security)
        pulumi.set(__self__, "is_access_constrained_by_redaction", is_access_constrained_by_redaction)
        pulumi.set(__self__, "is_access_constrained_by_sql_firewall", is_access_constrained_by_sql_firewall)
        pulumi.set(__self__, "is_access_constrained_by_view", is_access_constrained_by_view)
        pulumi.set(__self__, "is_access_constrained_by_virtual_private_database", is_access_constrained_by_virtual_private_database)
        pulumi.set(__self__, "is_sensitive", is_sensitive)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "privilege", privilege)
        pulumi.set(__self__, "privilege_grantable", privilege_grantable)
        pulumi.set(__self__, "privilege_type", privilege_type)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "table_schema", table_schema)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter(name="accessThroughObject")
    def access_through_object(self) -> _builtins.str:
        """
        A non-null value in this field indicates the object through which user has access to table, possible values could be table or view.
        """
        return pulumi.get(self, "access_through_object")

    @_builtins.property
    @pulumi.getter(name="accessType")
    def access_type(self) -> _builtins.str:
        """
        The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT, OWNER or DELETE.
        """
        return pulumi.get(self, "access_type")

    @_builtins.property
    @pulumi.getter(name="areAllTablesAccessible")
    def are_all_tables_accessible(self) -> _builtins.bool:
        """
        Indicates whether the user has access to all the tables in the schema.
        """
        return pulumi.get(self, "are_all_tables_accessible")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        If there are column level privileges on a table or view.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter(name="grantFromRole")
    def grant_from_role(self) -> _builtins.str:
        """
        This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
        """
        return pulumi.get(self, "grant_from_role")

    @_builtins.property
    @pulumi.getter
    def grantee(self) -> _builtins.str:
        """
        Grantee is the user who can access the table
        """
        return pulumi.get(self, "grantee")

    @_builtins.property
    @pulumi.getter
    def grantor(self) -> _builtins.str:
        """
        The one who granted this privilege.
        """
        return pulumi.get(self, "grantor")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByDatabaseVault")
    def is_access_constrained_by_database_vault(self) -> _builtins.bool:
        """
        Indicates whether the table access is constrained via Oracle Database Vault.
        """
        return pulumi.get(self, "is_access_constrained_by_database_vault")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByLabelSecurity")
    def is_access_constrained_by_label_security(self) -> _builtins.bool:
        """
        Indicates whether the table access is constrained via Oracle Label Security.
        """
        return pulumi.get(self, "is_access_constrained_by_label_security")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByRealApplicationSecurity")
    def is_access_constrained_by_real_application_security(self) -> _builtins.bool:
        """
        Indicates whether the table access is constrained via Real Application Security.
        """
        return pulumi.get(self, "is_access_constrained_by_real_application_security")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByRedaction")
    def is_access_constrained_by_redaction(self) -> _builtins.bool:
        """
        Indicates whether the table access is constrained via Oracle Data Redaction.
        """
        return pulumi.get(self, "is_access_constrained_by_redaction")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedBySqlFirewall")
    def is_access_constrained_by_sql_firewall(self) -> _builtins.bool:
        """
        Indicates whether the table access is constrained via Oracle Database SQL Firewall.
        """
        return pulumi.get(self, "is_access_constrained_by_sql_firewall")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByView")
    def is_access_constrained_by_view(self) -> _builtins.bool:
        """
        Indicates whether the access is constrained on a table via a view.
        """
        return pulumi.get(self, "is_access_constrained_by_view")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByVirtualPrivateDatabase")
    def is_access_constrained_by_virtual_private_database(self) -> _builtins.bool:
        """
        Indicates whether the table access is constrained via Virtual Private Database.
        """
        return pulumi.get(self, "is_access_constrained_by_virtual_private_database")

    @_builtins.property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> _builtins.bool:
        """
        Indicates whether the table is marked as sensitive.
        """
        return pulumi.get(self, "is_sensitive")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the table access report. It is numeric and unique within a security policy report.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def privilege(self) -> _builtins.str:
        """
        Name of the privilege.
        """
        return pulumi.get(self, "privilege")

    @_builtins.property
    @pulumi.getter(name="privilegeGrantable")
    def privilege_grantable(self) -> _builtins.str:
        """
        Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
        """
        return pulumi.get(self, "privilege_grantable")

    @_builtins.property
    @pulumi.getter(name="privilegeType")
    def privilege_type(self) -> _builtins.str:
        """
        Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
        """
        return pulumi.get(self, "privilege_type")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        The name of the database table the user has access to.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter(name="tableSchema")
    def table_schema(self) -> _builtins.str:
        """
        The name of the schema the table belongs to.
        """
        return pulumi.get(self, "table_schema")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the of the  target database.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetSecurityPolicyReportDatabaseTableAccessEntriesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPolicyReportDatabaseViewAccessEntriesDatabaseViewAccessEntryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityPolicyReportDatabaseViewAccessEntriesDatabaseViewAccessEntryCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityPolicyReportDatabaseViewAccessEntriesDatabaseViewAccessEntryCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPolicyReportDatabaseViewAccessEntriesDatabaseViewAccessEntryCollectionItemResult(dict):
    def __init__(__self__, *,
                 access_type: _builtins.str,
                 column_name: _builtins.str,
                 grant_from_role: _builtins.str,
                 grantee: _builtins.str,
                 grantor: _builtins.str,
                 is_access_constrained_by_database_vault: _builtins.bool,
                 is_access_constrained_by_real_application_security: _builtins.bool,
                 is_access_constrained_by_redaction: _builtins.bool,
                 is_access_constrained_by_sql_firewall: _builtins.bool,
                 is_access_constrained_by_virtual_private_database: _builtins.bool,
                 key: _builtins.str,
                 privilege: _builtins.str,
                 privilege_grantable: _builtins.str,
                 privilege_type: _builtins.str,
                 table_name: _builtins.str,
                 table_schema: _builtins.str,
                 target_id: _builtins.str,
                 view_name: _builtins.str,
                 view_schema: _builtins.str,
                 view_text: _builtins.str):
        """
        :param _builtins.str access_type: The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT or DELETE.
        :param _builtins.str column_name: If there are column level privileges on a table or view.
        :param _builtins.str grant_from_role: This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
        :param _builtins.str grantee: Grantee is the user who can access the table or view
        :param _builtins.str grantor: The user who granted the privilege.
        :param _builtins.bool is_access_constrained_by_database_vault: Indicates whether the table access is constrained via Oracle Database Vault.
        :param _builtins.bool is_access_constrained_by_real_application_security: Indicates whether the view access is constrained via Real Application Security.
        :param _builtins.bool is_access_constrained_by_redaction: Indicates whether the view access is constrained via Oracle Data Redaction.
        :param _builtins.bool is_access_constrained_by_sql_firewall: Indicates whether the view access is constrained via Oracle Database SQL Firewall.
        :param _builtins.bool is_access_constrained_by_virtual_private_database: Indicates whether the view access is constrained via Virtual Private Database.
        :param _builtins.str key: The unique key that identifies the table access report. It is numeric and unique within a security policy report.
        :param _builtins.str privilege: The name of the privilege.
        :param _builtins.str privilege_grantable: Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
        :param _builtins.str privilege_type: Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
        :param _builtins.str table_name: The name of the database table the user has access to.
        :param _builtins.str table_schema: The name of the schema the table belongs to.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str view_name: The name of the view.
        :param _builtins.str view_schema: The name of the schema.
        :param _builtins.str view_text: Definition of the view.
        """
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "grant_from_role", grant_from_role)
        pulumi.set(__self__, "grantee", grantee)
        pulumi.set(__self__, "grantor", grantor)
        pulumi.set(__self__, "is_access_constrained_by_database_vault", is_access_constrained_by_database_vault)
        pulumi.set(__self__, "is_access_constrained_by_real_application_security", is_access_constrained_by_real_application_security)
        pulumi.set(__self__, "is_access_constrained_by_redaction", is_access_constrained_by_redaction)
        pulumi.set(__self__, "is_access_constrained_by_sql_firewall", is_access_constrained_by_sql_firewall)
        pulumi.set(__self__, "is_access_constrained_by_virtual_private_database", is_access_constrained_by_virtual_private_database)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "privilege", privilege)
        pulumi.set(__self__, "privilege_grantable", privilege_grantable)
        pulumi.set(__self__, "privilege_type", privilege_type)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "table_schema", table_schema)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "view_name", view_name)
        pulumi.set(__self__, "view_schema", view_schema)
        pulumi.set(__self__, "view_text", view_text)

    @_builtins.property
    @pulumi.getter(name="accessType")
    def access_type(self) -> _builtins.str:
        """
        The type of the access the user has on the table, there can be one or more from SELECT, UPDATE, INSERT or DELETE.
        """
        return pulumi.get(self, "access_type")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        If there are column level privileges on a table or view.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter(name="grantFromRole")
    def grant_from_role(self) -> _builtins.str:
        """
        This can be empty in case of direct grant, in case of indirect grant, this attribute displays the name of the  role which is granted to the user though which the user has access to the table.
        """
        return pulumi.get(self, "grant_from_role")

    @_builtins.property
    @pulumi.getter
    def grantee(self) -> _builtins.str:
        """
        Grantee is the user who can access the table or view
        """
        return pulumi.get(self, "grantee")

    @_builtins.property
    @pulumi.getter
    def grantor(self) -> _builtins.str:
        """
        The user who granted the privilege.
        """
        return pulumi.get(self, "grantor")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByDatabaseVault")
    def is_access_constrained_by_database_vault(self) -> _builtins.bool:
        """
        Indicates whether the table access is constrained via Oracle Database Vault.
        """
        return pulumi.get(self, "is_access_constrained_by_database_vault")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByRealApplicationSecurity")
    def is_access_constrained_by_real_application_security(self) -> _builtins.bool:
        """
        Indicates whether the view access is constrained via Real Application Security.
        """
        return pulumi.get(self, "is_access_constrained_by_real_application_security")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByRedaction")
    def is_access_constrained_by_redaction(self) -> _builtins.bool:
        """
        Indicates whether the view access is constrained via Oracle Data Redaction.
        """
        return pulumi.get(self, "is_access_constrained_by_redaction")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedBySqlFirewall")
    def is_access_constrained_by_sql_firewall(self) -> _builtins.bool:
        """
        Indicates whether the view access is constrained via Oracle Database SQL Firewall.
        """
        return pulumi.get(self, "is_access_constrained_by_sql_firewall")

    @_builtins.property
    @pulumi.getter(name="isAccessConstrainedByVirtualPrivateDatabase")
    def is_access_constrained_by_virtual_private_database(self) -> _builtins.bool:
        """
        Indicates whether the view access is constrained via Virtual Private Database.
        """
        return pulumi.get(self, "is_access_constrained_by_virtual_private_database")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the table access report. It is numeric and unique within a security policy report.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def privilege(self) -> _builtins.str:
        """
        The name of the privilege.
        """
        return pulumi.get(self, "privilege")

    @_builtins.property
    @pulumi.getter(name="privilegeGrantable")
    def privilege_grantable(self) -> _builtins.str:
        """
        Indicates whether the grantee can grant this privilege to other users. Privileges can be granted to a user or role with  GRANT_OPTION or ADMIN_OPTION
        """
        return pulumi.get(self, "privilege_grantable")

    @_builtins.property
    @pulumi.getter(name="privilegeType")
    def privilege_type(self) -> _builtins.str:
        """
        Type of the privilege user has, this includes System Privilege, Schema Privilege, Object Privilege, Column Privilege, Owner or Schema Privilege on a schema.
        """
        return pulumi.get(self, "privilege_type")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        The name of the database table the user has access to.
        """
        return pulumi.get(self, "table_name")

    @_builtins.property
    @pulumi.getter(name="tableSchema")
    def table_schema(self) -> _builtins.str:
        """
        The name of the schema the table belongs to.
        """
        return pulumi.get(self, "table_schema")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="viewName")
    def view_name(self) -> _builtins.str:
        """
        The name of the view.
        """
        return pulumi.get(self, "view_name")

    @_builtins.property
    @pulumi.getter(name="viewSchema")
    def view_schema(self) -> _builtins.str:
        """
        The name of the schema.
        """
        return pulumi.get(self, "view_schema")

    @_builtins.property
    @pulumi.getter(name="viewText")
    def view_text(self) -> _builtins.str:
        """
        Definition of the view.
        """
        return pulumi.get(self, "view_text")


@pulumi.output_type
class GetSecurityPolicyReportDatabaseViewAccessEntriesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPolicyReportRoleGrantPathsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItemResult']):
        """
        :param Sequence['GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItemArgs'] items: An array of grant path summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItemResult']:
        """
        An array of grant path summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPolicyReportRoleGrantPathsRoleGrantPathCollectionItemResult(dict):
    def __init__(__self__, *,
                 depth_level: _builtins.int,
                 granted_role: _builtins.str,
                 grantee: _builtins.str,
                 key: _builtins.str):
        """
        :param _builtins.int depth_level: The grant depth level of the indirect grant. An indirectly granted role/privilege is granted to the user through another role. The depth level indicates how deep a privilege is within the grant hierarchy.
        :param _builtins.str granted_role: A filter to return only items that match the specified role.
        :param _builtins.str grantee: A filter to return only items that match the specified grantee.
        :param _builtins.str key: The unique key of a role grant.
        """
        pulumi.set(__self__, "depth_level", depth_level)
        pulumi.set(__self__, "granted_role", granted_role)
        pulumi.set(__self__, "grantee", grantee)
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter(name="depthLevel")
    def depth_level(self) -> _builtins.int:
        """
        The grant depth level of the indirect grant. An indirectly granted role/privilege is granted to the user through another role. The depth level indicates how deep a privilege is within the grant hierarchy.
        """
        return pulumi.get(self, "depth_level")

    @_builtins.property
    @pulumi.getter(name="grantedRole")
    def granted_role(self) -> _builtins.str:
        """
        A filter to return only items that match the specified role.
        """
        return pulumi.get(self, "granted_role")

    @_builtins.property
    @pulumi.getter
    def grantee(self) -> _builtins.str:
        """
        A filter to return only items that match the specified grantee.
        """
        return pulumi.get(self, "grantee")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key of a role grant.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class GetSecurityPolicyReportsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPolicyReportsSecurityPolicyReportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSecurityPolicyReportsSecurityPolicyReportCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSecurityPolicyReportsSecurityPolicyReportCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPolicyReportsSecurityPolicyReportCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the security policy report.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the security policy report.
        :param _builtins.str lifecycle_details: Details about the current state of the security policy report.
        :param _builtins.str state: The current state of the security policy report.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The date and time the security policy report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the security policy report was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the security policy report.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the security policy report.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the security policy report.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the security policy report.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the security policy report was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the security policy report was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSensitiveColumnAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemArgs'] items: An array of sensitive column analytics summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemResult']:
        """
        An array of sensitive column analytics summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemDimensionResult'],
                 sensitive_column_analytic_count: _builtins.str):
        """
        :param Sequence['GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemDimensionArgs'] dimensions: The dimensions available for sensitive column analytics.
        :param _builtins.str sensitive_column_analytic_count: The total count for the aggregation metric.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "sensitive_column_analytic_count", sensitive_column_analytic_count)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemDimensionResult']:
        """
        The dimensions available for sensitive column analytics.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="sensitiveColumnAnalyticCount")
    def sensitive_column_analytic_count(self) -> _builtins.str:
        """
        The total count for the aggregation metric.
        """
        return pulumi.get(self, "sensitive_column_analytic_count")


@pulumi.output_type
class GetSensitiveColumnAnalyticsSensitiveColumnAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 column_name: _builtins.str,
                 object: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_data_model_id: _builtins.str,
                 sensitive_type_id: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str column_name: A filter to return only a specific column based on column name.
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str sensitive_data_model_id: A filter to return only the resources that match the specified sensitive data model OCID.
        :param _builtins.str sensitive_type_id: A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        A filter to return only a specific column based on column name.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified sensitive data model OCID.
        """
        return pulumi.get(self, "sensitive_data_model_id")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
        """
        return pulumi.get(self, "sensitive_type_id")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetSensitiveDataModelReferentialRelationChildResult(dict):
    def __init__(__self__, *,
                 app_name: _builtins.str,
                 column_groups: Sequence[_builtins.str],
                 object: _builtins.str,
                 object_type: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_type_ids: Sequence[_builtins.str]):
        """
        :param _builtins.str app_name: The application name.
        :param Sequence[_builtins.str] column_groups: Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        :param _builtins.str object: The database object that contains the columns.
        :param _builtins.str object_type: The type of the database object that contains the sensitive column.
        :param _builtins.str schema_name: The schema name.
        :param Sequence[_builtins.str] sensitive_type_ids: Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "column_groups", column_groups)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_type_ids", sensitive_type_ids)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The application name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="columnGroups")
    def column_groups(self) -> Sequence[_builtins.str]:
        """
        Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        """
        return pulumi.get(self, "column_groups")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The database object that contains the columns.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the database object that contains the sensitive column.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        The schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeIds")
    def sensitive_type_ids(self) -> Sequence[_builtins.str]:
        """
        Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        return pulumi.get(self, "sensitive_type_ids")


@pulumi.output_type
class GetSensitiveDataModelReferentialRelationParentResult(dict):
    def __init__(__self__, *,
                 app_name: _builtins.str,
                 column_groups: Sequence[_builtins.str],
                 object: _builtins.str,
                 object_type: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_type_ids: Sequence[_builtins.str]):
        """
        :param _builtins.str app_name: The application name.
        :param Sequence[_builtins.str] column_groups: Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        :param _builtins.str object: The database object that contains the columns.
        :param _builtins.str object_type: The type of the database object that contains the sensitive column.
        :param _builtins.str schema_name: The schema name.
        :param Sequence[_builtins.str] sensitive_type_ids: Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "column_groups", column_groups)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_type_ids", sensitive_type_ids)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The application name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="columnGroups")
    def column_groups(self) -> Sequence[_builtins.str]:
        """
        Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        """
        return pulumi.get(self, "column_groups")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        The database object that contains the columns.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the database object that contains the sensitive column.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        The schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeIds")
    def sensitive_type_ids(self) -> Sequence[_builtins.str]:
        """
        Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        return pulumi.get(self, "sensitive_type_ids")


@pulumi.output_type
class GetSensitiveDataModelReferentialRelationsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemResult(dict):
    def __init__(__self__, *,
                 child: 'outputs.GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChildResult',
                 is_sensitive: _builtins.bool,
                 key: _builtins.str,
                 parent: 'outputs.GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParentResult',
                 relation_type: _builtins.str,
                 sensitive_data_model_id: _builtins.str,
                 state: _builtins.str):
        """
        :param 'GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChildArgs' child: columnsInfo object has details of column group with schema details.
        :param _builtins.bool is_sensitive: Returns referential relations containing sensitive columns when true. Returns referential relations containing non sensitive columns when false.
        :param _builtins.str key: The unique key that identifies the referential relation. It's numeric and unique within a sensitive data model.
        :param 'GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParentArgs' parent: columnsInfo object has details of column group with schema details.
        :param _builtins.str relation_type: A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
        :param _builtins.str sensitive_data_model_id: The OCID of the sensitive data model.
        :param _builtins.str state: The current state of the referential relation.
        """
        pulumi.set(__self__, "child", child)
        pulumi.set(__self__, "is_sensitive", is_sensitive)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "parent", parent)
        pulumi.set(__self__, "relation_type", relation_type)
        pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter
    def child(self) -> 'outputs.GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChildResult':
        """
        columnsInfo object has details of column group with schema details.
        """
        return pulumi.get(self, "child")

    @_builtins.property
    @pulumi.getter(name="isSensitive")
    def is_sensitive(self) -> _builtins.bool:
        """
        Returns referential relations containing sensitive columns when true. Returns referential relations containing non sensitive columns when false.
        """
        return pulumi.get(self, "is_sensitive")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the referential relation. It's numeric and unique within a sensitive data model.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def parent(self) -> 'outputs.GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParentResult':
        """
        columnsInfo object has details of column group with schema details.
        """
        return pulumi.get(self, "parent")

    @_builtins.property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> _builtins.str:
        """
        A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
        """
        return pulumi.get(self, "relation_type")

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> _builtins.str:
        """
        The OCID of the sensitive data model.
        """
        return pulumi.get(self, "sensitive_data_model_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the referential relation.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemChildResult(dict):
    def __init__(__self__, *,
                 app_name: _builtins.str,
                 column_groups: Sequence[_builtins.str],
                 object: _builtins.str,
                 object_type: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_type_ids: Sequence[_builtins.str]):
        """
        :param _builtins.str app_name: The application name.
        :param Sequence[_builtins.str] column_groups: Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: The type of the database object that contains the sensitive column.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param Sequence[_builtins.str] sensitive_type_ids: Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "column_groups", column_groups)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_type_ids", sensitive_type_ids)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The application name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="columnGroups")
    def column_groups(self) -> Sequence[_builtins.str]:
        """
        Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        """
        return pulumi.get(self, "column_groups")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the database object that contains the sensitive column.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeIds")
    def sensitive_type_ids(self) -> Sequence[_builtins.str]:
        """
        Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        return pulumi.get(self, "sensitive_type_ids")


@pulumi.output_type
class GetSensitiveDataModelReferentialRelationsReferentialRelationCollectionItemParentResult(dict):
    def __init__(__self__, *,
                 app_name: _builtins.str,
                 column_groups: Sequence[_builtins.str],
                 object: _builtins.str,
                 object_type: _builtins.str,
                 schema_name: _builtins.str,
                 sensitive_type_ids: Sequence[_builtins.str]):
        """
        :param _builtins.str app_name: The application name.
        :param Sequence[_builtins.str] column_groups: Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: The type of the database object that contains the sensitive column.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param Sequence[_builtins.str] sensitive_type_ids: Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "column_groups", column_groups)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_type_ids", sensitive_type_ids)

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The application name.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="columnGroups")
    def column_groups(self) -> Sequence[_builtins.str]:
        """
        Group of columns in referential relation. Order needs to be maintained in the elements of the parent/child array listing.
        """
        return pulumi.get(self, "column_groups")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        The type of the database object that contains the sensitive column.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeIds")
    def sensitive_type_ids(self) -> Sequence[_builtins.str]:
        """
        Sensitive type ocids of each column groups. Order needs to be maintained with the parent column group. For the DB defined referential relations identified during SDM creation, we cannot add sensitive types.  Instead use the sensitiveColumn POST API to mark the columns sensitive.
        """
        return pulumi.get(self, "sensitive_type_ids")


@pulumi.output_type
class GetSensitiveDataModelSensitiveObjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItemResult']):
        """
        :param Sequence['GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItemArgs'] items: An array of sensitive object summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItemResult']:
        """
        An array of sensitive object summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 object: _builtins.str,
                 object_type: _builtins.str,
                 schema_name: _builtins.str):
        """
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: A filter to return only items related to a specific object type.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        """
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object type.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetSensitiveDataModelSensitiveSchemasFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItemResult']):
        """
        :param Sequence['GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItemArgs'] items: An array of sensitive schema summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItemResult']:
        """
        An array of sensitive schema summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItemResult(dict):
    def __init__(__self__, *,
                 schema_name: _builtins.str):
        """
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        """
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetSensitiveDataModelSensitiveTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollectionItemResult']):
        """
        :param Sequence['GetSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollectionItemArgs'] items: An array of sensitive types summary objects present in a sensitive data model.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollectionItemResult']:
        """
        An array of sensitive types summary objects present in a sensitive data model.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelSensitiveTypesSensitiveDataModelSensitiveTypeCollectionItemResult(dict):
    def __init__(__self__, *,
                 sensitive_data_model_sensitive_type_count: _builtins.str,
                 sensitive_type_id: _builtins.str):
        """
        :param _builtins.str sensitive_data_model_sensitive_type_count: The total number of sensitive columns linked to this specific sensitive type .
        :param _builtins.str sensitive_type_id: A filter to return only items related to a specific sensitive type OCID.
        """
        pulumi.set(__self__, "sensitive_data_model_sensitive_type_count", sensitive_data_model_sensitive_type_count)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelSensitiveTypeCount")
    def sensitive_data_model_sensitive_type_count(self) -> _builtins.str:
        """
        The total number of sensitive columns linked to this specific sensitive type .
        """
        return pulumi.get(self, "sensitive_data_model_sensitive_type_count")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific sensitive type OCID.
        """
        return pulumi.get(self, "sensitive_type_id")


@pulumi.output_type
class GetSensitiveDataModelTablesForDiscoveryResult(dict):
    def __init__(__self__, *,
                 schema_name: _builtins.str,
                 table_names: Sequence[_builtins.str]):
        """
        :param _builtins.str schema_name: This contains the name of the schema.
        :param Sequence[_builtins.str] table_names: This contains an optional list of the table names.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "table_names", table_names)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        This contains the name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Sequence[_builtins.str]:
        """
        This contains an optional list of the table names.
        """
        return pulumi.get(self, "table_names")


@pulumi.output_type
class GetSensitiveDataModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItemResult(dict):
    def __init__(__self__, *,
                 app_defined_child_column_keys: Sequence[_builtins.str],
                 app_name: _builtins.str,
                 column_groups: Sequence[_builtins.str],
                 column_name: _builtins.str,
                 data_type: _builtins.str,
                 db_defined_child_column_keys: Sequence[_builtins.str],
                 estimated_data_value_count: _builtins.str,
                 key: _builtins.str,
                 lifecycle_details: _builtins.str,
                 object: _builtins.str,
                 object_type: _builtins.str,
                 parent_column_keys: Sequence[_builtins.str],
                 relation_type: _builtins.str,
                 sample_data_values: Sequence[_builtins.str],
                 schema_name: _builtins.str,
                 sensitive_data_model_id: _builtins.str,
                 sensitive_type_id: _builtins.str,
                 source: _builtins.str,
                 state: _builtins.str,
                 status: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param Sequence[_builtins.str] app_defined_child_column_keys: Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        :param _builtins.str app_name: The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored.
        :param Sequence[_builtins.str] column_groups: The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
        :param _builtins.str column_name: A filter to return only a specific column based on column name.
        :param _builtins.str data_type: A filter to return only the resources that match the specified data types.
        :param Sequence[_builtins.str] db_defined_child_column_keys: Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        :param _builtins.str estimated_data_value_count: The estimated number of data values the column has in the associated database.
        :param _builtins.str key: The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
        :param _builtins.str lifecycle_details: Details about the current state of the sensitive column.
        :param _builtins.str object: A filter to return only items related to a specific object name.
        :param _builtins.str object_type: A filter to return only items related to a specific object type.
        :param Sequence[_builtins.str] parent_column_keys: Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
        :param _builtins.str relation_type: A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
        :param Sequence[_builtins.str] sample_data_values: Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str sensitive_data_model_id: The OCID of the sensitive data model.
        :param _builtins.str sensitive_type_id: A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
        :param _builtins.str source: The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
        :param _builtins.str state: The current state of the sensitive column.
        :param _builtins.str status: A filter to return only the sensitive columns that match the specified status.
        :param _builtins.str time_created: The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
        :param _builtins.str time_updated: The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
        """
        pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "column_groups", column_groups)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)
        pulumi.set(__self__, "estimated_data_value_count", estimated_data_value_count)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "parent_column_keys", parent_column_keys)
        pulumi.set(__self__, "relation_type", relation_type)
        pulumi.set(__self__, "sample_data_values", sample_data_values)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are application-level (non-dictionary) children of the sensitive column.
        """
        return pulumi.get(self, "app_defined_child_column_keys")

    @_builtins.property
    @pulumi.getter(name="appName")
    def app_name(self) -> _builtins.str:
        """
        The name of the application associated with the sensitive column. It's useful when the application name is different from the schema name. Otherwise, it can be ignored.
        """
        return pulumi.get(self, "app_name")

    @_builtins.property
    @pulumi.getter(name="columnGroups")
    def column_groups(self) -> Sequence[_builtins.str]:
        """
        The composite key groups to which the sensitive column belongs. If the column is part of a composite key, it's assigned a column group. It helps identify and manage referential relationships that involve composite keys.
        """
        return pulumi.get(self, "column_groups")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        A filter to return only a specific column based on column name.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified data types.
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are database-level (dictionary-defined) children of the sensitive column.
        """
        return pulumi.get(self, "db_defined_child_column_keys")

    @_builtins.property
    @pulumi.getter(name="estimatedDataValueCount")
    def estimated_data_value_count(self) -> _builtins.str:
        """
        The estimated number of data values the column has in the associated database.
        """
        return pulumi.get(self, "estimated_data_value_count")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique key that identifies the sensitive column. It's numeric and unique within a sensitive data model.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the sensitive column.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def object(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object name.
        """
        return pulumi.get(self, "object")

    @_builtins.property
    @pulumi.getter(name="objectType")
    def object_type(self) -> _builtins.str:
        """
        A filter to return only items related to a specific object type.
        """
        return pulumi.get(self, "object_type")

    @_builtins.property
    @pulumi.getter(name="parentColumnKeys")
    def parent_column_keys(self) -> Sequence[_builtins.str]:
        """
        Unique keys identifying the columns that are parents of the sensitive column. At present, it tracks a single parent only.
        """
        return pulumi.get(self, "parent_column_keys")

    @_builtins.property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> _builtins.str:
        """
        A filter to return sensitive columns based on their relationship with their parent columns. If set to NONE, it returns the sensitive columns that do not have any parent. The response includes the parent columns as well as the independent columns that are not in any relationship. If set to APP_DEFINED, it returns all the child columns that have application-level (non-dictionary) relationship with their parents. If set to DB_DEFINED, it returns all the child columns that have database-level (dictionary-defined) relationship with their parents.
        """
        return pulumi.get(self, "relation_type")

    @_builtins.property
    @pulumi.getter(name="sampleDataValues")
    def sample_data_values(self) -> Sequence[_builtins.str]:
        """
        Original data values collected for the sensitive column from the associated database. Sample data helps review the column and ensure that it actually contains sensitive data. Note that sample data is retrieved by a data discovery job only if the isSampleDataCollectionEnabled attribute is set to true. At present, only one data value is collected per sensitive column.
        """
        return pulumi.get(self, "sample_data_values")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> _builtins.str:
        """
        The OCID of the sensitive data model.
        """
        return pulumi.get(self, "sensitive_data_model_id")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        A filter to return only the sensitive columns that are associated with one of the sensitive types identified by the specified OCIDs.
        """
        return pulumi.get(self, "sensitive_type_id")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The source of the sensitive column. DISCOVERY indicates that the column was added to the sensitive data model using a data discovery job. MANUAL indicates that the column was added manually.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the sensitive column.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        A filter to return only the sensitive columns that match the specified status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was created in the sensitive data model.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339), the sensitive column was last updated in the sensitive data model.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveDataModelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveDataModelsSensitiveDataModelCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveDataModelsSensitiveDataModelCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveDataModelCollectionItemResult(dict):
    def __init__(__self__, *,
                 app_suite_name: _builtins.str,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_app_defined_relation_discovery_enabled: _builtins.bool,
                 is_include_all_schemas: _builtins.bool,
                 is_include_all_sensitive_types: _builtins.bool,
                 is_sample_data_collection_enabled: _builtins.bool,
                 schemas_for_discoveries: Sequence[_builtins.str],
                 sensitive_type_group_ids_for_discoveries: Sequence[_builtins.str],
                 sensitive_type_ids_for_discoveries: Sequence[_builtins.str],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 tables_for_discoveries: Sequence['outputs.GetSensitiveDataModelsSensitiveDataModelCollectionItemTablesForDiscoveryResult'],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str app_suite_name: The application suite name identifying a collection of applications. The default value is GENERIC. It's useful only if maintaining a sensitive data model for a suite of applications.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the sensitive data model.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the sensitive data model.
        :param _builtins.bool is_app_defined_relation_discovery_enabled: Indicates if data discovery jobs should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It's disabled by default and should be used only if there is a need to identify application-level relationships.
        :param _builtins.bool is_include_all_schemas: Indicates if all the schemas in the associated target database should be scanned by data discovery jobs. If it is set to true, sensitive data is discovered in all schemas (except for schemas maintained by Oracle).
        :param _builtins.bool is_include_all_sensitive_types: Indicates if all the existing sensitive types should be used by data discovery jobs.If it's set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery.
        :param _builtins.bool is_sample_data_collection_enabled: Indicates if data discovery jobs should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it's disabled by default and should be used only if it's acceptable to store sample data in Data Safe's repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
        :param Sequence[_builtins.str] schemas_for_discoveries: The schemas to be scanned by data discovery jobs.
        :param Sequence[_builtins.str] sensitive_type_group_ids_for_discoveries: The OCIDs of the sensitive type groups to be used by data discovery jobs.
        :param Sequence[_builtins.str] sensitive_type_ids_for_discoveries: The OCIDs of the sensitive types to be used by data discovery jobs.
        :param _builtins.str state: A filter to return only the resources that match the specified lifecycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param Sequence['GetSensitiveDataModelsSensitiveDataModelCollectionItemTablesForDiscoveryArgs'] tables_for_discoveries: The data discovery jobs will scan the tables specified here, including both schemas and tables. For instance, the input could be in the format: [{schemaName: "HR", tableName: ["T1", "T2"]}, {schemaName:  "OE", tableName : ["T3", "T4"]}].
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The date and time the sensitive data model was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the sensitive data model was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "app_suite_name", app_suite_name)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_app_defined_relation_discovery_enabled", is_app_defined_relation_discovery_enabled)
        pulumi.set(__self__, "is_include_all_schemas", is_include_all_schemas)
        pulumi.set(__self__, "is_include_all_sensitive_types", is_include_all_sensitive_types)
        pulumi.set(__self__, "is_sample_data_collection_enabled", is_sample_data_collection_enabled)
        pulumi.set(__self__, "schemas_for_discoveries", schemas_for_discoveries)
        pulumi.set(__self__, "sensitive_type_group_ids_for_discoveries", sensitive_type_group_ids_for_discoveries)
        pulumi.set(__self__, "sensitive_type_ids_for_discoveries", sensitive_type_ids_for_discoveries)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "tables_for_discoveries", tables_for_discoveries)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="appSuiteName")
    def app_suite_name(self) -> _builtins.str:
        """
        The application suite name identifying a collection of applications. The default value is GENERIC. It's useful only if maintaining a sensitive data model for a suite of applications.
        """
        return pulumi.get(self, "app_suite_name")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the sensitive data model.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the sensitive data model.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isAppDefinedRelationDiscoveryEnabled")
    def is_app_defined_relation_discovery_enabled(self) -> _builtins.bool:
        """
        Indicates if data discovery jobs should identify potential application-level (non-dictionary) referential relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined) relationships. This option helps identify application-level relationships that are not defined in the database dictionary, which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking. It's disabled by default and should be used only if there is a need to identify application-level relationships.
        """
        return pulumi.get(self, "is_app_defined_relation_discovery_enabled")

    @_builtins.property
    @pulumi.getter(name="isIncludeAllSchemas")
    def is_include_all_schemas(self) -> _builtins.bool:
        """
        Indicates if all the schemas in the associated target database should be scanned by data discovery jobs. If it is set to true, sensitive data is discovered in all schemas (except for schemas maintained by Oracle).
        """
        return pulumi.get(self, "is_include_all_schemas")

    @_builtins.property
    @pulumi.getter(name="isIncludeAllSensitiveTypes")
    def is_include_all_sensitive_types(self) -> _builtins.bool:
        """
        Indicates if all the existing sensitive types should be used by data discovery jobs.If it's set to true, the sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used for data discovery.
        """
        return pulumi.get(self, "is_include_all_sensitive_types")

    @_builtins.property
    @pulumi.getter(name="isSampleDataCollectionEnabled")
    def is_sample_data_collection_enabled(self) -> _builtins.bool:
        """
        Indicates if data discovery jobs should collect and store sample data values for the discovered columns. Sample data helps review the discovered columns and ensure that they actually contain sensitive data. As it collects original data from the target database, it's disabled by default and should be used only if it's acceptable to store sample data in Data Safe's repository in Oracle Cloud. Note that sample data values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
        """
        return pulumi.get(self, "is_sample_data_collection_enabled")

    @_builtins.property
    @pulumi.getter(name="schemasForDiscoveries")
    def schemas_for_discoveries(self) -> Sequence[_builtins.str]:
        """
        The schemas to be scanned by data discovery jobs.
        """
        return pulumi.get(self, "schemas_for_discoveries")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeGroupIdsForDiscoveries")
    def sensitive_type_group_ids_for_discoveries(self) -> Sequence[_builtins.str]:
        """
        The OCIDs of the sensitive type groups to be used by data discovery jobs.
        """
        return pulumi.get(self, "sensitive_type_group_ids_for_discoveries")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeIdsForDiscoveries")
    def sensitive_type_ids_for_discoveries(self) -> Sequence[_builtins.str]:
        """
        The OCIDs of the sensitive types to be used by data discovery jobs.
        """
        return pulumi.get(self, "sensitive_type_ids_for_discoveries")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="tablesForDiscoveries")
    def tables_for_discoveries(self) -> Sequence['outputs.GetSensitiveDataModelsSensitiveDataModelCollectionItemTablesForDiscoveryResult']:
        """
        The data discovery jobs will scan the tables specified here, including both schemas and tables. For instance, the input could be in the format: [{schemaName: "HR", tableName: ["T1", "T2"]}, {schemaName:  "OE", tableName : ["T3", "T4"]}].
        """
        return pulumi.get(self, "tables_for_discoveries")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the sensitive data model was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the sensitive data model was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveDataModelCollectionItemTablesForDiscoveryResult(dict):
    def __init__(__self__, *,
                 schema_name: _builtins.str,
                 table_names: Sequence[_builtins.str]):
        """
        :param _builtins.str schema_name: This contains the name of the schema.
        :param Sequence[_builtins.str] table_names: This contains an optional list of the table names.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "table_names", table_names)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        This contains the name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Sequence[_builtins.str]:
        """
        This contains an optional list of the table names.
        """
        return pulumi.get(self, "table_names")


@pulumi.output_type
class GetSensitiveTypeGroupGroupedSensitiveTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemResult']):
        """
        :param Sequence['GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemArgs'] items: List of sensitive type id summary objects present in the sensitive type group.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemResult']:
        """
        List of sensitive type id summary objects present in the sensitive type group.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemItemResult'],
                 sensitive_type_group_id: _builtins.str,
                 patch_operations: Optional[Sequence['outputs.GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemPatchOperationResult']] = None):
        """
        :param Sequence['GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemItemArgs'] items: List of sensitive type id summary objects present in the sensitive type group.
        :param _builtins.str sensitive_type_group_id: The OCID of the sensitive type group.
        """
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "sensitive_type_group_id", sensitive_type_group_id)
        if patch_operations is not None:
            pulumi.set(__self__, "patch_operations", patch_operations)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemItemResult']:
        """
        List of sensitive type id summary objects present in the sensitive type group.
        """
        return pulumi.get(self, "items")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeGroupId")
    def sensitive_type_group_id(self) -> _builtins.str:
        """
        The OCID of the sensitive type group.
        """
        return pulumi.get(self, "sensitive_type_group_id")

    @_builtins.property
    @pulumi.getter(name="patchOperations")
    def patch_operations(self) -> Optional[Sequence['outputs.GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemPatchOperationResult']]:
        return pulumi.get(self, "patch_operations")


@pulumi.output_type
class GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 sensitive_type_id: _builtins.str):
        """
        :param _builtins.str sensitive_type_id: A filter to return only items related to a specific sensitive type OCID.
        """
        pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific sensitive type OCID.
        """
        return pulumi.get(self, "sensitive_type_id")


@pulumi.output_type
class GetSensitiveTypeGroupGroupedSensitiveTypesGroupedSensitiveTypeCollectionItemPatchOperationResult(dict):
    def __init__(__self__, *,
                 operation: _builtins.str,
                 selection: _builtins.str,
                 value: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def selection(self) -> _builtins.str:
        return pulumi.get(self, "selection")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSensitiveTypeGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveTypeGroupsSensitiveTypeGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveTypeGroupsSensitiveTypeGroupCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveTypeGroupsSensitiveTypeGroupCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveTypeGroupsSensitiveTypeGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 sensitive_type_count: _builtins.int,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the sensitive type group.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the sensitive type group.
        :param _builtins.int sensitive_type_count: The number of sensitive types in the specified sensitive type group.
        :param _builtins.str state: A filter to return only the resources that match the specified lifecycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the sensitive type group was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the sensitive type group was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "sensitive_type_count", sensitive_type_count)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the sensitive type group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the sensitive type group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeCount")
    def sensitive_type_count(self) -> _builtins.int:
        """
        The number of sensitive types in the specified sensitive type group.
        """
        return pulumi.get(self, "sensitive_type_count")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the sensitive type group was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the sensitive type group was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSensitiveTypesExportsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveTypesExportsSensitiveTypesExportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveTypesExportsSensitiveTypesExportCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveTypesExportsSensitiveTypesExportCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveTypesExportsSensitiveTypesExportCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_include_all_sensitive_types: _builtins.bool,
                 sensitive_type_ids_for_exports: Sequence[_builtins.str],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the sensitive types export.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the sensitive types export.
        :param _builtins.bool is_include_all_sensitive_types: Indicates if all the existing user-defined sensitive types are used for export. If it's set to true, the sensitiveTypeIdsForExport attribute is ignored and all user-defined sensitive types are exported.
        :param Sequence[_builtins.str] sensitive_type_ids_for_exports: The OCIDs of the sensitive types used to create sensitive types export.
        :param _builtins.str state: A filter to return only the resources that match the specified lifecycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the sensitive types export was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the sensitive types export was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_include_all_sensitive_types", is_include_all_sensitive_types)
        pulumi.set(__self__, "sensitive_type_ids_for_exports", sensitive_type_ids_for_exports)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the sensitive types export.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the sensitive types export.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isIncludeAllSensitiveTypes")
    def is_include_all_sensitive_types(self) -> _builtins.bool:
        """
        Indicates if all the existing user-defined sensitive types are used for export. If it's set to true, the sensitiveTypeIdsForExport attribute is ignored and all user-defined sensitive types are exported.
        """
        return pulumi.get(self, "is_include_all_sensitive_types")

    @_builtins.property
    @pulumi.getter(name="sensitiveTypeIdsForExports")
    def sensitive_type_ids_for_exports(self) -> Sequence[_builtins.str]:
        """
        The OCIDs of the sensitive types used to create sensitive types export.
        """
        return pulumi.get(self, "sensitive_type_ids_for_exports")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the sensitive types export was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the sensitive types export was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSensitiveTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveTypesSensitiveTypeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSensitiveTypesSensitiveTypeCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSensitiveTypesSensitiveTypeCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveTypesSensitiveTypeCollectionItemResult(dict):
    def __init__(__self__, *,
                 comment_pattern: _builtins.str,
                 compartment_id: _builtins.str,
                 data_pattern: _builtins.str,
                 default_masking_format_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 entity_type: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_common: _builtins.bool,
                 name_pattern: _builtins.str,
                 parent_category_id: _builtins.str,
                 search_type: _builtins.str,
                 short_name: _builtins.str,
                 source: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str comment_pattern: A regular expression to be used by data discovery for matching column comments.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str data_pattern: A regular expression to be used by data discovery for matching column data values.
        :param _builtins.str default_masking_format_id: A filter to return only the sensitive types that have the default masking format identified by the specified OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the sensitive type.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param _builtins.str entity_type: A filter to return the sensitive type resources based on the value of their entityType attribute.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the sensitive type.
        :param _builtins.bool is_common: A filter to return only the common sensitive type resources. Common sensitive types belong to  library sensitive types which are frequently used to perform sensitive data discovery.
        :param _builtins.str name_pattern: A regular expression to be used by data discovery for matching column names.
        :param _builtins.str parent_category_id: A filter to return only the sensitive types that are children of the sensitive category identified by the specified OCID.
        :param _builtins.str search_type: The search type indicating how the column name, comment and data patterns should be used by data discovery. [Learn more](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/sensitive-types.html#GUID-1D1AD98E-B93F-4FF2-80AE-CB7D8A14F6CC).
        :param _builtins.str short_name: The short name of the sensitive type.
        :param _builtins.str source: Specifies whether the sensitive type is user-defined or predefined.
        :param _builtins.str state: A filter to return only the resources that match the specified lifecycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the sensitive type was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the sensitive type was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "comment_pattern", comment_pattern)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "data_pattern", data_pattern)
        pulumi.set(__self__, "default_masking_format_id", default_masking_format_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_common", is_common)
        pulumi.set(__self__, "name_pattern", name_pattern)
        pulumi.set(__self__, "parent_category_id", parent_category_id)
        pulumi.set(__self__, "search_type", search_type)
        pulumi.set(__self__, "short_name", short_name)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="commentPattern")
    def comment_pattern(self) -> _builtins.str:
        """
        A regular expression to be used by data discovery for matching column comments.
        """
        return pulumi.get(self, "comment_pattern")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="dataPattern")
    def data_pattern(self) -> _builtins.str:
        """
        A regular expression to be used by data discovery for matching column data values.
        """
        return pulumi.get(self, "data_pattern")

    @_builtins.property
    @pulumi.getter(name="defaultMaskingFormatId")
    def default_masking_format_id(self) -> _builtins.str:
        """
        A filter to return only the sensitive types that have the default masking format identified by the specified OCID.
        """
        return pulumi.get(self, "default_masking_format_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the sensitive type.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> _builtins.str:
        """
        A filter to return the sensitive type resources based on the value of their entityType attribute.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the sensitive type.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isCommon")
    def is_common(self) -> _builtins.bool:
        """
        A filter to return only the common sensitive type resources. Common sensitive types belong to  library sensitive types which are frequently used to perform sensitive data discovery.
        """
        return pulumi.get(self, "is_common")

    @_builtins.property
    @pulumi.getter(name="namePattern")
    def name_pattern(self) -> _builtins.str:
        """
        A regular expression to be used by data discovery for matching column names.
        """
        return pulumi.get(self, "name_pattern")

    @_builtins.property
    @pulumi.getter(name="parentCategoryId")
    def parent_category_id(self) -> _builtins.str:
        """
        A filter to return only the sensitive types that are children of the sensitive category identified by the specified OCID.
        """
        return pulumi.get(self, "parent_category_id")

    @_builtins.property
    @pulumi.getter(name="searchType")
    def search_type(self) -> _builtins.str:
        """
        The search type indicating how the column name, comment and data patterns should be used by data discovery. [Learn more](https://docs.oracle.com/en/cloud/paas/data-safe/udscs/sensitive-types.html#GUID-1D1AD98E-B93F-4FF2-80AE-CB7D8A14F6CC).
        """
        return pulumi.get(self, "search_type")

    @_builtins.property
    @pulumi.getter(name="shortName")
    def short_name(self) -> _builtins.str:
        """
        The short name of the sensitive type.
        """
        return pulumi.get(self, "short_name")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        Specifies whether the sensitive type is user-defined or predefined.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only the resources that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the sensitive type was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the sensitive type was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSqlCollectionAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemArgs'] items: The aggregated data point items.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemResult']:
        """
        The aggregated data point items.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemDimensionResult'],
                 sql_collection_analytic_count: _builtins.str):
        """
        :param Sequence['GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemDimensionArgs'] dimensions: The dimensions available for SQL collection analytics.
        :param _builtins.str sql_collection_analytic_count: The total count of the aggregated metric.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "sql_collection_analytic_count", sql_collection_analytic_count)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemDimensionResult']:
        """
        The dimensions available for SQL collection analytics.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="sqlCollectionAnalyticCount")
    def sql_collection_analytic_count(self) -> _builtins.str:
        """
        The total count of the aggregated metric.
        """
        return pulumi.get(self, "sql_collection_analytic_count")


@pulumi.output_type
class GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 state: _builtins.str,
                 target_id: _builtins.str):
        """
        :param _builtins.str state: The current state of the SQL collection.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_id", target_id)

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the SQL collection.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetSqlCollectionLogInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemResult']):
        """
        :param Sequence['GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemArgs'] items: The aggregated data point items.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemResult']:
        """
        The aggregated data point items.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemDimensionResult'],
                 metric_name: _builtins.str,
                 sql_collection_log_insight_count: _builtins.str,
                 time_ended: _builtins.str,
                 time_started: _builtins.str):
        """
        :param Sequence['GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemDimensionArgs'] dimensions: The dimensions available for SQL collection analytics.
        :param _builtins.str metric_name: Name of the aggregation.
        :param _builtins.str sql_collection_log_insight_count: Total count of aggregated value.
        :param _builtins.str time_ended: An optional filter to return the stats of the SQL collection logs collected before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_started: An optional filter to return the stats of the SQL collection logs collected after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "sql_collection_log_insight_count", sql_collection_log_insight_count)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemDimensionResult']:
        """
        The dimensions available for SQL collection analytics.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        Name of the aggregation.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter(name="sqlCollectionLogInsightCount")
    def sql_collection_log_insight_count(self) -> _builtins.str:
        """
        Total count of aggregated value.
        """
        return pulumi.get(self, "sql_collection_log_insight_count")

    @_builtins.property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> _builtins.str:
        """
        An optional filter to return the stats of the SQL collection logs collected before the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_ended")

    @_builtins.property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> _builtins.str:
        """
        An optional filter to return the stats of the SQL collection logs collected after the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 client_ip: _builtins.str,
                 client_os_user_name: _builtins.str,
                 client_program: _builtins.str):
        """
        :param _builtins.str client_ip: The IP addresses for the SQL collection.
        :param _builtins.str client_os_user_name: The operating system user names for the SQL collection.
        :param _builtins.str client_program: The allowed client programs for the SQL collection.
        """
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "client_os_user_name", client_os_user_name)
        pulumi.set(__self__, "client_program", client_program)

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> _builtins.str:
        """
        The IP addresses for the SQL collection.
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter(name="clientOsUserName")
    def client_os_user_name(self) -> _builtins.str:
        """
        The operating system user names for the SQL collection.
        """
        return pulumi.get(self, "client_os_user_name")

    @_builtins.property
    @pulumi.getter(name="clientProgram")
    def client_program(self) -> _builtins.str:
        """
        The allowed client programs for the SQL collection.
        """
        return pulumi.get(self, "client_program")


@pulumi.output_type
class GetSqlCollectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlCollectionsSqlCollectionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSqlCollectionsSqlCollectionCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSqlCollectionsSqlCollectionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlCollectionsSqlCollectionCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 db_user_name: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 generate_sql_firewall_policy_trigger: _builtins.bool,
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 purge_logs_trigger: _builtins.bool,
                 refresh_log_insights_trigger: _builtins.bool,
                 sql_level: _builtins.str,
                 start_trigger: _builtins.bool,
                 state: _builtins.str,
                 status: _builtins.str,
                 stop_trigger: _builtins.bool,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_last_started: _builtins.str,
                 time_last_stopped: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str db_user_name: A filter to return only items that match the specified user name.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the SQL collection.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the SQL collection.
        :param _builtins.str lifecycle_details: Details about the current state of the SQL collection in Data Safe.
        :param _builtins.str sql_level: Specifies the level of SQL that will be collected. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        :param _builtins.str state: The current state of the SQL collection.
        :param _builtins.str status: Specifies if the status of the SqlCollection. Enabled indicates that the collecting is in progress.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: The time that the SQL collection was created, in the format defined by RFC3339.
        :param _builtins.str time_last_started: The timestamp of the most recent SqlCollection start operation, in the format defined by RFC3339.
        :param _builtins.str time_last_stopped: The timestamp of the most recent SqlCollection stop operation, in the format defined by RFC3339.
        :param _builtins.str time_updated: The last date and time the SQL collection was updated, in the format defined by RFC3339.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "generate_sql_firewall_policy_trigger", generate_sql_firewall_policy_trigger)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "purge_logs_trigger", purge_logs_trigger)
        pulumi.set(__self__, "refresh_log_insights_trigger", refresh_log_insights_trigger)
        pulumi.set(__self__, "sql_level", sql_level)
        pulumi.set(__self__, "start_trigger", start_trigger)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "stop_trigger", stop_trigger)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_started", time_last_started)
        pulumi.set(__self__, "time_last_stopped", time_last_stopped)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        A filter to return only items that match the specified user name.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the SQL collection.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter(name="generateSqlFirewallPolicyTrigger")
    def generate_sql_firewall_policy_trigger(self) -> _builtins.bool:
        return pulumi.get(self, "generate_sql_firewall_policy_trigger")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the SQL collection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the SQL collection in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="purgeLogsTrigger")
    def purge_logs_trigger(self) -> _builtins.bool:
        return pulumi.get(self, "purge_logs_trigger")

    @_builtins.property
    @pulumi.getter(name="refreshLogInsightsTrigger")
    def refresh_log_insights_trigger(self) -> _builtins.bool:
        return pulumi.get(self, "refresh_log_insights_trigger")

    @_builtins.property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> _builtins.str:
        """
        Specifies the level of SQL that will be collected. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        """
        return pulumi.get(self, "sql_level")

    @_builtins.property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> _builtins.bool:
        return pulumi.get(self, "start_trigger")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the SQL collection.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies if the status of the SqlCollection. Enabled indicates that the collecting is in progress.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="stopTrigger")
    def stop_trigger(self) -> _builtins.bool:
        return pulumi.get(self, "stop_trigger")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time that the SQL collection was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeLastStarted")
    def time_last_started(self) -> _builtins.str:
        """
        The timestamp of the most recent SqlCollection start operation, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_last_started")

    @_builtins.property
    @pulumi.getter(name="timeLastStopped")
    def time_last_stopped(self) -> _builtins.str:
        """
        The timestamp of the most recent SqlCollection stop operation, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_last_stopped")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The last date and time the SQL collection was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSqlFirewallAllowedSqlAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemArgs'] items: The aggregated data point items.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemResult']:
        """
        The aggregated data point items.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemDimensionResult'],
                 sql_firewall_allowed_sql_analytic_count: _builtins.str):
        """
        :param Sequence['GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemDimensionArgs'] dimensions: The dimensions available for SQL Firewall allow SQL analytics.
        :param _builtins.str sql_firewall_allowed_sql_analytic_count: The total count of the aggregated metric.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "sql_firewall_allowed_sql_analytic_count", sql_firewall_allowed_sql_analytic_count)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemDimensionResult']:
        """
        The dimensions available for SQL Firewall allow SQL analytics.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="sqlFirewallAllowedSqlAnalyticCount")
    def sql_firewall_allowed_sql_analytic_count(self) -> _builtins.str:
        """
        The total count of the aggregated metric.
        """
        return pulumi.get(self, "sql_firewall_allowed_sql_analytic_count")


@pulumi.output_type
class GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 db_user_name: _builtins.str,
                 sql_firewall_policy_id: _builtins.str,
                 sql_level: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str db_user_name: The database user name.
        :param _builtins.str sql_firewall_policy_id: The OCID of the SQL Firewall policy corresponding to the SQL Firewall allowed SQL.
        :param _builtins.str sql_level: Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        :param _builtins.str state: The current state of the SQL Firewall allowed SQL.
        """
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "sql_firewall_policy_id", sql_firewall_policy_id)
        pulumi.set(__self__, "sql_level", sql_level)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        The database user name.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter(name="sqlFirewallPolicyId")
    def sql_firewall_policy_id(self) -> _builtins.str:
        """
        The OCID of the SQL Firewall policy corresponding to the SQL Firewall allowed SQL.
        """
        return pulumi.get(self, "sql_firewall_policy_id")

    @_builtins.property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> _builtins.str:
        """
        Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        """
        return pulumi.get(self, "sql_level")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the SQL Firewall allowed SQL.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetSqlFirewallAllowedSqlsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 current_user: _builtins.str,
                 db_user_name: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 sql_accessed_objects: Sequence[_builtins.str],
                 sql_firewall_policy_id: _builtins.str,
                 sql_level: _builtins.str,
                 sql_text: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_collected: _builtins.str,
                 time_updated: _builtins.str,
                 version: _builtins.float):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str current_user: The name of the user that SQL was executed as.
        :param _builtins.str db_user_name: The database user name.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the SQL Firewall allowed SQL.
        :param _builtins.str display_name: The display name of the SQL Firewall allowed SQL.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the SQL Firewall allowed SQL.
        :param Sequence[_builtins.str] sql_accessed_objects: The objects accessed by the SQL.
        :param _builtins.str sql_firewall_policy_id: The OCID of the SQL Firewall policy corresponding to the SQL Firewall allowed SQL.
        :param _builtins.str sql_level: Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        :param _builtins.str sql_text: The SQL text of the SQL Firewall allowed SQL.
        :param _builtins.str state: The current state of the SQL Firewall allowed SQL.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_collected: The time the the SQL Firewall allowed SQL was collected from the target database, in the format defined by RFC3339.
        :param _builtins.str time_updated: The last date and time the SQL Firewall allowed SQL was updated, in the format defined by RFC3339.
        :param _builtins.float version: Version of the associated SQL Firewall policy. This identifies whether the allowed SQLs were added in the same batch or not.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "current_user", current_user)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "sql_accessed_objects", sql_accessed_objects)
        pulumi.set(__self__, "sql_firewall_policy_id", sql_firewall_policy_id)
        pulumi.set(__self__, "sql_level", sql_level)
        pulumi.set(__self__, "sql_text", sql_text)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_collected", time_collected)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="currentUser")
    def current_user(self) -> _builtins.str:
        """
        The name of the user that SQL was executed as.
        """
        return pulumi.get(self, "current_user")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        The database user name.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the SQL Firewall allowed SQL.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the SQL Firewall allowed SQL.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the SQL Firewall allowed SQL.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sqlAccessedObjects")
    def sql_accessed_objects(self) -> Sequence[_builtins.str]:
        """
        The objects accessed by the SQL.
        """
        return pulumi.get(self, "sql_accessed_objects")

    @_builtins.property
    @pulumi.getter(name="sqlFirewallPolicyId")
    def sql_firewall_policy_id(self) -> _builtins.str:
        """
        The OCID of the SQL Firewall policy corresponding to the SQL Firewall allowed SQL.
        """
        return pulumi.get(self, "sql_firewall_policy_id")

    @_builtins.property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> _builtins.str:
        """
        Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        """
        return pulumi.get(self, "sql_level")

    @_builtins.property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> _builtins.str:
        """
        The SQL text of the SQL Firewall allowed SQL.
        """
        return pulumi.get(self, "sql_text")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the SQL Firewall allowed SQL.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> _builtins.str:
        """
        The time the the SQL Firewall allowed SQL was collected from the target database, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_collected")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The last date and time the SQL Firewall allowed SQL was updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.float:
        """
        Version of the associated SQL Firewall policy. This identifies whether the allowed SQLs were added in the same batch or not.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSqlFirewallPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallPoliciesSqlFirewallPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSqlFirewallPoliciesSqlFirewallPolicyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSqlFirewallPoliciesSqlFirewallPolicyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallPoliciesSqlFirewallPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 allowed_client_ips: Sequence[_builtins.str],
                 allowed_client_os_usernames: Sequence[_builtins.str],
                 allowed_client_programs: Sequence[_builtins.str],
                 compartment_id: _builtins.str,
                 db_user_name: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 enforcement_scope: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 security_policy_id: _builtins.str,
                 sql_firewall_policy_id: _builtins.str,
                 sql_level: _builtins.str,
                 state: _builtins.str,
                 status: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str,
                 violation_action: _builtins.str,
                 violation_audit: _builtins.str):
        """
        :param Sequence[_builtins.str] allowed_client_ips: The list of allowed ip addresses for the SQL Firewall policy.
        :param Sequence[_builtins.str] allowed_client_os_usernames: The list of allowed operating system user names for the SQL Firewall policy.
        :param Sequence[_builtins.str] allowed_client_programs: The list of allowed client programs for the SQL Firewall policy.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str db_user_name: A filter to return only items that match the specified user name.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the SQL Firewall policy.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param _builtins.str enforcement_scope: Specifies the SQL Firewall policy enforcement option.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the SQL Firewall policy.
        :param _builtins.str lifecycle_details: Details about the current state of the SQL Firewall policy in Data Safe.
        :param _builtins.str security_policy_id: An optional filter to return only resources that match the specified OCID of the security policy resource.
        :param _builtins.str sql_firewall_policy_id: An optional filter to return only resources that match the specified OCID of the SQL Firewall policy resource.
        :param _builtins.str sql_level: Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        :param _builtins.str state: The current state of the SQL Firewall policy.
        :param _builtins.str status: Specifies whether the SQL Firewall policy is enabled or disabled.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The time that the SQL Firewall policy was created, in the format defined by RFC3339.
        :param _builtins.str time_updated: The date and time the SQL Firewall policy was last updated, in the format defined by RFC3339.
        :param _builtins.str violation_action: An optional filter to return only resources that match the specified violation action.
        :param _builtins.str violation_audit: Specifies whether a unified audit policy should be enabled for auditing the SQL Firewall policy violations.
        """
        pulumi.set(__self__, "allowed_client_ips", allowed_client_ips)
        pulumi.set(__self__, "allowed_client_os_usernames", allowed_client_os_usernames)
        pulumi.set(__self__, "allowed_client_programs", allowed_client_programs)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enforcement_scope", enforcement_scope)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        pulumi.set(__self__, "sql_firewall_policy_id", sql_firewall_policy_id)
        pulumi.set(__self__, "sql_level", sql_level)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "violation_action", violation_action)
        pulumi.set(__self__, "violation_audit", violation_audit)

    @_builtins.property
    @pulumi.getter(name="allowedClientIps")
    def allowed_client_ips(self) -> Sequence[_builtins.str]:
        """
        The list of allowed ip addresses for the SQL Firewall policy.
        """
        return pulumi.get(self, "allowed_client_ips")

    @_builtins.property
    @pulumi.getter(name="allowedClientOsUsernames")
    def allowed_client_os_usernames(self) -> Sequence[_builtins.str]:
        """
        The list of allowed operating system user names for the SQL Firewall policy.
        """
        return pulumi.get(self, "allowed_client_os_usernames")

    @_builtins.property
    @pulumi.getter(name="allowedClientPrograms")
    def allowed_client_programs(self) -> Sequence[_builtins.str]:
        """
        The list of allowed client programs for the SQL Firewall policy.
        """
        return pulumi.get(self, "allowed_client_programs")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        A filter to return only items that match the specified user name.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the SQL Firewall policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="enforcementScope")
    def enforcement_scope(self) -> _builtins.str:
        """
        Specifies the SQL Firewall policy enforcement option.
        """
        return pulumi.get(self, "enforcement_scope")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the SQL Firewall policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the SQL Firewall policy in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified OCID of the security policy resource.
        """
        return pulumi.get(self, "security_policy_id")

    @_builtins.property
    @pulumi.getter(name="sqlFirewallPolicyId")
    def sql_firewall_policy_id(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified OCID of the SQL Firewall policy resource.
        """
        return pulumi.get(self, "sql_firewall_policy_id")

    @_builtins.property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> _builtins.str:
        """
        Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        """
        return pulumi.get(self, "sql_level")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the SQL Firewall policy.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies whether the SQL Firewall policy is enabled or disabled.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The time that the SQL Firewall policy was created, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the SQL Firewall policy was last updated, in the format defined by RFC3339.
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified violation action.
        """
        return pulumi.get(self, "violation_action")

    @_builtins.property
    @pulumi.getter(name="violationAudit")
    def violation_audit(self) -> _builtins.str:
        """
        Specifies whether a unified audit policy should be enabled for auditing the SQL Firewall policy violations.
        """
        return pulumi.get(self, "violation_audit")


@pulumi.output_type
class GetSqlFirewallPolicyAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemArgs'] items: The aggregated data point items.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemResult']:
        """
        The aggregated data point items.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemDimensionResult'],
                 sql_firewall_policy_analytic_count: _builtins.str):
        """
        :param Sequence['GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemDimensionArgs'] dimensions: The dimensions available for SQL Firewall policy analytics.
        :param _builtins.str sql_firewall_policy_analytic_count: The total count of the aggregated metric.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "sql_firewall_policy_analytic_count", sql_firewall_policy_analytic_count)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemDimensionResult']:
        """
        The dimensions available for SQL Firewall policy analytics.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="sqlFirewallPolicyAnalyticCount")
    def sql_firewall_policy_analytic_count(self) -> _builtins.str:
        """
        The total count of the aggregated metric.
        """
        return pulumi.get(self, "sql_firewall_policy_analytic_count")


@pulumi.output_type
class GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 enforcement_scope: _builtins.str,
                 security_policy_id: _builtins.str,
                 state: _builtins.str,
                 violation_action: _builtins.str):
        """
        :param _builtins.str enforcement_scope: Specifies the SQL Firewall policy enforcement option.
        :param _builtins.str security_policy_id: An optional filter to return only resources that match the specified OCID of the security policy resource.
        :param _builtins.str state: The current state of the SQL Firewall policy.
        :param _builtins.str violation_action: Specifies the mode in which the SQL Firewall policy is enabled.
        """
        pulumi.set(__self__, "enforcement_scope", enforcement_scope)
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "violation_action", violation_action)

    @_builtins.property
    @pulumi.getter(name="enforcementScope")
    def enforcement_scope(self) -> _builtins.str:
        """
        Specifies the SQL Firewall policy enforcement option.
        """
        return pulumi.get(self, "enforcement_scope")

    @_builtins.property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> _builtins.str:
        """
        An optional filter to return only resources that match the specified OCID of the security policy resource.
        """
        return pulumi.get(self, "security_policy_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the SQL Firewall policy.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> _builtins.str:
        """
        Specifies the mode in which the SQL Firewall policy is enabled.
        """
        return pulumi.get(self, "violation_action")


@pulumi.output_type
class GetSqlFirewallViolationAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemArgs'] items: The aggregated data point items.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemResult']:
        """
        The aggregated data point items.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimensionResult'],
                 display_name: _builtins.str,
                 metric_name: _builtins.str,
                 sql_firewall_violation_analytic_count: _builtins.str,
                 time_ended: _builtins.str,
                 time_started: _builtins.str):
        """
        :param Sequence['GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimensionArgs'] dimensions: The details of the aggregation dimensions used for summarizing SQL violations.
        :param _builtins.str display_name: The display name of aggregation field.
        :param _builtins.str metric_name: The name of the aggregation.
        :param _builtins.str sql_firewall_violation_analytic_count: Total count of aggregated value.
        :param _builtins.str time_ended: An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_started: An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "sql_firewall_violation_analytic_count", sql_firewall_violation_analytic_count)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimensionResult']:
        """
        The details of the aggregation dimensions used for summarizing SQL violations.
        """
        return pulumi.get(self, "dimensions")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of aggregation field.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        """
        The name of the aggregation.
        """
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter(name="sqlFirewallViolationAnalyticCount")
    def sql_firewall_violation_analytic_count(self) -> _builtins.str:
        """
        Total count of aggregated value.
        """
        return pulumi.get(self, "sql_firewall_violation_analytic_count")

    @_builtins.property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> _builtins.str:
        """
        An optional filter to return audit events whose creation time in the database is less than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_ended")

    @_builtins.property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> _builtins.str:
        """
        An optional filter to return audit events whose creation time in the database is greater than and equal to the date-time specified, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 client_ips: Sequence[_builtins.str],
                 client_os_user_names: Sequence[_builtins.str],
                 client_programs: Sequence[_builtins.str],
                 db_user_names: Sequence[_builtins.str],
                 operation_times: Sequence[_builtins.str],
                 operations: Sequence[_builtins.str],
                 sql_levels: Sequence[_builtins.str],
                 target_ids: Sequence[_builtins.str],
                 target_names: Sequence[_builtins.str],
                 violation_actions: Sequence[_builtins.str],
                 violation_causes: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] client_ips: The IP address of the host from which the session was spawned.
        :param Sequence[_builtins.str] client_os_user_names: The name of the operating system user for the database session.
        :param Sequence[_builtins.str] client_programs: The application from which the SQL violation was generated. Examples SQL Plus or SQL Developer.
        :param Sequence[_builtins.str] db_user_names: The name of the database user.
        :param Sequence[_builtins.str] operation_times: The time of the SQL violation occurrence in the target database.
        :param Sequence[_builtins.str] operations: The name of the action executed by the user on the target database, for example, ALTER, CREATE, DROP.
        :param Sequence[_builtins.str] sql_levels: Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        :param Sequence[_builtins.str] target_ids: The OCID of the target database.
        :param Sequence[_builtins.str] target_names: The name of the target database.
        :param Sequence[_builtins.str] violation_actions: The action taken for this SQL violation.
        :param Sequence[_builtins.str] violation_causes: Indicates whether SQL or context violation.
        """
        pulumi.set(__self__, "client_ips", client_ips)
        pulumi.set(__self__, "client_os_user_names", client_os_user_names)
        pulumi.set(__self__, "client_programs", client_programs)
        pulumi.set(__self__, "db_user_names", db_user_names)
        pulumi.set(__self__, "operation_times", operation_times)
        pulumi.set(__self__, "operations", operations)
        pulumi.set(__self__, "sql_levels", sql_levels)
        pulumi.set(__self__, "target_ids", target_ids)
        pulumi.set(__self__, "target_names", target_names)
        pulumi.set(__self__, "violation_actions", violation_actions)
        pulumi.set(__self__, "violation_causes", violation_causes)

    @_builtins.property
    @pulumi.getter(name="clientIps")
    def client_ips(self) -> Sequence[_builtins.str]:
        """
        The IP address of the host from which the session was spawned.
        """
        return pulumi.get(self, "client_ips")

    @_builtins.property
    @pulumi.getter(name="clientOsUserNames")
    def client_os_user_names(self) -> Sequence[_builtins.str]:
        """
        The name of the operating system user for the database session.
        """
        return pulumi.get(self, "client_os_user_names")

    @_builtins.property
    @pulumi.getter(name="clientPrograms")
    def client_programs(self) -> Sequence[_builtins.str]:
        """
        The application from which the SQL violation was generated. Examples SQL Plus or SQL Developer.
        """
        return pulumi.get(self, "client_programs")

    @_builtins.property
    @pulumi.getter(name="dbUserNames")
    def db_user_names(self) -> Sequence[_builtins.str]:
        """
        The name of the database user.
        """
        return pulumi.get(self, "db_user_names")

    @_builtins.property
    @pulumi.getter(name="operationTimes")
    def operation_times(self) -> Sequence[_builtins.str]:
        """
        The time of the SQL violation occurrence in the target database.
        """
        return pulumi.get(self, "operation_times")

    @_builtins.property
    @pulumi.getter
    def operations(self) -> Sequence[_builtins.str]:
        """
        The name of the action executed by the user on the target database, for example, ALTER, CREATE, DROP.
        """
        return pulumi.get(self, "operations")

    @_builtins.property
    @pulumi.getter(name="sqlLevels")
    def sql_levels(self) -> Sequence[_builtins.str]:
        """
        Specifies the level of SQL included for this SQL Firewall policy. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        """
        return pulumi.get(self, "sql_levels")

    @_builtins.property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Sequence[_builtins.str]:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_ids")

    @_builtins.property
    @pulumi.getter(name="targetNames")
    def target_names(self) -> Sequence[_builtins.str]:
        """
        The name of the target database.
        """
        return pulumi.get(self, "target_names")

    @_builtins.property
    @pulumi.getter(name="violationActions")
    def violation_actions(self) -> Sequence[_builtins.str]:
        """
        The action taken for this SQL violation.
        """
        return pulumi.get(self, "violation_actions")

    @_builtins.property
    @pulumi.getter(name="violationCauses")
    def violation_causes(self) -> Sequence[_builtins.str]:
        """
        Indicates whether SQL or context violation.
        """
        return pulumi.get(self, "violation_causes")


@pulumi.output_type
class GetSqlFirewallViolationsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallViolationsSqlFirewallViolationsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSqlFirewallViolationsSqlFirewallViolationsCollectionItemResult']):
        """
        :param Sequence['GetSqlFirewallViolationsSqlFirewallViolationsCollectionItemArgs'] items: Array of SQL violation summary.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSqlFirewallViolationsSqlFirewallViolationsCollectionItemResult']:
        """
        Array of SQL violation summary.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallViolationsSqlFirewallViolationsCollectionItemResult(dict):
    def __init__(__self__, *,
                 client_ip: _builtins.str,
                 client_os_user_name: _builtins.str,
                 client_program: _builtins.str,
                 compartment_id: _builtins.str,
                 current_db_user_name: _builtins.str,
                 db_user_name: _builtins.str,
                 id: _builtins.str,
                 operation: _builtins.str,
                 operation_time: _builtins.str,
                 sql_accessed_objects: _builtins.str,
                 sql_level: _builtins.str,
                 sql_text: _builtins.str,
                 target_id: _builtins.str,
                 target_name: _builtins.str,
                 time_collected: _builtins.str,
                 violation_action: _builtins.str,
                 violation_cause: _builtins.str):
        """
        :param _builtins.str client_ip: The IP address of the host machine from which the session was generated.
        :param _builtins.str client_os_user_name: The name of the operating system user for the database session.
        :param _builtins.str client_program: The application from which the SQL violation was generated. Examples include SQL Plus or SQL Developer.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str current_db_user_name: The name of the user that SQL was executed as.
        :param _builtins.str db_user_name: The name of the database user.
        :param _builtins.str id: The OCID of the SQL violation.
        :param _builtins.str operation: The name of the action executed by the user on the target database. For example, ALTER, CREATE, DROP.
        :param _builtins.str operation_time: The time of the SQL violation occurrence in the target database.
        :param _builtins.str sql_accessed_objects: The objects accessed by the SQL.
        :param _builtins.str sql_level: Specifies the level of SQL for this violation. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        :param _builtins.str sql_text: The SQL text caught by the firewall.
        :param _builtins.str target_id: The OCID of the target database.
        :param _builtins.str target_name: The name of the target database.
        :param _builtins.str time_collected: The timestamp when this SQL violation was collected from the target database by Data Safe.
        :param _builtins.str violation_action: The action taken for this SQL violation.
        :param _builtins.str violation_cause: Indicates whether SQL or context violation.
        """
        pulumi.set(__self__, "client_ip", client_ip)
        pulumi.set(__self__, "client_os_user_name", client_os_user_name)
        pulumi.set(__self__, "client_program", client_program)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "current_db_user_name", current_db_user_name)
        pulumi.set(__self__, "db_user_name", db_user_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "operation_time", operation_time)
        pulumi.set(__self__, "sql_accessed_objects", sql_accessed_objects)
        pulumi.set(__self__, "sql_level", sql_level)
        pulumi.set(__self__, "sql_text", sql_text)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)
        pulumi.set(__self__, "time_collected", time_collected)
        pulumi.set(__self__, "violation_action", violation_action)
        pulumi.set(__self__, "violation_cause", violation_cause)

    @_builtins.property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> _builtins.str:
        """
        The IP address of the host machine from which the session was generated.
        """
        return pulumi.get(self, "client_ip")

    @_builtins.property
    @pulumi.getter(name="clientOsUserName")
    def client_os_user_name(self) -> _builtins.str:
        """
        The name of the operating system user for the database session.
        """
        return pulumi.get(self, "client_os_user_name")

    @_builtins.property
    @pulumi.getter(name="clientProgram")
    def client_program(self) -> _builtins.str:
        """
        The application from which the SQL violation was generated. Examples include SQL Plus or SQL Developer.
        """
        return pulumi.get(self, "client_program")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="currentDbUserName")
    def current_db_user_name(self) -> _builtins.str:
        """
        The name of the user that SQL was executed as.
        """
        return pulumi.get(self, "current_db_user_name")

    @_builtins.property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> _builtins.str:
        """
        The name of the database user.
        """
        return pulumi.get(self, "db_user_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the SQL violation.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        """
        The name of the action executed by the user on the target database. For example, ALTER, CREATE, DROP.
        """
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter(name="operationTime")
    def operation_time(self) -> _builtins.str:
        """
        The time of the SQL violation occurrence in the target database.
        """
        return pulumi.get(self, "operation_time")

    @_builtins.property
    @pulumi.getter(name="sqlAccessedObjects")
    def sql_accessed_objects(self) -> _builtins.str:
        """
        The objects accessed by the SQL.
        """
        return pulumi.get(self, "sql_accessed_objects")

    @_builtins.property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> _builtins.str:
        """
        Specifies the level of SQL for this violation. USER_ISSUED_SQL - User issued SQL statements only. ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
        """
        return pulumi.get(self, "sql_level")

    @_builtins.property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> _builtins.str:
        """
        The SQL text caught by the firewall.
        """
        return pulumi.get(self, "sql_text")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        The OCID of the target database.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetName")
    def target_name(self) -> _builtins.str:
        """
        The name of the target database.
        """
        return pulumi.get(self, "target_name")

    @_builtins.property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> _builtins.str:
        """
        The timestamp when this SQL violation was collected from the target database by Data Safe.
        """
        return pulumi.get(self, "time_collected")

    @_builtins.property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> _builtins.str:
        """
        The action taken for this SQL violation.
        """
        return pulumi.get(self, "violation_action")

    @_builtins.property
    @pulumi.getter(name="violationCause")
    def violation_cause(self) -> _builtins.str:
        """
        Indicates whether SQL or context violation.
        """
        return pulumi.get(self, "violation_cause")


@pulumi.output_type
class GetTargetAlertPolicyAssociationsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 is_enabled: _builtins.bool,
                 lifecycle_details: _builtins.str,
                 policy_id: _builtins.str,
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 time_created: _builtins.str,
                 time_updated: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: Describes the target-alert policy association.
        :param _builtins.str display_name: The display name of the target-alert policy association.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the target-alert policy association.
        :param _builtins.bool is_enabled: Indicates if the target-alert policy association is enabled or disabled by user.
        :param _builtins.str lifecycle_details: Details about the current state of the target-alert policy association.
        :param _builtins.str policy_id: The OCID of the alert policy.
        :param _builtins.str state: An optional filter to return only alert policies that have the given life-cycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_created: Creation date and time of the alert policy, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: Last date and time the alert policy was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Describes the target-alert policy association.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the target-alert policy association.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the target-alert policy association.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        """
        Indicates if the target-alert policy association is enabled or disabled by user.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the target-alert policy association.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The OCID of the alert policy.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        An optional filter to return only alert policies that have the given life-cycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        Creation date and time of the alert policy, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        Last date and time the alert policy was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetTargetDatabaseConnectionOptionResult(dict):
    def __init__(__self__, *,
                 connection_type: _builtins.str,
                 datasafe_private_endpoint_id: _builtins.str,
                 on_prem_connector_id: _builtins.str):
        """
        :param _builtins.str connection_type: The connection type used to connect to the database. Allowed values:
               * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
               * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        :param _builtins.str datasafe_private_endpoint_id: The OCID of the Data Safe private endpoint.
        :param _builtins.str on_prem_connector_id: The OCID of the on-premises connector.
        """
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "datasafe_private_endpoint_id", datasafe_private_endpoint_id)
        pulumi.set(__self__, "on_prem_connector_id", on_prem_connector_id)

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The connection type used to connect to the database. Allowed values:
        * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
        * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter(name="datasafePrivateEndpointId")
    def datasafe_private_endpoint_id(self) -> _builtins.str:
        """
        The OCID of the Data Safe private endpoint.
        """
        return pulumi.get(self, "datasafe_private_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="onPremConnectorId")
    def on_prem_connector_id(self) -> _builtins.str:
        """
        The OCID of the on-premises connector.
        """
        return pulumi.get(self, "on_prem_connector_id")


@pulumi.output_type
class GetTargetDatabaseCredentialResult(dict):
    def __init__(__self__, *,
                 password: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str password: The password of the database user.
        :param _builtins.str user_name: The database user name.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        The password of the database user.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetTargetDatabaseDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: _builtins.str,
                 database_type: _builtins.str,
                 db_system_id: _builtins.str,
                 infrastructure_type: _builtins.str,
                 instance_id: _builtins.str,
                 ip_addresses: Sequence[_builtins.str],
                 listener_port: _builtins.int,
                 service_name: _builtins.str,
                 vm_cluster_id: _builtins.str):
        """
        :param _builtins.str autonomous_database_id: The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str database_type: The database type.
        :param _builtins.str db_system_id: The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str infrastructure_type: The infrastructure type the database is running on.
        :param _builtins.str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: The port number of the database listener.
        :param _builtins.str service_name: The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> _builtins.str:
        """
        The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        The database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> _builtins.str:
        """
        The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[_builtins.str]:
        """
        The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> _builtins.int:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> _builtins.str:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabaseResult(dict):
    def __init__(__self__, *,
                 database_details: Sequence['outputs.GetTargetDatabasePeerTargetDatabaseDatabaseDetailResult'],
                 database_unique_name: _builtins.str,
                 dataguard_association_id: _builtins.str,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 key: _builtins.int,
                 lifecycle_details: _builtins.str,
                 role: _builtins.str,
                 state: _builtins.str,
                 time_created: _builtins.str,
                 tls_configs: Sequence['outputs.GetTargetDatabasePeerTargetDatabaseTlsConfigResult']):
        """
        :param Sequence['GetTargetDatabasePeerTargetDatabaseDatabaseDetailArgs'] database_details: Details of the database for the registration in Data Safe.
        :param _builtins.str database_unique_name: Unique name of the database associated to the peer target database.
        :param _builtins.str dataguard_association_id: The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        :param _builtins.str description: The description of the peer target database in Data Safe.
        :param _builtins.str display_name: The display name of the peer target database in Data Safe.
        :param _builtins.int key: The secondary key assigned for the peer target database in Data Safe.
        :param _builtins.str lifecycle_details: Details about the current state of the peer target database in Data Safe.
        :param _builtins.str role: Role of the database associated to the peer target database.
        :param _builtins.str state: The current state of the target database in Data Safe.
        :param _builtins.str time_created: The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        :param Sequence['GetTargetDatabasePeerTargetDatabaseTlsConfigArgs'] tls_configs: The details required to establish a TLS enabled connection.
        """
        pulumi.set(__self__, "database_details", database_details)
        pulumi.set(__self__, "database_unique_name", database_unique_name)
        pulumi.set(__self__, "dataguard_association_id", dataguard_association_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "tls_configs", tls_configs)

    @_builtins.property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> Sequence['outputs.GetTargetDatabasePeerTargetDatabaseDatabaseDetailResult']:
        """
        Details of the database for the registration in Data Safe.
        """
        return pulumi.get(self, "database_details")

    @_builtins.property
    @pulumi.getter(name="databaseUniqueName")
    def database_unique_name(self) -> _builtins.str:
        """
        Unique name of the database associated to the peer target database.
        """
        return pulumi.get(self, "database_unique_name")

    @_builtins.property
    @pulumi.getter(name="dataguardAssociationId")
    def dataguard_association_id(self) -> _builtins.str:
        """
        The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        """
        return pulumi.get(self, "dataguard_association_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the peer target database in Data Safe.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the peer target database in Data Safe.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.int:
        """
        The secondary key assigned for the peer target database in Data Safe.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the peer target database in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Role of the database associated to the peer target database.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the target database in Data Safe.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="tlsConfigs")
    def tls_configs(self) -> Sequence['outputs.GetTargetDatabasePeerTargetDatabaseTlsConfigResult']:
        """
        The details required to establish a TLS enabled connection.
        """
        return pulumi.get(self, "tls_configs")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabaseDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: _builtins.str,
                 database_type: _builtins.str,
                 db_system_id: _builtins.str,
                 infrastructure_type: _builtins.str,
                 instance_id: _builtins.str,
                 ip_addresses: Sequence[_builtins.str],
                 listener_port: _builtins.int,
                 service_name: _builtins.str,
                 vm_cluster_id: _builtins.str):
        """
        :param _builtins.str autonomous_database_id: The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str database_type: The database type.
        :param _builtins.str db_system_id: The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str infrastructure_type: The infrastructure type the database is running on.
        :param _builtins.str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: The port number of the database listener.
        :param _builtins.str service_name: The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> _builtins.str:
        """
        The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        The database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> _builtins.str:
        """
        The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[_builtins.str]:
        """
        The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> _builtins.int:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> _builtins.str:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 database_details: Sequence['outputs.GetTargetDatabasePeerTargetDatabaseDetailDatabaseDetailResult'],
                 dataguard_association_id: _builtins.str,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 tls_configs: Sequence['outputs.GetTargetDatabasePeerTargetDatabaseDetailTlsConfigResult']):
        """
        :param Sequence['GetTargetDatabasePeerTargetDatabaseDetailDatabaseDetailArgs'] database_details: Details of the database for the registration in Data Safe.
        :param _builtins.str dataguard_association_id: The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        :param _builtins.str description: The description of the peer target database in Data Safe.
        :param _builtins.str display_name: The display name of the peer target database in Data Safe.
        :param Sequence['GetTargetDatabasePeerTargetDatabaseDetailTlsConfigArgs'] tls_configs: The details required to establish a TLS enabled connection.
        """
        pulumi.set(__self__, "database_details", database_details)
        pulumi.set(__self__, "dataguard_association_id", dataguard_association_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "tls_configs", tls_configs)

    @_builtins.property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> Sequence['outputs.GetTargetDatabasePeerTargetDatabaseDetailDatabaseDetailResult']:
        """
        Details of the database for the registration in Data Safe.
        """
        return pulumi.get(self, "database_details")

    @_builtins.property
    @pulumi.getter(name="dataguardAssociationId")
    def dataguard_association_id(self) -> _builtins.str:
        """
        The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        """
        return pulumi.get(self, "dataguard_association_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the peer target database in Data Safe.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the peer target database in Data Safe.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="tlsConfigs")
    def tls_configs(self) -> Sequence['outputs.GetTargetDatabasePeerTargetDatabaseDetailTlsConfigResult']:
        """
        The details required to establish a TLS enabled connection.
        """
        return pulumi.get(self, "tls_configs")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabaseDetailDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: _builtins.str,
                 database_type: _builtins.str,
                 db_system_id: _builtins.str,
                 infrastructure_type: _builtins.str,
                 instance_id: _builtins.str,
                 ip_addresses: Sequence[_builtins.str],
                 listener_port: _builtins.int,
                 service_name: _builtins.str,
                 vm_cluster_id: _builtins.str):
        """
        :param _builtins.str autonomous_database_id: The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str database_type: The database type.
        :param _builtins.str db_system_id: The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str infrastructure_type: The infrastructure type the database is running on.
        :param _builtins.str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: The port number of the database listener.
        :param _builtins.str service_name: The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> _builtins.str:
        """
        The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        The database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> _builtins.str:
        """
        The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[_builtins.str]:
        """
        The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> _builtins.int:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> _builtins.str:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabaseDetailTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: _builtins.str,
                 key_store_content: _builtins.str,
                 status: _builtins.str,
                 store_password: _builtins.str,
                 trust_store_content: _builtins.str):
        """
        :param _builtins.str certificate_store_type: The format of the certificate store.
        :param _builtins.str key_store_content: Base64 encoded string of key store file content.
        :param _builtins.str status: Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str store_password: The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        pulumi.set(__self__, "key_store_content", key_store_content)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "store_password", store_password)
        pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> _builtins.str:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> _builtins.str:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabaseTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: _builtins.str,
                 key_store_content: _builtins.str,
                 status: _builtins.str,
                 store_password: _builtins.str,
                 trust_store_content: _builtins.str):
        """
        :param _builtins.str certificate_store_type: The format of the certificate store.
        :param _builtins.str key_store_content: Base64 encoded string of key store file content.
        :param _builtins.str status: Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str store_password: The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        pulumi.set(__self__, "key_store_content", key_store_content)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "store_password", store_password)
        pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> _builtins.str:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> _builtins.str:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 items: Sequence['outputs.GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemResult']):
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemResult(dict):
    def __init__(__self__, *,
                 database_details: 'outputs.GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemDatabaseDetailsResult',
                 database_unique_name: _builtins.str,
                 dataguard_association_id: _builtins.str,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 key: _builtins.int,
                 lifecycle_details: _builtins.str,
                 role: _builtins.str,
                 state: _builtins.str,
                 target_database_id: _builtins.str,
                 time_created: _builtins.str,
                 tls_config: 'outputs.GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemTlsConfigResult'):
        """
        :param 'GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemDatabaseDetailsArgs' database_details: Details of the database for the registration in Data Safe.
        :param _builtins.str database_unique_name: Unique name of the database associated to the peer target database.
        :param _builtins.str dataguard_association_id: The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        :param _builtins.str description: The description of the peer target database in Data Safe.
        :param _builtins.str display_name: The display name of the peer target database in Data Safe.
        :param _builtins.int key: The secondary key assigned for the peer target database in Data Safe.
        :param _builtins.str lifecycle_details: Details about the current state of the peer target database in Data Safe.
        :param _builtins.str role: Role of the database associated to the peer target database.
        :param _builtins.str state: The current state of the peer target database in Data Safe.
        :param _builtins.str target_database_id: The OCID of the Data Safe target database.
        :param _builtins.str time_created: The date and time of the peer target database registration in Data Safe.
        :param 'GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemTlsConfigArgs' tls_config: The details required to establish a TLS enabled connection.
        """
        pulumi.set(__self__, "database_details", database_details)
        pulumi.set(__self__, "database_unique_name", database_unique_name)
        pulumi.set(__self__, "dataguard_association_id", dataguard_association_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "target_database_id", target_database_id)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "tls_config", tls_config)

    @_builtins.property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> 'outputs.GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemDatabaseDetailsResult':
        """
        Details of the database for the registration in Data Safe.
        """
        return pulumi.get(self, "database_details")

    @_builtins.property
    @pulumi.getter(name="databaseUniqueName")
    def database_unique_name(self) -> _builtins.str:
        """
        Unique name of the database associated to the peer target database.
        """
        return pulumi.get(self, "database_unique_name")

    @_builtins.property
    @pulumi.getter(name="dataguardAssociationId")
    def dataguard_association_id(self) -> _builtins.str:
        """
        The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        """
        return pulumi.get(self, "dataguard_association_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the peer target database in Data Safe.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        The display name of the peer target database in Data Safe.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.int:
        """
        The secondary key assigned for the peer target database in Data Safe.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the peer target database in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Role of the database associated to the peer target database.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the peer target database in Data Safe.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="targetDatabaseId")
    def target_database_id(self) -> _builtins.str:
        """
        The OCID of the Data Safe target database.
        """
        return pulumi.get(self, "target_database_id")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time of the peer target database registration in Data Safe.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="tlsConfig")
    def tls_config(self) -> 'outputs.GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemTlsConfigResult':
        """
        The details required to establish a TLS enabled connection.
        """
        return pulumi.get(self, "tls_config")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemDatabaseDetailsResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: _builtins.str,
                 database_type: _builtins.str,
                 db_system_id: _builtins.str,
                 infrastructure_type: _builtins.str,
                 instance_id: _builtins.str,
                 ip_addresses: Sequence[_builtins.str],
                 listener_port: _builtins.int,
                 service_name: _builtins.str,
                 vm_cluster_id: _builtins.str):
        """
        :param _builtins.str autonomous_database_id: The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str database_type: The database type.
        :param _builtins.str db_system_id: The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str infrastructure_type: The infrastructure type the database is running on.
        :param _builtins.str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: The port number of the database listener.
        :param _builtins.str service_name: The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> _builtins.str:
        """
        The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        The database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> _builtins.str:
        """
        The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        The infrastructure type the database is running on.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[_builtins.str]:
        """
        The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> _builtins.int:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> _builtins.str:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabasePeerTargetDatabasesPeerTargetDatabaseCollectionItemTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: _builtins.str,
                 key_store_content: _builtins.str,
                 status: _builtins.str,
                 store_password: _builtins.str,
                 trust_store_content: _builtins.str):
        """
        :param _builtins.str certificate_store_type: The format of the certificate store.
        :param _builtins.str key_store_content: Base64 encoded string of key store file content.
        :param _builtins.str status: Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str store_password: The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        pulumi.set(__self__, "key_store_content", key_store_content)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "store_password", store_password)
        pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> _builtins.str:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> _builtins.str:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetTargetDatabaseRoleFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabaseRoleRoleResult(dict):
    def __init__(__self__, *,
                 authentication_type: _builtins.str,
                 is_common: _builtins.bool,
                 is_implicit: _builtins.bool,
                 is_inherited: _builtins.bool,
                 is_oracle_maintained: _builtins.bool,
                 is_password_required: _builtins.bool,
                 role_name: _builtins.str):
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "is_common", is_common)
        pulumi.set(__self__, "is_implicit", is_implicit)
        pulumi.set(__self__, "is_inherited", is_inherited)
        pulumi.set(__self__, "is_oracle_maintained", is_oracle_maintained)
        pulumi.set(__self__, "is_password_required", is_password_required)
        pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="isCommon")
    def is_common(self) -> _builtins.bool:
        return pulumi.get(self, "is_common")

    @_builtins.property
    @pulumi.getter(name="isImplicit")
    def is_implicit(self) -> _builtins.bool:
        return pulumi.get(self, "is_implicit")

    @_builtins.property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> _builtins.bool:
        return pulumi.get(self, "is_inherited")

    @_builtins.property
    @pulumi.getter(name="isOracleMaintained")
    def is_oracle_maintained(self) -> _builtins.bool:
        return pulumi.get(self, "is_oracle_maintained")

    @_builtins.property
    @pulumi.getter(name="isPasswordRequired")
    def is_password_required(self) -> _builtins.bool:
        return pulumi.get(self, "is_password_required")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> _builtins.str:
        return pulumi.get(self, "role_name")


@pulumi.output_type
class GetTargetDatabaseRolesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabaseRolesRoleResult(dict):
    def __init__(__self__, *,
                 authentication_type: _builtins.str,
                 is_common: _builtins.bool,
                 is_implicit: _builtins.bool,
                 is_inherited: _builtins.bool,
                 is_oracle_maintained: _builtins.bool,
                 is_password_required: _builtins.bool,
                 role_name: _builtins.str):
        """
        :param _builtins.str authentication_type: A filter to return roles based on authentication type.
        :param _builtins.bool is_common: Is the role common.
        :param _builtins.bool is_implicit: Is the role implicit.
        :param _builtins.bool is_inherited: Is the role inherited.
        :param _builtins.bool is_oracle_maintained: A filter to return roles based on whether they are maintained by oracle or not.
        :param _builtins.bool is_password_required: Is password required.
        :param _builtins.str role_name: A filter to return only a specific role based on role name.
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "is_common", is_common)
        pulumi.set(__self__, "is_implicit", is_implicit)
        pulumi.set(__self__, "is_inherited", is_inherited)
        pulumi.set(__self__, "is_oracle_maintained", is_oracle_maintained)
        pulumi.set(__self__, "is_password_required", is_password_required)
        pulumi.set(__self__, "role_name", role_name)

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        A filter to return roles based on authentication type.
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter(name="isCommon")
    def is_common(self) -> _builtins.bool:
        """
        Is the role common.
        """
        return pulumi.get(self, "is_common")

    @_builtins.property
    @pulumi.getter(name="isImplicit")
    def is_implicit(self) -> _builtins.bool:
        """
        Is the role implicit.
        """
        return pulumi.get(self, "is_implicit")

    @_builtins.property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> _builtins.bool:
        """
        Is the role inherited.
        """
        return pulumi.get(self, "is_inherited")

    @_builtins.property
    @pulumi.getter(name="isOracleMaintained")
    def is_oracle_maintained(self) -> _builtins.bool:
        """
        A filter to return roles based on whether they are maintained by oracle or not.
        """
        return pulumi.get(self, "is_oracle_maintained")

    @_builtins.property
    @pulumi.getter(name="isPasswordRequired")
    def is_password_required(self) -> _builtins.bool:
        """
        Is password required.
        """
        return pulumi.get(self, "is_password_required")

    @_builtins.property
    @pulumi.getter(name="roleName")
    def role_name(self) -> _builtins.str:
        """
        A filter to return only a specific role based on role name.
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class GetTargetDatabaseTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: _builtins.str,
                 key_store_content: _builtins.str,
                 status: _builtins.str,
                 store_password: _builtins.str,
                 trust_store_content: _builtins.str):
        """
        :param _builtins.str certificate_store_type: The format of the certificate store.
        :param _builtins.str key_store_content: Base64 encoded string of key store file content.
        :param _builtins.str status: Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str store_password: The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        pulumi.set(__self__, "key_store_content", key_store_content)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "store_password", store_password)
        pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> _builtins.str:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> _builtins.str:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetTargetDatabasesColumnsColumnResult(dict):
    def __init__(__self__, *,
                 character_length: _builtins.int,
                 column_name: _builtins.str,
                 data_type: _builtins.str,
                 length: _builtins.str,
                 precision: _builtins.int,
                 scale: _builtins.int,
                 schema_name: _builtins.str,
                 table_name: _builtins.str):
        """
        :param _builtins.int character_length: Character length.
        :param _builtins.str column_name: A filter to return only a specific column based on column name.
        :param _builtins.str data_type: Data type of the column.
        :param _builtins.str length: Length of the data represented by the column.
        :param _builtins.int precision: Precision of the column.
        :param _builtins.int scale: Scale of the column.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str table_name: A filter to return only items related to specific table name.
        """
        pulumi.set(__self__, "character_length", character_length)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "precision", precision)
        pulumi.set(__self__, "scale", scale)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "table_name", table_name)

    @_builtins.property
    @pulumi.getter(name="characterLength")
    def character_length(self) -> _builtins.int:
        """
        Character length.
        """
        return pulumi.get(self, "character_length")

    @_builtins.property
    @pulumi.getter(name="columnName")
    def column_name(self) -> _builtins.str:
        """
        A filter to return only a specific column based on column name.
        """
        return pulumi.get(self, "column_name")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> _builtins.str:
        """
        Data type of the column.
        """
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter
    def length(self) -> _builtins.str:
        """
        Length of the data represented by the column.
        """
        return pulumi.get(self, "length")

    @_builtins.property
    @pulumi.getter
    def precision(self) -> _builtins.int:
        """
        Precision of the column.
        """
        return pulumi.get(self, "precision")

    @_builtins.property
    @pulumi.getter
    def scale(self) -> _builtins.int:
        """
        Scale of the column.
        """
        return pulumi.get(self, "scale")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific table name.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetTargetDatabasesColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasesSchemasFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasesSchemasSchemaResult(dict):
    def __init__(__self__, *,
                 is_oracle_maintained: _builtins.bool,
                 schema_name: _builtins.str):
        """
        :param _builtins.bool is_oracle_maintained: A filter to return only items related to specific type of schema.
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        """
        pulumi.set(__self__, "is_oracle_maintained", is_oracle_maintained)
        pulumi.set(__self__, "schema_name", schema_name)

    @_builtins.property
    @pulumi.getter(name="isOracleMaintained")
    def is_oracle_maintained(self) -> _builtins.bool:
        """
        A filter to return only items related to specific type of schema.
        """
        return pulumi.get(self, "is_oracle_maintained")

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetTargetDatabasesTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasesTablesTableResult(dict):
    def __init__(__self__, *,
                 schema_name: _builtins.str,
                 table_name: _builtins.str):
        """
        :param _builtins.str schema_name: A filter to return only items related to specific schema name.
        :param _builtins.str table_name: A filter to return only items related to specific table name.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "table_name", table_name)

    @_builtins.property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific schema name.
        """
        return pulumi.get(self, "schema_name")

    @_builtins.property
    @pulumi.getter(name="tableName")
    def table_name(self) -> _builtins.str:
        """
        A filter to return only items related to specific table name.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseResult(dict):
    def __init__(__self__, *,
                 associated_resource_ids: Sequence[_builtins.str],
                 compartment_id: _builtins.str,
                 connection_options: Sequence['outputs.GetTargetDatabasesTargetDatabaseConnectionOptionResult'],
                 credentials: Sequence['outputs.GetTargetDatabasesTargetDatabaseCredentialResult'],
                 database_details: Sequence['outputs.GetTargetDatabasesTargetDatabaseDatabaseDetailResult'],
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 peer_target_database_details: Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailResult'],
                 peer_target_databases: Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseResult'],
                 state: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 time_created: _builtins.str,
                 time_updated: _builtins.str,
                 tls_configs: Sequence['outputs.GetTargetDatabasesTargetDatabaseTlsConfigResult']):
        """
        :param Sequence[_builtins.str] associated_resource_ids: The OCIDs of associated resources like database, Data Safe private endpoint etc.
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Sequence['GetTargetDatabasesTargetDatabaseConnectionOptionArgs'] connection_options: Types of connection supported by Data Safe.
        :param Sequence['GetTargetDatabasesTargetDatabaseCredentialArgs'] credentials: The database credentials required for Data Safe to connect to the database.
        :param Sequence['GetTargetDatabasesTargetDatabaseDatabaseDetailArgs'] database_details: Details of the database for the registration in Data Safe.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the peer target database in Data Safe.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the Data Safe target database.
        :param _builtins.str lifecycle_details: Details about the current state of the peer target database in Data Safe.
        :param Sequence['GetTargetDatabasesTargetDatabasePeerTargetDatabaseArgs'] peer_target_databases: The OCIDs of associated resources like Database, Data Safe private endpoint etc.
        :param _builtins.str state: A filter to return only target databases that match the specified lifecycle state.
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str time_created: The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        :param _builtins.str time_updated: The date and time of the target database update in Data Safe.
        :param Sequence['GetTargetDatabasesTargetDatabaseTlsConfigArgs'] tls_configs: The details required to establish a TLS enabled connection.
        """
        pulumi.set(__self__, "associated_resource_ids", associated_resource_ids)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "connection_options", connection_options)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "database_details", database_details)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "peer_target_database_details", peer_target_database_details)
        pulumi.set(__self__, "peer_target_databases", peer_target_databases)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "tls_configs", tls_configs)

    @_builtins.property
    @pulumi.getter(name="associatedResourceIds")
    def associated_resource_ids(self) -> Sequence[_builtins.str]:
        """
        The OCIDs of associated resources like database, Data Safe private endpoint etc.
        """
        return pulumi.get(self, "associated_resource_ids")

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="connectionOptions")
    def connection_options(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabaseConnectionOptionResult']:
        """
        Types of connection supported by Data Safe.
        """
        return pulumi.get(self, "connection_options")

    @_builtins.property
    @pulumi.getter
    def credentials(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabaseCredentialResult']:
        """
        The database credentials required for Data Safe to connect to the database.
        """
        return pulumi.get(self, "credentials")

    @_builtins.property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabaseDatabaseDetailResult']:
        """
        Details of the database for the registration in Data Safe.
        """
        return pulumi.get(self, "database_details")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the peer target database in Data Safe.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the Data Safe target database.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the peer target database in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter(name="peerTargetDatabaseDetails")
    def peer_target_database_details(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailResult']:
        return pulumi.get(self, "peer_target_database_details")

    @_builtins.property
    @pulumi.getter(name="peerTargetDatabases")
    def peer_target_databases(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseResult']:
        """
        The OCIDs of associated resources like Database, Data Safe private endpoint etc.
        """
        return pulumi.get(self, "peer_target_databases")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only target databases that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time of the target database update in Data Safe.
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="tlsConfigs")
    def tls_configs(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabaseTlsConfigResult']:
        """
        The details required to establish a TLS enabled connection.
        """
        return pulumi.get(self, "tls_configs")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseConnectionOptionResult(dict):
    def __init__(__self__, *,
                 connection_type: _builtins.str,
                 datasafe_private_endpoint_id: _builtins.str,
                 on_prem_connector_id: _builtins.str):
        """
        :param _builtins.str connection_type: The connection type used to connect to the database. Allowed values:
               * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
               * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        :param _builtins.str datasafe_private_endpoint_id: The OCID of the Data Safe private endpoint.
        :param _builtins.str on_prem_connector_id: The OCID of the on-premises connector.
        """
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "datasafe_private_endpoint_id", datasafe_private_endpoint_id)
        pulumi.set(__self__, "on_prem_connector_id", on_prem_connector_id)

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The connection type used to connect to the database. Allowed values:
        * PRIVATE_ENDPOINT - Represents connection through private endpoint in Data Safe.
        * ONPREM_CONNECTOR - Represents connection through on-premises connector in Data Safe.
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter(name="datasafePrivateEndpointId")
    def datasafe_private_endpoint_id(self) -> _builtins.str:
        """
        The OCID of the Data Safe private endpoint.
        """
        return pulumi.get(self, "datasafe_private_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="onPremConnectorId")
    def on_prem_connector_id(self) -> _builtins.str:
        """
        The OCID of the on-premises connector.
        """
        return pulumi.get(self, "on_prem_connector_id")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseCredentialResult(dict):
    def __init__(__self__, *,
                 password: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str password: The password of the database user.
        :param _builtins.str user_name: The database user name.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def password(self) -> _builtins.str:
        """
        The password of the database user.
        """
        return pulumi.get(self, "password")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The database user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: _builtins.str,
                 database_type: _builtins.str,
                 db_system_id: _builtins.str,
                 infrastructure_type: _builtins.str,
                 instance_id: _builtins.str,
                 ip_addresses: Sequence[_builtins.str],
                 listener_port: _builtins.int,
                 service_name: _builtins.str,
                 vm_cluster_id: _builtins.str):
        """
        :param _builtins.str autonomous_database_id: The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str database_type: A filter to return only target databases that match the specified database type.
        :param _builtins.str db_system_id: The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str infrastructure_type: A filter to return only target databases that match the specified infrastructure type.
        :param _builtins.str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: The port number of the database listener.
        :param _builtins.str service_name: The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> _builtins.str:
        """
        The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        A filter to return only target databases that match the specified database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> _builtins.str:
        """
        The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        A filter to return only target databases that match the specified infrastructure type.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[_builtins.str]:
        """
        The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> _builtins.int:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> _builtins.str:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabasesTargetDatabasePeerTargetDatabaseResult(dict):
    def __init__(__self__, *,
                 database_details: Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetailResult'],
                 database_unique_name: _builtins.str,
                 dataguard_association_id: _builtins.str,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 key: _builtins.int,
                 lifecycle_details: _builtins.str,
                 role: _builtins.str,
                 state: _builtins.str,
                 time_created: _builtins.str,
                 tls_configs: Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfigResult']):
        """
        :param Sequence['GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetailArgs'] database_details: Details of the database for the registration in Data Safe.
        :param _builtins.str database_unique_name: Unique name of the database associated to the peer target database.
        :param _builtins.str dataguard_association_id: The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        :param _builtins.str description: The description of the peer target database in Data Safe.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param _builtins.int key: The secondary key assigned for the peer target database in Data Safe.
        :param _builtins.str lifecycle_details: Details about the current state of the peer target database in Data Safe.
        :param _builtins.str role: Role of the database associated to the peer target database.
        :param _builtins.str state: A filter to return only target databases that match the specified lifecycle state.
        :param _builtins.str time_created: The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        :param Sequence['GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfigArgs'] tls_configs: The details required to establish a TLS enabled connection.
        """
        pulumi.set(__self__, "database_details", database_details)
        pulumi.set(__self__, "database_unique_name", database_unique_name)
        pulumi.set(__self__, "dataguard_association_id", dataguard_association_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "tls_configs", tls_configs)

    @_builtins.property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetailResult']:
        """
        Details of the database for the registration in Data Safe.
        """
        return pulumi.get(self, "database_details")

    @_builtins.property
    @pulumi.getter(name="databaseUniqueName")
    def database_unique_name(self) -> _builtins.str:
        """
        Unique name of the database associated to the peer target database.
        """
        return pulumi.get(self, "database_unique_name")

    @_builtins.property
    @pulumi.getter(name="dataguardAssociationId")
    def dataguard_association_id(self) -> _builtins.str:
        """
        The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        """
        return pulumi.get(self, "dataguard_association_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the peer target database in Data Safe.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.int:
        """
        The secondary key assigned for the peer target database in Data Safe.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the peer target database in Data Safe.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Role of the database associated to the peer target database.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        A filter to return only target databases that match the specified lifecycle state.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the database was registered in Data Safe and created as a target database in Data Safe.
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="tlsConfigs")
    def tls_configs(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfigResult']:
        """
        The details required to establish a TLS enabled connection.
        """
        return pulumi.get(self, "tls_configs")


@pulumi.output_type
class GetTargetDatabasesTargetDatabasePeerTargetDatabaseDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: _builtins.str,
                 database_type: _builtins.str,
                 db_system_id: _builtins.str,
                 infrastructure_type: _builtins.str,
                 instance_id: _builtins.str,
                 ip_addresses: Sequence[_builtins.str],
                 listener_port: _builtins.int,
                 service_name: _builtins.str,
                 vm_cluster_id: _builtins.str):
        """
        :param _builtins.str autonomous_database_id: The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str database_type: A filter to return only target databases that match the specified database type.
        :param _builtins.str db_system_id: The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str infrastructure_type: A filter to return only target databases that match the specified infrastructure type.
        :param _builtins.str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: The port number of the database listener.
        :param _builtins.str service_name: The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> _builtins.str:
        """
        The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        A filter to return only target databases that match the specified database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> _builtins.str:
        """
        The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        A filter to return only target databases that match the specified infrastructure type.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[_builtins.str]:
        """
        The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> _builtins.int:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> _builtins.str:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 database_details: Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailDatabaseDetailResult'],
                 dataguard_association_id: _builtins.str,
                 description: _builtins.str,
                 display_name: _builtins.str,
                 tls_configs: Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailTlsConfigResult']):
        """
        :param Sequence['GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailDatabaseDetailArgs'] database_details: Details of the database for the registration in Data Safe.
        :param _builtins.str dataguard_association_id: The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        :param _builtins.str description: The description of the peer target database in Data Safe.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Sequence['GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailTlsConfigArgs'] tls_configs: The details required to establish a TLS enabled connection.
        """
        pulumi.set(__self__, "database_details", database_details)
        pulumi.set(__self__, "dataguard_association_id", dataguard_association_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "tls_configs", tls_configs)

    @_builtins.property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailDatabaseDetailResult']:
        """
        Details of the database for the registration in Data Safe.
        """
        return pulumi.get(self, "database_details")

    @_builtins.property
    @pulumi.getter(name="dataguardAssociationId")
    def dataguard_association_id(self) -> _builtins.str:
        """
        The OCID of the Data Guard Association resource in which the database associated to the peer target database is considered as peer database to the primary database.
        """
        return pulumi.get(self, "dataguard_association_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the peer target database in Data Safe.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="tlsConfigs")
    def tls_configs(self) -> Sequence['outputs.GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailTlsConfigResult']:
        """
        The details required to establish a TLS enabled connection.
        """
        return pulumi.get(self, "tls_configs")


@pulumi.output_type
class GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: _builtins.str,
                 database_type: _builtins.str,
                 db_system_id: _builtins.str,
                 infrastructure_type: _builtins.str,
                 instance_id: _builtins.str,
                 ip_addresses: Sequence[_builtins.str],
                 listener_port: _builtins.int,
                 service_name: _builtins.str,
                 vm_cluster_id: _builtins.str):
        """
        :param _builtins.str autonomous_database_id: The OCID of the Autonomous Database registered as a target database in Data Safe.
        :param _builtins.str database_type: A filter to return only target databases that match the specified database type.
        :param _builtins.str db_system_id: The OCID of the cloud database registered as a target database in Data Safe.
        :param _builtins.str infrastructure_type: A filter to return only target databases that match the specified infrastructure type.
        :param _builtins.str instance_id: The OCID of the compute instance on which the database is running.
        :param Sequence[_builtins.str] ip_addresses: The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        :param _builtins.int listener_port: The port number of the database listener.
        :param _builtins.str service_name: The service name of the database registered as target database.
        :param _builtins.str vm_cluster_id: The OCID of the VM cluster in which the database is running.
        """
        pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "db_system_id", db_system_id)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @_builtins.property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> _builtins.str:
        """
        The OCID of the Autonomous Database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "autonomous_database_id")

    @_builtins.property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> _builtins.str:
        """
        A filter to return only target databases that match the specified database type.
        """
        return pulumi.get(self, "database_type")

    @_builtins.property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> _builtins.str:
        """
        The OCID of the cloud database registered as a target database in Data Safe.
        """
        return pulumi.get(self, "db_system_id")

    @_builtins.property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> _builtins.str:
        """
        A filter to return only target databases that match the specified infrastructure type.
        """
        return pulumi.get(self, "infrastructure_type")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        """
        The OCID of the compute instance on which the database is running.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Sequence[_builtins.str]:
        """
        The list of database host IP Addresses. Fully qualified domain names can be used if connectionType is 'ONPREM_CONNECTOR'.
        """
        return pulumi.get(self, "ip_addresses")

    @_builtins.property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> _builtins.int:
        """
        The port number of the database listener.
        """
        return pulumi.get(self, "listener_port")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The service name of the database registered as target database.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> _builtins.str:
        """
        The OCID of the VM cluster in which the database is running.
        """
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabasesTargetDatabasePeerTargetDatabaseDetailTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: _builtins.str,
                 key_store_content: _builtins.str,
                 status: _builtins.str,
                 store_password: _builtins.str,
                 trust_store_content: _builtins.str):
        """
        :param _builtins.str certificate_store_type: The format of the certificate store.
        :param _builtins.str key_store_content: Base64 encoded string of key store file content.
        :param _builtins.str status: Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str store_password: The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        pulumi.set(__self__, "key_store_content", key_store_content)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "store_password", store_password)
        pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> _builtins.str:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> _builtins.str:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetTargetDatabasesTargetDatabasePeerTargetDatabaseTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: _builtins.str,
                 key_store_content: _builtins.str,
                 status: _builtins.str,
                 store_password: _builtins.str,
                 trust_store_content: _builtins.str):
        """
        :param _builtins.str certificate_store_type: The format of the certificate store.
        :param _builtins.str key_store_content: Base64 encoded string of key store file content.
        :param _builtins.str status: Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str store_password: The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        pulumi.set(__self__, "key_store_content", key_store_content)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "store_password", store_password)
        pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> _builtins.str:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> _builtins.str:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: _builtins.str,
                 key_store_content: _builtins.str,
                 status: _builtins.str,
                 store_password: _builtins.str,
                 trust_store_content: _builtins.str):
        """
        :param _builtins.str certificate_store_type: The format of the certificate store.
        :param _builtins.str key_store_content: Base64 encoded string of key store file content.
        :param _builtins.str status: Status to represent whether the database connection is TLS enabled or not.
        :param _builtins.str store_password: The password to read the trust store and key store files, if they are password protected.
        :param _builtins.str trust_store_content: Base64 encoded string of trust store file content.
        """
        pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        pulumi.set(__self__, "key_store_content", key_store_content)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "store_password", store_password)
        pulumi.set(__self__, "trust_store_content", trust_store_content)

    @_builtins.property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> _builtins.str:
        """
        The format of the certificate store.
        """
        return pulumi.get(self, "certificate_store_type")

    @_builtins.property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of key store file content.
        """
        return pulumi.get(self, "key_store_content")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status to represent whether the database connection is TLS enabled or not.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> _builtins.str:
        """
        The password to read the trust store and key store files, if they are password protected.
        """
        return pulumi.get(self, "store_password")

    @_builtins.property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> _builtins.str:
        """
        Base64 encoded string of trust store file content.
        """
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetUserAssessmentComparisonSummaryResult(dict):
    def __init__(__self__, *,
                 baselines: Sequence['outputs.GetUserAssessmentComparisonSummaryBaselineResult'],
                 currents: Sequence['outputs.GetUserAssessmentComparisonSummaryCurrentResult'],
                 status: _builtins.str):
        pulumi.set(__self__, "baselines", baselines)
        pulumi.set(__self__, "currents", currents)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def baselines(self) -> Sequence['outputs.GetUserAssessmentComparisonSummaryBaselineResult']:
        return pulumi.get(self, "baselines")

    @_builtins.property
    @pulumi.getter
    def currents(self) -> Sequence['outputs.GetUserAssessmentComparisonSummaryCurrentResult']:
        return pulumi.get(self, "currents")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetUserAssessmentComparisonSummaryBaselineResult(dict):
    def __init__(__self__, *,
                 target_id: _builtins.str,
                 user_assessment_id: _builtins.str):
        """
        :param _builtins.str user_assessment_id: The OCID of the user assessment.
        """
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> _builtins.str:
        """
        The OCID of the user assessment.
        """
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetUserAssessmentComparisonSummaryCurrentResult(dict):
    def __init__(__self__, *,
                 target_id: _builtins.str,
                 user_assessment_id: _builtins.str):
        """
        :param _builtins.str user_assessment_id: The OCID of the user assessment.
        """
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> _builtins.str:
        """
        The OCID of the user assessment.
        """
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetUserAssessmentIgnoredTargetResult(dict):
    def __init__(__self__, *,
                 lifecycle_state: _builtins.str,
                 target_id: _builtins.str,
                 user_assessment_id: _builtins.str):
        """
        :param _builtins.str user_assessment_id: The OCID of the user assessment.
        """
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> _builtins.str:
        """
        The OCID of the user assessment.
        """
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetUserAssessmentPasswordExpiryDateAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationItemResult']):
        """
        :param Sequence['GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationItemArgs'] items: List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationItemResult']:
        """
        List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetUserAssessmentPasswordExpiryDateAnalyticsUserAggregationItemResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetUserAssessmentProfileAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentProfileAnalyticsProfileAggregationResult(dict):
    def __init__(__self__, *,
                 defined_tags: Mapping[str, _builtins.str],
                 freeform_tags: Mapping[str, _builtins.str],
                 items: Sequence[Any]):
        """
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param Sequence[Any] items: The array of profile aggregation data.
        """
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence[Any]:
        """
        The array of profile aggregation data.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetUserAssessmentProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentProfilesProfileResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 composite_limit: _builtins.str,
                 connect_time: _builtins.str,
                 cpu_per_call: _builtins.str,
                 cpu_per_session: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 failed_login_attempts: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 idle_time: _builtins.str,
                 inactive_account_time: _builtins.str,
                 is_user_created: _builtins.bool,
                 logical_reads_per_call: _builtins.str,
                 logical_reads_per_session: _builtins.str,
                 password_grace_time: _builtins.str,
                 password_life_time: _builtins.str,
                 password_lock_time: _builtins.str,
                 password_reuse_max: _builtins.str,
                 password_reuse_time: _builtins.str,
                 password_rollover_time: _builtins.str,
                 password_verification_function: _builtins.str,
                 password_verification_function_details: _builtins.str,
                 private_sga: _builtins.str,
                 profile_name: _builtins.str,
                 sessions_per_user: _builtins.str,
                 target_id: _builtins.str,
                 user_assessment_id: _builtins.str,
                 user_count: _builtins.int):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param _builtins.str composite_limit: Specify the total resource cost for a session, expressed in service units. Oracle Database calculates the total service units as a weighted sum of CPU_PER_SESSION, CONNECT_TIME, LOGICAL_READS_PER_SESSION, and PRIVATE_SGA.
        :param _builtins.str connect_time: Specify the total elapsed time limit for a session, expressed in minutes.
        :param _builtins.str cpu_per_call: Specify the CPU time limit for a call (a parse, execute, or fetch), expressed in hundredths of seconds.
        :param _builtins.str cpu_per_session: Specify the CPU time limit for a session, expressed in hundredth of seconds.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str failed_login_attempts: Maximum times the user is allowed in fail login before the user account is locked.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str idle_time: Specify the permitted periods of continuous inactive time during a  session, expressed in minutes.
        :param _builtins.str inactive_account_time: The permitted periods of continuous inactive time during a session, expressed in minutes. Long-running queries and other operations are not subjected to this limit.
        :param _builtins.bool is_user_created: An optional filter to return the user created profiles.
        :param _builtins.str logical_reads_per_call: Specify the permitted the number of data blocks read for a call to process a SQL statement (a parse, execute, or fetch).
        :param _builtins.str logical_reads_per_session: Specify the permitted number of data blocks read in a session, including blocks read from memory and disk.
        :param _builtins.str password_grace_time: Number of grace days for user to change password.
        :param _builtins.str password_life_time: Number of days the password is valid before expiry.
        :param _builtins.str password_lock_time: Number of days the user account remains locked after failed login.
        :param _builtins.str password_reuse_max: Number of day after the user can use the already used password.
        :param _builtins.str password_reuse_time: Number of days before which a password cannot be reused.
        :param _builtins.str password_rollover_time: Number of days the password rollover is allowed. Minimum value can be 1/24 day (1 hour) to 60 days.
        :param _builtins.str password_verification_function: An optional filter to filter the profiles based on password verification function.
        :param _builtins.str password_verification_function_details: Details about the PL/SQL that can be used for password verification.
        :param _builtins.str private_sga: Specify the amount of private space a session can allocate in the shared pool of the system global area (SGA), expressed in bytes.
        :param _builtins.str profile_name: A filter to return only items that match the specified profile name.
        :param _builtins.str sessions_per_user: Specify the number of concurrent sessions to which you want to limit the user.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str user_assessment_id: The OCID of the user assessment.
        :param _builtins.int user_count: The number of users that have a given profile.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "composite_limit", composite_limit)
        pulumi.set(__self__, "connect_time", connect_time)
        pulumi.set(__self__, "cpu_per_call", cpu_per_call)
        pulumi.set(__self__, "cpu_per_session", cpu_per_session)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "failed_login_attempts", failed_login_attempts)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "idle_time", idle_time)
        pulumi.set(__self__, "inactive_account_time", inactive_account_time)
        pulumi.set(__self__, "is_user_created", is_user_created)
        pulumi.set(__self__, "logical_reads_per_call", logical_reads_per_call)
        pulumi.set(__self__, "logical_reads_per_session", logical_reads_per_session)
        pulumi.set(__self__, "password_grace_time", password_grace_time)
        pulumi.set(__self__, "password_life_time", password_life_time)
        pulumi.set(__self__, "password_lock_time", password_lock_time)
        pulumi.set(__self__, "password_reuse_max", password_reuse_max)
        pulumi.set(__self__, "password_reuse_time", password_reuse_time)
        pulumi.set(__self__, "password_rollover_time", password_rollover_time)
        pulumi.set(__self__, "password_verification_function", password_verification_function)
        pulumi.set(__self__, "password_verification_function_details", password_verification_function_details)
        pulumi.set(__self__, "private_sga", private_sga)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "sessions_per_user", sessions_per_user)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "user_assessment_id", user_assessment_id)
        pulumi.set(__self__, "user_count", user_count)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="compositeLimit")
    def composite_limit(self) -> _builtins.str:
        """
        Specify the total resource cost for a session, expressed in service units. Oracle Database calculates the total service units as a weighted sum of CPU_PER_SESSION, CONNECT_TIME, LOGICAL_READS_PER_SESSION, and PRIVATE_SGA.
        """
        return pulumi.get(self, "composite_limit")

    @_builtins.property
    @pulumi.getter(name="connectTime")
    def connect_time(self) -> _builtins.str:
        """
        Specify the total elapsed time limit for a session, expressed in minutes.
        """
        return pulumi.get(self, "connect_time")

    @_builtins.property
    @pulumi.getter(name="cpuPerCall")
    def cpu_per_call(self) -> _builtins.str:
        """
        Specify the CPU time limit for a call (a parse, execute, or fetch), expressed in hundredths of seconds.
        """
        return pulumi.get(self, "cpu_per_call")

    @_builtins.property
    @pulumi.getter(name="cpuPerSession")
    def cpu_per_session(self) -> _builtins.str:
        """
        Specify the CPU time limit for a session, expressed in hundredth of seconds.
        """
        return pulumi.get(self, "cpu_per_session")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter(name="failedLoginAttempts")
    def failed_login_attempts(self) -> _builtins.str:
        """
        Maximum times the user is allowed in fail login before the user account is locked.
        """
        return pulumi.get(self, "failed_login_attempts")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter(name="idleTime")
    def idle_time(self) -> _builtins.str:
        """
        Specify the permitted periods of continuous inactive time during a  session, expressed in minutes.
        """
        return pulumi.get(self, "idle_time")

    @_builtins.property
    @pulumi.getter(name="inactiveAccountTime")
    def inactive_account_time(self) -> _builtins.str:
        """
        The permitted periods of continuous inactive time during a session, expressed in minutes. Long-running queries and other operations are not subjected to this limit.
        """
        return pulumi.get(self, "inactive_account_time")

    @_builtins.property
    @pulumi.getter(name="isUserCreated")
    def is_user_created(self) -> _builtins.bool:
        """
        An optional filter to return the user created profiles.
        """
        return pulumi.get(self, "is_user_created")

    @_builtins.property
    @pulumi.getter(name="logicalReadsPerCall")
    def logical_reads_per_call(self) -> _builtins.str:
        """
        Specify the permitted the number of data blocks read for a call to process a SQL statement (a parse, execute, or fetch).
        """
        return pulumi.get(self, "logical_reads_per_call")

    @_builtins.property
    @pulumi.getter(name="logicalReadsPerSession")
    def logical_reads_per_session(self) -> _builtins.str:
        """
        Specify the permitted number of data blocks read in a session, including blocks read from memory and disk.
        """
        return pulumi.get(self, "logical_reads_per_session")

    @_builtins.property
    @pulumi.getter(name="passwordGraceTime")
    def password_grace_time(self) -> _builtins.str:
        """
        Number of grace days for user to change password.
        """
        return pulumi.get(self, "password_grace_time")

    @_builtins.property
    @pulumi.getter(name="passwordLifeTime")
    def password_life_time(self) -> _builtins.str:
        """
        Number of days the password is valid before expiry.
        """
        return pulumi.get(self, "password_life_time")

    @_builtins.property
    @pulumi.getter(name="passwordLockTime")
    def password_lock_time(self) -> _builtins.str:
        """
        Number of days the user account remains locked after failed login.
        """
        return pulumi.get(self, "password_lock_time")

    @_builtins.property
    @pulumi.getter(name="passwordReuseMax")
    def password_reuse_max(self) -> _builtins.str:
        """
        Number of day after the user can use the already used password.
        """
        return pulumi.get(self, "password_reuse_max")

    @_builtins.property
    @pulumi.getter(name="passwordReuseTime")
    def password_reuse_time(self) -> _builtins.str:
        """
        Number of days before which a password cannot be reused.
        """
        return pulumi.get(self, "password_reuse_time")

    @_builtins.property
    @pulumi.getter(name="passwordRolloverTime")
    def password_rollover_time(self) -> _builtins.str:
        """
        Number of days the password rollover is allowed. Minimum value can be 1/24 day (1 hour) to 60 days.
        """
        return pulumi.get(self, "password_rollover_time")

    @_builtins.property
    @pulumi.getter(name="passwordVerificationFunction")
    def password_verification_function(self) -> _builtins.str:
        """
        An optional filter to filter the profiles based on password verification function.
        """
        return pulumi.get(self, "password_verification_function")

    @_builtins.property
    @pulumi.getter(name="passwordVerificationFunctionDetails")
    def password_verification_function_details(self) -> _builtins.str:
        """
        Details about the PL/SQL that can be used for password verification.
        """
        return pulumi.get(self, "password_verification_function_details")

    @_builtins.property
    @pulumi.getter(name="privateSga")
    def private_sga(self) -> _builtins.str:
        """
        Specify the amount of private space a session can allocate in the shared pool of the system global area (SGA), expressed in bytes.
        """
        return pulumi.get(self, "private_sga")

    @_builtins.property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> _builtins.str:
        """
        A filter to return only items that match the specified profile name.
        """
        return pulumi.get(self, "profile_name")

    @_builtins.property
    @pulumi.getter(name="sessionsPerUser")
    def sessions_per_user(self) -> _builtins.str:
        """
        Specify the number of concurrent sessions to which you want to limit the user.
        """
        return pulumi.get(self, "sessions_per_user")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> _builtins.str:
        """
        The OCID of the user assessment.
        """
        return pulumi.get(self, "user_assessment_id")

    @_builtins.property
    @pulumi.getter(name="userCount")
    def user_count(self) -> _builtins.int:
        """
        The number of users that have a given profile.
        """
        return pulumi.get(self, "user_count")


@pulumi.output_type
class GetUserAssessmentUserAccessAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollectionItemResult']):
        """
        :param Sequence['GetUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollectionItemArgs'] items: An array of user access analytics summary objects.
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollectionItemResult']:
        """
        An array of user access analytics summary objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetUserAssessmentUserAccessAnalyticsUserAccessAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 user_assessment_user_access_analytic_count: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str user_assessment_user_access_analytic_count: The total count of schemas a user can access
        :param _builtins.str user_name: Name of the user.
        """
        pulumi.set(__self__, "user_assessment_user_access_analytic_count", user_assessment_user_access_analytic_count)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="userAssessmentUserAccessAnalyticCount")
    def user_assessment_user_access_analytic_count(self) -> _builtins.str:
        """
        The total count of schemas a user can access
        """
        return pulumi.get(self, "user_assessment_user_access_analytic_count")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        Name of the user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetUserAssessmentUserAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentUserAnalyticsUserAggregationResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetUserAssessmentUserAnalyticsUserAggregationItemResult']):
        """
        :param Sequence['GetUserAssessmentUserAnalyticsUserAggregationItemArgs'] items: List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        """
        pulumi.set(__self__, "items", items)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetUserAssessmentUserAnalyticsUserAggregationItemResult']:
        """
        List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetUserAssessmentUserAnalyticsUserAggregationItemResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetUserAssessmentUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentUsersUserResult(dict):
    def __init__(__self__, *,
                 account_status: _builtins.str,
                 admin_roles: Sequence[_builtins.str],
                 are_all_schemas_accessible: _builtins.bool,
                 authentication_type: _builtins.str,
                 key: _builtins.str,
                 schema_lists: Sequence[_builtins.str],
                 target_id: _builtins.str,
                 time_last_login: _builtins.str,
                 time_password_changed: _builtins.str,
                 time_password_expiry: _builtins.str,
                 time_user_created: _builtins.str,
                 user_category: _builtins.str,
                 user_name: _builtins.str,
                 user_profile: _builtins.str,
                 user_types: Sequence[_builtins.str]):
        """
        :param _builtins.str account_status: A filter to return only items that match the specified account status.
        :param Sequence[_builtins.str] admin_roles: The admin roles granted to the user.
        :param _builtins.bool are_all_schemas_accessible: A filter to return only items that match the criteria that all schemas can be accessed by a user.
        :param _builtins.str authentication_type: A filter to return only items that match the specified authentication type.
        :param _builtins.str key: The unique user key. This is a system-generated identifier. Use ListUsers to get the user key for a user.
        :param Sequence[_builtins.str] schema_lists: A filter to return items that contain the specified schema list.
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param _builtins.str time_last_login: The date and time the user last logged in, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_password_changed: The date and time the user password was last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_password_expiry: The date and time the user's password will expire, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_user_created: The date and time the user was created in the database, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str user_category: A filter to return only items that match the specified user category.
        :param _builtins.str user_name: A filter to return only items that match the specified user name.
        :param _builtins.str user_profile: A filter to return only items that match the specified user profile.
        :param Sequence[_builtins.str] user_types: The user type, which can be a combination of the following:
        """
        pulumi.set(__self__, "account_status", account_status)
        pulumi.set(__self__, "admin_roles", admin_roles)
        pulumi.set(__self__, "are_all_schemas_accessible", are_all_schemas_accessible)
        pulumi.set(__self__, "authentication_type", authentication_type)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "schema_lists", schema_lists)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "time_last_login", time_last_login)
        pulumi.set(__self__, "time_password_changed", time_password_changed)
        pulumi.set(__self__, "time_password_expiry", time_password_expiry)
        pulumi.set(__self__, "time_user_created", time_user_created)
        pulumi.set(__self__, "user_category", user_category)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "user_profile", user_profile)
        pulumi.set(__self__, "user_types", user_types)

    @_builtins.property
    @pulumi.getter(name="accountStatus")
    def account_status(self) -> _builtins.str:
        """
        A filter to return only items that match the specified account status.
        """
        return pulumi.get(self, "account_status")

    @_builtins.property
    @pulumi.getter(name="adminRoles")
    def admin_roles(self) -> Sequence[_builtins.str]:
        """
        The admin roles granted to the user.
        """
        return pulumi.get(self, "admin_roles")

    @_builtins.property
    @pulumi.getter(name="areAllSchemasAccessible")
    def are_all_schemas_accessible(self) -> _builtins.bool:
        """
        A filter to return only items that match the criteria that all schemas can be accessed by a user.
        """
        return pulumi.get(self, "are_all_schemas_accessible")

    @_builtins.property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> _builtins.str:
        """
        A filter to return only items that match the specified authentication type.
        """
        return pulumi.get(self, "authentication_type")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The unique user key. This is a system-generated identifier. Use ListUsers to get the user key for a user.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="schemaLists")
    def schema_lists(self) -> Sequence[_builtins.str]:
        """
        A filter to return items that contain the specified schema list.
        """
        return pulumi.get(self, "schema_lists")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="timeLastLogin")
    def time_last_login(self) -> _builtins.str:
        """
        The date and time the user last logged in, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_last_login")

    @_builtins.property
    @pulumi.getter(name="timePasswordChanged")
    def time_password_changed(self) -> _builtins.str:
        """
        The date and time the user password was last changed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_password_changed")

    @_builtins.property
    @pulumi.getter(name="timePasswordExpiry")
    def time_password_expiry(self) -> _builtins.str:
        """
        The date and time the user's password will expire, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_password_expiry")

    @_builtins.property
    @pulumi.getter(name="timeUserCreated")
    def time_user_created(self) -> _builtins.str:
        """
        The date and time the user was created in the database, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_user_created")

    @_builtins.property
    @pulumi.getter(name="userCategory")
    def user_category(self) -> _builtins.str:
        """
        A filter to return only items that match the specified user category.
        """
        return pulumi.get(self, "user_category")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        A filter to return only items that match the specified user name.
        """
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="userProfile")
    def user_profile(self) -> _builtins.str:
        """
        A filter to return only items that match the specified user profile.
        """
        return pulumi.get(self, "user_profile")

    @_builtins.property
    @pulumi.getter(name="userTypes")
    def user_types(self) -> Sequence[_builtins.str]:
        """
        The user type, which can be a combination of the following:
        """
        return pulumi.get(self, "user_types")


@pulumi.output_type
class GetUserAssessmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str],
                 regex: Optional[_builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")

    @_builtins.property
    @pulumi.getter
    def regex(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentsIgnoredTargetResult(dict):
    def __init__(__self__, *,
                 lifecycle_state: _builtins.str,
                 target_id: _builtins.str,
                 user_assessment_id: _builtins.str):
        """
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> _builtins.str:
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetUserAssessmentsUserAssessmentResult(dict):
    def __init__(__self__, *,
                 compartment_id: _builtins.str,
                 defined_tags: Mapping[str, _builtins.str],
                 description: _builtins.str,
                 display_name: _builtins.str,
                 freeform_tags: Mapping[str, _builtins.str],
                 id: _builtins.str,
                 ignored_assessment_ids: Sequence[_builtins.str],
                 ignored_targets: Sequence['outputs.GetUserAssessmentsUserAssessmentIgnoredTargetResult'],
                 is_assessment_scheduled: _builtins.bool,
                 is_baseline: _builtins.bool,
                 is_deviated_from_baseline: _builtins.bool,
                 last_compared_baseline_id: _builtins.str,
                 lifecycle_details: _builtins.str,
                 schedule: _builtins.str,
                 schedule_assessment_id: _builtins.str,
                 state: _builtins.str,
                 statistics: _builtins.str,
                 system_tags: Mapping[str, _builtins.str],
                 target_id: _builtins.str,
                 target_ids: Sequence[_builtins.str],
                 time_created: _builtins.str,
                 time_last_assessed: _builtins.str,
                 time_updated: _builtins.str,
                 triggered_by: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str compartment_id: A filter to return only resources that match the specified compartment OCID.
        :param Mapping[str, _builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        :param _builtins.str description: The description of the user assessment.
        :param _builtins.str display_name: A filter to return only resources that match the specified display name.
        :param Mapping[str, _builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        :param _builtins.str id: The OCID of the user assessment.
        :param Sequence[_builtins.str] ignored_assessment_ids: List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        :param Sequence['GetUserAssessmentsUserAssessmentIgnoredTargetArgs'] ignored_targets: List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        :param _builtins.bool is_assessment_scheduled: Indicates whether the assessment is scheduled to run.
        :param _builtins.bool is_baseline: A filter to return only user assessments that are set as baseline.
        :param _builtins.bool is_deviated_from_baseline: Indicates if the user assessment deviates from the baseline.
        :param _builtins.str last_compared_baseline_id: The OCID of the last user assessment baseline against which the latest assessment was compared.
        :param _builtins.str lifecycle_details: Details about the current state of the user assessment.
        :param _builtins.str schedule: Schedule of the assessment that runs periodically in this specified format: <version-string>;<version-specific-schedule>
        :param _builtins.str schedule_assessment_id: The OCID of the user assessment that is responsible for creating this scheduled save assessment.
        :param _builtins.str state: The current state of the user assessment.
        :param _builtins.str statistics: Map that contains maps of values. Example: `{"Operations": {"CostCenter": "42"}}`
        :param Mapping[str, _builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        :param Sequence[_builtins.str] target_ids: Array of database target OCIDs.
        :param _builtins.str time_created: The date and time the user assessment was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_last_assessed: The date and time the user assessment was last executed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str time_updated: The date and time the user assessment was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param _builtins.str triggered_by: A filter to return user assessments that were created by either the system or by a user only.
        :param _builtins.str type: A filter to return only items that match the specified assessment type.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ignored_assessment_ids", ignored_assessment_ids)
        pulumi.set(__self__, "ignored_targets", ignored_targets)
        pulumi.set(__self__, "is_assessment_scheduled", is_assessment_scheduled)
        pulumi.set(__self__, "is_baseline", is_baseline)
        pulumi.set(__self__, "is_deviated_from_baseline", is_deviated_from_baseline)
        pulumi.set(__self__, "last_compared_baseline_id", last_compared_baseline_id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "schedule", schedule)
        pulumi.set(__self__, "schedule_assessment_id", schedule_assessment_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "statistics", statistics)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_ids", target_ids)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_assessed", time_last_assessed)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "triggered_by", triggered_by)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified compartment OCID.
        """
        return pulumi.get(self, "compartment_id")

    @_builtins.property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, _builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm) Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the user assessment.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        A filter to return only resources that match the specified display name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, _builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The OCID of the user assessment.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ignoredAssessmentIds")
    def ignored_assessment_ids(self) -> Sequence[_builtins.str]:
        """
        List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        """
        return pulumi.get(self, "ignored_assessment_ids")

    @_builtins.property
    @pulumi.getter(name="ignoredTargets")
    def ignored_targets(self) -> Sequence['outputs.GetUserAssessmentsUserAssessmentIgnoredTargetResult']:
        """
        List containing maps as values. Example: `{"Operations": [ {"CostCenter": "42"} ] }`
        """
        return pulumi.get(self, "ignored_targets")

    @_builtins.property
    @pulumi.getter(name="isAssessmentScheduled")
    def is_assessment_scheduled(self) -> _builtins.bool:
        """
        Indicates whether the assessment is scheduled to run.
        """
        return pulumi.get(self, "is_assessment_scheduled")

    @_builtins.property
    @pulumi.getter(name="isBaseline")
    def is_baseline(self) -> _builtins.bool:
        """
        A filter to return only user assessments that are set as baseline.
        """
        return pulumi.get(self, "is_baseline")

    @_builtins.property
    @pulumi.getter(name="isDeviatedFromBaseline")
    def is_deviated_from_baseline(self) -> _builtins.bool:
        """
        Indicates if the user assessment deviates from the baseline.
        """
        return pulumi.get(self, "is_deviated_from_baseline")

    @_builtins.property
    @pulumi.getter(name="lastComparedBaselineId")
    def last_compared_baseline_id(self) -> _builtins.str:
        """
        The OCID of the last user assessment baseline against which the latest assessment was compared.
        """
        return pulumi.get(self, "last_compared_baseline_id")

    @_builtins.property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> _builtins.str:
        """
        Details about the current state of the user assessment.
        """
        return pulumi.get(self, "lifecycle_details")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> _builtins.str:
        """
        Schedule of the assessment that runs periodically in this specified format: <version-string>;<version-specific-schedule>
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter(name="scheduleAssessmentId")
    def schedule_assessment_id(self) -> _builtins.str:
        """
        The OCID of the user assessment that is responsible for creating this scheduled save assessment.
        """
        return pulumi.get(self, "schedule_assessment_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The current state of the user assessment.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def statistics(self) -> _builtins.str:
        """
        Map that contains maps of values. Example: `{"Operations": {"CostCenter": "42"}}`
        """
        return pulumi.get(self, "statistics")

    @_builtins.property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, _builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Sequence[_builtins.str]:
        """
        Array of database target OCIDs.
        """
        return pulumi.get(self, "target_ids")

    @_builtins.property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> _builtins.str:
        """
        The date and time the user assessment was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @_builtins.property
    @pulumi.getter(name="timeLastAssessed")
    def time_last_assessed(self) -> _builtins.str:
        """
        The date and time the user assessment was last executed, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_last_assessed")

    @_builtins.property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> _builtins.str:
        """
        The date and time the user assessment was last updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @_builtins.property
    @pulumi.getter(name="triggeredBy")
    def triggered_by(self) -> _builtins.str:
        """
        A filter to return user assessments that were created by either the system or by a user only.
        """
        return pulumi.get(self, "triggered_by")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        A filter to return only items that match the specified assessment type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserAssessmentsUserAssessmentIgnoredTargetResult(dict):
    def __init__(__self__, *,
                 lifecycle_state: _builtins.str,
                 target_id: _builtins.str,
                 user_assessment_id: _builtins.str):
        """
        :param _builtins.str target_id: A filter to return only items related to a specific target OCID.
        """
        pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @_builtins.property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> _builtins.str:
        return pulumi.get(self, "lifecycle_state")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> _builtins.str:
        """
        A filter to return only items related to a specific target OCID.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> _builtins.str:
        return pulumi.get(self, "user_assessment_id")


