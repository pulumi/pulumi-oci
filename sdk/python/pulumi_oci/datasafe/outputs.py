# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AuditPolicyAuditCondition',
    'AuditPolicyAuditConditionEnableCondition',
    'AuditPolicyAuditSpecification',
    'AuditProfileAuditTrail',
    'DataSafeConfigurationGlobalSetting',
    'DatabaseSecurityConfigManagementSqlFirewallConfig',
    'DatabaseSecurityConfigSqlFirewallConfig',
    'DiscoveryJobsResultModifiedAttribute',
    'LibraryMasingFormatFormatEntry',
    'MaskingPoliciesMaskingColumnMaskingFormat',
    'MaskingPoliciesMaskingColumnMaskingFormatFormatEntry',
    'MaskingPolicyColumnSource',
    'ReportDefinitionColumnFilter',
    'ReportDefinitionColumnInfo',
    'ReportDefinitionColumnSorting',
    'ReportDefinitionSummary',
    'SecurityAssessmentStatistic',
    'SecurityAssessmentStatisticAdvisory',
    'SecurityAssessmentStatisticEvaluate',
    'SecurityAssessmentStatisticHighRisk',
    'SecurityAssessmentStatisticLowRisk',
    'SecurityAssessmentStatisticMediumRisk',
    'SecurityAssessmentStatisticPass',
    'TargetDatabaseConnectionOption',
    'TargetDatabaseCredentials',
    'TargetDatabaseDatabaseDetails',
    'TargetDatabaseTlsConfig',
    'UserAssessmentIgnoredTarget',
    'GetAlertAnalyticItemResult',
    'GetAlertAnalyticItemDimensionResult',
    'GetAlertPoliciesAlertPolicyCollectionResult',
    'GetAlertPoliciesAlertPolicyCollectionItemResult',
    'GetAlertPoliciesFilterResult',
    'GetAlertPolicyRuleItemResult',
    'GetAlertPolicyRulesAlertPolicyRuleCollectionResult',
    'GetAlertPolicyRulesAlertPolicyRuleCollectionItemResult',
    'GetAlertPolicyRulesFilterResult',
    'GetAlertsAlertCollectionResult',
    'GetAlertsAlertCollectionItemResult',
    'GetAlertsFilterResult',
    'GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionResult',
    'GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItemResult',
    'GetAuditArchiveRetrievalsFilterResult',
    'GetAuditEventAnalyticItemResult',
    'GetAuditEventAnalyticItemDimensionResult',
    'GetAuditEventItemResult',
    'GetAuditEventsAuditEventCollectionResult',
    'GetAuditEventsAuditEventCollectionItemResult',
    'GetAuditEventsFilterResult',
    'GetAuditPoliciesAuditPolicyCollectionResult',
    'GetAuditPoliciesAuditPolicyCollectionItemResult',
    'GetAuditPoliciesAuditPolicyCollectionItemAuditConditionResult',
    'GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableConditionResult',
    'GetAuditPoliciesAuditPolicyCollectionItemAuditSpecificationResult',
    'GetAuditPoliciesFilterResult',
    'GetAuditPolicyAuditConditionResult',
    'GetAuditPolicyAuditConditionEnableConditionResult',
    'GetAuditPolicyAuditSpecificationResult',
    'GetAuditProfileAnalyticItemResult',
    'GetAuditProfileAnalyticItemDimensionResult',
    'GetAuditProfileAuditTrailResult',
    'GetAuditProfileAvailableAuditVolumeItemResult',
    'GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionResult',
    'GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemResult',
    'GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItemResult',
    'GetAuditProfileAvailableAuditVolumesFilterResult',
    'GetAuditProfileCollectedAuditVolumeItemResult',
    'GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionResult',
    'GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemResult',
    'GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItemResult',
    'GetAuditProfileCollectedAuditVolumesFilterResult',
    'GetAuditProfilesAuditProfileCollectionResult',
    'GetAuditProfilesAuditProfileCollectionItemResult',
    'GetAuditProfilesAuditProfileCollectionItemAuditTrailResult',
    'GetAuditProfilesFilterResult',
    'GetAuditTrailAnalyticItemResult',
    'GetAuditTrailAnalyticItemDimensionResult',
    'GetAuditTrailsAuditTrailCollectionResult',
    'GetAuditTrailsAuditTrailCollectionItemResult',
    'GetAuditTrailsFilterResult',
    'GetCompatibleFormatsForDataTypeFormatsForDataTypeResult',
    'GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormatResult',
    'GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeResult',
    'GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormatResult',
    'GetDataSafeConfigurationGlobalSettingResult',
    'GetDataSafePrivateEndpointsDataSafePrivateEndpointResult',
    'GetDataSafePrivateEndpointsFilterResult',
    'GetDatabaseSecurityConfigSqlFirewallConfigResult',
    'GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionResult',
    'GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemResult',
    'GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemSqlFirewallConfigResult',
    'GetDatabaseSecurityConfigsFilterResult',
    'GetDiscoveryAnalyticItemResult',
    'GetDiscoveryAnalyticItemDimensionResult',
    'GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionResult',
    'GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemResult',
    'GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimensionResult',
    'GetDiscoveryAnalyticsFilterResult',
    'GetDiscoveryJobsResultModifiedAttributeResult',
    'GetDiscoveryJobsResultsDiscoveryJobResultCollectionResult',
    'GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemResult',
    'GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttributeResult',
    'GetDiscoveryJobsResultsFilterResult',
    'GetLibraryMaskingFormatFormatEntryResult',
    'GetLibraryMaskingFormatsFilterResult',
    'GetLibraryMaskingFormatsLibraryMaskingFormatCollectionResult',
    'GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemResult',
    'GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult',
    'GetListUserGrantsFilterResult',
    'GetListUserGrantsGrantResult',
    'GetMaskingAnalyticItemResult',
    'GetMaskingAnalyticItemDimensionResult',
    'GetMaskingAnalyticsFilterResult',
    'GetMaskingAnalyticsMaskingAnalyticsCollectionResult',
    'GetMaskingAnalyticsMaskingAnalyticsCollectionItemResult',
    'GetMaskingAnalyticsMaskingAnalyticsCollectionItemDimensionResult',
    'GetMaskingPoliciesFilterResult',
    'GetMaskingPoliciesMaskingColumnMaskingFormatResult',
    'GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntryResult',
    'GetMaskingPoliciesMaskingColumnsFilterResult',
    'GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionResult',
    'GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemResult',
    'GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatResult',
    'GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntryResult',
    'GetMaskingPoliciesMaskingPolicyCollectionResult',
    'GetMaskingPoliciesMaskingPolicyCollectionItemResult',
    'GetMaskingPoliciesMaskingPolicyCollectionItemColumnSourceResult',
    'GetMaskingPolicyColumnSourceResult',
    'GetMaskingPolicyMaskingObjectsFilterResult',
    'GetMaskingPolicyMaskingObjectsMaskingObjectCollectionResult',
    'GetMaskingPolicyMaskingObjectsMaskingObjectCollectionItemResult',
    'GetMaskingPolicyMaskingSchemasFilterResult',
    'GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionResult',
    'GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionItemResult',
    'GetMaskingReportMaskedColumnsFilterResult',
    'GetMaskingReportMaskedColumnsMaskedColumnCollectionResult',
    'GetMaskingReportMaskedColumnsMaskedColumnCollectionItemResult',
    'GetMaskingReportsFilterResult',
    'GetMaskingReportsMaskedColumnItemResult',
    'GetMaskingReportsMaskingReportCollectionResult',
    'GetMaskingReportsMaskingReportCollectionItemResult',
    'GetOnpremConnectorsFilterResult',
    'GetOnpremConnectorsOnPremConnectorResult',
    'GetReportDefinitionColumnFilterResult',
    'GetReportDefinitionColumnInfoResult',
    'GetReportDefinitionColumnSortingResult',
    'GetReportDefinitionSummaryResult',
    'GetReportDefinitionsFilterResult',
    'GetReportDefinitionsReportDefinitionCollectionResult',
    'GetReportDefinitionsReportDefinitionCollectionItemResult',
    'GetReportDefinitionsReportDefinitionCollectionItemColumnFilterResult',
    'GetReportDefinitionsReportDefinitionCollectionItemColumnInfoResult',
    'GetReportDefinitionsReportDefinitionCollectionItemColumnSortingResult',
    'GetReportDefinitionsReportDefinitionCollectionItemSummaryResult',
    'GetReportsFilterResult',
    'GetReportsReportCollectionResult',
    'GetReportsReportCollectionItemResult',
    'GetSdmMaskingPolicyDifferenceDifferenceColumnsFilterResult',
    'GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionResult',
    'GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItemResult',
    'GetSdmMaskingPolicyDifferencesFilterResult',
    'GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionResult',
    'GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItemResult',
    'GetSecurityAssessmentComparisonTargetResult',
    'GetSecurityAssessmentComparisonTargetAuditingResult',
    'GetSecurityAssessmentComparisonTargetAuditingBaselineResult',
    'GetSecurityAssessmentComparisonTargetAuditingBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetAuditingCurrentResult',
    'GetSecurityAssessmentComparisonTargetAuditingCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentResult',
    'GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionBaselineResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionCurrentResult',
    'GetSecurityAssessmentComparisonTargetDataEncryptionCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationBaselineResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationCurrentResult',
    'GetSecurityAssessmentComparisonTargetDbConfigurationCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentResult',
    'GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentResult',
    'GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReferenceResult',
    'GetSecurityAssessmentComparisonTargetUserAccountResult',
    'GetSecurityAssessmentComparisonTargetUserAccountBaselineResult',
    'GetSecurityAssessmentComparisonTargetUserAccountBaselineReferenceResult',
    'GetSecurityAssessmentComparisonTargetUserAccountCurrentResult',
    'GetSecurityAssessmentComparisonTargetUserAccountCurrentReferenceResult',
    'GetSecurityAssessmentFindingFilterResult',
    'GetSecurityAssessmentFindingFindingResult',
    'GetSecurityAssessmentFindingFindingReferenceResult',
    'GetSecurityAssessmentFindingsFilterResult',
    'GetSecurityAssessmentFindingsFindingResult',
    'GetSecurityAssessmentFindingsFindingReferenceResult',
    'GetSecurityAssessmentStatisticResult',
    'GetSecurityAssessmentStatisticAdvisoryResult',
    'GetSecurityAssessmentStatisticEvaluateResult',
    'GetSecurityAssessmentStatisticHighRiskResult',
    'GetSecurityAssessmentStatisticLowRiskResult',
    'GetSecurityAssessmentStatisticMediumRiskResult',
    'GetSecurityAssessmentStatisticPassResult',
    'GetSecurityAssessmentsFilterResult',
    'GetSecurityAssessmentsSecurityAssessmentResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticAdvisoryResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticEvaluateResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticHighRiskResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticLowRiskResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticMediumRiskResult',
    'GetSecurityAssessmentsSecurityAssessmentStatisticPassResult',
    'GetSecurityPoliciesFilterResult',
    'GetSecurityPoliciesSecurityPolicyCollectionResult',
    'GetSecurityPoliciesSecurityPolicyCollectionItemResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStateEntryDetailResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStatesFilterResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemResult',
    'GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetailResult',
    'GetSecurityPolicyDeploymentsFilterResult',
    'GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionResult',
    'GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItemResult',
    'GetSensitiveDataModelSensitiveObjectsFilterResult',
    'GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionResult',
    'GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItemResult',
    'GetSensitiveDataModelSensitiveSchemasFilterResult',
    'GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionResult',
    'GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItemResult',
    'GetSensitiveDataModelsFilterResult',
    'GetSensitiveDataModelsSensitiveColumnsFilterResult',
    'GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionResult',
    'GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItemResult',
    'GetSensitiveDataModelsSensitiveDataModelCollectionResult',
    'GetSensitiveDataModelsSensitiveDataModelCollectionItemResult',
    'GetSensitiveTypesFilterResult',
    'GetSensitiveTypesSensitiveTypeCollectionResult',
    'GetSensitiveTypesSensitiveTypeCollectionItemResult',
    'GetSqlCollectionAnalyticsFilterResult',
    'GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionResult',
    'GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemResult',
    'GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemDimensionResult',
    'GetSqlCollectionLogInsightsFilterResult',
    'GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionResult',
    'GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemResult',
    'GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemDimensionResult',
    'GetSqlCollectionsFilterResult',
    'GetSqlCollectionsSqlCollectionCollectionResult',
    'GetSqlCollectionsSqlCollectionCollectionItemResult',
    'GetSqlFirewallAllowedSqlAnalyticsFilterResult',
    'GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionResult',
    'GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemResult',
    'GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemDimensionResult',
    'GetSqlFirewallAllowedSqlsFilterResult',
    'GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionResult',
    'GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItemResult',
    'GetSqlFirewallPoliciesFilterResult',
    'GetSqlFirewallPoliciesSqlFirewallPolicyCollectionResult',
    'GetSqlFirewallPoliciesSqlFirewallPolicyCollectionItemResult',
    'GetSqlFirewallPolicyAnalyticsFilterResult',
    'GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionResult',
    'GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemResult',
    'GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemDimensionResult',
    'GetSqlFirewallViolationAnalyticsFilterResult',
    'GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionResult',
    'GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemResult',
    'GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimensionResult',
    'GetSqlFirewallViolationsFilterResult',
    'GetSqlFirewallViolationsSqlFirewallViolationsCollectionResult',
    'GetSqlFirewallViolationsSqlFirewallViolationsCollectionItemResult',
    'GetTargetAlertPolicyAssociationsFilterResult',
    'GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionResult',
    'GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItemResult',
    'GetTargetDatabaseConnectionOptionResult',
    'GetTargetDatabaseCredentialResult',
    'GetTargetDatabaseDatabaseDetailResult',
    'GetTargetDatabaseRoleFilterResult',
    'GetTargetDatabaseRoleRoleResult',
    'GetTargetDatabaseRolesFilterResult',
    'GetTargetDatabaseRolesRoleResult',
    'GetTargetDatabaseTlsConfigResult',
    'GetTargetDatabasesColumnsColumnResult',
    'GetTargetDatabasesColumnsFilterResult',
    'GetTargetDatabasesFilterResult',
    'GetTargetDatabasesSchemasFilterResult',
    'GetTargetDatabasesSchemasSchemaResult',
    'GetTargetDatabasesTablesFilterResult',
    'GetTargetDatabasesTablesTableResult',
    'GetTargetDatabasesTargetDatabaseResult',
    'GetTargetDatabasesTargetDatabaseConnectionOptionResult',
    'GetTargetDatabasesTargetDatabaseCredentialResult',
    'GetTargetDatabasesTargetDatabaseDatabaseDetailResult',
    'GetTargetDatabasesTargetDatabaseTlsConfigResult',
    'GetUserAssessmentComparisonSummaryResult',
    'GetUserAssessmentComparisonSummaryBaselineResult',
    'GetUserAssessmentComparisonSummaryCurrentResult',
    'GetUserAssessmentIgnoredTargetResult',
    'GetUserAssessmentProfileAnalyticsFilterResult',
    'GetUserAssessmentProfileAnalyticsProfileAggregationResult',
    'GetUserAssessmentProfilesFilterResult',
    'GetUserAssessmentProfilesProfileResult',
    'GetUserAssessmentUserAnalyticsFilterResult',
    'GetUserAssessmentUserAnalyticsUserAggregationResult',
    'GetUserAssessmentUserAnalyticsUserAggregationItemResult',
    'GetUserAssessmentUsersFilterResult',
    'GetUserAssessmentUsersUserResult',
    'GetUserAssessmentsFilterResult',
    'GetUserAssessmentsIgnoredTargetResult',
    'GetUserAssessmentsUserAssessmentResult',
    'GetUserAssessmentsUserAssessmentIgnoredTargetResult',
]

@pulumi.output_type
class AuditPolicyAuditCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditPolicyName":
            suggest = "audit_policy_name"
        elif key == "enableConditions":
            suggest = "enable_conditions"
        elif key == "isDataSafeServiceAccountAudited":
            suggest = "is_data_safe_service_account_audited"
        elif key == "isPrivUsersManagedByDataSafe":
            suggest = "is_priv_users_managed_by_data_safe"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditPolicyAuditCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditPolicyAuditCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditPolicyAuditCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_policy_name: Optional[str] = None,
                 enable_conditions: Optional[Sequence['outputs.AuditPolicyAuditConditionEnableCondition']] = None,
                 is_data_safe_service_account_audited: Optional[bool] = None,
                 is_priv_users_managed_by_data_safe: Optional[bool] = None):
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if enable_conditions is not None:
            pulumi.set(__self__, "enable_conditions", enable_conditions)
        if is_data_safe_service_account_audited is not None:
            pulumi.set(__self__, "is_data_safe_service_account_audited", is_data_safe_service_account_audited)
        if is_priv_users_managed_by_data_safe is not None:
            pulumi.set(__self__, "is_priv_users_managed_by_data_safe", is_priv_users_managed_by_data_safe)

    @property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_name")

    @property
    @pulumi.getter(name="enableConditions")
    def enable_conditions(self) -> Optional[Sequence['outputs.AuditPolicyAuditConditionEnableCondition']]:
        return pulumi.get(self, "enable_conditions")

    @property
    @pulumi.getter(name="isDataSafeServiceAccountAudited")
    def is_data_safe_service_account_audited(self) -> Optional[bool]:
        return pulumi.get(self, "is_data_safe_service_account_audited")

    @property
    @pulumi.getter(name="isPrivUsersManagedByDataSafe")
    def is_priv_users_managed_by_data_safe(self) -> Optional[bool]:
        return pulumi.get(self, "is_priv_users_managed_by_data_safe")


@pulumi.output_type
class AuditPolicyAuditConditionEnableCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityNames":
            suggest = "entity_names"
        elif key == "entitySelection":
            suggest = "entity_selection"
        elif key == "entityType":
            suggest = "entity_type"
        elif key == "operationStatus":
            suggest = "operation_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditPolicyAuditConditionEnableCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditPolicyAuditConditionEnableCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditPolicyAuditConditionEnableCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_names: Optional[Sequence[str]] = None,
                 entity_selection: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 operation_status: Optional[str] = None):
        if entity_names is not None:
            pulumi.set(__self__, "entity_names", entity_names)
        if entity_selection is not None:
            pulumi.set(__self__, "entity_selection", entity_selection)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)

    @property
    @pulumi.getter(name="entityNames")
    def entity_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "entity_names")

    @property
    @pulumi.getter(name="entitySelection")
    def entity_selection(self) -> Optional[str]:
        return pulumi.get(self, "entity_selection")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[str]:
        return pulumi.get(self, "operation_status")


@pulumi.output_type
class AuditPolicyAuditSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditPolicyCategory":
            suggest = "audit_policy_category"
        elif key == "auditPolicyName":
            suggest = "audit_policy_name"
        elif key == "databasePolicyNames":
            suggest = "database_policy_names"
        elif key == "enableStatus":
            suggest = "enable_status"
        elif key == "enabledEntities":
            suggest = "enabled_entities"
        elif key == "isCreated":
            suggest = "is_created"
        elif key == "isEnabledForAllUsers":
            suggest = "is_enabled_for_all_users"
        elif key == "isSeededInDataSafe":
            suggest = "is_seeded_in_data_safe"
        elif key == "isSeededInTarget":
            suggest = "is_seeded_in_target"
        elif key == "isViewOnly":
            suggest = "is_view_only"
        elif key == "partiallyEnabledMsg":
            suggest = "partially_enabled_msg"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditPolicyAuditSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditPolicyAuditSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditPolicyAuditSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_policy_category: Optional[str] = None,
                 audit_policy_name: Optional[str] = None,
                 database_policy_names: Optional[Sequence[str]] = None,
                 enable_status: Optional[str] = None,
                 enabled_entities: Optional[str] = None,
                 is_created: Optional[bool] = None,
                 is_enabled_for_all_users: Optional[bool] = None,
                 is_seeded_in_data_safe: Optional[bool] = None,
                 is_seeded_in_target: Optional[bool] = None,
                 is_view_only: Optional[bool] = None,
                 partially_enabled_msg: Optional[str] = None):
        if audit_policy_category is not None:
            pulumi.set(__self__, "audit_policy_category", audit_policy_category)
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if database_policy_names is not None:
            pulumi.set(__self__, "database_policy_names", database_policy_names)
        if enable_status is not None:
            pulumi.set(__self__, "enable_status", enable_status)
        if enabled_entities is not None:
            pulumi.set(__self__, "enabled_entities", enabled_entities)
        if is_created is not None:
            pulumi.set(__self__, "is_created", is_created)
        if is_enabled_for_all_users is not None:
            pulumi.set(__self__, "is_enabled_for_all_users", is_enabled_for_all_users)
        if is_seeded_in_data_safe is not None:
            pulumi.set(__self__, "is_seeded_in_data_safe", is_seeded_in_data_safe)
        if is_seeded_in_target is not None:
            pulumi.set(__self__, "is_seeded_in_target", is_seeded_in_target)
        if is_view_only is not None:
            pulumi.set(__self__, "is_view_only", is_view_only)
        if partially_enabled_msg is not None:
            pulumi.set(__self__, "partially_enabled_msg", partially_enabled_msg)

    @property
    @pulumi.getter(name="auditPolicyCategory")
    def audit_policy_category(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_category")

    @property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_name")

    @property
    @pulumi.getter(name="databasePolicyNames")
    def database_policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "database_policy_names")

    @property
    @pulumi.getter(name="enableStatus")
    def enable_status(self) -> Optional[str]:
        return pulumi.get(self, "enable_status")

    @property
    @pulumi.getter(name="enabledEntities")
    def enabled_entities(self) -> Optional[str]:
        return pulumi.get(self, "enabled_entities")

    @property
    @pulumi.getter(name="isCreated")
    def is_created(self) -> Optional[bool]:
        return pulumi.get(self, "is_created")

    @property
    @pulumi.getter(name="isEnabledForAllUsers")
    def is_enabled_for_all_users(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled_for_all_users")

    @property
    @pulumi.getter(name="isSeededInDataSafe")
    def is_seeded_in_data_safe(self) -> Optional[bool]:
        return pulumi.get(self, "is_seeded_in_data_safe")

    @property
    @pulumi.getter(name="isSeededInTarget")
    def is_seeded_in_target(self) -> Optional[bool]:
        return pulumi.get(self, "is_seeded_in_target")

    @property
    @pulumi.getter(name="isViewOnly")
    def is_view_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_view_only")

    @property
    @pulumi.getter(name="partiallyEnabledMsg")
    def partially_enabled_msg(self) -> Optional[str]:
        return pulumi.get(self, "partially_enabled_msg")


@pulumi.output_type
class AuditProfileAuditTrail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditCollectionStartTime":
            suggest = "audit_collection_start_time"
        elif key == "auditProfileId":
            suggest = "audit_profile_id"
        elif key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "isAutoPurgeEnabled":
            suggest = "is_auto_purge_enabled"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "systemTags":
            suggest = "system_tags"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeLastCollected":
            suggest = "time_last_collected"
        elif key == "timeUpdated":
            suggest = "time_updated"
        elif key == "trailLocation":
            suggest = "trail_location"
        elif key == "workRequestId":
            suggest = "work_request_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditProfileAuditTrail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditProfileAuditTrail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditProfileAuditTrail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_collection_start_time: Optional[str] = None,
                 audit_profile_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_auto_purge_enabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_collected: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trail_location: Optional[str] = None,
                 work_request_id: Optional[str] = None):
        if audit_collection_start_time is not None:
            pulumi.set(__self__, "audit_collection_start_time", audit_collection_start_time)
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_auto_purge_enabled is not None:
            pulumi.set(__self__, "is_auto_purge_enabled", is_auto_purge_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_collected is not None:
            pulumi.set(__self__, "time_last_collected", time_last_collected)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trail_location is not None:
            pulumi.set(__self__, "trail_location", trail_location)
        if work_request_id is not None:
            pulumi.set(__self__, "work_request_id", work_request_id)

    @property
    @pulumi.getter(name="auditCollectionStartTime")
    def audit_collection_start_time(self) -> Optional[str]:
        return pulumi.get(self, "audit_collection_start_time")

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoPurgeEnabled")
    def is_auto_purge_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_purge_enabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastCollected")
    def time_last_collected(self) -> Optional[str]:
        return pulumi.get(self, "time_last_collected")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> Optional[str]:
        return pulumi.get(self, "trail_location")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> Optional[str]:
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class DataSafeConfigurationGlobalSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPaidUsage":
            suggest = "is_paid_usage"
        elif key == "offlineRetentionPeriod":
            suggest = "offline_retention_period"
        elif key == "onlineRetentionPeriod":
            suggest = "online_retention_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSafeConfigurationGlobalSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSafeConfigurationGlobalSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSafeConfigurationGlobalSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_paid_usage: Optional[bool] = None,
                 offline_retention_period: Optional[int] = None,
                 online_retention_period: Optional[int] = None):
        if is_paid_usage is not None:
            pulumi.set(__self__, "is_paid_usage", is_paid_usage)
        if offline_retention_period is not None:
            pulumi.set(__self__, "offline_retention_period", offline_retention_period)
        if online_retention_period is not None:
            pulumi.set(__self__, "online_retention_period", online_retention_period)

    @property
    @pulumi.getter(name="isPaidUsage")
    def is_paid_usage(self) -> Optional[bool]:
        return pulumi.get(self, "is_paid_usage")

    @property
    @pulumi.getter(name="offlineRetentionPeriod")
    def offline_retention_period(self) -> Optional[int]:
        return pulumi.get(self, "offline_retention_period")

    @property
    @pulumi.getter(name="onlineRetentionPeriod")
    def online_retention_period(self) -> Optional[int]:
        return pulumi.get(self, "online_retention_period")


@pulumi.output_type
class DatabaseSecurityConfigManagementSqlFirewallConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeJob":
            suggest = "exclude_job"
        elif key == "timeStatusUpdated":
            suggest = "time_status_updated"
        elif key == "violationLogAutoPurge":
            suggest = "violation_log_auto_purge"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseSecurityConfigManagementSqlFirewallConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseSecurityConfigManagementSqlFirewallConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseSecurityConfigManagementSqlFirewallConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_job: Optional[str] = None,
                 status: Optional[str] = None,
                 time_status_updated: Optional[str] = None,
                 violation_log_auto_purge: Optional[str] = None):
        if exclude_job is not None:
            pulumi.set(__self__, "exclude_job", exclude_job)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_status_updated is not None:
            pulumi.set(__self__, "time_status_updated", time_status_updated)
        if violation_log_auto_purge is not None:
            pulumi.set(__self__, "violation_log_auto_purge", violation_log_auto_purge)

    @property
    @pulumi.getter(name="excludeJob")
    def exclude_job(self) -> Optional[str]:
        return pulumi.get(self, "exclude_job")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_status_updated")

    @property
    @pulumi.getter(name="violationLogAutoPurge")
    def violation_log_auto_purge(self) -> Optional[str]:
        return pulumi.get(self, "violation_log_auto_purge")


@pulumi.output_type
class DatabaseSecurityConfigSqlFirewallConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeJob":
            suggest = "exclude_job"
        elif key == "timeStatusUpdated":
            suggest = "time_status_updated"
        elif key == "violationLogAutoPurge":
            suggest = "violation_log_auto_purge"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseSecurityConfigSqlFirewallConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseSecurityConfigSqlFirewallConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseSecurityConfigSqlFirewallConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_job: Optional[str] = None,
                 status: Optional[str] = None,
                 time_status_updated: Optional[str] = None,
                 violation_log_auto_purge: Optional[str] = None):
        if exclude_job is not None:
            pulumi.set(__self__, "exclude_job", exclude_job)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_status_updated is not None:
            pulumi.set(__self__, "time_status_updated", time_status_updated)
        if violation_log_auto_purge is not None:
            pulumi.set(__self__, "violation_log_auto_purge", violation_log_auto_purge)

    @property
    @pulumi.getter(name="excludeJob")
    def exclude_job(self) -> Optional[str]:
        return pulumi.get(self, "exclude_job")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_status_updated")

    @property
    @pulumi.getter(name="violationLogAutoPurge")
    def violation_log_auto_purge(self) -> Optional[str]:
        return pulumi.get(self, "violation_log_auto_purge")


@pulumi.output_type
class DiscoveryJobsResultModifiedAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appDefinedChildColumnKeys":
            suggest = "app_defined_child_column_keys"
        elif key == "dbDefinedChildColumnKeys":
            suggest = "db_defined_child_column_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiscoveryJobsResultModifiedAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiscoveryJobsResultModifiedAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiscoveryJobsResultModifiedAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_defined_child_column_keys: Optional[Sequence[str]] = None,
                 db_defined_child_column_keys: Optional[Sequence[str]] = None):
        if app_defined_child_column_keys is not None:
            pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        if db_defined_child_column_keys is not None:
            pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)

    @property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "app_defined_child_column_keys")

    @property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_defined_child_column_keys")


@pulumi.output_type
class LibraryMasingFormatFormatEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "endLength":
            suggest = "end_length"
        elif key == "endValue":
            suggest = "end_value"
        elif key == "fixedNumber":
            suggest = "fixed_number"
        elif key == "fixedString":
            suggest = "fixed_string"
        elif key == "groupingColumns":
            suggest = "grouping_columns"
        elif key == "libraryMaskingFormatId":
            suggest = "library_masking_format_id"
        elif key == "postProcessingFunction":
            suggest = "post_processing_function"
        elif key == "randomLists":
            suggest = "random_lists"
        elif key == "regularExpression":
            suggest = "regular_expression"
        elif key == "replaceWith":
            suggest = "replace_with"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sqlExpression":
            suggest = "sql_expression"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "startLength":
            suggest = "start_length"
        elif key == "startPosition":
            suggest = "start_position"
        elif key == "startValue":
            suggest = "start_value"
        elif key == "tableName":
            suggest = "table_name"
        elif key == "userDefinedFunction":
            suggest = "user_defined_function"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LibraryMasingFormatFormatEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LibraryMasingFormatFormatEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LibraryMasingFormatFormatEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 column_name: Optional[str] = None,
                 description: Optional[str] = None,
                 end_date: Optional[str] = None,
                 end_length: Optional[int] = None,
                 end_value: Optional[float] = None,
                 fixed_number: Optional[float] = None,
                 fixed_string: Optional[str] = None,
                 grouping_columns: Optional[Sequence[str]] = None,
                 length: Optional[int] = None,
                 library_masking_format_id: Optional[str] = None,
                 post_processing_function: Optional[str] = None,
                 random_lists: Optional[Sequence[str]] = None,
                 regular_expression: Optional[str] = None,
                 replace_with: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 sql_expression: Optional[str] = None,
                 start_date: Optional[str] = None,
                 start_length: Optional[int] = None,
                 start_position: Optional[int] = None,
                 start_value: Optional[float] = None,
                 table_name: Optional[str] = None,
                 user_defined_function: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_length is not None:
            pulumi.set(__self__, "end_length", end_length)
        if end_value is not None:
            pulumi.set(__self__, "end_value", end_value)
        if fixed_number is not None:
            pulumi.set(__self__, "fixed_number", fixed_number)
        if fixed_string is not None:
            pulumi.set(__self__, "fixed_string", fixed_string)
        if grouping_columns is not None:
            pulumi.set(__self__, "grouping_columns", grouping_columns)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if library_masking_format_id is not None:
            pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        if post_processing_function is not None:
            pulumi.set(__self__, "post_processing_function", post_processing_function)
        if random_lists is not None:
            pulumi.set(__self__, "random_lists", random_lists)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replace_with is not None:
            pulumi.set(__self__, "replace_with", replace_with)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sql_expression is not None:
            pulumi.set(__self__, "sql_expression", sql_expression)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_length is not None:
            pulumi.set(__self__, "start_length", start_length)
        if start_position is not None:
            pulumi.set(__self__, "start_position", start_position)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if user_defined_function is not None:
            pulumi.set(__self__, "user_defined_function", user_defined_function)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endLength")
    def end_length(self) -> Optional[int]:
        return pulumi.get(self, "end_length")

    @property
    @pulumi.getter(name="endValue")
    def end_value(self) -> Optional[float]:
        return pulumi.get(self, "end_value")

    @property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> Optional[float]:
        return pulumi.get(self, "fixed_number")

    @property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> Optional[str]:
        return pulumi.get(self, "fixed_string")

    @property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "grouping_columns")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> Optional[str]:
        return pulumi.get(self, "library_masking_format_id")

    @property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> Optional[str]:
        return pulumi.get(self, "post_processing_function")

    @property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "random_lists")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[str]:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> Optional[str]:
        return pulumi.get(self, "replace_with")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> Optional[str]:
        return pulumi.get(self, "sql_expression")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startLength")
    def start_length(self) -> Optional[int]:
        return pulumi.get(self, "start_length")

    @property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> Optional[int]:
        return pulumi.get(self, "start_position")

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[float]:
        return pulumi.get(self, "start_value")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> Optional[str]:
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class MaskingPoliciesMaskingColumnMaskingFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "formatEntries":
            suggest = "format_entries"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaskingPoliciesMaskingColumnMaskingFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaskingPoliciesMaskingColumnMaskingFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaskingPoliciesMaskingColumnMaskingFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format_entries: Sequence['outputs.MaskingPoliciesMaskingColumnMaskingFormatFormatEntry'],
                 condition: Optional[str] = None,
                 description: Optional[str] = None):
        pulumi.set(__self__, "format_entries", format_entries)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="formatEntries")
    def format_entries(self) -> Sequence['outputs.MaskingPoliciesMaskingColumnMaskingFormatFormatEntry']:
        return pulumi.get(self, "format_entries")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class MaskingPoliciesMaskingColumnMaskingFormatFormatEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "endLength":
            suggest = "end_length"
        elif key == "endValue":
            suggest = "end_value"
        elif key == "fixedNumber":
            suggest = "fixed_number"
        elif key == "fixedString":
            suggest = "fixed_string"
        elif key == "groupingColumns":
            suggest = "grouping_columns"
        elif key == "libraryMaskingFormatId":
            suggest = "library_masking_format_id"
        elif key == "postProcessingFunction":
            suggest = "post_processing_function"
        elif key == "randomLists":
            suggest = "random_lists"
        elif key == "regularExpression":
            suggest = "regular_expression"
        elif key == "replaceWith":
            suggest = "replace_with"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "sqlExpression":
            suggest = "sql_expression"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "startLength":
            suggest = "start_length"
        elif key == "startPosition":
            suggest = "start_position"
        elif key == "startValue":
            suggest = "start_value"
        elif key == "tableName":
            suggest = "table_name"
        elif key == "userDefinedFunction":
            suggest = "user_defined_function"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaskingPoliciesMaskingColumnMaskingFormatFormatEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaskingPoliciesMaskingColumnMaskingFormatFormatEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaskingPoliciesMaskingColumnMaskingFormatFormatEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 column_name: Optional[str] = None,
                 description: Optional[str] = None,
                 end_date: Optional[str] = None,
                 end_length: Optional[int] = None,
                 end_value: Optional[float] = None,
                 fixed_number: Optional[float] = None,
                 fixed_string: Optional[str] = None,
                 grouping_columns: Optional[Sequence[str]] = None,
                 length: Optional[int] = None,
                 library_masking_format_id: Optional[str] = None,
                 post_processing_function: Optional[str] = None,
                 random_lists: Optional[Sequence[str]] = None,
                 regular_expression: Optional[str] = None,
                 replace_with: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 sql_expression: Optional[str] = None,
                 start_date: Optional[str] = None,
                 start_length: Optional[int] = None,
                 start_position: Optional[int] = None,
                 start_value: Optional[float] = None,
                 table_name: Optional[str] = None,
                 user_defined_function: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_length is not None:
            pulumi.set(__self__, "end_length", end_length)
        if end_value is not None:
            pulumi.set(__self__, "end_value", end_value)
        if fixed_number is not None:
            pulumi.set(__self__, "fixed_number", fixed_number)
        if fixed_string is not None:
            pulumi.set(__self__, "fixed_string", fixed_string)
        if grouping_columns is not None:
            pulumi.set(__self__, "grouping_columns", grouping_columns)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if library_masking_format_id is not None:
            pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        if post_processing_function is not None:
            pulumi.set(__self__, "post_processing_function", post_processing_function)
        if random_lists is not None:
            pulumi.set(__self__, "random_lists", random_lists)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replace_with is not None:
            pulumi.set(__self__, "replace_with", replace_with)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sql_expression is not None:
            pulumi.set(__self__, "sql_expression", sql_expression)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_length is not None:
            pulumi.set(__self__, "start_length", start_length)
        if start_position is not None:
            pulumi.set(__self__, "start_position", start_position)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if user_defined_function is not None:
            pulumi.set(__self__, "user_defined_function", user_defined_function)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endLength")
    def end_length(self) -> Optional[int]:
        return pulumi.get(self, "end_length")

    @property
    @pulumi.getter(name="endValue")
    def end_value(self) -> Optional[float]:
        return pulumi.get(self, "end_value")

    @property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> Optional[float]:
        return pulumi.get(self, "fixed_number")

    @property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> Optional[str]:
        return pulumi.get(self, "fixed_string")

    @property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "grouping_columns")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> Optional[str]:
        return pulumi.get(self, "library_masking_format_id")

    @property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> Optional[str]:
        return pulumi.get(self, "post_processing_function")

    @property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "random_lists")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[str]:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> Optional[str]:
        return pulumi.get(self, "replace_with")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> Optional[str]:
        return pulumi.get(self, "sql_expression")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startLength")
    def start_length(self) -> Optional[int]:
        return pulumi.get(self, "start_length")

    @property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> Optional[int]:
        return pulumi.get(self, "start_position")

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[float]:
        return pulumi.get(self, "start_value")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> Optional[str]:
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class MaskingPolicyColumnSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnSource":
            suggest = "column_source"
        elif key == "sensitiveDataModelId":
            suggest = "sensitive_data_model_id"
        elif key == "targetId":
            suggest = "target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MaskingPolicyColumnSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MaskingPolicyColumnSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MaskingPolicyColumnSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_source: str,
                 sensitive_data_model_id: Optional[str] = None,
                 target_id: Optional[str] = None):
        pulumi.set(__self__, "column_source", column_source)
        if sensitive_data_model_id is not None:
            pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="columnSource")
    def column_source(self) -> str:
        return pulumi.get(self, "column_source")

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_data_model_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


@pulumi.output_type
class ReportDefinitionColumnFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldName":
            suggest = "field_name"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "isHidden":
            suggest = "is_hidden"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDefinitionColumnFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDefinitionColumnFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDefinitionColumnFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expressions: Sequence[str],
                 field_name: str,
                 is_enabled: bool,
                 is_hidden: bool,
                 operator: str):
        pulumi.set(__self__, "expressions", expressions)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "is_hidden", is_hidden)
        pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def expressions(self) -> Sequence[str]:
        return pulumi.get(self, "expressions")

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> bool:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")


@pulumi.output_type
class ReportDefinitionColumnInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "displayOrder":
            suggest = "display_order"
        elif key == "fieldName":
            suggest = "field_name"
        elif key == "isHidden":
            suggest = "is_hidden"
        elif key == "dataType":
            suggest = "data_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDefinitionColumnInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDefinitionColumnInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDefinitionColumnInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: str,
                 display_order: int,
                 field_name: str,
                 is_hidden: bool,
                 data_type: Optional[str] = None):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_hidden", is_hidden)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> int:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> bool:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")


@pulumi.output_type
class ReportDefinitionColumnSorting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldName":
            suggest = "field_name"
        elif key == "isAscending":
            suggest = "is_ascending"
        elif key == "sortingOrder":
            suggest = "sorting_order"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDefinitionColumnSorting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDefinitionColumnSorting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDefinitionColumnSorting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_name: str,
                 is_ascending: bool,
                 sorting_order: int):
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "is_ascending", is_ascending)
        pulumi.set(__self__, "sorting_order", sorting_order)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="isAscending")
    def is_ascending(self) -> bool:
        return pulumi.get(self, "is_ascending")

    @property
    @pulumi.getter(name="sortingOrder")
    def sorting_order(self) -> int:
        return pulumi.get(self, "sorting_order")


@pulumi.output_type
class ReportDefinitionSummary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayOrder":
            suggest = "display_order"
        elif key == "countOf":
            suggest = "count_of"
        elif key == "groupByFieldName":
            suggest = "group_by_field_name"
        elif key == "isHidden":
            suggest = "is_hidden"
        elif key == "scimFilter":
            suggest = "scim_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReportDefinitionSummary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReportDefinitionSummary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReportDefinitionSummary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_order: int,
                 name: str,
                 count_of: Optional[str] = None,
                 group_by_field_name: Optional[str] = None,
                 is_hidden: Optional[bool] = None,
                 scim_filter: Optional[str] = None):
        pulumi.set(__self__, "display_order", display_order)
        pulumi.set(__self__, "name", name)
        if count_of is not None:
            pulumi.set(__self__, "count_of", count_of)
        if group_by_field_name is not None:
            pulumi.set(__self__, "group_by_field_name", group_by_field_name)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if scim_filter is not None:
            pulumi.set(__self__, "scim_filter", scim_filter)

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> int:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="countOf")
    def count_of(self) -> Optional[str]:
        return pulumi.get(self, "count_of")

    @property
    @pulumi.getter(name="groupByFieldName")
    def group_by_field_name(self) -> Optional[str]:
        return pulumi.get(self, "group_by_field_name")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter(name="scimFilter")
    def scim_filter(self) -> Optional[str]:
        return pulumi.get(self, "scim_filter")


@pulumi.output_type
class SecurityAssessmentStatistic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "highRisks":
            suggest = "high_risks"
        elif key == "lowRisks":
            suggest = "low_risks"
        elif key == "mediumRisks":
            suggest = "medium_risks"
        elif key == "targetsCount":
            suggest = "targets_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatistic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatistic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatistic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advisories: Optional[Sequence['outputs.SecurityAssessmentStatisticAdvisory']] = None,
                 evaluates: Optional[Sequence['outputs.SecurityAssessmentStatisticEvaluate']] = None,
                 high_risks: Optional[Sequence['outputs.SecurityAssessmentStatisticHighRisk']] = None,
                 low_risks: Optional[Sequence['outputs.SecurityAssessmentStatisticLowRisk']] = None,
                 medium_risks: Optional[Sequence['outputs.SecurityAssessmentStatisticMediumRisk']] = None,
                 passes: Optional[Sequence['outputs.SecurityAssessmentStatisticPass']] = None,
                 targets_count: Optional[int] = None):
        if advisories is not None:
            pulumi.set(__self__, "advisories", advisories)
        if evaluates is not None:
            pulumi.set(__self__, "evaluates", evaluates)
        if high_risks is not None:
            pulumi.set(__self__, "high_risks", high_risks)
        if low_risks is not None:
            pulumi.set(__self__, "low_risks", low_risks)
        if medium_risks is not None:
            pulumi.set(__self__, "medium_risks", medium_risks)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)

    @property
    @pulumi.getter
    def advisories(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticAdvisory']]:
        return pulumi.get(self, "advisories")

    @property
    @pulumi.getter
    def evaluates(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticEvaluate']]:
        return pulumi.get(self, "evaluates")

    @property
    @pulumi.getter(name="highRisks")
    def high_risks(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticHighRisk']]:
        return pulumi.get(self, "high_risks")

    @property
    @pulumi.getter(name="lowRisks")
    def low_risks(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticLowRisk']]:
        return pulumi.get(self, "low_risks")

    @property
    @pulumi.getter(name="mediumRisks")
    def medium_risks(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticMediumRisk']]:
        return pulumi.get(self, "medium_risks")

    @property
    @pulumi.getter
    def passes(self) -> Optional[Sequence['outputs.SecurityAssessmentStatisticPass']]:
        return pulumi.get(self, "passes")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")


@pulumi.output_type
class SecurityAssessmentStatisticAdvisory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticAdvisory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticAdvisory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticAdvisory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticEvaluate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticEvaluate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticEvaluate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticEvaluate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticHighRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticHighRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticHighRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticHighRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticLowRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticLowRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticLowRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticLowRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticMediumRisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticMediumRisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticMediumRisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticMediumRisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class SecurityAssessmentStatisticPass(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditingFindingsCount":
            suggest = "auditing_findings_count"
        elif key == "authorizationControlFindingsCount":
            suggest = "authorization_control_findings_count"
        elif key == "dataEncryptionFindingsCount":
            suggest = "data_encryption_findings_count"
        elif key == "dbConfigurationFindingsCount":
            suggest = "db_configuration_findings_count"
        elif key == "fineGrainedAccessControlFindingsCount":
            suggest = "fine_grained_access_control_findings_count"
        elif key == "privilegesAndRolesFindingsCount":
            suggest = "privileges_and_roles_findings_count"
        elif key == "targetsCount":
            suggest = "targets_count"
        elif key == "userAccountsFindingsCount":
            suggest = "user_accounts_findings_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityAssessmentStatisticPass. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityAssessmentStatisticPass.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityAssessmentStatisticPass.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class TargetDatabaseConnectionOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionType":
            suggest = "connection_type"
        elif key == "datasafePrivateEndpointId":
            suggest = "datasafe_private_endpoint_id"
        elif key == "onPremConnectorId":
            suggest = "on_prem_connector_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseConnectionOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseConnectionOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseConnectionOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_type: str,
                 datasafe_private_endpoint_id: Optional[str] = None,
                 on_prem_connector_id: Optional[str] = None):
        pulumi.set(__self__, "connection_type", connection_type)
        if datasafe_private_endpoint_id is not None:
            pulumi.set(__self__, "datasafe_private_endpoint_id", datasafe_private_endpoint_id)
        if on_prem_connector_id is not None:
            pulumi.set(__self__, "on_prem_connector_id", on_prem_connector_id)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="datasafePrivateEndpointId")
    def datasafe_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "datasafe_private_endpoint_id")

    @property
    @pulumi.getter(name="onPremConnectorId")
    def on_prem_connector_id(self) -> Optional[str]:
        return pulumi.get(self, "on_prem_connector_id")


@pulumi.output_type
class TargetDatabaseCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 user_name: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class TargetDatabaseDatabaseDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseType":
            suggest = "database_type"
        elif key == "infrastructureType":
            suggest = "infrastructure_type"
        elif key == "autonomousDatabaseId":
            suggest = "autonomous_database_id"
        elif key == "dbSystemId":
            suggest = "db_system_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "ipAddresses":
            suggest = "ip_addresses"
        elif key == "listenerPort":
            suggest = "listener_port"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "vmClusterId":
            suggest = "vm_cluster_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseDatabaseDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseDatabaseDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseDatabaseDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_type: str,
                 infrastructure_type: str,
                 autonomous_database_id: Optional[str] = None,
                 db_system_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 listener_port: Optional[int] = None,
                 service_name: Optional[str] = None,
                 vm_cluster_id: Optional[str] = None):
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        if autonomous_database_id is not None:
            pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if vm_cluster_id is not None:
            pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> str:
        return pulumi.get(self, "infrastructure_type")

    @property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> Optional[str]:
        return pulumi.get(self, "autonomous_database_id")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[int]:
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class TargetDatabaseTlsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateStoreType":
            suggest = "certificate_store_type"
        elif key == "keyStoreContent":
            suggest = "key_store_content"
        elif key == "storePassword":
            suggest = "store_password"
        elif key == "trustStoreContent":
            suggest = "trust_store_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetDatabaseTlsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetDatabaseTlsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetDatabaseTlsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status: str,
                 certificate_store_type: Optional[str] = None,
                 key_store_content: Optional[str] = None,
                 store_password: Optional[str] = None,
                 trust_store_content: Optional[str] = None):
        pulumi.set(__self__, "status", status)
        if certificate_store_type is not None:
            pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        if key_store_content is not None:
            pulumi.set(__self__, "key_store_content", key_store_content)
        if store_password is not None:
            pulumi.set(__self__, "store_password", store_password)
        if trust_store_content is not None:
            pulumi.set(__self__, "trust_store_content", trust_store_content)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_type")

    @property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> Optional[str]:
        return pulumi.get(self, "key_store_content")

    @property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> Optional[str]:
        return pulumi.get(self, "store_password")

    @property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> Optional[str]:
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class UserAssessmentIgnoredTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lifecycleState":
            suggest = "lifecycle_state"
        elif key == "targetId":
            suggest = "target_id"
        elif key == "userAssessmentId":
            suggest = "user_assessment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAssessmentIgnoredTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAssessmentIgnoredTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAssessmentIgnoredTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lifecycle_state: Optional[str] = None,
                 target_id: Optional[str] = None,
                 user_assessment_id: Optional[str] = None):
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if user_assessment_id is not None:
            pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetAlertAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetAlertAnalyticItemDimensionResult']] = None,
                 metric_name: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetAlertAnalyticItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetAlertAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 group_by: Optional[Mapping[str, Any]] = None):
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "group_by")


@pulumi.output_type
class GetAlertPoliciesAlertPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAlertPoliciesAlertPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAlertPoliciesAlertPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAlertPoliciesAlertPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 alert_policy_type: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_user_defined: Optional[bool] = None,
                 severity: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if alert_policy_type is not None:
            pulumi.set(__self__, "alert_policy_type", alert_policy_type)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_user_defined is not None:
            pulumi.set(__self__, "is_user_defined", is_user_defined)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="alertPolicyType")
    def alert_policy_type(self) -> Optional[str]:
        return pulumi.get(self, "alert_policy_type")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isUserDefined")
    def is_user_defined(self) -> Optional[bool]:
        return pulumi.get(self, "is_user_defined")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAlertPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAlertPolicyRuleItemResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 expression: Optional[str] = None,
                 key: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class GetAlertPolicyRulesAlertPolicyRuleCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAlertPolicyRulesAlertPolicyRuleCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAlertPolicyRulesAlertPolicyRuleCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAlertPolicyRulesAlertPolicyRuleCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 expression: Optional[str] = None,
                 key: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class GetAlertPolicyRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAlertsAlertCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAlertsAlertCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAlertsAlertCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAlertsAlertCollectionItemResult(dict):
    def __init__(__self__, *,
                 alert_id: Optional[str] = None,
                 alert_type: Optional[str] = None,
                 comment: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 feature_details: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 operation: Optional[str] = None,
                 operation_status: Optional[str] = None,
                 operation_time: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 resource_name: Optional[str] = None,
                 severity: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_ids: Optional[Sequence[str]] = None,
                 target_names: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if alert_id is not None:
            pulumi.set(__self__, "alert_id", alert_id)
        if alert_type is not None:
            pulumi.set(__self__, "alert_type", alert_type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if feature_details is not None:
            pulumi.set(__self__, "feature_details", feature_details)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)
        if operation_time is not None:
            pulumi.set(__self__, "operation_time", operation_time)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_ids is not None:
            pulumi.set(__self__, "target_ids", target_ids)
        if target_names is not None:
            pulumi.set(__self__, "target_names", target_names)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> Optional[str]:
        return pulumi.get(self, "alert_id")

    @property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> Optional[str]:
        return pulumi.get(self, "alert_type")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="featureDetails")
    def feature_details(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "feature_details")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[str]:
        return pulumi.get(self, "operation_status")

    @property
    @pulumi.getter(name="operationTime")
    def operation_time(self) -> Optional[str]:
        return pulumi.get(self, "operation_time")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_ids")

    @property
    @pulumi.getter(name="targetNames")
    def target_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_names")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAlertsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditArchiveRetrievalsAuditArchiveRetrievalCollectionItemResult(dict):
    def __init__(__self__, *,
                 audit_event_count: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 end_date: Optional[str] = None,
                 error_info: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 start_date: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_completed: Optional[str] = None,
                 time_of_expiry: Optional[str] = None,
                 time_requested: Optional[str] = None):
        if audit_event_count is not None:
            pulumi.set(__self__, "audit_event_count", audit_event_count)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if error_info is not None:
            pulumi.set(__self__, "error_info", error_info)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_completed is not None:
            pulumi.set(__self__, "time_completed", time_completed)
        if time_of_expiry is not None:
            pulumi.set(__self__, "time_of_expiry", time_of_expiry)
        if time_requested is not None:
            pulumi.set(__self__, "time_requested", time_requested)

    @property
    @pulumi.getter(name="auditEventCount")
    def audit_event_count(self) -> Optional[str]:
        return pulumi.get(self, "audit_event_count")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="errorInfo")
    def error_info(self) -> Optional[str]:
        return pulumi.get(self, "error_info")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCompleted")
    def time_completed(self) -> Optional[str]:
        return pulumi.get(self, "time_completed")

    @property
    @pulumi.getter(name="timeOfExpiry")
    def time_of_expiry(self) -> Optional[str]:
        return pulumi.get(self, "time_of_expiry")

    @property
    @pulumi.getter(name="timeRequested")
    def time_requested(self) -> Optional[str]:
        return pulumi.get(self, "time_requested")


@pulumi.output_type
class GetAuditArchiveRetrievalsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditEventAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetAuditEventAnalyticItemDimensionResult']] = None,
                 display_name: Optional[str] = None,
                 metric_name: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetAuditEventAnalyticItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetAuditEventAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 audit_event_times: Optional[Sequence[str]] = None,
                 audit_types: Optional[Sequence[str]] = None,
                 client_hostnames: Optional[Sequence[str]] = None,
                 client_ids: Optional[Sequence[str]] = None,
                 client_programs: Optional[Sequence[str]] = None,
                 db_user_names: Optional[Sequence[str]] = None,
                 event_names: Optional[Sequence[str]] = None,
                 object_types: Optional[Sequence[str]] = None,
                 target_classes: Optional[Sequence[str]] = None,
                 target_ids: Optional[Sequence[str]] = None,
                 target_names: Optional[Sequence[str]] = None):
        if audit_event_times is not None:
            pulumi.set(__self__, "audit_event_times", audit_event_times)
        if audit_types is not None:
            pulumi.set(__self__, "audit_types", audit_types)
        if client_hostnames is not None:
            pulumi.set(__self__, "client_hostnames", client_hostnames)
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if client_programs is not None:
            pulumi.set(__self__, "client_programs", client_programs)
        if db_user_names is not None:
            pulumi.set(__self__, "db_user_names", db_user_names)
        if event_names is not None:
            pulumi.set(__self__, "event_names", event_names)
        if object_types is not None:
            pulumi.set(__self__, "object_types", object_types)
        if target_classes is not None:
            pulumi.set(__self__, "target_classes", target_classes)
        if target_ids is not None:
            pulumi.set(__self__, "target_ids", target_ids)
        if target_names is not None:
            pulumi.set(__self__, "target_names", target_names)

    @property
    @pulumi.getter(name="auditEventTimes")
    def audit_event_times(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audit_event_times")

    @property
    @pulumi.getter(name="auditTypes")
    def audit_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "audit_types")

    @property
    @pulumi.getter(name="clientHostnames")
    def client_hostnames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_hostnames")

    @property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_ids")

    @property
    @pulumi.getter(name="clientPrograms")
    def client_programs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_programs")

    @property
    @pulumi.getter(name="dbUserNames")
    def db_user_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_user_names")

    @property
    @pulumi.getter(name="eventNames")
    def event_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "event_names")

    @property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "object_types")

    @property
    @pulumi.getter(name="targetClasses")
    def target_classes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_classes")

    @property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_ids")

    @property
    @pulumi.getter(name="targetNames")
    def target_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_names")


@pulumi.output_type
class GetAuditEventItemResult(dict):
    def __init__(__self__, *,
                 action_taken: Optional[str] = None,
                 audit_event_time: Optional[str] = None,
                 audit_location: Optional[str] = None,
                 audit_policies: Optional[str] = None,
                 audit_trail_id: Optional[str] = None,
                 audit_type: Optional[str] = None,
                 client_hostname: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_ip: Optional[str] = None,
                 client_program: Optional[str] = None,
                 command_param: Optional[str] = None,
                 command_text: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_user_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 event_name: Optional[str] = None,
                 extended_event_attributes: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_alerted: Optional[bool] = None,
                 object: Optional[str] = None,
                 object_owner: Optional[str] = None,
                 object_type: Optional[str] = None,
                 operation: Optional[str] = None,
                 operation_status: Optional[str] = None,
                 os_terminal: Optional[str] = None,
                 os_user_name: Optional[str] = None,
                 target_class: Optional[str] = None,
                 target_id: Optional[str] = None,
                 target_name: Optional[str] = None,
                 time_collected: Optional[str] = None):
        if action_taken is not None:
            pulumi.set(__self__, "action_taken", action_taken)
        if audit_event_time is not None:
            pulumi.set(__self__, "audit_event_time", audit_event_time)
        if audit_location is not None:
            pulumi.set(__self__, "audit_location", audit_location)
        if audit_policies is not None:
            pulumi.set(__self__, "audit_policies", audit_policies)
        if audit_trail_id is not None:
            pulumi.set(__self__, "audit_trail_id", audit_trail_id)
        if audit_type is not None:
            pulumi.set(__self__, "audit_type", audit_type)
        if client_hostname is not None:
            pulumi.set(__self__, "client_hostname", client_hostname)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_program is not None:
            pulumi.set(__self__, "client_program", client_program)
        if command_param is not None:
            pulumi.set(__self__, "command_param", command_param)
        if command_text is not None:
            pulumi.set(__self__, "command_text", command_text)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if event_name is not None:
            pulumi.set(__self__, "event_name", event_name)
        if extended_event_attributes is not None:
            pulumi.set(__self__, "extended_event_attributes", extended_event_attributes)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_alerted is not None:
            pulumi.set(__self__, "is_alerted", is_alerted)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_owner is not None:
            pulumi.set(__self__, "object_owner", object_owner)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)
        if os_terminal is not None:
            pulumi.set(__self__, "os_terminal", os_terminal)
        if os_user_name is not None:
            pulumi.set(__self__, "os_user_name", os_user_name)
        if target_class is not None:
            pulumi.set(__self__, "target_class", target_class)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if time_collected is not None:
            pulumi.set(__self__, "time_collected", time_collected)

    @property
    @pulumi.getter(name="actionTaken")
    def action_taken(self) -> Optional[str]:
        return pulumi.get(self, "action_taken")

    @property
    @pulumi.getter(name="auditEventTime")
    def audit_event_time(self) -> Optional[str]:
        return pulumi.get(self, "audit_event_time")

    @property
    @pulumi.getter(name="auditLocation")
    def audit_location(self) -> Optional[str]:
        return pulumi.get(self, "audit_location")

    @property
    @pulumi.getter(name="auditPolicies")
    def audit_policies(self) -> Optional[str]:
        return pulumi.get(self, "audit_policies")

    @property
    @pulumi.getter(name="auditTrailId")
    def audit_trail_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_trail_id")

    @property
    @pulumi.getter(name="auditType")
    def audit_type(self) -> Optional[str]:
        return pulumi.get(self, "audit_type")

    @property
    @pulumi.getter(name="clientHostname")
    def client_hostname(self) -> Optional[str]:
        return pulumi.get(self, "client_hostname")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="clientProgram")
    def client_program(self) -> Optional[str]:
        return pulumi.get(self, "client_program")

    @property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> Optional[str]:
        return pulumi.get(self, "command_param")

    @property
    @pulumi.getter(name="commandText")
    def command_text(self) -> Optional[str]:
        return pulumi.get(self, "command_text")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="eventName")
    def event_name(self) -> Optional[str]:
        return pulumi.get(self, "event_name")

    @property
    @pulumi.getter(name="extendedEventAttributes")
    def extended_event_attributes(self) -> Optional[str]:
        return pulumi.get(self, "extended_event_attributes")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAlerted")
    def is_alerted(self) -> Optional[bool]:
        return pulumi.get(self, "is_alerted")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectOwner")
    def object_owner(self) -> Optional[str]:
        return pulumi.get(self, "object_owner")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[str]:
        return pulumi.get(self, "operation_status")

    @property
    @pulumi.getter(name="osTerminal")
    def os_terminal(self) -> Optional[str]:
        return pulumi.get(self, "os_terminal")

    @property
    @pulumi.getter(name="osUserName")
    def os_user_name(self) -> Optional[str]:
        return pulumi.get(self, "os_user_name")

    @property
    @pulumi.getter(name="targetClass")
    def target_class(self) -> Optional[str]:
        return pulumi.get(self, "target_class")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[str]:
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> Optional[str]:
        return pulumi.get(self, "time_collected")


@pulumi.output_type
class GetAuditEventsAuditEventCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAuditEventsAuditEventCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditEventsAuditEventCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditEventsAuditEventCollectionItemResult(dict):
    def __init__(__self__, *,
                 action_taken: Optional[str] = None,
                 audit_event_time: Optional[str] = None,
                 audit_location: Optional[str] = None,
                 audit_policies: Optional[str] = None,
                 audit_trail_id: Optional[str] = None,
                 audit_type: Optional[str] = None,
                 client_hostname: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_ip: Optional[str] = None,
                 client_program: Optional[str] = None,
                 command_param: Optional[str] = None,
                 command_text: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_user_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 error_code: Optional[str] = None,
                 error_message: Optional[str] = None,
                 event_name: Optional[str] = None,
                 extended_event_attributes: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_alerted: Optional[bool] = None,
                 object: Optional[str] = None,
                 object_owner: Optional[str] = None,
                 object_type: Optional[str] = None,
                 operation: Optional[str] = None,
                 operation_status: Optional[str] = None,
                 os_terminal: Optional[str] = None,
                 os_user_name: Optional[str] = None,
                 target_class: Optional[str] = None,
                 target_id: Optional[str] = None,
                 target_name: Optional[str] = None,
                 time_collected: Optional[str] = None):
        if action_taken is not None:
            pulumi.set(__self__, "action_taken", action_taken)
        if audit_event_time is not None:
            pulumi.set(__self__, "audit_event_time", audit_event_time)
        if audit_location is not None:
            pulumi.set(__self__, "audit_location", audit_location)
        if audit_policies is not None:
            pulumi.set(__self__, "audit_policies", audit_policies)
        if audit_trail_id is not None:
            pulumi.set(__self__, "audit_trail_id", audit_trail_id)
        if audit_type is not None:
            pulumi.set(__self__, "audit_type", audit_type)
        if client_hostname is not None:
            pulumi.set(__self__, "client_hostname", client_hostname)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_program is not None:
            pulumi.set(__self__, "client_program", client_program)
        if command_param is not None:
            pulumi.set(__self__, "command_param", command_param)
        if command_text is not None:
            pulumi.set(__self__, "command_text", command_text)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if event_name is not None:
            pulumi.set(__self__, "event_name", event_name)
        if extended_event_attributes is not None:
            pulumi.set(__self__, "extended_event_attributes", extended_event_attributes)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_alerted is not None:
            pulumi.set(__self__, "is_alerted", is_alerted)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_owner is not None:
            pulumi.set(__self__, "object_owner", object_owner)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)
        if os_terminal is not None:
            pulumi.set(__self__, "os_terminal", os_terminal)
        if os_user_name is not None:
            pulumi.set(__self__, "os_user_name", os_user_name)
        if target_class is not None:
            pulumi.set(__self__, "target_class", target_class)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if time_collected is not None:
            pulumi.set(__self__, "time_collected", time_collected)

    @property
    @pulumi.getter(name="actionTaken")
    def action_taken(self) -> Optional[str]:
        return pulumi.get(self, "action_taken")

    @property
    @pulumi.getter(name="auditEventTime")
    def audit_event_time(self) -> Optional[str]:
        return pulumi.get(self, "audit_event_time")

    @property
    @pulumi.getter(name="auditLocation")
    def audit_location(self) -> Optional[str]:
        return pulumi.get(self, "audit_location")

    @property
    @pulumi.getter(name="auditPolicies")
    def audit_policies(self) -> Optional[str]:
        return pulumi.get(self, "audit_policies")

    @property
    @pulumi.getter(name="auditTrailId")
    def audit_trail_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_trail_id")

    @property
    @pulumi.getter(name="auditType")
    def audit_type(self) -> Optional[str]:
        return pulumi.get(self, "audit_type")

    @property
    @pulumi.getter(name="clientHostname")
    def client_hostname(self) -> Optional[str]:
        return pulumi.get(self, "client_hostname")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="clientProgram")
    def client_program(self) -> Optional[str]:
        return pulumi.get(self, "client_program")

    @property
    @pulumi.getter(name="commandParam")
    def command_param(self) -> Optional[str]:
        return pulumi.get(self, "command_param")

    @property
    @pulumi.getter(name="commandText")
    def command_text(self) -> Optional[str]:
        return pulumi.get(self, "command_text")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[str]:
        return pulumi.get(self, "error_code")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="eventName")
    def event_name(self) -> Optional[str]:
        return pulumi.get(self, "event_name")

    @property
    @pulumi.getter(name="extendedEventAttributes")
    def extended_event_attributes(self) -> Optional[str]:
        return pulumi.get(self, "extended_event_attributes")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAlerted")
    def is_alerted(self) -> Optional[bool]:
        return pulumi.get(self, "is_alerted")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectOwner")
    def object_owner(self) -> Optional[str]:
        return pulumi.get(self, "object_owner")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[str]:
        return pulumi.get(self, "operation_status")

    @property
    @pulumi.getter(name="osTerminal")
    def os_terminal(self) -> Optional[str]:
        return pulumi.get(self, "os_terminal")

    @property
    @pulumi.getter(name="osUserName")
    def os_user_name(self) -> Optional[str]:
        return pulumi.get(self, "os_user_name")

    @property
    @pulumi.getter(name="targetClass")
    def target_class(self) -> Optional[str]:
        return pulumi.get(self, "target_class")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[str]:
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> Optional[str]:
        return pulumi.get(self, "time_collected")


@pulumi.output_type
class GetAuditEventsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 audit_conditions: Optional[Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditConditionResult']] = None,
                 audit_policy_id: Optional[str] = None,
                 audit_specifications: Optional[Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditSpecificationResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_data_safe_service_account_excluded: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 provision_trigger: Optional[int] = None,
                 retrieve_from_target_trigger: Optional[int] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_provisioned: Optional[str] = None,
                 time_last_retrieved: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if audit_conditions is not None:
            pulumi.set(__self__, "audit_conditions", audit_conditions)
        if audit_policy_id is not None:
            pulumi.set(__self__, "audit_policy_id", audit_policy_id)
        if audit_specifications is not None:
            pulumi.set(__self__, "audit_specifications", audit_specifications)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_data_safe_service_account_excluded is not None:
            pulumi.set(__self__, "is_data_safe_service_account_excluded", is_data_safe_service_account_excluded)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if provision_trigger is not None:
            pulumi.set(__self__, "provision_trigger", provision_trigger)
        if retrieve_from_target_trigger is not None:
            pulumi.set(__self__, "retrieve_from_target_trigger", retrieve_from_target_trigger)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_provisioned is not None:
            pulumi.set(__self__, "time_last_provisioned", time_last_provisioned)
        if time_last_retrieved is not None:
            pulumi.set(__self__, "time_last_retrieved", time_last_retrieved)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="auditConditions")
    def audit_conditions(self) -> Optional[Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditConditionResult']]:
        return pulumi.get(self, "audit_conditions")

    @property
    @pulumi.getter(name="auditPolicyId")
    def audit_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_id")

    @property
    @pulumi.getter(name="auditSpecifications")
    def audit_specifications(self) -> Optional[Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditSpecificationResult']]:
        return pulumi.get(self, "audit_specifications")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDataSafeServiceAccountExcluded")
    def is_data_safe_service_account_excluded(self) -> Optional[bool]:
        return pulumi.get(self, "is_data_safe_service_account_excluded")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="provisionTrigger")
    def provision_trigger(self) -> Optional[int]:
        return pulumi.get(self, "provision_trigger")

    @property
    @pulumi.getter(name="retrieveFromTargetTrigger")
    def retrieve_from_target_trigger(self) -> Optional[int]:
        return pulumi.get(self, "retrieve_from_target_trigger")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastProvisioned")
    def time_last_provisioned(self) -> Optional[str]:
        return pulumi.get(self, "time_last_provisioned")

    @property
    @pulumi.getter(name="timeLastRetrieved")
    def time_last_retrieved(self) -> Optional[str]:
        return pulumi.get(self, "time_last_retrieved")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionItemAuditConditionResult(dict):
    def __init__(__self__, *,
                 audit_policy_name: Optional[str] = None,
                 enable_conditions: Optional[Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableConditionResult']] = None,
                 is_data_safe_service_account_audited: Optional[bool] = None,
                 is_priv_users_managed_by_data_safe: Optional[bool] = None):
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if enable_conditions is not None:
            pulumi.set(__self__, "enable_conditions", enable_conditions)
        if is_data_safe_service_account_audited is not None:
            pulumi.set(__self__, "is_data_safe_service_account_audited", is_data_safe_service_account_audited)
        if is_priv_users_managed_by_data_safe is not None:
            pulumi.set(__self__, "is_priv_users_managed_by_data_safe", is_priv_users_managed_by_data_safe)

    @property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_name")

    @property
    @pulumi.getter(name="enableConditions")
    def enable_conditions(self) -> Optional[Sequence['outputs.GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableConditionResult']]:
        return pulumi.get(self, "enable_conditions")

    @property
    @pulumi.getter(name="isDataSafeServiceAccountAudited")
    def is_data_safe_service_account_audited(self) -> Optional[bool]:
        return pulumi.get(self, "is_data_safe_service_account_audited")

    @property
    @pulumi.getter(name="isPrivUsersManagedByDataSafe")
    def is_priv_users_managed_by_data_safe(self) -> Optional[bool]:
        return pulumi.get(self, "is_priv_users_managed_by_data_safe")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionItemAuditConditionEnableConditionResult(dict):
    def __init__(__self__, *,
                 entity_names: Optional[Sequence[str]] = None,
                 entity_selection: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 operation_status: Optional[str] = None):
        if entity_names is not None:
            pulumi.set(__self__, "entity_names", entity_names)
        if entity_selection is not None:
            pulumi.set(__self__, "entity_selection", entity_selection)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)

    @property
    @pulumi.getter(name="entityNames")
    def entity_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "entity_names")

    @property
    @pulumi.getter(name="entitySelection")
    def entity_selection(self) -> Optional[str]:
        return pulumi.get(self, "entity_selection")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[str]:
        return pulumi.get(self, "operation_status")


@pulumi.output_type
class GetAuditPoliciesAuditPolicyCollectionItemAuditSpecificationResult(dict):
    def __init__(__self__, *,
                 audit_policy_category: Optional[str] = None,
                 audit_policy_name: Optional[str] = None,
                 database_policy_names: Optional[Sequence[str]] = None,
                 enable_status: Optional[str] = None,
                 enabled_entities: Optional[str] = None,
                 is_created: Optional[bool] = None,
                 is_enabled_for_all_users: Optional[bool] = None,
                 is_seeded_in_data_safe: Optional[bool] = None,
                 is_seeded_in_target: Optional[bool] = None,
                 is_view_only: Optional[bool] = None,
                 partially_enabled_msg: Optional[str] = None):
        if audit_policy_category is not None:
            pulumi.set(__self__, "audit_policy_category", audit_policy_category)
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if database_policy_names is not None:
            pulumi.set(__self__, "database_policy_names", database_policy_names)
        if enable_status is not None:
            pulumi.set(__self__, "enable_status", enable_status)
        if enabled_entities is not None:
            pulumi.set(__self__, "enabled_entities", enabled_entities)
        if is_created is not None:
            pulumi.set(__self__, "is_created", is_created)
        if is_enabled_for_all_users is not None:
            pulumi.set(__self__, "is_enabled_for_all_users", is_enabled_for_all_users)
        if is_seeded_in_data_safe is not None:
            pulumi.set(__self__, "is_seeded_in_data_safe", is_seeded_in_data_safe)
        if is_seeded_in_target is not None:
            pulumi.set(__self__, "is_seeded_in_target", is_seeded_in_target)
        if is_view_only is not None:
            pulumi.set(__self__, "is_view_only", is_view_only)
        if partially_enabled_msg is not None:
            pulumi.set(__self__, "partially_enabled_msg", partially_enabled_msg)

    @property
    @pulumi.getter(name="auditPolicyCategory")
    def audit_policy_category(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_category")

    @property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_name")

    @property
    @pulumi.getter(name="databasePolicyNames")
    def database_policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "database_policy_names")

    @property
    @pulumi.getter(name="enableStatus")
    def enable_status(self) -> Optional[str]:
        return pulumi.get(self, "enable_status")

    @property
    @pulumi.getter(name="enabledEntities")
    def enabled_entities(self) -> Optional[str]:
        return pulumi.get(self, "enabled_entities")

    @property
    @pulumi.getter(name="isCreated")
    def is_created(self) -> Optional[bool]:
        return pulumi.get(self, "is_created")

    @property
    @pulumi.getter(name="isEnabledForAllUsers")
    def is_enabled_for_all_users(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled_for_all_users")

    @property
    @pulumi.getter(name="isSeededInDataSafe")
    def is_seeded_in_data_safe(self) -> Optional[bool]:
        return pulumi.get(self, "is_seeded_in_data_safe")

    @property
    @pulumi.getter(name="isSeededInTarget")
    def is_seeded_in_target(self) -> Optional[bool]:
        return pulumi.get(self, "is_seeded_in_target")

    @property
    @pulumi.getter(name="isViewOnly")
    def is_view_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_view_only")

    @property
    @pulumi.getter(name="partiallyEnabledMsg")
    def partially_enabled_msg(self) -> Optional[str]:
        return pulumi.get(self, "partially_enabled_msg")


@pulumi.output_type
class GetAuditPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditPolicyAuditConditionResult(dict):
    def __init__(__self__, *,
                 audit_policy_name: Optional[str] = None,
                 enable_conditions: Optional[Sequence['outputs.GetAuditPolicyAuditConditionEnableConditionResult']] = None,
                 is_data_safe_service_account_audited: Optional[bool] = None,
                 is_priv_users_managed_by_data_safe: Optional[bool] = None):
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if enable_conditions is not None:
            pulumi.set(__self__, "enable_conditions", enable_conditions)
        if is_data_safe_service_account_audited is not None:
            pulumi.set(__self__, "is_data_safe_service_account_audited", is_data_safe_service_account_audited)
        if is_priv_users_managed_by_data_safe is not None:
            pulumi.set(__self__, "is_priv_users_managed_by_data_safe", is_priv_users_managed_by_data_safe)

    @property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_name")

    @property
    @pulumi.getter(name="enableConditions")
    def enable_conditions(self) -> Optional[Sequence['outputs.GetAuditPolicyAuditConditionEnableConditionResult']]:
        return pulumi.get(self, "enable_conditions")

    @property
    @pulumi.getter(name="isDataSafeServiceAccountAudited")
    def is_data_safe_service_account_audited(self) -> Optional[bool]:
        return pulumi.get(self, "is_data_safe_service_account_audited")

    @property
    @pulumi.getter(name="isPrivUsersManagedByDataSafe")
    def is_priv_users_managed_by_data_safe(self) -> Optional[bool]:
        return pulumi.get(self, "is_priv_users_managed_by_data_safe")


@pulumi.output_type
class GetAuditPolicyAuditConditionEnableConditionResult(dict):
    def __init__(__self__, *,
                 entity_names: Optional[Sequence[str]] = None,
                 entity_selection: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 operation_status: Optional[str] = None):
        if entity_names is not None:
            pulumi.set(__self__, "entity_names", entity_names)
        if entity_selection is not None:
            pulumi.set(__self__, "entity_selection", entity_selection)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if operation_status is not None:
            pulumi.set(__self__, "operation_status", operation_status)

    @property
    @pulumi.getter(name="entityNames")
    def entity_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "entity_names")

    @property
    @pulumi.getter(name="entitySelection")
    def entity_selection(self) -> Optional[str]:
        return pulumi.get(self, "entity_selection")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="operationStatus")
    def operation_status(self) -> Optional[str]:
        return pulumi.get(self, "operation_status")


@pulumi.output_type
class GetAuditPolicyAuditSpecificationResult(dict):
    def __init__(__self__, *,
                 audit_policy_category: Optional[str] = None,
                 audit_policy_name: Optional[str] = None,
                 database_policy_names: Optional[Sequence[str]] = None,
                 enable_status: Optional[str] = None,
                 enabled_entities: Optional[str] = None,
                 is_created: Optional[bool] = None,
                 is_enabled_for_all_users: Optional[bool] = None,
                 is_seeded_in_data_safe: Optional[bool] = None,
                 is_seeded_in_target: Optional[bool] = None,
                 is_view_only: Optional[bool] = None,
                 partially_enabled_msg: Optional[str] = None):
        if audit_policy_category is not None:
            pulumi.set(__self__, "audit_policy_category", audit_policy_category)
        if audit_policy_name is not None:
            pulumi.set(__self__, "audit_policy_name", audit_policy_name)
        if database_policy_names is not None:
            pulumi.set(__self__, "database_policy_names", database_policy_names)
        if enable_status is not None:
            pulumi.set(__self__, "enable_status", enable_status)
        if enabled_entities is not None:
            pulumi.set(__self__, "enabled_entities", enabled_entities)
        if is_created is not None:
            pulumi.set(__self__, "is_created", is_created)
        if is_enabled_for_all_users is not None:
            pulumi.set(__self__, "is_enabled_for_all_users", is_enabled_for_all_users)
        if is_seeded_in_data_safe is not None:
            pulumi.set(__self__, "is_seeded_in_data_safe", is_seeded_in_data_safe)
        if is_seeded_in_target is not None:
            pulumi.set(__self__, "is_seeded_in_target", is_seeded_in_target)
        if is_view_only is not None:
            pulumi.set(__self__, "is_view_only", is_view_only)
        if partially_enabled_msg is not None:
            pulumi.set(__self__, "partially_enabled_msg", partially_enabled_msg)

    @property
    @pulumi.getter(name="auditPolicyCategory")
    def audit_policy_category(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_category")

    @property
    @pulumi.getter(name="auditPolicyName")
    def audit_policy_name(self) -> Optional[str]:
        return pulumi.get(self, "audit_policy_name")

    @property
    @pulumi.getter(name="databasePolicyNames")
    def database_policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "database_policy_names")

    @property
    @pulumi.getter(name="enableStatus")
    def enable_status(self) -> Optional[str]:
        return pulumi.get(self, "enable_status")

    @property
    @pulumi.getter(name="enabledEntities")
    def enabled_entities(self) -> Optional[str]:
        return pulumi.get(self, "enabled_entities")

    @property
    @pulumi.getter(name="isCreated")
    def is_created(self) -> Optional[bool]:
        return pulumi.get(self, "is_created")

    @property
    @pulumi.getter(name="isEnabledForAllUsers")
    def is_enabled_for_all_users(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled_for_all_users")

    @property
    @pulumi.getter(name="isSeededInDataSafe")
    def is_seeded_in_data_safe(self) -> Optional[bool]:
        return pulumi.get(self, "is_seeded_in_data_safe")

    @property
    @pulumi.getter(name="isSeededInTarget")
    def is_seeded_in_target(self) -> Optional[bool]:
        return pulumi.get(self, "is_seeded_in_target")

    @property
    @pulumi.getter(name="isViewOnly")
    def is_view_only(self) -> Optional[bool]:
        return pulumi.get(self, "is_view_only")

    @property
    @pulumi.getter(name="partiallyEnabledMsg")
    def partially_enabled_msg(self) -> Optional[str]:
        return pulumi.get(self, "partially_enabled_msg")


@pulumi.output_type
class GetAuditProfileAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetAuditProfileAnalyticItemDimensionResult']] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetAuditProfileAnalyticItemDimensionResult']]:
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetAuditProfileAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 is_paid_usage_enabled: Optional[bool] = None):
        if is_paid_usage_enabled is not None:
            pulumi.set(__self__, "is_paid_usage_enabled", is_paid_usage_enabled)

    @property
    @pulumi.getter(name="isPaidUsageEnabled")
    def is_paid_usage_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_paid_usage_enabled")


@pulumi.output_type
class GetAuditProfileAuditTrailResult(dict):
    def __init__(__self__, *,
                 audit_collection_start_time: Optional[str] = None,
                 audit_profile_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_auto_purge_enabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_collected: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trail_location: Optional[str] = None,
                 work_request_id: Optional[str] = None):
        if audit_collection_start_time is not None:
            pulumi.set(__self__, "audit_collection_start_time", audit_collection_start_time)
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_auto_purge_enabled is not None:
            pulumi.set(__self__, "is_auto_purge_enabled", is_auto_purge_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_collected is not None:
            pulumi.set(__self__, "time_last_collected", time_last_collected)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trail_location is not None:
            pulumi.set(__self__, "trail_location", trail_location)
        if work_request_id is not None:
            pulumi.set(__self__, "work_request_id", work_request_id)

    @property
    @pulumi.getter(name="auditCollectionStartTime")
    def audit_collection_start_time(self) -> Optional[str]:
        return pulumi.get(self, "audit_collection_start_time")

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoPurgeEnabled")
    def is_auto_purge_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_purge_enabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastCollected")
    def time_last_collected(self) -> Optional[str]:
        return pulumi.get(self, "time_last_collected")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> Optional[str]:
        return pulumi.get(self, "trail_location")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> Optional[str]:
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumeItemResult(dict):
    def __init__(__self__, *,
                 audit_profile_id: Optional[str] = None,
                 month_in_consideration: Optional[str] = None,
                 trail_location: Optional[str] = None,
                 volume: Optional[str] = None):
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if month_in_consideration is not None:
            pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        if trail_location is not None:
            pulumi.set(__self__, "trail_location", trail_location)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> Optional[str]:
        return pulumi.get(self, "month_in_consideration")

    @property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> Optional[str]:
        return pulumi.get(self, "trail_location")

    @property
    @pulumi.getter
    def volume(self) -> Optional[str]:
        return pulumi.get(self, "volume")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumesAvailableAuditVolumeCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 audit_profile_id: Optional[str] = None,
                 month_in_consideration: Optional[str] = None,
                 trail_location: Optional[str] = None,
                 volume: Optional[str] = None):
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if month_in_consideration is not None:
            pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        if trail_location is not None:
            pulumi.set(__self__, "trail_location", trail_location)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> Optional[str]:
        return pulumi.get(self, "month_in_consideration")

    @property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> Optional[str]:
        return pulumi.get(self, "trail_location")

    @property
    @pulumi.getter
    def volume(self) -> Optional[str]:
        return pulumi.get(self, "volume")


@pulumi.output_type
class GetAuditProfileAvailableAuditVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumeItemResult(dict):
    def __init__(__self__, *,
                 archived_volume: Optional[str] = None,
                 audit_profile_id: Optional[str] = None,
                 month_in_consideration: Optional[str] = None,
                 online_volume: Optional[str] = None):
        if archived_volume is not None:
            pulumi.set(__self__, "archived_volume", archived_volume)
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if month_in_consideration is not None:
            pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        if online_volume is not None:
            pulumi.set(__self__, "online_volume", online_volume)

    @property
    @pulumi.getter(name="archivedVolume")
    def archived_volume(self) -> Optional[str]:
        return pulumi.get(self, "archived_volume")

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> Optional[str]:
        return pulumi.get(self, "month_in_consideration")

    @property
    @pulumi.getter(name="onlineVolume")
    def online_volume(self) -> Optional[str]:
        return pulumi.get(self, "online_volume")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumesCollectedAuditVolumeCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 archived_volume: Optional[str] = None,
                 audit_profile_id: Optional[str] = None,
                 month_in_consideration: Optional[str] = None,
                 online_volume: Optional[str] = None):
        if archived_volume is not None:
            pulumi.set(__self__, "archived_volume", archived_volume)
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if month_in_consideration is not None:
            pulumi.set(__self__, "month_in_consideration", month_in_consideration)
        if online_volume is not None:
            pulumi.set(__self__, "online_volume", online_volume)

    @property
    @pulumi.getter(name="archivedVolume")
    def archived_volume(self) -> Optional[str]:
        return pulumi.get(self, "archived_volume")

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter(name="monthInConsideration")
    def month_in_consideration(self) -> Optional[str]:
        return pulumi.get(self, "month_in_consideration")

    @property
    @pulumi.getter(name="onlineVolume")
    def online_volume(self) -> Optional[str]:
        return pulumi.get(self, "online_volume")


@pulumi.output_type
class GetAuditProfileCollectedAuditVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditProfilesAuditProfileCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAuditProfilesAuditProfileCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditProfilesAuditProfileCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditProfilesAuditProfileCollectionItemResult(dict):
    def __init__(__self__, *,
                 audit_collected_volume: Optional[str] = None,
                 audit_profile_id: Optional[str] = None,
                 audit_trails: Optional[Sequence['outputs.GetAuditProfilesAuditProfileCollectionItemAuditTrailResult']] = None,
                 change_retention_trigger: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_override_global_retention_setting: Optional[bool] = None,
                 is_paid_usage_enabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 offline_months: Optional[int] = None,
                 online_months: Optional[int] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if audit_collected_volume is not None:
            pulumi.set(__self__, "audit_collected_volume", audit_collected_volume)
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if audit_trails is not None:
            pulumi.set(__self__, "audit_trails", audit_trails)
        if change_retention_trigger is not None:
            pulumi.set(__self__, "change_retention_trigger", change_retention_trigger)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_override_global_retention_setting is not None:
            pulumi.set(__self__, "is_override_global_retention_setting", is_override_global_retention_setting)
        if is_paid_usage_enabled is not None:
            pulumi.set(__self__, "is_paid_usage_enabled", is_paid_usage_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if offline_months is not None:
            pulumi.set(__self__, "offline_months", offline_months)
        if online_months is not None:
            pulumi.set(__self__, "online_months", online_months)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="auditCollectedVolume")
    def audit_collected_volume(self) -> Optional[str]:
        return pulumi.get(self, "audit_collected_volume")

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter(name="auditTrails")
    def audit_trails(self) -> Optional[Sequence['outputs.GetAuditProfilesAuditProfileCollectionItemAuditTrailResult']]:
        return pulumi.get(self, "audit_trails")

    @property
    @pulumi.getter(name="changeRetentionTrigger")
    def change_retention_trigger(self) -> Optional[int]:
        return pulumi.get(self, "change_retention_trigger")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOverrideGlobalRetentionSetting")
    def is_override_global_retention_setting(self) -> Optional[bool]:
        return pulumi.get(self, "is_override_global_retention_setting")

    @property
    @pulumi.getter(name="isPaidUsageEnabled")
    def is_paid_usage_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_paid_usage_enabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="offlineMonths")
    def offline_months(self) -> Optional[int]:
        return pulumi.get(self, "offline_months")

    @property
    @pulumi.getter(name="onlineMonths")
    def online_months(self) -> Optional[int]:
        return pulumi.get(self, "online_months")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetAuditProfilesAuditProfileCollectionItemAuditTrailResult(dict):
    def __init__(__self__, *,
                 audit_collection_start_time: Optional[str] = None,
                 audit_profile_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_auto_purge_enabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_collected: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trail_location: Optional[str] = None,
                 work_request_id: Optional[str] = None):
        if audit_collection_start_time is not None:
            pulumi.set(__self__, "audit_collection_start_time", audit_collection_start_time)
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_auto_purge_enabled is not None:
            pulumi.set(__self__, "is_auto_purge_enabled", is_auto_purge_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_collected is not None:
            pulumi.set(__self__, "time_last_collected", time_last_collected)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trail_location is not None:
            pulumi.set(__self__, "trail_location", trail_location)
        if work_request_id is not None:
            pulumi.set(__self__, "work_request_id", work_request_id)

    @property
    @pulumi.getter(name="auditCollectionStartTime")
    def audit_collection_start_time(self) -> Optional[str]:
        return pulumi.get(self, "audit_collection_start_time")

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoPurgeEnabled")
    def is_auto_purge_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_purge_enabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastCollected")
    def time_last_collected(self) -> Optional[str]:
        return pulumi.get(self, "time_last_collected")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> Optional[str]:
        return pulumi.get(self, "trail_location")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> Optional[str]:
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetAuditProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAuditTrailAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetAuditTrailAnalyticItemDimensionResult']] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetAuditTrailAnalyticItemDimensionResult']]:
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetAuditTrailAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 location: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 target_id: Optional[str] = None):
        if location is not None:
            pulumi.set(__self__, "location", location)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetAuditTrailsAuditTrailCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetAuditTrailsAuditTrailCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetAuditTrailsAuditTrailCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAuditTrailsAuditTrailCollectionItemResult(dict):
    def __init__(__self__, *,
                 audit_collection_start_time: Optional[str] = None,
                 audit_profile_id: Optional[str] = None,
                 audit_trail_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_auto_purge_enabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 resume_trigger: Optional[int] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_collected: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trail_location: Optional[str] = None,
                 work_request_id: Optional[str] = None):
        if audit_collection_start_time is not None:
            pulumi.set(__self__, "audit_collection_start_time", audit_collection_start_time)
        if audit_profile_id is not None:
            pulumi.set(__self__, "audit_profile_id", audit_profile_id)
        if audit_trail_id is not None:
            pulumi.set(__self__, "audit_trail_id", audit_trail_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_auto_purge_enabled is not None:
            pulumi.set(__self__, "is_auto_purge_enabled", is_auto_purge_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if resume_trigger is not None:
            pulumi.set(__self__, "resume_trigger", resume_trigger)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_collected is not None:
            pulumi.set(__self__, "time_last_collected", time_last_collected)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trail_location is not None:
            pulumi.set(__self__, "trail_location", trail_location)
        if work_request_id is not None:
            pulumi.set(__self__, "work_request_id", work_request_id)

    @property
    @pulumi.getter(name="auditCollectionStartTime")
    def audit_collection_start_time(self) -> Optional[str]:
        return pulumi.get(self, "audit_collection_start_time")

    @property
    @pulumi.getter(name="auditProfileId")
    def audit_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_profile_id")

    @property
    @pulumi.getter(name="auditTrailId")
    def audit_trail_id(self) -> Optional[str]:
        return pulumi.get(self, "audit_trail_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAutoPurgeEnabled")
    def is_auto_purge_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_auto_purge_enabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resumeTrigger")
    def resume_trigger(self) -> Optional[int]:
        return pulumi.get(self, "resume_trigger")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastCollected")
    def time_last_collected(self) -> Optional[str]:
        return pulumi.get(self, "time_last_collected")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="trailLocation")
    def trail_location(self) -> Optional[str]:
        return pulumi.get(self, "trail_location")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> Optional[str]:
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetAuditTrailsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCompatibleFormatsForDataTypeFormatsForDataTypeResult(dict):
    def __init__(__self__, *,
                 data_type: Optional[str] = None,
                 masking_formats: Optional[Sequence['outputs.GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormatResult']] = None):
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if masking_formats is not None:
            pulumi.set(__self__, "masking_formats", masking_formats)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="maskingFormats")
    def masking_formats(self) -> Optional[Sequence['outputs.GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormatResult']]:
        return pulumi.get(self, "masking_formats")


@pulumi.output_type
class GetCompatibleFormatsForDataTypeFormatsForDataTypeMaskingFormatResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeResult(dict):
    def __init__(__self__, *,
                 masking_formats: Optional[Sequence['outputs.GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormatResult']] = None,
                 sensitive_type_id: Optional[str] = None):
        if masking_formats is not None:
            pulumi.set(__self__, "masking_formats", masking_formats)
        if sensitive_type_id is not None:
            pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)

    @property
    @pulumi.getter(name="maskingFormats")
    def masking_formats(self) -> Optional[Sequence['outputs.GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormatResult']]:
        return pulumi.get(self, "masking_formats")

    @property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_type_id")


@pulumi.output_type
class GetCompatibleFormatsForSensitiveTypeFormatsForSensitiveTypeMaskingFormatResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDataSafeConfigurationGlobalSettingResult(dict):
    def __init__(__self__, *,
                 is_paid_usage: Optional[bool] = None,
                 offline_retention_period: Optional[int] = None,
                 online_retention_period: Optional[int] = None):
        if is_paid_usage is not None:
            pulumi.set(__self__, "is_paid_usage", is_paid_usage)
        if offline_retention_period is not None:
            pulumi.set(__self__, "offline_retention_period", offline_retention_period)
        if online_retention_period is not None:
            pulumi.set(__self__, "online_retention_period", online_retention_period)

    @property
    @pulumi.getter(name="isPaidUsage")
    def is_paid_usage(self) -> Optional[bool]:
        return pulumi.get(self, "is_paid_usage")

    @property
    @pulumi.getter(name="offlineRetentionPeriod")
    def offline_retention_period(self) -> Optional[int]:
        return pulumi.get(self, "offline_retention_period")

    @property
    @pulumi.getter(name="onlineRetentionPeriod")
    def online_retention_period(self) -> Optional[int]:
        return pulumi.get(self, "online_retention_period")


@pulumi.output_type
class GetDataSafePrivateEndpointsDataSafePrivateEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 endpoint_fqdn: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_endpoint_id: Optional[str] = None,
                 private_endpoint_ip: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoint_fqdn is not None:
            pulumi.set(__self__, "endpoint_fqdn", endpoint_fqdn)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if private_endpoint_ip is not None:
            pulumi.set(__self__, "private_endpoint_ip", private_endpoint_ip)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="endpointFqdn")
    def endpoint_fqdn(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="privateEndpointIp")
    def private_endpoint_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_ip")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetDataSafePrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDatabaseSecurityConfigSqlFirewallConfigResult(dict):
    def __init__(__self__, *,
                 exclude_job: Optional[str] = None,
                 status: Optional[str] = None,
                 time_status_updated: Optional[str] = None,
                 violation_log_auto_purge: Optional[str] = None):
        if exclude_job is not None:
            pulumi.set(__self__, "exclude_job", exclude_job)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_status_updated is not None:
            pulumi.set(__self__, "time_status_updated", time_status_updated)
        if violation_log_auto_purge is not None:
            pulumi.set(__self__, "violation_log_auto_purge", violation_log_auto_purge)

    @property
    @pulumi.getter(name="excludeJob")
    def exclude_job(self) -> Optional[str]:
        return pulumi.get(self, "exclude_job")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_status_updated")

    @property
    @pulumi.getter(name="violationLogAutoPurge")
    def violation_log_auto_purge(self) -> Optional[str]:
        return pulumi.get(self, "violation_log_auto_purge")


@pulumi.output_type
class GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 database_security_config_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 refresh_trigger: Optional[int] = None,
                 sql_firewall_configs: Optional[Sequence['outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemSqlFirewallConfigResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_refreshed: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if database_security_config_id is not None:
            pulumi.set(__self__, "database_security_config_id", database_security_config_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if refresh_trigger is not None:
            pulumi.set(__self__, "refresh_trigger", refresh_trigger)
        if sql_firewall_configs is not None:
            pulumi.set(__self__, "sql_firewall_configs", sql_firewall_configs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_refreshed is not None:
            pulumi.set(__self__, "time_last_refreshed", time_last_refreshed)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="databaseSecurityConfigId")
    def database_security_config_id(self) -> Optional[str]:
        return pulumi.get(self, "database_security_config_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="refreshTrigger")
    def refresh_trigger(self) -> Optional[int]:
        return pulumi.get(self, "refresh_trigger")

    @property
    @pulumi.getter(name="sqlFirewallConfigs")
    def sql_firewall_configs(self) -> Optional[Sequence['outputs.GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemSqlFirewallConfigResult']]:
        return pulumi.get(self, "sql_firewall_configs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastRefreshed")
    def time_last_refreshed(self) -> Optional[str]:
        return pulumi.get(self, "time_last_refreshed")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDatabaseSecurityConfigsDatabaseSecurityConfigCollectionItemSqlFirewallConfigResult(dict):
    def __init__(__self__, *,
                 exclude_job: Optional[str] = None,
                 status: Optional[str] = None,
                 time_status_updated: Optional[str] = None,
                 violation_log_auto_purge: Optional[str] = None):
        if exclude_job is not None:
            pulumi.set(__self__, "exclude_job", exclude_job)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_status_updated is not None:
            pulumi.set(__self__, "time_status_updated", time_status_updated)
        if violation_log_auto_purge is not None:
            pulumi.set(__self__, "violation_log_auto_purge", violation_log_auto_purge)

    @property
    @pulumi.getter(name="excludeJob")
    def exclude_job(self) -> Optional[str]:
        return pulumi.get(self, "exclude_job")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_status_updated")

    @property
    @pulumi.getter(name="violationLogAutoPurge")
    def violation_log_auto_purge(self) -> Optional[str]:
        return pulumi.get(self, "violation_log_auto_purge")


@pulumi.output_type
class GetDatabaseSecurityConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDiscoveryAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetDiscoveryAnalyticItemDimensionResult']] = None,
                 metric_name: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetDiscoveryAnalyticItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetDiscoveryAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 sensitive_data_model_id: Optional[str] = None,
                 target_id: Optional[str] = None):
        if sensitive_data_model_id is not None:
            pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_data_model_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimensionResult']] = None,
                 metric_name: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetDiscoveryAnalyticsDiscoveryAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 sensitive_data_model_id: Optional[str] = None,
                 target_id: Optional[str] = None):
        if sensitive_data_model_id is not None:
            pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_data_model_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetDiscoveryAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDiscoveryJobsResultModifiedAttributeResult(dict):
    def __init__(__self__, *,
                 app_defined_child_column_keys: Optional[Sequence[str]] = None,
                 db_defined_child_column_keys: Optional[Sequence[str]] = None):
        if app_defined_child_column_keys is not None:
            pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        if db_defined_child_column_keys is not None:
            pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)

    @property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "app_defined_child_column_keys")

    @property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_defined_child_column_keys")


@pulumi.output_type
class GetDiscoveryJobsResultsDiscoveryJobResultCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemResult(dict):
    def __init__(__self__, *,
                 discovery_job_id: str,
                 app_defined_child_column_keys: Optional[Sequence[str]] = None,
                 app_name: Optional[str] = None,
                 column_name: Optional[str] = None,
                 data_type: Optional[str] = None,
                 db_defined_child_column_keys: Optional[Sequence[str]] = None,
                 discovery_type: Optional[str] = None,
                 estimated_data_value_count: Optional[str] = None,
                 is_result_applied: Optional[bool] = None,
                 key: Optional[str] = None,
                 modified_attributes: Optional[Sequence['outputs.GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttributeResult']] = None,
                 object: Optional[str] = None,
                 object_type: Optional[str] = None,
                 parent_column_keys: Optional[Sequence[str]] = None,
                 planned_action: Optional[str] = None,
                 relation_type: Optional[str] = None,
                 sample_data_values: Optional[Sequence[str]] = None,
                 schema_name: Optional[str] = None,
                 sensitive_columnkey: Optional[str] = None,
                 sensitive_type_id: Optional[str] = None):
        pulumi.set(__self__, "discovery_job_id", discovery_job_id)
        if app_defined_child_column_keys is not None:
            pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if db_defined_child_column_keys is not None:
            pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)
        if discovery_type is not None:
            pulumi.set(__self__, "discovery_type", discovery_type)
        if estimated_data_value_count is not None:
            pulumi.set(__self__, "estimated_data_value_count", estimated_data_value_count)
        if is_result_applied is not None:
            pulumi.set(__self__, "is_result_applied", is_result_applied)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if modified_attributes is not None:
            pulumi.set(__self__, "modified_attributes", modified_attributes)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if parent_column_keys is not None:
            pulumi.set(__self__, "parent_column_keys", parent_column_keys)
        if planned_action is not None:
            pulumi.set(__self__, "planned_action", planned_action)
        if relation_type is not None:
            pulumi.set(__self__, "relation_type", relation_type)
        if sample_data_values is not None:
            pulumi.set(__self__, "sample_data_values", sample_data_values)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sensitive_columnkey is not None:
            pulumi.set(__self__, "sensitive_columnkey", sensitive_columnkey)
        if sensitive_type_id is not None:
            pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)

    @property
    @pulumi.getter(name="discoveryJobId")
    def discovery_job_id(self) -> str:
        warnings.warn("""The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""", DeprecationWarning)
        pulumi.log.warn("""discovery_job_id is deprecated: The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""")

        return pulumi.get(self, "discovery_job_id")

    @property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "app_defined_child_column_keys")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_defined_child_column_keys")

    @property
    @pulumi.getter(name="discoveryType")
    def discovery_type(self) -> Optional[str]:
        warnings.warn("""The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""", DeprecationWarning)
        pulumi.log.warn("""discovery_type is deprecated: The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""")

        return pulumi.get(self, "discovery_type")

    @property
    @pulumi.getter(name="estimatedDataValueCount")
    def estimated_data_value_count(self) -> Optional[str]:
        return pulumi.get(self, "estimated_data_value_count")

    @property
    @pulumi.getter(name="isResultApplied")
    def is_result_applied(self) -> Optional[bool]:
        return pulumi.get(self, "is_result_applied")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        warnings.warn("""The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""", DeprecationWarning)
        pulumi.log.warn("""key is deprecated: The 'oci_data_safe_discovery_jobs_result' resource has been deprecated. It is no longer supported.""")

        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="modifiedAttributes")
    def modified_attributes(self) -> Optional[Sequence['outputs.GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttributeResult']]:
        return pulumi.get(self, "modified_attributes")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="parentColumnKeys")
    def parent_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parent_column_keys")

    @property
    @pulumi.getter(name="plannedAction")
    def planned_action(self) -> Optional[str]:
        return pulumi.get(self, "planned_action")

    @property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> Optional[str]:
        return pulumi.get(self, "relation_type")

    @property
    @pulumi.getter(name="sampleDataValues")
    def sample_data_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sample_data_values")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sensitiveColumnkey")
    def sensitive_columnkey(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_columnkey")

    @property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_type_id")


@pulumi.output_type
class GetDiscoveryJobsResultsDiscoveryJobResultCollectionItemModifiedAttributeResult(dict):
    def __init__(__self__, *,
                 app_defined_child_column_keys: Optional[Sequence[str]] = None,
                 db_defined_child_column_keys: Optional[Sequence[str]] = None):
        if app_defined_child_column_keys is not None:
            pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        if db_defined_child_column_keys is not None:
            pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)

    @property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "app_defined_child_column_keys")

    @property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_defined_child_column_keys")


@pulumi.output_type
class GetDiscoveryJobsResultsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLibraryMaskingFormatFormatEntryResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 description: Optional[str] = None,
                 end_date: Optional[str] = None,
                 end_length: Optional[int] = None,
                 end_value: Optional[float] = None,
                 fixed_number: Optional[float] = None,
                 fixed_string: Optional[str] = None,
                 grouping_columns: Optional[Sequence[str]] = None,
                 length: Optional[int] = None,
                 library_masking_format_id: Optional[str] = None,
                 post_processing_function: Optional[str] = None,
                 random_lists: Optional[Sequence[str]] = None,
                 regular_expression: Optional[str] = None,
                 replace_with: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 sql_expression: Optional[str] = None,
                 start_date: Optional[str] = None,
                 start_length: Optional[int] = None,
                 start_position: Optional[int] = None,
                 start_value: Optional[float] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None,
                 user_defined_function: Optional[str] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_length is not None:
            pulumi.set(__self__, "end_length", end_length)
        if end_value is not None:
            pulumi.set(__self__, "end_value", end_value)
        if fixed_number is not None:
            pulumi.set(__self__, "fixed_number", fixed_number)
        if fixed_string is not None:
            pulumi.set(__self__, "fixed_string", fixed_string)
        if grouping_columns is not None:
            pulumi.set(__self__, "grouping_columns", grouping_columns)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if library_masking_format_id is not None:
            pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        if post_processing_function is not None:
            pulumi.set(__self__, "post_processing_function", post_processing_function)
        if random_lists is not None:
            pulumi.set(__self__, "random_lists", random_lists)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replace_with is not None:
            pulumi.set(__self__, "replace_with", replace_with)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sql_expression is not None:
            pulumi.set(__self__, "sql_expression", sql_expression)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_length is not None:
            pulumi.set(__self__, "start_length", start_length)
        if start_position is not None:
            pulumi.set(__self__, "start_position", start_position)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_defined_function is not None:
            pulumi.set(__self__, "user_defined_function", user_defined_function)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endLength")
    def end_length(self) -> Optional[int]:
        return pulumi.get(self, "end_length")

    @property
    @pulumi.getter(name="endValue")
    def end_value(self) -> Optional[float]:
        return pulumi.get(self, "end_value")

    @property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> Optional[float]:
        return pulumi.get(self, "fixed_number")

    @property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> Optional[str]:
        return pulumi.get(self, "fixed_string")

    @property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "grouping_columns")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> Optional[str]:
        return pulumi.get(self, "library_masking_format_id")

    @property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> Optional[str]:
        return pulumi.get(self, "post_processing_function")

    @property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "random_lists")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[str]:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> Optional[str]:
        return pulumi.get(self, "replace_with")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> Optional[str]:
        return pulumi.get(self, "sql_expression")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startLength")
    def start_length(self) -> Optional[int]:
        return pulumi.get(self, "start_length")

    @property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> Optional[int]:
        return pulumi.get(self, "start_position")

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[float]:
        return pulumi.get(self, "start_value")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> Optional[str]:
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class GetLibraryMaskingFormatsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetLibraryMaskingFormatsLibraryMaskingFormatCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 format_entries: Optional[Sequence['outputs.GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 sensitive_type_ids: Optional[Sequence[str]] = None,
                 source: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if format_entries is not None:
            pulumi.set(__self__, "format_entries", format_entries)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if sensitive_type_ids is not None:
            pulumi.set(__self__, "sensitive_type_ids", sensitive_type_ids)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="formatEntries")
    def format_entries(self) -> Optional[Sequence['outputs.GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult']]:
        return pulumi.get(self, "format_entries")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sensitiveTypeIds")
    def sensitive_type_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sensitive_type_ids")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetLibraryMaskingFormatsLibraryMaskingFormatCollectionItemFormatEntryResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 description: Optional[str] = None,
                 end_date: Optional[str] = None,
                 end_length: Optional[int] = None,
                 end_value: Optional[float] = None,
                 fixed_number: Optional[float] = None,
                 fixed_string: Optional[str] = None,
                 grouping_columns: Optional[Sequence[str]] = None,
                 length: Optional[int] = None,
                 library_masking_format_id: Optional[str] = None,
                 post_processing_function: Optional[str] = None,
                 random_lists: Optional[Sequence[str]] = None,
                 regular_expression: Optional[str] = None,
                 replace_with: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 sql_expression: Optional[str] = None,
                 start_date: Optional[str] = None,
                 start_length: Optional[int] = None,
                 start_position: Optional[int] = None,
                 start_value: Optional[float] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None,
                 user_defined_function: Optional[str] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_length is not None:
            pulumi.set(__self__, "end_length", end_length)
        if end_value is not None:
            pulumi.set(__self__, "end_value", end_value)
        if fixed_number is not None:
            pulumi.set(__self__, "fixed_number", fixed_number)
        if fixed_string is not None:
            pulumi.set(__self__, "fixed_string", fixed_string)
        if grouping_columns is not None:
            pulumi.set(__self__, "grouping_columns", grouping_columns)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if library_masking_format_id is not None:
            pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        if post_processing_function is not None:
            pulumi.set(__self__, "post_processing_function", post_processing_function)
        if random_lists is not None:
            pulumi.set(__self__, "random_lists", random_lists)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replace_with is not None:
            pulumi.set(__self__, "replace_with", replace_with)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sql_expression is not None:
            pulumi.set(__self__, "sql_expression", sql_expression)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_length is not None:
            pulumi.set(__self__, "start_length", start_length)
        if start_position is not None:
            pulumi.set(__self__, "start_position", start_position)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_defined_function is not None:
            pulumi.set(__self__, "user_defined_function", user_defined_function)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endLength")
    def end_length(self) -> Optional[int]:
        return pulumi.get(self, "end_length")

    @property
    @pulumi.getter(name="endValue")
    def end_value(self) -> Optional[float]:
        return pulumi.get(self, "end_value")

    @property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> Optional[float]:
        return pulumi.get(self, "fixed_number")

    @property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> Optional[str]:
        return pulumi.get(self, "fixed_string")

    @property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "grouping_columns")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> Optional[str]:
        return pulumi.get(self, "library_masking_format_id")

    @property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> Optional[str]:
        return pulumi.get(self, "post_processing_function")

    @property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "random_lists")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[str]:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> Optional[str]:
        return pulumi.get(self, "replace_with")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> Optional[str]:
        return pulumi.get(self, "sql_expression")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startLength")
    def start_length(self) -> Optional[int]:
        return pulumi.get(self, "start_length")

    @property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> Optional[int]:
        return pulumi.get(self, "start_position")

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[float]:
        return pulumi.get(self, "start_value")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> Optional[str]:
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class GetListUserGrantsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetListUserGrantsGrantResult(dict):
    def __init__(__self__, *,
                 depth_level: Optional[int] = None,
                 grant_name: Optional[str] = None,
                 key: Optional[str] = None,
                 privilege_category: Optional[str] = None,
                 privilege_type: Optional[str] = None):
        if depth_level is not None:
            pulumi.set(__self__, "depth_level", depth_level)
        if grant_name is not None:
            pulumi.set(__self__, "grant_name", grant_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if privilege_category is not None:
            pulumi.set(__self__, "privilege_category", privilege_category)
        if privilege_type is not None:
            pulumi.set(__self__, "privilege_type", privilege_type)

    @property
    @pulumi.getter(name="depthLevel")
    def depth_level(self) -> Optional[int]:
        return pulumi.get(self, "depth_level")

    @property
    @pulumi.getter(name="grantName")
    def grant_name(self) -> Optional[str]:
        return pulumi.get(self, "grant_name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="privilegeCategory")
    def privilege_category(self) -> Optional[str]:
        return pulumi.get(self, "privilege_category")

    @property
    @pulumi.getter(name="privilegeType")
    def privilege_type(self) -> Optional[str]:
        return pulumi.get(self, "privilege_type")


@pulumi.output_type
class GetMaskingAnalyticItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetMaskingAnalyticItemDimensionResult']] = None,
                 metric_name: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetMaskingAnalyticItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetMaskingAnalyticItemDimensionResult(dict):
    def __init__(__self__, *,
                 policy_id: Optional[str] = None,
                 target_id: Optional[str] = None):
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetMaskingAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingAnalyticsMaskingAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingAnalyticsMaskingAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 count: Optional[str] = None,
                 dimensions: Optional[Sequence['outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionItemDimensionResult']] = None,
                 metric_name: Optional[str] = None):
        if count is not None:
            pulumi.set(__self__, "count", count)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetMaskingAnalyticsMaskingAnalyticsCollectionItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")


@pulumi.output_type
class GetMaskingAnalyticsMaskingAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 policy_id: Optional[str] = None,
                 target_id: Optional[str] = None):
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetMaskingPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnMaskingFormatResult(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 description: Optional[str] = None,
                 format_entries: Optional[Sequence['outputs.GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntryResult']] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if format_entries is not None:
            pulumi.set(__self__, "format_entries", format_entries)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="formatEntries")
    def format_entries(self) -> Optional[Sequence['outputs.GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntryResult']]:
        return pulumi.get(self, "format_entries")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnMaskingFormatFormatEntryResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 description: Optional[str] = None,
                 end_date: Optional[str] = None,
                 end_length: Optional[int] = None,
                 end_value: Optional[float] = None,
                 fixed_number: Optional[float] = None,
                 fixed_string: Optional[str] = None,
                 grouping_columns: Optional[Sequence[str]] = None,
                 length: Optional[int] = None,
                 library_masking_format_id: Optional[str] = None,
                 post_processing_function: Optional[str] = None,
                 random_lists: Optional[Sequence[str]] = None,
                 regular_expression: Optional[str] = None,
                 replace_with: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 sql_expression: Optional[str] = None,
                 start_date: Optional[str] = None,
                 start_length: Optional[int] = None,
                 start_position: Optional[int] = None,
                 start_value: Optional[float] = None,
                 table_name: Optional[str] = None,
                 type: Optional[str] = None,
                 user_defined_function: Optional[str] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_length is not None:
            pulumi.set(__self__, "end_length", end_length)
        if end_value is not None:
            pulumi.set(__self__, "end_value", end_value)
        if fixed_number is not None:
            pulumi.set(__self__, "fixed_number", fixed_number)
        if fixed_string is not None:
            pulumi.set(__self__, "fixed_string", fixed_string)
        if grouping_columns is not None:
            pulumi.set(__self__, "grouping_columns", grouping_columns)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if library_masking_format_id is not None:
            pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        if post_processing_function is not None:
            pulumi.set(__self__, "post_processing_function", post_processing_function)
        if random_lists is not None:
            pulumi.set(__self__, "random_lists", random_lists)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replace_with is not None:
            pulumi.set(__self__, "replace_with", replace_with)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sql_expression is not None:
            pulumi.set(__self__, "sql_expression", sql_expression)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_length is not None:
            pulumi.set(__self__, "start_length", start_length)
        if start_position is not None:
            pulumi.set(__self__, "start_position", start_position)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_defined_function is not None:
            pulumi.set(__self__, "user_defined_function", user_defined_function)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endLength")
    def end_length(self) -> Optional[int]:
        return pulumi.get(self, "end_length")

    @property
    @pulumi.getter(name="endValue")
    def end_value(self) -> Optional[float]:
        return pulumi.get(self, "end_value")

    @property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> Optional[float]:
        return pulumi.get(self, "fixed_number")

    @property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> Optional[str]:
        return pulumi.get(self, "fixed_string")

    @property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "grouping_columns")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> Optional[str]:
        return pulumi.get(self, "library_masking_format_id")

    @property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> Optional[str]:
        return pulumi.get(self, "post_processing_function")

    @property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "random_lists")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[str]:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> Optional[str]:
        return pulumi.get(self, "replace_with")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> Optional[str]:
        return pulumi.get(self, "sql_expression")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startLength")
    def start_length(self) -> Optional[int]:
        return pulumi.get(self, "start_length")

    @property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> Optional[int]:
        return pulumi.get(self, "start_position")

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[float]:
        return pulumi.get(self, "start_value")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> Optional[str]:
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemResult(dict):
    def __init__(__self__, *,
                 column_name: str,
                 masking_policy_id: str,
                 object: str,
                 schema_name: str,
                 child_columns: Optional[Sequence[str]] = None,
                 data_type: Optional[str] = None,
                 is_masking_enabled: Optional[bool] = None,
                 key: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 masking_column_group: Optional[str] = None,
                 masking_formats: Optional[Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatResult']] = None,
                 object_type: Optional[str] = None,
                 sensitive_type_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "schema_name", schema_name)
        if child_columns is not None:
            pulumi.set(__self__, "child_columns", child_columns)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if is_masking_enabled is not None:
            pulumi.set(__self__, "is_masking_enabled", is_masking_enabled)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if masking_column_group is not None:
            pulumi.set(__self__, "masking_column_group", masking_column_group)
        if masking_formats is not None:
            pulumi.set(__self__, "masking_formats", masking_formats)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if sensitive_type_id is not None:
            pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> str:
        return pulumi.get(self, "masking_policy_id")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="childColumns")
    def child_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "child_columns")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="isMaskingEnabled")
    def is_masking_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_masking_enabled")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maskingColumnGroup")
    def masking_column_group(self) -> Optional[str]:
        return pulumi.get(self, "masking_column_group")

    @property
    @pulumi.getter(name="maskingFormats")
    def masking_formats(self) -> Optional[Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatResult']]:
        return pulumi.get(self, "masking_formats")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_type_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatResult(dict):
    def __init__(__self__, *,
                 format_entries: Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntryResult'],
                 condition: Optional[str] = None,
                 description: Optional[str] = None):
        pulumi.set(__self__, "format_entries", format_entries)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="formatEntries")
    def format_entries(self) -> Sequence['outputs.GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntryResult']:
        return pulumi.get(self, "format_entries")

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class GetMaskingPoliciesMaskingColumnsMaskingColumnCollectionItemMaskingFormatFormatEntryResult(dict):
    def __init__(__self__, *,
                 type: str,
                 column_name: Optional[str] = None,
                 description: Optional[str] = None,
                 end_date: Optional[str] = None,
                 end_length: Optional[int] = None,
                 end_value: Optional[float] = None,
                 fixed_number: Optional[float] = None,
                 fixed_string: Optional[str] = None,
                 grouping_columns: Optional[Sequence[str]] = None,
                 length: Optional[int] = None,
                 library_masking_format_id: Optional[str] = None,
                 post_processing_function: Optional[str] = None,
                 random_lists: Optional[Sequence[str]] = None,
                 regular_expression: Optional[str] = None,
                 replace_with: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 sql_expression: Optional[str] = None,
                 start_date: Optional[str] = None,
                 start_length: Optional[int] = None,
                 start_position: Optional[int] = None,
                 start_value: Optional[float] = None,
                 table_name: Optional[str] = None,
                 user_defined_function: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if end_length is not None:
            pulumi.set(__self__, "end_length", end_length)
        if end_value is not None:
            pulumi.set(__self__, "end_value", end_value)
        if fixed_number is not None:
            pulumi.set(__self__, "fixed_number", fixed_number)
        if fixed_string is not None:
            pulumi.set(__self__, "fixed_string", fixed_string)
        if grouping_columns is not None:
            pulumi.set(__self__, "grouping_columns", grouping_columns)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if library_masking_format_id is not None:
            pulumi.set(__self__, "library_masking_format_id", library_masking_format_id)
        if post_processing_function is not None:
            pulumi.set(__self__, "post_processing_function", post_processing_function)
        if random_lists is not None:
            pulumi.set(__self__, "random_lists", random_lists)
        if regular_expression is not None:
            pulumi.set(__self__, "regular_expression", regular_expression)
        if replace_with is not None:
            pulumi.set(__self__, "replace_with", replace_with)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sql_expression is not None:
            pulumi.set(__self__, "sql_expression", sql_expression)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if start_length is not None:
            pulumi.set(__self__, "start_length", start_length)
        if start_position is not None:
            pulumi.set(__self__, "start_position", start_position)
        if start_value is not None:
            pulumi.set(__self__, "start_value", start_value)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if user_defined_function is not None:
            pulumi.set(__self__, "user_defined_function", user_defined_function)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endLength")
    def end_length(self) -> Optional[int]:
        return pulumi.get(self, "end_length")

    @property
    @pulumi.getter(name="endValue")
    def end_value(self) -> Optional[float]:
        return pulumi.get(self, "end_value")

    @property
    @pulumi.getter(name="fixedNumber")
    def fixed_number(self) -> Optional[float]:
        return pulumi.get(self, "fixed_number")

    @property
    @pulumi.getter(name="fixedString")
    def fixed_string(self) -> Optional[str]:
        return pulumi.get(self, "fixed_string")

    @property
    @pulumi.getter(name="groupingColumns")
    def grouping_columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "grouping_columns")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="libraryMaskingFormatId")
    def library_masking_format_id(self) -> Optional[str]:
        return pulumi.get(self, "library_masking_format_id")

    @property
    @pulumi.getter(name="postProcessingFunction")
    def post_processing_function(self) -> Optional[str]:
        return pulumi.get(self, "post_processing_function")

    @property
    @pulumi.getter(name="randomLists")
    def random_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "random_lists")

    @property
    @pulumi.getter(name="regularExpression")
    def regular_expression(self) -> Optional[str]:
        return pulumi.get(self, "regular_expression")

    @property
    @pulumi.getter(name="replaceWith")
    def replace_with(self) -> Optional[str]:
        return pulumi.get(self, "replace_with")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> Optional[str]:
        return pulumi.get(self, "sql_expression")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="startLength")
    def start_length(self) -> Optional[int]:
        return pulumi.get(self, "start_length")

    @property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> Optional[int]:
        return pulumi.get(self, "start_position")

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[float]:
        return pulumi.get(self, "start_value")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="userDefinedFunction")
    def user_defined_function(self) -> Optional[str]:
        return pulumi.get(self, "user_defined_function")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMaskingPoliciesMaskingPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMaskingPoliciesMaskingPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 add_masking_columns_from_sdm_trigger: Optional[int] = None,
                 column_sources: Optional[Sequence['outputs.GetMaskingPoliciesMaskingPolicyCollectionItemColumnSourceResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_drop_temp_tables_enabled: Optional[bool] = None,
                 is_redo_logging_enabled: Optional[bool] = None,
                 is_refresh_stats_enabled: Optional[bool] = None,
                 parallel_degree: Optional[str] = None,
                 post_masking_script: Optional[str] = None,
                 pre_masking_script: Optional[str] = None,
                 recompile: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if add_masking_columns_from_sdm_trigger is not None:
            pulumi.set(__self__, "add_masking_columns_from_sdm_trigger", add_masking_columns_from_sdm_trigger)
        if column_sources is not None:
            pulumi.set(__self__, "column_sources", column_sources)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_drop_temp_tables_enabled is not None:
            pulumi.set(__self__, "is_drop_temp_tables_enabled", is_drop_temp_tables_enabled)
        if is_redo_logging_enabled is not None:
            pulumi.set(__self__, "is_redo_logging_enabled", is_redo_logging_enabled)
        if is_refresh_stats_enabled is not None:
            pulumi.set(__self__, "is_refresh_stats_enabled", is_refresh_stats_enabled)
        if parallel_degree is not None:
            pulumi.set(__self__, "parallel_degree", parallel_degree)
        if post_masking_script is not None:
            pulumi.set(__self__, "post_masking_script", post_masking_script)
        if pre_masking_script is not None:
            pulumi.set(__self__, "pre_masking_script", pre_masking_script)
        if recompile is not None:
            pulumi.set(__self__, "recompile", recompile)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="addMaskingColumnsFromSdmTrigger")
    def add_masking_columns_from_sdm_trigger(self) -> Optional[int]:
        return pulumi.get(self, "add_masking_columns_from_sdm_trigger")

    @property
    @pulumi.getter(name="columnSources")
    def column_sources(self) -> Optional[Sequence['outputs.GetMaskingPoliciesMaskingPolicyCollectionItemColumnSourceResult']]:
        return pulumi.get(self, "column_sources")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDropTempTablesEnabled")
    def is_drop_temp_tables_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_drop_temp_tables_enabled")

    @property
    @pulumi.getter(name="isRedoLoggingEnabled")
    def is_redo_logging_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_redo_logging_enabled")

    @property
    @pulumi.getter(name="isRefreshStatsEnabled")
    def is_refresh_stats_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_refresh_stats_enabled")

    @property
    @pulumi.getter(name="parallelDegree")
    def parallel_degree(self) -> Optional[str]:
        return pulumi.get(self, "parallel_degree")

    @property
    @pulumi.getter(name="postMaskingScript")
    def post_masking_script(self) -> Optional[str]:
        return pulumi.get(self, "post_masking_script")

    @property
    @pulumi.getter(name="preMaskingScript")
    def pre_masking_script(self) -> Optional[str]:
        return pulumi.get(self, "pre_masking_script")

    @property
    @pulumi.getter
    def recompile(self) -> Optional[str]:
        return pulumi.get(self, "recompile")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMaskingPoliciesMaskingPolicyCollectionItemColumnSourceResult(dict):
    def __init__(__self__, *,
                 column_source: Optional[str] = None,
                 sensitive_data_model_id: Optional[str] = None,
                 target_id: Optional[str] = None):
        if column_source is not None:
            pulumi.set(__self__, "column_source", column_source)
        if sensitive_data_model_id is not None:
            pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="columnSource")
    def column_source(self) -> Optional[str]:
        return pulumi.get(self, "column_source")

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_data_model_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetMaskingPolicyColumnSourceResult(dict):
    def __init__(__self__, *,
                 column_source: Optional[str] = None,
                 sensitive_data_model_id: Optional[str] = None,
                 target_id: Optional[str] = None):
        if column_source is not None:
            pulumi.set(__self__, "column_source", column_source)
        if sensitive_data_model_id is not None:
            pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="columnSource")
    def column_source(self) -> Optional[str]:
        return pulumi.get(self, "column_source")

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_data_model_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetMaskingPolicyMaskingObjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPolicyMaskingObjectsMaskingObjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMaskingPolicyMaskingObjectsMaskingObjectCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMaskingPolicyMaskingObjectsMaskingObjectCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPolicyMaskingObjectsMaskingObjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 object: Optional[str] = None,
                 object_type: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetMaskingPolicyMaskingSchemasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingPolicyMaskingSchemasMaskingSchemaCollectionItemResult(dict):
    def __init__(__self__, *,
                 schema_name: Optional[str] = None):
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetMaskingReportMaskedColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingReportMaskedColumnsMaskedColumnCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMaskingReportMaskedColumnsMaskedColumnCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMaskingReportMaskedColumnsMaskedColumnCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingReportMaskedColumnsMaskedColumnCollectionItemResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 key: Optional[str] = None,
                 masking_column_group: Optional[str] = None,
                 masking_format_used: Optional[str] = None,
                 object: Optional[str] = None,
                 object_type: Optional[str] = None,
                 parent_column_key: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 sensitive_type_id: Optional[str] = None,
                 total_masked_values: Optional[str] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if masking_column_group is not None:
            pulumi.set(__self__, "masking_column_group", masking_column_group)
        if masking_format_used is not None:
            pulumi.set(__self__, "masking_format_used", masking_format_used)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if parent_column_key is not None:
            pulumi.set(__self__, "parent_column_key", parent_column_key)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sensitive_type_id is not None:
            pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        if total_masked_values is not None:
            pulumi.set(__self__, "total_masked_values", total_masked_values)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="maskingColumnGroup")
    def masking_column_group(self) -> Optional[str]:
        return pulumi.get(self, "masking_column_group")

    @property
    @pulumi.getter(name="maskingFormatUsed")
    def masking_format_used(self) -> Optional[str]:
        return pulumi.get(self, "masking_format_used")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="parentColumnKey")
    def parent_column_key(self) -> Optional[str]:
        return pulumi.get(self, "parent_column_key")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_type_id")

    @property
    @pulumi.getter(name="totalMaskedValues")
    def total_masked_values(self) -> Optional[str]:
        return pulumi.get(self, "total_masked_values")


@pulumi.output_type
class GetMaskingReportsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMaskingReportsMaskedColumnItemResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 key: Optional[str] = None,
                 masking_column_group: Optional[str] = None,
                 masking_format_used: Optional[str] = None,
                 object: Optional[str] = None,
                 object_type: Optional[str] = None,
                 parent_column_key: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 sensitive_type_id: Optional[str] = None,
                 total_masked_values: Optional[str] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if masking_column_group is not None:
            pulumi.set(__self__, "masking_column_group", masking_column_group)
        if masking_format_used is not None:
            pulumi.set(__self__, "masking_format_used", masking_format_used)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if parent_column_key is not None:
            pulumi.set(__self__, "parent_column_key", parent_column_key)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sensitive_type_id is not None:
            pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        if total_masked_values is not None:
            pulumi.set(__self__, "total_masked_values", total_masked_values)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="maskingColumnGroup")
    def masking_column_group(self) -> Optional[str]:
        return pulumi.get(self, "masking_column_group")

    @property
    @pulumi.getter(name="maskingFormatUsed")
    def masking_format_used(self) -> Optional[str]:
        return pulumi.get(self, "masking_format_used")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="parentColumnKey")
    def parent_column_key(self) -> Optional[str]:
        return pulumi.get(self, "parent_column_key")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_type_id")

    @property
    @pulumi.getter(name="totalMaskedValues")
    def total_masked_values(self) -> Optional[str]:
        return pulumi.get(self, "total_masked_values")


@pulumi.output_type
class GetMaskingReportsMaskingReportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetMaskingReportsMaskingReportCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetMaskingReportsMaskingReportCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMaskingReportsMaskingReportCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_drop_temp_tables_enabled: Optional[bool] = None,
                 is_redo_logging_enabled: Optional[bool] = None,
                 is_refresh_stats_enabled: Optional[bool] = None,
                 masking_policy_id: Optional[str] = None,
                 masking_work_request_id: Optional[str] = None,
                 parallel_degree: Optional[str] = None,
                 recompile: Optional[str] = None,
                 state: Optional[str] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_masking_finished: Optional[str] = None,
                 time_masking_started: Optional[str] = None,
                 total_masked_columns: Optional[str] = None,
                 total_masked_objects: Optional[str] = None,
                 total_masked_schemas: Optional[str] = None,
                 total_masked_sensitive_types: Optional[str] = None,
                 total_masked_values: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_drop_temp_tables_enabled is not None:
            pulumi.set(__self__, "is_drop_temp_tables_enabled", is_drop_temp_tables_enabled)
        if is_redo_logging_enabled is not None:
            pulumi.set(__self__, "is_redo_logging_enabled", is_redo_logging_enabled)
        if is_refresh_stats_enabled is not None:
            pulumi.set(__self__, "is_refresh_stats_enabled", is_refresh_stats_enabled)
        if masking_policy_id is not None:
            pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        if masking_work_request_id is not None:
            pulumi.set(__self__, "masking_work_request_id", masking_work_request_id)
        if parallel_degree is not None:
            pulumi.set(__self__, "parallel_degree", parallel_degree)
        if recompile is not None:
            pulumi.set(__self__, "recompile", recompile)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_masking_finished is not None:
            pulumi.set(__self__, "time_masking_finished", time_masking_finished)
        if time_masking_started is not None:
            pulumi.set(__self__, "time_masking_started", time_masking_started)
        if total_masked_columns is not None:
            pulumi.set(__self__, "total_masked_columns", total_masked_columns)
        if total_masked_objects is not None:
            pulumi.set(__self__, "total_masked_objects", total_masked_objects)
        if total_masked_schemas is not None:
            pulumi.set(__self__, "total_masked_schemas", total_masked_schemas)
        if total_masked_sensitive_types is not None:
            pulumi.set(__self__, "total_masked_sensitive_types", total_masked_sensitive_types)
        if total_masked_values is not None:
            pulumi.set(__self__, "total_masked_values", total_masked_values)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDropTempTablesEnabled")
    def is_drop_temp_tables_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_drop_temp_tables_enabled")

    @property
    @pulumi.getter(name="isRedoLoggingEnabled")
    def is_redo_logging_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_redo_logging_enabled")

    @property
    @pulumi.getter(name="isRefreshStatsEnabled")
    def is_refresh_stats_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_refresh_stats_enabled")

    @property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "masking_policy_id")

    @property
    @pulumi.getter(name="maskingWorkRequestId")
    def masking_work_request_id(self) -> Optional[str]:
        return pulumi.get(self, "masking_work_request_id")

    @property
    @pulumi.getter(name="parallelDegree")
    def parallel_degree(self) -> Optional[str]:
        return pulumi.get(self, "parallel_degree")

    @property
    @pulumi.getter
    def recompile(self) -> Optional[str]:
        return pulumi.get(self, "recompile")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeMaskingFinished")
    def time_masking_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_masking_finished")

    @property
    @pulumi.getter(name="timeMaskingStarted")
    def time_masking_started(self) -> Optional[str]:
        return pulumi.get(self, "time_masking_started")

    @property
    @pulumi.getter(name="totalMaskedColumns")
    def total_masked_columns(self) -> Optional[str]:
        return pulumi.get(self, "total_masked_columns")

    @property
    @pulumi.getter(name="totalMaskedObjects")
    def total_masked_objects(self) -> Optional[str]:
        return pulumi.get(self, "total_masked_objects")

    @property
    @pulumi.getter(name="totalMaskedSchemas")
    def total_masked_schemas(self) -> Optional[str]:
        return pulumi.get(self, "total_masked_schemas")

    @property
    @pulumi.getter(name="totalMaskedSensitiveTypes")
    def total_masked_sensitive_types(self) -> Optional[str]:
        return pulumi.get(self, "total_masked_sensitive_types")

    @property
    @pulumi.getter(name="totalMaskedValues")
    def total_masked_values(self) -> Optional[str]:
        return pulumi.get(self, "total_masked_values")


@pulumi.output_type
class GetOnpremConnectorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOnpremConnectorsOnPremConnectorResult(dict):
    def __init__(__self__, *,
                 available_version: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 created_version: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None):
        if available_version is not None:
            pulumi.set(__self__, "available_version", available_version)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_version is not None:
            pulumi.set(__self__, "created_version", created_version)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availableVersion")
    def available_version(self) -> Optional[str]:
        return pulumi.get(self, "available_version")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdVersion")
    def created_version(self) -> Optional[str]:
        return pulumi.get(self, "created_version")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetReportDefinitionColumnFilterResult(dict):
    def __init__(__self__, *,
                 expressions: Optional[Sequence[str]] = None,
                 field_name: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 is_hidden: Optional[bool] = None,
                 operator: Optional[str] = None):
        if expressions is not None:
            pulumi.set(__self__, "expressions", expressions)
        if field_name is not None:
            pulumi.set(__self__, "field_name", field_name)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def expressions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expressions")

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[str]:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetReportDefinitionColumnInfoResult(dict):
    def __init__(__self__, *,
                 data_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 display_order: Optional[int] = None,
                 field_name: Optional[str] = None,
                 is_hidden: Optional[bool] = None):
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if field_name is not None:
            pulumi.set(__self__, "field_name", field_name)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[int]:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[str]:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")


@pulumi.output_type
class GetReportDefinitionColumnSortingResult(dict):
    def __init__(__self__, *,
                 field_name: Optional[str] = None,
                 is_ascending: Optional[bool] = None,
                 sorting_order: Optional[int] = None):
        if field_name is not None:
            pulumi.set(__self__, "field_name", field_name)
        if is_ascending is not None:
            pulumi.set(__self__, "is_ascending", is_ascending)
        if sorting_order is not None:
            pulumi.set(__self__, "sorting_order", sorting_order)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[str]:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="isAscending")
    def is_ascending(self) -> Optional[bool]:
        return pulumi.get(self, "is_ascending")

    @property
    @pulumi.getter(name="sortingOrder")
    def sorting_order(self) -> Optional[int]:
        return pulumi.get(self, "sorting_order")


@pulumi.output_type
class GetReportDefinitionSummaryResult(dict):
    def __init__(__self__, *,
                 count_of: Optional[str] = None,
                 display_order: Optional[int] = None,
                 group_by_field_name: Optional[str] = None,
                 is_hidden: Optional[bool] = None,
                 name: Optional[str] = None,
                 scim_filter: Optional[str] = None):
        if count_of is not None:
            pulumi.set(__self__, "count_of", count_of)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if group_by_field_name is not None:
            pulumi.set(__self__, "group_by_field_name", group_by_field_name)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scim_filter is not None:
            pulumi.set(__self__, "scim_filter", scim_filter)

    @property
    @pulumi.getter(name="countOf")
    def count_of(self) -> Optional[str]:
        return pulumi.get(self, "count_of")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[int]:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="groupByFieldName")
    def group_by_field_name(self) -> Optional[str]:
        return pulumi.get(self, "group_by_field_name")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scimFilter")
    def scim_filter(self) -> Optional[str]:
        return pulumi.get(self, "scim_filter")


@pulumi.output_type
class GetReportDefinitionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 column_filters: Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnFilterResult']] = None,
                 column_infos: Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnInfoResult']] = None,
                 column_sortings: Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnSortingResult']] = None,
                 compartment_id: Optional[str] = None,
                 compliance_standards: Optional[Sequence[str]] = None,
                 data_source: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 display_order: Optional[int] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_seeded: Optional[bool] = None,
                 parent_id: Optional[str] = None,
                 record_time_span: Optional[str] = None,
                 schedule: Optional[str] = None,
                 scheduled_report_compartment_id: Optional[str] = None,
                 scheduled_report_mime_type: Optional[str] = None,
                 scheduled_report_name: Optional[str] = None,
                 scheduled_report_row_limit: Optional[int] = None,
                 scim_filter: Optional[str] = None,
                 state: Optional[str] = None,
                 summaries: Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemSummaryResult']] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if column_filters is not None:
            pulumi.set(__self__, "column_filters", column_filters)
        if column_infos is not None:
            pulumi.set(__self__, "column_infos", column_infos)
        if column_sortings is not None:
            pulumi.set(__self__, "column_sortings", column_sortings)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compliance_standards is not None:
            pulumi.set(__self__, "compliance_standards", compliance_standards)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_seeded is not None:
            pulumi.set(__self__, "is_seeded", is_seeded)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if record_time_span is not None:
            pulumi.set(__self__, "record_time_span", record_time_span)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if scheduled_report_compartment_id is not None:
            pulumi.set(__self__, "scheduled_report_compartment_id", scheduled_report_compartment_id)
        if scheduled_report_mime_type is not None:
            pulumi.set(__self__, "scheduled_report_mime_type", scheduled_report_mime_type)
        if scheduled_report_name is not None:
            pulumi.set(__self__, "scheduled_report_name", scheduled_report_name)
        if scheduled_report_row_limit is not None:
            pulumi.set(__self__, "scheduled_report_row_limit", scheduled_report_row_limit)
        if scim_filter is not None:
            pulumi.set(__self__, "scim_filter", scim_filter)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if summaries is not None:
            pulumi.set(__self__, "summaries", summaries)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="columnFilters")
    def column_filters(self) -> Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnFilterResult']]:
        return pulumi.get(self, "column_filters")

    @property
    @pulumi.getter(name="columnInfos")
    def column_infos(self) -> Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnInfoResult']]:
        return pulumi.get(self, "column_infos")

    @property
    @pulumi.getter(name="columnSortings")
    def column_sortings(self) -> Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemColumnSortingResult']]:
        return pulumi.get(self, "column_sortings")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="complianceStandards")
    def compliance_standards(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compliance_standards")

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[str]:
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[int]:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isSeeded")
    def is_seeded(self) -> Optional[bool]:
        return pulumi.get(self, "is_seeded")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="recordTimeSpan")
    def record_time_span(self) -> Optional[str]:
        return pulumi.get(self, "record_time_span")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduledReportCompartmentId")
    def scheduled_report_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_report_compartment_id")

    @property
    @pulumi.getter(name="scheduledReportMimeType")
    def scheduled_report_mime_type(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_report_mime_type")

    @property
    @pulumi.getter(name="scheduledReportName")
    def scheduled_report_name(self) -> Optional[str]:
        return pulumi.get(self, "scheduled_report_name")

    @property
    @pulumi.getter(name="scheduledReportRowLimit")
    def scheduled_report_row_limit(self) -> Optional[int]:
        return pulumi.get(self, "scheduled_report_row_limit")

    @property
    @pulumi.getter(name="scimFilter")
    def scim_filter(self) -> Optional[str]:
        return pulumi.get(self, "scim_filter")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def summaries(self) -> Optional[Sequence['outputs.GetReportDefinitionsReportDefinitionCollectionItemSummaryResult']]:
        return pulumi.get(self, "summaries")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemColumnFilterResult(dict):
    def __init__(__self__, *,
                 expressions: Optional[Sequence[str]] = None,
                 field_name: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 is_hidden: Optional[bool] = None,
                 operator: Optional[str] = None):
        if expressions is not None:
            pulumi.set(__self__, "expressions", expressions)
        if field_name is not None:
            pulumi.set(__self__, "field_name", field_name)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def expressions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "expressions")

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[str]:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemColumnInfoResult(dict):
    def __init__(__self__, *,
                 data_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 display_order: Optional[int] = None,
                 field_name: Optional[str] = None,
                 is_hidden: Optional[bool] = None):
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if field_name is not None:
            pulumi.set(__self__, "field_name", field_name)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[int]:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[str]:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemColumnSortingResult(dict):
    def __init__(__self__, *,
                 field_name: Optional[str] = None,
                 is_ascending: Optional[bool] = None,
                 sorting_order: Optional[int] = None):
        if field_name is not None:
            pulumi.set(__self__, "field_name", field_name)
        if is_ascending is not None:
            pulumi.set(__self__, "is_ascending", is_ascending)
        if sorting_order is not None:
            pulumi.set(__self__, "sorting_order", sorting_order)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[str]:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="isAscending")
    def is_ascending(self) -> Optional[bool]:
        return pulumi.get(self, "is_ascending")

    @property
    @pulumi.getter(name="sortingOrder")
    def sorting_order(self) -> Optional[int]:
        return pulumi.get(self, "sorting_order")


@pulumi.output_type
class GetReportDefinitionsReportDefinitionCollectionItemSummaryResult(dict):
    def __init__(__self__, *,
                 count_of: Optional[str] = None,
                 display_order: Optional[int] = None,
                 group_by_field_name: Optional[str] = None,
                 is_hidden: Optional[bool] = None,
                 name: Optional[str] = None,
                 scim_filter: Optional[str] = None):
        if count_of is not None:
            pulumi.set(__self__, "count_of", count_of)
        if display_order is not None:
            pulumi.set(__self__, "display_order", display_order)
        if group_by_field_name is not None:
            pulumi.set(__self__, "group_by_field_name", group_by_field_name)
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scim_filter is not None:
            pulumi.set(__self__, "scim_filter", scim_filter)

    @property
    @pulumi.getter(name="countOf")
    def count_of(self) -> Optional[str]:
        return pulumi.get(self, "count_of")

    @property
    @pulumi.getter(name="displayOrder")
    def display_order(self) -> Optional[int]:
        return pulumi.get(self, "display_order")

    @property
    @pulumi.getter(name="groupByFieldName")
    def group_by_field_name(self) -> Optional[str]:
        return pulumi.get(self, "group_by_field_name")

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[bool]:
        return pulumi.get(self, "is_hidden")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scimFilter")
    def scim_filter(self) -> Optional[str]:
        return pulumi.get(self, "scim_filter")


@pulumi.output_type
class GetReportsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetReportsReportCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetReportsReportCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetReportsReportCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetReportsReportCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 mime_type: Optional[str] = None,
                 report_definition_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_generated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mime_type is not None:
            pulumi.set(__self__, "mime_type", mime_type)
        if report_definition_id is not None:
            pulumi.set(__self__, "report_definition_id", report_definition_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_generated is not None:
            pulumi.set(__self__, "time_generated", time_generated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mimeType")
    def mime_type(self) -> Optional[str]:
        return pulumi.get(self, "mime_type")

    @property
    @pulumi.getter(name="reportDefinitionId")
    def report_definition_id(self) -> Optional[str]:
        return pulumi.get(self, "report_definition_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeGenerated")
    def time_generated(self) -> Optional[str]:
        return pulumi.get(self, "time_generated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSdmMaskingPolicyDifferenceDifferenceColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSdmMaskingPolicyDifferenceDifferenceColumnsSdmMaskingPolicyDifferenceColumnCollectionItemResult(dict):
    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 difference_type: Optional[str] = None,
                 key: Optional[str] = None,
                 masking_columnkey: Optional[str] = None,
                 object: Optional[str] = None,
                 planned_action: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 sensitive_columnkey: Optional[str] = None,
                 sensitive_type_id: Optional[str] = None,
                 sync_status: Optional[str] = None,
                 time_last_synced: Optional[str] = None):
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if difference_type is not None:
            pulumi.set(__self__, "difference_type", difference_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if masking_columnkey is not None:
            pulumi.set(__self__, "masking_columnkey", masking_columnkey)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if planned_action is not None:
            pulumi.set(__self__, "planned_action", planned_action)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if sensitive_columnkey is not None:
            pulumi.set(__self__, "sensitive_columnkey", sensitive_columnkey)
        if sensitive_type_id is not None:
            pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        if sync_status is not None:
            pulumi.set(__self__, "sync_status", sync_status)
        if time_last_synced is not None:
            pulumi.set(__self__, "time_last_synced", time_last_synced)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="differenceType")
    def difference_type(self) -> Optional[str]:
        return pulumi.get(self, "difference_type")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="maskingColumnkey")
    def masking_columnkey(self) -> Optional[str]:
        return pulumi.get(self, "masking_columnkey")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="plannedAction")
    def planned_action(self) -> Optional[str]:
        return pulumi.get(self, "planned_action")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sensitiveColumnkey")
    def sensitive_columnkey(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_columnkey")

    @property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_type_id")

    @property
    @pulumi.getter(name="syncStatus")
    def sync_status(self) -> Optional[str]:
        return pulumi.get(self, "sync_status")

    @property
    @pulumi.getter(name="timeLastSynced")
    def time_last_synced(self) -> Optional[str]:
        return pulumi.get(self, "time_last_synced")


@pulumi.output_type
class GetSdmMaskingPolicyDifferencesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSdmMaskingPolicyDifferencesSdmMaskingPolicyDifferenceCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 difference_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 masking_policy_id: Optional[str] = None,
                 sensitive_data_model_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_creation_started: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if difference_type is not None:
            pulumi.set(__self__, "difference_type", difference_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if masking_policy_id is not None:
            pulumi.set(__self__, "masking_policy_id", masking_policy_id)
        if sensitive_data_model_id is not None:
            pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_creation_started is not None:
            pulumi.set(__self__, "time_creation_started", time_creation_started)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="differenceType")
    def difference_type(self) -> Optional[str]:
        return pulumi.get(self, "difference_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maskingPolicyId")
    def masking_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "masking_policy_id")

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_data_model_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeCreationStarted")
    def time_creation_started(self) -> Optional[str]:
        return pulumi.get(self, "time_creation_started")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetResult(dict):
    def __init__(__self__, *,
                 auditings: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingResult']] = None,
                 authorization_controls: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlResult']] = None,
                 baseline_target_id: Optional[str] = None,
                 current_target_id: Optional[str] = None,
                 data_encryptions: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionResult']] = None,
                 db_configurations: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationResult']] = None,
                 fine_grained_access_controls: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlResult']] = None,
                 privileges_and_roles: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleResult']] = None,
                 user_accounts: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountResult']] = None):
        if auditings is not None:
            pulumi.set(__self__, "auditings", auditings)
        if authorization_controls is not None:
            pulumi.set(__self__, "authorization_controls", authorization_controls)
        if baseline_target_id is not None:
            pulumi.set(__self__, "baseline_target_id", baseline_target_id)
        if current_target_id is not None:
            pulumi.set(__self__, "current_target_id", current_target_id)
        if data_encryptions is not None:
            pulumi.set(__self__, "data_encryptions", data_encryptions)
        if db_configurations is not None:
            pulumi.set(__self__, "db_configurations", db_configurations)
        if fine_grained_access_controls is not None:
            pulumi.set(__self__, "fine_grained_access_controls", fine_grained_access_controls)
        if privileges_and_roles is not None:
            pulumi.set(__self__, "privileges_and_roles", privileges_and_roles)
        if user_accounts is not None:
            pulumi.set(__self__, "user_accounts", user_accounts)

    @property
    @pulumi.getter
    def auditings(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingResult']]:
        return pulumi.get(self, "auditings")

    @property
    @pulumi.getter(name="authorizationControls")
    def authorization_controls(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlResult']]:
        return pulumi.get(self, "authorization_controls")

    @property
    @pulumi.getter(name="baselineTargetId")
    def baseline_target_id(self) -> Optional[str]:
        return pulumi.get(self, "baseline_target_id")

    @property
    @pulumi.getter(name="currentTargetId")
    def current_target_id(self) -> Optional[str]:
        return pulumi.get(self, "current_target_id")

    @property
    @pulumi.getter(name="dataEncryptions")
    def data_encryptions(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionResult']]:
        return pulumi.get(self, "data_encryptions")

    @property
    @pulumi.getter(name="dbConfigurations")
    def db_configurations(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationResult']]:
        return pulumi.get(self, "db_configurations")

    @property
    @pulumi.getter(name="fineGrainedAccessControls")
    def fine_grained_access_controls(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlResult']]:
        return pulumi.get(self, "fine_grained_access_controls")

    @property
    @pulumi.getter(name="privilegesAndRoles")
    def privileges_and_roles(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleResult']]:
        return pulumi.get(self, "privileges_and_roles")

    @property
    @pulumi.getter(name="userAccounts")
    def user_accounts(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountResult']]:
        return pulumi.get(self, "user_accounts")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingResult(dict):
    def __init__(__self__, *,
                 added_items: Optional[Sequence[str]] = None,
                 baselines: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingBaselineResult']] = None,
                 currents: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingCurrentResult']] = None,
                 modified_items: Optional[Sequence[str]] = None,
                 removed_items: Optional[Sequence[str]] = None,
                 severity: Optional[str] = None):
        if added_items is not None:
            pulumi.set(__self__, "added_items", added_items)
        if baselines is not None:
            pulumi.set(__self__, "baselines", baselines)
        if currents is not None:
            pulumi.set(__self__, "currents", currents)
        if modified_items is not None:
            pulumi.set(__self__, "modified_items", modified_items)
        if removed_items is not None:
            pulumi.set(__self__, "removed_items", removed_items)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "added_items")

    @property
    @pulumi.getter
    def baselines(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingBaselineResult']]:
        return pulumi.get(self, "baselines")

    @property
    @pulumi.getter
    def currents(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingCurrentResult']]:
        return pulumi.get(self, "currents")

    @property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "modified_items")

    @property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "removed_items")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingBaselineResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingBaselineReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingBaselineReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingCurrentResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingCurrentReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuditingCurrentReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuditingCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlResult(dict):
    def __init__(__self__, *,
                 added_items: Optional[Sequence[str]] = None,
                 baselines: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineResult']] = None,
                 currents: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentResult']] = None,
                 modified_items: Optional[Sequence[str]] = None,
                 removed_items: Optional[Sequence[str]] = None,
                 severity: Optional[str] = None):
        if added_items is not None:
            pulumi.set(__self__, "added_items", added_items)
        if baselines is not None:
            pulumi.set(__self__, "baselines", baselines)
        if currents is not None:
            pulumi.set(__self__, "currents", currents)
        if modified_items is not None:
            pulumi.set(__self__, "modified_items", modified_items)
        if removed_items is not None:
            pulumi.set(__self__, "removed_items", removed_items)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "added_items")

    @property
    @pulumi.getter
    def baselines(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineResult']]:
        return pulumi.get(self, "baselines")

    @property
    @pulumi.getter
    def currents(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentResult']]:
        return pulumi.get(self, "currents")

    @property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "modified_items")

    @property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "removed_items")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetAuthorizationControlCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionResult(dict):
    def __init__(__self__, *,
                 added_items: Optional[Sequence[str]] = None,
                 baselines: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionBaselineResult']] = None,
                 currents: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionCurrentResult']] = None,
                 modified_items: Optional[Sequence[str]] = None,
                 removed_items: Optional[Sequence[str]] = None,
                 severity: Optional[str] = None):
        if added_items is not None:
            pulumi.set(__self__, "added_items", added_items)
        if baselines is not None:
            pulumi.set(__self__, "baselines", baselines)
        if currents is not None:
            pulumi.set(__self__, "currents", currents)
        if modified_items is not None:
            pulumi.set(__self__, "modified_items", modified_items)
        if removed_items is not None:
            pulumi.set(__self__, "removed_items", removed_items)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "added_items")

    @property
    @pulumi.getter
    def baselines(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionBaselineResult']]:
        return pulumi.get(self, "baselines")

    @property
    @pulumi.getter
    def currents(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionCurrentResult']]:
        return pulumi.get(self, "currents")

    @property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "modified_items")

    @property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "removed_items")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionBaselineResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionBaselineReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionBaselineReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionCurrentResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionCurrentReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDataEncryptionCurrentReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDataEncryptionCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationResult(dict):
    def __init__(__self__, *,
                 added_items: Optional[Sequence[str]] = None,
                 baselines: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationBaselineResult']] = None,
                 currents: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationCurrentResult']] = None,
                 modified_items: Optional[Sequence[str]] = None,
                 removed_items: Optional[Sequence[str]] = None,
                 severity: Optional[str] = None):
        if added_items is not None:
            pulumi.set(__self__, "added_items", added_items)
        if baselines is not None:
            pulumi.set(__self__, "baselines", baselines)
        if currents is not None:
            pulumi.set(__self__, "currents", currents)
        if modified_items is not None:
            pulumi.set(__self__, "modified_items", modified_items)
        if removed_items is not None:
            pulumi.set(__self__, "removed_items", removed_items)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "added_items")

    @property
    @pulumi.getter
    def baselines(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationBaselineResult']]:
        return pulumi.get(self, "baselines")

    @property
    @pulumi.getter
    def currents(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationCurrentResult']]:
        return pulumi.get(self, "currents")

    @property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "modified_items")

    @property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "removed_items")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationBaselineResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationBaselineReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationBaselineReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationCurrentResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationCurrentReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetDbConfigurationCurrentReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetDbConfigurationCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlResult(dict):
    def __init__(__self__, *,
                 added_items: Optional[Sequence[str]] = None,
                 baselines: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineResult']] = None,
                 currents: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentResult']] = None,
                 modified_items: Optional[Sequence[str]] = None,
                 removed_items: Optional[Sequence[str]] = None,
                 severity: Optional[str] = None):
        if added_items is not None:
            pulumi.set(__self__, "added_items", added_items)
        if baselines is not None:
            pulumi.set(__self__, "baselines", baselines)
        if currents is not None:
            pulumi.set(__self__, "currents", currents)
        if modified_items is not None:
            pulumi.set(__self__, "modified_items", modified_items)
        if removed_items is not None:
            pulumi.set(__self__, "removed_items", removed_items)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "added_items")

    @property
    @pulumi.getter
    def baselines(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineResult']]:
        return pulumi.get(self, "baselines")

    @property
    @pulumi.getter
    def currents(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentResult']]:
        return pulumi.get(self, "currents")

    @property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "modified_items")

    @property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "removed_items")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetFineGrainedAccessControlCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleResult(dict):
    def __init__(__self__, *,
                 added_items: Optional[Sequence[str]] = None,
                 baselines: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineResult']] = None,
                 currents: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentResult']] = None,
                 modified_items: Optional[Sequence[str]] = None,
                 removed_items: Optional[Sequence[str]] = None,
                 severity: Optional[str] = None):
        if added_items is not None:
            pulumi.set(__self__, "added_items", added_items)
        if baselines is not None:
            pulumi.set(__self__, "baselines", baselines)
        if currents is not None:
            pulumi.set(__self__, "currents", currents)
        if modified_items is not None:
            pulumi.set(__self__, "modified_items", modified_items)
        if removed_items is not None:
            pulumi.set(__self__, "removed_items", removed_items)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "added_items")

    @property
    @pulumi.getter
    def baselines(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineResult']]:
        return pulumi.get(self, "baselines")

    @property
    @pulumi.getter
    def currents(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentResult']]:
        return pulumi.get(self, "currents")

    @property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "modified_items")

    @property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "removed_items")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetPrivilegesAndRoleCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountResult(dict):
    def __init__(__self__, *,
                 added_items: Optional[Sequence[str]] = None,
                 baselines: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountBaselineResult']] = None,
                 currents: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountCurrentResult']] = None,
                 modified_items: Optional[Sequence[str]] = None,
                 removed_items: Optional[Sequence[str]] = None,
                 severity: Optional[str] = None):
        if added_items is not None:
            pulumi.set(__self__, "added_items", added_items)
        if baselines is not None:
            pulumi.set(__self__, "baselines", baselines)
        if currents is not None:
            pulumi.set(__self__, "currents", currents)
        if modified_items is not None:
            pulumi.set(__self__, "modified_items", modified_items)
        if removed_items is not None:
            pulumi.set(__self__, "removed_items", removed_items)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="addedItems")
    def added_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "added_items")

    @property
    @pulumi.getter
    def baselines(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountBaselineResult']]:
        return pulumi.get(self, "baselines")

    @property
    @pulumi.getter
    def currents(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountCurrentResult']]:
        return pulumi.get(self, "currents")

    @property
    @pulumi.getter(name="modifiedItems")
    def modified_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "modified_items")

    @property
    @pulumi.getter(name="removedItems")
    def removed_items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "removed_items")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountBaselineResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountBaselineReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountBaselineReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountBaselineReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountCurrentResult(dict):
    def __init__(__self__, *,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountCurrentReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 title: Optional[str] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentComparisonTargetUserAccountCurrentReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentComparisonTargetUserAccountCurrentReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentFindingFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentFindingFindingResult(dict):
    def __init__(__self__, *,
                 assessment_id: Optional[str] = None,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentFindingFindingReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 target_id: Optional[str] = None,
                 title: Optional[str] = None):
        if assessment_id is not None:
            pulumi.set(__self__, "assessment_id", assessment_id)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "assessment_id")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentFindingFindingReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentFindingFindingReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentFindingsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentFindingsFindingResult(dict):
    def __init__(__self__, *,
                 assessment_id: Optional[str] = None,
                 details: Optional[Sequence[str]] = None,
                 key: Optional[str] = None,
                 references: Optional[Sequence['outputs.GetSecurityAssessmentFindingsFindingReferenceResult']] = None,
                 remarks: Optional[str] = None,
                 severity: Optional[str] = None,
                 summary: Optional[str] = None,
                 target_id: Optional[str] = None,
                 title: Optional[str] = None):
        if assessment_id is not None:
            pulumi.set(__self__, "assessment_id", assessment_id)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if references is not None:
            pulumi.set(__self__, "references", references)
        if remarks is not None:
            pulumi.set(__self__, "remarks", remarks)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="assessmentId")
    def assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "assessment_id")

    @property
    @pulumi.getter
    def details(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def references(self) -> Optional[Sequence['outputs.GetSecurityAssessmentFindingsFindingReferenceResult']]:
        return pulumi.get(self, "references")

    @property
    @pulumi.getter
    def remarks(self) -> Optional[str]:
        return pulumi.get(self, "remarks")

    @property
    @pulumi.getter
    def severity(self) -> Optional[str]:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def summary(self) -> Optional[str]:
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class GetSecurityAssessmentFindingsFindingReferenceResult(dict):
    def __init__(__self__, *,
                 cis: Optional[str] = None,
                 gdpr: Optional[str] = None,
                 stig: Optional[str] = None):
        if cis is not None:
            pulumi.set(__self__, "cis", cis)
        if gdpr is not None:
            pulumi.set(__self__, "gdpr", gdpr)
        if stig is not None:
            pulumi.set(__self__, "stig", stig)

    @property
    @pulumi.getter
    def cis(self) -> Optional[str]:
        return pulumi.get(self, "cis")

    @property
    @pulumi.getter
    def gdpr(self) -> Optional[str]:
        return pulumi.get(self, "gdpr")

    @property
    @pulumi.getter
    def stig(self) -> Optional[str]:
        return pulumi.get(self, "stig")


@pulumi.output_type
class GetSecurityAssessmentStatisticResult(dict):
    def __init__(__self__, *,
                 advisories: Optional[Sequence['outputs.GetSecurityAssessmentStatisticAdvisoryResult']] = None,
                 evaluates: Optional[Sequence['outputs.GetSecurityAssessmentStatisticEvaluateResult']] = None,
                 high_risks: Optional[Sequence['outputs.GetSecurityAssessmentStatisticHighRiskResult']] = None,
                 low_risks: Optional[Sequence['outputs.GetSecurityAssessmentStatisticLowRiskResult']] = None,
                 medium_risks: Optional[Sequence['outputs.GetSecurityAssessmentStatisticMediumRiskResult']] = None,
                 passes: Optional[Sequence['outputs.GetSecurityAssessmentStatisticPassResult']] = None,
                 targets_count: Optional[int] = None):
        if advisories is not None:
            pulumi.set(__self__, "advisories", advisories)
        if evaluates is not None:
            pulumi.set(__self__, "evaluates", evaluates)
        if high_risks is not None:
            pulumi.set(__self__, "high_risks", high_risks)
        if low_risks is not None:
            pulumi.set(__self__, "low_risks", low_risks)
        if medium_risks is not None:
            pulumi.set(__self__, "medium_risks", medium_risks)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)

    @property
    @pulumi.getter
    def advisories(self) -> Optional[Sequence['outputs.GetSecurityAssessmentStatisticAdvisoryResult']]:
        return pulumi.get(self, "advisories")

    @property
    @pulumi.getter
    def evaluates(self) -> Optional[Sequence['outputs.GetSecurityAssessmentStatisticEvaluateResult']]:
        return pulumi.get(self, "evaluates")

    @property
    @pulumi.getter(name="highRisks")
    def high_risks(self) -> Optional[Sequence['outputs.GetSecurityAssessmentStatisticHighRiskResult']]:
        return pulumi.get(self, "high_risks")

    @property
    @pulumi.getter(name="lowRisks")
    def low_risks(self) -> Optional[Sequence['outputs.GetSecurityAssessmentStatisticLowRiskResult']]:
        return pulumi.get(self, "low_risks")

    @property
    @pulumi.getter(name="mediumRisks")
    def medium_risks(self) -> Optional[Sequence['outputs.GetSecurityAssessmentStatisticMediumRiskResult']]:
        return pulumi.get(self, "medium_risks")

    @property
    @pulumi.getter
    def passes(self) -> Optional[Sequence['outputs.GetSecurityAssessmentStatisticPassResult']]:
        return pulumi.get(self, "passes")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticAdvisoryResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticEvaluateResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticHighRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticLowRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticMediumRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentStatisticPassResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ignored_assessment_ids: Optional[Sequence[str]] = None,
                 ignored_targets: Optional[Sequence[str]] = None,
                 is_baseline: Optional[bool] = None,
                 is_deviated_from_baseline: Optional[bool] = None,
                 last_compared_baseline_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 link: Optional[str] = None,
                 schedule: Optional[str] = None,
                 schedule_security_assessment_id: Optional[str] = None,
                 state: Optional[str] = None,
                 statistics: Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticResult']] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 target_ids: Optional[Sequence[str]] = None,
                 target_version: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_assessed: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 triggered_by: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignored_assessment_ids is not None:
            pulumi.set(__self__, "ignored_assessment_ids", ignored_assessment_ids)
        if ignored_targets is not None:
            pulumi.set(__self__, "ignored_targets", ignored_targets)
        if is_baseline is not None:
            pulumi.set(__self__, "is_baseline", is_baseline)
        if is_deviated_from_baseline is not None:
            pulumi.set(__self__, "is_deviated_from_baseline", is_deviated_from_baseline)
        if last_compared_baseline_id is not None:
            pulumi.set(__self__, "last_compared_baseline_id", last_compared_baseline_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schedule_security_assessment_id is not None:
            pulumi.set(__self__, "schedule_security_assessment_id", schedule_security_assessment_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_ids is not None:
            pulumi.set(__self__, "target_ids", target_ids)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_assessed is not None:
            pulumi.set(__self__, "time_last_assessed", time_last_assessed)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if triggered_by is not None:
            pulumi.set(__self__, "triggered_by", triggered_by)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ignoredAssessmentIds")
    def ignored_assessment_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignored_assessment_ids")

    @property
    @pulumi.getter(name="ignoredTargets")
    def ignored_targets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignored_targets")

    @property
    @pulumi.getter(name="isBaseline")
    def is_baseline(self) -> Optional[bool]:
        return pulumi.get(self, "is_baseline")

    @property
    @pulumi.getter(name="isDeviatedFromBaseline")
    def is_deviated_from_baseline(self) -> Optional[bool]:
        return pulumi.get(self, "is_deviated_from_baseline")

    @property
    @pulumi.getter(name="lastComparedBaselineId")
    def last_compared_baseline_id(self) -> Optional[str]:
        return pulumi.get(self, "last_compared_baseline_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduleSecurityAssessmentId")
    def schedule_security_assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_security_assessment_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def statistics(self) -> Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticResult']]:
        return pulumi.get(self, "statistics")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_ids")

    @property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[str]:
        return pulumi.get(self, "target_version")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastAssessed")
    def time_last_assessed(self) -> Optional[str]:
        return pulumi.get(self, "time_last_assessed")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="triggeredBy")
    def triggered_by(self) -> Optional[str]:
        return pulumi.get(self, "triggered_by")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticResult(dict):
    def __init__(__self__, *,
                 advisories: Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticAdvisoryResult']] = None,
                 evaluates: Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticEvaluateResult']] = None,
                 high_risks: Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticHighRiskResult']] = None,
                 low_risks: Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticLowRiskResult']] = None,
                 medium_risks: Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticMediumRiskResult']] = None,
                 passes: Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticPassResult']] = None,
                 targets_count: Optional[int] = None):
        if advisories is not None:
            pulumi.set(__self__, "advisories", advisories)
        if evaluates is not None:
            pulumi.set(__self__, "evaluates", evaluates)
        if high_risks is not None:
            pulumi.set(__self__, "high_risks", high_risks)
        if low_risks is not None:
            pulumi.set(__self__, "low_risks", low_risks)
        if medium_risks is not None:
            pulumi.set(__self__, "medium_risks", medium_risks)
        if passes is not None:
            pulumi.set(__self__, "passes", passes)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)

    @property
    @pulumi.getter
    def advisories(self) -> Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticAdvisoryResult']]:
        return pulumi.get(self, "advisories")

    @property
    @pulumi.getter
    def evaluates(self) -> Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticEvaluateResult']]:
        return pulumi.get(self, "evaluates")

    @property
    @pulumi.getter(name="highRisks")
    def high_risks(self) -> Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticHighRiskResult']]:
        return pulumi.get(self, "high_risks")

    @property
    @pulumi.getter(name="lowRisks")
    def low_risks(self) -> Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticLowRiskResult']]:
        return pulumi.get(self, "low_risks")

    @property
    @pulumi.getter(name="mediumRisks")
    def medium_risks(self) -> Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticMediumRiskResult']]:
        return pulumi.get(self, "medium_risks")

    @property
    @pulumi.getter
    def passes(self) -> Optional[Sequence['outputs.GetSecurityAssessmentsSecurityAssessmentStatisticPassResult']]:
        return pulumi.get(self, "passes")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticAdvisoryResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticEvaluateResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticHighRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticLowRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticMediumRiskResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityAssessmentsSecurityAssessmentStatisticPassResult(dict):
    def __init__(__self__, *,
                 auditing_findings_count: Optional[int] = None,
                 authorization_control_findings_count: Optional[int] = None,
                 data_encryption_findings_count: Optional[int] = None,
                 db_configuration_findings_count: Optional[int] = None,
                 fine_grained_access_control_findings_count: Optional[int] = None,
                 privileges_and_roles_findings_count: Optional[int] = None,
                 targets_count: Optional[int] = None,
                 user_accounts_findings_count: Optional[int] = None):
        if auditing_findings_count is not None:
            pulumi.set(__self__, "auditing_findings_count", auditing_findings_count)
        if authorization_control_findings_count is not None:
            pulumi.set(__self__, "authorization_control_findings_count", authorization_control_findings_count)
        if data_encryption_findings_count is not None:
            pulumi.set(__self__, "data_encryption_findings_count", data_encryption_findings_count)
        if db_configuration_findings_count is not None:
            pulumi.set(__self__, "db_configuration_findings_count", db_configuration_findings_count)
        if fine_grained_access_control_findings_count is not None:
            pulumi.set(__self__, "fine_grained_access_control_findings_count", fine_grained_access_control_findings_count)
        if privileges_and_roles_findings_count is not None:
            pulumi.set(__self__, "privileges_and_roles_findings_count", privileges_and_roles_findings_count)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)
        if user_accounts_findings_count is not None:
            pulumi.set(__self__, "user_accounts_findings_count", user_accounts_findings_count)

    @property
    @pulumi.getter(name="auditingFindingsCount")
    def auditing_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "auditing_findings_count")

    @property
    @pulumi.getter(name="authorizationControlFindingsCount")
    def authorization_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "authorization_control_findings_count")

    @property
    @pulumi.getter(name="dataEncryptionFindingsCount")
    def data_encryption_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "data_encryption_findings_count")

    @property
    @pulumi.getter(name="dbConfigurationFindingsCount")
    def db_configuration_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "db_configuration_findings_count")

    @property
    @pulumi.getter(name="fineGrainedAccessControlFindingsCount")
    def fine_grained_access_control_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "fine_grained_access_control_findings_count")

    @property
    @pulumi.getter(name="privilegesAndRolesFindingsCount")
    def privileges_and_roles_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "privileges_and_roles_findings_count")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")

    @property
    @pulumi.getter(name="userAccountsFindingsCount")
    def user_accounts_findings_count(self) -> Optional[int]:
        return pulumi.get(self, "user_accounts_findings_count")


@pulumi.output_type
class GetSecurityPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPoliciesSecurityPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSecurityPoliciesSecurityPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSecurityPoliciesSecurityPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPoliciesSecurityPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 security_policy_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStateEntryDetailResult(dict):
    def __init__(__self__, *,
                 entry_type: Optional[str] = None,
                 time_generated: Optional[str] = None,
                 time_status_updated: Optional[str] = None):
        if entry_type is not None:
            pulumi.set(__self__, "entry_type", entry_type)
        if time_generated is not None:
            pulumi.set(__self__, "time_generated", time_generated)
        if time_status_updated is not None:
            pulumi.set(__self__, "time_status_updated", time_status_updated)

    @property
    @pulumi.getter(name="entryType")
    def entry_type(self) -> Optional[str]:
        return pulumi.get(self, "entry_type")

    @property
    @pulumi.getter(name="timeGenerated")
    def time_generated(self) -> Optional[str]:
        return pulumi.get(self, "time_generated")

    @property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_status_updated")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemResult(dict):
    def __init__(__self__, *,
                 deployment_status: Optional[str] = None,
                 entry_details: Optional[Sequence['outputs.GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetailResult']] = None,
                 id: Optional[str] = None,
                 security_policy_deployment_id: Optional[str] = None,
                 security_policy_entry_id: Optional[str] = None):
        if deployment_status is not None:
            pulumi.set(__self__, "deployment_status", deployment_status)
        if entry_details is not None:
            pulumi.set(__self__, "entry_details", entry_details)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if security_policy_deployment_id is not None:
            pulumi.set(__self__, "security_policy_deployment_id", security_policy_deployment_id)
        if security_policy_entry_id is not None:
            pulumi.set(__self__, "security_policy_entry_id", security_policy_entry_id)

    @property
    @pulumi.getter(name="deploymentStatus")
    def deployment_status(self) -> Optional[str]:
        return pulumi.get(self, "deployment_status")

    @property
    @pulumi.getter(name="entryDetails")
    def entry_details(self) -> Optional[Sequence['outputs.GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetailResult']]:
        return pulumi.get(self, "entry_details")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="securityPolicyDeploymentId")
    def security_policy_deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_deployment_id")

    @property
    @pulumi.getter(name="securityPolicyEntryId")
    def security_policy_entry_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_entry_id")


@pulumi.output_type
class GetSecurityPolicyDeploymentSecurityPolicyEntryStatesSecurityPolicyEntryStateCollectionItemEntryDetailResult(dict):
    def __init__(__self__, *,
                 entry_type: Optional[str] = None,
                 time_generated: Optional[str] = None,
                 time_status_updated: Optional[str] = None):
        if entry_type is not None:
            pulumi.set(__self__, "entry_type", entry_type)
        if time_generated is not None:
            pulumi.set(__self__, "time_generated", time_generated)
        if time_status_updated is not None:
            pulumi.set(__self__, "time_status_updated", time_status_updated)

    @property
    @pulumi.getter(name="entryType")
    def entry_type(self) -> Optional[str]:
        return pulumi.get(self, "entry_type")

    @property
    @pulumi.getter(name="timeGenerated")
    def time_generated(self) -> Optional[str]:
        return pulumi.get(self, "time_generated")

    @property
    @pulumi.getter(name="timeStatusUpdated")
    def time_status_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_status_updated")


@pulumi.output_type
class GetSecurityPolicyDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSecurityPolicyDeploymentsSecurityPolicyDeploymentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 security_policy_deployment_id: Optional[str] = None,
                 security_policy_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if security_policy_deployment_id is not None:
            pulumi.set(__self__, "security_policy_deployment_id", security_policy_deployment_id)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="securityPolicyDeploymentId")
    def security_policy_deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_deployment_id")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSensitiveDataModelSensitiveObjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelSensitiveObjectsSensitiveObjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 object: Optional[str] = None,
                 object_type: Optional[str] = None,
                 schema_name: Optional[str] = None):
        if object is not None:
            pulumi.set(__self__, "object", object)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetSensitiveDataModelSensitiveSchemasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelSensitiveSchemasSensitiveSchemaCollectionItemResult(dict):
    def __init__(__self__, *,
                 schema_name: Optional[str] = None):
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetSensitiveDataModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveColumnsSensitiveColumnCollectionItemResult(dict):
    def __init__(__self__, *,
                 column_name: str,
                 object: str,
                 schema_name: str,
                 sensitive_data_model_id: str,
                 app_defined_child_column_keys: Optional[Sequence[str]] = None,
                 app_name: Optional[str] = None,
                 column_groups: Optional[Sequence[str]] = None,
                 data_type: Optional[str] = None,
                 db_defined_child_column_keys: Optional[Sequence[str]] = None,
                 estimated_data_value_count: Optional[str] = None,
                 key: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 object_type: Optional[str] = None,
                 parent_column_keys: Optional[Sequence[str]] = None,
                 relation_type: Optional[str] = None,
                 sample_data_values: Optional[Sequence[str]] = None,
                 sensitive_type_id: Optional[str] = None,
                 source: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "sensitive_data_model_id", sensitive_data_model_id)
        if app_defined_child_column_keys is not None:
            pulumi.set(__self__, "app_defined_child_column_keys", app_defined_child_column_keys)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if column_groups is not None:
            pulumi.set(__self__, "column_groups", column_groups)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if db_defined_child_column_keys is not None:
            pulumi.set(__self__, "db_defined_child_column_keys", db_defined_child_column_keys)
        if estimated_data_value_count is not None:
            pulumi.set(__self__, "estimated_data_value_count", estimated_data_value_count)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if parent_column_keys is not None:
            pulumi.set(__self__, "parent_column_keys", parent_column_keys)
        if relation_type is not None:
            pulumi.set(__self__, "relation_type", relation_type)
        if sample_data_values is not None:
            pulumi.set(__self__, "sample_data_values", sample_data_values)
        if sensitive_type_id is not None:
            pulumi.set(__self__, "sensitive_type_id", sensitive_type_id)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> str:
        return pulumi.get(self, "sensitive_data_model_id")

    @property
    @pulumi.getter(name="appDefinedChildColumnKeys")
    def app_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "app_defined_child_column_keys")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[str]:
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="columnGroups")
    def column_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "column_groups")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter(name="dbDefinedChildColumnKeys")
    def db_defined_child_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_defined_child_column_keys")

    @property
    @pulumi.getter(name="estimatedDataValueCount")
    def estimated_data_value_count(self) -> Optional[str]:
        return pulumi.get(self, "estimated_data_value_count")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[str]:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="parentColumnKeys")
    def parent_column_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parent_column_keys")

    @property
    @pulumi.getter(name="relationType")
    def relation_type(self) -> Optional[str]:
        return pulumi.get(self, "relation_type")

    @property
    @pulumi.getter(name="sampleDataValues")
    def sample_data_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sample_data_values")

    @property
    @pulumi.getter(name="sensitiveTypeId")
    def sensitive_type_id(self) -> Optional[str]:
        return pulumi.get(self, "sensitive_type_id")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveDataModelCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSensitiveDataModelsSensitiveDataModelCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSensitiveDataModelsSensitiveDataModelCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveDataModelsSensitiveDataModelCollectionItemResult(dict):
    def __init__(__self__, *,
                 app_suite_name: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_app_defined_relation_discovery_enabled: Optional[bool] = None,
                 is_include_all_schemas: Optional[bool] = None,
                 is_include_all_sensitive_types: Optional[bool] = None,
                 is_sample_data_collection_enabled: Optional[bool] = None,
                 schemas_for_discoveries: Optional[Sequence[str]] = None,
                 sensitive_type_ids_for_discoveries: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if app_suite_name is not None:
            pulumi.set(__self__, "app_suite_name", app_suite_name)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_app_defined_relation_discovery_enabled is not None:
            pulumi.set(__self__, "is_app_defined_relation_discovery_enabled", is_app_defined_relation_discovery_enabled)
        if is_include_all_schemas is not None:
            pulumi.set(__self__, "is_include_all_schemas", is_include_all_schemas)
        if is_include_all_sensitive_types is not None:
            pulumi.set(__self__, "is_include_all_sensitive_types", is_include_all_sensitive_types)
        if is_sample_data_collection_enabled is not None:
            pulumi.set(__self__, "is_sample_data_collection_enabled", is_sample_data_collection_enabled)
        if schemas_for_discoveries is not None:
            pulumi.set(__self__, "schemas_for_discoveries", schemas_for_discoveries)
        if sensitive_type_ids_for_discoveries is not None:
            pulumi.set(__self__, "sensitive_type_ids_for_discoveries", sensitive_type_ids_for_discoveries)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="appSuiteName")
    def app_suite_name(self) -> Optional[str]:
        return pulumi.get(self, "app_suite_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAppDefinedRelationDiscoveryEnabled")
    def is_app_defined_relation_discovery_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_app_defined_relation_discovery_enabled")

    @property
    @pulumi.getter(name="isIncludeAllSchemas")
    def is_include_all_schemas(self) -> Optional[bool]:
        return pulumi.get(self, "is_include_all_schemas")

    @property
    @pulumi.getter(name="isIncludeAllSensitiveTypes")
    def is_include_all_sensitive_types(self) -> Optional[bool]:
        return pulumi.get(self, "is_include_all_sensitive_types")

    @property
    @pulumi.getter(name="isSampleDataCollectionEnabled")
    def is_sample_data_collection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_sample_data_collection_enabled")

    @property
    @pulumi.getter(name="schemasForDiscoveries")
    def schemas_for_discoveries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "schemas_for_discoveries")

    @property
    @pulumi.getter(name="sensitiveTypeIdsForDiscoveries")
    def sensitive_type_ids_for_discoveries(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sensitive_type_ids_for_discoveries")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSensitiveTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSensitiveTypesSensitiveTypeCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSensitiveTypesSensitiveTypeCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSensitiveTypesSensitiveTypeCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSensitiveTypesSensitiveTypeCollectionItemResult(dict):
    def __init__(__self__, *,
                 comment_pattern: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 data_pattern: Optional[str] = None,
                 default_masking_format_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 entity_type: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 name_pattern: Optional[str] = None,
                 parent_category_id: Optional[str] = None,
                 search_type: Optional[str] = None,
                 short_name: Optional[str] = None,
                 source: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if comment_pattern is not None:
            pulumi.set(__self__, "comment_pattern", comment_pattern)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if data_pattern is not None:
            pulumi.set(__self__, "data_pattern", data_pattern)
        if default_masking_format_id is not None:
            pulumi.set(__self__, "default_masking_format_id", default_masking_format_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if entity_type is not None:
            pulumi.set(__self__, "entity_type", entity_type)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name_pattern is not None:
            pulumi.set(__self__, "name_pattern", name_pattern)
        if parent_category_id is not None:
            pulumi.set(__self__, "parent_category_id", parent_category_id)
        if search_type is not None:
            pulumi.set(__self__, "search_type", search_type)
        if short_name is not None:
            pulumi.set(__self__, "short_name", short_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="commentPattern")
    def comment_pattern(self) -> Optional[str]:
        return pulumi.get(self, "comment_pattern")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dataPattern")
    def data_pattern(self) -> Optional[str]:
        return pulumi.get(self, "data_pattern")

    @property
    @pulumi.getter(name="defaultMaskingFormatId")
    def default_masking_format_id(self) -> Optional[str]:
        return pulumi.get(self, "default_masking_format_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> Optional[str]:
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="namePattern")
    def name_pattern(self) -> Optional[str]:
        return pulumi.get(self, "name_pattern")

    @property
    @pulumi.getter(name="parentCategoryId")
    def parent_category_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_category_id")

    @property
    @pulumi.getter(name="searchType")
    def search_type(self) -> Optional[str]:
        return pulumi.get(self, "search_type")

    @property
    @pulumi.getter(name="shortName")
    def short_name(self) -> Optional[str]:
        return pulumi.get(self, "short_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSqlCollectionAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Optional[Sequence['outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemDimensionResult']] = None,
                 sql_collection_analytic_count: Optional[str] = None):
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if sql_collection_analytic_count is not None:
            pulumi.set(__self__, "sql_collection_analytic_count", sql_collection_analytic_count)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="sqlCollectionAnalyticCount")
    def sql_collection_analytic_count(self) -> Optional[str]:
        return pulumi.get(self, "sql_collection_analytic_count")


@pulumi.output_type
class GetSqlCollectionAnalyticsSqlCollectionAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 state: Optional[str] = None,
                 target_id: Optional[str] = None):
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")


@pulumi.output_type
class GetSqlCollectionLogInsightsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Optional[Sequence['outputs.GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemDimensionResult']] = None,
                 metric_name: Optional[str] = None,
                 sql_collection_log_insight_count: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None):
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if sql_collection_log_insight_count is not None:
            pulumi.set(__self__, "sql_collection_log_insight_count", sql_collection_log_insight_count)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="sqlCollectionLogInsightCount")
    def sql_collection_log_insight_count(self) -> Optional[str]:
        return pulumi.get(self, "sql_collection_log_insight_count")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetSqlCollectionLogInsightsSqlCollectionLogInsightsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 client_ip: Optional[str] = None,
                 client_os_user_name: Optional[str] = None,
                 client_program: Optional[str] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_os_user_name is not None:
            pulumi.set(__self__, "client_os_user_name", client_os_user_name)
        if client_program is not None:
            pulumi.set(__self__, "client_program", client_program)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="clientOsUserName")
    def client_os_user_name(self) -> Optional[str]:
        return pulumi.get(self, "client_os_user_name")

    @property
    @pulumi.getter(name="clientProgram")
    def client_program(self) -> Optional[str]:
        return pulumi.get(self, "client_program")


@pulumi.output_type
class GetSqlCollectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlCollectionsSqlCollectionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSqlCollectionsSqlCollectionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSqlCollectionsSqlCollectionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlCollectionsSqlCollectionCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 db_user_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 generate_sql_firewall_policy_trigger: Optional[bool] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 purge_logs_trigger: Optional[bool] = None,
                 refresh_log_insights_trigger: Optional[bool] = None,
                 sql_level: Optional[str] = None,
                 start_trigger: Optional[bool] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 stop_trigger: Optional[bool] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_last_started: Optional[str] = None,
                 time_last_stopped: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if generate_sql_firewall_policy_trigger is not None:
            pulumi.set(__self__, "generate_sql_firewall_policy_trigger", generate_sql_firewall_policy_trigger)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if purge_logs_trigger is not None:
            pulumi.set(__self__, "purge_logs_trigger", purge_logs_trigger)
        if refresh_log_insights_trigger is not None:
            pulumi.set(__self__, "refresh_log_insights_trigger", refresh_log_insights_trigger)
        if sql_level is not None:
            pulumi.set(__self__, "sql_level", sql_level)
        if start_trigger is not None:
            pulumi.set(__self__, "start_trigger", start_trigger)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stop_trigger is not None:
            pulumi.set(__self__, "stop_trigger", stop_trigger)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_started is not None:
            pulumi.set(__self__, "time_last_started", time_last_started)
        if time_last_stopped is not None:
            pulumi.set(__self__, "time_last_stopped", time_last_stopped)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="generateSqlFirewallPolicyTrigger")
    def generate_sql_firewall_policy_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "generate_sql_firewall_policy_trigger")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="purgeLogsTrigger")
    def purge_logs_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "purge_logs_trigger")

    @property
    @pulumi.getter(name="refreshLogInsightsTrigger")
    def refresh_log_insights_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "refresh_log_insights_trigger")

    @property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> Optional[str]:
        return pulumi.get(self, "sql_level")

    @property
    @pulumi.getter(name="startTrigger")
    def start_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "start_trigger")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stopTrigger")
    def stop_trigger(self) -> Optional[bool]:
        return pulumi.get(self, "stop_trigger")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastStarted")
    def time_last_started(self) -> Optional[str]:
        return pulumi.get(self, "time_last_started")

    @property
    @pulumi.getter(name="timeLastStopped")
    def time_last_stopped(self) -> Optional[str]:
        return pulumi.get(self, "time_last_stopped")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetSqlFirewallAllowedSqlAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Optional[Sequence['outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemDimensionResult']] = None,
                 sql_firewall_allowed_sql_analytic_count: Optional[str] = None):
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if sql_firewall_allowed_sql_analytic_count is not None:
            pulumi.set(__self__, "sql_firewall_allowed_sql_analytic_count", sql_firewall_allowed_sql_analytic_count)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="sqlFirewallAllowedSqlAnalyticCount")
    def sql_firewall_allowed_sql_analytic_count(self) -> Optional[str]:
        return pulumi.get(self, "sql_firewall_allowed_sql_analytic_count")


@pulumi.output_type
class GetSqlFirewallAllowedSqlAnalyticsSqlFirewallAllowedSqlAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 db_user_name: Optional[str] = None,
                 sql_firewall_policy_id: Optional[str] = None,
                 sql_level: Optional[str] = None,
                 state: Optional[str] = None):
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)
        if sql_firewall_policy_id is not None:
            pulumi.set(__self__, "sql_firewall_policy_id", sql_firewall_policy_id)
        if sql_level is not None:
            pulumi.set(__self__, "sql_level", sql_level)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="sqlFirewallPolicyId")
    def sql_firewall_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_firewall_policy_id")

    @property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> Optional[str]:
        return pulumi.get(self, "sql_level")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetSqlFirewallAllowedSqlsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallAllowedSqlsSqlFirewallAllowedSqlCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 current_user: Optional[str] = None,
                 db_user_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 sql_accessed_objects: Optional[Sequence[str]] = None,
                 sql_firewall_policy_id: Optional[str] = None,
                 sql_level: Optional[str] = None,
                 sql_text: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_collected: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 version: Optional[float] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if current_user is not None:
            pulumi.set(__self__, "current_user", current_user)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if sql_accessed_objects is not None:
            pulumi.set(__self__, "sql_accessed_objects", sql_accessed_objects)
        if sql_firewall_policy_id is not None:
            pulumi.set(__self__, "sql_firewall_policy_id", sql_firewall_policy_id)
        if sql_level is not None:
            pulumi.set(__self__, "sql_level", sql_level)
        if sql_text is not None:
            pulumi.set(__self__, "sql_text", sql_text)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_collected is not None:
            pulumi.set(__self__, "time_collected", time_collected)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="currentUser")
    def current_user(self) -> Optional[str]:
        return pulumi.get(self, "current_user")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sqlAccessedObjects")
    def sql_accessed_objects(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sql_accessed_objects")

    @property
    @pulumi.getter(name="sqlFirewallPolicyId")
    def sql_firewall_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_firewall_policy_id")

    @property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> Optional[str]:
        return pulumi.get(self, "sql_level")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> Optional[str]:
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> Optional[str]:
        return pulumi.get(self, "time_collected")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> Optional[float]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSqlFirewallPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallPoliciesSqlFirewallPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSqlFirewallPoliciesSqlFirewallPolicyCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSqlFirewallPoliciesSqlFirewallPolicyCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallPoliciesSqlFirewallPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 allowed_client_ips: Optional[Sequence[str]] = None,
                 allowed_client_os_usernames: Optional[Sequence[str]] = None,
                 allowed_client_programs: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 db_user_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 enforcement_scope: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 security_policy_id: Optional[str] = None,
                 sql_firewall_policy_id: Optional[str] = None,
                 sql_level: Optional[str] = None,
                 state: Optional[str] = None,
                 status: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 violation_action: Optional[str] = None,
                 violation_audit: Optional[str] = None):
        if allowed_client_ips is not None:
            pulumi.set(__self__, "allowed_client_ips", allowed_client_ips)
        if allowed_client_os_usernames is not None:
            pulumi.set(__self__, "allowed_client_os_usernames", allowed_client_os_usernames)
        if allowed_client_programs is not None:
            pulumi.set(__self__, "allowed_client_programs", allowed_client_programs)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enforcement_scope is not None:
            pulumi.set(__self__, "enforcement_scope", enforcement_scope)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)
        if sql_firewall_policy_id is not None:
            pulumi.set(__self__, "sql_firewall_policy_id", sql_firewall_policy_id)
        if sql_level is not None:
            pulumi.set(__self__, "sql_level", sql_level)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if violation_action is not None:
            pulumi.set(__self__, "violation_action", violation_action)
        if violation_audit is not None:
            pulumi.set(__self__, "violation_audit", violation_audit)

    @property
    @pulumi.getter(name="allowedClientIps")
    def allowed_client_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_client_ips")

    @property
    @pulumi.getter(name="allowedClientOsUsernames")
    def allowed_client_os_usernames(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_client_os_usernames")

    @property
    @pulumi.getter(name="allowedClientPrograms")
    def allowed_client_programs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_client_programs")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="enforcementScope")
    def enforcement_scope(self) -> Optional[str]:
        return pulumi.get(self, "enforcement_scope")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter(name="sqlFirewallPolicyId")
    def sql_firewall_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "sql_firewall_policy_id")

    @property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> Optional[str]:
        return pulumi.get(self, "sql_level")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> Optional[str]:
        return pulumi.get(self, "violation_action")

    @property
    @pulumi.getter(name="violationAudit")
    def violation_audit(self) -> Optional[str]:
        return pulumi.get(self, "violation_audit")


@pulumi.output_type
class GetSqlFirewallPolicyAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Optional[Sequence['outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemDimensionResult']] = None,
                 sql_firewall_policy_analytic_count: Optional[str] = None):
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if sql_firewall_policy_analytic_count is not None:
            pulumi.set(__self__, "sql_firewall_policy_analytic_count", sql_firewall_policy_analytic_count)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="sqlFirewallPolicyAnalyticCount")
    def sql_firewall_policy_analytic_count(self) -> Optional[str]:
        return pulumi.get(self, "sql_firewall_policy_analytic_count")


@pulumi.output_type
class GetSqlFirewallPolicyAnalyticsSqlFirewallPolicyAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 enforcement_scope: Optional[str] = None,
                 security_policy_id: Optional[str] = None,
                 state: Optional[str] = None,
                 violation_action: Optional[str] = None):
        if enforcement_scope is not None:
            pulumi.set(__self__, "enforcement_scope", enforcement_scope)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if violation_action is not None:
            pulumi.set(__self__, "violation_action", violation_action)

    @property
    @pulumi.getter(name="enforcementScope")
    def enforcement_scope(self) -> Optional[str]:
        return pulumi.get(self, "enforcement_scope")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> Optional[str]:
        return pulumi.get(self, "violation_action")


@pulumi.output_type
class GetSqlFirewallViolationAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Optional[Sequence['outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimensionResult']] = None,
                 display_name: Optional[str] = None,
                 metric_name: Optional[str] = None,
                 sql_firewall_violation_analytic_count: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None):
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if sql_firewall_violation_analytic_count is not None:
            pulumi.set(__self__, "sql_firewall_violation_analytic_count", sql_firewall_violation_analytic_count)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimensionResult']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="sqlFirewallViolationAnalyticCount")
    def sql_firewall_violation_analytic_count(self) -> Optional[str]:
        return pulumi.get(self, "sql_firewall_violation_analytic_count")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetSqlFirewallViolationAnalyticsSqlFirewallViolationAnalyticsCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 client_ips: Optional[Sequence[str]] = None,
                 client_os_user_names: Optional[Sequence[str]] = None,
                 client_programs: Optional[Sequence[str]] = None,
                 db_user_names: Optional[Sequence[str]] = None,
                 operation_times: Optional[Sequence[str]] = None,
                 operations: Optional[Sequence[str]] = None,
                 sql_levels: Optional[Sequence[str]] = None,
                 target_ids: Optional[Sequence[str]] = None,
                 target_names: Optional[Sequence[str]] = None,
                 violation_actions: Optional[Sequence[str]] = None,
                 violation_causes: Optional[Sequence[str]] = None):
        if client_ips is not None:
            pulumi.set(__self__, "client_ips", client_ips)
        if client_os_user_names is not None:
            pulumi.set(__self__, "client_os_user_names", client_os_user_names)
        if client_programs is not None:
            pulumi.set(__self__, "client_programs", client_programs)
        if db_user_names is not None:
            pulumi.set(__self__, "db_user_names", db_user_names)
        if operation_times is not None:
            pulumi.set(__self__, "operation_times", operation_times)
        if operations is not None:
            pulumi.set(__self__, "operations", operations)
        if sql_levels is not None:
            pulumi.set(__self__, "sql_levels", sql_levels)
        if target_ids is not None:
            pulumi.set(__self__, "target_ids", target_ids)
        if target_names is not None:
            pulumi.set(__self__, "target_names", target_names)
        if violation_actions is not None:
            pulumi.set(__self__, "violation_actions", violation_actions)
        if violation_causes is not None:
            pulumi.set(__self__, "violation_causes", violation_causes)

    @property
    @pulumi.getter(name="clientIps")
    def client_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_ips")

    @property
    @pulumi.getter(name="clientOsUserNames")
    def client_os_user_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_os_user_names")

    @property
    @pulumi.getter(name="clientPrograms")
    def client_programs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_programs")

    @property
    @pulumi.getter(name="dbUserNames")
    def db_user_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_user_names")

    @property
    @pulumi.getter(name="operationTimes")
    def operation_times(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "operation_times")

    @property
    @pulumi.getter
    def operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter(name="sqlLevels")
    def sql_levels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sql_levels")

    @property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_ids")

    @property
    @pulumi.getter(name="targetNames")
    def target_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_names")

    @property
    @pulumi.getter(name="violationActions")
    def violation_actions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "violation_actions")

    @property
    @pulumi.getter(name="violationCauses")
    def violation_causes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "violation_causes")


@pulumi.output_type
class GetSqlFirewallViolationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSqlFirewallViolationsSqlFirewallViolationsCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetSqlFirewallViolationsSqlFirewallViolationsCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetSqlFirewallViolationsSqlFirewallViolationsCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSqlFirewallViolationsSqlFirewallViolationsCollectionItemResult(dict):
    def __init__(__self__, *,
                 client_ip: Optional[str] = None,
                 client_os_user_name: Optional[str] = None,
                 client_program: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 current_db_user_name: Optional[str] = None,
                 db_user_name: Optional[str] = None,
                 id: Optional[str] = None,
                 operation: Optional[str] = None,
                 operation_time: Optional[str] = None,
                 sql_accessed_objects: Optional[str] = None,
                 sql_level: Optional[str] = None,
                 sql_text: Optional[str] = None,
                 target_id: Optional[str] = None,
                 target_name: Optional[str] = None,
                 time_collected: Optional[str] = None,
                 violation_action: Optional[str] = None,
                 violation_cause: Optional[str] = None):
        if client_ip is not None:
            pulumi.set(__self__, "client_ip", client_ip)
        if client_os_user_name is not None:
            pulumi.set(__self__, "client_os_user_name", client_os_user_name)
        if client_program is not None:
            pulumi.set(__self__, "client_program", client_program)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if current_db_user_name is not None:
            pulumi.set(__self__, "current_db_user_name", current_db_user_name)
        if db_user_name is not None:
            pulumi.set(__self__, "db_user_name", db_user_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if operation_time is not None:
            pulumi.set(__self__, "operation_time", operation_time)
        if sql_accessed_objects is not None:
            pulumi.set(__self__, "sql_accessed_objects", sql_accessed_objects)
        if sql_level is not None:
            pulumi.set(__self__, "sql_level", sql_level)
        if sql_text is not None:
            pulumi.set(__self__, "sql_text", sql_text)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_name is not None:
            pulumi.set(__self__, "target_name", target_name)
        if time_collected is not None:
            pulumi.set(__self__, "time_collected", time_collected)
        if violation_action is not None:
            pulumi.set(__self__, "violation_action", violation_action)
        if violation_cause is not None:
            pulumi.set(__self__, "violation_cause", violation_cause)

    @property
    @pulumi.getter(name="clientIp")
    def client_ip(self) -> Optional[str]:
        return pulumi.get(self, "client_ip")

    @property
    @pulumi.getter(name="clientOsUserName")
    def client_os_user_name(self) -> Optional[str]:
        return pulumi.get(self, "client_os_user_name")

    @property
    @pulumi.getter(name="clientProgram")
    def client_program(self) -> Optional[str]:
        return pulumi.get(self, "client_program")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="currentDbUserName")
    def current_db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "current_db_user_name")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> Optional[str]:
        return pulumi.get(self, "db_user_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="operationTime")
    def operation_time(self) -> Optional[str]:
        return pulumi.get(self, "operation_time")

    @property
    @pulumi.getter(name="sqlAccessedObjects")
    def sql_accessed_objects(self) -> Optional[str]:
        return pulumi.get(self, "sql_accessed_objects")

    @property
    @pulumi.getter(name="sqlLevel")
    def sql_level(self) -> Optional[str]:
        return pulumi.get(self, "sql_level")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> Optional[str]:
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> Optional[str]:
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter(name="timeCollected")
    def time_collected(self) -> Optional[str]:
        return pulumi.get(self, "time_collected")

    @property
    @pulumi.getter(name="violationAction")
    def violation_action(self) -> Optional[str]:
        return pulumi.get(self, "violation_action")

    @property
    @pulumi.getter(name="violationCause")
    def violation_cause(self) -> Optional[str]:
        return pulumi.get(self, "violation_cause")


@pulumi.output_type
class GetTargetAlertPolicyAssociationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetTargetAlertPolicyAssociationsTargetAlertPolicyAssociationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 policy_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetTargetDatabaseConnectionOptionResult(dict):
    def __init__(__self__, *,
                 connection_type: Optional[str] = None,
                 datasafe_private_endpoint_id: Optional[str] = None,
                 on_prem_connector_id: Optional[str] = None):
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if datasafe_private_endpoint_id is not None:
            pulumi.set(__self__, "datasafe_private_endpoint_id", datasafe_private_endpoint_id)
        if on_prem_connector_id is not None:
            pulumi.set(__self__, "on_prem_connector_id", on_prem_connector_id)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="datasafePrivateEndpointId")
    def datasafe_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "datasafe_private_endpoint_id")

    @property
    @pulumi.getter(name="onPremConnectorId")
    def on_prem_connector_id(self) -> Optional[str]:
        return pulumi.get(self, "on_prem_connector_id")


@pulumi.output_type
class GetTargetDatabaseCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 user_name: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetTargetDatabaseDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_system_id: Optional[str] = None,
                 infrastructure_type: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 listener_port: Optional[int] = None,
                 service_name: Optional[str] = None,
                 vm_cluster_id: Optional[str] = None):
        if autonomous_database_id is not None:
            pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if infrastructure_type is not None:
            pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if vm_cluster_id is not None:
            pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> Optional[str]:
        return pulumi.get(self, "autonomous_database_id")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> Optional[str]:
        return pulumi.get(self, "infrastructure_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[int]:
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabaseRoleFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabaseRoleRoleResult(dict):
    def __init__(__self__, *,
                 authentication_type: Optional[str] = None,
                 is_common: Optional[bool] = None,
                 is_implicit: Optional[bool] = None,
                 is_inherited: Optional[bool] = None,
                 is_oracle_maintained: Optional[bool] = None,
                 is_password_required: Optional[bool] = None,
                 role_name: Optional[str] = None):
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if is_common is not None:
            pulumi.set(__self__, "is_common", is_common)
        if is_implicit is not None:
            pulumi.set(__self__, "is_implicit", is_implicit)
        if is_inherited is not None:
            pulumi.set(__self__, "is_inherited", is_inherited)
        if is_oracle_maintained is not None:
            pulumi.set(__self__, "is_oracle_maintained", is_oracle_maintained)
        if is_password_required is not None:
            pulumi.set(__self__, "is_password_required", is_password_required)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="isCommon")
    def is_common(self) -> Optional[bool]:
        return pulumi.get(self, "is_common")

    @property
    @pulumi.getter(name="isImplicit")
    def is_implicit(self) -> Optional[bool]:
        return pulumi.get(self, "is_implicit")

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> Optional[bool]:
        return pulumi.get(self, "is_inherited")

    @property
    @pulumi.getter(name="isOracleMaintained")
    def is_oracle_maintained(self) -> Optional[bool]:
        return pulumi.get(self, "is_oracle_maintained")

    @property
    @pulumi.getter(name="isPasswordRequired")
    def is_password_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_password_required")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        return pulumi.get(self, "role_name")


@pulumi.output_type
class GetTargetDatabaseRolesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabaseRolesRoleResult(dict):
    def __init__(__self__, *,
                 authentication_type: Optional[str] = None,
                 is_common: Optional[bool] = None,
                 is_implicit: Optional[bool] = None,
                 is_inherited: Optional[bool] = None,
                 is_oracle_maintained: Optional[bool] = None,
                 is_password_required: Optional[bool] = None,
                 role_name: Optional[str] = None):
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if is_common is not None:
            pulumi.set(__self__, "is_common", is_common)
        if is_implicit is not None:
            pulumi.set(__self__, "is_implicit", is_implicit)
        if is_inherited is not None:
            pulumi.set(__self__, "is_inherited", is_inherited)
        if is_oracle_maintained is not None:
            pulumi.set(__self__, "is_oracle_maintained", is_oracle_maintained)
        if is_password_required is not None:
            pulumi.set(__self__, "is_password_required", is_password_required)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="isCommon")
    def is_common(self) -> Optional[bool]:
        return pulumi.get(self, "is_common")

    @property
    @pulumi.getter(name="isImplicit")
    def is_implicit(self) -> Optional[bool]:
        return pulumi.get(self, "is_implicit")

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> Optional[bool]:
        return pulumi.get(self, "is_inherited")

    @property
    @pulumi.getter(name="isOracleMaintained")
    def is_oracle_maintained(self) -> Optional[bool]:
        return pulumi.get(self, "is_oracle_maintained")

    @property
    @pulumi.getter(name="isPasswordRequired")
    def is_password_required(self) -> Optional[bool]:
        return pulumi.get(self, "is_password_required")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        return pulumi.get(self, "role_name")


@pulumi.output_type
class GetTargetDatabaseTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: Optional[str] = None,
                 key_store_content: Optional[str] = None,
                 status: Optional[str] = None,
                 store_password: Optional[str] = None,
                 trust_store_content: Optional[str] = None):
        if certificate_store_type is not None:
            pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        if key_store_content is not None:
            pulumi.set(__self__, "key_store_content", key_store_content)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if store_password is not None:
            pulumi.set(__self__, "store_password", store_password)
        if trust_store_content is not None:
            pulumi.set(__self__, "trust_store_content", trust_store_content)

    @property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_type")

    @property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> Optional[str]:
        return pulumi.get(self, "key_store_content")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> Optional[str]:
        return pulumi.get(self, "store_password")

    @property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> Optional[str]:
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetTargetDatabasesColumnsColumnResult(dict):
    def __init__(__self__, *,
                 character_length: Optional[int] = None,
                 column_name: Optional[str] = None,
                 data_type: Optional[str] = None,
                 length: Optional[str] = None,
                 precision: Optional[int] = None,
                 scale: Optional[int] = None,
                 schema_name: Optional[str] = None,
                 table_name: Optional[str] = None):
        if character_length is not None:
            pulumi.set(__self__, "character_length", character_length)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="characterLength")
    def character_length(self) -> Optional[int]:
        return pulumi.get(self, "character_length")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[str]:
        return pulumi.get(self, "data_type")

    @property
    @pulumi.getter
    def length(self) -> Optional[str]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def precision(self) -> Optional[int]:
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def scale(self) -> Optional[int]:
        return pulumi.get(self, "scale")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetTargetDatabasesColumnsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasesSchemasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasesSchemasSchemaResult(dict):
    def __init__(__self__, *,
                 is_oracle_maintained: Optional[bool] = None,
                 schema_name: Optional[str] = None):
        if is_oracle_maintained is not None:
            pulumi.set(__self__, "is_oracle_maintained", is_oracle_maintained)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="isOracleMaintained")
    def is_oracle_maintained(self) -> Optional[bool]:
        return pulumi.get(self, "is_oracle_maintained")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")


@pulumi.output_type
class GetTargetDatabasesTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTargetDatabasesTablesTableResult(dict):
    def __init__(__self__, *,
                 schema_name: Optional[str] = None,
                 table_name: Optional[str] = None):
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseResult(dict):
    def __init__(__self__, *,
                 associated_resource_ids: Optional[Sequence[str]] = None,
                 compartment_id: Optional[str] = None,
                 connection_options: Optional[Sequence['outputs.GetTargetDatabasesTargetDatabaseConnectionOptionResult']] = None,
                 credentials: Optional[Sequence['outputs.GetTargetDatabasesTargetDatabaseCredentialResult']] = None,
                 database_details: Optional[Sequence['outputs.GetTargetDatabasesTargetDatabaseDatabaseDetailResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 tls_configs: Optional[Sequence['outputs.GetTargetDatabasesTargetDatabaseTlsConfigResult']] = None):
        if associated_resource_ids is not None:
            pulumi.set(__self__, "associated_resource_ids", associated_resource_ids)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_options is not None:
            pulumi.set(__self__, "connection_options", connection_options)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if database_details is not None:
            pulumi.set(__self__, "database_details", database_details)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if tls_configs is not None:
            pulumi.set(__self__, "tls_configs", tls_configs)

    @property
    @pulumi.getter(name="associatedResourceIds")
    def associated_resource_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "associated_resource_ids")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionOptions")
    def connection_options(self) -> Optional[Sequence['outputs.GetTargetDatabasesTargetDatabaseConnectionOptionResult']]:
        return pulumi.get(self, "connection_options")

    @property
    @pulumi.getter
    def credentials(self) -> Optional[Sequence['outputs.GetTargetDatabasesTargetDatabaseCredentialResult']]:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="databaseDetails")
    def database_details(self) -> Optional[Sequence['outputs.GetTargetDatabasesTargetDatabaseDatabaseDetailResult']]:
        return pulumi.get(self, "database_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="tlsConfigs")
    def tls_configs(self) -> Optional[Sequence['outputs.GetTargetDatabasesTargetDatabaseTlsConfigResult']]:
        return pulumi.get(self, "tls_configs")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseConnectionOptionResult(dict):
    def __init__(__self__, *,
                 connection_type: Optional[str] = None,
                 datasafe_private_endpoint_id: Optional[str] = None,
                 on_prem_connector_id: Optional[str] = None):
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if datasafe_private_endpoint_id is not None:
            pulumi.set(__self__, "datasafe_private_endpoint_id", datasafe_private_endpoint_id)
        if on_prem_connector_id is not None:
            pulumi.set(__self__, "on_prem_connector_id", on_prem_connector_id)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="datasafePrivateEndpointId")
    def datasafe_private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "datasafe_private_endpoint_id")

    @property
    @pulumi.getter(name="onPremConnectorId")
    def on_prem_connector_id(self) -> Optional[str]:
        return pulumi.get(self, "on_prem_connector_id")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseCredentialResult(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 user_name: Optional[str] = None):
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseDatabaseDetailResult(dict):
    def __init__(__self__, *,
                 autonomous_database_id: Optional[str] = None,
                 database_type: Optional[str] = None,
                 db_system_id: Optional[str] = None,
                 infrastructure_type: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip_addresses: Optional[Sequence[str]] = None,
                 listener_port: Optional[int] = None,
                 service_name: Optional[str] = None,
                 vm_cluster_id: Optional[str] = None):
        if autonomous_database_id is not None:
            pulumi.set(__self__, "autonomous_database_id", autonomous_database_id)
        if database_type is not None:
            pulumi.set(__self__, "database_type", database_type)
        if db_system_id is not None:
            pulumi.set(__self__, "db_system_id", db_system_id)
        if infrastructure_type is not None:
            pulumi.set(__self__, "infrastructure_type", infrastructure_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if listener_port is not None:
            pulumi.set(__self__, "listener_port", listener_port)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if vm_cluster_id is not None:
            pulumi.set(__self__, "vm_cluster_id", vm_cluster_id)

    @property
    @pulumi.getter(name="autonomousDatabaseId")
    def autonomous_database_id(self) -> Optional[str]:
        return pulumi.get(self, "autonomous_database_id")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> Optional[str]:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> Optional[str]:
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="infrastructureType")
    def infrastructure_type(self) -> Optional[str]:
        return pulumi.get(self, "infrastructure_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> Optional[int]:
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="vmClusterId")
    def vm_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_cluster_id")


@pulumi.output_type
class GetTargetDatabasesTargetDatabaseTlsConfigResult(dict):
    def __init__(__self__, *,
                 certificate_store_type: Optional[str] = None,
                 key_store_content: Optional[str] = None,
                 status: Optional[str] = None,
                 store_password: Optional[str] = None,
                 trust_store_content: Optional[str] = None):
        if certificate_store_type is not None:
            pulumi.set(__self__, "certificate_store_type", certificate_store_type)
        if key_store_content is not None:
            pulumi.set(__self__, "key_store_content", key_store_content)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if store_password is not None:
            pulumi.set(__self__, "store_password", store_password)
        if trust_store_content is not None:
            pulumi.set(__self__, "trust_store_content", trust_store_content)

    @property
    @pulumi.getter(name="certificateStoreType")
    def certificate_store_type(self) -> Optional[str]:
        return pulumi.get(self, "certificate_store_type")

    @property
    @pulumi.getter(name="keyStoreContent")
    def key_store_content(self) -> Optional[str]:
        return pulumi.get(self, "key_store_content")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storePassword")
    def store_password(self) -> Optional[str]:
        return pulumi.get(self, "store_password")

    @property
    @pulumi.getter(name="trustStoreContent")
    def trust_store_content(self) -> Optional[str]:
        return pulumi.get(self, "trust_store_content")


@pulumi.output_type
class GetUserAssessmentComparisonSummaryResult(dict):
    def __init__(__self__, *,
                 baselines: Optional[Sequence['outputs.GetUserAssessmentComparisonSummaryBaselineResult']] = None,
                 currents: Optional[Sequence['outputs.GetUserAssessmentComparisonSummaryCurrentResult']] = None,
                 status: Optional[str] = None):
        if baselines is not None:
            pulumi.set(__self__, "baselines", baselines)
        if currents is not None:
            pulumi.set(__self__, "currents", currents)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def baselines(self) -> Optional[Sequence['outputs.GetUserAssessmentComparisonSummaryBaselineResult']]:
        return pulumi.get(self, "baselines")

    @property
    @pulumi.getter
    def currents(self) -> Optional[Sequence['outputs.GetUserAssessmentComparisonSummaryCurrentResult']]:
        return pulumi.get(self, "currents")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetUserAssessmentComparisonSummaryBaselineResult(dict):
    def __init__(__self__, *,
                 target_id: Optional[str] = None,
                 user_assessment_id: Optional[str] = None):
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if user_assessment_id is not None:
            pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetUserAssessmentComparisonSummaryCurrentResult(dict):
    def __init__(__self__, *,
                 target_id: Optional[str] = None,
                 user_assessment_id: Optional[str] = None):
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if user_assessment_id is not None:
            pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetUserAssessmentIgnoredTargetResult(dict):
    def __init__(__self__, *,
                 lifecycle_state: Optional[str] = None,
                 target_id: Optional[str] = None,
                 user_assessment_id: Optional[str] = None):
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if user_assessment_id is not None:
            pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetUserAssessmentProfileAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentProfileAnalyticsProfileAggregationResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 items: Optional[Sequence[Any]] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[Any]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetUserAssessmentProfilesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentProfilesProfileResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 composite_limit: Optional[str] = None,
                 connect_time: Optional[str] = None,
                 cpu_per_call: Optional[str] = None,
                 cpu_per_session: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 failed_login_attempts: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 idle_time: Optional[str] = None,
                 inactive_account_time: Optional[str] = None,
                 is_user_created: Optional[bool] = None,
                 logical_reads_per_call: Optional[str] = None,
                 logical_reads_per_session: Optional[str] = None,
                 password_grace_time: Optional[str] = None,
                 password_life_time: Optional[str] = None,
                 password_lock_time: Optional[str] = None,
                 password_reuse_max: Optional[str] = None,
                 password_reuse_time: Optional[str] = None,
                 password_rollover_time: Optional[str] = None,
                 password_verification_function: Optional[str] = None,
                 password_verification_function_details: Optional[str] = None,
                 private_sga: Optional[str] = None,
                 profile_name: Optional[str] = None,
                 sessions_per_user: Optional[str] = None,
                 target_id: Optional[str] = None,
                 user_assessment_id: Optional[str] = None,
                 user_count: Optional[int] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if composite_limit is not None:
            pulumi.set(__self__, "composite_limit", composite_limit)
        if connect_time is not None:
            pulumi.set(__self__, "connect_time", connect_time)
        if cpu_per_call is not None:
            pulumi.set(__self__, "cpu_per_call", cpu_per_call)
        if cpu_per_session is not None:
            pulumi.set(__self__, "cpu_per_session", cpu_per_session)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if failed_login_attempts is not None:
            pulumi.set(__self__, "failed_login_attempts", failed_login_attempts)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if idle_time is not None:
            pulumi.set(__self__, "idle_time", idle_time)
        if inactive_account_time is not None:
            pulumi.set(__self__, "inactive_account_time", inactive_account_time)
        if is_user_created is not None:
            pulumi.set(__self__, "is_user_created", is_user_created)
        if logical_reads_per_call is not None:
            pulumi.set(__self__, "logical_reads_per_call", logical_reads_per_call)
        if logical_reads_per_session is not None:
            pulumi.set(__self__, "logical_reads_per_session", logical_reads_per_session)
        if password_grace_time is not None:
            pulumi.set(__self__, "password_grace_time", password_grace_time)
        if password_life_time is not None:
            pulumi.set(__self__, "password_life_time", password_life_time)
        if password_lock_time is not None:
            pulumi.set(__self__, "password_lock_time", password_lock_time)
        if password_reuse_max is not None:
            pulumi.set(__self__, "password_reuse_max", password_reuse_max)
        if password_reuse_time is not None:
            pulumi.set(__self__, "password_reuse_time", password_reuse_time)
        if password_rollover_time is not None:
            pulumi.set(__self__, "password_rollover_time", password_rollover_time)
        if password_verification_function is not None:
            pulumi.set(__self__, "password_verification_function", password_verification_function)
        if password_verification_function_details is not None:
            pulumi.set(__self__, "password_verification_function_details", password_verification_function_details)
        if private_sga is not None:
            pulumi.set(__self__, "private_sga", private_sga)
        if profile_name is not None:
            pulumi.set(__self__, "profile_name", profile_name)
        if sessions_per_user is not None:
            pulumi.set(__self__, "sessions_per_user", sessions_per_user)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if user_assessment_id is not None:
            pulumi.set(__self__, "user_assessment_id", user_assessment_id)
        if user_count is not None:
            pulumi.set(__self__, "user_count", user_count)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="compositeLimit")
    def composite_limit(self) -> Optional[str]:
        return pulumi.get(self, "composite_limit")

    @property
    @pulumi.getter(name="connectTime")
    def connect_time(self) -> Optional[str]:
        return pulumi.get(self, "connect_time")

    @property
    @pulumi.getter(name="cpuPerCall")
    def cpu_per_call(self) -> Optional[str]:
        return pulumi.get(self, "cpu_per_call")

    @property
    @pulumi.getter(name="cpuPerSession")
    def cpu_per_session(self) -> Optional[str]:
        return pulumi.get(self, "cpu_per_session")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="failedLoginAttempts")
    def failed_login_attempts(self) -> Optional[str]:
        return pulumi.get(self, "failed_login_attempts")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="idleTime")
    def idle_time(self) -> Optional[str]:
        return pulumi.get(self, "idle_time")

    @property
    @pulumi.getter(name="inactiveAccountTime")
    def inactive_account_time(self) -> Optional[str]:
        return pulumi.get(self, "inactive_account_time")

    @property
    @pulumi.getter(name="isUserCreated")
    def is_user_created(self) -> Optional[bool]:
        return pulumi.get(self, "is_user_created")

    @property
    @pulumi.getter(name="logicalReadsPerCall")
    def logical_reads_per_call(self) -> Optional[str]:
        return pulumi.get(self, "logical_reads_per_call")

    @property
    @pulumi.getter(name="logicalReadsPerSession")
    def logical_reads_per_session(self) -> Optional[str]:
        return pulumi.get(self, "logical_reads_per_session")

    @property
    @pulumi.getter(name="passwordGraceTime")
    def password_grace_time(self) -> Optional[str]:
        return pulumi.get(self, "password_grace_time")

    @property
    @pulumi.getter(name="passwordLifeTime")
    def password_life_time(self) -> Optional[str]:
        return pulumi.get(self, "password_life_time")

    @property
    @pulumi.getter(name="passwordLockTime")
    def password_lock_time(self) -> Optional[str]:
        return pulumi.get(self, "password_lock_time")

    @property
    @pulumi.getter(name="passwordReuseMax")
    def password_reuse_max(self) -> Optional[str]:
        return pulumi.get(self, "password_reuse_max")

    @property
    @pulumi.getter(name="passwordReuseTime")
    def password_reuse_time(self) -> Optional[str]:
        return pulumi.get(self, "password_reuse_time")

    @property
    @pulumi.getter(name="passwordRolloverTime")
    def password_rollover_time(self) -> Optional[str]:
        return pulumi.get(self, "password_rollover_time")

    @property
    @pulumi.getter(name="passwordVerificationFunction")
    def password_verification_function(self) -> Optional[str]:
        return pulumi.get(self, "password_verification_function")

    @property
    @pulumi.getter(name="passwordVerificationFunctionDetails")
    def password_verification_function_details(self) -> Optional[str]:
        return pulumi.get(self, "password_verification_function_details")

    @property
    @pulumi.getter(name="privateSga")
    def private_sga(self) -> Optional[str]:
        return pulumi.get(self, "private_sga")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[str]:
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="sessionsPerUser")
    def sessions_per_user(self) -> Optional[str]:
        return pulumi.get(self, "sessions_per_user")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "user_assessment_id")

    @property
    @pulumi.getter(name="userCount")
    def user_count(self) -> Optional[int]:
        return pulumi.get(self, "user_count")


@pulumi.output_type
class GetUserAssessmentUserAnalyticsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentUserAnalyticsUserAggregationResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetUserAssessmentUserAnalyticsUserAggregationItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetUserAssessmentUserAnalyticsUserAggregationItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetUserAssessmentUserAnalyticsUserAggregationItemResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetUserAssessmentUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentUsersUserResult(dict):
    def __init__(__self__, *,
                 account_status: Optional[str] = None,
                 admin_roles: Optional[Sequence[str]] = None,
                 authentication_type: Optional[str] = None,
                 key: Optional[str] = None,
                 target_id: Optional[str] = None,
                 time_last_login: Optional[str] = None,
                 time_password_changed: Optional[str] = None,
                 time_user_created: Optional[str] = None,
                 user_category: Optional[str] = None,
                 user_name: Optional[str] = None,
                 user_profile: Optional[str] = None,
                 user_types: Optional[Sequence[str]] = None):
        if account_status is not None:
            pulumi.set(__self__, "account_status", account_status)
        if admin_roles is not None:
            pulumi.set(__self__, "admin_roles", admin_roles)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_last_login is not None:
            pulumi.set(__self__, "time_last_login", time_last_login)
        if time_password_changed is not None:
            pulumi.set(__self__, "time_password_changed", time_password_changed)
        if time_user_created is not None:
            pulumi.set(__self__, "time_user_created", time_user_created)
        if user_category is not None:
            pulumi.set(__self__, "user_category", user_category)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_profile is not None:
            pulumi.set(__self__, "user_profile", user_profile)
        if user_types is not None:
            pulumi.set(__self__, "user_types", user_types)

    @property
    @pulumi.getter(name="accountStatus")
    def account_status(self) -> Optional[str]:
        return pulumi.get(self, "account_status")

    @property
    @pulumi.getter(name="adminRoles")
    def admin_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "admin_roles")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeLastLogin")
    def time_last_login(self) -> Optional[str]:
        return pulumi.get(self, "time_last_login")

    @property
    @pulumi.getter(name="timePasswordChanged")
    def time_password_changed(self) -> Optional[str]:
        return pulumi.get(self, "time_password_changed")

    @property
    @pulumi.getter(name="timeUserCreated")
    def time_user_created(self) -> Optional[str]:
        return pulumi.get(self, "time_user_created")

    @property
    @pulumi.getter(name="userCategory")
    def user_category(self) -> Optional[str]:
        return pulumi.get(self, "user_category")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userProfile")
    def user_profile(self) -> Optional[str]:
        return pulumi.get(self, "user_profile")

    @property
    @pulumi.getter(name="userTypes")
    def user_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_types")


@pulumi.output_type
class GetUserAssessmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetUserAssessmentsIgnoredTargetResult(dict):
    def __init__(__self__, *,
                 lifecycle_state: Optional[str] = None,
                 target_id: Optional[str] = None,
                 user_assessment_id: Optional[str] = None):
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if user_assessment_id is not None:
            pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "user_assessment_id")


@pulumi.output_type
class GetUserAssessmentsUserAssessmentResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 ignored_assessment_ids: Optional[Sequence[str]] = None,
                 ignored_targets: Optional[Sequence['outputs.GetUserAssessmentsUserAssessmentIgnoredTargetResult']] = None,
                 is_baseline: Optional[bool] = None,
                 is_deviated_from_baseline: Optional[bool] = None,
                 last_compared_baseline_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 schedule: Optional[str] = None,
                 schedule_assessment_id: Optional[str] = None,
                 state: Optional[str] = None,
                 statistics: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 target_id: Optional[str] = None,
                 target_ids: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 time_last_assessed: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 triggered_by: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ignored_assessment_ids is not None:
            pulumi.set(__self__, "ignored_assessment_ids", ignored_assessment_ids)
        if ignored_targets is not None:
            pulumi.set(__self__, "ignored_targets", ignored_targets)
        if is_baseline is not None:
            pulumi.set(__self__, "is_baseline", is_baseline)
        if is_deviated_from_baseline is not None:
            pulumi.set(__self__, "is_deviated_from_baseline", is_deviated_from_baseline)
        if last_compared_baseline_id is not None:
            pulumi.set(__self__, "last_compared_baseline_id", last_compared_baseline_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if schedule_assessment_id is not None:
            pulumi.set(__self__, "schedule_assessment_id", schedule_assessment_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if statistics is not None:
            pulumi.set(__self__, "statistics", statistics)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_ids is not None:
            pulumi.set(__self__, "target_ids", target_ids)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_last_assessed is not None:
            pulumi.set(__self__, "time_last_assessed", time_last_assessed)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if triggered_by is not None:
            pulumi.set(__self__, "triggered_by", triggered_by)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ignoredAssessmentIds")
    def ignored_assessment_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ignored_assessment_ids")

    @property
    @pulumi.getter(name="ignoredTargets")
    def ignored_targets(self) -> Optional[Sequence['outputs.GetUserAssessmentsUserAssessmentIgnoredTargetResult']]:
        return pulumi.get(self, "ignored_targets")

    @property
    @pulumi.getter(name="isBaseline")
    def is_baseline(self) -> Optional[bool]:
        return pulumi.get(self, "is_baseline")

    @property
    @pulumi.getter(name="isDeviatedFromBaseline")
    def is_deviated_from_baseline(self) -> Optional[bool]:
        return pulumi.get(self, "is_deviated_from_baseline")

    @property
    @pulumi.getter(name="lastComparedBaselineId")
    def last_compared_baseline_id(self) -> Optional[str]:
        return pulumi.get(self, "last_compared_baseline_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduleAssessmentId")
    def schedule_assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "schedule_assessment_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def statistics(self) -> Optional[str]:
        return pulumi.get(self, "statistics")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetIds")
    def target_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_ids")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastAssessed")
    def time_last_assessed(self) -> Optional[str]:
        return pulumi.get(self, "time_last_assessed")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="triggeredBy")
    def triggered_by(self) -> Optional[str]:
        return pulumi.get(self, "triggered_by")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserAssessmentsUserAssessmentIgnoredTargetResult(dict):
    def __init__(__self__, *,
                 lifecycle_state: Optional[str] = None,
                 target_id: Optional[str] = None,
                 user_assessment_id: Optional[str] = None):
        if lifecycle_state is not None:
            pulumi.set(__self__, "lifecycle_state", lifecycle_state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if user_assessment_id is not None:
            pulumi.set(__self__, "user_assessment_id", user_assessment_id)

    @property
    @pulumi.getter(name="lifecycleState")
    def lifecycle_state(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="userAssessmentId")
    def user_assessment_id(self) -> Optional[str]:
        return pulumi.get(self, "user_assessment_id")


