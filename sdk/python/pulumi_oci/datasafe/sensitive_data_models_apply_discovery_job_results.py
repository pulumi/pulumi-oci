# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SensitiveDataModelsApplyDiscoveryJobResultsArgs', 'SensitiveDataModelsApplyDiscoveryJobResults']

@pulumi.input_type
class SensitiveDataModelsApplyDiscoveryJobResultsArgs:
    def __init__(__self__, *,
                 discovery_job_id: pulumi.Input[str],
                 sensitive_data_model_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a SensitiveDataModelsApplyDiscoveryJobResults resource.
        """
        SensitiveDataModelsApplyDiscoveryJobResultsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            discovery_job_id=discovery_job_id,
            sensitive_data_model_id=sensitive_data_model_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             discovery_job_id: pulumi.Input[str],
             sensitive_data_model_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("discovery_job_id", discovery_job_id)
        _setter("sensitive_data_model_id", sensitive_data_model_id)

    @property
    @pulumi.getter(name="discoveryJobId")
    def discovery_job_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "discovery_job_id")

    @discovery_job_id.setter
    def discovery_job_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "discovery_job_id", value)

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sensitive_data_model_id")

    @sensitive_data_model_id.setter
    def sensitive_data_model_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sensitive_data_model_id", value)


@pulumi.input_type
class _SensitiveDataModelsApplyDiscoveryJobResultsState:
    def __init__(__self__, *,
                 discovery_job_id: Optional[pulumi.Input[str]] = None,
                 sensitive_data_model_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SensitiveDataModelsApplyDiscoveryJobResults resources.
        """
        _SensitiveDataModelsApplyDiscoveryJobResultsState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            discovery_job_id=discovery_job_id,
            sensitive_data_model_id=sensitive_data_model_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             discovery_job_id: Optional[pulumi.Input[str]] = None,
             sensitive_data_model_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if discovery_job_id is not None:
            _setter("discovery_job_id", discovery_job_id)
        if sensitive_data_model_id is not None:
            _setter("sensitive_data_model_id", sensitive_data_model_id)

    @property
    @pulumi.getter(name="discoveryJobId")
    def discovery_job_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "discovery_job_id")

    @discovery_job_id.setter
    def discovery_job_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "discovery_job_id", value)

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sensitive_data_model_id")

    @sensitive_data_model_id.setter
    def sensitive_data_model_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sensitive_data_model_id", value)


class SensitiveDataModelsApplyDiscoveryJobResults(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 discovery_job_id: Optional[pulumi.Input[str]] = None,
                 sensitive_data_model_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SensitiveDataModelsApplyDiscoveryJobResults resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SensitiveDataModelsApplyDiscoveryJobResultsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SensitiveDataModelsApplyDiscoveryJobResults resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SensitiveDataModelsApplyDiscoveryJobResultsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SensitiveDataModelsApplyDiscoveryJobResultsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            SensitiveDataModelsApplyDiscoveryJobResultsArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 discovery_job_id: Optional[pulumi.Input[str]] = None,
                 sensitive_data_model_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SensitiveDataModelsApplyDiscoveryJobResultsArgs.__new__(SensitiveDataModelsApplyDiscoveryJobResultsArgs)

            if discovery_job_id is None and not opts.urn:
                raise TypeError("Missing required property 'discovery_job_id'")
            __props__.__dict__["discovery_job_id"] = discovery_job_id
            if sensitive_data_model_id is None and not opts.urn:
                raise TypeError("Missing required property 'sensitive_data_model_id'")
            __props__.__dict__["sensitive_data_model_id"] = sensitive_data_model_id
        super(SensitiveDataModelsApplyDiscoveryJobResults, __self__).__init__(
            'oci:DataSafe/sensitiveDataModelsApplyDiscoveryJobResults:SensitiveDataModelsApplyDiscoveryJobResults',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            discovery_job_id: Optional[pulumi.Input[str]] = None,
            sensitive_data_model_id: Optional[pulumi.Input[str]] = None) -> 'SensitiveDataModelsApplyDiscoveryJobResults':
        """
        Get an existing SensitiveDataModelsApplyDiscoveryJobResults resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SensitiveDataModelsApplyDiscoveryJobResultsState.__new__(_SensitiveDataModelsApplyDiscoveryJobResultsState)

        __props__.__dict__["discovery_job_id"] = discovery_job_id
        __props__.__dict__["sensitive_data_model_id"] = sensitive_data_model_id
        return SensitiveDataModelsApplyDiscoveryJobResults(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="discoveryJobId")
    def discovery_job_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "discovery_job_id")

    @property
    @pulumi.getter(name="sensitiveDataModelId")
    def sensitive_data_model_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sensitive_data_model_id")

