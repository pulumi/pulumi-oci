# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ModelArtifactImportArgs', 'ModelArtifactImport']

@pulumi.input_type
class ModelArtifactImportArgs:
    def __init__(__self__, *,
                 artifact_source_type: pulumi.Input[str],
                 destination_bucket: pulumi.Input[str],
                 destination_object_name: pulumi.Input[str],
                 destination_region: pulumi.Input[str],
                 model_id: pulumi.Input[str],
                 namespace: pulumi.Input[str]):
        """
        The set of arguments for constructing a ModelArtifactImport resource.
        """
        pulumi.set(__self__, "artifact_source_type", artifact_source_type)
        pulumi.set(__self__, "destination_bucket", destination_bucket)
        pulumi.set(__self__, "destination_object_name", destination_object_name)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="artifactSourceType")
    def artifact_source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "artifact_source_type")

    @artifact_source_type.setter
    def artifact_source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "artifact_source_type", value)

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_bucket")

    @destination_bucket.setter
    def destination_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_bucket", value)

    @property
    @pulumi.getter(name="destinationObjectName")
    def destination_object_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_object_name")

    @destination_object_name.setter
    def destination_object_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_object_name", value)

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_region", value)

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_id", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class _ModelArtifactImportState:
    def __init__(__self__, *,
                 artifact_source_type: Optional[pulumi.Input[str]] = None,
                 destination_bucket: Optional[pulumi.Input[str]] = None,
                 destination_object_name: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 model_id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ModelArtifactImport resources.
        """
        if artifact_source_type is not None:
            pulumi.set(__self__, "artifact_source_type", artifact_source_type)
        if destination_bucket is not None:
            pulumi.set(__self__, "destination_bucket", destination_bucket)
        if destination_object_name is not None:
            pulumi.set(__self__, "destination_object_name", destination_object_name)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="artifactSourceType")
    def artifact_source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "artifact_source_type")

    @artifact_source_type.setter
    def artifact_source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "artifact_source_type", value)

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_bucket")

    @destination_bucket.setter
    def destination_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_bucket", value)

    @property
    @pulumi.getter(name="destinationObjectName")
    def destination_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_object_name")

    @destination_object_name.setter
    def destination_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_object_name", value)

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_region", value)

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


class ModelArtifactImport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 artifact_source_type: Optional[pulumi.Input[str]] = None,
                 destination_bucket: Optional[pulumi.Input[str]] = None,
                 destination_object_name: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 model_id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ModelArtifactImport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModelArtifactImportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ModelArtifactImport resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ModelArtifactImportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModelArtifactImportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 artifact_source_type: Optional[pulumi.Input[str]] = None,
                 destination_bucket: Optional[pulumi.Input[str]] = None,
                 destination_object_name: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 model_id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModelArtifactImportArgs.__new__(ModelArtifactImportArgs)

            if artifact_source_type is None and not opts.urn:
                raise TypeError("Missing required property 'artifact_source_type'")
            __props__.__dict__["artifact_source_type"] = artifact_source_type
            if destination_bucket is None and not opts.urn:
                raise TypeError("Missing required property 'destination_bucket'")
            __props__.__dict__["destination_bucket"] = destination_bucket
            if destination_object_name is None and not opts.urn:
                raise TypeError("Missing required property 'destination_object_name'")
            __props__.__dict__["destination_object_name"] = destination_object_name
            if destination_region is None and not opts.urn:
                raise TypeError("Missing required property 'destination_region'")
            __props__.__dict__["destination_region"] = destination_region
            if model_id is None and not opts.urn:
                raise TypeError("Missing required property 'model_id'")
            __props__.__dict__["model_id"] = model_id
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
        super(ModelArtifactImport, __self__).__init__(
            'oci:DataScience/modelArtifactImport:ModelArtifactImport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            artifact_source_type: Optional[pulumi.Input[str]] = None,
            destination_bucket: Optional[pulumi.Input[str]] = None,
            destination_object_name: Optional[pulumi.Input[str]] = None,
            destination_region: Optional[pulumi.Input[str]] = None,
            model_id: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None) -> 'ModelArtifactImport':
        """
        Get an existing ModelArtifactImport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModelArtifactImportState.__new__(_ModelArtifactImportState)

        __props__.__dict__["artifact_source_type"] = artifact_source_type
        __props__.__dict__["destination_bucket"] = destination_bucket
        __props__.__dict__["destination_object_name"] = destination_object_name
        __props__.__dict__["destination_region"] = destination_region
        __props__.__dict__["model_id"] = model_id
        __props__.__dict__["namespace"] = namespace
        return ModelArtifactImport(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="artifactSourceType")
    def artifact_source_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "artifact_source_type")

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination_bucket")

    @property
    @pulumi.getter(name="destinationObjectName")
    def destination_object_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination_object_name")

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination_region")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        return pulumi.get(self, "namespace")

