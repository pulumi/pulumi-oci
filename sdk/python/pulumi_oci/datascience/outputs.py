# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'JobJobConfigurationDetails',
    'JobJobEnvironmentConfigurationDetails',
    'JobJobInfrastructureConfigurationDetails',
    'JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails',
    'JobJobLogConfigurationDetails',
    'JobJobStorageMountConfigurationDetailsList',
    'JobRunJobConfigurationOverrideDetails',
    'JobRunJobEnvironmentConfigurationOverrideDetails',
    'JobRunJobInfrastructureConfigurationDetail',
    'JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail',
    'JobRunJobLogConfigurationOverrideDetails',
    'JobRunJobStorageMountConfigurationDetailsList',
    'JobRunLogDetail',
    'MlApplicationImplementationApplicationComponent',
    'MlApplicationImplementationConfigurationSchema',
    'MlApplicationImplementationLogging',
    'MlApplicationImplementationLoggingAggregatedInstanceViewLog',
    'MlApplicationImplementationLoggingImplementationLog',
    'MlApplicationImplementationLoggingTriggerLog',
    'MlApplicationImplementationMlApplicationPackageArgument',
    'MlApplicationImplementationMlApplicationPackageArgumentArgument',
    'MlApplicationInstanceAuthConfiguration',
    'MlApplicationInstanceConfiguration',
    'MlApplicationInstancePredictionEndpointDetail',
    'MlApplicationInstancePredictionEndpointDetailPredictionUri',
    'ModelBackupOperationDetail',
    'ModelBackupSetting',
    'ModelCustomMetadataList',
    'ModelDefinedMetadataList',
    'ModelDeploymentCategoryLogDetails',
    'ModelDeploymentCategoryLogDetailsAccess',
    'ModelDeploymentCategoryLogDetailsPredict',
    'ModelDeploymentModelDeploymentConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicy',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRule',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfiguration',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration',
    'ModelDeploymentModelDeploymentSystemData',
    'ModelRetentionOperationDetail',
    'ModelRetentionSetting',
    'NotebookSessionNotebookSessionConfigDetails',
    'NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails',
    'NotebookSessionNotebookSessionConfigurationDetails',
    'NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails',
    'NotebookSessionNotebookSessionRuntimeConfigDetails',
    'NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails',
    'NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection',
    'NotebookSessionNotebookSessionStorageMountConfigurationDetailsList',
    'PipelineConfigurationDetails',
    'PipelineInfrastructureConfigurationDetails',
    'PipelineInfrastructureConfigurationDetailsShapeConfigDetails',
    'PipelineLogConfigurationDetails',
    'PipelineRunConfigurationDetail',
    'PipelineRunConfigurationOverrideDetails',
    'PipelineRunLogConfigurationOverrideDetails',
    'PipelineRunLogDetail',
    'PipelineRunStepOverrideDetail',
    'PipelineRunStepOverrideDetailStepConfigurationDetails',
    'PipelineRunStepOverrideDetailStepContainerConfigurationDetails',
    'PipelineRunStepOverrideDetailStepDataflowConfigurationDetails',
    'PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails',
    'PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails',
    'PipelineRunStepRun',
    'PipelineStepArtifact',
    'PipelineStepDetail',
    'PipelineStepDetailStepConfigurationDetails',
    'PipelineStepDetailStepContainerConfigurationDetails',
    'PipelineStepDetailStepDataflowConfigurationDetails',
    'PipelineStepDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails',
    'PipelineStepDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails',
    'PipelineStepDetailStepInfrastructureConfigurationDetails',
    'PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails',
    'PipelineStepDetailStepStorageMountConfigurationDetailsList',
    'PipelineStorageMountConfigurationDetailsList',
    'ScheduleAction',
    'ScheduleActionActionDetails',
    'ScheduleActionActionDetailsCreateJobRunDetails',
    'ScheduleActionActionDetailsCreateJobRunDetailsJobConfigurationOverrideDetails',
    'ScheduleActionActionDetailsCreateJobRunDetailsJobEnvironmentConfigurationOverrideDetails',
    'ScheduleActionActionDetailsCreateJobRunDetailsJobLogConfigurationOverrideDetails',
    'ScheduleActionActionDetailsCreatePipelineRunDetails',
    'ScheduleActionActionDetailsCreatePipelineRunDetailsConfigurationOverrideDetails',
    'ScheduleActionActionDetailsCreatePipelineRunDetailsLogConfigurationOverrideDetails',
    'ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetail',
    'ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepConfigurationDetails',
    'ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepContainerConfigurationDetails',
    'ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetails',
    'ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetailsParameter',
    'ScheduleLogDetails',
    'ScheduleTrigger',
    'GetContainersContainerResult',
    'GetContainersContainerTagConfigurationListResult',
    'GetContainersContainerWorkloadConfigurationDetailsListResult',
    'GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfigurationResult',
    'GetContainersFilterResult',
    'GetFastLaunchJobConfigsFastLaunchJobConfigResult',
    'GetFastLaunchJobConfigsFilterResult',
    'GetJobJobConfigurationDetailResult',
    'GetJobJobEnvironmentConfigurationDetailResult',
    'GetJobJobInfrastructureConfigurationDetailResult',
    'GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobJobLogConfigurationDetailResult',
    'GetJobJobStorageMountConfigurationDetailsListResult',
    'GetJobRunJobConfigurationOverrideDetailResult',
    'GetJobRunJobEnvironmentConfigurationOverrideDetailResult',
    'GetJobRunJobInfrastructureConfigurationDetailResult',
    'GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobRunJobLogConfigurationOverrideDetailResult',
    'GetJobRunJobStorageMountConfigurationDetailsListResult',
    'GetJobRunLogDetailResult',
    'GetJobRunsFilterResult',
    'GetJobRunsJobRunResult',
    'GetJobRunsJobRunJobConfigurationOverrideDetailResult',
    'GetJobRunsJobRunJobEnvironmentConfigurationOverrideDetailResult',
    'GetJobRunsJobRunJobInfrastructureConfigurationDetailResult',
    'GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobRunsJobRunJobLogConfigurationOverrideDetailResult',
    'GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult',
    'GetJobRunsJobRunLogDetailResult',
    'GetJobShapesFilterResult',
    'GetJobShapesJobShapeResult',
    'GetJobsFilterResult',
    'GetJobsJobResult',
    'GetJobsJobJobConfigurationDetailResult',
    'GetJobsJobJobEnvironmentConfigurationDetailResult',
    'GetJobsJobJobInfrastructureConfigurationDetailResult',
    'GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobsJobJobLogConfigurationDetailResult',
    'GetJobsJobJobStorageMountConfigurationDetailsListResult',
    'GetMlApplicationImplementationApplicationComponentResult',
    'GetMlApplicationImplementationConfigurationSchemaResult',
    'GetMlApplicationImplementationLoggingResult',
    'GetMlApplicationImplementationLoggingAggregatedInstanceViewLogResult',
    'GetMlApplicationImplementationLoggingImplementationLogResult',
    'GetMlApplicationImplementationLoggingTriggerLogResult',
    'GetMlApplicationImplementationMlApplicationPackageArgumentResult',
    'GetMlApplicationImplementationMlApplicationPackageArgumentArgumentResult',
    'GetMlApplicationImplementationsFilterResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionItemResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionItemApplicationComponentResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionItemConfigurationSchemaResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingAggregatedInstanceViewLogResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingImplementationLogResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingTriggerLogResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentResult',
    'GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentArgumentResult',
    'GetMlApplicationInstanceAuthConfigurationResult',
    'GetMlApplicationInstanceConfigurationResult',
    'GetMlApplicationInstancePredictionEndpointDetailResult',
    'GetMlApplicationInstancePredictionEndpointDetailPredictionUriResult',
    'GetMlApplicationInstancesFilterResult',
    'GetMlApplicationInstancesMlApplicationInstanceCollectionResult',
    'GetMlApplicationInstancesMlApplicationInstanceCollectionItemResult',
    'GetMlApplicationInstancesMlApplicationInstanceCollectionItemAuthConfigurationResult',
    'GetMlApplicationInstancesMlApplicationInstanceCollectionItemConfigurationResult',
    'GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailResult',
    'GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailPredictionUriResult',
    'GetMlApplicationsFilterResult',
    'GetMlApplicationsMlApplicationCollectionResult',
    'GetMlApplicationsMlApplicationCollectionItemResult',
    'GetModelBackupOperationDetailResult',
    'GetModelBackupSettingResult',
    'GetModelCustomMetadataListResult',
    'GetModelDefinedMetadataListResult',
    'GetModelDeploymentCategoryLogDetailResult',
    'GetModelDeploymentCategoryLogDetailAccessResult',
    'GetModelDeploymentCategoryLogDetailPredictResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationResult',
    'GetModelDeploymentModelDeploymentSystemDataResult',
    'GetModelDeploymentShapesFilterResult',
    'GetModelDeploymentShapesModelDeploymentShapeResult',
    'GetModelDeploymentsFilterResult',
    'GetModelDeploymentsModelDeploymentResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentSystemDataResult',
    'GetModelRetentionOperationDetailResult',
    'GetModelRetentionSettingResult',
    'GetModelVersionSetsFilterResult',
    'GetModelVersionSetsModelVersionSetResult',
    'GetModelsFilterResult',
    'GetModelsModelResult',
    'GetModelsModelBackupOperationDetailResult',
    'GetModelsModelBackupSettingResult',
    'GetModelsModelCustomMetadataListResult',
    'GetModelsModelDefinedMetadataListResult',
    'GetModelsModelRetentionOperationDetailResult',
    'GetModelsModelRetentionSettingResult',
    'GetNotebookSessionNotebookSessionConfigDetailResult',
    'GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionNotebookSessionConfigurationDetailResult',
    'GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionNotebookSessionRuntimeConfigDetailResult',
    'GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult',
    'GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult',
    'GetNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult',
    'GetNotebookSessionShapesFilterResult',
    'GetNotebookSessionShapesNotebookSessionShapeResult',
    'GetNotebookSessionsFilterResult',
    'GetNotebookSessionsNotebookSessionResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult',
    'GetPipelineConfigurationDetailResult',
    'GetPipelineInfrastructureConfigurationDetailResult',
    'GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelineLogConfigurationDetailResult',
    'GetPipelineRunConfigurationDetailResult',
    'GetPipelineRunConfigurationOverrideDetailResult',
    'GetPipelineRunLogConfigurationOverrideDetailResult',
    'GetPipelineRunLogDetailResult',
    'GetPipelineRunStepOverrideDetailResult',
    'GetPipelineRunStepOverrideDetailStepConfigurationDetailResult',
    'GetPipelineRunStepOverrideDetailStepContainerConfigurationDetailResult',
    'GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailResult',
    'GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult',
    'GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult',
    'GetPipelineRunStepRunResult',
    'GetPipelineRunsFilterResult',
    'GetPipelineRunsPipelineRunResult',
    'GetPipelineRunsPipelineRunConfigurationDetailResult',
    'GetPipelineRunsPipelineRunConfigurationOverrideDetailResult',
    'GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult',
    'GetPipelineRunsPipelineRunLogDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailStepContainerConfigurationDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult',
    'GetPipelineRunsPipelineRunStepRunResult',
    'GetPipelineStepArtifactResult',
    'GetPipelineStepDetailResult',
    'GetPipelineStepDetailStepConfigurationDetailResult',
    'GetPipelineStepDetailStepContainerConfigurationDetailResult',
    'GetPipelineStepDetailStepDataflowConfigurationDetailResult',
    'GetPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult',
    'GetPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult',
    'GetPipelineStepDetailStepInfrastructureConfigurationDetailResult',
    'GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelineStepDetailStepStorageMountConfigurationDetailsListResult',
    'GetPipelineStorageMountConfigurationDetailsListResult',
    'GetPipelinesFilterResult',
    'GetPipelinesPipelineResult',
    'GetPipelinesPipelineConfigurationDetailResult',
    'GetPipelinesPipelineInfrastructureConfigurationDetailResult',
    'GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelinesPipelineLogConfigurationDetailResult',
    'GetPipelinesPipelineStepArtifactResult',
    'GetPipelinesPipelineStepDetailResult',
    'GetPipelinesPipelineStepDetailStepConfigurationDetailResult',
    'GetPipelinesPipelineStepDetailStepContainerConfigurationDetailResult',
    'GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailResult',
    'GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult',
    'GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult',
    'GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult',
    'GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelinesPipelineStepDetailStepStorageMountConfigurationDetailsListResult',
    'GetPipelinesPipelineStorageMountConfigurationDetailsListResult',
    'GetPrivateEndpointsDataSciencePrivateEndpointResult',
    'GetPrivateEndpointsFilterResult',
    'GetProjectsFilterResult',
    'GetProjectsProjectResult',
    'GetScheduleActionResult',
    'GetScheduleActionActionDetailResult',
    'GetScheduleActionActionDetailCreateJobRunDetailResult',
    'GetScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailResult',
    'GetScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailResult',
    'GetScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailResult',
    'GetScheduleActionActionDetailCreatePipelineRunDetailResult',
    'GetScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailResult',
    'GetScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailResult',
    'GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailResult',
    'GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailResult',
    'GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailResult',
    'GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailResult',
    'GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterResult',
    'GetScheduleLogDetailResult',
    'GetScheduleTriggerResult',
    'GetSchedulesFilterResult',
    'GetSchedulesScheduleResult',
    'GetSchedulesScheduleActionResult',
    'GetSchedulesScheduleActionActionDetailResult',
    'GetSchedulesScheduleActionActionDetailCreateJobRunDetailResult',
    'GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailResult',
    'GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailResult',
    'GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailResult',
    'GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailResult',
    'GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailResult',
    'GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailResult',
    'GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailResult',
    'GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailResult',
    'GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailResult',
    'GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailResult',
    'GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterResult',
    'GetSchedulesScheduleLogDetailResult',
    'GetSchedulesScheduleTriggerResult',
]

@pulumi.output_type
class JobJobConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobType":
            suggest = "job_type"
        elif key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_type: builtins.str,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None):
        """
        :param builtins.str job_type: The type of job.
        :param builtins.str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for the job.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        pulumi.set(__self__, "job_type", job_type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> builtins.str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class JobJobEnvironmentConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobEnvironmentType":
            suggest = "job_environment_type"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "imageSignatureId":
            suggest = "image_signature_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobEnvironmentConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobEnvironmentConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobEnvironmentConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: builtins.str,
                 job_environment_type: builtins.str,
                 cmds: Optional[Sequence[builtins.str]] = None,
                 entrypoints: Optional[Sequence[builtins.str]] = None,
                 image_digest: Optional[builtins.str] = None,
                 image_signature_id: Optional[builtins.str] = None):
        """
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str job_environment_type: The environment configuration type used for job runtime.
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "job_environment_type", job_environment_type)
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_signature_id is not None:
            pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="jobEnvironmentType")
    def job_environment_type(self) -> builtins.str:
        """
        The environment configuration type used for job runtime.
        """
        return pulumi.get(self, "job_environment_type")

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[builtins.str]]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[builtins.str]]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[builtins.str]:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> Optional[builtins.str]:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class JobJobInfrastructureConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "jobInfrastructureType":
            suggest = "job_infrastructure_type"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "jobShapeConfigDetails":
            suggest = "job_shape_config_details"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobInfrastructureConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobInfrastructureConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobInfrastructureConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 job_infrastructure_type: builtins.str,
                 shape_name: builtins.str,
                 job_shape_config_details: Optional['outputs.JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails'] = None,
                 subnet_id: Optional[builtins.str] = None):
        """
        :param builtins.int block_storage_size_in_gbs: (Updatable) The size of the block storage volume to attach to the instance running the job
        :param builtins.str job_infrastructure_type: (Updatable) The infrastructure type used for job run.
        :param builtins.str shape_name: (Updatable) The shape used to launch the job run instances.
        :param 'JobJobInfrastructureConfigurationDetailsJobShapeConfigDetailsArgs' job_shape_config_details: (Updatable) Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str subnet_id: (Updatable) The subnet to create a secondary vnic in to attach to the instance running the job
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        pulumi.set(__self__, "shape_name", shape_name)
        if job_shape_config_details is not None:
            pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        (Updatable) The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> builtins.str:
        """
        (Updatable) The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        (Updatable) The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional['outputs.JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails']:
        """
        (Updatable) Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: (Updatable) The total amount of memory available to the job run instance, in gigabytes.
        :param builtins.float ocpus: (Updatable) The total number of OCPUs available to the job run instance.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        (Updatable) The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        (Updatable) The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class JobJobLogConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobLogConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobLogConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobLogConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[builtins.bool] = None,
                 enable_logging: Optional[builtins.bool] = None,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param builtins.bool enable_logging: If customer logging is enabled for job runs.
        :param builtins.str log_group_id: The log group id for where log objects are for job runs.
        :param builtins.str log_id: The log id the job run will push logs too.
        """
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[builtins.bool]:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[builtins.bool]:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class JobJobStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_directory_name: builtins.str,
                 storage_type: builtins.str,
                 bucket: Optional[builtins.str] = None,
                 destination_path: Optional[builtins.str] = None,
                 export_id: Optional[builtins.str] = None,
                 mount_target_id: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 prefix: Optional[builtins.str] = None):
        """
        :param builtins.str destination_directory_name: (Updatable) The local directory name to be mounted
        :param builtins.str storage_type: (Updatable) The type of storage.
        :param builtins.str bucket: (Updatable) The object storage bucket
        :param builtins.str destination_path: (Updatable) The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: (Updatable) OCID of the export
        :param builtins.str mount_target_id: (Updatable) OCID of the mount target
        :param builtins.str namespace: (Updatable) The object storage namespace
        :param builtins.str prefix: (Updatable) Prefix in the bucket to mount
        """
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "storage_type", storage_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        (Updatable) The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        (Updatable) The type of storage.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        (Updatable) The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[builtins.str]:
        """
        (Updatable) The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        (Updatable) The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        (Updatable) Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class JobRunJobConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobType":
            suggest = "job_type"
        elif key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_type: builtins.str,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None):
        """
        :param builtins.str job_type: The type of job.
        :param builtins.str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for the job.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        pulumi.set(__self__, "job_type", job_type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> builtins.str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class JobRunJobEnvironmentConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobEnvironmentType":
            suggest = "job_environment_type"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "imageSignatureId":
            suggest = "image_signature_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobEnvironmentConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobEnvironmentConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobEnvironmentConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: builtins.str,
                 job_environment_type: builtins.str,
                 cmds: Optional[Sequence[builtins.str]] = None,
                 entrypoints: Optional[Sequence[builtins.str]] = None,
                 image_digest: Optional[builtins.str] = None,
                 image_signature_id: Optional[builtins.str] = None):
        """
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str job_environment_type: The environment configuration type used for job runtime.
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "job_environment_type", job_environment_type)
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_signature_id is not None:
            pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="jobEnvironmentType")
    def job_environment_type(self) -> builtins.str:
        """
        The environment configuration type used for job runtime.
        """
        return pulumi.get(self, "job_environment_type")

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[builtins.str]]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[builtins.str]]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[builtins.str]:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> Optional[builtins.str]:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class JobRunJobInfrastructureConfigurationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "jobInfrastructureType":
            suggest = "job_infrastructure_type"
        elif key == "jobShapeConfigDetails":
            suggest = "job_shape_config_details"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobInfrastructureConfigurationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobInfrastructureConfigurationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobInfrastructureConfigurationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[builtins.int] = None,
                 job_infrastructure_type: Optional[builtins.str] = None,
                 job_shape_config_details: Optional[Sequence['outputs.JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail']] = None,
                 shape_name: Optional[builtins.str] = None,
                 subnet_id: Optional[builtins.str] = None):
        """
        :param builtins.int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param builtins.str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str shape_name: The shape used to launch the job run instances.
        :param builtins.str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if job_infrastructure_type is not None:
            pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        if job_shape_config_details is not None:
            pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> Optional[builtins.str]:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional[Sequence['outputs.JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail']]:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[builtins.str]:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the job run instance.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class JobRunJobLogConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobLogConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobLogConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobLogConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[builtins.bool] = None,
                 enable_logging: Optional[builtins.bool] = None,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param builtins.bool enable_logging: If customer logging is enabled for job runs.
        :param builtins.str log_group_id: The log group id for where log objects are for job runs.
        :param builtins.str log_id: The log id the job run will push logs too.
        """
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[builtins.bool]:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[builtins.bool]:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class JobRunJobStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: Optional[builtins.str] = None,
                 destination_directory_name: Optional[builtins.str] = None,
                 destination_path: Optional[builtins.str] = None,
                 export_id: Optional[builtins.str] = None,
                 mount_target_id: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 prefix: Optional[builtins.str] = None,
                 storage_type: Optional[builtins.str] = None):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_directory_name is not None:
            pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> Optional[builtins.str]:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[builtins.str]:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[builtins.str]:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[builtins.str]:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[builtins.str]:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class JobRunLogDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunLogDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunLogDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunLogDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.str log_group_id: The log group id for where log objects will be for job runs.
        :param builtins.str log_id: The log id of the log object the job run logs will be shipped to.
        """
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        The log group id for where log objects will be for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        The log id of the log object the job run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class MlApplicationImplementationApplicationComponent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationId":
            suggest = "application_id"
        elif key == "componentName":
            suggest = "component_name"
        elif key == "jobId":
            suggest = "job_id"
        elif key == "modelId":
            suggest = "model_id"
        elif key == "pipelineId":
            suggest = "pipeline_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationImplementationApplicationComponent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationImplementationApplicationComponent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationImplementationApplicationComponent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_id: Optional[builtins.str] = None,
                 component_name: Optional[builtins.str] = None,
                 id: Optional[builtins.str] = None,
                 job_id: Optional[builtins.str] = None,
                 model_id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 pipeline_id: Optional[builtins.str] = None,
                 resource_type: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str application_id: OCID of Data Flow Application
        :param builtins.str component_name: Name of application component
        :param builtins.str id: The OCID of the MlApplicationImplementation. Unique identifier that is immutable after creation.
        :param builtins.str job_id: OCID of Data Science Job
        :param builtins.str model_id: OCID of Data Science Model
        :param builtins.str name: ML Application Implementation name which is unique for given ML Application.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param builtins.str pipeline_id: OCID of Data Science Pipeline
        :param builtins.str resource_type: Type of the resource
        :param builtins.str type: type of the argument
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[builtins.str]:
        """
        OCID of Data Flow Application
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[builtins.str]:
        """
        Name of application component
        """
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The OCID of the MlApplicationImplementation. Unique identifier that is immutable after creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[builtins.str]:
        """
        OCID of Data Science Job
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[builtins.str]:
        """
        OCID of Data Science Model
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        ML Application Implementation name which is unique for given ML Application.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[builtins.str]:
        """
        OCID of Data Science Pipeline
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[builtins.str]:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        type of the argument
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MlApplicationImplementationConfigurationSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"
        elif key == "isMandatory":
            suggest = "is_mandatory"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "sampleValue":
            suggest = "sample_value"
        elif key == "validationRegexp":
            suggest = "validation_regexp"
        elif key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationImplementationConfigurationSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationImplementationConfigurationSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationImplementationConfigurationSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 is_mandatory: Optional[builtins.bool] = None,
                 key_name: Optional[builtins.str] = None,
                 sample_value: Optional[builtins.str] = None,
                 validation_regexp: Optional[builtins.str] = None,
                 value_type: Optional[builtins.str] = None):
        """
        :param builtins.str default_value: The default value for the optional configuration property (it must not be specified for mandatory configuration properties)
        :param builtins.str description: short description of the argument
        :param builtins.bool is_mandatory: argument is mandatory or not
        :param builtins.str key_name: Name of key (parameter name)
        :param builtins.str sample_value: Sample property value (it must match validationRegexp if it is specified)
        :param builtins.str validation_regexp: A regular expression will be used for the validation of property value.
        :param builtins.str value_type: Type of value
        """
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_mandatory is not None:
            pulumi.set(__self__, "is_mandatory", is_mandatory)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if sample_value is not None:
            pulumi.set(__self__, "sample_value", sample_value)
        if validation_regexp is not None:
            pulumi.set(__self__, "validation_regexp", validation_regexp)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[builtins.str]:
        """
        The default value for the optional configuration property (it must not be specified for mandatory configuration properties)
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        short description of the argument
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isMandatory")
    def is_mandatory(self) -> Optional[builtins.bool]:
        """
        argument is mandatory or not
        """
        return pulumi.get(self, "is_mandatory")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[builtins.str]:
        """
        Name of key (parameter name)
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="sampleValue")
    def sample_value(self) -> Optional[builtins.str]:
        """
        Sample property value (it must match validationRegexp if it is specified)
        """
        return pulumi.get(self, "sample_value")

    @property
    @pulumi.getter(name="validationRegexp")
    def validation_regexp(self) -> Optional[builtins.str]:
        """
        A regular expression will be used for the validation of property value.
        """
        return pulumi.get(self, "validation_regexp")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[builtins.str]:
        """
        Type of value
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class MlApplicationImplementationLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aggregatedInstanceViewLog":
            suggest = "aggregated_instance_view_log"
        elif key == "implementationLog":
            suggest = "implementation_log"
        elif key == "triggerLog":
            suggest = "trigger_log"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationImplementationLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationImplementationLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationImplementationLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregated_instance_view_log: Optional['outputs.MlApplicationImplementationLoggingAggregatedInstanceViewLog'] = None,
                 implementation_log: Optional['outputs.MlApplicationImplementationLoggingImplementationLog'] = None,
                 trigger_log: Optional['outputs.MlApplicationImplementationLoggingTriggerLog'] = None):
        """
        :param 'MlApplicationImplementationLoggingAggregatedInstanceViewLogArgs' aggregated_instance_view_log: (Updatable) Log configuration details for particular areas of ML Application Implementation.
        :param 'MlApplicationImplementationLoggingImplementationLogArgs' implementation_log: (Updatable) Log configuration details for particular areas of ML Application Implementation.
        :param 'MlApplicationImplementationLoggingTriggerLogArgs' trigger_log: (Updatable) Log configuration details for particular areas of ML Application Implementation.
        """
        if aggregated_instance_view_log is not None:
            pulumi.set(__self__, "aggregated_instance_view_log", aggregated_instance_view_log)
        if implementation_log is not None:
            pulumi.set(__self__, "implementation_log", implementation_log)
        if trigger_log is not None:
            pulumi.set(__self__, "trigger_log", trigger_log)

    @property
    @pulumi.getter(name="aggregatedInstanceViewLog")
    def aggregated_instance_view_log(self) -> Optional['outputs.MlApplicationImplementationLoggingAggregatedInstanceViewLog']:
        """
        (Updatable) Log configuration details for particular areas of ML Application Implementation.
        """
        return pulumi.get(self, "aggregated_instance_view_log")

    @property
    @pulumi.getter(name="implementationLog")
    def implementation_log(self) -> Optional['outputs.MlApplicationImplementationLoggingImplementationLog']:
        """
        (Updatable) Log configuration details for particular areas of ML Application Implementation.
        """
        return pulumi.get(self, "implementation_log")

    @property
    @pulumi.getter(name="triggerLog")
    def trigger_log(self) -> Optional['outputs.MlApplicationImplementationLoggingTriggerLog']:
        """
        (Updatable) Log configuration details for particular areas of ML Application Implementation.
        """
        return pulumi.get(self, "trigger_log")


@pulumi.output_type
class MlApplicationImplementationLoggingAggregatedInstanceViewLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationImplementationLoggingAggregatedInstanceViewLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationImplementationLoggingAggregatedInstanceViewLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationImplementationLoggingAggregatedInstanceViewLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_logging: Optional[builtins.bool] = None,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_logging: (Updatable) If logging is enabled.
        :param builtins.str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[builtins.bool]:
        """
        (Updatable) If logging is enabled.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class MlApplicationImplementationLoggingImplementationLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationImplementationLoggingImplementationLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationImplementationLoggingImplementationLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationImplementationLoggingImplementationLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_logging: Optional[builtins.bool] = None,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_logging: (Updatable) If logging is enabled.
        :param builtins.str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[builtins.bool]:
        """
        (Updatable) If logging is enabled.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class MlApplicationImplementationLoggingTriggerLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationImplementationLoggingTriggerLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationImplementationLoggingTriggerLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationImplementationLoggingTriggerLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_logging: Optional[builtins.bool] = None,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_logging: (Updatable) If logging is enabled.
        :param builtins.str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[builtins.bool]:
        """
        (Updatable) If logging is enabled.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class MlApplicationImplementationMlApplicationPackageArgument(dict):
    def __init__(__self__, *,
                 arguments: Optional[Sequence['outputs.MlApplicationImplementationMlApplicationPackageArgumentArgument']] = None):
        """
        :param Sequence['MlApplicationImplementationMlApplicationPackageArgumentArgumentArgs'] arguments: Array of the ML Application package arguments
        """
        if arguments is not None:
            pulumi.set(__self__, "arguments", arguments)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[Sequence['outputs.MlApplicationImplementationMlApplicationPackageArgumentArgument']]:
        """
        Array of the ML Application package arguments
        """
        return pulumi.get(self, "arguments")


@pulumi.output_type
class MlApplicationImplementationMlApplicationPackageArgumentArgument(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isMandatory":
            suggest = "is_mandatory"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationImplementationMlApplicationPackageArgumentArgument. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationImplementationMlApplicationPackageArgumentArgument.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationImplementationMlApplicationPackageArgumentArgument.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 is_mandatory: Optional[builtins.bool] = None,
                 name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str description: short description of the argument
        :param builtins.bool is_mandatory: argument is mandatory or not
        :param builtins.str name: ML Application Implementation name which is unique for given ML Application.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param builtins.str type: type of the argument
        :param builtins.str value: Argument value
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_mandatory is not None:
            pulumi.set(__self__, "is_mandatory", is_mandatory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        short description of the argument
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isMandatory")
    def is_mandatory(self) -> Optional[builtins.bool]:
        """
        argument is mandatory or not
        """
        return pulumi.get(self, "is_mandatory")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        ML Application Implementation name which is unique for given ML Application.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        type of the argument
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        Argument value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MlApplicationInstanceAuthConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationName":
            suggest = "application_name"
        elif key == "domainId":
            suggest = "domain_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationInstanceAuthConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationInstanceAuthConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationInstanceAuthConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 application_name: Optional[builtins.str] = None,
                 domain_id: Optional[builtins.str] = None):
        """
        :param builtins.str type: Type of AuthN/Z
        :param builtins.str application_name: Name of the IDCS application
        :param builtins.str domain_id: Identity Domain OCID
        """
        pulumi.set(__self__, "type", type)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of AuthN/Z
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[builtins.str]:
        """
        Name of the IDCS application
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[builtins.str]:
        """
        Identity Domain OCID
        """
        return pulumi.get(self, "domain_id")


@pulumi.output_type
class MlApplicationInstanceConfiguration(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str key: (Updatable) Key of configuration property
        :param builtins.str value: (Updatable) Value of configuration property
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        (Updatable) Key of configuration property
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) Value of configuration property
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MlApplicationInstancePredictionEndpointDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basePredictionUri":
            suggest = "base_prediction_uri"
        elif key == "predictionUris":
            suggest = "prediction_uris"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationInstancePredictionEndpointDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationInstancePredictionEndpointDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationInstancePredictionEndpointDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_prediction_uri: Optional[builtins.str] = None,
                 prediction_uris: Optional[Sequence['outputs.MlApplicationInstancePredictionEndpointDetailPredictionUri']] = None):
        """
        :param builtins.str base_prediction_uri: Base URI of prediction router.
        :param Sequence['MlApplicationInstancePredictionEndpointDetailPredictionUriArgs'] prediction_uris: Array of all prediction URIs per use-case.
        """
        if base_prediction_uri is not None:
            pulumi.set(__self__, "base_prediction_uri", base_prediction_uri)
        if prediction_uris is not None:
            pulumi.set(__self__, "prediction_uris", prediction_uris)

    @property
    @pulumi.getter(name="basePredictionUri")
    def base_prediction_uri(self) -> Optional[builtins.str]:
        """
        Base URI of prediction router.
        """
        return pulumi.get(self, "base_prediction_uri")

    @property
    @pulumi.getter(name="predictionUris")
    def prediction_uris(self) -> Optional[Sequence['outputs.MlApplicationInstancePredictionEndpointDetailPredictionUri']]:
        """
        Array of all prediction URIs per use-case.
        """
        return pulumi.get(self, "prediction_uris")


@pulumi.output_type
class MlApplicationInstancePredictionEndpointDetailPredictionUri(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "useCase":
            suggest = "use_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MlApplicationInstancePredictionEndpointDetailPredictionUri. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MlApplicationInstancePredictionEndpointDetailPredictionUri.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MlApplicationInstancePredictionEndpointDetailPredictionUri.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uri: Optional[builtins.str] = None,
                 use_case: Optional[builtins.str] = None):
        """
        :param builtins.str uri: Prediction URI.
        :param builtins.str use_case: Prediction use-case.
        """
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if use_case is not None:
            pulumi.set(__self__, "use_case", use_case)

    @property
    @pulumi.getter
    def uri(self) -> Optional[builtins.str]:
        """
        Prediction URI.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCase")
    def use_case(self) -> Optional[builtins.str]:
        """
        Prediction use-case.
        """
        return pulumi.get(self, "use_case")


@pulumi.output_type
class ModelBackupOperationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupState":
            suggest = "backup_state"
        elif key == "backupStateDetails":
            suggest = "backup_state_details"
        elif key == "timeLastBackup":
            suggest = "time_last_backup"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBackupOperationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBackupOperationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBackupOperationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_state: Optional[builtins.str] = None,
                 backup_state_details: Optional[builtins.str] = None,
                 time_last_backup: Optional[builtins.str] = None):
        """
        :param builtins.str backup_state: The backup status of the model.
        :param builtins.str backup_state_details: The backup execution status details of the model.
        :param builtins.str time_last_backup: The last backup execution time of the model.
        """
        if backup_state is not None:
            pulumi.set(__self__, "backup_state", backup_state)
        if backup_state_details is not None:
            pulumi.set(__self__, "backup_state_details", backup_state_details)
        if time_last_backup is not None:
            pulumi.set(__self__, "time_last_backup", time_last_backup)

    @property
    @pulumi.getter(name="backupState")
    def backup_state(self) -> Optional[builtins.str]:
        """
        The backup status of the model.
        """
        return pulumi.get(self, "backup_state")

    @property
    @pulumi.getter(name="backupStateDetails")
    def backup_state_details(self) -> Optional[builtins.str]:
        """
        The backup execution status details of the model.
        """
        return pulumi.get(self, "backup_state_details")

    @property
    @pulumi.getter(name="timeLastBackup")
    def time_last_backup(self) -> Optional[builtins.str]:
        """
        The last backup execution time of the model.
        """
        return pulumi.get(self, "time_last_backup")


@pulumi.output_type
class ModelBackupSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupRegion":
            suggest = "backup_region"
        elif key == "isBackupEnabled":
            suggest = "is_backup_enabled"
        elif key == "customerNotificationType":
            suggest = "customer_notification_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelBackupSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelBackupSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelBackupSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_region: builtins.str,
                 is_backup_enabled: builtins.bool,
                 customer_notification_type: Optional[builtins.str] = None):
        """
        :param builtins.str backup_region: (Updatable) Oracle Cloud Infrastructure backup region for the model.
        :param builtins.bool is_backup_enabled: (Updatable) Boolean flag representing whether backup needs to be enabled/disabled for the model.
        :param builtins.str customer_notification_type: (Updatable) Customer notification on backup success/failure events.
        """
        pulumi.set(__self__, "backup_region", backup_region)
        pulumi.set(__self__, "is_backup_enabled", is_backup_enabled)
        if customer_notification_type is not None:
            pulumi.set(__self__, "customer_notification_type", customer_notification_type)

    @property
    @pulumi.getter(name="backupRegion")
    def backup_region(self) -> builtins.str:
        """
        (Updatable) Oracle Cloud Infrastructure backup region for the model.
        """
        return pulumi.get(self, "backup_region")

    @property
    @pulumi.getter(name="isBackupEnabled")
    def is_backup_enabled(self) -> builtins.bool:
        """
        (Updatable) Boolean flag representing whether backup needs to be enabled/disabled for the model.
        """
        return pulumi.get(self, "is_backup_enabled")

    @property
    @pulumi.getter(name="customerNotificationType")
    def customer_notification_type(self) -> Optional[builtins.str]:
        """
        (Updatable) Customer notification on backup success/failure events.
        """
        return pulumi.get(self, "customer_notification_type")


@pulumi.output_type
class ModelCustomMetadataList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hasArtifact":
            suggest = "has_artifact"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelCustomMetadataList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelCustomMetadataList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelCustomMetadataList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 has_artifact: Optional[builtins.bool] = None,
                 key: Optional[builtins.str] = None,
                 keywords: Optional[Sequence[builtins.str]] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str category: (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,Reports,Readme,other".
        :param builtins.str description: (Updatable) Description of model metadata
        :param builtins.bool has_artifact: (Updatable) Is there any artifact present for the metadata.
        :param builtins.str key: (Updatable) Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testArtifactresults
               * fineTuningConfiguration
               * deploymentConfiguration
               * readme
               * license
               * evaluationConfiguration
        :param Sequence[builtins.str] keywords: (Updatable) list of keywords for searching
        :param builtins.str value: (Updatable) Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
               
               Allowed values for libraryName: scikit-learn, xgboost, tensorflow, pytorch, mxnet, keras, lightGBM, pymc3, pyOD, spacy, prophet, sktime, statsmodels, cuml, oracle_automl, h2o, transformers, nltk, emcee, pystan, bert, gensim, flair, word2vec, ensemble, other
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if has_artifact is not None:
            pulumi.set(__self__, "has_artifact", has_artifact)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[builtins.str]:
        """
        (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,Reports,Readme,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        (Updatable) Description of model metadata
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hasArtifact")
    def has_artifact(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is there any artifact present for the metadata.
        """
        return pulumi.get(self, "has_artifact")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        (Updatable) Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testArtifactresults
        * fineTuningConfiguration
        * deploymentConfiguration
        * readme
        * license
        * evaluationConfiguration
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def keywords(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) list of keywords for searching
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other

        Allowed values for libraryName: scikit-learn, xgboost, tensorflow, pytorch, mxnet, keras, lightGBM, pymc3, pyOD, spacy, prophet, sktime, statsmodels, cuml, oracle_automl, h2o, transformers, nltk, emcee, pystan, bert, gensim, flair, word2vec, ensemble, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelDefinedMetadataList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hasArtifact":
            suggest = "has_artifact"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDefinedMetadataList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDefinedMetadataList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDefinedMetadataList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 has_artifact: Optional[builtins.bool] = None,
                 key: Optional[builtins.str] = None,
                 keywords: Optional[Sequence[builtins.str]] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str category: (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,Reports,Readme,other".
        :param builtins.str description: (Updatable) Description of model metadata
        :param builtins.bool has_artifact: (Updatable) Is there any artifact present for the metadata.
        :param builtins.str key: (Updatable) Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testArtifactresults
               * fineTuningConfiguration
               * deploymentConfiguration
               * readme
               * license
               * evaluationConfiguration
        :param Sequence[builtins.str] keywords: (Updatable) list of keywords for searching
        :param builtins.str value: (Updatable) Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
               
               Allowed values for libraryName: scikit-learn, xgboost, tensorflow, pytorch, mxnet, keras, lightGBM, pymc3, pyOD, spacy, prophet, sktime, statsmodels, cuml, oracle_automl, h2o, transformers, nltk, emcee, pystan, bert, gensim, flair, word2vec, ensemble, other
        """
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if has_artifact is not None:
            pulumi.set(__self__, "has_artifact", has_artifact)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[builtins.str]:
        """
        (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,Reports,Readme,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        (Updatable) Description of model metadata
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hasArtifact")
    def has_artifact(self) -> Optional[builtins.bool]:
        """
        (Updatable) Is there any artifact present for the metadata.
        """
        return pulumi.get(self, "has_artifact")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        (Updatable) Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testArtifactresults
        * fineTuningConfiguration
        * deploymentConfiguration
        * readme
        * license
        * evaluationConfiguration
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def keywords(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) list of keywords for searching
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other

        Allowed values for libraryName: scikit-learn, xgboost, tensorflow, pytorch, mxnet, keras, lightGBM, pymc3, pyOD, spacy, prophet, sktime, statsmodels, cuml, oracle_automl, h2o, transformers, nltk, emcee, pystan, bert, gensim, flair, word2vec, ensemble, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelDeploymentCategoryLogDetails(dict):
    def __init__(__self__, *,
                 access: Optional['outputs.ModelDeploymentCategoryLogDetailsAccess'] = None,
                 predict: Optional['outputs.ModelDeploymentCategoryLogDetailsPredict'] = None):
        """
        :param 'ModelDeploymentCategoryLogDetailsAccessArgs' access: (Updatable) The log details.
        :param 'ModelDeploymentCategoryLogDetailsPredictArgs' predict: (Updatable) The log details.
        """
        if access is not None:
            pulumi.set(__self__, "access", access)
        if predict is not None:
            pulumi.set(__self__, "predict", predict)

    @property
    @pulumi.getter
    def access(self) -> Optional['outputs.ModelDeploymentCategoryLogDetailsAccess']:
        """
        (Updatable) The log details.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def predict(self) -> Optional['outputs.ModelDeploymentCategoryLogDetailsPredict']:
        """
        (Updatable) The log details.
        """
        return pulumi.get(self, "predict")


@pulumi.output_type
class ModelDeploymentCategoryLogDetailsAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentCategoryLogDetailsAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentCategoryLogDetailsAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentCategoryLogDetailsAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param builtins.str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelDeploymentCategoryLogDetailsPredict(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentCategoryLogDetailsPredict. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentCategoryLogDetailsPredict.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentCategoryLogDetailsPredict.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param builtins.str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentType":
            suggest = "deployment_type"
        elif key == "modelConfigurationDetails":
            suggest = "model_configuration_details"
        elif key == "environmentConfigurationDetails":
            suggest = "environment_configuration_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_type: builtins.str,
                 model_configuration_details: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails',
                 environment_configuration_details: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails'] = None):
        """
        :param builtins.str deployment_type: (Updatable) The type of the model deployment.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsArgs' model_configuration_details: (Updatable) The model configuration details.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetailsArgs' environment_configuration_details: (Updatable) The configuration to carry the environment details thats used in Model Deployment creation
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "model_configuration_details", model_configuration_details)
        if environment_configuration_details is not None:
            pulumi.set(__self__, "environment_configuration_details", environment_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        (Updatable) The type of the model deployment.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails':
        """
        (Updatable) The model configuration details.
        """
        return pulumi.get(self, "model_configuration_details")

    @property
    @pulumi.getter(name="environmentConfigurationDetails")
    def environment_configuration_details(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails']:
        """
        (Updatable) The configuration to carry the environment details thats used in Model Deployment creation
        """
        return pulumi.get(self, "environment_configuration_details")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentConfigurationType":
            suggest = "environment_configuration_type"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "healthCheckPort":
            suggest = "health_check_port"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "serverPort":
            suggest = "server_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_configuration_type: builtins.str,
                 cmds: Optional[Sequence[builtins.str]] = None,
                 entrypoints: Optional[Sequence[builtins.str]] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 health_check_port: Optional[builtins.int] = None,
                 image: Optional[builtins.str] = None,
                 image_digest: Optional[builtins.str] = None,
                 server_port: Optional[builtins.int] = None):
        """
        :param builtins.str environment_configuration_type: (Updatable) The environment configuration type
        :param Sequence[builtins.str] cmds: (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param Mapping[str, builtins.str] environment_variables: (Updatable) Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        :param builtins.int health_check_port: (Updatable) The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        :param builtins.str image: (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str image_digest: (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.int server_port: (Updatable) The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        pulumi.set(__self__, "environment_configuration_type", environment_configuration_type)
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)

    @property
    @pulumi.getter(name="environmentConfigurationType")
    def environment_configuration_type(self) -> builtins.str:
        """
        (Updatable) The environment configuration type
        """
        return pulumi.get(self, "environment_configuration_type")

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[builtins.int]:
        """
        (Updatable) The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter
    def image(self) -> Optional[builtins.str]:
        """
        (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[builtins.str]:
        """
        (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[builtins.int]:
        """
        (Updatable) The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "server_port")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfiguration":
            suggest = "instance_configuration"
        elif key == "modelId":
            suggest = "model_id"
        elif key == "bandwidthMbps":
            suggest = "bandwidth_mbps"
        elif key == "maximumBandwidthMbps":
            suggest = "maximum_bandwidth_mbps"
        elif key == "scalingPolicy":
            suggest = "scaling_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration',
                 model_id: builtins.str,
                 bandwidth_mbps: Optional[builtins.int] = None,
                 maximum_bandwidth_mbps: Optional[builtins.int] = None,
                 scaling_policy: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy'] = None):
        """
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationArgs' instance_configuration: (Updatable) The model deployment instance configuration
        :param builtins.str model_id: (Updatable) The OCID of the model you want to deploy.
        :param builtins.int bandwidth_mbps: (Updatable) The minimum network bandwidth for the model deployment.
        :param builtins.int maximum_bandwidth_mbps: (Updatable) The maximum network bandwidth for the model deployment.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyArgs' scaling_policy: (Updatable) The scaling policy to apply to each model of the deployment.
        """
        pulumi.set(__self__, "instance_configuration", instance_configuration)
        pulumi.set(__self__, "model_id", model_id)
        if bandwidth_mbps is not None:
            pulumi.set(__self__, "bandwidth_mbps", bandwidth_mbps)
        if maximum_bandwidth_mbps is not None:
            pulumi.set(__self__, "maximum_bandwidth_mbps", maximum_bandwidth_mbps)
        if scaling_policy is not None:
            pulumi.set(__self__, "scaling_policy", scaling_policy)

    @property
    @pulumi.getter(name="instanceConfiguration")
    def instance_configuration(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration':
        """
        (Updatable) The model deployment instance configuration
        """
        return pulumi.get(self, "instance_configuration")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> builtins.str:
        """
        (Updatable) The OCID of the model you want to deploy.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> Optional[builtins.int]:
        """
        (Updatable) The minimum network bandwidth for the model deployment.
        """
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="maximumBandwidthMbps")
    def maximum_bandwidth_mbps(self) -> Optional[builtins.int]:
        """
        (Updatable) The maximum network bandwidth for the model deployment.
        """
        return pulumi.get(self, "maximum_bandwidth_mbps")

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy']:
        """
        (Updatable) The scaling policy to apply to each model of the deployment.
        """
        return pulumi.get(self, "scaling_policy")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceShapeName":
            suggest = "instance_shape_name"
        elif key == "modelDeploymentInstanceShapeConfigDetails":
            suggest = "model_deployment_instance_shape_config_details"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_shape_name: builtins.str,
                 model_deployment_instance_shape_config_details: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails'] = None,
                 private_endpoint_id: Optional[builtins.str] = None,
                 subnet_id: Optional[builtins.str] = None):
        """
        :param builtins.str instance_shape_name: (Updatable) The shape used to launch the model deployment instances.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetailsArgs' model_deployment_instance_shape_config_details: (Updatable) Details for the model-deployment instance shape configuration.
        :param builtins.str private_endpoint_id: (Updatable) The OCID of a Data Science private endpoint.
        :param builtins.str subnet_id: (Updatable) A model deployment instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT/SGW gateway for egress.
        """
        pulumi.set(__self__, "instance_shape_name", instance_shape_name)
        if model_deployment_instance_shape_config_details is not None:
            pulumi.set(__self__, "model_deployment_instance_shape_config_details", model_deployment_instance_shape_config_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> builtins.str:
        """
        (Updatable) The shape used to launch the model deployment instances.
        """
        return pulumi.get(self, "instance_shape_name")

    @property
    @pulumi.getter(name="modelDeploymentInstanceShapeConfigDetails")
    def model_deployment_instance_shape_config_details(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails']:
        """
        (Updatable) Details for the model-deployment instance shape configuration.
        """
        return pulumi.get(self, "model_deployment_instance_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        """
        (Updatable) A model deployment instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT/SGW gateway for egress.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuBaseline":
            suggest = "cpu_baseline"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_baseline: Optional[builtins.str] = None,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.str cpu_baseline: (Updatable) The baseline OCPU utilization for a subcore burstable VM instance. If this attribute is left blank, it will default to `BASELINE_1_1`. The following values are supported: BASELINE_1_8 - baseline usage is 1/8 of an OCPU. BASELINE_1_2 - baseline usage is 1/2 of an OCPU. BASELINE_1_1 - baseline usage is an entire OCPU. This represents a non-burstable instance.
        :param builtins.float memory_in_gbs: (Updatable) A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 to 512 GB and VM.Optimized3.Flex memory range is between 6 to 256 GB.
        :param builtins.float ocpus: (Updatable) A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 to 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        if cpu_baseline is not None:
            pulumi.set(__self__, "cpu_baseline", cpu_baseline)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="cpuBaseline")
    def cpu_baseline(self) -> Optional[builtins.str]:
        """
        (Updatable) The baseline OCPU utilization for a subcore burstable VM instance. If this attribute is left blank, it will default to `BASELINE_1_1`. The following values are supported: BASELINE_1_8 - baseline usage is 1/8 of an OCPU. BASELINE_1_2 - baseline usage is 1/2 of an OCPU. BASELINE_1_1 - baseline usage is an entire OCPU. This represents a non-burstable instance.
        """
        return pulumi.get(self, "cpu_baseline")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        (Updatable) A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 to 512 GB and VM.Optimized3.Flex memory range is between 6 to 256 GB.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        (Updatable) A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 to 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"
        elif key == "autoScalingPolicies":
            suggest = "auto_scaling_policies"
        elif key == "coolDownInSeconds":
            suggest = "cool_down_in_seconds"
        elif key == "instanceCount":
            suggest = "instance_count"
        elif key == "isEnabled":
            suggest = "is_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: builtins.str,
                 auto_scaling_policies: Optional[Sequence['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicy']] = None,
                 cool_down_in_seconds: Optional[builtins.int] = None,
                 instance_count: Optional[builtins.int] = None,
                 is_enabled: Optional[builtins.bool] = None):
        """
        :param builtins.str policy_type: (Updatable) The type of scaling policy.
        :param Sequence['ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyArgs'] auto_scaling_policies: (Updatable) The list of autoscaling policy details.
        :param builtins.int cool_down_in_seconds: (Updatable) For threshold-based autoscaling policies, this value is the minimum period of time to wait between scaling actions. The cooldown period gives the system time to stabilize before rescaling. The minimum value is 600 seconds, which is also the default. The cooldown period starts when the model deployment becomes ACTIVE after the scaling operation.
        :param builtins.int instance_count: (Updatable) The number of instances for the model deployment.
        :param builtins.bool is_enabled: (Updatable) Whether the autoscaling policy is enabled.
        """
        pulumi.set(__self__, "policy_type", policy_type)
        if auto_scaling_policies is not None:
            pulumi.set(__self__, "auto_scaling_policies", auto_scaling_policies)
        if cool_down_in_seconds is not None:
            pulumi.set(__self__, "cool_down_in_seconds", cool_down_in_seconds)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> builtins.str:
        """
        (Updatable) The type of scaling policy.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="autoScalingPolicies")
    def auto_scaling_policies(self) -> Optional[Sequence['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicy']]:
        """
        (Updatable) The list of autoscaling policy details.
        """
        return pulumi.get(self, "auto_scaling_policies")

    @property
    @pulumi.getter(name="coolDownInSeconds")
    def cool_down_in_seconds(self) -> Optional[builtins.int]:
        """
        (Updatable) For threshold-based autoscaling policies, this value is the minimum period of time to wait between scaling actions. The cooldown period gives the system time to stabilize before rescaling. The minimum value is 600 seconds, which is also the default. The cooldown period starts when the model deployment becomes ACTIVE after the scaling operation.
        """
        return pulumi.get(self, "cool_down_in_seconds")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[builtins.int]:
        """
        (Updatable) The number of instances for the model deployment.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[builtins.bool]:
        """
        (Updatable) Whether the autoscaling policy is enabled.
        """
        return pulumi.get(self, "is_enabled")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoScalingPolicyType":
            suggest = "auto_scaling_policy_type"
        elif key == "initialInstanceCount":
            suggest = "initial_instance_count"
        elif key == "maximumInstanceCount":
            suggest = "maximum_instance_count"
        elif key == "minimumInstanceCount":
            suggest = "minimum_instance_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_scaling_policy_type: builtins.str,
                 initial_instance_count: builtins.int,
                 maximum_instance_count: builtins.int,
                 minimum_instance_count: builtins.int,
                 rules: Sequence['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRule']):
        """
        :param builtins.str auto_scaling_policy_type: (Updatable) The type of autoscaling policy.
        :param builtins.int initial_instance_count: (Updatable) For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the model deployment immediately after autoscaling is enabled. Note that anytime this value is updated, the number of instances will be reset to this value. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
        :param builtins.int maximum_instance_count: (Updatable) For a threshold-based autoscaling policy, this value is the maximum number of instances the model deployment is allowed to increase to (scale out).
        :param builtins.int minimum_instance_count: (Updatable) For a threshold-based autoscaling policy, this value is the minimum number of instances the model deployment is allowed to decrease to (scale in).
        :param Sequence['ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleArgs'] rules: (Updatable) The list of autoscaling policy rules.
        """
        pulumi.set(__self__, "auto_scaling_policy_type", auto_scaling_policy_type)
        pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        pulumi.set(__self__, "maximum_instance_count", maximum_instance_count)
        pulumi.set(__self__, "minimum_instance_count", minimum_instance_count)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="autoScalingPolicyType")
    def auto_scaling_policy_type(self) -> builtins.str:
        """
        (Updatable) The type of autoscaling policy.
        """
        return pulumi.get(self, "auto_scaling_policy_type")

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> builtins.int:
        """
        (Updatable) For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the model deployment immediately after autoscaling is enabled. Note that anytime this value is updated, the number of instances will be reset to this value. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
        """
        return pulumi.get(self, "initial_instance_count")

    @property
    @pulumi.getter(name="maximumInstanceCount")
    def maximum_instance_count(self) -> builtins.int:
        """
        (Updatable) For a threshold-based autoscaling policy, this value is the maximum number of instances the model deployment is allowed to increase to (scale out).
        """
        return pulumi.get(self, "maximum_instance_count")

    @property
    @pulumi.getter(name="minimumInstanceCount")
    def minimum_instance_count(self) -> builtins.int:
        """
        (Updatable) For a threshold-based autoscaling policy, this value is the minimum number of instances the model deployment is allowed to decrease to (scale in).
        """
        return pulumi.get(self, "minimum_instance_count")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRule']:
        """
        (Updatable) The list of autoscaling policy rules.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricExpressionRuleType":
            suggest = "metric_expression_rule_type"
        elif key == "scaleInConfiguration":
            suggest = "scale_in_configuration"
        elif key == "scaleOutConfiguration":
            suggest = "scale_out_configuration"
        elif key == "metricType":
            suggest = "metric_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_expression_rule_type: builtins.str,
                 scale_in_configuration: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfiguration',
                 scale_out_configuration: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration',
                 metric_type: Optional[builtins.str] = None):
        """
        :param builtins.str metric_expression_rule_type: (Updatable) The metric expression for creating the alarm used to trigger autoscaling actions on the model deployment.
               
               The following values are supported:
               * `PREDEFINED_EXPRESSION`: An expression built using CPU or Memory metrics emitted by the Model Deployment Monitoring.
               * `CUSTOM_EXPRESSION`: A custom Monitoring Query Language (MQL) expression.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfigurationArgs' scale_in_configuration: (Updatable) The scaling configuration for the predefined metric expression rule.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationArgs' scale_out_configuration: (Updatable) The scaling configuration for the predefined metric expression rule.
        :param builtins.str metric_type: (Updatable) Metric type
        """
        pulumi.set(__self__, "metric_expression_rule_type", metric_expression_rule_type)
        pulumi.set(__self__, "scale_in_configuration", scale_in_configuration)
        pulumi.set(__self__, "scale_out_configuration", scale_out_configuration)
        if metric_type is not None:
            pulumi.set(__self__, "metric_type", metric_type)

    @property
    @pulumi.getter(name="metricExpressionRuleType")
    def metric_expression_rule_type(self) -> builtins.str:
        """
        (Updatable) The metric expression for creating the alarm used to trigger autoscaling actions on the model deployment.

        The following values are supported:
        * `PREDEFINED_EXPRESSION`: An expression built using CPU or Memory metrics emitted by the Model Deployment Monitoring.
        * `CUSTOM_EXPRESSION`: A custom Monitoring Query Language (MQL) expression.
        """
        return pulumi.get(self, "metric_expression_rule_type")

    @property
    @pulumi.getter(name="scaleInConfiguration")
    def scale_in_configuration(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfiguration':
        """
        (Updatable) The scaling configuration for the predefined metric expression rule.
        """
        return pulumi.get(self, "scale_in_configuration")

    @property
    @pulumi.getter(name="scaleOutConfiguration")
    def scale_out_configuration(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration':
        """
        (Updatable) The scaling configuration for the predefined metric expression rule.
        """
        return pulumi.get(self, "scale_out_configuration")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> Optional[builtins.str]:
        """
        (Updatable) Metric type
        """
        return pulumi.get(self, "metric_type")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCountAdjustment":
            suggest = "instance_count_adjustment"
        elif key == "pendingDuration":
            suggest = "pending_duration"
        elif key == "scalingConfigurationType":
            suggest = "scaling_configuration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleInConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count_adjustment: Optional[builtins.int] = None,
                 pending_duration: Optional[builtins.str] = None,
                 query: Optional[builtins.str] = None,
                 scaling_configuration_type: Optional[builtins.str] = None,
                 threshold: Optional[builtins.int] = None):
        """
        :param builtins.int instance_count_adjustment: (Updatable) The value is used for adjusting the count of instances by.
        :param builtins.str pending_duration: (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
               
               The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
        :param builtins.str query: (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
               
               Example of threshold alarm:
               
               -----
               
               CPUUtilization[1m]{resourceId = "MODEL_DEPLOYMENT_OCID"}.grouping().mean() < 25 CPUUtilization[1m]{resourceId = "MODEL_DEPLOYMENT_OCID"}.grouping().mean() > 75
               
               -----
        :param builtins.str scaling_configuration_type: (Updatable) The type of scaling configuration.
        :param builtins.int threshold: (Updatable) A metric value at which the scaling operation will be triggered.
        """
        if instance_count_adjustment is not None:
            pulumi.set(__self__, "instance_count_adjustment", instance_count_adjustment)
        if pending_duration is not None:
            pulumi.set(__self__, "pending_duration", pending_duration)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if scaling_configuration_type is not None:
            pulumi.set(__self__, "scaling_configuration_type", scaling_configuration_type)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="instanceCountAdjustment")
    def instance_count_adjustment(self) -> Optional[builtins.int]:
        """
        (Updatable) The value is used for adjusting the count of instances by.
        """
        return pulumi.get(self, "instance_count_adjustment")

    @property
    @pulumi.getter(name="pendingDuration")
    def pending_duration(self) -> Optional[builtins.str]:
        """
        (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."

        The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
        """
        return pulumi.get(self, "pending_duration")

    @property
    @pulumi.getter
    def query(self) -> Optional[builtins.str]:
        """
        (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.

        Example of threshold alarm:

        -----

        CPUUtilization[1m]{resourceId = "MODEL_DEPLOYMENT_OCID"}.grouping().mean() < 25 CPUUtilization[1m]{resourceId = "MODEL_DEPLOYMENT_OCID"}.grouping().mean() > 75

        -----
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="scalingConfigurationType")
    def scaling_configuration_type(self) -> Optional[builtins.str]:
        """
        (Updatable) The type of scaling configuration.
        """
        return pulumi.get(self, "scaling_configuration_type")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[builtins.int]:
        """
        (Updatable) A metric value at which the scaling operation will be triggered.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCountAdjustment":
            suggest = "instance_count_adjustment"
        elif key == "pendingDuration":
            suggest = "pending_duration"
        elif key == "scalingConfigurationType":
            suggest = "scaling_configuration_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyAutoScalingPolicyRuleScaleOutConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count_adjustment: Optional[builtins.int] = None,
                 pending_duration: Optional[builtins.str] = None,
                 query: Optional[builtins.str] = None,
                 scaling_configuration_type: Optional[builtins.str] = None,
                 threshold: Optional[builtins.int] = None):
        """
        :param builtins.int instance_count_adjustment: (Updatable) The value is used for adjusting the count of instances by.
        :param builtins.str pending_duration: (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
               
               The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
        :param builtins.str query: (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
               
               Example of threshold alarm:
               
               -----
               
               CPUUtilization[1m]{resourceId = "MODEL_DEPLOYMENT_OCID"}.grouping().mean() < 25 CPUUtilization[1m]{resourceId = "MODEL_DEPLOYMENT_OCID"}.grouping().mean() > 75
               
               -----
        :param builtins.str scaling_configuration_type: (Updatable) The type of scaling configuration.
        :param builtins.int threshold: (Updatable) A metric value at which the scaling operation will be triggered.
        """
        if instance_count_adjustment is not None:
            pulumi.set(__self__, "instance_count_adjustment", instance_count_adjustment)
        if pending_duration is not None:
            pulumi.set(__self__, "pending_duration", pending_duration)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if scaling_configuration_type is not None:
            pulumi.set(__self__, "scaling_configuration_type", scaling_configuration_type)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="instanceCountAdjustment")
    def instance_count_adjustment(self) -> Optional[builtins.int]:
        """
        (Updatable) The value is used for adjusting the count of instances by.
        """
        return pulumi.get(self, "instance_count_adjustment")

    @property
    @pulumi.getter(name="pendingDuration")
    def pending_duration(self) -> Optional[builtins.str]:
        """
        (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."

        The duration is specified as a string in ISO 8601 format (`PT10M` for ten minutes or `PT1H` for one hour). Minimum: PT3M. Maximum: PT1H. Default: PT3M.
        """
        return pulumi.get(self, "pending_duration")

    @property
    @pulumi.getter
    def query(self) -> Optional[builtins.str]:
        """
        (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.

        Example of threshold alarm:

        -----

        CPUUtilization[1m]{resourceId = "MODEL_DEPLOYMENT_OCID"}.grouping().mean() < 25 CPUUtilization[1m]{resourceId = "MODEL_DEPLOYMENT_OCID"}.grouping().mean() > 75

        -----
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="scalingConfigurationType")
    def scaling_configuration_type(self) -> Optional[builtins.str]:
        """
        (Updatable) The type of scaling configuration.
        """
        return pulumi.get(self, "scaling_configuration_type")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[builtins.int]:
        """
        (Updatable) A metric value at which the scaling operation will be triggered.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class ModelDeploymentModelDeploymentSystemData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentInstanceCount":
            suggest = "current_instance_count"
        elif key == "systemInfraType":
            suggest = "system_infra_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentSystemData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentSystemData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentSystemData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_instance_count: Optional[builtins.int] = None,
                 system_infra_type: Optional[builtins.str] = None):
        """
        :param builtins.int current_instance_count: This value is the current count of the model deployment instances.
        :param builtins.str system_infra_type: The infrastructure type of the model deployment.
        """
        if current_instance_count is not None:
            pulumi.set(__self__, "current_instance_count", current_instance_count)
        if system_infra_type is not None:
            pulumi.set(__self__, "system_infra_type", system_infra_type)

    @property
    @pulumi.getter(name="currentInstanceCount")
    def current_instance_count(self) -> Optional[builtins.int]:
        """
        This value is the current count of the model deployment instances.
        """
        return pulumi.get(self, "current_instance_count")

    @property
    @pulumi.getter(name="systemInfraType")
    def system_infra_type(self) -> Optional[builtins.str]:
        """
        The infrastructure type of the model deployment.
        """
        return pulumi.get(self, "system_infra_type")


@pulumi.output_type
class ModelRetentionOperationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveState":
            suggest = "archive_state"
        elif key == "archiveStateDetails":
            suggest = "archive_state_details"
        elif key == "deleteState":
            suggest = "delete_state"
        elif key == "deleteStateDetails":
            suggest = "delete_state_details"
        elif key == "timeArchivalScheduled":
            suggest = "time_archival_scheduled"
        elif key == "timeDeletionScheduled":
            suggest = "time_deletion_scheduled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelRetentionOperationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelRetentionOperationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelRetentionOperationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_state: Optional[builtins.str] = None,
                 archive_state_details: Optional[builtins.str] = None,
                 delete_state: Optional[builtins.str] = None,
                 delete_state_details: Optional[builtins.str] = None,
                 time_archival_scheduled: Optional[builtins.str] = None,
                 time_deletion_scheduled: Optional[builtins.str] = None):
        """
        :param builtins.str archive_state: The archival status of model.
        :param builtins.str archive_state_details: The archival state details of the model.
        :param builtins.str delete_state: The deletion status of the archived model.
        :param builtins.str delete_state_details: The deletion status details of the archived model.
        :param builtins.str time_archival_scheduled: The estimated archival time of the model based on the provided retention setting.
        :param builtins.str time_deletion_scheduled: The estimated deletion time of the model based on the provided retention setting.
        """
        if archive_state is not None:
            pulumi.set(__self__, "archive_state", archive_state)
        if archive_state_details is not None:
            pulumi.set(__self__, "archive_state_details", archive_state_details)
        if delete_state is not None:
            pulumi.set(__self__, "delete_state", delete_state)
        if delete_state_details is not None:
            pulumi.set(__self__, "delete_state_details", delete_state_details)
        if time_archival_scheduled is not None:
            pulumi.set(__self__, "time_archival_scheduled", time_archival_scheduled)
        if time_deletion_scheduled is not None:
            pulumi.set(__self__, "time_deletion_scheduled", time_deletion_scheduled)

    @property
    @pulumi.getter(name="archiveState")
    def archive_state(self) -> Optional[builtins.str]:
        """
        The archival status of model.
        """
        return pulumi.get(self, "archive_state")

    @property
    @pulumi.getter(name="archiveStateDetails")
    def archive_state_details(self) -> Optional[builtins.str]:
        """
        The archival state details of the model.
        """
        return pulumi.get(self, "archive_state_details")

    @property
    @pulumi.getter(name="deleteState")
    def delete_state(self) -> Optional[builtins.str]:
        """
        The deletion status of the archived model.
        """
        return pulumi.get(self, "delete_state")

    @property
    @pulumi.getter(name="deleteStateDetails")
    def delete_state_details(self) -> Optional[builtins.str]:
        """
        The deletion status details of the archived model.
        """
        return pulumi.get(self, "delete_state_details")

    @property
    @pulumi.getter(name="timeArchivalScheduled")
    def time_archival_scheduled(self) -> Optional[builtins.str]:
        """
        The estimated archival time of the model based on the provided retention setting.
        """
        return pulumi.get(self, "time_archival_scheduled")

    @property
    @pulumi.getter(name="timeDeletionScheduled")
    def time_deletion_scheduled(self) -> Optional[builtins.str]:
        """
        The estimated deletion time of the model based on the provided retention setting.
        """
        return pulumi.get(self, "time_deletion_scheduled")


@pulumi.output_type
class ModelRetentionSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "archiveAfterDays":
            suggest = "archive_after_days"
        elif key == "customerNotificationType":
            suggest = "customer_notification_type"
        elif key == "deleteAfterDays":
            suggest = "delete_after_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelRetentionSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelRetentionSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelRetentionSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 archive_after_days: builtins.int,
                 customer_notification_type: Optional[builtins.str] = None,
                 delete_after_days: Optional[builtins.int] = None):
        """
        :param builtins.int archive_after_days: (Updatable) Number of days after which the model will be archived.
        :param builtins.str customer_notification_type: (Updatable) Customer notification options on success/failure of archival, deletion events.
        :param builtins.int delete_after_days: (Updatable) Number of days after which the archived model will be deleted.
        """
        pulumi.set(__self__, "archive_after_days", archive_after_days)
        if customer_notification_type is not None:
            pulumi.set(__self__, "customer_notification_type", customer_notification_type)
        if delete_after_days is not None:
            pulumi.set(__self__, "delete_after_days", delete_after_days)

    @property
    @pulumi.getter(name="archiveAfterDays")
    def archive_after_days(self) -> builtins.int:
        """
        (Updatable) Number of days after which the model will be archived.
        """
        return pulumi.get(self, "archive_after_days")

    @property
    @pulumi.getter(name="customerNotificationType")
    def customer_notification_type(self) -> Optional[builtins.str]:
        """
        (Updatable) Customer notification options on success/failure of archival, deletion events.
        """
        return pulumi.get(self, "customer_notification_type")

    @property
    @pulumi.getter(name="deleteAfterDays")
    def delete_after_days(self) -> Optional[builtins.int]:
        """
        (Updatable) Number of days after which the archived model will be deleted.
        """
        return pulumi.get(self, "delete_after_days")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "notebookSessionShapeConfigDetails":
            suggest = "notebook_session_shape_config_details"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shape: builtins.str,
                 block_storage_size_in_gbs: Optional[builtins.int] = None,
                 notebook_session_shape_config_details: Optional['outputs.NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails'] = None,
                 private_endpoint_id: Optional[builtins.str] = None,
                 subnet_id: Optional[builtins.str] = None):
        """
        :param builtins.str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param builtins.int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param 'NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetailsArgs' notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param builtins.str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param builtins.str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        pulumi.set(__self__, "shape", shape)
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def shape(self) -> builtins.str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails']:
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[builtins.str]:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the notebook session instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the notebook session instance.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "notebookSessionShapeConfigDetails":
            suggest = "notebook_session_shape_config_details"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shape: builtins.str,
                 subnet_id: builtins.str,
                 block_storage_size_in_gbs: Optional[builtins.int] = None,
                 notebook_session_shape_config_details: Optional['outputs.NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails'] = None,
                 private_endpoint_id: Optional[builtins.str] = None):
        """
        :param builtins.str shape: (Updatable) The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param builtins.str subnet_id: (Updatable) A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        :param builtins.int block_storage_size_in_gbs: (Updatable) A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param 'NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsArgs' notebook_session_shape_config_details: (Updatable) Details for the notebook session shape configuration.
        :param builtins.str private_endpoint_id: (Updatable) The OCID of a Data Science private endpoint.
        """
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)

    @property
    @pulumi.getter
    def shape(self) -> builtins.str:
        """
        (Updatable) The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        (Updatable) A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[builtins.int]:
        """
        (Updatable) A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails']:
        """
        (Updatable) Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: (Updatable) The total amount of memory available to the notebook session instance, in gigabytes.
        :param builtins.float ocpus: (Updatable) The total number of OCPUs available to the notebook session instance.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        (Updatable) The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        (Updatable) The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class NotebookSessionNotebookSessionRuntimeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customEnvironmentVariables":
            suggest = "custom_environment_variables"
        elif key == "notebookSessionGitConfigDetails":
            suggest = "notebook_session_git_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionRuntimeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 notebook_session_git_config_details: Optional['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails'] = None):
        """
        :param Mapping[str, builtins.str] custom_environment_variables: (Updatable) Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        :param 'NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsArgs' notebook_session_git_config_details: (Updatable) Git configuration Details.
        """
        if custom_environment_variables is not None:
            pulumi.set(__self__, "custom_environment_variables", custom_environment_variables)
        if notebook_session_git_config_details is not None:
            pulumi.set(__self__, "notebook_session_git_config_details", notebook_session_git_config_details)

    @property
    @pulumi.getter(name="customEnvironmentVariables")
    def custom_environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        """
        return pulumi.get(self, "custom_environment_variables")

    @property
    @pulumi.getter(name="notebookSessionGitConfigDetails")
    def notebook_session_git_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails']:
        """
        (Updatable) Git configuration Details.
        """
        return pulumi.get(self, "notebook_session_git_config_details")


@pulumi.output_type
class NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notebookSessionGitRepoConfigCollections":
            suggest = "notebook_session_git_repo_config_collections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notebook_session_git_repo_config_collections: Optional[Sequence['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection']] = None):
        """
        :param Sequence['NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollectionArgs'] notebook_session_git_repo_config_collections: (Updatable) A collection of Git repository configurations.
        """
        if notebook_session_git_repo_config_collections is not None:
            pulumi.set(__self__, "notebook_session_git_repo_config_collections", notebook_session_git_repo_config_collections)

    @property
    @pulumi.getter(name="notebookSessionGitRepoConfigCollections")
    def notebook_session_git_repo_config_collections(self) -> Optional[Sequence['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection']]:
        """
        (Updatable) A collection of Git repository configurations.
        """
        return pulumi.get(self, "notebook_session_git_repo_config_collections")


@pulumi.output_type
class NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection(dict):
    def __init__(__self__, *,
                 url: builtins.str):
        """
        :param builtins.str url: (Updatable) The repository URL
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        (Updatable) The repository URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class NotebookSessionNotebookSessionStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_directory_name: builtins.str,
                 storage_type: builtins.str,
                 bucket: Optional[builtins.str] = None,
                 destination_path: Optional[builtins.str] = None,
                 export_id: Optional[builtins.str] = None,
                 mount_target_id: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 prefix: Optional[builtins.str] = None):
        """
        :param builtins.str destination_directory_name: (Updatable) The local directory name to be mounted
        :param builtins.str storage_type: (Updatable) The type of storage.
        :param builtins.str bucket: (Updatable) The object storage bucket
        :param builtins.str destination_path: (Updatable) The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: (Updatable) OCID of the export
        :param builtins.str mount_target_id: (Updatable) OCID of the mount target
        :param builtins.str namespace: (Updatable) The object storage namespace
        :param builtins.str prefix: (Updatable) Prefix in the bucket to mount
        """
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "storage_type", storage_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        (Updatable) The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        (Updatable) The type of storage.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        (Updatable) The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[builtins.str]:
        """
        (Updatable) The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        (Updatable) The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        (Updatable) Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class PipelineConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None):
        """
        :param builtins.str type: (Updatable) The type of pipeline.
        :param builtins.str command_line_arguments: (Updatable) The command line arguments to set for steps in the pipeline.
        :param Mapping[str, builtins.str] environment_variables: (Updatable) Environment variables to set for steps in the pipeline.
        :param builtins.str maximum_runtime_in_minutes: (Updatable) A time bound for the execution of the entire Pipeline. Timer starts when the Pipeline Run is in progress.
        """
        pulumi.set(__self__, "type", type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) The type of pipeline.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        (Updatable) The command line arguments to set for steps in the pipeline.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Environment variables to set for steps in the pipeline.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        (Updatable) A time bound for the execution of the entire Pipeline. Timer starts when the Pipeline Run is in progress.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineInfrastructureConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "shapeConfigDetails":
            suggest = "shape_config_details"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineInfrastructureConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineInfrastructureConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineInfrastructureConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 shape_name: builtins.str,
                 shape_config_details: Optional['outputs.PipelineInfrastructureConfigurationDetailsShapeConfigDetails'] = None,
                 subnet_id: Optional[builtins.str] = None):
        """
        :param builtins.int block_storage_size_in_gbs: (Updatable) The size of the block storage volume to attach to the instance.
        :param builtins.str shape_name: (Updatable) The shape used to launch the instance for all step runs in the pipeline.
        :param 'PipelineInfrastructureConfigurationDetailsShapeConfigDetailsArgs' shape_config_details: (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str subnet_id: (Updatable) The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "shape_name", shape_name)
        if shape_config_details is not None:
            pulumi.set(__self__, "shape_config_details", shape_config_details)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        (Updatable) The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        (Updatable) The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional['outputs.PipelineInfrastructureConfigurationDetailsShapeConfigDetails']:
        """
        (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class PipelineInfrastructureConfigurationDetailsShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineInfrastructureConfigurationDetailsShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class PipelineLogConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineLogConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineLogConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineLogConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[builtins.bool] = None,
                 enable_logging: Optional[builtins.bool] = None,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_auto_log_creation: (Updatable) If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: (Updatable) If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[builtins.bool]:
        """
        (Updatable) If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[builtins.bool]:
        """
        (Updatable) If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class PipelineRunConfigurationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunConfigurationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunConfigurationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunConfigurationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param builtins.str type: The type of pipeline.
        """
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineRunConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None):
        """
        :param builtins.str type: The type of pipeline.
        :param builtins.str command_line_arguments: The command line arguments to set for steps in the pipeline.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for steps in the pipeline.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the entire Pipeline. Timer starts when the Pipeline Run is in progress.
        """
        pulumi.set(__self__, "type", type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        The command line arguments to set for steps in the pipeline.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Environment variables to set for steps in the pipeline.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        A time bound for the execution of the entire Pipeline. Timer starts when the Pipeline Run is in progress.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineRunLogConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunLogConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunLogConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunLogConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[builtins.bool] = None,
                 enable_logging: Optional[builtins.bool] = None,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[builtins.bool]:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[builtins.bool]:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class PipelineRunLogDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunLogDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunLogDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunLogDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.str log_group_id: The log group id for where log objects will be for pipeline runs.
        :param builtins.str log_id: The log id of the log object the pipeline run logs will be shipped to.
        """
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        The log group id for where log objects will be for pipeline runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        The log id of the log object the pipeline run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class PipelineRunStepOverrideDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepConfigurationDetails":
            suggest = "step_configuration_details"
        elif key == "stepName":
            suggest = "step_name"
        elif key == "stepContainerConfigurationDetails":
            suggest = "step_container_configuration_details"
        elif key == "stepDataflowConfigurationDetails":
            suggest = "step_dataflow_configuration_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_configuration_details: 'outputs.PipelineRunStepOverrideDetailStepConfigurationDetails',
                 step_name: builtins.str,
                 step_container_configuration_details: Optional['outputs.PipelineRunStepOverrideDetailStepContainerConfigurationDetails'] = None,
                 step_dataflow_configuration_details: Optional['outputs.PipelineRunStepOverrideDetailStepDataflowConfigurationDetails'] = None):
        """
        :param 'PipelineRunStepOverrideDetailStepConfigurationDetailsArgs' step_configuration_details: The configuration details of a step.
        :param builtins.str step_name: The name of the step.
        :param 'PipelineRunStepOverrideDetailStepContainerConfigurationDetailsArgs' step_container_configuration_details: Container Details for a step in pipeline.
        :param 'PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsArgs' step_dataflow_configuration_details: The configuration details of a Dataflow step.
        """
        pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        pulumi.set(__self__, "step_name", step_name)
        if step_container_configuration_details is not None:
            pulumi.set(__self__, "step_container_configuration_details", step_container_configuration_details)
        if step_dataflow_configuration_details is not None:
            pulumi.set(__self__, "step_dataflow_configuration_details", step_dataflow_configuration_details)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> 'outputs.PipelineRunStepOverrideDetailStepConfigurationDetails':
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepContainerConfigurationDetails")
    def step_container_configuration_details(self) -> Optional['outputs.PipelineRunStepOverrideDetailStepContainerConfigurationDetails']:
        """
        Container Details for a step in pipeline.
        """
        return pulumi.get(self, "step_container_configuration_details")

    @property
    @pulumi.getter(name="stepDataflowConfigurationDetails")
    def step_dataflow_configuration_details(self) -> Optional['outputs.PipelineRunStepOverrideDetailStepDataflowConfigurationDetails']:
        """
        The configuration details of a Dataflow step.
        """
        return pulumi.get(self, "step_dataflow_configuration_details")


@pulumi.output_type
class PipelineRunStepOverrideDetailStepConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetailStepConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetailStepConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetailStepConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineRunStepOverrideDetailStepContainerConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerType":
            suggest = "container_type"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "imageSignatureId":
            suggest = "image_signature_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetailStepContainerConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetailStepContainerConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetailStepContainerConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_type: builtins.str,
                 image: builtins.str,
                 cmds: Optional[Sequence[builtins.str]] = None,
                 entrypoints: Optional[Sequence[builtins.str]] = None,
                 image_digest: Optional[builtins.str] = None,
                 image_signature_id: Optional[builtins.str] = None):
        """
        :param builtins.str container_type: The type of container.
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "image", image)
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_signature_id is not None:
            pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> builtins.str:
        """
        The type of container.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[builtins.str]]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[builtins.str]]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[builtins.str]:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> Optional[builtins.str]:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class PipelineRunStepOverrideDetailStepDataflowConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "driverShape":
            suggest = "driver_shape"
        elif key == "driverShapeConfigDetails":
            suggest = "driver_shape_config_details"
        elif key == "executorShape":
            suggest = "executor_shape"
        elif key == "executorShapeConfigDetails":
            suggest = "executor_shape_config_details"
        elif key == "logsBucketUri":
            suggest = "logs_bucket_uri"
        elif key == "numExecutors":
            suggest = "num_executors"
        elif key == "warehouseBucketUri":
            suggest = "warehouse_bucket_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetailStepDataflowConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetailStepDataflowConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetailStepDataflowConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration: Optional[Mapping[str, builtins.str]] = None,
                 driver_shape: Optional[builtins.str] = None,
                 driver_shape_config_details: Optional['outputs.PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails'] = None,
                 executor_shape: Optional[builtins.str] = None,
                 executor_shape_config_details: Optional['outputs.PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails'] = None,
                 logs_bucket_uri: Optional[builtins.str] = None,
                 num_executors: Optional[builtins.int] = None,
                 warehouse_bucket_uri: Optional[builtins.str] = None):
        """
        :param Mapping[str, builtins.str] configuration: The Spark configuration passed to the running process.
        :param builtins.str driver_shape: The VM shape for the driver.
        :param 'PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsDriverShapeConfigDetailsArgs' driver_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str executor_shape: The VM shape for the executors.
        :param 'PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetailsArgs' executor_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str logs_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        :param builtins.int num_executors: The number of executor VMs requested.
        :param builtins.str warehouse_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if driver_shape is not None:
            pulumi.set(__self__, "driver_shape", driver_shape)
        if driver_shape_config_details is not None:
            pulumi.set(__self__, "driver_shape_config_details", driver_shape_config_details)
        if executor_shape is not None:
            pulumi.set(__self__, "executor_shape", executor_shape)
        if executor_shape_config_details is not None:
            pulumi.set(__self__, "executor_shape_config_details", executor_shape_config_details)
        if logs_bucket_uri is not None:
            pulumi.set(__self__, "logs_bucket_uri", logs_bucket_uri)
        if num_executors is not None:
            pulumi.set(__self__, "num_executors", num_executors)
        if warehouse_bucket_uri is not None:
            pulumi.set(__self__, "warehouse_bucket_uri", warehouse_bucket_uri)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[Mapping[str, builtins.str]]:
        """
        The Spark configuration passed to the running process.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="driverShape")
    def driver_shape(self) -> Optional[builtins.str]:
        """
        The VM shape for the driver.
        """
        return pulumi.get(self, "driver_shape")

    @property
    @pulumi.getter(name="driverShapeConfigDetails")
    def driver_shape_config_details(self) -> Optional['outputs.PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "driver_shape_config_details")

    @property
    @pulumi.getter(name="executorShape")
    def executor_shape(self) -> Optional[builtins.str]:
        """
        The VM shape for the executors.
        """
        return pulumi.get(self, "executor_shape")

    @property
    @pulumi.getter(name="executorShapeConfigDetails")
    def executor_shape_config_details(self) -> Optional['outputs.PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "executor_shape_config_details")

    @property
    @pulumi.getter(name="logsBucketUri")
    def logs_bucket_uri(self) -> Optional[builtins.str]:
        """
        An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        """
        return pulumi.get(self, "logs_bucket_uri")

    @property
    @pulumi.getter(name="numExecutors")
    def num_executors(self) -> Optional[builtins.int]:
        """
        The number of executor VMs requested.
        """
        return pulumi.get(self, "num_executors")

    @property
    @pulumi.getter(name="warehouseBucketUri")
    def warehouse_bucket_uri(self) -> Optional[builtins.str]:
        """
        An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        return pulumi.get(self, "warehouse_bucket_uri")


@pulumi.output_type
class PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class PipelineRunStepRun(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataflowRunId":
            suggest = "dataflow_run_id"
        elif key == "jobRunId":
            suggest = "job_run_id"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "stepName":
            suggest = "step_name"
        elif key == "stepType":
            suggest = "step_type"
        elif key == "timeFinished":
            suggest = "time_finished"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepRun. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepRun.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepRun.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dataflow_run_id: Optional[builtins.str] = None,
                 job_run_id: Optional[builtins.str] = None,
                 lifecycle_details: Optional[builtins.str] = None,
                 state: Optional[builtins.str] = None,
                 step_name: Optional[builtins.str] = None,
                 step_type: Optional[builtins.str] = None,
                 time_finished: Optional[builtins.str] = None,
                 time_started: Optional[builtins.str] = None):
        """
        :param builtins.str dataflow_run_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow run triggered for this step run.
        :param builtins.str job_run_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        :param builtins.str lifecycle_details: Details of the state of the step run.
        :param builtins.str state: The state of the step run.
        :param builtins.str step_name: The name of the step.
        :param builtins.str step_type: The type of step.
        :param builtins.str time_finished: The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_started: The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        if dataflow_run_id is not None:
            pulumi.set(__self__, "dataflow_run_id", dataflow_run_id)
        if job_run_id is not None:
            pulumi.set(__self__, "job_run_id", job_run_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="dataflowRunId")
    def dataflow_run_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow run triggered for this step run.
        """
        return pulumi.get(self, "dataflow_run_id")

    @property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        """
        return pulumi.get(self, "job_run_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[builtins.str]:
        """
        Details of the state of the step run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        """
        The state of the step run.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[builtins.str]:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[builtins.str]:
        """
        The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[builtins.str]:
        """
        The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class PipelineStepArtifact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pipelineStepArtifact":
            suggest = "pipeline_step_artifact"
        elif key == "stepName":
            suggest = "step_name"
        elif key == "artifactContentDisposition":
            suggest = "artifact_content_disposition"
        elif key == "artifactContentLength":
            suggest = "artifact_content_length"
        elif key == "artifactContentMd5":
            suggest = "artifact_content_md5"
        elif key == "artifactLastModified":
            suggest = "artifact_last_modified"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepArtifact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepArtifact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepArtifact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pipeline_step_artifact: builtins.str,
                 step_name: builtins.str,
                 artifact_content_disposition: Optional[builtins.str] = None,
                 artifact_content_length: Optional[builtins.str] = None,
                 artifact_content_md5: Optional[builtins.str] = None,
                 artifact_last_modified: Optional[builtins.str] = None):
        """
        :param builtins.str step_name: The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        pulumi.set(__self__, "pipeline_step_artifact", pipeline_step_artifact)
        pulumi.set(__self__, "step_name", step_name)
        if artifact_content_disposition is not None:
            pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        if artifact_content_length is not None:
            pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        if artifact_content_md5 is not None:
            pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        if artifact_last_modified is not None:
            pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)

    @property
    @pulumi.getter(name="pipelineStepArtifact")
    def pipeline_step_artifact(self) -> builtins.str:
        return pulumi.get(self, "pipeline_step_artifact")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> Optional[builtins.str]:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> Optional[builtins.str]:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> Optional[builtins.str]:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> Optional[builtins.str]:
        return pulumi.get(self, "artifact_last_modified")


@pulumi.output_type
class PipelineStepDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepName":
            suggest = "step_name"
        elif key == "stepType":
            suggest = "step_type"
        elif key == "applicationId":
            suggest = "application_id"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "isArtifactUploaded":
            suggest = "is_artifact_uploaded"
        elif key == "jobId":
            suggest = "job_id"
        elif key == "stepConfigurationDetails":
            suggest = "step_configuration_details"
        elif key == "stepContainerConfigurationDetails":
            suggest = "step_container_configuration_details"
        elif key == "stepDataflowConfigurationDetails":
            suggest = "step_dataflow_configuration_details"
        elif key == "stepInfrastructureConfigurationDetails":
            suggest = "step_infrastructure_configuration_details"
        elif key == "stepStorageMountConfigurationDetailsLists":
            suggest = "step_storage_mount_configuration_details_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_name: builtins.str,
                 step_type: builtins.str,
                 application_id: Optional[builtins.str] = None,
                 depends_ons: Optional[Sequence[builtins.str]] = None,
                 description: Optional[builtins.str] = None,
                 is_artifact_uploaded: Optional[builtins.bool] = None,
                 job_id: Optional[builtins.str] = None,
                 step_configuration_details: Optional['outputs.PipelineStepDetailStepConfigurationDetails'] = None,
                 step_container_configuration_details: Optional['outputs.PipelineStepDetailStepContainerConfigurationDetails'] = None,
                 step_dataflow_configuration_details: Optional['outputs.PipelineStepDetailStepDataflowConfigurationDetails'] = None,
                 step_infrastructure_configuration_details: Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetails'] = None,
                 step_storage_mount_configuration_details_lists: Optional[Sequence['outputs.PipelineStepDetailStepStorageMountConfigurationDetailsList']] = None):
        """
        :param builtins.str step_name: (Updatable) The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        :param builtins.str step_type: (Updatable) The type of step.
        :param builtins.str application_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow application to be used as a step.
        :param Sequence[builtins.str] depends_ons: The list of step names this current step depends on for execution.
        :param builtins.str description: (Updatable) A short description of the step.
        :param builtins.bool is_artifact_uploaded: A flag to indicate whether the artifact has been uploaded for this step or not.
        :param builtins.str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        :param 'PipelineStepDetailStepConfigurationDetailsArgs' step_configuration_details: (Updatable) The configuration details of a step.
        :param 'PipelineStepDetailStepContainerConfigurationDetailsArgs' step_container_configuration_details: Container Details for a step in pipeline.
        :param 'PipelineStepDetailStepDataflowConfigurationDetailsArgs' step_dataflow_configuration_details: (Updatable) The configuration details of a Dataflow step.
        :param 'PipelineStepDetailStepInfrastructureConfigurationDetailsArgs' step_infrastructure_configuration_details: (Updatable) The infrastructure configuration details of a pipeline or a step.
        :param Sequence['PipelineStepDetailStepStorageMountConfigurationDetailsListArgs'] step_storage_mount_configuration_details_lists: (Updatable) The storage mount details to mount to the instance running the pipeline step.
        """
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_type", step_type)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_artifact_uploaded is not None:
            pulumi.set(__self__, "is_artifact_uploaded", is_artifact_uploaded)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if step_configuration_details is not None:
            pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        if step_container_configuration_details is not None:
            pulumi.set(__self__, "step_container_configuration_details", step_container_configuration_details)
        if step_dataflow_configuration_details is not None:
            pulumi.set(__self__, "step_dataflow_configuration_details", step_dataflow_configuration_details)
        if step_infrastructure_configuration_details is not None:
            pulumi.set(__self__, "step_infrastructure_configuration_details", step_infrastructure_configuration_details)
        if step_storage_mount_configuration_details_lists is not None:
            pulumi.set(__self__, "step_storage_mount_configuration_details_lists", step_storage_mount_configuration_details_lists)

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        (Updatable) The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> builtins.str:
        """
        (Updatable) The type of step.
        """
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow application to be used as a step.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of step names this current step depends on for execution.
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        (Updatable) A short description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isArtifactUploaded")
    def is_artifact_uploaded(self) -> Optional[builtins.bool]:
        """
        A flag to indicate whether the artifact has been uploaded for this step or not.
        """
        return pulumi.get(self, "is_artifact_uploaded")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[builtins.str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Optional['outputs.PipelineStepDetailStepConfigurationDetails']:
        """
        (Updatable) The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepContainerConfigurationDetails")
    def step_container_configuration_details(self) -> Optional['outputs.PipelineStepDetailStepContainerConfigurationDetails']:
        """
        Container Details for a step in pipeline.
        """
        return pulumi.get(self, "step_container_configuration_details")

    @property
    @pulumi.getter(name="stepDataflowConfigurationDetails")
    def step_dataflow_configuration_details(self) -> Optional['outputs.PipelineStepDetailStepDataflowConfigurationDetails']:
        """
        (Updatable) The configuration details of a Dataflow step.
        """
        return pulumi.get(self, "step_dataflow_configuration_details")

    @property
    @pulumi.getter(name="stepInfrastructureConfigurationDetails")
    def step_infrastructure_configuration_details(self) -> Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetails']:
        """
        (Updatable) The infrastructure configuration details of a pipeline or a step.
        """
        return pulumi.get(self, "step_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="stepStorageMountConfigurationDetailsLists")
    def step_storage_mount_configuration_details_lists(self) -> Optional[Sequence['outputs.PipelineStepDetailStepStorageMountConfigurationDetailsList']]:
        """
        (Updatable) The storage mount details to mount to the instance running the pipeline step.
        """
        return pulumi.get(self, "step_storage_mount_configuration_details_lists")


@pulumi.output_type
class PipelineStepDetailStepConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None):
        """
        :param builtins.str command_line_arguments: (Updatable) The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: (Updatable) Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: (Updatable) A time bound for the execution of the step.
        """
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        (Updatable) The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        (Updatable) A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineStepDetailStepContainerConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerType":
            suggest = "container_type"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "imageSignatureId":
            suggest = "image_signature_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepContainerConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepContainerConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepContainerConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_type: builtins.str,
                 image: builtins.str,
                 cmds: Optional[Sequence[builtins.str]] = None,
                 entrypoints: Optional[Sequence[builtins.str]] = None,
                 image_digest: Optional[builtins.str] = None,
                 image_signature_id: Optional[builtins.str] = None):
        """
        :param builtins.str container_type: The type of container.
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "image", image)
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_signature_id is not None:
            pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> builtins.str:
        """
        The type of container.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[builtins.str]]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[builtins.str]]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[builtins.str]:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> Optional[builtins.str]:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class PipelineStepDetailStepDataflowConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "driverShape":
            suggest = "driver_shape"
        elif key == "driverShapeConfigDetails":
            suggest = "driver_shape_config_details"
        elif key == "executorShape":
            suggest = "executor_shape"
        elif key == "executorShapeConfigDetails":
            suggest = "executor_shape_config_details"
        elif key == "logsBucketUri":
            suggest = "logs_bucket_uri"
        elif key == "numExecutors":
            suggest = "num_executors"
        elif key == "warehouseBucketUri":
            suggest = "warehouse_bucket_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepDataflowConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepDataflowConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepDataflowConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration: Optional[Mapping[str, builtins.str]] = None,
                 driver_shape: Optional[builtins.str] = None,
                 driver_shape_config_details: Optional['outputs.PipelineStepDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails'] = None,
                 executor_shape: Optional[builtins.str] = None,
                 executor_shape_config_details: Optional['outputs.PipelineStepDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails'] = None,
                 logs_bucket_uri: Optional[builtins.str] = None,
                 num_executors: Optional[builtins.int] = None,
                 warehouse_bucket_uri: Optional[builtins.str] = None):
        """
        :param Mapping[str, builtins.str] configuration: (Updatable) The Spark configuration passed to the running process.
        :param builtins.str driver_shape: (Updatable) The VM shape for the driver.
        :param 'PipelineStepDetailStepDataflowConfigurationDetailsDriverShapeConfigDetailsArgs' driver_shape_config_details: (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str executor_shape: (Updatable) The VM shape for the executors.
        :param 'PipelineStepDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetailsArgs' executor_shape_config_details: (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str logs_bucket_uri: (Updatable) An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        :param builtins.int num_executors: (Updatable) The number of executor VMs requested.
        :param builtins.str warehouse_bucket_uri: (Updatable) An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if driver_shape is not None:
            pulumi.set(__self__, "driver_shape", driver_shape)
        if driver_shape_config_details is not None:
            pulumi.set(__self__, "driver_shape_config_details", driver_shape_config_details)
        if executor_shape is not None:
            pulumi.set(__self__, "executor_shape", executor_shape)
        if executor_shape_config_details is not None:
            pulumi.set(__self__, "executor_shape_config_details", executor_shape_config_details)
        if logs_bucket_uri is not None:
            pulumi.set(__self__, "logs_bucket_uri", logs_bucket_uri)
        if num_executors is not None:
            pulumi.set(__self__, "num_executors", num_executors)
        if warehouse_bucket_uri is not None:
            pulumi.set(__self__, "warehouse_bucket_uri", warehouse_bucket_uri)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) The Spark configuration passed to the running process.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="driverShape")
    def driver_shape(self) -> Optional[builtins.str]:
        """
        (Updatable) The VM shape for the driver.
        """
        return pulumi.get(self, "driver_shape")

    @property
    @pulumi.getter(name="driverShapeConfigDetails")
    def driver_shape_config_details(self) -> Optional['outputs.PipelineStepDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails']:
        """
        (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "driver_shape_config_details")

    @property
    @pulumi.getter(name="executorShape")
    def executor_shape(self) -> Optional[builtins.str]:
        """
        (Updatable) The VM shape for the executors.
        """
        return pulumi.get(self, "executor_shape")

    @property
    @pulumi.getter(name="executorShapeConfigDetails")
    def executor_shape_config_details(self) -> Optional['outputs.PipelineStepDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails']:
        """
        (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "executor_shape_config_details")

    @property
    @pulumi.getter(name="logsBucketUri")
    def logs_bucket_uri(self) -> Optional[builtins.str]:
        """
        (Updatable) An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        """
        return pulumi.get(self, "logs_bucket_uri")

    @property
    @pulumi.getter(name="numExecutors")
    def num_executors(self) -> Optional[builtins.int]:
        """
        (Updatable) The number of executor VMs requested.
        """
        return pulumi.get(self, "num_executors")

    @property
    @pulumi.getter(name="warehouseBucketUri")
    def warehouse_bucket_uri(self) -> Optional[builtins.str]:
        """
        (Updatable) An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        return pulumi.get(self, "warehouse_bucket_uri")


@pulumi.output_type
class PipelineStepDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepDataflowConfigurationDetailsDriverShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class PipelineStepDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepDataflowConfigurationDetailsExecutorShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class PipelineStepDetailStepInfrastructureConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "shapeConfigDetails":
            suggest = "shape_config_details"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepInfrastructureConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 shape_name: builtins.str,
                 shape_config_details: Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails'] = None,
                 subnet_id: Optional[builtins.str] = None):
        """
        :param builtins.int block_storage_size_in_gbs: (Updatable) The size of the block storage volume to attach to the instance.
        :param builtins.str shape_name: (Updatable) The shape used to launch the instance for all step runs in the pipeline.
        :param 'PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetailsArgs' shape_config_details: (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str subnet_id: (Updatable) The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "shape_name", shape_name)
        if shape_config_details is not None:
            pulumi.set(__self__, "shape_config_details", shape_config_details)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        (Updatable) The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        (Updatable) The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails']:
        """
        (Updatable) Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[builtins.float] = None,
                 ocpus: Optional[builtins.float] = None):
        """
        :param builtins.float memory_in_gbs: (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[builtins.float]:
        """
        (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[builtins.float]:
        """
        (Updatable) A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class PipelineStepDetailStepStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_directory_name: builtins.str,
                 storage_type: builtins.str,
                 bucket: Optional[builtins.str] = None,
                 destination_path: Optional[builtins.str] = None,
                 export_id: Optional[builtins.str] = None,
                 mount_target_id: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 prefix: Optional[builtins.str] = None):
        """
        :param builtins.str destination_directory_name: (Updatable) The local directory name to be mounted
        :param builtins.str storage_type: (Updatable) The type of storage.
        :param builtins.str bucket: (Updatable) The object storage bucket
        :param builtins.str destination_path: (Updatable) The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: (Updatable) OCID of the export
        :param builtins.str mount_target_id: (Updatable) OCID of the mount target
        :param builtins.str namespace: (Updatable) The object storage namespace
        :param builtins.str prefix: (Updatable) Prefix in the bucket to mount
        """
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "storage_type", storage_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        (Updatable) The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        (Updatable) The type of storage.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        (Updatable) The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[builtins.str]:
        """
        (Updatable) The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        (Updatable) The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        (Updatable) Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class PipelineStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_directory_name: builtins.str,
                 storage_type: builtins.str,
                 bucket: Optional[builtins.str] = None,
                 destination_path: Optional[builtins.str] = None,
                 export_id: Optional[builtins.str] = None,
                 mount_target_id: Optional[builtins.str] = None,
                 namespace: Optional[builtins.str] = None,
                 prefix: Optional[builtins.str] = None):
        """
        :param builtins.str destination_directory_name: (Updatable) The local directory name to be mounted
        :param builtins.str storage_type: (Updatable) The type of storage.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param builtins.str bucket: (Updatable) The object storage bucket
        :param builtins.str destination_path: (Updatable) The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: (Updatable) OCID of the export
        :param builtins.str mount_target_id: (Updatable) OCID of the mount target
        :param builtins.str namespace: (Updatable) The object storage namespace
        :param builtins.str prefix: (Updatable) Prefix in the bucket to mount
        """
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "storage_type", storage_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        (Updatable) The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        (Updatable) The type of storage.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[builtins.str]:
        """
        (Updatable) The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[builtins.str]:
        """
        (Updatable) The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        (Updatable) The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        (Updatable) Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class ScheduleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionDetails":
            suggest = "action_details"
        elif key == "actionType":
            suggest = "action_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_details: 'outputs.ScheduleActionActionDetails',
                 action_type: builtins.str):
        """
        :param 'ScheduleActionActionDetailsArgs' action_details: (Updatable) Schedule Http action details
        :param builtins.str action_type: (Updatable) The Schedule Action type
        """
        pulumi.set(__self__, "action_details", action_details)
        pulumi.set(__self__, "action_type", action_type)

    @property
    @pulumi.getter(name="actionDetails")
    def action_details(self) -> 'outputs.ScheduleActionActionDetails':
        """
        (Updatable) Schedule Http action details
        """
        return pulumi.get(self, "action_details")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> builtins.str:
        """
        (Updatable) The Schedule Action type
        """
        return pulumi.get(self, "action_type")


@pulumi.output_type
class ScheduleActionActionDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpActionType":
            suggest = "http_action_type"
        elif key == "createJobRunDetails":
            suggest = "create_job_run_details"
        elif key == "createPipelineRunDetails":
            suggest = "create_pipeline_run_details"
        elif key == "mlApplicationInstanceViewId":
            suggest = "ml_application_instance_view_id"
        elif key == "triggerMlApplicationInstanceViewFlowDetails":
            suggest = "trigger_ml_application_instance_view_flow_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_action_type: builtins.str,
                 create_job_run_details: Optional['outputs.ScheduleActionActionDetailsCreateJobRunDetails'] = None,
                 create_pipeline_run_details: Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetails'] = None,
                 ml_application_instance_view_id: Optional[builtins.str] = None,
                 trigger_ml_application_instance_view_flow_details: Optional['outputs.ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetails'] = None):
        """
        :param builtins.str http_action_type: (Updatable) The type of http action to trigger.
        :param 'ScheduleActionActionDetailsCreateJobRunDetailsArgs' create_job_run_details: (Updatable) Parameters needed to create a new job run.
        :param 'ScheduleActionActionDetailsCreatePipelineRunDetailsArgs' create_pipeline_run_details: (Updatable) The information about new PipelineRun.
        :param builtins.str ml_application_instance_view_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the schedule.
        :param 'ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetailsArgs' trigger_ml_application_instance_view_flow_details: (Updatable) Payload for trigger request endpoint
        """
        pulumi.set(__self__, "http_action_type", http_action_type)
        if create_job_run_details is not None:
            pulumi.set(__self__, "create_job_run_details", create_job_run_details)
        if create_pipeline_run_details is not None:
            pulumi.set(__self__, "create_pipeline_run_details", create_pipeline_run_details)
        if ml_application_instance_view_id is not None:
            pulumi.set(__self__, "ml_application_instance_view_id", ml_application_instance_view_id)
        if trigger_ml_application_instance_view_flow_details is not None:
            pulumi.set(__self__, "trigger_ml_application_instance_view_flow_details", trigger_ml_application_instance_view_flow_details)

    @property
    @pulumi.getter(name="httpActionType")
    def http_action_type(self) -> builtins.str:
        """
        (Updatable) The type of http action to trigger.
        """
        return pulumi.get(self, "http_action_type")

    @property
    @pulumi.getter(name="createJobRunDetails")
    def create_job_run_details(self) -> Optional['outputs.ScheduleActionActionDetailsCreateJobRunDetails']:
        """
        (Updatable) Parameters needed to create a new job run.
        """
        return pulumi.get(self, "create_job_run_details")

    @property
    @pulumi.getter(name="createPipelineRunDetails")
    def create_pipeline_run_details(self) -> Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetails']:
        """
        (Updatable) The information about new PipelineRun.
        """
        return pulumi.get(self, "create_pipeline_run_details")

    @property
    @pulumi.getter(name="mlApplicationInstanceViewId")
    def ml_application_instance_view_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the schedule.
        """
        return pulumi.get(self, "ml_application_instance_view_id")

    @property
    @pulumi.getter(name="triggerMlApplicationInstanceViewFlowDetails")
    def trigger_ml_application_instance_view_flow_details(self) -> Optional['outputs.ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetails']:
        """
        (Updatable) Payload for trigger request endpoint
        """
        return pulumi.get(self, "trigger_ml_application_instance_view_flow_details")


@pulumi.output_type
class ScheduleActionActionDetailsCreateJobRunDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "jobConfigurationOverrideDetails":
            suggest = "job_configuration_override_details"
        elif key == "jobEnvironmentConfigurationOverrideDetails":
            suggest = "job_environment_configuration_override_details"
        elif key == "jobId":
            suggest = "job_id"
        elif key == "jobLogConfigurationOverrideDetails":
            suggest = "job_log_configuration_override_details"
        elif key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreateJobRunDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreateJobRunDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreateJobRunDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[builtins.str] = None,
                 defined_tags: Optional[Mapping[str, builtins.str]] = None,
                 display_name: Optional[builtins.str] = None,
                 freeform_tags: Optional[Mapping[str, builtins.str]] = None,
                 job_configuration_override_details: Optional['outputs.ScheduleActionActionDetailsCreateJobRunDetailsJobConfigurationOverrideDetails'] = None,
                 job_environment_configuration_override_details: Optional['outputs.ScheduleActionActionDetailsCreateJobRunDetailsJobEnvironmentConfigurationOverrideDetails'] = None,
                 job_id: Optional[builtins.str] = None,
                 job_log_configuration_override_details: Optional['outputs.ScheduleActionActionDetailsCreateJobRunDetailsJobLogConfigurationOverrideDetails'] = None,
                 project_id: Optional[builtins.str] = None):
        """
        :param builtins.str compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the job run.
        :param Mapping[str, builtins.str] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: (Updatable) A user-friendly display name for the resource.
        :param Mapping[str, builtins.str] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param 'ScheduleActionActionDetailsCreateJobRunDetailsJobConfigurationOverrideDetailsArgs' job_configuration_override_details: (Updatable) The job configuration details
        :param 'ScheduleActionActionDetailsCreateJobRunDetailsJobEnvironmentConfigurationOverrideDetailsArgs' job_environment_configuration_override_details: (Updatable) Environment configuration to capture job runtime dependencies.
        :param builtins.str job_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to create a run for.
        :param 'ScheduleActionActionDetailsCreateJobRunDetailsJobLogConfigurationOverrideDetailsArgs' job_log_configuration_override_details: (Updatable) Logging configuration for resource.
        :param builtins.str project_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the job run with.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if job_configuration_override_details is not None:
            pulumi.set(__self__, "job_configuration_override_details", job_configuration_override_details)
        if job_environment_configuration_override_details is not None:
            pulumi.set(__self__, "job_environment_configuration_override_details", job_environment_configuration_override_details)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if job_log_configuration_override_details is not None:
            pulumi.set(__self__, "job_log_configuration_override_details", job_log_configuration_override_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the job run.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly display name for the resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="jobConfigurationOverrideDetails")
    def job_configuration_override_details(self) -> Optional['outputs.ScheduleActionActionDetailsCreateJobRunDetailsJobConfigurationOverrideDetails']:
        """
        (Updatable) The job configuration details
        """
        return pulumi.get(self, "job_configuration_override_details")

    @property
    @pulumi.getter(name="jobEnvironmentConfigurationOverrideDetails")
    def job_environment_configuration_override_details(self) -> Optional['outputs.ScheduleActionActionDetailsCreateJobRunDetailsJobEnvironmentConfigurationOverrideDetails']:
        """
        (Updatable) Environment configuration to capture job runtime dependencies.
        """
        return pulumi.get(self, "job_environment_configuration_override_details")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to create a run for.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobLogConfigurationOverrideDetails")
    def job_log_configuration_override_details(self) -> Optional['outputs.ScheduleActionActionDetailsCreateJobRunDetailsJobLogConfigurationOverrideDetails']:
        """
        (Updatable) Logging configuration for resource.
        """
        return pulumi.get(self, "job_log_configuration_override_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the job run with.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class ScheduleActionActionDetailsCreateJobRunDetailsJobConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobType":
            suggest = "job_type"
        elif key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreateJobRunDetailsJobConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreateJobRunDetailsJobConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreateJobRunDetailsJobConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_type: builtins.str,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None):
        """
        :param builtins.str job_type: (Updatable) The type of job.
        :param builtins.str command_line_arguments: (Updatable) The arguments to pass to the job.
        :param Mapping[str, builtins.str] environment_variables: (Updatable) Environment variables to set for the job.
        :param builtins.str maximum_runtime_in_minutes: (Updatable) A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        pulumi.set(__self__, "job_type", job_type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> builtins.str:
        """
        (Updatable) The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        (Updatable) The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        (Updatable) A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class ScheduleActionActionDetailsCreateJobRunDetailsJobEnvironmentConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobEnvironmentType":
            suggest = "job_environment_type"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "imageSignatureId":
            suggest = "image_signature_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreateJobRunDetailsJobEnvironmentConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreateJobRunDetailsJobEnvironmentConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreateJobRunDetailsJobEnvironmentConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: builtins.str,
                 job_environment_type: builtins.str,
                 cmds: Optional[Sequence[builtins.str]] = None,
                 entrypoints: Optional[Sequence[builtins.str]] = None,
                 image_digest: Optional[builtins.str] = None,
                 image_signature_id: Optional[builtins.str] = None):
        """
        :param builtins.str image: (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str job_environment_type: (Updatable) The environment configuration type used for job runtime.
        :param Sequence[builtins.str] cmds: (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image_digest: (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: (Updatable) OCID of the container image signature
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "job_environment_type", job_environment_type)
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_signature_id is not None:
            pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="jobEnvironmentType")
    def job_environment_type(self) -> builtins.str:
        """
        (Updatable) The environment configuration type used for job runtime.
        """
        return pulumi.get(self, "job_environment_type")

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[builtins.str]:
        """
        (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class ScheduleActionActionDetailsCreateJobRunDetailsJobLogConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreateJobRunDetailsJobLogConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreateJobRunDetailsJobLogConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreateJobRunDetailsJobLogConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[builtins.bool] = None,
                 enable_logging: Optional[builtins.bool] = None,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_auto_log_creation: (Updatable) If automatic on-behalf-of log object creation is enabled for job runs.
        :param builtins.bool enable_logging: (Updatable) If customer logging is enabled for job runs.
        :param builtins.str log_group_id: (Updatable) The log group id for where log objects are for job runs.
        :param builtins.str log_id: (Updatable) The log id the job run will push logs too.
        """
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[builtins.bool]:
        """
        (Updatable) If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[builtins.bool]:
        """
        (Updatable) If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ScheduleActionActionDetailsCreatePipelineRunDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "configurationOverrideDetails":
            suggest = "configuration_override_details"
        elif key == "definedTags":
            suggest = "defined_tags"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "freeformTags":
            suggest = "freeform_tags"
        elif key == "logConfigurationOverrideDetails":
            suggest = "log_configuration_override_details"
        elif key == "pipelineId":
            suggest = "pipeline_id"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "stepOverrideDetails":
            suggest = "step_override_details"
        elif key == "systemTags":
            suggest = "system_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreatePipelineRunDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[builtins.str] = None,
                 configuration_override_details: Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsConfigurationOverrideDetails'] = None,
                 defined_tags: Optional[Mapping[str, builtins.str]] = None,
                 display_name: Optional[builtins.str] = None,
                 freeform_tags: Optional[Mapping[str, builtins.str]] = None,
                 log_configuration_override_details: Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsLogConfigurationOverrideDetails'] = None,
                 pipeline_id: Optional[builtins.str] = None,
                 project_id: Optional[builtins.str] = None,
                 step_override_details: Optional[Sequence['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetail']] = None,
                 system_tags: Optional[Mapping[str, builtins.str]] = None):
        """
        :param builtins.str compartment_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the pipeline run.
        :param 'ScheduleActionActionDetailsCreatePipelineRunDetailsConfigurationOverrideDetailsArgs' configuration_override_details: (Updatable) The configuration details of a pipeline.
        :param Mapping[str, builtins.str] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: (Updatable) A user-friendly display name for the resource.
        :param Mapping[str, builtins.str] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param 'ScheduleActionActionDetailsCreatePipelineRunDetailsLogConfigurationOverrideDetailsArgs' log_configuration_override_details: (Updatable) The pipeline log configuration details.
        :param builtins.str pipeline_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline for which pipeline run is created.
        :param builtins.str project_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the pipeline run with.
        :param Sequence['ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailArgs'] step_override_details: (Updatable) Array of step override details. Only Step Configuration is allowed to be overridden.
        :param Mapping[str, builtins.str] system_tags: (Updatable) Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if configuration_override_details is not None:
            pulumi.set(__self__, "configuration_override_details", configuration_override_details)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if log_configuration_override_details is not None:
            pulumi.set(__self__, "log_configuration_override_details", log_configuration_override_details)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if step_override_details is not None:
            pulumi.set(__self__, "step_override_details", step_override_details)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the pipeline run.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationOverrideDetails")
    def configuration_override_details(self) -> Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsConfigurationOverrideDetails']:
        """
        (Updatable) The configuration details of a pipeline.
        """
        return pulumi.get(self, "configuration_override_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        (Updatable) A user-friendly display name for the resource.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="logConfigurationOverrideDetails")
    def log_configuration_override_details(self) -> Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsLogConfigurationOverrideDetails']:
        """
        (Updatable) The pipeline log configuration details.
        """
        return pulumi.get(self, "log_configuration_override_details")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline for which pipeline run is created.
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the pipeline run with.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="stepOverrideDetails")
    def step_override_details(self) -> Optional[Sequence['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetail']]:
        """
        (Updatable) Array of step override details. Only Step Configuration is allowed to be overridden.
        """
        return pulumi.get(self, "step_override_details")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class ScheduleActionActionDetailsCreatePipelineRunDetailsConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreatePipelineRunDetailsConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: builtins.str,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None):
        """
        :param builtins.str type: (Updatable) The type of pipeline.
        :param builtins.str command_line_arguments: (Updatable) The command line arguments to set for steps in the pipeline.
        :param Mapping[str, builtins.str] environment_variables: (Updatable) Environment variables to set for steps in the pipeline.
        :param builtins.str maximum_runtime_in_minutes: (Updatable) A time bound for the execution of the entire Pipeline. Timer starts when the Pipeline Run is in progress.
        """
        pulumi.set(__self__, "type", type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (Updatable) The type of pipeline.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        (Updatable) The command line arguments to set for steps in the pipeline.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Environment variables to set for steps in the pipeline.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        (Updatable) A time bound for the execution of the entire Pipeline. Timer starts when the Pipeline Run is in progress.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class ScheduleActionActionDetailsCreatePipelineRunDetailsLogConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreatePipelineRunDetailsLogConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsLogConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsLogConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[builtins.bool] = None,
                 enable_logging: Optional[builtins.bool] = None,
                 log_group_id: Optional[builtins.str] = None,
                 log_id: Optional[builtins.str] = None):
        """
        :param builtins.bool enable_auto_log_creation: (Updatable) If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: (Updatable) If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[builtins.bool]:
        """
        (Updatable) If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[builtins.bool]:
        """
        (Updatable) If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[builtins.str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepConfigurationDetails":
            suggest = "step_configuration_details"
        elif key == "stepContainerConfigurationDetails":
            suggest = "step_container_configuration_details"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_configuration_details: Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepConfigurationDetails'] = None,
                 step_container_configuration_details: Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepContainerConfigurationDetails'] = None,
                 step_name: Optional[builtins.str] = None):
        """
        :param 'ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepConfigurationDetailsArgs' step_configuration_details: (Updatable) The configuration details of a step.
        :param 'ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepContainerConfigurationDetailsArgs' step_container_configuration_details: (Updatable) Container Details for a step in pipeline.
        :param builtins.str step_name: (Updatable) The name of the step.
        """
        if step_configuration_details is not None:
            pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        if step_container_configuration_details is not None:
            pulumi.set(__self__, "step_container_configuration_details", step_container_configuration_details)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepConfigurationDetails']:
        """
        (Updatable) The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepContainerConfigurationDetails")
    def step_container_configuration_details(self) -> Optional['outputs.ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepContainerConfigurationDetails']:
        """
        (Updatable) Container Details for a step in pipeline.
        """
        return pulumi.get(self, "step_container_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[builtins.str]:
        """
        (Updatable) The name of the step.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[builtins.str] = None,
                 environment_variables: Optional[Mapping[str, builtins.str]] = None,
                 maximum_runtime_in_minutes: Optional[builtins.str] = None):
        """
        :param builtins.str command_line_arguments: (Updatable) The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: (Updatable) Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: (Updatable) A time bound for the execution of the step.
        """
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[builtins.str]:
        """
        (Updatable) The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        (Updatable) Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[builtins.str]:
        """
        (Updatable) A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepContainerConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerType":
            suggest = "container_type"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "imageSignatureId":
            suggest = "image_signature_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepContainerConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepContainerConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsCreatePipelineRunDetailsStepOverrideDetailStepContainerConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_type: builtins.str,
                 image: builtins.str,
                 cmds: Optional[Sequence[builtins.str]] = None,
                 entrypoints: Optional[Sequence[builtins.str]] = None,
                 image_digest: Optional[builtins.str] = None,
                 image_signature_id: Optional[builtins.str] = None):
        """
        :param builtins.str container_type: (Updatable) The type of container.
        :param builtins.str image: (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param Sequence[builtins.str] cmds: (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image_digest: (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: (Updatable) OCID of the container image signature
        """
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "image", image)
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_signature_id is not None:
            pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> builtins.str:
        """
        (Updatable) The type of container.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[builtins.str]]:
        """
        (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[builtins.str]:
        """
        (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> Optional[builtins.str]:
        """
        (Updatable) OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerName":
            suggest = "trigger_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameters: Optional[Sequence['outputs.ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetailsParameter']] = None,
                 trigger_name: Optional[builtins.str] = None):
        """
        :param Sequence['ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetailsParameterArgs'] parameters: (Updatable) Parameters provided for given trigger invocation (they must match predefined schema)
        :param builtins.str trigger_name: (Updatable) Name of trigger
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if trigger_name is not None:
            pulumi.set(__self__, "trigger_name", trigger_name)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetailsParameter']]:
        """
        (Updatable) Parameters provided for given trigger invocation (they must match predefined schema)
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of trigger
        """
        return pulumi.get(self, "trigger_name")


@pulumi.output_type
class ScheduleActionActionDetailsTriggerMlApplicationInstanceViewFlowDetailsParameter(dict):
    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str name: (Updatable) Name of trigger parameter
        :param builtins.str value: (Updatable) Value of trigger parameter
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (Updatable) Name of trigger parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        (Updatable) Value of trigger parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ScheduleLogDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleLogDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleLogDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleLogDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ScheduleTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerType":
            suggest = "trigger_type"
        elif key == "cronExpression":
            suggest = "cron_expression"
        elif key == "isRandomStartTime":
            suggest = "is_random_start_time"
        elif key == "timeEnd":
            suggest = "time_end"
        elif key == "timeStart":
            suggest = "time_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduleTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduleTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduleTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trigger_type: builtins.str,
                 cron_expression: Optional[builtins.str] = None,
                 frequency: Optional[builtins.str] = None,
                 interval: Optional[builtins.int] = None,
                 is_random_start_time: Optional[builtins.bool] = None,
                 recurrence: Optional[builtins.str] = None,
                 time_end: Optional[builtins.str] = None,
                 time_start: Optional[builtins.str] = None):
        """
        :param builtins.str trigger_type: (Updatable) The schedule trigger type
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param builtins.str cron_expression: (Updatable) Schedule cron expression
        :param builtins.str frequency: (Updatable) The type of frequency
        :param builtins.int interval: (Updatable) The interval of frequency.
        :param builtins.bool is_random_start_time: (Updatable) when true and timeStart is null, system generate a random start time between now and now + interval;  isRandomStartTime can be true if timeStart is null.
        :param builtins.str recurrence: (Updatable) This recurrence field conforms to RFC-5545 formatting
        :param builtins.str time_end: (Updatable) The schedule end date time, if null, the schedule will never expire. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_start: (Updatable) The schedule starting date time, if null, System set the time when schedule is created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "trigger_type", trigger_type)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if is_random_start_time is not None:
            pulumi.set(__self__, "is_random_start_time", is_random_start_time)
        if recurrence is not None:
            pulumi.set(__self__, "recurrence", recurrence)
        if time_end is not None:
            pulumi.set(__self__, "time_end", time_end)
        if time_start is not None:
            pulumi.set(__self__, "time_start", time_start)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> builtins.str:
        """
        (Updatable) The schedule trigger type


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "trigger_type")

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[builtins.str]:
        """
        (Updatable) Schedule cron expression
        """
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter
    def frequency(self) -> Optional[builtins.str]:
        """
        (Updatable) The type of frequency
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def interval(self) -> Optional[builtins.int]:
        """
        (Updatable) The interval of frequency.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="isRandomStartTime")
    def is_random_start_time(self) -> Optional[builtins.bool]:
        """
        (Updatable) when true and timeStart is null, system generate a random start time between now and now + interval;  isRandomStartTime can be true if timeStart is null.
        """
        return pulumi.get(self, "is_random_start_time")

    @property
    @pulumi.getter
    def recurrence(self) -> Optional[builtins.str]:
        """
        (Updatable) This recurrence field conforms to RFC-5545 formatting
        """
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> Optional[builtins.str]:
        """
        (Updatable) The schedule end date time, if null, the schedule will never expire. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> Optional[builtins.str]:
        """
        (Updatable) The schedule starting date time, if null, System set the time when schedule is created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_start")


@pulumi.output_type
class GetContainersContainerResult(dict):
    def __init__(__self__, *,
                 container_name: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 family_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 is_latest: builtins.bool,
                 state: builtins.str,
                 tag: builtins.str,
                 tag_configuration_lists: Sequence['outputs.GetContainersContainerTagConfigurationListResult'],
                 target_workloads: Sequence[builtins.str],
                 usages: Sequence[builtins.str],
                 workload_configuration_details_lists: Sequence['outputs.GetContainersContainerWorkloadConfigurationDetailsListResult']):
        """
        :param builtins.str container_name: <b>Filter</b> results by the container name.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: Description of the container.
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param builtins.str family_name: The family name of the container.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.bool is_latest: if true, this returns latest version of container.
        :param builtins.str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param builtins.str tag: Container Tag.
        :param Sequence['GetContainersContainerTagConfigurationListArgs'] tag_configuration_lists: An array of defined metadata details for the model.
        :param Sequence[builtins.str] target_workloads: The list of target workload. This Container can be used with given data science resources.
        :param Sequence[builtins.str] usages: The list of usages of this container. This Container can be used for given use-cases.
        :param Sequence['GetContainersContainerWorkloadConfigurationDetailsListArgs'] workload_configuration_details_lists: workload configuration of the container.
        """
        pulumi.set(__self__, "container_name", container_name)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "is_latest", is_latest)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "tag_configuration_lists", tag_configuration_lists)
        pulumi.set(__self__, "target_workloads", target_workloads)
        pulumi.set(__self__, "usages", usages)
        pulumi.set(__self__, "workload_configuration_details_lists", workload_configuration_details_lists)

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> builtins.str:
        """
        <b>Filter</b> results by the container name.
        """
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the container.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> builtins.str:
        """
        The family name of the container.
        """
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> builtins.bool:
        """
        if true, this returns latest version of container.
        """
        return pulumi.get(self, "is_latest")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tag(self) -> builtins.str:
        """
        Container Tag.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="tagConfigurationLists")
    def tag_configuration_lists(self) -> Sequence['outputs.GetContainersContainerTagConfigurationListResult']:
        """
        An array of defined metadata details for the model.
        """
        return pulumi.get(self, "tag_configuration_lists")

    @property
    @pulumi.getter(name="targetWorkloads")
    def target_workloads(self) -> Sequence[builtins.str]:
        """
        The list of target workload. This Container can be used with given data science resources.
        """
        return pulumi.get(self, "target_workloads")

    @property
    @pulumi.getter
    def usages(self) -> Sequence[builtins.str]:
        """
        The list of usages of this container. This Container can be used for given use-cases.
        """
        return pulumi.get(self, "usages")

    @property
    @pulumi.getter(name="workloadConfigurationDetailsLists")
    def workload_configuration_details_lists(self) -> Sequence['outputs.GetContainersContainerWorkloadConfigurationDetailsListResult']:
        """
        workload configuration of the container.
        """
        return pulumi.get(self, "workload_configuration_details_lists")


@pulumi.output_type
class GetContainersContainerTagConfigurationListResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: Key of the container tag Metadata
        :param builtins.str value: Value of the container tag Metadata
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Key of the container tag Metadata
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of the container tag Metadata
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetContainersContainerWorkloadConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 additional_configurations: Mapping[str, builtins.str],
                 cmd: builtins.str,
                 health_check_port: builtins.int,
                 server_port: builtins.int,
                 use_case_configurations: Sequence['outputs.GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfigurationResult'],
                 workload_type: builtins.str):
        """
        :param Mapping[str, builtins.str] additional_configurations: The additional configurations
        :param builtins.str cmd: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param builtins.int health_check_port: The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        :param builtins.int server_port: The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        :param Sequence['GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfigurationArgs'] use_case_configurations: The use-case configuration details
        :param builtins.str workload_type: The workload use case.
        """
        pulumi.set(__self__, "additional_configurations", additional_configurations)
        pulumi.set(__self__, "cmd", cmd)
        pulumi.set(__self__, "health_check_port", health_check_port)
        pulumi.set(__self__, "server_port", server_port)
        pulumi.set(__self__, "use_case_configurations", use_case_configurations)
        pulumi.set(__self__, "workload_type", workload_type)

    @property
    @pulumi.getter(name="additionalConfigurations")
    def additional_configurations(self) -> Mapping[str, builtins.str]:
        """
        The additional configurations
        """
        return pulumi.get(self, "additional_configurations")

    @property
    @pulumi.getter
    def cmd(self) -> builtins.str:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmd")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> builtins.int:
        """
        The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> builtins.int:
        """
        The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter(name="useCaseConfigurations")
    def use_case_configurations(self) -> Sequence['outputs.GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfigurationResult']:
        """
        The use-case configuration details
        """
        return pulumi.get(self, "use_case_configurations")

    @property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> builtins.str:
        """
        The workload use case.
        """
        return pulumi.get(self, "workload_type")


@pulumi.output_type
class GetContainersContainerWorkloadConfigurationDetailsListUseCaseConfigurationResult(dict):
    def __init__(__self__, *,
                 additional_configurations: Mapping[str, builtins.str],
                 use_case_type: builtins.str):
        """
        :param Mapping[str, builtins.str] additional_configurations: The additional configurations
        :param builtins.str use_case_type: The job-run use-case.
        """
        pulumi.set(__self__, "additional_configurations", additional_configurations)
        pulumi.set(__self__, "use_case_type", use_case_type)

    @property
    @pulumi.getter(name="additionalConfigurations")
    def additional_configurations(self) -> Mapping[str, builtins.str]:
        """
        The additional configurations
        """
        return pulumi.get(self, "additional_configurations")

    @property
    @pulumi.getter(name="useCaseType")
    def use_case_type(self) -> builtins.str:
        """
        The job-run use-case.
        """
        return pulumi.get(self, "use_case_type")


@pulumi.output_type
class GetContainersFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFastLaunchJobConfigsFastLaunchJobConfigResult(dict):
    def __init__(__self__, *,
                 core_count: builtins.int,
                 managed_egress_support: builtins.str,
                 memory_in_gbs: builtins.int,
                 name: builtins.str,
                 shape_name: builtins.str,
                 shape_series: builtins.str):
        """
        :param builtins.int core_count: The number of cores associated with this fast launch job shape.
        :param builtins.str managed_egress_support: The managed egress support
        :param builtins.int memory_in_gbs: The number of cores associated with this fast launch job shape.
        :param builtins.str name: The name of the fast launch job config
        :param builtins.str shape_name: The name of the fast launch job shape.
        :param builtins.str shape_series: The family that the compute shape belongs to.
        """
        pulumi.set(__self__, "core_count", core_count)
        pulumi.set(__self__, "managed_egress_support", managed_egress_support)
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> builtins.int:
        """
        The number of cores associated with this fast launch job shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="managedEgressSupport")
    def managed_egress_support(self) -> builtins.str:
        """
        The managed egress support
        """
        return pulumi.get(self, "managed_egress_support")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.int:
        """
        The number of cores associated with this fast launch job shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the fast launch job config
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        The name of the fast launch job shape.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> builtins.str:
        """
        The family that the compute shape belongs to.
        """
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetFastLaunchJobConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the fast launch job config
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the fast launch job config
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobJobConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 job_type: builtins.str,
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for the job.
        :param builtins.str job_type: The type of job.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> builtins.str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobJobEnvironmentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str,
                 job_environment_type: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        :param builtins.str job_environment_type: The environment configuration type used for job runtime.
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)
        pulumi.set(__self__, "job_environment_type", job_environment_type)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")

    @property
    @pulumi.getter(name="jobEnvironmentType")
    def job_environment_type(self) -> builtins.str:
        """
        The environment configuration type used for job runtime.
        """
        return pulumi.get(self, "job_environment_type")


@pulumi.output_type
class GetJobJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 job_infrastructure_type: builtins.str,
                 job_shape_config_details: Sequence['outputs.GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult'],
                 shape_name: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param builtins.str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str shape_name: The shape used to launch the job run instances.
        :param builtins.str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> builtins.str:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Sequence['outputs.GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the job run instance.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobJobLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param builtins.bool enable_logging: If customer logging is enabled for job runs.
        :param builtins.str log_group_id: The log group id for where log objects are for job runs.
        :param builtins.str log_id: The log id the job run will push logs too.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetJobRunJobConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 job_type: builtins.str,
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for the job.
        :param builtins.str job_type: The type of job.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> builtins.str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobRunJobEnvironmentConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str,
                 job_environment_type: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        :param builtins.str job_environment_type: The environment configuration type used for job runtime.
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)
        pulumi.set(__self__, "job_environment_type", job_environment_type)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")

    @property
    @pulumi.getter(name="jobEnvironmentType")
    def job_environment_type(self) -> builtins.str:
        """
        The environment configuration type used for job runtime.
        """
        return pulumi.get(self, "job_environment_type")


@pulumi.output_type
class GetJobRunJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 job_infrastructure_type: builtins.str,
                 job_shape_config_details: Sequence['outputs.GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult'],
                 shape_name: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param builtins.str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str shape_name: The shape used to launch the job run instances.
        :param builtins.str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> builtins.str:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Sequence['outputs.GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the job run instance.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobRunJobLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param builtins.bool enable_logging: If customer logging is enabled for job runs.
        :param builtins.str log_group_id: The log group id for where log objects will be for job runs.
        :param builtins.str log_id: The log id of the log object the job run logs will be shipped to.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects will be for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id of the log object the job run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobRunJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetJobRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The log group id for where log objects will be for job runs.
        :param builtins.str log_id: The log id of the log object the job run logs will be shipped to.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects will be for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id of the log object the job run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobRunsJobRunResult(dict):
    def __init__(__self__, *,
                 asynchronous: builtins.bool,
                 compartment_id: builtins.str,
                 created_by: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 job_configuration_override_details: Sequence['outputs.GetJobRunsJobRunJobConfigurationOverrideDetailResult'],
                 job_environment_configuration_override_details: Sequence['outputs.GetJobRunsJobRunJobEnvironmentConfigurationOverrideDetailResult'],
                 job_id: builtins.str,
                 job_infrastructure_configuration_details: Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailResult'],
                 job_log_configuration_override_details: Sequence['outputs.GetJobRunsJobRunJobLogConfigurationOverrideDetailResult'],
                 job_storage_mount_configuration_details_lists: Sequence['outputs.GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult'],
                 lifecycle_details: builtins.str,
                 log_details: Sequence['outputs.GetJobRunsJobRunLogDetailResult'],
                 opc_parent_rpt_url: builtins.str,
                 project_id: builtins.str,
                 state: builtins.str,
                 time_accepted: builtins.str,
                 time_finished: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param Sequence['GetJobRunsJobRunJobConfigurationOverrideDetailArgs'] job_configuration_override_details: The job configuration details
        :param Sequence['GetJobRunsJobRunJobEnvironmentConfigurationOverrideDetailArgs'] job_environment_configuration_override_details: Environment configuration to capture job runtime dependencies.
        :param builtins.str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job.
        :param Sequence['GetJobRunsJobRunJobInfrastructureConfigurationDetailArgs'] job_infrastructure_configuration_details: The job infrastructure configuration details (shape, block storage, etc.)
        :param Sequence['GetJobRunsJobRunJobLogConfigurationOverrideDetailArgs'] job_log_configuration_override_details: Logging configuration for resource.
        :param Sequence['GetJobRunsJobRunJobStorageMountConfigurationDetailsListArgs'] job_storage_mount_configuration_details_lists: Collection of JobStorageMountConfigurationDetails.
        :param builtins.str lifecycle_details: Details of the state of the job run.
        :param Sequence['GetJobRunsJobRunLogDetailArgs'] log_details: Customer logging details for job run.
        :param builtins.str project_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the job run with.
        :param builtins.str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param builtins.str time_accepted: The date and time the job run was accepted in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_finished: The date and time the job run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_started: The date and time the job run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "asynchronous", asynchronous)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "job_configuration_override_details", job_configuration_override_details)
        pulumi.set(__self__, "job_environment_configuration_override_details", job_environment_configuration_override_details)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_infrastructure_configuration_details", job_infrastructure_configuration_details)
        pulumi.set(__self__, "job_log_configuration_override_details", job_log_configuration_override_details)
        pulumi.set(__self__, "job_storage_mount_configuration_details_lists", job_storage_mount_configuration_details_lists)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "log_details", log_details)
        pulumi.set(__self__, "opc_parent_rpt_url", opc_parent_rpt_url)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_accepted", time_accepted)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def asynchronous(self) -> builtins.bool:
        return pulumi.get(self, "asynchronous")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobConfigurationOverrideDetails")
    def job_configuration_override_details(self) -> Sequence['outputs.GetJobRunsJobRunJobConfigurationOverrideDetailResult']:
        """
        The job configuration details
        """
        return pulumi.get(self, "job_configuration_override_details")

    @property
    @pulumi.getter(name="jobEnvironmentConfigurationOverrideDetails")
    def job_environment_configuration_override_details(self) -> Sequence['outputs.GetJobRunsJobRunJobEnvironmentConfigurationOverrideDetailResult']:
        """
        Environment configuration to capture job runtime dependencies.
        """
        return pulumi.get(self, "job_environment_configuration_override_details")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobInfrastructureConfigurationDetails")
    def job_infrastructure_configuration_details(self) -> Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailResult']:
        """
        The job infrastructure configuration details (shape, block storage, etc.)
        """
        return pulumi.get(self, "job_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="jobLogConfigurationOverrideDetails")
    def job_log_configuration_override_details(self) -> Sequence['outputs.GetJobRunsJobRunJobLogConfigurationOverrideDetailResult']:
        """
        Logging configuration for resource.
        """
        return pulumi.get(self, "job_log_configuration_override_details")

    @property
    @pulumi.getter(name="jobStorageMountConfigurationDetailsLists")
    def job_storage_mount_configuration_details_lists(self) -> Sequence['outputs.GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult']:
        """
        Collection of JobStorageMountConfigurationDetails.
        """
        return pulumi.get(self, "job_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Details of the state of the job run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logDetails")
    def log_details(self) -> Sequence['outputs.GetJobRunsJobRunLogDetailResult']:
        """
        Customer logging details for job run.
        """
        return pulumi.get(self, "log_details")

    @property
    @pulumi.getter(name="opcParentRptUrl")
    def opc_parent_rpt_url(self) -> builtins.str:
        return pulumi.get(self, "opc_parent_rpt_url")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the job run with.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> builtins.str:
        """
        The date and time the job run was accepted in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> builtins.str:
        """
        The date and time the job run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The date and time the job run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetJobRunsJobRunJobConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 job_type: builtins.str,
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for the job.
        :param builtins.str job_type: The type of job.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> builtins.str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobRunsJobRunJobEnvironmentConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str,
                 job_environment_type: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        :param builtins.str job_environment_type: The environment configuration type used for job runtime.
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)
        pulumi.set(__self__, "job_environment_type", job_environment_type)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")

    @property
    @pulumi.getter(name="jobEnvironmentType")
    def job_environment_type(self) -> builtins.str:
        """
        The environment configuration type used for job runtime.
        """
        return pulumi.get(self, "job_environment_type")


@pulumi.output_type
class GetJobRunsJobRunJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 job_infrastructure_type: builtins.str,
                 job_shape_config_details: Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult'],
                 shape_name: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param builtins.str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str shape_name: The shape used to launch the job run instances.
        :param builtins.str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> builtins.str:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the job run instance.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobRunsJobRunJobLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param builtins.bool enable_logging: If customer logging is enabled for job runs.
        :param builtins.str log_group_id: The log group id for where log objects will be for job runs.
        :param builtins.str log_id: The log id of the log object the job run logs will be shipped to.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects will be for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id of the log object the job run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetJobRunsJobRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The log group id for where log objects will be for job runs.
        :param builtins.str log_id: The log id of the log object the job run logs will be shipped to.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects will be for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id of the log object the job run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the job shape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the job shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobShapesJobShapeResult(dict):
    def __init__(__self__, *,
                 core_count: builtins.int,
                 memory_in_gbs: builtins.int,
                 name: builtins.str,
                 shape_series: builtins.str):
        """
        :param builtins.int core_count: The number of cores associated with this job run shape.
        :param builtins.int memory_in_gbs: The number of cores associated with this job shape.
        :param builtins.str name: The name of the job shape.
        :param builtins.str shape_series: The family that the compute shape belongs to.
        """
        pulumi.set(__self__, "core_count", core_count)
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> builtins.int:
        """
        The number of cores associated with this job run shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.int:
        """
        The number of cores associated with this job shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the job shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> builtins.str:
        """
        The family that the compute shape belongs to.
        """
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobsJobResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: builtins.str,
                 artifact_content_length: builtins.str,
                 artifact_content_md5: builtins.str,
                 artifact_last_modified: builtins.str,
                 compartment_id: builtins.str,
                 created_by: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 delete_related_job_runs: builtins.bool,
                 description: builtins.str,
                 display_name: builtins.str,
                 empty_artifact: builtins.bool,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 job_artifact: builtins.str,
                 job_configuration_details: Sequence['outputs.GetJobsJobJobConfigurationDetailResult'],
                 job_environment_configuration_details: Sequence['outputs.GetJobsJobJobEnvironmentConfigurationDetailResult'],
                 job_infrastructure_configuration_details: Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailResult'],
                 job_log_configuration_details: Sequence['outputs.GetJobsJobJobLogConfigurationDetailResult'],
                 job_storage_mount_configuration_details_lists: Sequence['outputs.GetJobsJobJobStorageMountConfigurationDetailsListResult'],
                 lifecycle_details: builtins.str,
                 project_id: builtins.str,
                 state: builtins.str,
                 time_created: builtins.str):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: A short description of the job.
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param Sequence['GetJobsJobJobConfigurationDetailArgs'] job_configuration_details: The job configuration details
        :param Sequence['GetJobsJobJobEnvironmentConfigurationDetailArgs'] job_environment_configuration_details: Environment configuration to capture job runtime dependencies.
        :param Sequence['GetJobsJobJobInfrastructureConfigurationDetailArgs'] job_infrastructure_configuration_details: The job infrastructure configuration details (shape, block storage, etc.)
        :param Sequence['GetJobsJobJobLogConfigurationDetailArgs'] job_log_configuration_details: Logging configuration for resource.
        :param Sequence['GetJobsJobJobStorageMountConfigurationDetailsListArgs'] job_storage_mount_configuration_details_lists: Collection of JobStorageMountConfigurationDetails.
        :param builtins.str lifecycle_details: The state of the job.
        :param builtins.str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param builtins.str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param builtins.str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "delete_related_job_runs", delete_related_job_runs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "empty_artifact", empty_artifact)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "job_artifact", job_artifact)
        pulumi.set(__self__, "job_configuration_details", job_configuration_details)
        pulumi.set(__self__, "job_environment_configuration_details", job_environment_configuration_details)
        pulumi.set(__self__, "job_infrastructure_configuration_details", job_infrastructure_configuration_details)
        pulumi.set(__self__, "job_log_configuration_details", job_log_configuration_details)
        pulumi.set(__self__, "job_storage_mount_configuration_details_lists", job_storage_mount_configuration_details_lists)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> builtins.str:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deleteRelatedJobRuns")
    def delete_related_job_runs(self) -> builtins.bool:
        return pulumi.get(self, "delete_related_job_runs")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the job.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emptyArtifact")
    def empty_artifact(self) -> builtins.bool:
        return pulumi.get(self, "empty_artifact")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobArtifact")
    def job_artifact(self) -> builtins.str:
        return pulumi.get(self, "job_artifact")

    @property
    @pulumi.getter(name="jobConfigurationDetails")
    def job_configuration_details(self) -> Sequence['outputs.GetJobsJobJobConfigurationDetailResult']:
        """
        The job configuration details
        """
        return pulumi.get(self, "job_configuration_details")

    @property
    @pulumi.getter(name="jobEnvironmentConfigurationDetails")
    def job_environment_configuration_details(self) -> Sequence['outputs.GetJobsJobJobEnvironmentConfigurationDetailResult']:
        """
        Environment configuration to capture job runtime dependencies.
        """
        return pulumi.get(self, "job_environment_configuration_details")

    @property
    @pulumi.getter(name="jobInfrastructureConfigurationDetails")
    def job_infrastructure_configuration_details(self) -> Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailResult']:
        """
        The job infrastructure configuration details (shape, block storage, etc.)
        """
        return pulumi.get(self, "job_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="jobLogConfigurationDetails")
    def job_log_configuration_details(self) -> Sequence['outputs.GetJobsJobJobLogConfigurationDetailResult']:
        """
        Logging configuration for resource.
        """
        return pulumi.get(self, "job_log_configuration_details")

    @property
    @pulumi.getter(name="jobStorageMountConfigurationDetailsLists")
    def job_storage_mount_configuration_details_lists(self) -> Sequence['outputs.GetJobsJobJobStorageMountConfigurationDetailsListResult']:
        """
        Collection of JobStorageMountConfigurationDetails.
        """
        return pulumi.get(self, "job_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        The state of the job.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetJobsJobJobConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 job_type: builtins.str,
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for the job.
        :param builtins.str job_type: The type of job.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> builtins.str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobsJobJobEnvironmentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str,
                 job_environment_type: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        :param builtins.str job_environment_type: The environment configuration type used for job runtime.
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)
        pulumi.set(__self__, "job_environment_type", job_environment_type)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")

    @property
    @pulumi.getter(name="jobEnvironmentType")
    def job_environment_type(self) -> builtins.str:
        """
        The environment configuration type used for job runtime.
        """
        return pulumi.get(self, "job_environment_type")


@pulumi.output_type
class GetJobsJobJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 job_infrastructure_type: builtins.str,
                 job_shape_config_details: Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult'],
                 shape_name: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param builtins.str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str shape_name: The shape used to launch the job run instances.
        :param builtins.str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> builtins.str:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the job run instance.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobsJobJobLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param builtins.bool enable_logging: If customer logging is enabled for job runs.
        :param builtins.str log_group_id: The log group id for where log objects are for job runs.
        :param builtins.str log_id: The log id the job run will push logs too.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobsJobJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetMlApplicationImplementationApplicationComponentResult(dict):
    def __init__(__self__, *,
                 application_id: builtins.str,
                 component_name: builtins.str,
                 id: builtins.str,
                 job_id: builtins.str,
                 model_id: builtins.str,
                 name: builtins.str,
                 pipeline_id: builtins.str,
                 resource_type: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str application_id: OCID of Data Flow Application
        :param builtins.str component_name: Name of application component
        :param builtins.str id: The OCID of the MlApplicationImplementation. Unique identifier that is immutable after creation.
        :param builtins.str job_id: OCID of Data Science Job
        :param builtins.str model_id: OCID of Data Science Model
        :param builtins.str name: ML Application Implementation name which is unique for given ML Application.
        :param builtins.str pipeline_id: OCID of Data Science Pipeline
        :param builtins.str resource_type: Type of the resource
        :param builtins.str type: type of the argument
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "component_name", component_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> builtins.str:
        """
        OCID of Data Flow Application
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> builtins.str:
        """
        Name of application component
        """
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the MlApplicationImplementation. Unique identifier that is immutable after creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> builtins.str:
        """
        OCID of Data Science Job
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> builtins.str:
        """
        OCID of Data Science Model
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        ML Application Implementation name which is unique for given ML Application.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> builtins.str:
        """
        OCID of Data Science Pipeline
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        type of the argument
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMlApplicationImplementationConfigurationSchemaResult(dict):
    def __init__(__self__, *,
                 default_value: builtins.str,
                 description: builtins.str,
                 is_mandatory: builtins.bool,
                 key_name: builtins.str,
                 sample_value: builtins.str,
                 validation_regexp: builtins.str,
                 value_type: builtins.str):
        """
        :param builtins.str default_value: The default value for the optional configuration property (it must not be specified for mandatory configuration properties)
        :param builtins.str description: short description of the argument
        :param builtins.bool is_mandatory: argument is mandatory or not
        :param builtins.str key_name: Name of key (parameter name)
        :param builtins.str sample_value: Sample property value (it must match validationRegexp if it is specified)
        :param builtins.str validation_regexp: A regular expression will be used for the validation of property value.
        :param builtins.str value_type: Type of value
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_mandatory", is_mandatory)
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "sample_value", sample_value)
        pulumi.set(__self__, "validation_regexp", validation_regexp)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> builtins.str:
        """
        The default value for the optional configuration property (it must not be specified for mandatory configuration properties)
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        short description of the argument
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isMandatory")
    def is_mandatory(self) -> builtins.bool:
        """
        argument is mandatory or not
        """
        return pulumi.get(self, "is_mandatory")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> builtins.str:
        """
        Name of key (parameter name)
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="sampleValue")
    def sample_value(self) -> builtins.str:
        """
        Sample property value (it must match validationRegexp if it is specified)
        """
        return pulumi.get(self, "sample_value")

    @property
    @pulumi.getter(name="validationRegexp")
    def validation_regexp(self) -> builtins.str:
        """
        A regular expression will be used for the validation of property value.
        """
        return pulumi.get(self, "validation_regexp")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> builtins.str:
        """
        Type of value
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetMlApplicationImplementationLoggingResult(dict):
    def __init__(__self__, *,
                 aggregated_instance_view_logs: Sequence['outputs.GetMlApplicationImplementationLoggingAggregatedInstanceViewLogResult'],
                 implementation_logs: Sequence['outputs.GetMlApplicationImplementationLoggingImplementationLogResult'],
                 trigger_logs: Sequence['outputs.GetMlApplicationImplementationLoggingTriggerLogResult']):
        """
        :param Sequence['GetMlApplicationImplementationLoggingAggregatedInstanceViewLogArgs'] aggregated_instance_view_logs: Log configuration details for particular areas of ML Application Implementation.
        :param Sequence['GetMlApplicationImplementationLoggingImplementationLogArgs'] implementation_logs: Log configuration details for particular areas of ML Application Implementation.
        :param Sequence['GetMlApplicationImplementationLoggingTriggerLogArgs'] trigger_logs: Log configuration details for particular areas of ML Application Implementation.
        """
        pulumi.set(__self__, "aggregated_instance_view_logs", aggregated_instance_view_logs)
        pulumi.set(__self__, "implementation_logs", implementation_logs)
        pulumi.set(__self__, "trigger_logs", trigger_logs)

    @property
    @pulumi.getter(name="aggregatedInstanceViewLogs")
    def aggregated_instance_view_logs(self) -> Sequence['outputs.GetMlApplicationImplementationLoggingAggregatedInstanceViewLogResult']:
        """
        Log configuration details for particular areas of ML Application Implementation.
        """
        return pulumi.get(self, "aggregated_instance_view_logs")

    @property
    @pulumi.getter(name="implementationLogs")
    def implementation_logs(self) -> Sequence['outputs.GetMlApplicationImplementationLoggingImplementationLogResult']:
        """
        Log configuration details for particular areas of ML Application Implementation.
        """
        return pulumi.get(self, "implementation_logs")

    @property
    @pulumi.getter(name="triggerLogs")
    def trigger_logs(self) -> Sequence['outputs.GetMlApplicationImplementationLoggingTriggerLogResult']:
        """
        Log configuration details for particular areas of ML Application Implementation.
        """
        return pulumi.get(self, "trigger_logs")


@pulumi.output_type
class GetMlApplicationImplementationLoggingAggregatedInstanceViewLogResult(dict):
    def __init__(__self__, *,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_logging: If logging is enabled.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If logging is enabled.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetMlApplicationImplementationLoggingImplementationLogResult(dict):
    def __init__(__self__, *,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_logging: If logging is enabled.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If logging is enabled.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetMlApplicationImplementationLoggingTriggerLogResult(dict):
    def __init__(__self__, *,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_logging: If logging is enabled.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If logging is enabled.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetMlApplicationImplementationMlApplicationPackageArgumentResult(dict):
    def __init__(__self__, *,
                 arguments: Sequence['outputs.GetMlApplicationImplementationMlApplicationPackageArgumentArgumentResult']):
        """
        :param Sequence['GetMlApplicationImplementationMlApplicationPackageArgumentArgumentArgs'] arguments: Array of the ML Application package arguments
        """
        pulumi.set(__self__, "arguments", arguments)

    @property
    @pulumi.getter
    def arguments(self) -> Sequence['outputs.GetMlApplicationImplementationMlApplicationPackageArgumentArgumentResult']:
        """
        Array of the ML Application package arguments
        """
        return pulumi.get(self, "arguments")


@pulumi.output_type
class GetMlApplicationImplementationMlApplicationPackageArgumentArgumentResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 is_mandatory: builtins.bool,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str description: short description of the argument
        :param builtins.bool is_mandatory: argument is mandatory or not
        :param builtins.str name: ML Application Implementation name which is unique for given ML Application.
        :param builtins.str type: type of the argument
        :param builtins.str value: Argument value
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_mandatory", is_mandatory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        short description of the argument
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isMandatory")
    def is_mandatory(self) -> builtins.bool:
        """
        argument is mandatory or not
        """
        return pulumi.get(self, "is_mandatory")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        ML Application Implementation name which is unique for given ML Application.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        type of the argument
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Argument value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMlApplicationImplementationsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: A filter to return only resources that match the entire name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionItemResult(dict):
    def __init__(__self__, *,
                 allowed_migration_destinations: Sequence[builtins.str],
                 application_components: Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemApplicationComponentResult'],
                 compartment_id: builtins.str,
                 configuration_schemas: Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemConfigurationSchemaResult'],
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 loggings: Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingResult'],
                 ml_application_id: builtins.str,
                 ml_application_name: builtins.str,
                 ml_application_package: Mapping[str, builtins.str],
                 ml_application_package_arguments: Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentResult'],
                 name: builtins.str,
                 opc_ml_app_package_args: Mapping[str, builtins.str],
                 package_version: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param Sequence[builtins.str] allowed_migration_destinations: List of ML Application Implementation OCIDs for which migration from this implementation is allowed. Migration means that if consumers change implementation for their instances to implementation with OCID from this list, instance components will be updated in place otherwise new instance components are created based on the new implementation and old instance components are removed.
        :param Sequence['GetMlApplicationImplementationsMlApplicationImplementationCollectionItemApplicationComponentArgs'] application_components: List of application components (OCI resources shared for all MlApplicationInstances). These have been created automatically based on their definitions in the ML Application package.
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetMlApplicationImplementationsMlApplicationImplementationCollectionItemConfigurationSchemaArgs'] configuration_schemas: Schema of configuration which needs to be provided for each ML Application Instance. It is defined in the ML Application package descriptor.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: short description of the argument
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: The OCID of the MlApplicationImplementation. Unique identifier that is immutable after creation.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param Sequence['GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingArgs'] loggings: Configuration of Logging for ML Application Implementation.
        :param builtins.str ml_application_id: unique MlApplication identifier
        :param builtins.str ml_application_name: The name of ML Application (based on mlApplicationId)
        :param Mapping[str, builtins.str] ml_application_package: Specifies the ML application package as a map of key-value pairs. Valid keys include 'source_type', 'path', and 'uri'. Use 'file://' for local paths or 'https://' for object storage URIs.
        :param Sequence['GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentArgs'] ml_application_package_arguments: List of ML Application package arguments provided during ML Application package upload.
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param builtins.str package_version: The version of ML Application Package (e.g. "1.2" or "2.0.4") defined in ML Application package descriptor. Value is not mandatory only for CREATING state otherwise it must be always presented.
        :param builtins.str state: A filter to return only resources with lifecycleState matching the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: Creation time of MlApplicationImplementation creation in the format defined by RFC 3339.
        :param builtins.str time_updated: Time of last MlApplicationImplementation update in the format defined by RFC 3339.
        """
        pulumi.set(__self__, "allowed_migration_destinations", allowed_migration_destinations)
        pulumi.set(__self__, "application_components", application_components)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "configuration_schemas", configuration_schemas)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "loggings", loggings)
        pulumi.set(__self__, "ml_application_id", ml_application_id)
        pulumi.set(__self__, "ml_application_name", ml_application_name)
        pulumi.set(__self__, "ml_application_package", ml_application_package)
        pulumi.set(__self__, "ml_application_package_arguments", ml_application_package_arguments)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "opc_ml_app_package_args", opc_ml_app_package_args)
        pulumi.set(__self__, "package_version", package_version)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="allowedMigrationDestinations")
    def allowed_migration_destinations(self) -> Sequence[builtins.str]:
        """
        List of ML Application Implementation OCIDs for which migration from this implementation is allowed. Migration means that if consumers change implementation for their instances to implementation with OCID from this list, instance components will be updated in place otherwise new instance components are created based on the new implementation and old instance components are removed.
        """
        return pulumi.get(self, "allowed_migration_destinations")

    @property
    @pulumi.getter(name="applicationComponents")
    def application_components(self) -> Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemApplicationComponentResult']:
        """
        List of application components (OCI resources shared for all MlApplicationInstances). These have been created automatically based on their definitions in the ML Application package.
        """
        return pulumi.get(self, "application_components")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationSchemas")
    def configuration_schemas(self) -> Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemConfigurationSchemaResult']:
        """
        Schema of configuration which needs to be provided for each ML Application Instance. It is defined in the ML Application package descriptor.
        """
        return pulumi.get(self, "configuration_schemas")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        short description of the argument
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the MlApplicationImplementation. Unique identifier that is immutable after creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def loggings(self) -> Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingResult']:
        """
        Configuration of Logging for ML Application Implementation.
        """
        return pulumi.get(self, "loggings")

    @property
    @pulumi.getter(name="mlApplicationId")
    def ml_application_id(self) -> builtins.str:
        """
        unique MlApplication identifier
        """
        return pulumi.get(self, "ml_application_id")

    @property
    @pulumi.getter(name="mlApplicationName")
    def ml_application_name(self) -> builtins.str:
        """
        The name of ML Application (based on mlApplicationId)
        """
        return pulumi.get(self, "ml_application_name")

    @property
    @pulumi.getter(name="mlApplicationPackage")
    def ml_application_package(self) -> Mapping[str, builtins.str]:
        """
        Specifies the ML application package as a map of key-value pairs. Valid keys include 'source_type', 'path', and 'uri'. Use 'file://' for local paths or 'https://' for object storage URIs.
        """
        return pulumi.get(self, "ml_application_package")

    @property
    @pulumi.getter(name="mlApplicationPackageArguments")
    def ml_application_package_arguments(self) -> Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentResult']:
        """
        List of ML Application package arguments provided during ML Application package upload.
        """
        return pulumi.get(self, "ml_application_package_arguments")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="opcMlAppPackageArgs")
    def opc_ml_app_package_args(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "opc_ml_app_package_args")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> builtins.str:
        """
        The version of ML Application Package (e.g. "1.2" or "2.0.4") defined in ML Application package descriptor. Value is not mandatory only for CREATING state otherwise it must be always presented.
        """
        return pulumi.get(self, "package_version")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources with lifecycleState matching the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Creation time of MlApplicationImplementation creation in the format defined by RFC 3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Time of last MlApplicationImplementation update in the format defined by RFC 3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionItemApplicationComponentResult(dict):
    def __init__(__self__, *,
                 application_id: builtins.str,
                 component_name: builtins.str,
                 id: builtins.str,
                 job_id: builtins.str,
                 model_id: builtins.str,
                 name: builtins.str,
                 pipeline_id: builtins.str,
                 resource_type: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str application_id: OCID of Data Flow Application
        :param builtins.str component_name: Name of application component
        :param builtins.str id: The OCID of the MlApplicationImplementation. Unique identifier that is immutable after creation.
        :param builtins.str job_id: OCID of Data Science Job
        :param builtins.str model_id: OCID of Data Science Model
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param builtins.str pipeline_id: OCID of Data Science Pipeline
        :param builtins.str resource_type: Type of the resource
        :param builtins.str type: type of the argument
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "component_name", component_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> builtins.str:
        """
        OCID of Data Flow Application
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> builtins.str:
        """
        Name of application component
        """
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the MlApplicationImplementation. Unique identifier that is immutable after creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> builtins.str:
        """
        OCID of Data Science Job
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> builtins.str:
        """
        OCID of Data Science Model
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> builtins.str:
        """
        OCID of Data Science Pipeline
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Type of the resource
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        type of the argument
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionItemConfigurationSchemaResult(dict):
    def __init__(__self__, *,
                 default_value: builtins.str,
                 description: builtins.str,
                 is_mandatory: builtins.bool,
                 key_name: builtins.str,
                 sample_value: builtins.str,
                 validation_regexp: builtins.str,
                 value_type: builtins.str):
        """
        :param builtins.str default_value: The default value for the optional configuration property (it must not be specified for mandatory configuration properties)
        :param builtins.str description: short description of the argument
        :param builtins.bool is_mandatory: argument is mandatory or not
        :param builtins.str key_name: Name of key (parameter name)
        :param builtins.str sample_value: Sample property value (it must match validationRegexp if it is specified)
        :param builtins.str validation_regexp: A regular expression will be used for the validation of property value.
        :param builtins.str value_type: Type of value
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_mandatory", is_mandatory)
        pulumi.set(__self__, "key_name", key_name)
        pulumi.set(__self__, "sample_value", sample_value)
        pulumi.set(__self__, "validation_regexp", validation_regexp)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> builtins.str:
        """
        The default value for the optional configuration property (it must not be specified for mandatory configuration properties)
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        short description of the argument
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isMandatory")
    def is_mandatory(self) -> builtins.bool:
        """
        argument is mandatory or not
        """
        return pulumi.get(self, "is_mandatory")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> builtins.str:
        """
        Name of key (parameter name)
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="sampleValue")
    def sample_value(self) -> builtins.str:
        """
        Sample property value (it must match validationRegexp if it is specified)
        """
        return pulumi.get(self, "sample_value")

    @property
    @pulumi.getter(name="validationRegexp")
    def validation_regexp(self) -> builtins.str:
        """
        A regular expression will be used for the validation of property value.
        """
        return pulumi.get(self, "validation_regexp")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> builtins.str:
        """
        Type of value
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingResult(dict):
    def __init__(__self__, *,
                 aggregated_instance_view_logs: Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingAggregatedInstanceViewLogResult'],
                 implementation_logs: Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingImplementationLogResult'],
                 trigger_logs: Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingTriggerLogResult']):
        """
        :param Sequence['GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingAggregatedInstanceViewLogArgs'] aggregated_instance_view_logs: Log configuration details for particular areas of ML Application Implementation.
        :param Sequence['GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingImplementationLogArgs'] implementation_logs: Log configuration details for particular areas of ML Application Implementation.
        :param Sequence['GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingTriggerLogArgs'] trigger_logs: Log configuration details for particular areas of ML Application Implementation.
        """
        pulumi.set(__self__, "aggregated_instance_view_logs", aggregated_instance_view_logs)
        pulumi.set(__self__, "implementation_logs", implementation_logs)
        pulumi.set(__self__, "trigger_logs", trigger_logs)

    @property
    @pulumi.getter(name="aggregatedInstanceViewLogs")
    def aggregated_instance_view_logs(self) -> Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingAggregatedInstanceViewLogResult']:
        """
        Log configuration details for particular areas of ML Application Implementation.
        """
        return pulumi.get(self, "aggregated_instance_view_logs")

    @property
    @pulumi.getter(name="implementationLogs")
    def implementation_logs(self) -> Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingImplementationLogResult']:
        """
        Log configuration details for particular areas of ML Application Implementation.
        """
        return pulumi.get(self, "implementation_logs")

    @property
    @pulumi.getter(name="triggerLogs")
    def trigger_logs(self) -> Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingTriggerLogResult']:
        """
        Log configuration details for particular areas of ML Application Implementation.
        """
        return pulumi.get(self, "trigger_logs")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingAggregatedInstanceViewLogResult(dict):
    def __init__(__self__, *,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_logging: If logging is enabled.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If logging is enabled.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingImplementationLogResult(dict):
    def __init__(__self__, *,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_logging: If logging is enabled.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If logging is enabled.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionItemLoggingTriggerLogResult(dict):
    def __init__(__self__, *,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_logging: If logging is enabled.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If logging is enabled.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentResult(dict):
    def __init__(__self__, *,
                 arguments: Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentArgumentResult']):
        """
        :param Sequence['GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentArgumentArgs'] arguments: Array of the ML Application package arguments
        """
        pulumi.set(__self__, "arguments", arguments)

    @property
    @pulumi.getter
    def arguments(self) -> Sequence['outputs.GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentArgumentResult']:
        """
        Array of the ML Application package arguments
        """
        return pulumi.get(self, "arguments")


@pulumi.output_type
class GetMlApplicationImplementationsMlApplicationImplementationCollectionItemMlApplicationPackageArgumentArgumentResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 is_mandatory: builtins.bool,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str description: short description of the argument
        :param builtins.bool is_mandatory: argument is mandatory or not
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param builtins.str type: type of the argument
        :param builtins.str value: Argument value
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_mandatory", is_mandatory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        short description of the argument
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isMandatory")
    def is_mandatory(self) -> builtins.bool:
        """
        argument is mandatory or not
        """
        return pulumi.get(self, "is_mandatory")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        type of the argument
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Argument value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMlApplicationInstanceAuthConfigurationResult(dict):
    def __init__(__self__, *,
                 application_name: builtins.str,
                 domain_id: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str application_name: Name of the IDCS application
        :param builtins.str domain_id: Identity Domain OCID
        :param builtins.str type: Type of AuthN/Z
        """
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> builtins.str:
        """
        Name of the IDCS application
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> builtins.str:
        """
        Identity Domain OCID
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of AuthN/Z
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMlApplicationInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: Key of configuration property
        :param builtins.str value: Value of configuration property
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Key of configuration property
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of configuration property
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMlApplicationInstancePredictionEndpointDetailResult(dict):
    def __init__(__self__, *,
                 base_prediction_uri: builtins.str,
                 prediction_uris: Sequence['outputs.GetMlApplicationInstancePredictionEndpointDetailPredictionUriResult']):
        """
        :param builtins.str base_prediction_uri: Base URI of prediction router.
        :param Sequence['GetMlApplicationInstancePredictionEndpointDetailPredictionUriArgs'] prediction_uris: Array of all prediction URIs per use-case.
        """
        pulumi.set(__self__, "base_prediction_uri", base_prediction_uri)
        pulumi.set(__self__, "prediction_uris", prediction_uris)

    @property
    @pulumi.getter(name="basePredictionUri")
    def base_prediction_uri(self) -> builtins.str:
        """
        Base URI of prediction router.
        """
        return pulumi.get(self, "base_prediction_uri")

    @property
    @pulumi.getter(name="predictionUris")
    def prediction_uris(self) -> Sequence['outputs.GetMlApplicationInstancePredictionEndpointDetailPredictionUriResult']:
        """
        Array of all prediction URIs per use-case.
        """
        return pulumi.get(self, "prediction_uris")


@pulumi.output_type
class GetMlApplicationInstancePredictionEndpointDetailPredictionUriResult(dict):
    def __init__(__self__, *,
                 uri: builtins.str,
                 use_case: builtins.str):
        """
        :param builtins.str uri: Prediction URI.
        :param builtins.str use_case: Prediction use-case.
        """
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "use_case", use_case)

    @property
    @pulumi.getter
    def uri(self) -> builtins.str:
        """
        Prediction URI.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCase")
    def use_case(self) -> builtins.str:
        """
        Prediction use-case.
        """
        return pulumi.get(self, "use_case")


@pulumi.output_type
class GetMlApplicationInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMlApplicationInstancesMlApplicationInstanceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMlApplicationInstancesMlApplicationInstanceCollectionItemResult(dict):
    def __init__(__self__, *,
                 auth_configurations: Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemAuthConfigurationResult'],
                 compartment_id: builtins.str,
                 configurations: Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemConfigurationResult'],
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 is_enabled: builtins.bool,
                 lifecycle_details: builtins.str,
                 lifecycle_substate: builtins.str,
                 ml_application_id: builtins.str,
                 ml_application_implementation_id: builtins.str,
                 ml_application_implementation_name: builtins.str,
                 ml_application_name: builtins.str,
                 prediction_endpoint_details: Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailResult'],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param Sequence['GetMlApplicationInstancesMlApplicationInstanceCollectionItemAuthConfigurationArgs'] auth_configurations: AuthN/Z configuration for online prediction
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetMlApplicationInstancesMlApplicationInstanceCollectionItemConfigurationArgs'] configurations: Data that are used for provisioning of the given MlApplicationInstance. These are validated against configurationSchema defined in referenced MlApplicationImplementation.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: The OCID of the MlApplicationInstance. Unique identifier that is immutable after creation
        :param builtins.bool is_enabled: States whether the MlApplicationInstance is supposed to be in ACTIVE lifecycle state.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str lifecycle_substate: The current substate of the MlApplicationInstance. The substate has MlApplicationInstance specific values in comparison with lifecycleState which has standard values common for all Oracle Cloud Infrastructure resources. The NEEDS_ATTENTION and FAILED substates are deprecated in favor of (NON_)?RECOVERABLE_(PROVIDER|SERVICE)_ISSUE and will be removed in next release.
        :param builtins.str ml_application_id: unique MlApplication identifier
        :param builtins.str ml_application_implementation_id: The OCID of ML Application Implementation selected as a certain solution for a given ML problem (ML Application)
        :param builtins.str ml_application_implementation_name: The name of Ml Application Implementation (based on mlApplicationImplementationId)
        :param builtins.str ml_application_name: The name of ML Application (based on mlApplicationId).
        :param Sequence['GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailArgs'] prediction_endpoint_details: Prediction endpoint related information.
        :param builtins.str state: A filter to return only resources matching the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time the the MlApplication was created. An RFC3339 formatted datetime string
        :param builtins.str time_updated: Time of last MlApplicationInstance update in the format defined by RFC 3339.
        """
        pulumi.set(__self__, "auth_configurations", auth_configurations)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "configurations", configurations)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "lifecycle_substate", lifecycle_substate)
        pulumi.set(__self__, "ml_application_id", ml_application_id)
        pulumi.set(__self__, "ml_application_implementation_id", ml_application_implementation_id)
        pulumi.set(__self__, "ml_application_implementation_name", ml_application_implementation_name)
        pulumi.set(__self__, "ml_application_name", ml_application_name)
        pulumi.set(__self__, "prediction_endpoint_details", prediction_endpoint_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="authConfigurations")
    def auth_configurations(self) -> Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemAuthConfigurationResult']:
        """
        AuthN/Z configuration for online prediction
        """
        return pulumi.get(self, "auth_configurations")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def configurations(self) -> Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemConfigurationResult']:
        """
        Data that are used for provisioning of the given MlApplicationInstance. These are validated against configurationSchema defined in referenced MlApplicationImplementation.
        """
        return pulumi.get(self, "configurations")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the MlApplicationInstance. Unique identifier that is immutable after creation
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> builtins.bool:
        """
        States whether the MlApplicationInstance is supposed to be in ACTIVE lifecycle state.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="lifecycleSubstate")
    def lifecycle_substate(self) -> builtins.str:
        """
        The current substate of the MlApplicationInstance. The substate has MlApplicationInstance specific values in comparison with lifecycleState which has standard values common for all Oracle Cloud Infrastructure resources. The NEEDS_ATTENTION and FAILED substates are deprecated in favor of (NON_)?RECOVERABLE_(PROVIDER|SERVICE)_ISSUE and will be removed in next release.
        """
        return pulumi.get(self, "lifecycle_substate")

    @property
    @pulumi.getter(name="mlApplicationId")
    def ml_application_id(self) -> builtins.str:
        """
        unique MlApplication identifier
        """
        return pulumi.get(self, "ml_application_id")

    @property
    @pulumi.getter(name="mlApplicationImplementationId")
    def ml_application_implementation_id(self) -> builtins.str:
        """
        The OCID of ML Application Implementation selected as a certain solution for a given ML problem (ML Application)
        """
        return pulumi.get(self, "ml_application_implementation_id")

    @property
    @pulumi.getter(name="mlApplicationImplementationName")
    def ml_application_implementation_name(self) -> builtins.str:
        """
        The name of Ml Application Implementation (based on mlApplicationImplementationId)
        """
        return pulumi.get(self, "ml_application_implementation_name")

    @property
    @pulumi.getter(name="mlApplicationName")
    def ml_application_name(self) -> builtins.str:
        """
        The name of ML Application (based on mlApplicationId).
        """
        return pulumi.get(self, "ml_application_name")

    @property
    @pulumi.getter(name="predictionEndpointDetails")
    def prediction_endpoint_details(self) -> Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailResult']:
        """
        Prediction endpoint related information.
        """
        return pulumi.get(self, "prediction_endpoint_details")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources matching the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time the the MlApplication was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Time of last MlApplicationInstance update in the format defined by RFC 3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetMlApplicationInstancesMlApplicationInstanceCollectionItemAuthConfigurationResult(dict):
    def __init__(__self__, *,
                 application_name: builtins.str,
                 domain_id: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str application_name: Name of the IDCS application
        :param builtins.str domain_id: Identity Domain OCID
        :param builtins.str type: Type of AuthN/Z
        """
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> builtins.str:
        """
        Name of the IDCS application
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> builtins.str:
        """
        Identity Domain OCID
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of AuthN/Z
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMlApplicationInstancesMlApplicationInstanceCollectionItemConfigurationResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: Key of configuration property
        :param builtins.str value: Value of configuration property
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Key of configuration property
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of configuration property
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailResult(dict):
    def __init__(__self__, *,
                 base_prediction_uri: builtins.str,
                 prediction_uris: Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailPredictionUriResult']):
        """
        :param builtins.str base_prediction_uri: Base URI of prediction router.
        :param Sequence['GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailPredictionUriArgs'] prediction_uris: Array of all prediction URIs per use-case.
        """
        pulumi.set(__self__, "base_prediction_uri", base_prediction_uri)
        pulumi.set(__self__, "prediction_uris", prediction_uris)

    @property
    @pulumi.getter(name="basePredictionUri")
    def base_prediction_uri(self) -> builtins.str:
        """
        Base URI of prediction router.
        """
        return pulumi.get(self, "base_prediction_uri")

    @property
    @pulumi.getter(name="predictionUris")
    def prediction_uris(self) -> Sequence['outputs.GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailPredictionUriResult']:
        """
        Array of all prediction URIs per use-case.
        """
        return pulumi.get(self, "prediction_uris")


@pulumi.output_type
class GetMlApplicationInstancesMlApplicationInstanceCollectionItemPredictionEndpointDetailPredictionUriResult(dict):
    def __init__(__self__, *,
                 uri: builtins.str,
                 use_case: builtins.str):
        """
        :param builtins.str uri: Prediction URI.
        :param builtins.str use_case: Prediction use-case.
        """
        pulumi.set(__self__, "uri", uri)
        pulumi.set(__self__, "use_case", use_case)

    @property
    @pulumi.getter
    def uri(self) -> builtins.str:
        """
        Prediction URI.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter(name="useCase")
    def use_case(self) -> builtins.str:
        """
        Prediction use-case.
        """
        return pulumi.get(self, "use_case")


@pulumi.output_type
class GetMlApplicationsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: A filter to return only resources that match the entire name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMlApplicationsMlApplicationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetMlApplicationsMlApplicationCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetMlApplicationsMlApplicationCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetMlApplicationsMlApplicationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 name: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: Optional description of the ML Application
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: The OCID of the MlApplication. Unique identifier that is immutable after creation.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param builtins.str state: A filter to return only resources with lifecycleState matching the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: Creation time of MlApplication in the format defined by RFC 3339.
        :param builtins.str time_updated: Time of last MlApplication update in the format defined by RFC 3339.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Optional description of the ML Application
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the MlApplication. Unique identifier that is immutable after creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources with lifecycleState matching the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        Creation time of MlApplication in the format defined by RFC 3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        Time of last MlApplication update in the format defined by RFC 3339.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetModelBackupOperationDetailResult(dict):
    def __init__(__self__, *,
                 backup_state: builtins.str,
                 backup_state_details: builtins.str,
                 time_last_backup: builtins.str):
        """
        :param builtins.str backup_state: The backup status of the model.
        :param builtins.str backup_state_details: The backup execution status details of the model.
        :param builtins.str time_last_backup: The last backup execution time of the model.
        """
        pulumi.set(__self__, "backup_state", backup_state)
        pulumi.set(__self__, "backup_state_details", backup_state_details)
        pulumi.set(__self__, "time_last_backup", time_last_backup)

    @property
    @pulumi.getter(name="backupState")
    def backup_state(self) -> builtins.str:
        """
        The backup status of the model.
        """
        return pulumi.get(self, "backup_state")

    @property
    @pulumi.getter(name="backupStateDetails")
    def backup_state_details(self) -> builtins.str:
        """
        The backup execution status details of the model.
        """
        return pulumi.get(self, "backup_state_details")

    @property
    @pulumi.getter(name="timeLastBackup")
    def time_last_backup(self) -> builtins.str:
        """
        The last backup execution time of the model.
        """
        return pulumi.get(self, "time_last_backup")


@pulumi.output_type
class GetModelBackupSettingResult(dict):
    def __init__(__self__, *,
                 backup_region: builtins.str,
                 customer_notification_type: builtins.str,
                 is_backup_enabled: builtins.bool):
        """
        :param builtins.str backup_region: Oracle Cloud Infrastructure backup region for the model.
        :param builtins.str customer_notification_type: Customer notification options on success/failure of archival, deletion events.
        :param builtins.bool is_backup_enabled: Boolean flag representing whether backup needs to be enabled/disabled for the model.
        """
        pulumi.set(__self__, "backup_region", backup_region)
        pulumi.set(__self__, "customer_notification_type", customer_notification_type)
        pulumi.set(__self__, "is_backup_enabled", is_backup_enabled)

    @property
    @pulumi.getter(name="backupRegion")
    def backup_region(self) -> builtins.str:
        """
        Oracle Cloud Infrastructure backup region for the model.
        """
        return pulumi.get(self, "backup_region")

    @property
    @pulumi.getter(name="customerNotificationType")
    def customer_notification_type(self) -> builtins.str:
        """
        Customer notification options on success/failure of archival, deletion events.
        """
        return pulumi.get(self, "customer_notification_type")

    @property
    @pulumi.getter(name="isBackupEnabled")
    def is_backup_enabled(self) -> builtins.bool:
        """
        Boolean flag representing whether backup needs to be enabled/disabled for the model.
        """
        return pulumi.get(self, "is_backup_enabled")


@pulumi.output_type
class GetModelCustomMetadataListResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 description: builtins.str,
                 has_artifact: builtins.bool,
                 key: builtins.str,
                 keywords: Sequence[builtins.str],
                 value: builtins.str):
        """
        :param builtins.str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,Reports,Readme,other".
        :param builtins.str description: A short description of the model.
        :param builtins.bool has_artifact: Is there any artifact present for the metadata.
        :param builtins.str key: Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testArtifactresults
               * fineTuningConfiguration
               * deploymentConfiguration
               * readme
               * license
               * evaluationConfiguration
        :param Sequence[builtins.str] keywords: list of keywords for searching
        :param builtins.str value: Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "has_artifact", has_artifact)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "keywords", keywords)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,Reports,Readme,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hasArtifact")
    def has_artifact(self) -> builtins.bool:
        """
        Is there any artifact present for the metadata.
        """
        return pulumi.get(self, "has_artifact")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testArtifactresults
        * fineTuningConfiguration
        * deploymentConfiguration
        * readme
        * license
        * evaluationConfiguration
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def keywords(self) -> Sequence[builtins.str]:
        """
        list of keywords for searching
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelDefinedMetadataListResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 description: builtins.str,
                 has_artifact: builtins.bool,
                 key: builtins.str,
                 keywords: Sequence[builtins.str],
                 value: builtins.str):
        """
        :param builtins.str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,Reports,Readme,other".
        :param builtins.str description: A short description of the model.
        :param builtins.bool has_artifact: Is there any artifact present for the metadata.
        :param builtins.str key: Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testArtifactresults
               * fineTuningConfiguration
               * deploymentConfiguration
               * readme
               * license
               * evaluationConfiguration
        :param Sequence[builtins.str] keywords: list of keywords for searching
        :param builtins.str value: Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "has_artifact", has_artifact)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "keywords", keywords)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,Reports,Readme,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hasArtifact")
    def has_artifact(self) -> builtins.bool:
        """
        Is there any artifact present for the metadata.
        """
        return pulumi.get(self, "has_artifact")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testArtifactresults
        * fineTuningConfiguration
        * deploymentConfiguration
        * readme
        * license
        * evaluationConfiguration
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def keywords(self) -> Sequence[builtins.str]:
        """
        list of keywords for searching
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailResult(dict):
    def __init__(__self__, *,
                 accesses: Sequence['outputs.GetModelDeploymentCategoryLogDetailAccessResult'],
                 predicts: Sequence['outputs.GetModelDeploymentCategoryLogDetailPredictResult']):
        """
        :param Sequence['GetModelDeploymentCategoryLogDetailAccessArgs'] accesses: The log details.
        :param Sequence['GetModelDeploymentCategoryLogDetailPredictArgs'] predicts: The log details.
        """
        pulumi.set(__self__, "accesses", accesses)
        pulumi.set(__self__, "predicts", predicts)

    @property
    @pulumi.getter
    def accesses(self) -> Sequence['outputs.GetModelDeploymentCategoryLogDetailAccessResult']:
        """
        The log details.
        """
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def predicts(self) -> Sequence['outputs.GetModelDeploymentCategoryLogDetailPredictResult']:
        """
        The log details.
        """
        return pulumi.get(self, "predicts")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailAccessResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailPredictResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 deployment_type: builtins.str,
                 environment_configuration_details: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult'],
                 model_configuration_details: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']):
        """
        :param builtins.str deployment_type: The type of the model deployment.
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailArgs'] environment_configuration_details: The configuration to carry the environment details thats used in Model Deployment creation
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailArgs'] model_configuration_details: The model configuration details.
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "environment_configuration_details", environment_configuration_details)
        pulumi.set(__self__, "model_configuration_details", model_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        The type of the model deployment.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="environmentConfigurationDetails")
    def environment_configuration_details(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']:
        """
        The configuration to carry the environment details thats used in Model Deployment creation
        """
        return pulumi.get(self, "environment_configuration_details")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']:
        """
        The model configuration details.
        """
        return pulumi.get(self, "model_configuration_details")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 entrypoints: Sequence[builtins.str],
                 environment_configuration_type: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 health_check_port: builtins.int,
                 image: builtins.str,
                 image_digest: builtins.str,
                 server_port: builtins.int):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str environment_configuration_type: The environment configuration type
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        :param builtins.int health_check_port: The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.int server_port: The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "environment_configuration_type", environment_configuration_type)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "health_check_port", health_check_port)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "server_port", server_port)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="environmentConfigurationType")
    def environment_configuration_type(self) -> builtins.str:
        """
        The environment configuration type
        """
        return pulumi.get(self, "environment_configuration_type")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> builtins.int:
        """
        The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> builtins.int:
        """
        The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "server_port")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 bandwidth_mbps: builtins.int,
                 instance_configurations: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult'],
                 maximum_bandwidth_mbps: builtins.int,
                 model_id: builtins.str,
                 scaling_policies: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']):
        """
        :param builtins.int bandwidth_mbps: The minimum network bandwidth for the model deployment.
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationArgs'] instance_configurations: The model deployment instance configuration
        :param builtins.int maximum_bandwidth_mbps: The maximum network bandwidth for the model deployment.
        :param builtins.str model_id: The OCID of the model you want to deploy.
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyArgs'] scaling_policies: The scaling policy to apply to each model of the deployment.
        """
        pulumi.set(__self__, "bandwidth_mbps", bandwidth_mbps)
        pulumi.set(__self__, "instance_configurations", instance_configurations)
        pulumi.set(__self__, "maximum_bandwidth_mbps", maximum_bandwidth_mbps)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "scaling_policies", scaling_policies)

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> builtins.int:
        """
        The minimum network bandwidth for the model deployment.
        """
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="instanceConfigurations")
    def instance_configurations(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']:
        """
        The model deployment instance configuration
        """
        return pulumi.get(self, "instance_configurations")

    @property
    @pulumi.getter(name="maximumBandwidthMbps")
    def maximum_bandwidth_mbps(self) -> builtins.int:
        """
        The maximum network bandwidth for the model deployment.
        """
        return pulumi.get(self, "maximum_bandwidth_mbps")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> builtins.str:
        """
        The OCID of the model you want to deploy.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']:
        """
        The scaling policy to apply to each model of the deployment.
        """
        return pulumi.get(self, "scaling_policies")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_shape_name: builtins.str,
                 model_deployment_instance_shape_config_details: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult'],
                 private_endpoint_id: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.str instance_shape_name: The shape used to launch the model deployment instances.
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailArgs'] model_deployment_instance_shape_config_details: Details for the model-deployment instance shape configuration.
        :param builtins.str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param builtins.str subnet_id: A model deployment instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT/SGW gateway for egress.
        """
        pulumi.set(__self__, "instance_shape_name", instance_shape_name)
        pulumi.set(__self__, "model_deployment_instance_shape_config_details", model_deployment_instance_shape_config_details)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> builtins.str:
        """
        The shape used to launch the model deployment instances.
        """
        return pulumi.get(self, "instance_shape_name")

    @property
    @pulumi.getter(name="modelDeploymentInstanceShapeConfigDetails")
    def model_deployment_instance_shape_config_details(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']:
        """
        Details for the model-deployment instance shape configuration.
        """
        return pulumi.get(self, "model_deployment_instance_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> builtins.str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        A model deployment instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT/SGW gateway for egress.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 cpu_baseline: builtins.str,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.str cpu_baseline: The baseline OCPU utilization for a subcore burstable VM instance. If this attribute is left blank, it will default to `BASELINE_1_1`. The following values are supported: BASELINE_1_8 - baseline usage is 1/8 of an OCPU. BASELINE_1_2 - baseline usage is 1/2 of an OCPU. BASELINE_1_1 - baseline usage is an entire OCPU. This represents a non-burstable instance.
        :param builtins.float memory_in_gbs: A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 to 512 GB and VM.Optimized3.Flex memory range is between 6 to 256 GB.
        :param builtins.float ocpus: A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 to 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        pulumi.set(__self__, "cpu_baseline", cpu_baseline)
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="cpuBaseline")
    def cpu_baseline(self) -> builtins.str:
        """
        The baseline OCPU utilization for a subcore burstable VM instance. If this attribute is left blank, it will default to `BASELINE_1_1`. The following values are supported: BASELINE_1_8 - baseline usage is 1/8 of an OCPU. BASELINE_1_2 - baseline usage is 1/2 of an OCPU. BASELINE_1_1 - baseline usage is an entire OCPU. This represents a non-burstable instance.
        """
        return pulumi.get(self, "cpu_baseline")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 to 512 GB and VM.Optimized3.Flex memory range is between 6 to 256 GB.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 to 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult(dict):
    def __init__(__self__, *,
                 auto_scaling_policies: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyResult'],
                 cool_down_in_seconds: builtins.int,
                 instance_count: builtins.int,
                 is_enabled: builtins.bool,
                 policy_type: builtins.str):
        """
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyArgs'] auto_scaling_policies: The list of autoscaling policy details.
        :param builtins.int cool_down_in_seconds: For threshold-based autoscaling policies, this value is the minimum period of time to wait between scaling actions. The cooldown period gives the system time to stabilize before rescaling. The minimum value is 600 seconds, which is also the default. The cooldown period starts when the model deployment becomes ACTIVE after the scaling operation.
        :param builtins.int instance_count: The number of instances for the model deployment.
        :param builtins.bool is_enabled: Whether the autoscaling policy is enabled.
        :param builtins.str policy_type: The type of scaling policy.
        """
        pulumi.set(__self__, "auto_scaling_policies", auto_scaling_policies)
        pulumi.set(__self__, "cool_down_in_seconds", cool_down_in_seconds)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="autoScalingPolicies")
    def auto_scaling_policies(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyResult']:
        """
        The list of autoscaling policy details.
        """
        return pulumi.get(self, "auto_scaling_policies")

    @property
    @pulumi.getter(name="coolDownInSeconds")
    def cool_down_in_seconds(self) -> builtins.int:
        """
        For threshold-based autoscaling policies, this value is the minimum period of time to wait between scaling actions. The cooldown period gives the system time to stabilize before rescaling. The minimum value is 600 seconds, which is also the default. The cooldown period starts when the model deployment becomes ACTIVE after the scaling operation.
        """
        return pulumi.get(self, "cool_down_in_seconds")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> builtins.int:
        """
        The number of instances for the model deployment.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> builtins.bool:
        """
        Whether the autoscaling policy is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> builtins.str:
        """
        The type of scaling policy.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyResult(dict):
    def __init__(__self__, *,
                 auto_scaling_policy_type: builtins.str,
                 initial_instance_count: builtins.int,
                 maximum_instance_count: builtins.int,
                 minimum_instance_count: builtins.int,
                 rules: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleResult']):
        """
        :param builtins.str auto_scaling_policy_type: The type of autoscaling policy.
        :param builtins.int initial_instance_count: For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the model deployment immediately after autoscaling is enabled. Note that anytime this value is updated, the number of instances will be reset to this value. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
        :param builtins.int maximum_instance_count: For a threshold-based autoscaling policy, this value is the maximum number of instances the model deployment is allowed to increase to (scale out).
        :param builtins.int minimum_instance_count: For a threshold-based autoscaling policy, this value is the minimum number of instances the model deployment is allowed to decrease to (scale in).
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleArgs'] rules: The list of autoscaling policy rules.
        """
        pulumi.set(__self__, "auto_scaling_policy_type", auto_scaling_policy_type)
        pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        pulumi.set(__self__, "maximum_instance_count", maximum_instance_count)
        pulumi.set(__self__, "minimum_instance_count", minimum_instance_count)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="autoScalingPolicyType")
    def auto_scaling_policy_type(self) -> builtins.str:
        """
        The type of autoscaling policy.
        """
        return pulumi.get(self, "auto_scaling_policy_type")

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> builtins.int:
        """
        For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the model deployment immediately after autoscaling is enabled. Note that anytime this value is updated, the number of instances will be reset to this value. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
        """
        return pulumi.get(self, "initial_instance_count")

    @property
    @pulumi.getter(name="maximumInstanceCount")
    def maximum_instance_count(self) -> builtins.int:
        """
        For a threshold-based autoscaling policy, this value is the maximum number of instances the model deployment is allowed to increase to (scale out).
        """
        return pulumi.get(self, "maximum_instance_count")

    @property
    @pulumi.getter(name="minimumInstanceCount")
    def minimum_instance_count(self) -> builtins.int:
        """
        For a threshold-based autoscaling policy, this value is the minimum number of instances the model deployment is allowed to decrease to (scale in).
        """
        return pulumi.get(self, "minimum_instance_count")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleResult']:
        """
        The list of autoscaling policy rules.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleResult(dict):
    def __init__(__self__, *,
                 metric_expression_rule_type: builtins.str,
                 metric_type: builtins.str,
                 scale_in_configurations: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationResult'],
                 scale_out_configurations: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationResult']):
        """
        :param builtins.str metric_expression_rule_type: The metric expression for creating the alarm used to trigger autoscaling actions on the model deployment.
        :param builtins.str metric_type: Metric type
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationArgs'] scale_in_configurations: The scaling configuration for the predefined metric expression rule.
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationArgs'] scale_out_configurations: The scaling configuration for the predefined metric expression rule.
        """
        pulumi.set(__self__, "metric_expression_rule_type", metric_expression_rule_type)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "scale_in_configurations", scale_in_configurations)
        pulumi.set(__self__, "scale_out_configurations", scale_out_configurations)

    @property
    @pulumi.getter(name="metricExpressionRuleType")
    def metric_expression_rule_type(self) -> builtins.str:
        """
        The metric expression for creating the alarm used to trigger autoscaling actions on the model deployment.
        """
        return pulumi.get(self, "metric_expression_rule_type")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> builtins.str:
        """
        Metric type
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="scaleInConfigurations")
    def scale_in_configurations(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationResult']:
        """
        The scaling configuration for the predefined metric expression rule.
        """
        return pulumi.get(self, "scale_in_configurations")

    @property
    @pulumi.getter(name="scaleOutConfigurations")
    def scale_out_configurations(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationResult']:
        """
        The scaling configuration for the predefined metric expression rule.
        """
        return pulumi.get(self, "scale_out_configurations")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_count_adjustment: builtins.int,
                 pending_duration: builtins.str,
                 query: builtins.str,
                 scaling_configuration_type: builtins.str,
                 threshold: builtins.int):
        """
        :param builtins.int instance_count_adjustment: The value is used for adjusting the count of instances by.
        :param builtins.str pending_duration: The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
        :param builtins.str query: The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
        :param builtins.str scaling_configuration_type: The type of scaling configuration.
        :param builtins.int threshold: A metric value at which the scaling operation will be triggered.
        """
        pulumi.set(__self__, "instance_count_adjustment", instance_count_adjustment)
        pulumi.set(__self__, "pending_duration", pending_duration)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "scaling_configuration_type", scaling_configuration_type)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="instanceCountAdjustment")
    def instance_count_adjustment(self) -> builtins.int:
        """
        The value is used for adjusting the count of instances by.
        """
        return pulumi.get(self, "instance_count_adjustment")

    @property
    @pulumi.getter(name="pendingDuration")
    def pending_duration(self) -> builtins.str:
        """
        The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
        """
        return pulumi.get(self, "pending_duration")

    @property
    @pulumi.getter
    def query(self) -> builtins.str:
        """
        The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="scalingConfigurationType")
    def scaling_configuration_type(self) -> builtins.str:
        """
        The type of scaling configuration.
        """
        return pulumi.get(self, "scaling_configuration_type")

    @property
    @pulumi.getter
    def threshold(self) -> builtins.int:
        """
        A metric value at which the scaling operation will be triggered.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_count_adjustment: builtins.int,
                 pending_duration: builtins.str,
                 query: builtins.str,
                 scaling_configuration_type: builtins.str,
                 threshold: builtins.int):
        """
        :param builtins.int instance_count_adjustment: The value is used for adjusting the count of instances by.
        :param builtins.str pending_duration: The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
        :param builtins.str query: The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
        :param builtins.str scaling_configuration_type: The type of scaling configuration.
        :param builtins.int threshold: A metric value at which the scaling operation will be triggered.
        """
        pulumi.set(__self__, "instance_count_adjustment", instance_count_adjustment)
        pulumi.set(__self__, "pending_duration", pending_duration)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "scaling_configuration_type", scaling_configuration_type)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="instanceCountAdjustment")
    def instance_count_adjustment(self) -> builtins.int:
        """
        The value is used for adjusting the count of instances by.
        """
        return pulumi.get(self, "instance_count_adjustment")

    @property
    @pulumi.getter(name="pendingDuration")
    def pending_duration(self) -> builtins.str:
        """
        The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
        """
        return pulumi.get(self, "pending_duration")

    @property
    @pulumi.getter
    def query(self) -> builtins.str:
        """
        The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="scalingConfigurationType")
    def scaling_configuration_type(self) -> builtins.str:
        """
        The type of scaling configuration.
        """
        return pulumi.get(self, "scaling_configuration_type")

    @property
    @pulumi.getter
    def threshold(self) -> builtins.int:
        """
        A metric value at which the scaling operation will be triggered.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetModelDeploymentModelDeploymentSystemDataResult(dict):
    def __init__(__self__, *,
                 current_instance_count: builtins.int,
                 system_infra_type: builtins.str):
        """
        :param builtins.int current_instance_count: This value is the current count of the model deployment instances.
        :param builtins.str system_infra_type: The infrastructure type of the model deployment.
        """
        pulumi.set(__self__, "current_instance_count", current_instance_count)
        pulumi.set(__self__, "system_infra_type", system_infra_type)

    @property
    @pulumi.getter(name="currentInstanceCount")
    def current_instance_count(self) -> builtins.int:
        """
        This value is the current count of the model deployment instances.
        """
        return pulumi.get(self, "current_instance_count")

    @property
    @pulumi.getter(name="systemInfraType")
    def system_infra_type(self) -> builtins.str:
        """
        The infrastructure type of the model deployment.
        """
        return pulumi.get(self, "system_infra_type")


@pulumi.output_type
class GetModelDeploymentShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the model deployment shape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the model deployment shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelDeploymentShapesModelDeploymentShapeResult(dict):
    def __init__(__self__, *,
                 core_count: builtins.int,
                 memory_in_gbs: builtins.int,
                 name: builtins.str,
                 shape_series: builtins.str):
        """
        :param builtins.int core_count: The number of cores associated with this model deployment shape.
        :param builtins.int memory_in_gbs: The amount of memory in GBs associated with this model deployment shape.
        :param builtins.str name: The name of the model deployment shape.
        :param builtins.str shape_series: The family that the compute shape belongs to.
        """
        pulumi.set(__self__, "core_count", core_count)
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> builtins.int:
        """
        The number of cores associated with this model deployment shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.int:
        """
        The amount of memory in GBs associated with this model deployment shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the model deployment shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> builtins.str:
        """
        The family that the compute shape belongs to.
        """
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetModelDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentResult(dict):
    def __init__(__self__, *,
                 category_log_details: Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailResult'],
                 compartment_id: builtins.str,
                 created_by: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 model_deployment_configuration_details: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult'],
                 model_deployment_system_datas: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentSystemDataResult'],
                 model_deployment_url: builtins.str,
                 opc_parent_rpt_url: builtins.str,
                 project_id: builtins.str,
                 state: builtins.str,
                 time_created: builtins.str):
        """
        :param Sequence['GetModelDeploymentsModelDeploymentCategoryLogDetailArgs'] category_log_details: The log details for each category.
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: A short description of the model deployment.
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param builtins.str lifecycle_details: Details about the state of the model deployment.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailArgs'] model_deployment_configuration_details: The model deployment configuration details.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentSystemDataArgs'] model_deployment_system_datas: Model deployment system data.
        :param builtins.str model_deployment_url: The URL to interact with the model deployment.
        :param builtins.str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param builtins.str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param builtins.str time_created: The date and time the resource was created, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        pulumi.set(__self__, "category_log_details", category_log_details)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "model_deployment_configuration_details", model_deployment_configuration_details)
        pulumi.set(__self__, "model_deployment_system_datas", model_deployment_system_datas)
        pulumi.set(__self__, "model_deployment_url", model_deployment_url)
        pulumi.set(__self__, "opc_parent_rpt_url", opc_parent_rpt_url)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="categoryLogDetails")
    def category_log_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailResult']:
        """
        The log details for each category.
        """
        return pulumi.get(self, "category_log_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the model deployment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Details about the state of the model deployment.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelDeploymentConfigurationDetails")
    def model_deployment_configuration_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult']:
        """
        The model deployment configuration details.
        """
        return pulumi.get(self, "model_deployment_configuration_details")

    @property
    @pulumi.getter(name="modelDeploymentSystemDatas")
    def model_deployment_system_datas(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentSystemDataResult']:
        """
        Model deployment system data.
        """
        return pulumi.get(self, "model_deployment_system_datas")

    @property
    @pulumi.getter(name="modelDeploymentUrl")
    def model_deployment_url(self) -> builtins.str:
        """
        The URL to interact with the model deployment.
        """
        return pulumi.get(self, "model_deployment_url")

    @property
    @pulumi.getter(name="opcParentRptUrl")
    def opc_parent_rpt_url(self) -> builtins.str:
        return pulumi.get(self, "opc_parent_rpt_url")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the resource was created, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailResult(dict):
    def __init__(__self__, *,
                 accesses: Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult'],
                 predicts: Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult']):
        """
        :param Sequence['GetModelDeploymentsModelDeploymentCategoryLogDetailAccessArgs'] accesses: The log details.
        :param Sequence['GetModelDeploymentsModelDeploymentCategoryLogDetailPredictArgs'] predicts: The log details.
        """
        pulumi.set(__self__, "accesses", accesses)
        pulumi.set(__self__, "predicts", predicts)

    @property
    @pulumi.getter
    def accesses(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult']:
        """
        The log details.
        """
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def predicts(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult']:
        """
        The log details.
        """
        return pulumi.get(self, "predicts")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 deployment_type: builtins.str,
                 environment_configuration_details: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult'],
                 model_configuration_details: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']):
        """
        :param builtins.str deployment_type: The type of the model deployment.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailArgs'] environment_configuration_details: The configuration to carry the environment details thats used in Model Deployment creation
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailArgs'] model_configuration_details: The model configuration details.
        """
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "environment_configuration_details", environment_configuration_details)
        pulumi.set(__self__, "model_configuration_details", model_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        The type of the model deployment.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="environmentConfigurationDetails")
    def environment_configuration_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']:
        """
        The configuration to carry the environment details thats used in Model Deployment creation
        """
        return pulumi.get(self, "environment_configuration_details")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']:
        """
        The model configuration details.
        """
        return pulumi.get(self, "model_configuration_details")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 entrypoints: Sequence[builtins.str],
                 environment_configuration_type: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 health_check_port: builtins.int,
                 image: builtins.str,
                 image_digest: builtins.str,
                 server_port: builtins.int):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str environment_configuration_type: The environment configuration type
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        :param builtins.int health_check_port: The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.int server_port: The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "environment_configuration_type", environment_configuration_type)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "health_check_port", health_check_port)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "server_port", server_port)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="environmentConfigurationType")
    def environment_configuration_type(self) -> builtins.str:
        """
        The environment configuration type
        """
        return pulumi.get(self, "environment_configuration_type")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> builtins.int:
        """
        The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> builtins.int:
        """
        The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "server_port")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 bandwidth_mbps: builtins.int,
                 instance_configurations: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult'],
                 maximum_bandwidth_mbps: builtins.int,
                 model_id: builtins.str,
                 scaling_policies: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']):
        """
        :param builtins.int bandwidth_mbps: The minimum network bandwidth for the model deployment.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationArgs'] instance_configurations: The model deployment instance configuration
        :param builtins.int maximum_bandwidth_mbps: The maximum network bandwidth for the model deployment.
        :param builtins.str model_id: The OCID of the model you want to deploy.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyArgs'] scaling_policies: The scaling policy to apply to each model of the deployment.
        """
        pulumi.set(__self__, "bandwidth_mbps", bandwidth_mbps)
        pulumi.set(__self__, "instance_configurations", instance_configurations)
        pulumi.set(__self__, "maximum_bandwidth_mbps", maximum_bandwidth_mbps)
        pulumi.set(__self__, "model_id", model_id)
        pulumi.set(__self__, "scaling_policies", scaling_policies)

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> builtins.int:
        """
        The minimum network bandwidth for the model deployment.
        """
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="instanceConfigurations")
    def instance_configurations(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']:
        """
        The model deployment instance configuration
        """
        return pulumi.get(self, "instance_configurations")

    @property
    @pulumi.getter(name="maximumBandwidthMbps")
    def maximum_bandwidth_mbps(self) -> builtins.int:
        """
        The maximum network bandwidth for the model deployment.
        """
        return pulumi.get(self, "maximum_bandwidth_mbps")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> builtins.str:
        """
        The OCID of the model you want to deploy.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']:
        """
        The scaling policy to apply to each model of the deployment.
        """
        return pulumi.get(self, "scaling_policies")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_shape_name: builtins.str,
                 model_deployment_instance_shape_config_details: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult'],
                 private_endpoint_id: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.str instance_shape_name: The shape used to launch the model deployment instances.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailArgs'] model_deployment_instance_shape_config_details: Details for the model-deployment instance shape configuration.
        :param builtins.str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param builtins.str subnet_id: A model deployment instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT/SGW gateway for egress.
        """
        pulumi.set(__self__, "instance_shape_name", instance_shape_name)
        pulumi.set(__self__, "model_deployment_instance_shape_config_details", model_deployment_instance_shape_config_details)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> builtins.str:
        """
        The shape used to launch the model deployment instances.
        """
        return pulumi.get(self, "instance_shape_name")

    @property
    @pulumi.getter(name="modelDeploymentInstanceShapeConfigDetails")
    def model_deployment_instance_shape_config_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']:
        """
        Details for the model-deployment instance shape configuration.
        """
        return pulumi.get(self, "model_deployment_instance_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> builtins.str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        A model deployment instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT/SGW gateway for egress.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 cpu_baseline: builtins.str,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.str cpu_baseline: The baseline OCPU utilization for a subcore burstable VM instance. If this attribute is left blank, it will default to `BASELINE_1_1`. The following values are supported: BASELINE_1_8 - baseline usage is 1/8 of an OCPU. BASELINE_1_2 - baseline usage is 1/2 of an OCPU. BASELINE_1_1 - baseline usage is an entire OCPU. This represents a non-burstable instance.
        :param builtins.float memory_in_gbs: A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 to 512 GB and VM.Optimized3.Flex memory range is between 6 to 256 GB.
        :param builtins.float ocpus: A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 to 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        pulumi.set(__self__, "cpu_baseline", cpu_baseline)
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="cpuBaseline")
    def cpu_baseline(self) -> builtins.str:
        """
        The baseline OCPU utilization for a subcore burstable VM instance. If this attribute is left blank, it will default to `BASELINE_1_1`. The following values are supported: BASELINE_1_8 - baseline usage is 1/8 of an OCPU. BASELINE_1_2 - baseline usage is 1/2 of an OCPU. BASELINE_1_1 - baseline usage is an entire OCPU. This represents a non-burstable instance.
        """
        return pulumi.get(self, "cpu_baseline")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 to 512 GB and VM.Optimized3.Flex memory range is between 6 to 256 GB.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 to 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult(dict):
    def __init__(__self__, *,
                 auto_scaling_policies: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyResult'],
                 cool_down_in_seconds: builtins.int,
                 instance_count: builtins.int,
                 is_enabled: builtins.bool,
                 policy_type: builtins.str):
        """
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyArgs'] auto_scaling_policies: The list of autoscaling policy details.
        :param builtins.int cool_down_in_seconds: For threshold-based autoscaling policies, this value is the minimum period of time to wait between scaling actions. The cooldown period gives the system time to stabilize before rescaling. The minimum value is 600 seconds, which is also the default. The cooldown period starts when the model deployment becomes ACTIVE after the scaling operation.
        :param builtins.int instance_count: The number of instances for the model deployment.
        :param builtins.bool is_enabled: Whether the autoscaling policy is enabled.
        :param builtins.str policy_type: The type of scaling policy.
        """
        pulumi.set(__self__, "auto_scaling_policies", auto_scaling_policies)
        pulumi.set(__self__, "cool_down_in_seconds", cool_down_in_seconds)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="autoScalingPolicies")
    def auto_scaling_policies(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyResult']:
        """
        The list of autoscaling policy details.
        """
        return pulumi.get(self, "auto_scaling_policies")

    @property
    @pulumi.getter(name="coolDownInSeconds")
    def cool_down_in_seconds(self) -> builtins.int:
        """
        For threshold-based autoscaling policies, this value is the minimum period of time to wait between scaling actions. The cooldown period gives the system time to stabilize before rescaling. The minimum value is 600 seconds, which is also the default. The cooldown period starts when the model deployment becomes ACTIVE after the scaling operation.
        """
        return pulumi.get(self, "cool_down_in_seconds")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> builtins.int:
        """
        The number of instances for the model deployment.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> builtins.bool:
        """
        Whether the autoscaling policy is enabled.
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> builtins.str:
        """
        The type of scaling policy.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyResult(dict):
    def __init__(__self__, *,
                 auto_scaling_policy_type: builtins.str,
                 initial_instance_count: builtins.int,
                 maximum_instance_count: builtins.int,
                 minimum_instance_count: builtins.int,
                 rules: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleResult']):
        """
        :param builtins.str auto_scaling_policy_type: The type of autoscaling policy.
        :param builtins.int initial_instance_count: For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the model deployment immediately after autoscaling is enabled. Note that anytime this value is updated, the number of instances will be reset to this value. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
        :param builtins.int maximum_instance_count: For a threshold-based autoscaling policy, this value is the maximum number of instances the model deployment is allowed to increase to (scale out).
        :param builtins.int minimum_instance_count: For a threshold-based autoscaling policy, this value is the minimum number of instances the model deployment is allowed to decrease to (scale in).
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleArgs'] rules: The list of autoscaling policy rules.
        """
        pulumi.set(__self__, "auto_scaling_policy_type", auto_scaling_policy_type)
        pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        pulumi.set(__self__, "maximum_instance_count", maximum_instance_count)
        pulumi.set(__self__, "minimum_instance_count", minimum_instance_count)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="autoScalingPolicyType")
    def auto_scaling_policy_type(self) -> builtins.str:
        """
        The type of autoscaling policy.
        """
        return pulumi.get(self, "auto_scaling_policy_type")

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> builtins.int:
        """
        For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the model deployment immediately after autoscaling is enabled. Note that anytime this value is updated, the number of instances will be reset to this value. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from this initial number to a number that is based on the limits that you set.
        """
        return pulumi.get(self, "initial_instance_count")

    @property
    @pulumi.getter(name="maximumInstanceCount")
    def maximum_instance_count(self) -> builtins.int:
        """
        For a threshold-based autoscaling policy, this value is the maximum number of instances the model deployment is allowed to increase to (scale out).
        """
        return pulumi.get(self, "maximum_instance_count")

    @property
    @pulumi.getter(name="minimumInstanceCount")
    def minimum_instance_count(self) -> builtins.int:
        """
        For a threshold-based autoscaling policy, this value is the minimum number of instances the model deployment is allowed to decrease to (scale in).
        """
        return pulumi.get(self, "minimum_instance_count")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleResult']:
        """
        The list of autoscaling policy rules.
        """
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleResult(dict):
    def __init__(__self__, *,
                 metric_expression_rule_type: builtins.str,
                 metric_type: builtins.str,
                 scale_in_configurations: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationResult'],
                 scale_out_configurations: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationResult']):
        """
        :param builtins.str metric_expression_rule_type: The metric expression for creating the alarm used to trigger autoscaling actions on the model deployment.
        :param builtins.str metric_type: Metric type
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationArgs'] scale_in_configurations: The scaling configuration for the predefined metric expression rule.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationArgs'] scale_out_configurations: The scaling configuration for the predefined metric expression rule.
        """
        pulumi.set(__self__, "metric_expression_rule_type", metric_expression_rule_type)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "scale_in_configurations", scale_in_configurations)
        pulumi.set(__self__, "scale_out_configurations", scale_out_configurations)

    @property
    @pulumi.getter(name="metricExpressionRuleType")
    def metric_expression_rule_type(self) -> builtins.str:
        """
        The metric expression for creating the alarm used to trigger autoscaling actions on the model deployment.
        """
        return pulumi.get(self, "metric_expression_rule_type")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> builtins.str:
        """
        Metric type
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="scaleInConfigurations")
    def scale_in_configurations(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationResult']:
        """
        The scaling configuration for the predefined metric expression rule.
        """
        return pulumi.get(self, "scale_in_configurations")

    @property
    @pulumi.getter(name="scaleOutConfigurations")
    def scale_out_configurations(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationResult']:
        """
        The scaling configuration for the predefined metric expression rule.
        """
        return pulumi.get(self, "scale_out_configurations")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleInConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_count_adjustment: builtins.int,
                 pending_duration: builtins.str,
                 query: builtins.str,
                 scaling_configuration_type: builtins.str,
                 threshold: builtins.int):
        """
        :param builtins.int instance_count_adjustment: The value is used for adjusting the count of instances by.
        :param builtins.str pending_duration: The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
        :param builtins.str query: The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
        :param builtins.str scaling_configuration_type: The type of scaling configuration.
        :param builtins.int threshold: A metric value at which the scaling operation will be triggered.
        """
        pulumi.set(__self__, "instance_count_adjustment", instance_count_adjustment)
        pulumi.set(__self__, "pending_duration", pending_duration)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "scaling_configuration_type", scaling_configuration_type)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="instanceCountAdjustment")
    def instance_count_adjustment(self) -> builtins.int:
        """
        The value is used for adjusting the count of instances by.
        """
        return pulumi.get(self, "instance_count_adjustment")

    @property
    @pulumi.getter(name="pendingDuration")
    def pending_duration(self) -> builtins.str:
        """
        The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
        """
        return pulumi.get(self, "pending_duration")

    @property
    @pulumi.getter
    def query(self) -> builtins.str:
        """
        The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="scalingConfigurationType")
    def scaling_configuration_type(self) -> builtins.str:
        """
        The type of scaling configuration.
        """
        return pulumi.get(self, "scaling_configuration_type")

    @property
    @pulumi.getter
    def threshold(self) -> builtins.int:
        """
        A metric value at which the scaling operation will be triggered.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyAutoScalingPolicyRuleScaleOutConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_count_adjustment: builtins.int,
                 pending_duration: builtins.str,
                 query: builtins.str,
                 scaling_configuration_type: builtins.str,
                 threshold: builtins.int):
        """
        :param builtins.int instance_count_adjustment: The value is used for adjusting the count of instances by.
        :param builtins.str pending_duration: The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
        :param builtins.str query: The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
        :param builtins.str scaling_configuration_type: The type of scaling configuration.
        :param builtins.int threshold: A metric value at which the scaling operation will be triggered.
        """
        pulumi.set(__self__, "instance_count_adjustment", instance_count_adjustment)
        pulumi.set(__self__, "pending_duration", pending_duration)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "scaling_configuration_type", scaling_configuration_type)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="instanceCountAdjustment")
    def instance_count_adjustment(self) -> builtins.int:
        """
        The value is used for adjusting the count of instances by.
        """
        return pulumi.get(self, "instance_count_adjustment")

    @property
    @pulumi.getter(name="pendingDuration")
    def pending_duration(self) -> builtins.str:
        """
        The period of time that the condition defined in the alarm must persist before the alarm state changes from "OK" to "FIRING" or vice versa. For example, a value of 5 minutes means that the alarm must persist in breaching the condition for five minutes before the alarm updates its state to "FIRING"; likewise, the alarm must persist in not breaching the condition for five minutes before the alarm updates its state to "OK."
        """
        return pulumi.get(self, "pending_duration")

    @property
    @pulumi.getter
    def query(self) -> builtins.str:
        """
        The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of the Monitoring service interprets results for each returned time series as Boolean values, where zero represents false and a non-zero value represents true. A true value means that the trigger rule condition has been met. The query must specify a metric, statistic, interval, and trigger rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="scalingConfigurationType")
    def scaling_configuration_type(self) -> builtins.str:
        """
        The type of scaling configuration.
        """
        return pulumi.get(self, "scaling_configuration_type")

    @property
    @pulumi.getter
    def threshold(self) -> builtins.int:
        """
        A metric value at which the scaling operation will be triggered.
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentSystemDataResult(dict):
    def __init__(__self__, *,
                 current_instance_count: builtins.int,
                 system_infra_type: builtins.str):
        """
        :param builtins.int current_instance_count: This value is the current count of the model deployment instances.
        :param builtins.str system_infra_type: The infrastructure type of the model deployment.
        """
        pulumi.set(__self__, "current_instance_count", current_instance_count)
        pulumi.set(__self__, "system_infra_type", system_infra_type)

    @property
    @pulumi.getter(name="currentInstanceCount")
    def current_instance_count(self) -> builtins.int:
        """
        This value is the current count of the model deployment instances.
        """
        return pulumi.get(self, "current_instance_count")

    @property
    @pulumi.getter(name="systemInfraType")
    def system_infra_type(self) -> builtins.str:
        """
        The infrastructure type of the model deployment.
        """
        return pulumi.get(self, "system_infra_type")


@pulumi.output_type
class GetModelRetentionOperationDetailResult(dict):
    def __init__(__self__, *,
                 archive_state: builtins.str,
                 archive_state_details: builtins.str,
                 delete_state: builtins.str,
                 delete_state_details: builtins.str,
                 time_archival_scheduled: builtins.str,
                 time_deletion_scheduled: builtins.str):
        """
        :param builtins.str archive_state: The archival status of model.
        :param builtins.str archive_state_details: The archival state details of the model.
        :param builtins.str delete_state: The deletion status of the archived model.
        :param builtins.str delete_state_details: The deletion status details of the archived model.
        :param builtins.str time_archival_scheduled: The estimated archival time of the model based on the provided retention setting.
        :param builtins.str time_deletion_scheduled: The estimated deletion time of the model based on the provided retention setting.
        """
        pulumi.set(__self__, "archive_state", archive_state)
        pulumi.set(__self__, "archive_state_details", archive_state_details)
        pulumi.set(__self__, "delete_state", delete_state)
        pulumi.set(__self__, "delete_state_details", delete_state_details)
        pulumi.set(__self__, "time_archival_scheduled", time_archival_scheduled)
        pulumi.set(__self__, "time_deletion_scheduled", time_deletion_scheduled)

    @property
    @pulumi.getter(name="archiveState")
    def archive_state(self) -> builtins.str:
        """
        The archival status of model.
        """
        return pulumi.get(self, "archive_state")

    @property
    @pulumi.getter(name="archiveStateDetails")
    def archive_state_details(self) -> builtins.str:
        """
        The archival state details of the model.
        """
        return pulumi.get(self, "archive_state_details")

    @property
    @pulumi.getter(name="deleteState")
    def delete_state(self) -> builtins.str:
        """
        The deletion status of the archived model.
        """
        return pulumi.get(self, "delete_state")

    @property
    @pulumi.getter(name="deleteStateDetails")
    def delete_state_details(self) -> builtins.str:
        """
        The deletion status details of the archived model.
        """
        return pulumi.get(self, "delete_state_details")

    @property
    @pulumi.getter(name="timeArchivalScheduled")
    def time_archival_scheduled(self) -> builtins.str:
        """
        The estimated archival time of the model based on the provided retention setting.
        """
        return pulumi.get(self, "time_archival_scheduled")

    @property
    @pulumi.getter(name="timeDeletionScheduled")
    def time_deletion_scheduled(self) -> builtins.str:
        """
        The estimated deletion time of the model based on the provided retention setting.
        """
        return pulumi.get(self, "time_deletion_scheduled")


@pulumi.output_type
class GetModelRetentionSettingResult(dict):
    def __init__(__self__, *,
                 archive_after_days: builtins.int,
                 customer_notification_type: builtins.str,
                 delete_after_days: builtins.int):
        """
        :param builtins.int archive_after_days: Number of days after which the model will be archived.
        :param builtins.str customer_notification_type: Customer notification options on success/failure of archival, deletion events.
        :param builtins.int delete_after_days: Number of days after which the archived model will be deleted.
        """
        pulumi.set(__self__, "archive_after_days", archive_after_days)
        pulumi.set(__self__, "customer_notification_type", customer_notification_type)
        pulumi.set(__self__, "delete_after_days", delete_after_days)

    @property
    @pulumi.getter(name="archiveAfterDays")
    def archive_after_days(self) -> builtins.int:
        """
        Number of days after which the model will be archived.
        """
        return pulumi.get(self, "archive_after_days")

    @property
    @pulumi.getter(name="customerNotificationType")
    def customer_notification_type(self) -> builtins.str:
        """
        Customer notification options on success/failure of archival, deletion events.
        """
        return pulumi.get(self, "customer_notification_type")

    @property
    @pulumi.getter(name="deleteAfterDays")
    def delete_after_days(self) -> builtins.int:
        """
        Number of days after which the archived model will be deleted.
        """
        return pulumi.get(self, "delete_after_days")


@pulumi.output_type
class GetModelVersionSetsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: A filter to return only resources that match the entire name given.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelVersionSetsModelVersionSetResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 compartment_id: builtins.str,
                 created_by: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 name: builtins.str,
                 project_id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str category: Specifies the type of model version sets to list. By default, user model version sets are listed.
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: A short description of the model version set.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param builtins.str name: A filter to return only resources that match the entire name given.
        :param builtins.str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param builtins.str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time that the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        :param builtins.str time_updated: The date and time that the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Specifies the type of model version sets to list. By default, user model version sets are listed.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the model version set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time that the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time that the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelsModelResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: builtins.str,
                 artifact_content_length: builtins.str,
                 artifact_content_md5: builtins.str,
                 artifact_last_modified: builtins.str,
                 backup_operation_details: Sequence['outputs.GetModelsModelBackupOperationDetailResult'],
                 backup_settings: Sequence['outputs.GetModelsModelBackupSettingResult'],
                 category: builtins.str,
                 compartment_id: builtins.str,
                 created_by: builtins.str,
                 custom_metadata_lists: Sequence['outputs.GetModelsModelCustomMetadataListResult'],
                 defined_metadata_lists: Sequence['outputs.GetModelsModelDefinedMetadataListResult'],
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 empty_model: builtins.bool,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 input_schema: builtins.str,
                 is_model_by_reference: builtins.bool,
                 lifecycle_details: builtins.str,
                 model_artifact: builtins.str,
                 model_version_set_id: builtins.str,
                 model_version_set_name: builtins.str,
                 output_schema: builtins.str,
                 project_id: builtins.str,
                 retention_operation_details: Sequence['outputs.GetModelsModelRetentionOperationDetailResult'],
                 retention_settings: Sequence['outputs.GetModelsModelRetentionSettingResult'],
                 state: builtins.str,
                 time_created: builtins.str,
                 version_label: builtins.str):
        """
        :param Sequence['GetModelsModelBackupOperationDetailArgs'] backup_operation_details: Backup operation details of the model.
        :param Sequence['GetModelsModelBackupSettingArgs'] backup_settings: Back up setting details of the model.
        :param builtins.str category: Specifies the type of models to list. By default, user models are listed.
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Sequence['GetModelsModelCustomMetadataListArgs'] custom_metadata_lists: An array of custom metadata details for the model.
        :param Sequence['GetModelsModelDefinedMetadataListArgs'] defined_metadata_lists: An array of defined metadata details for the model.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: A short description of the model.
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param builtins.str input_schema: Input schema file content in String format
        :param builtins.bool is_model_by_reference: Identifier to indicate whether a model artifact resides in the Service Tenancy or Customer Tenancy.
        :param builtins.str lifecycle_details: Details about the lifecycle state of the model.
        :param builtins.str model_version_set_id: The OCID of the model version set that the model is associated to.
        :param builtins.str model_version_set_name: The name of the model version set that the model is associated to.
        :param builtins.str output_schema: Output schema file content in String format
        :param builtins.str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param Sequence['GetModelsModelRetentionOperationDetailArgs'] retention_operation_details: Retention operation details for the model.
        :param Sequence['GetModelsModelRetentionSettingArgs'] retention_settings: Retention setting details of the model.
        :param builtins.str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param builtins.str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)
        pulumi.set(__self__, "backup_operation_details", backup_operation_details)
        pulumi.set(__self__, "backup_settings", backup_settings)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "custom_metadata_lists", custom_metadata_lists)
        pulumi.set(__self__, "defined_metadata_lists", defined_metadata_lists)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "empty_model", empty_model)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "input_schema", input_schema)
        pulumi.set(__self__, "is_model_by_reference", is_model_by_reference)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "model_artifact", model_artifact)
        pulumi.set(__self__, "model_version_set_id", model_version_set_id)
        pulumi.set(__self__, "model_version_set_name", model_version_set_name)
        pulumi.set(__self__, "output_schema", output_schema)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "retention_operation_details", retention_operation_details)
        pulumi.set(__self__, "retention_settings", retention_settings)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "version_label", version_label)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> builtins.str:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="backupOperationDetails")
    def backup_operation_details(self) -> Sequence['outputs.GetModelsModelBackupOperationDetailResult']:
        """
        Backup operation details of the model.
        """
        return pulumi.get(self, "backup_operation_details")

    @property
    @pulumi.getter(name="backupSettings")
    def backup_settings(self) -> Sequence['outputs.GetModelsModelBackupSettingResult']:
        """
        Back up setting details of the model.
        """
        return pulumi.get(self, "backup_settings")

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Specifies the type of models to list. By default, user models are listed.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="customMetadataLists")
    def custom_metadata_lists(self) -> Sequence['outputs.GetModelsModelCustomMetadataListResult']:
        """
        An array of custom metadata details for the model.
        """
        return pulumi.get(self, "custom_metadata_lists")

    @property
    @pulumi.getter(name="definedMetadataLists")
    def defined_metadata_lists(self) -> Sequence['outputs.GetModelsModelDefinedMetadataListResult']:
        """
        An array of defined metadata details for the model.
        """
        return pulumi.get(self, "defined_metadata_lists")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emptyModel")
    def empty_model(self) -> builtins.bool:
        return pulumi.get(self, "empty_model")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputSchema")
    def input_schema(self) -> builtins.str:
        """
        Input schema file content in String format
        """
        return pulumi.get(self, "input_schema")

    @property
    @pulumi.getter(name="isModelByReference")
    def is_model_by_reference(self) -> builtins.bool:
        """
        Identifier to indicate whether a model artifact resides in the Service Tenancy or Customer Tenancy.
        """
        return pulumi.get(self, "is_model_by_reference")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Details about the lifecycle state of the model.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelArtifact")
    def model_artifact(self) -> builtins.str:
        return pulumi.get(self, "model_artifact")

    @property
    @pulumi.getter(name="modelVersionSetId")
    def model_version_set_id(self) -> builtins.str:
        """
        The OCID of the model version set that the model is associated to.
        """
        return pulumi.get(self, "model_version_set_id")

    @property
    @pulumi.getter(name="modelVersionSetName")
    def model_version_set_name(self) -> builtins.str:
        """
        The name of the model version set that the model is associated to.
        """
        return pulumi.get(self, "model_version_set_name")

    @property
    @pulumi.getter(name="outputSchema")
    def output_schema(self) -> builtins.str:
        """
        Output schema file content in String format
        """
        return pulumi.get(self, "output_schema")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="retentionOperationDetails")
    def retention_operation_details(self) -> Sequence['outputs.GetModelsModelRetentionOperationDetailResult']:
        """
        Retention operation details for the model.
        """
        return pulumi.get(self, "retention_operation_details")

    @property
    @pulumi.getter(name="retentionSettings")
    def retention_settings(self) -> Sequence['outputs.GetModelsModelRetentionSettingResult']:
        """
        Retention setting details of the model.
        """
        return pulumi.get(self, "retention_settings")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="versionLabel")
    def version_label(self) -> builtins.str:
        return pulumi.get(self, "version_label")


@pulumi.output_type
class GetModelsModelBackupOperationDetailResult(dict):
    def __init__(__self__, *,
                 backup_state: builtins.str,
                 backup_state_details: builtins.str,
                 time_last_backup: builtins.str):
        """
        :param builtins.str backup_state: The backup status of the model.
        :param builtins.str backup_state_details: The backup execution status details of the model.
        :param builtins.str time_last_backup: The last backup execution time of the model.
        """
        pulumi.set(__self__, "backup_state", backup_state)
        pulumi.set(__self__, "backup_state_details", backup_state_details)
        pulumi.set(__self__, "time_last_backup", time_last_backup)

    @property
    @pulumi.getter(name="backupState")
    def backup_state(self) -> builtins.str:
        """
        The backup status of the model.
        """
        return pulumi.get(self, "backup_state")

    @property
    @pulumi.getter(name="backupStateDetails")
    def backup_state_details(self) -> builtins.str:
        """
        The backup execution status details of the model.
        """
        return pulumi.get(self, "backup_state_details")

    @property
    @pulumi.getter(name="timeLastBackup")
    def time_last_backup(self) -> builtins.str:
        """
        The last backup execution time of the model.
        """
        return pulumi.get(self, "time_last_backup")


@pulumi.output_type
class GetModelsModelBackupSettingResult(dict):
    def __init__(__self__, *,
                 backup_region: builtins.str,
                 customer_notification_type: builtins.str,
                 is_backup_enabled: builtins.bool):
        """
        :param builtins.str backup_region: Oracle Cloud Infrastructure backup region for the model.
        :param builtins.str customer_notification_type: Customer notification options on success/failure of archival, deletion events.
        :param builtins.bool is_backup_enabled: Boolean flag representing whether backup needs to be enabled/disabled for the model.
        """
        pulumi.set(__self__, "backup_region", backup_region)
        pulumi.set(__self__, "customer_notification_type", customer_notification_type)
        pulumi.set(__self__, "is_backup_enabled", is_backup_enabled)

    @property
    @pulumi.getter(name="backupRegion")
    def backup_region(self) -> builtins.str:
        """
        Oracle Cloud Infrastructure backup region for the model.
        """
        return pulumi.get(self, "backup_region")

    @property
    @pulumi.getter(name="customerNotificationType")
    def customer_notification_type(self) -> builtins.str:
        """
        Customer notification options on success/failure of archival, deletion events.
        """
        return pulumi.get(self, "customer_notification_type")

    @property
    @pulumi.getter(name="isBackupEnabled")
    def is_backup_enabled(self) -> builtins.bool:
        """
        Boolean flag representing whether backup needs to be enabled/disabled for the model.
        """
        return pulumi.get(self, "is_backup_enabled")


@pulumi.output_type
class GetModelsModelCustomMetadataListResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 description: builtins.str,
                 has_artifact: builtins.bool,
                 key: builtins.str,
                 keywords: Sequence[builtins.str],
                 value: builtins.str):
        """
        :param builtins.str category: Specifies the type of models to list. By default, user models are listed.
        :param builtins.str description: A short description of the model.
        :param builtins.bool has_artifact: Is there any artifact present for the metadata.
        :param builtins.str key: Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testArtifactresults
               * fineTuningConfiguration
               * deploymentConfiguration
               * readme
               * license
               * evaluationConfiguration
        :param Sequence[builtins.str] keywords: list of keywords for searching
        :param builtins.str value: Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "has_artifact", has_artifact)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "keywords", keywords)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Specifies the type of models to list. By default, user models are listed.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hasArtifact")
    def has_artifact(self) -> builtins.bool:
        """
        Is there any artifact present for the metadata.
        """
        return pulumi.get(self, "has_artifact")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testArtifactresults
        * fineTuningConfiguration
        * deploymentConfiguration
        * readme
        * license
        * evaluationConfiguration
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def keywords(self) -> Sequence[builtins.str]:
        """
        list of keywords for searching
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelsModelDefinedMetadataListResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 description: builtins.str,
                 has_artifact: builtins.bool,
                 key: builtins.str,
                 keywords: Sequence[builtins.str],
                 value: builtins.str):
        """
        :param builtins.str category: Specifies the type of models to list. By default, user models are listed.
        :param builtins.str description: A short description of the model.
        :param builtins.bool has_artifact: Is there any artifact present for the metadata.
        :param builtins.str key: Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testArtifactresults
               * fineTuningConfiguration
               * deploymentConfiguration
               * readme
               * license
               * evaluationConfiguration
        :param Sequence[builtins.str] keywords: list of keywords for searching
        :param builtins.str value: Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "has_artifact", has_artifact)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "keywords", keywords)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Specifies the type of models to list. By default, user models are listed.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hasArtifact")
    def has_artifact(self) -> builtins.bool:
        """
        Is there any artifact present for the metadata.
        """
        return pulumi.get(self, "has_artifact")

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testArtifactresults
        * fineTuningConfiguration
        * deploymentConfiguration
        * readme
        * license
        * evaluationConfiguration
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def keywords(self) -> Sequence[builtins.str]:
        """
        list of keywords for searching
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelsModelRetentionOperationDetailResult(dict):
    def __init__(__self__, *,
                 archive_state: builtins.str,
                 archive_state_details: builtins.str,
                 delete_state: builtins.str,
                 delete_state_details: builtins.str,
                 time_archival_scheduled: builtins.str,
                 time_deletion_scheduled: builtins.str):
        """
        :param builtins.str archive_state: The archival status of model.
        :param builtins.str archive_state_details: The archival state details of the model.
        :param builtins.str delete_state: The deletion status of the archived model.
        :param builtins.str delete_state_details: The deletion status details of the archived model.
        :param builtins.str time_archival_scheduled: The estimated archival time of the model based on the provided retention setting.
        :param builtins.str time_deletion_scheduled: The estimated deletion time of the model based on the provided retention setting.
        """
        pulumi.set(__self__, "archive_state", archive_state)
        pulumi.set(__self__, "archive_state_details", archive_state_details)
        pulumi.set(__self__, "delete_state", delete_state)
        pulumi.set(__self__, "delete_state_details", delete_state_details)
        pulumi.set(__self__, "time_archival_scheduled", time_archival_scheduled)
        pulumi.set(__self__, "time_deletion_scheduled", time_deletion_scheduled)

    @property
    @pulumi.getter(name="archiveState")
    def archive_state(self) -> builtins.str:
        """
        The archival status of model.
        """
        return pulumi.get(self, "archive_state")

    @property
    @pulumi.getter(name="archiveStateDetails")
    def archive_state_details(self) -> builtins.str:
        """
        The archival state details of the model.
        """
        return pulumi.get(self, "archive_state_details")

    @property
    @pulumi.getter(name="deleteState")
    def delete_state(self) -> builtins.str:
        """
        The deletion status of the archived model.
        """
        return pulumi.get(self, "delete_state")

    @property
    @pulumi.getter(name="deleteStateDetails")
    def delete_state_details(self) -> builtins.str:
        """
        The deletion status details of the archived model.
        """
        return pulumi.get(self, "delete_state_details")

    @property
    @pulumi.getter(name="timeArchivalScheduled")
    def time_archival_scheduled(self) -> builtins.str:
        """
        The estimated archival time of the model based on the provided retention setting.
        """
        return pulumi.get(self, "time_archival_scheduled")

    @property
    @pulumi.getter(name="timeDeletionScheduled")
    def time_deletion_scheduled(self) -> builtins.str:
        """
        The estimated deletion time of the model based on the provided retention setting.
        """
        return pulumi.get(self, "time_deletion_scheduled")


@pulumi.output_type
class GetModelsModelRetentionSettingResult(dict):
    def __init__(__self__, *,
                 archive_after_days: builtins.int,
                 customer_notification_type: builtins.str,
                 delete_after_days: builtins.int):
        """
        :param builtins.int archive_after_days: Number of days after which the model will be archived.
        :param builtins.str customer_notification_type: Customer notification options on success/failure of archival, deletion events.
        :param builtins.int delete_after_days: Number of days after which the archived model will be deleted.
        """
        pulumi.set(__self__, "archive_after_days", archive_after_days)
        pulumi.set(__self__, "customer_notification_type", customer_notification_type)
        pulumi.set(__self__, "delete_after_days", delete_after_days)

    @property
    @pulumi.getter(name="archiveAfterDays")
    def archive_after_days(self) -> builtins.int:
        """
        Number of days after which the model will be archived.
        """
        return pulumi.get(self, "archive_after_days")

    @property
    @pulumi.getter(name="customerNotificationType")
    def customer_notification_type(self) -> builtins.str:
        """
        Customer notification options on success/failure of archival, deletion events.
        """
        return pulumi.get(self, "customer_notification_type")

    @property
    @pulumi.getter(name="deleteAfterDays")
    def delete_after_days(self) -> builtins.int:
        """
        Number of days after which the archived model will be deleted.
        """
        return pulumi.get(self, "delete_after_days")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 notebook_session_shape_config_details: Sequence['outputs.GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult'],
                 private_endpoint_id: builtins.str,
                 shape: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param Sequence['GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailArgs'] notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param builtins.str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param builtins.str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param builtins.str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Sequence['outputs.GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']:
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> builtins.str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> builtins.str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the notebook session instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the notebook session instance.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 notebook_session_shape_config_details: Sequence['outputs.GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult'],
                 private_endpoint_id: builtins.str,
                 shape: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param Sequence['GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailArgs'] notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param builtins.str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param builtins.str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param builtins.str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Sequence['outputs.GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']:
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> builtins.str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> builtins.str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the notebook session instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the notebook session instance.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionNotebookSessionRuntimeConfigDetailResult(dict):
    def __init__(__self__, *,
                 custom_environment_variables: Mapping[str, builtins.str],
                 notebook_session_git_config_details: Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']):
        """
        :param Mapping[str, builtins.str] custom_environment_variables: Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        :param Sequence['GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailArgs'] notebook_session_git_config_details: Git configuration Details.
        """
        pulumi.set(__self__, "custom_environment_variables", custom_environment_variables)
        pulumi.set(__self__, "notebook_session_git_config_details", notebook_session_git_config_details)

    @property
    @pulumi.getter(name="customEnvironmentVariables")
    def custom_environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        """
        return pulumi.get(self, "custom_environment_variables")

    @property
    @pulumi.getter(name="notebookSessionGitConfigDetails")
    def notebook_session_git_config_details(self) -> Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']:
        """
        Git configuration Details.
        """
        return pulumi.get(self, "notebook_session_git_config_details")


@pulumi.output_type
class GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult(dict):
    def __init__(__self__, *,
                 notebook_session_git_repo_config_collections: Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']):
        """
        :param Sequence['GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionArgs'] notebook_session_git_repo_config_collections: A collection of Git repository configurations.
        """
        pulumi.set(__self__, "notebook_session_git_repo_config_collections", notebook_session_git_repo_config_collections)

    @property
    @pulumi.getter(name="notebookSessionGitRepoConfigCollections")
    def notebook_session_git_repo_config_collections(self) -> Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']:
        """
        A collection of Git repository configurations.
        """
        return pulumi.get(self, "notebook_session_git_repo_config_collections")


@pulumi.output_type
class GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult(dict):
    def __init__(__self__, *,
                 url: builtins.str):
        """
        :param builtins.str url: The repository URL
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The repository URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetNotebookSessionShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the notebook session shape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the notebook session shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNotebookSessionShapesNotebookSessionShapeResult(dict):
    def __init__(__self__, *,
                 core_count: builtins.int,
                 memory_in_gbs: builtins.int,
                 name: builtins.str,
                 shape_series: builtins.str):
        """
        :param builtins.int core_count: The number of cores associated with this notebook session shape.
        :param builtins.int memory_in_gbs: The amount of memory in GBs associated with this notebook session shape.
        :param builtins.str name: The name of the notebook session shape.
        :param builtins.str shape_series: The family that the compute shape belongs to.
        """
        pulumi.set(__self__, "core_count", core_count)
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> builtins.int:
        """
        The number of cores associated with this notebook session shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.int:
        """
        The amount of memory in GBs associated with this notebook session shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the notebook session shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> builtins.str:
        """
        The family that the compute shape belongs to.
        """
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetNotebookSessionsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 created_by: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 notebook_session_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult'],
                 notebook_session_configuration_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult'],
                 notebook_session_runtime_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult'],
                 notebook_session_storage_mount_configuration_details_lists: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult'],
                 notebook_session_url: builtins.str,
                 project_id: builtins.str,
                 state: builtins.str,
                 time_created: builtins.str):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param builtins.str lifecycle_details: Details about the state of the notebook session.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailArgs'] notebook_session_config_details: Details for the notebook session configuration.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailArgs'] notebook_session_configuration_details: Details for the notebook session configuration.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailArgs'] notebook_session_runtime_config_details: Notebook Session runtime configuration details.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListArgs'] notebook_session_storage_mount_configuration_details_lists: Collection of NotebookSessionStorageMountConfigurationDetails.
        :param builtins.str notebook_session_url: The URL to interact with the notebook session.
        :param builtins.str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param builtins.str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param builtins.str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "notebook_session_config_details", notebook_session_config_details)
        pulumi.set(__self__, "notebook_session_configuration_details", notebook_session_configuration_details)
        pulumi.set(__self__, "notebook_session_runtime_config_details", notebook_session_runtime_config_details)
        pulumi.set(__self__, "notebook_session_storage_mount_configuration_details_lists", notebook_session_storage_mount_configuration_details_lists)
        pulumi.set(__self__, "notebook_session_url", notebook_session_url)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Details about the state of the notebook session.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="notebookSessionConfigDetails")
    def notebook_session_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult']:
        """
        Details for the notebook session configuration.
        """
        return pulumi.get(self, "notebook_session_config_details")

    @property
    @pulumi.getter(name="notebookSessionConfigurationDetails")
    def notebook_session_configuration_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult']:
        """
        Details for the notebook session configuration.
        """
        return pulumi.get(self, "notebook_session_configuration_details")

    @property
    @pulumi.getter(name="notebookSessionRuntimeConfigDetails")
    def notebook_session_runtime_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult']:
        """
        Notebook Session runtime configuration details.
        """
        return pulumi.get(self, "notebook_session_runtime_config_details")

    @property
    @pulumi.getter(name="notebookSessionStorageMountConfigurationDetailsLists")
    def notebook_session_storage_mount_configuration_details_lists(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult']:
        """
        Collection of NotebookSessionStorageMountConfigurationDetails.
        """
        return pulumi.get(self, "notebook_session_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="notebookSessionUrl")
    def notebook_session_url(self) -> builtins.str:
        """
        The URL to interact with the notebook session.
        """
        return pulumi.get(self, "notebook_session_url")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 notebook_session_shape_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult'],
                 private_endpoint_id: builtins.str,
                 shape: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailArgs'] notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param builtins.str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param builtins.str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param builtins.str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']:
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> builtins.str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> builtins.str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the notebook session instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the notebook session instance.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 notebook_session_shape_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult'],
                 private_endpoint_id: builtins.str,
                 shape: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailArgs'] notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param builtins.str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param builtins.str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param builtins.str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']:
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> builtins.str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> builtins.str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: The total amount of memory available to the notebook session instance, in gigabytes.
        :param builtins.float ocpus: The total number of OCPUs available to the notebook session instance.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult(dict):
    def __init__(__self__, *,
                 custom_environment_variables: Mapping[str, builtins.str],
                 notebook_session_git_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']):
        """
        :param Mapping[str, builtins.str] custom_environment_variables: Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailArgs'] notebook_session_git_config_details: Git configuration Details.
        """
        pulumi.set(__self__, "custom_environment_variables", custom_environment_variables)
        pulumi.set(__self__, "notebook_session_git_config_details", notebook_session_git_config_details)

    @property
    @pulumi.getter(name="customEnvironmentVariables")
    def custom_environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        """
        return pulumi.get(self, "custom_environment_variables")

    @property
    @pulumi.getter(name="notebookSessionGitConfigDetails")
    def notebook_session_git_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']:
        """
        Git configuration Details.
        """
        return pulumi.get(self, "notebook_session_git_config_details")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult(dict):
    def __init__(__self__, *,
                 notebook_session_git_repo_config_collections: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']):
        """
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionArgs'] notebook_session_git_repo_config_collections: A collection of Git repository configurations.
        """
        pulumi.set(__self__, "notebook_session_git_repo_config_collections", notebook_session_git_repo_config_collections)

    @property
    @pulumi.getter(name="notebookSessionGitRepoConfigCollections")
    def notebook_session_git_repo_config_collections(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']:
        """
        A collection of Git repository configurations.
        """
        return pulumi.get(self, "notebook_session_git_repo_config_collections")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult(dict):
    def __init__(__self__, *,
                 url: builtins.str):
        """
        :param builtins.str url: The repository URL
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The repository URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetPipelineConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param builtins.str type: The type of pipeline.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 shape_config_details: Sequence['outputs.GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult'],
                 shape_name: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param Sequence['GetPipelineInfrastructureConfigurationDetailShapeConfigDetailArgs'] shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        :param builtins.str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "shape_config_details", shape_config_details)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Sequence['outputs.GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param builtins.str type: The type of pipeline.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param builtins.str type: The type of pipeline.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: The log group id for where log objects will be for pipeline runs.
        :param builtins.str log_id: The log id of the log object the pipeline run logs will be shipped to.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects will be for pipeline runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id of the log object the pipeline run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The log group id for where log objects will be for pipeline runs.
        :param builtins.str log_id: The log id of the log object the pipeline run logs will be shipped to.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects will be for pipeline runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id of the log object the pipeline run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailResult(dict):
    def __init__(__self__, *,
                 step_configuration_details: Sequence['outputs.GetPipelineRunStepOverrideDetailStepConfigurationDetailResult'],
                 step_container_configuration_details: Sequence['outputs.GetPipelineRunStepOverrideDetailStepContainerConfigurationDetailResult'],
                 step_dataflow_configuration_details: Sequence['outputs.GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailResult'],
                 step_name: builtins.str):
        """
        :param Sequence['GetPipelineRunStepOverrideDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param Sequence['GetPipelineRunStepOverrideDetailStepContainerConfigurationDetailArgs'] step_container_configuration_details: Container Details for a step in pipeline.
        :param Sequence['GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailArgs'] step_dataflow_configuration_details: The configuration details of a Dataflow step.
        :param builtins.str step_name: The name of the step.
        """
        pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        pulumi.set(__self__, "step_container_configuration_details", step_container_configuration_details)
        pulumi.set(__self__, "step_dataflow_configuration_details", step_dataflow_configuration_details)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetPipelineRunStepOverrideDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepContainerConfigurationDetails")
    def step_container_configuration_details(self) -> Sequence['outputs.GetPipelineRunStepOverrideDetailStepContainerConfigurationDetailResult']:
        """
        Container Details for a step in pipeline.
        """
        return pulumi.get(self, "step_container_configuration_details")

    @property
    @pulumi.getter(name="stepDataflowConfigurationDetails")
    def step_dataflow_configuration_details(self) -> Sequence['outputs.GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailResult']:
        """
        The configuration details of a Dataflow step.
        """
        return pulumi.get(self, "step_dataflow_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailStepContainerConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 container_type: builtins.str,
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param builtins.str container_type: The type of container.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> builtins.str:
        """
        The type of container.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 configuration: Mapping[str, builtins.str],
                 driver_shape: builtins.str,
                 driver_shape_config_details: Sequence['outputs.GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult'],
                 executor_shape: builtins.str,
                 executor_shape_config_details: Sequence['outputs.GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult'],
                 logs_bucket_uri: builtins.str,
                 num_executors: builtins.int,
                 warehouse_bucket_uri: builtins.str):
        """
        :param Mapping[str, builtins.str] configuration: The Spark configuration passed to the running process.
        :param builtins.str driver_shape: The VM shape for the driver.
        :param Sequence['GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailArgs'] driver_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str executor_shape: The VM shape for the executors.
        :param Sequence['GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailArgs'] executor_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str logs_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        :param builtins.int num_executors: The number of executor VMs requested.
        :param builtins.str warehouse_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "driver_shape", driver_shape)
        pulumi.set(__self__, "driver_shape_config_details", driver_shape_config_details)
        pulumi.set(__self__, "executor_shape", executor_shape)
        pulumi.set(__self__, "executor_shape_config_details", executor_shape_config_details)
        pulumi.set(__self__, "logs_bucket_uri", logs_bucket_uri)
        pulumi.set(__self__, "num_executors", num_executors)
        pulumi.set(__self__, "warehouse_bucket_uri", warehouse_bucket_uri)

    @property
    @pulumi.getter
    def configuration(self) -> Mapping[str, builtins.str]:
        """
        The Spark configuration passed to the running process.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="driverShape")
    def driver_shape(self) -> builtins.str:
        """
        The VM shape for the driver.
        """
        return pulumi.get(self, "driver_shape")

    @property
    @pulumi.getter(name="driverShapeConfigDetails")
    def driver_shape_config_details(self) -> Sequence['outputs.GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "driver_shape_config_details")

    @property
    @pulumi.getter(name="executorShape")
    def executor_shape(self) -> builtins.str:
        """
        The VM shape for the executors.
        """
        return pulumi.get(self, "executor_shape")

    @property
    @pulumi.getter(name="executorShapeConfigDetails")
    def executor_shape_config_details(self) -> Sequence['outputs.GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "executor_shape_config_details")

    @property
    @pulumi.getter(name="logsBucketUri")
    def logs_bucket_uri(self) -> builtins.str:
        """
        An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        """
        return pulumi.get(self, "logs_bucket_uri")

    @property
    @pulumi.getter(name="numExecutors")
    def num_executors(self) -> builtins.int:
        """
        The number of executor VMs requested.
        """
        return pulumi.get(self, "num_executors")

    @property
    @pulumi.getter(name="warehouseBucketUri")
    def warehouse_bucket_uri(self) -> builtins.str:
        """
        An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        return pulumi.get(self, "warehouse_bucket_uri")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineRunStepRunResult(dict):
    def __init__(__self__, *,
                 dataflow_run_id: builtins.str,
                 job_run_id: builtins.str,
                 lifecycle_details: builtins.str,
                 state: builtins.str,
                 step_name: builtins.str,
                 step_type: builtins.str,
                 time_finished: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.str dataflow_run_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow run triggered for this step run.
        :param builtins.str job_run_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        :param builtins.str lifecycle_details: Details of the state of the step run.
        :param builtins.str state: The state of the step run.
        :param builtins.str step_name: The name of the step.
        :param builtins.str step_type: The type of step.
        :param builtins.str time_finished: The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_started: The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "dataflow_run_id", dataflow_run_id)
        pulumi.set(__self__, "job_run_id", job_run_id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_type", step_type)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="dataflowRunId")
    def dataflow_run_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow run triggered for this step run.
        """
        return pulumi.get(self, "dataflow_run_id")

    @property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        """
        return pulumi.get(self, "job_run_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Details of the state of the step run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The state of the step run.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> builtins.str:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> builtins.str:
        """
        The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetPipelineRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelineRunsPipelineRunResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 configuration_details: Sequence['outputs.GetPipelineRunsPipelineRunConfigurationDetailResult'],
                 configuration_override_details: Sequence['outputs.GetPipelineRunsPipelineRunConfigurationOverrideDetailResult'],
                 created_by: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 delete_related_job_runs: builtins.bool,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 log_configuration_override_details: Sequence['outputs.GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult'],
                 log_details: Sequence['outputs.GetPipelineRunsPipelineRunLogDetailResult'],
                 opc_parent_rpt_url: builtins.str,
                 pipeline_id: builtins.str,
                 project_id: builtins.str,
                 state: builtins.str,
                 step_override_details: Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailResult'],
                 step_runs: Sequence['outputs.GetPipelineRunsPipelineRunStepRunResult'],
                 system_tags: Mapping[str, builtins.str],
                 time_accepted: builtins.str,
                 time_finished: builtins.str,
                 time_started: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetPipelineRunsPipelineRunConfigurationDetailArgs'] configuration_details: The configuration details of a pipeline.
        :param Sequence['GetPipelineRunsPipelineRunConfigurationOverrideDetailArgs'] configuration_override_details: The configuration details of a pipeline.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param builtins.str lifecycle_details: Details of the state of the step run.
        :param Sequence['GetPipelineRunsPipelineRunLogConfigurationOverrideDetailArgs'] log_configuration_override_details: The pipeline log configuration details.
        :param Sequence['GetPipelineRunsPipelineRunLogDetailArgs'] log_details: Customer logging details for pipeline run.
        :param builtins.str pipeline_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline.
        :param builtins.str project_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the pipeline run with.
        :param builtins.str state: The current state of the PipelineRun.
        :param Sequence['GetPipelineRunsPipelineRunStepOverrideDetailArgs'] step_override_details: Array of step override details. Only Step Configuration is allowed to be overridden.
        :param Sequence['GetPipelineRunsPipelineRunStepRunArgs'] step_runs: Array of StepRun object for each step.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_accepted: The date and time the pipeline run was accepted in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_finished: The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_started: The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_updated: The date and time the pipeline run was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "configuration_details", configuration_details)
        pulumi.set(__self__, "configuration_override_details", configuration_override_details)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "delete_related_job_runs", delete_related_job_runs)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "log_configuration_override_details", log_configuration_override_details)
        pulumi.set(__self__, "log_details", log_details)
        pulumi.set(__self__, "opc_parent_rpt_url", opc_parent_rpt_url)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "step_override_details", step_override_details)
        pulumi.set(__self__, "step_runs", step_runs)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_accepted", time_accepted)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_started", time_started)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationDetails")
    def configuration_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunConfigurationDetailResult']:
        """
        The configuration details of a pipeline.
        """
        return pulumi.get(self, "configuration_details")

    @property
    @pulumi.getter(name="configurationOverrideDetails")
    def configuration_override_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunConfigurationOverrideDetailResult']:
        """
        The configuration details of a pipeline.
        """
        return pulumi.get(self, "configuration_override_details")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deleteRelatedJobRuns")
    def delete_related_job_runs(self) -> builtins.bool:
        return pulumi.get(self, "delete_related_job_runs")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Details of the state of the step run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logConfigurationOverrideDetails")
    def log_configuration_override_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult']:
        """
        The pipeline log configuration details.
        """
        return pulumi.get(self, "log_configuration_override_details")

    @property
    @pulumi.getter(name="logDetails")
    def log_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunLogDetailResult']:
        """
        Customer logging details for pipeline run.
        """
        return pulumi.get(self, "log_details")

    @property
    @pulumi.getter(name="opcParentRptUrl")
    def opc_parent_rpt_url(self) -> builtins.str:
        return pulumi.get(self, "opc_parent_rpt_url")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline.
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the pipeline run with.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the PipelineRun.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepOverrideDetails")
    def step_override_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailResult']:
        """
        Array of step override details. Only Step Configuration is allowed to be overridden.
        """
        return pulumi.get(self, "step_override_details")

    @property
    @pulumi.getter(name="stepRuns")
    def step_runs(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepRunResult']:
        """
        Array of StepRun object for each step.
        """
        return pulumi.get(self, "step_runs")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> builtins.str:
        """
        The date and time the pipeline run was accepted in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> builtins.str:
        """
        The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time the pipeline run was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPipelineRunsPipelineRunConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param builtins.str type: The type of pipeline.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunsPipelineRunConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param builtins.str type: The type of pipeline.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: The log group id for where log objects will be for pipeline runs.
        :param builtins.str log_id: The log id of the log object the pipeline run logs will be shipped to.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects will be for pipeline runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id of the log object the pipeline run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunsPipelineRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The log group id for where log objects will be for pipeline runs.
        :param builtins.str log_id: The log id of the log object the pipeline run logs will be shipped to.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The log group id for where log objects will be for pipeline runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The log id of the log object the pipeline run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailResult(dict):
    def __init__(__self__, *,
                 step_configuration_details: Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult'],
                 step_container_configuration_details: Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepContainerConfigurationDetailResult'],
                 step_dataflow_configuration_details: Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailResult'],
                 step_name: builtins.str):
        """
        :param Sequence['GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param Sequence['GetPipelineRunsPipelineRunStepOverrideDetailStepContainerConfigurationDetailArgs'] step_container_configuration_details: Container Details for a step in pipeline.
        :param Sequence['GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailArgs'] step_dataflow_configuration_details: The configuration details of a Dataflow step.
        :param builtins.str step_name: The name of the step.
        """
        pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        pulumi.set(__self__, "step_container_configuration_details", step_container_configuration_details)
        pulumi.set(__self__, "step_dataflow_configuration_details", step_dataflow_configuration_details)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepContainerConfigurationDetails")
    def step_container_configuration_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepContainerConfigurationDetailResult']:
        """
        Container Details for a step in pipeline.
        """
        return pulumi.get(self, "step_container_configuration_details")

    @property
    @pulumi.getter(name="stepDataflowConfigurationDetails")
    def step_dataflow_configuration_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailResult']:
        """
        The configuration details of a Dataflow step.
        """
        return pulumi.get(self, "step_dataflow_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailStepContainerConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 container_type: builtins.str,
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param builtins.str container_type: The type of container.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> builtins.str:
        """
        The type of container.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 configuration: Mapping[str, builtins.str],
                 driver_shape: builtins.str,
                 driver_shape_config_details: Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult'],
                 executor_shape: builtins.str,
                 executor_shape_config_details: Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult'],
                 logs_bucket_uri: builtins.str,
                 num_executors: builtins.int,
                 warehouse_bucket_uri: builtins.str):
        """
        :param Mapping[str, builtins.str] configuration: The Spark configuration passed to the running process.
        :param builtins.str driver_shape: The VM shape for the driver.
        :param Sequence['GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailArgs'] driver_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str executor_shape: The VM shape for the executors.
        :param Sequence['GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailArgs'] executor_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str logs_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        :param builtins.int num_executors: The number of executor VMs requested.
        :param builtins.str warehouse_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "driver_shape", driver_shape)
        pulumi.set(__self__, "driver_shape_config_details", driver_shape_config_details)
        pulumi.set(__self__, "executor_shape", executor_shape)
        pulumi.set(__self__, "executor_shape_config_details", executor_shape_config_details)
        pulumi.set(__self__, "logs_bucket_uri", logs_bucket_uri)
        pulumi.set(__self__, "num_executors", num_executors)
        pulumi.set(__self__, "warehouse_bucket_uri", warehouse_bucket_uri)

    @property
    @pulumi.getter
    def configuration(self) -> Mapping[str, builtins.str]:
        """
        The Spark configuration passed to the running process.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="driverShape")
    def driver_shape(self) -> builtins.str:
        """
        The VM shape for the driver.
        """
        return pulumi.get(self, "driver_shape")

    @property
    @pulumi.getter(name="driverShapeConfigDetails")
    def driver_shape_config_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "driver_shape_config_details")

    @property
    @pulumi.getter(name="executorShape")
    def executor_shape(self) -> builtins.str:
        """
        The VM shape for the executors.
        """
        return pulumi.get(self, "executor_shape")

    @property
    @pulumi.getter(name="executorShapeConfigDetails")
    def executor_shape_config_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "executor_shape_config_details")

    @property
    @pulumi.getter(name="logsBucketUri")
    def logs_bucket_uri(self) -> builtins.str:
        """
        An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        """
        return pulumi.get(self, "logs_bucket_uri")

    @property
    @pulumi.getter(name="numExecutors")
    def num_executors(self) -> builtins.int:
        """
        The number of executor VMs requested.
        """
        return pulumi.get(self, "num_executors")

    @property
    @pulumi.getter(name="warehouseBucketUri")
    def warehouse_bucket_uri(self) -> builtins.str:
        """
        An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        return pulumi.get(self, "warehouse_bucket_uri")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepRunResult(dict):
    def __init__(__self__, *,
                 dataflow_run_id: builtins.str,
                 job_run_id: builtins.str,
                 lifecycle_details: builtins.str,
                 state: builtins.str,
                 step_name: builtins.str,
                 step_type: builtins.str,
                 time_finished: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.str dataflow_run_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow run triggered for this step run.
        :param builtins.str job_run_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        :param builtins.str lifecycle_details: Details of the state of the step run.
        :param builtins.str state: The current state of the PipelineRun.
        :param builtins.str step_name: The name of the step.
        :param builtins.str step_type: The type of step.
        :param builtins.str time_finished: The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_started: The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        pulumi.set(__self__, "dataflow_run_id", dataflow_run_id)
        pulumi.set(__self__, "job_run_id", job_run_id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_type", step_type)
        pulumi.set(__self__, "time_finished", time_finished)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="dataflowRunId")
    def dataflow_run_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow run triggered for this step run.
        """
        return pulumi.get(self, "dataflow_run_id")

    @property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        """
        return pulumi.get(self, "job_run_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Details of the state of the step run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the PipelineRun.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> builtins.str:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> builtins.str:
        """
        The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetPipelineStepArtifactResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: builtins.str,
                 artifact_content_length: builtins.str,
                 artifact_content_md5: builtins.str,
                 artifact_last_modified: builtins.str,
                 pipeline_step_artifact: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str step_name: The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)
        pulumi.set(__self__, "pipeline_step_artifact", pipeline_step_artifact)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> builtins.str:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="pipelineStepArtifact")
    def pipeline_step_artifact(self) -> builtins.str:
        return pulumi.get(self, "pipeline_step_artifact")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelineStepDetailResult(dict):
    def __init__(__self__, *,
                 application_id: builtins.str,
                 depends_ons: Sequence[builtins.str],
                 description: builtins.str,
                 is_artifact_uploaded: builtins.bool,
                 job_id: builtins.str,
                 step_configuration_details: Sequence['outputs.GetPipelineStepDetailStepConfigurationDetailResult'],
                 step_container_configuration_details: Sequence['outputs.GetPipelineStepDetailStepContainerConfigurationDetailResult'],
                 step_dataflow_configuration_details: Sequence['outputs.GetPipelineStepDetailStepDataflowConfigurationDetailResult'],
                 step_infrastructure_configuration_details: Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailResult'],
                 step_name: builtins.str,
                 step_storage_mount_configuration_details_lists: Sequence['outputs.GetPipelineStepDetailStepStorageMountConfigurationDetailsListResult'],
                 step_type: builtins.str):
        """
        :param builtins.str application_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow application to be used as a step.
        :param Sequence[builtins.str] depends_ons: The list of step names this current step depends on for execution.
        :param builtins.str description: A short description of the step.
        :param builtins.bool is_artifact_uploaded: A flag to indicate whether the artifact has been uploaded for this step or not.
        :param builtins.str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        :param Sequence['GetPipelineStepDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param Sequence['GetPipelineStepDetailStepContainerConfigurationDetailArgs'] step_container_configuration_details: Container Details for a step in pipeline.
        :param Sequence['GetPipelineStepDetailStepDataflowConfigurationDetailArgs'] step_dataflow_configuration_details: The configuration details of a Dataflow step.
        :param Sequence['GetPipelineStepDetailStepInfrastructureConfigurationDetailArgs'] step_infrastructure_configuration_details: The infrastructure configuration details of a pipeline or a step.
        :param builtins.str step_name: The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        :param Sequence['GetPipelineStepDetailStepStorageMountConfigurationDetailsListArgs'] step_storage_mount_configuration_details_lists: The storage mount details to mount to the instance running the pipeline step.
        :param builtins.str step_type: The type of step.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "depends_ons", depends_ons)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_artifact_uploaded", is_artifact_uploaded)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        pulumi.set(__self__, "step_container_configuration_details", step_container_configuration_details)
        pulumi.set(__self__, "step_dataflow_configuration_details", step_dataflow_configuration_details)
        pulumi.set(__self__, "step_infrastructure_configuration_details", step_infrastructure_configuration_details)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_storage_mount_configuration_details_lists", step_storage_mount_configuration_details_lists)
        pulumi.set(__self__, "step_type", step_type)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow application to be used as a step.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Sequence[builtins.str]:
        """
        The list of step names this current step depends on for execution.
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isArtifactUploaded")
    def is_artifact_uploaded(self) -> builtins.bool:
        """
        A flag to indicate whether the artifact has been uploaded for this step or not.
        """
        return pulumi.get(self, "is_artifact_uploaded")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetPipelineStepDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepContainerConfigurationDetails")
    def step_container_configuration_details(self) -> Sequence['outputs.GetPipelineStepDetailStepContainerConfigurationDetailResult']:
        """
        Container Details for a step in pipeline.
        """
        return pulumi.get(self, "step_container_configuration_details")

    @property
    @pulumi.getter(name="stepDataflowConfigurationDetails")
    def step_dataflow_configuration_details(self) -> Sequence['outputs.GetPipelineStepDetailStepDataflowConfigurationDetailResult']:
        """
        The configuration details of a Dataflow step.
        """
        return pulumi.get(self, "step_dataflow_configuration_details")

    @property
    @pulumi.getter(name="stepInfrastructureConfigurationDetails")
    def step_infrastructure_configuration_details(self) -> Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailResult']:
        """
        The infrastructure configuration details of a pipeline or a step.
        """
        return pulumi.get(self, "step_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepStorageMountConfigurationDetailsLists")
    def step_storage_mount_configuration_details_lists(self) -> Sequence['outputs.GetPipelineStepDetailStepStorageMountConfigurationDetailsListResult']:
        """
        The storage mount details to mount to the instance running the pipeline step.
        """
        return pulumi.get(self, "step_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> builtins.str:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetPipelineStepDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelineStepDetailStepContainerConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 container_type: builtins.str,
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param builtins.str container_type: The type of container.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> builtins.str:
        """
        The type of container.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class GetPipelineStepDetailStepDataflowConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 configuration: Mapping[str, builtins.str],
                 driver_shape: builtins.str,
                 driver_shape_config_details: Sequence['outputs.GetPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult'],
                 executor_shape: builtins.str,
                 executor_shape_config_details: Sequence['outputs.GetPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult'],
                 logs_bucket_uri: builtins.str,
                 num_executors: builtins.int,
                 warehouse_bucket_uri: builtins.str):
        """
        :param Mapping[str, builtins.str] configuration: The Spark configuration passed to the running process.
        :param builtins.str driver_shape: The VM shape for the driver.
        :param Sequence['GetPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailArgs'] driver_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str executor_shape: The VM shape for the executors.
        :param Sequence['GetPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailArgs'] executor_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str logs_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        :param builtins.int num_executors: The number of executor VMs requested.
        :param builtins.str warehouse_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "driver_shape", driver_shape)
        pulumi.set(__self__, "driver_shape_config_details", driver_shape_config_details)
        pulumi.set(__self__, "executor_shape", executor_shape)
        pulumi.set(__self__, "executor_shape_config_details", executor_shape_config_details)
        pulumi.set(__self__, "logs_bucket_uri", logs_bucket_uri)
        pulumi.set(__self__, "num_executors", num_executors)
        pulumi.set(__self__, "warehouse_bucket_uri", warehouse_bucket_uri)

    @property
    @pulumi.getter
    def configuration(self) -> Mapping[str, builtins.str]:
        """
        The Spark configuration passed to the running process.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="driverShape")
    def driver_shape(self) -> builtins.str:
        """
        The VM shape for the driver.
        """
        return pulumi.get(self, "driver_shape")

    @property
    @pulumi.getter(name="driverShapeConfigDetails")
    def driver_shape_config_details(self) -> Sequence['outputs.GetPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "driver_shape_config_details")

    @property
    @pulumi.getter(name="executorShape")
    def executor_shape(self) -> builtins.str:
        """
        The VM shape for the executors.
        """
        return pulumi.get(self, "executor_shape")

    @property
    @pulumi.getter(name="executorShapeConfigDetails")
    def executor_shape_config_details(self) -> Sequence['outputs.GetPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "executor_shape_config_details")

    @property
    @pulumi.getter(name="logsBucketUri")
    def logs_bucket_uri(self) -> builtins.str:
        """
        An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        """
        return pulumi.get(self, "logs_bucket_uri")

    @property
    @pulumi.getter(name="numExecutors")
    def num_executors(self) -> builtins.int:
        """
        The number of executor VMs requested.
        """
        return pulumi.get(self, "num_executors")

    @property
    @pulumi.getter(name="warehouseBucketUri")
    def warehouse_bucket_uri(self) -> builtins.str:
        """
        An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        return pulumi.get(self, "warehouse_bucket_uri")


@pulumi.output_type
class GetPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineStepDetailStepInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 shape_config_details: Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult'],
                 shape_name: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param Sequence['GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailArgs'] shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        :param builtins.str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "shape_config_details", shape_config_details)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineStepDetailStepStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetPipelineStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetPipelinesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelinesPipelineResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 configuration_details: Sequence['outputs.GetPipelinesPipelineConfigurationDetailResult'],
                 created_by: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 delete_related_pipeline_runs: builtins.bool,
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 infrastructure_configuration_details: Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailResult'],
                 lifecycle_details: builtins.str,
                 log_configuration_details: Sequence['outputs.GetPipelinesPipelineLogConfigurationDetailResult'],
                 project_id: builtins.str,
                 state: builtins.str,
                 step_artifacts: Sequence['outputs.GetPipelinesPipelineStepArtifactResult'],
                 step_details: Sequence['outputs.GetPipelinesPipelineStepDetailResult'],
                 storage_mount_configuration_details_lists: Sequence['outputs.GetPipelinesPipelineStorageMountConfigurationDetailsListResult'],
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetPipelinesPipelineConfigurationDetailArgs'] configuration_details: The configuration details of a pipeline.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: A short description of the step.
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param Sequence['GetPipelinesPipelineInfrastructureConfigurationDetailArgs'] infrastructure_configuration_details: The infrastructure configuration details of a pipeline or a step.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
        :param Sequence['GetPipelinesPipelineLogConfigurationDetailArgs'] log_configuration_details: The pipeline log configuration details.
        :param builtins.str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param builtins.str state: The current state of the Pipeline.
        :param Sequence['GetPipelinesPipelineStepDetailArgs'] step_details: Array of step details for each step.
        :param Sequence['GetPipelinesPipelineStorageMountConfigurationDetailsListArgs'] storage_mount_configuration_details_lists: The storage mount details to mount to the instance running the pipeline step.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        :param builtins.str time_updated: The date and time the resource was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "configuration_details", configuration_details)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "delete_related_pipeline_runs", delete_related_pipeline_runs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "infrastructure_configuration_details", infrastructure_configuration_details)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "log_configuration_details", log_configuration_details)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "step_artifacts", step_artifacts)
        pulumi.set(__self__, "step_details", step_details)
        pulumi.set(__self__, "storage_mount_configuration_details_lists", storage_mount_configuration_details_lists)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationDetails")
    def configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineConfigurationDetailResult']:
        """
        The configuration details of a pipeline.
        """
        return pulumi.get(self, "configuration_details")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deleteRelatedPipelineRuns")
    def delete_related_pipeline_runs(self) -> builtins.bool:
        return pulumi.get(self, "delete_related_pipeline_runs")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="infrastructureConfigurationDetails")
    def infrastructure_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailResult']:
        """
        The infrastructure configuration details of a pipeline or a step.
        """
        return pulumi.get(self, "infrastructure_configuration_details")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logConfigurationDetails")
    def log_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineLogConfigurationDetailResult']:
        """
        The pipeline log configuration details.
        """
        return pulumi.get(self, "log_configuration_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the Pipeline.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepArtifacts")
    def step_artifacts(self) -> Sequence['outputs.GetPipelinesPipelineStepArtifactResult']:
        return pulumi.get(self, "step_artifacts")

    @property
    @pulumi.getter(name="stepDetails")
    def step_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailResult']:
        """
        Array of step details for each step.
        """
        return pulumi.get(self, "step_details")

    @property
    @pulumi.getter(name="storageMountConfigurationDetailsLists")
    def storage_mount_configuration_details_lists(self) -> Sequence['outputs.GetPipelinesPipelineStorageMountConfigurationDetailsListResult']:
        """
        The storage mount details to mount to the instance running the pipeline step.
        """
        return pulumi.get(self, "storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time the resource was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPipelinesPipelineConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param builtins.str type: The type of pipeline.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelinesPipelineInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 shape_config_details: Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult'],
                 shape_name: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param Sequence['GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailArgs'] shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        :param builtins.str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "shape_config_details", shape_config_details)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelinesPipelineLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelinesPipelineStepArtifactResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: builtins.str,
                 artifact_content_length: builtins.str,
                 artifact_content_md5: builtins.str,
                 artifact_last_modified: builtins.str,
                 pipeline_step_artifact: builtins.str,
                 step_name: builtins.str):
        """
        :param builtins.str step_name: The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)
        pulumi.set(__self__, "pipeline_step_artifact", pipeline_step_artifact)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> builtins.str:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> builtins.str:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="pipelineStepArtifact")
    def pipeline_step_artifact(self) -> builtins.str:
        return pulumi.get(self, "pipeline_step_artifact")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelinesPipelineStepDetailResult(dict):
    def __init__(__self__, *,
                 application_id: builtins.str,
                 depends_ons: Sequence[builtins.str],
                 description: builtins.str,
                 is_artifact_uploaded: builtins.bool,
                 job_id: builtins.str,
                 step_configuration_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepConfigurationDetailResult'],
                 step_container_configuration_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepContainerConfigurationDetailResult'],
                 step_dataflow_configuration_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailResult'],
                 step_infrastructure_configuration_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult'],
                 step_name: builtins.str,
                 step_storage_mount_configuration_details_lists: Sequence['outputs.GetPipelinesPipelineStepDetailStepStorageMountConfigurationDetailsListResult'],
                 step_type: builtins.str):
        """
        :param builtins.str application_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow application to be used as a step.
        :param Sequence[builtins.str] depends_ons: The list of step names this current step depends on for execution.
        :param builtins.str description: A short description of the step.
        :param builtins.bool is_artifact_uploaded: A flag to indicate whether the artifact has been uploaded for this step or not.
        :param builtins.str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        :param Sequence['GetPipelinesPipelineStepDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param Sequence['GetPipelinesPipelineStepDetailStepContainerConfigurationDetailArgs'] step_container_configuration_details: Container Details for a step in pipeline.
        :param Sequence['GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailArgs'] step_dataflow_configuration_details: The configuration details of a Dataflow step.
        :param Sequence['GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailArgs'] step_infrastructure_configuration_details: The infrastructure configuration details of a pipeline or a step.
        :param builtins.str step_name: The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        :param Sequence['GetPipelinesPipelineStepDetailStepStorageMountConfigurationDetailsListArgs'] step_storage_mount_configuration_details_lists: The storage mount details to mount to the instance running the pipeline step.
        :param builtins.str step_type: The type of step.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "depends_ons", depends_ons)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_artifact_uploaded", is_artifact_uploaded)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        pulumi.set(__self__, "step_container_configuration_details", step_container_configuration_details)
        pulumi.set(__self__, "step_dataflow_configuration_details", step_dataflow_configuration_details)
        pulumi.set(__self__, "step_infrastructure_configuration_details", step_infrastructure_configuration_details)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_storage_mount_configuration_details_lists", step_storage_mount_configuration_details_lists)
        pulumi.set(__self__, "step_type", step_type)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the dataflow application to be used as a step.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Sequence[builtins.str]:
        """
        The list of step names this current step depends on for execution.
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isArtifactUploaded")
    def is_artifact_uploaded(self) -> builtins.bool:
        """
        A flag to indicate whether the artifact has been uploaded for this step or not.
        """
        return pulumi.get(self, "is_artifact_uploaded")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepContainerConfigurationDetails")
    def step_container_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepContainerConfigurationDetailResult']:
        """
        Container Details for a step in pipeline.
        """
        return pulumi.get(self, "step_container_configuration_details")

    @property
    @pulumi.getter(name="stepDataflowConfigurationDetails")
    def step_dataflow_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailResult']:
        """
        The configuration details of a Dataflow step.
        """
        return pulumi.get(self, "step_dataflow_configuration_details")

    @property
    @pulumi.getter(name="stepInfrastructureConfigurationDetails")
    def step_infrastructure_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult']:
        """
        The infrastructure configuration details of a pipeline or a step.
        """
        return pulumi.get(self, "step_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepStorageMountConfigurationDetailsLists")
    def step_storage_mount_configuration_details_lists(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepStorageMountConfigurationDetailsListResult']:
        """
        The storage mount details to mount to the instance running the pipeline step.
        """
        return pulumi.get(self, "step_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> builtins.str:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepContainerConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 container_type: builtins.str,
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param builtins.str container_type: The type of container.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> builtins.str:
        """
        The type of container.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 configuration: Mapping[str, builtins.str],
                 driver_shape: builtins.str,
                 driver_shape_config_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult'],
                 executor_shape: builtins.str,
                 executor_shape_config_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult'],
                 logs_bucket_uri: builtins.str,
                 num_executors: builtins.int,
                 warehouse_bucket_uri: builtins.str):
        """
        :param Mapping[str, builtins.str] configuration: The Spark configuration passed to the running process.
        :param builtins.str driver_shape: The VM shape for the driver.
        :param Sequence['GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailArgs'] driver_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str executor_shape: The VM shape for the executors.
        :param Sequence['GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailArgs'] executor_shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str logs_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        :param builtins.int num_executors: The number of executor VMs requested.
        :param builtins.str warehouse_bucket_uri: An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "driver_shape", driver_shape)
        pulumi.set(__self__, "driver_shape_config_details", driver_shape_config_details)
        pulumi.set(__self__, "executor_shape", executor_shape)
        pulumi.set(__self__, "executor_shape_config_details", executor_shape_config_details)
        pulumi.set(__self__, "logs_bucket_uri", logs_bucket_uri)
        pulumi.set(__self__, "num_executors", num_executors)
        pulumi.set(__self__, "warehouse_bucket_uri", warehouse_bucket_uri)

    @property
    @pulumi.getter
    def configuration(self) -> Mapping[str, builtins.str]:
        """
        The Spark configuration passed to the running process.
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="driverShape")
    def driver_shape(self) -> builtins.str:
        """
        The VM shape for the driver.
        """
        return pulumi.get(self, "driver_shape")

    @property
    @pulumi.getter(name="driverShapeConfigDetails")
    def driver_shape_config_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "driver_shape_config_details")

    @property
    @pulumi.getter(name="executorShape")
    def executor_shape(self) -> builtins.str:
        """
        The VM shape for the executors.
        """
        return pulumi.get(self, "executor_shape")

    @property
    @pulumi.getter(name="executorShapeConfigDetails")
    def executor_shape_config_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "executor_shape_config_details")

    @property
    @pulumi.getter(name="logsBucketUri")
    def logs_bucket_uri(self) -> builtins.str:
        """
        An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
        """
        return pulumi.get(self, "logs_bucket_uri")

    @property
    @pulumi.getter(name="numExecutors")
    def num_executors(self) -> builtins.int:
        """
        The number of executor VMs requested.
        """
        return pulumi.get(self, "num_executors")

    @property
    @pulumi.getter(name="warehouseBucketUri")
    def warehouse_bucket_uri(self) -> builtins.str:
        """
        An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory for BATCH SQL runs.
        """
        return pulumi.get(self, "warehouse_bucket_uri")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailDriverShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepDataflowConfigurationDetailExecutorShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: builtins.int,
                 shape_config_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult'],
                 shape_name: builtins.str,
                 subnet_id: builtins.str):
        """
        :param builtins.int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param Sequence['GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailArgs'] shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param builtins.str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        :param builtins.str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "shape_config_details", shape_config_details)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> builtins.int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> builtins.str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the pipeline step.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: builtins.float,
                 ocpus: builtins.float):
        """
        :param builtins.float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param builtins.float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> builtins.float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetPipelinesPipelineStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: builtins.str,
                 destination_directory_name: builtins.str,
                 destination_path: builtins.str,
                 export_id: builtins.str,
                 mount_target_id: builtins.str,
                 namespace: builtins.str,
                 prefix: builtins.str,
                 storage_type: builtins.str):
        """
        :param builtins.str bucket: The object storage bucket
        :param builtins.str destination_directory_name: The local directory name to be mounted
        :param builtins.str destination_path: The local path of the mounted directory, excluding directory name.
        :param builtins.str export_id: OCID of the export
        :param builtins.str mount_target_id: OCID of the mount target
        :param builtins.str namespace: The object storage namespace
        :param builtins.str prefix: Prefix in the bucket to mount
        :param builtins.str storage_type: The type of storage.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "export_id", export_id)
        pulumi.set(__self__, "mount_target_id", mount_target_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> builtins.str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> builtins.str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> builtins.str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> builtins.str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetPrivateEndpointsDataSciencePrivateEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 created_by: builtins.str,
                 data_science_resource_type: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 fqdn: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 nsg_ids: Sequence[builtins.str],
                 state: builtins.str,
                 sub_domain: builtins.str,
                 subnet_id: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param builtins.str data_science_resource_type: Resource types in the Data Science service such as notebooks.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: A user friendly description. Avoid entering confidential information.
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param builtins.str fqdn: Accesing the Data Science resource using FQDN.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: The OCID of a private endpoint.
        :param builtins.str lifecycle_details: Details of the state of Data Science private endpoint.
        :param Sequence[builtins.str] nsg_ids: An array of network security group OCIDs.
        :param builtins.str state: The lifecycle state of the private endpoint.
        :param builtins.str subnet_id: The OCID of a subnet.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time that the Data Science private endpoint was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
        :param builtins.str time_updated: The date and time that the Data Science private endpoint was updated expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "data_science_resource_type", data_science_resource_type)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "nsg_ids", nsg_ids)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "sub_domain", sub_domain)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="dataScienceResourceType")
    def data_science_resource_type(self) -> builtins.str:
        """
        Resource types in the Data Science service such as notebooks.
        """
        return pulumi.get(self, "data_science_resource_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A user friendly description. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fqdn(self) -> builtins.str:
        """
        Accesing the Data Science resource using FQDN.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of a private endpoint.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        Details of the state of Data Science private endpoint.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[builtins.str]:
        """
        An array of network security group OCIDs.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The lifecycle state of the private endpoint.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> builtins.str:
        return pulumi.get(self, "sub_domain")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> builtins.str:
        """
        The OCID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time that the Data Science private endpoint was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time that the Data Science private endpoint was updated expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 created_by: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: A short description of the project.
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param builtins.str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetScheduleActionResult(dict):
    def __init__(__self__, *,
                 action_details: Sequence['outputs.GetScheduleActionActionDetailResult'],
                 action_type: builtins.str):
        """
        :param Sequence['GetScheduleActionActionDetailArgs'] action_details: Schedule Http action details
        :param builtins.str action_type: The Schedule Action type
        """
        pulumi.set(__self__, "action_details", action_details)
        pulumi.set(__self__, "action_type", action_type)

    @property
    @pulumi.getter(name="actionDetails")
    def action_details(self) -> Sequence['outputs.GetScheduleActionActionDetailResult']:
        """
        Schedule Http action details
        """
        return pulumi.get(self, "action_details")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> builtins.str:
        """
        The Schedule Action type
        """
        return pulumi.get(self, "action_type")


@pulumi.output_type
class GetScheduleActionActionDetailResult(dict):
    def __init__(__self__, *,
                 create_job_run_details: Sequence['outputs.GetScheduleActionActionDetailCreateJobRunDetailResult'],
                 create_pipeline_run_details: Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailResult'],
                 http_action_type: builtins.str,
                 ml_application_instance_view_id: builtins.str,
                 trigger_ml_application_instance_view_flow_details: Sequence['outputs.GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailResult']):
        """
        :param Sequence['GetScheduleActionActionDetailCreateJobRunDetailArgs'] create_job_run_details: Parameters needed to create a new job run.
        :param Sequence['GetScheduleActionActionDetailCreatePipelineRunDetailArgs'] create_pipeline_run_details: The information about new PipelineRun.
        :param builtins.str http_action_type: The type of http action to trigger.
        :param builtins.str ml_application_instance_view_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the schedule.
        :param Sequence['GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailArgs'] trigger_ml_application_instance_view_flow_details: Payload for trigger request endpoint
        """
        pulumi.set(__self__, "create_job_run_details", create_job_run_details)
        pulumi.set(__self__, "create_pipeline_run_details", create_pipeline_run_details)
        pulumi.set(__self__, "http_action_type", http_action_type)
        pulumi.set(__self__, "ml_application_instance_view_id", ml_application_instance_view_id)
        pulumi.set(__self__, "trigger_ml_application_instance_view_flow_details", trigger_ml_application_instance_view_flow_details)

    @property
    @pulumi.getter(name="createJobRunDetails")
    def create_job_run_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreateJobRunDetailResult']:
        """
        Parameters needed to create a new job run.
        """
        return pulumi.get(self, "create_job_run_details")

    @property
    @pulumi.getter(name="createPipelineRunDetails")
    def create_pipeline_run_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailResult']:
        """
        The information about new PipelineRun.
        """
        return pulumi.get(self, "create_pipeline_run_details")

    @property
    @pulumi.getter(name="httpActionType")
    def http_action_type(self) -> builtins.str:
        """
        The type of http action to trigger.
        """
        return pulumi.get(self, "http_action_type")

    @property
    @pulumi.getter(name="mlApplicationInstanceViewId")
    def ml_application_instance_view_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the schedule.
        """
        return pulumi.get(self, "ml_application_instance_view_id")

    @property
    @pulumi.getter(name="triggerMlApplicationInstanceViewFlowDetails")
    def trigger_ml_application_instance_view_flow_details(self) -> Sequence['outputs.GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailResult']:
        """
        Payload for trigger request endpoint
        """
        return pulumi.get(self, "trigger_ml_application_instance_view_flow_details")


@pulumi.output_type
class GetScheduleActionActionDetailCreateJobRunDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 job_configuration_override_details: Sequence['outputs.GetScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailResult'],
                 job_environment_configuration_override_details: Sequence['outputs.GetScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailResult'],
                 job_id: builtins.str,
                 job_log_configuration_override_details: Sequence['outputs.GetScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailResult'],
                 project_id: builtins.str):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the schedule.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: A user-friendly display name for the resource. Avoid entering confidential information.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param Sequence['GetScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailArgs'] job_configuration_override_details: The job configuration details
        :param Sequence['GetScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailArgs'] job_environment_configuration_override_details: Environment configuration to capture job runtime dependencies.
        :param builtins.str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to create a run for.
        :param Sequence['GetScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailArgs'] job_log_configuration_override_details: Logging configuration for resource.
        :param builtins.str project_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project associated with the schedule.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "job_configuration_override_details", job_configuration_override_details)
        pulumi.set(__self__, "job_environment_configuration_override_details", job_environment_configuration_override_details)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_log_configuration_override_details", job_log_configuration_override_details)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the schedule.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly display name for the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="jobConfigurationOverrideDetails")
    def job_configuration_override_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailResult']:
        """
        The job configuration details
        """
        return pulumi.get(self, "job_configuration_override_details")

    @property
    @pulumi.getter(name="jobEnvironmentConfigurationOverrideDetails")
    def job_environment_configuration_override_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailResult']:
        """
        Environment configuration to capture job runtime dependencies.
        """
        return pulumi.get(self, "job_environment_configuration_override_details")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to create a run for.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobLogConfigurationOverrideDetails")
    def job_log_configuration_override_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailResult']:
        """
        Logging configuration for resource.
        """
        return pulumi.get(self, "job_log_configuration_override_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project associated with the schedule.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 job_type: builtins.str,
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str job_type: The type of job.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> builtins.str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str,
                 job_environment_type: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        :param builtins.str job_environment_type: The environment configuration type used for job runtime.
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)
        pulumi.set(__self__, "job_environment_type", job_environment_type)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")

    @property
    @pulumi.getter(name="jobEnvironmentType")
    def job_environment_type(self) -> builtins.str:
        """
        The environment configuration type used for job runtime.
        """
        return pulumi.get(self, "job_environment_type")


@pulumi.output_type
class GetScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetScheduleActionActionDetailCreatePipelineRunDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 configuration_override_details: Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailResult'],
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 log_configuration_override_details: Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailResult'],
                 pipeline_id: builtins.str,
                 project_id: builtins.str,
                 step_override_details: Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailResult'],
                 system_tags: Mapping[str, builtins.str]):
        """
        :param builtins.str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the schedule.
        :param Sequence['GetScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailArgs'] configuration_override_details: The configuration details of a pipeline.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: A user-friendly display name for the resource. Avoid entering confidential information.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param Sequence['GetScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailArgs'] log_configuration_override_details: The pipeline log configuration details.
        :param builtins.str pipeline_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline for which pipeline run is created.
        :param builtins.str project_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project associated with the schedule.
        :param Sequence['GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailArgs'] step_override_details: Array of step override details. Only Step Configuration is allowed to be overridden.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "configuration_override_details", configuration_override_details)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "log_configuration_override_details", log_configuration_override_details)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "step_override_details", step_override_details)
        pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where you want to create the schedule.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationOverrideDetails")
    def configuration_override_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailResult']:
        """
        The configuration details of a pipeline.
        """
        return pulumi.get(self, "configuration_override_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A user-friendly display name for the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="logConfigurationOverrideDetails")
    def log_configuration_override_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailResult']:
        """
        The pipeline log configuration details.
        """
        return pulumi.get(self, "log_configuration_override_details")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline for which pipeline run is created.
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project associated with the schedule.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="stepOverrideDetails")
    def step_override_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailResult']:
        """
        Array of step override details. Only Step Configuration is allowed to be overridden.
        """
        return pulumi.get(self, "step_override_details")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param builtins.str type: The type of pipeline.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailResult(dict):
    def __init__(__self__, *,
                 step_configuration_details: Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailResult'],
                 step_container_configuration_details: Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailResult'],
                 step_name: builtins.str):
        """
        :param Sequence['GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param Sequence['GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailArgs'] step_container_configuration_details: Container Details for a step in pipeline.
        :param builtins.str step_name: The name of the step.
        """
        pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        pulumi.set(__self__, "step_container_configuration_details", step_container_configuration_details)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepContainerConfigurationDetails")
    def step_container_configuration_details(self) -> Sequence['outputs.GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailResult']:
        """
        Container Details for a step in pipeline.
        """
        return pulumi.get(self, "step_container_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 container_type: builtins.str,
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param builtins.str container_type: The type of container.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> builtins.str:
        """
        The type of container.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailResult(dict):
    def __init__(__self__, *,
                 parameters: Sequence['outputs.GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterResult'],
                 trigger_name: builtins.str):
        """
        :param Sequence['GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterArgs'] parameters: Parameters provided for given trigger invocation (they must match predefined schema)
        :param builtins.str trigger_name: Name of trigger
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "trigger_name", trigger_name)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterResult']:
        """
        Parameters provided for given trigger invocation (they must match predefined schema)
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> builtins.str:
        """
        Name of trigger
        """
        return pulumi.get(self, "trigger_name")


@pulumi.output_type
class GetScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: Name of trigger parameter
        :param builtins.str value: Value of trigger parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of trigger parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of trigger parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetScheduleLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetScheduleTriggerResult(dict):
    def __init__(__self__, *,
                 cron_expression: builtins.str,
                 frequency: builtins.str,
                 interval: builtins.int,
                 is_random_start_time: builtins.bool,
                 recurrence: builtins.str,
                 time_end: builtins.str,
                 time_start: builtins.str,
                 trigger_type: builtins.str):
        """
        :param builtins.str cron_expression: Schedule cron expression
        :param builtins.str frequency: The type of frequency
        :param builtins.int interval: The interval of frequency.
        :param builtins.bool is_random_start_time: when true and timeStart is null, system generate a random start time between now and now + interval;  isRandomStartTime can be true if timeStart is null.
        :param builtins.str recurrence: This recurrence field conforms to RFC-5545 formatting
        :param builtins.str time_end: The schedule end date time, if null, the schedule will never expire. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_start: The schedule starting date time, if null, System set the time when schedule is created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str trigger_type: The schedule trigger type
        """
        pulumi.set(__self__, "cron_expression", cron_expression)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "is_random_start_time", is_random_start_time)
        pulumi.set(__self__, "recurrence", recurrence)
        pulumi.set(__self__, "time_end", time_end)
        pulumi.set(__self__, "time_start", time_start)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> builtins.str:
        """
        Schedule cron expression
        """
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        """
        The type of frequency
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def interval(self) -> builtins.int:
        """
        The interval of frequency.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="isRandomStartTime")
    def is_random_start_time(self) -> builtins.bool:
        """
        when true and timeStart is null, system generate a random start time between now and now + interval;  isRandomStartTime can be true if timeStart is null.
        """
        return pulumi.get(self, "is_random_start_time")

    @property
    @pulumi.getter
    def recurrence(self) -> builtins.str:
        """
        This recurrence field conforms to RFC-5545 formatting
        """
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> builtins.str:
        """
        The schedule end date time, if null, the schedule will never expire. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> builtins.str:
        """
        The schedule starting date time, if null, System set the time when schedule is created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> builtins.str:
        """
        The schedule trigger type
        """
        return pulumi.get(self, "trigger_type")


@pulumi.output_type
class GetSchedulesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: Name of trigger parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of trigger parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulesScheduleResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetSchedulesScheduleActionResult'],
                 compartment_id: builtins.str,
                 created_by: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 last_schedule_run_details: builtins.str,
                 lifecycle_details: builtins.str,
                 log_details: Sequence['outputs.GetSchedulesScheduleLogDetailResult'],
                 project_id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_last_schedule_run: builtins.str,
                 time_next_scheduled_run: builtins.str,
                 time_updated: builtins.str,
                 triggers: Sequence['outputs.GetSchedulesScheduleTriggerResult']):
        """
        :param Sequence['GetSchedulesScheduleActionArgs'] actions: The schedule action
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param builtins.str created_by: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the schedule.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str description: A short description of the schedule.
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param builtins.str id: unique Schedule identifier
        :param builtins.str last_schedule_run_details: Details about the action performed by the last schedule execution. Example: `Invoked ML Application trigger.`
        :param builtins.str lifecycle_details: A message describing the current state in more detail.
        :param Sequence['GetSchedulesScheduleLogDetailArgs'] log_details: Custom logging details for schedule execution.
        :param builtins.str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param builtins.str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time the schedule was created. Format is defined by RFC3339.           Example: `2022-08-05T01:02:29.600Z`
        :param builtins.str time_last_schedule_run: The last schedule execution time. Format is defined by RFC3339. Example: `2022-08-05T01:02:29.600Z`
        :param builtins.str time_next_scheduled_run: The next scheduled execution time for the schedule. Format is defined by RFC3339. Example: `2022-08-05T01:02:29.600Z`
        :param builtins.str time_updated: The date and time the schedule was updated. Format is defined by RFC3339.           Example: `2022-09-05T01:02:29.600Z`
        :param Sequence['GetSchedulesScheduleTriggerArgs'] triggers: The trigger of the schedule can be UNIX cron or iCal expression or simple interval
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_schedule_run_details", last_schedule_run_details)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "log_details", log_details)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_last_schedule_run", time_last_schedule_run)
        pulumi.set(__self__, "time_next_scheduled_run", time_next_scheduled_run)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetSchedulesScheduleActionResult']:
        """
        The schedule action
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the schedule.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A short description of the schedule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        unique Schedule identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastScheduleRunDetails")
    def last_schedule_run_details(self) -> builtins.str:
        """
        Details about the action performed by the last schedule execution. Example: `Invoked ML Application trigger.`
        """
        return pulumi.get(self, "last_schedule_run_details")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logDetails")
    def log_details(self) -> Sequence['outputs.GetSchedulesScheduleLogDetailResult']:
        """
        Custom logging details for schedule execution.
        """
        return pulumi.get(self, "log_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the schedule was created. Format is defined by RFC3339.           Example: `2022-08-05T01:02:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeLastScheduleRun")
    def time_last_schedule_run(self) -> builtins.str:
        """
        The last schedule execution time. Format is defined by RFC3339. Example: `2022-08-05T01:02:29.600Z`
        """
        return pulumi.get(self, "time_last_schedule_run")

    @property
    @pulumi.getter(name="timeNextScheduledRun")
    def time_next_scheduled_run(self) -> builtins.str:
        """
        The next scheduled execution time for the schedule. Format is defined by RFC3339. Example: `2022-08-05T01:02:29.600Z`
        """
        return pulumi.get(self, "time_next_scheduled_run")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time the schedule was updated. Format is defined by RFC3339.           Example: `2022-09-05T01:02:29.600Z`
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetSchedulesScheduleTriggerResult']:
        """
        The trigger of the schedule can be UNIX cron or iCal expression or simple interval
        """
        return pulumi.get(self, "triggers")


@pulumi.output_type
class GetSchedulesScheduleActionResult(dict):
    def __init__(__self__, *,
                 action_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailResult'],
                 action_type: builtins.str):
        """
        :param Sequence['GetSchedulesScheduleActionActionDetailArgs'] action_details: Schedule Http action details
        :param builtins.str action_type: The Schedule Action type
        """
        pulumi.set(__self__, "action_details", action_details)
        pulumi.set(__self__, "action_type", action_type)

    @property
    @pulumi.getter(name="actionDetails")
    def action_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailResult']:
        """
        Schedule Http action details
        """
        return pulumi.get(self, "action_details")

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> builtins.str:
        """
        The Schedule Action type
        """
        return pulumi.get(self, "action_type")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailResult(dict):
    def __init__(__self__, *,
                 create_job_run_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreateJobRunDetailResult'],
                 create_pipeline_run_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailResult'],
                 http_action_type: builtins.str,
                 ml_application_instance_view_id: builtins.str,
                 trigger_ml_application_instance_view_flow_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailResult']):
        """
        :param Sequence['GetSchedulesScheduleActionActionDetailCreateJobRunDetailArgs'] create_job_run_details: Parameters needed to create a new job run.
        :param Sequence['GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailArgs'] create_pipeline_run_details: The information about new PipelineRun.
        :param builtins.str http_action_type: The type of http action to trigger.
        :param builtins.str ml_application_instance_view_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the schedule.
        :param Sequence['GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailArgs'] trigger_ml_application_instance_view_flow_details: Payload for trigger request endpoint
        """
        pulumi.set(__self__, "create_job_run_details", create_job_run_details)
        pulumi.set(__self__, "create_pipeline_run_details", create_pipeline_run_details)
        pulumi.set(__self__, "http_action_type", http_action_type)
        pulumi.set(__self__, "ml_application_instance_view_id", ml_application_instance_view_id)
        pulumi.set(__self__, "trigger_ml_application_instance_view_flow_details", trigger_ml_application_instance_view_flow_details)

    @property
    @pulumi.getter(name="createJobRunDetails")
    def create_job_run_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreateJobRunDetailResult']:
        """
        Parameters needed to create a new job run.
        """
        return pulumi.get(self, "create_job_run_details")

    @property
    @pulumi.getter(name="createPipelineRunDetails")
    def create_pipeline_run_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailResult']:
        """
        The information about new PipelineRun.
        """
        return pulumi.get(self, "create_pipeline_run_details")

    @property
    @pulumi.getter(name="httpActionType")
    def http_action_type(self) -> builtins.str:
        """
        The type of http action to trigger.
        """
        return pulumi.get(self, "http_action_type")

    @property
    @pulumi.getter(name="mlApplicationInstanceViewId")
    def ml_application_instance_view_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the schedule.
        """
        return pulumi.get(self, "ml_application_instance_view_id")

    @property
    @pulumi.getter(name="triggerMlApplicationInstanceViewFlowDetails")
    def trigger_ml_application_instance_view_flow_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailResult']:
        """
        Payload for trigger request endpoint
        """
        return pulumi.get(self, "trigger_ml_application_instance_view_flow_details")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreateJobRunDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 job_configuration_override_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailResult'],
                 job_environment_configuration_override_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailResult'],
                 job_id: builtins.str,
                 job_log_configuration_override_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailResult'],
                 project_id: builtins.str):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param Sequence['GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailArgs'] job_configuration_override_details: The job configuration details
        :param Sequence['GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailArgs'] job_environment_configuration_override_details: Environment configuration to capture job runtime dependencies.
        :param builtins.str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to create a run for.
        :param Sequence['GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailArgs'] job_log_configuration_override_details: Logging configuration for resource.
        :param builtins.str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "job_configuration_override_details", job_configuration_override_details)
        pulumi.set(__self__, "job_environment_configuration_override_details", job_environment_configuration_override_details)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_log_configuration_override_details", job_log_configuration_override_details)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="jobConfigurationOverrideDetails")
    def job_configuration_override_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailResult']:
        """
        The job configuration details
        """
        return pulumi.get(self, "job_configuration_override_details")

    @property
    @pulumi.getter(name="jobEnvironmentConfigurationOverrideDetails")
    def job_environment_configuration_override_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailResult']:
        """
        Environment configuration to capture job runtime dependencies.
        """
        return pulumi.get(self, "job_environment_configuration_override_details")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to create a run for.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobLogConfigurationOverrideDetails")
    def job_log_configuration_override_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailResult']:
        """
        Logging configuration for resource.
        """
        return pulumi.get(self, "job_log_configuration_override_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 job_type: builtins.str,
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str job_type: The type of job.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "job_type", job_type)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> builtins.str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobEnvironmentConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str,
                 job_environment_type: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        :param builtins.str job_environment_type: The environment configuration type used for job runtime.
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)
        pulumi.set(__self__, "job_environment_type", job_environment_type)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")

    @property
    @pulumi.getter(name="jobEnvironmentType")
    def job_environment_type(self) -> builtins.str:
        """
        The environment configuration type used for job runtime.
        """
        return pulumi.get(self, "job_environment_type")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreateJobRunDetailJobLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 configuration_override_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailResult'],
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 log_configuration_override_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailResult'],
                 pipeline_id: builtins.str,
                 project_id: builtins.str,
                 step_override_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailResult'],
                 system_tags: Mapping[str, builtins.str]):
        """
        :param builtins.str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailArgs'] configuration_override_details: The configuration details of a pipeline.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param builtins.str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, builtins.str] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param Sequence['GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailArgs'] log_configuration_override_details: The pipeline log configuration details.
        :param builtins.str pipeline_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline for which pipeline run is created.
        :param builtins.str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param Sequence['GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailArgs'] step_override_details: Array of step override details. Only Step Configuration is allowed to be overridden.
        :param Mapping[str, builtins.str] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "configuration_override_details", configuration_override_details)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "log_configuration_override_details", log_configuration_override_details)
        pulumi.set(__self__, "pipeline_id", pipeline_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "step_override_details", step_override_details)
        pulumi.set(__self__, "system_tags", system_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationOverrideDetails")
    def configuration_override_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailResult']:
        """
        The configuration details of a pipeline.
        """
        return pulumi.get(self, "configuration_override_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="logConfigurationOverrideDetails")
    def log_configuration_override_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailResult']:
        """
        The pipeline log configuration details.
        """
        return pulumi.get(self, "log_configuration_override_details")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline for which pipeline run is created.
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> builtins.str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="stepOverrideDetails")
    def step_override_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailResult']:
        """
        Array of step override details. Only Step Configuration is allowed to be overridden.
        """
        return pulumi.get(self, "step_override_details")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param builtins.str type: The type of pipeline.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: builtins.bool,
                 enable_logging: builtins.bool,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param builtins.bool enable_logging: If customer logging is enabled for pipeline.
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        pulumi.set(__self__, "enable_logging", enable_logging)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> builtins.bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> builtins.bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailResult(dict):
    def __init__(__self__, *,
                 step_configuration_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailResult'],
                 step_container_configuration_details: Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailResult'],
                 step_name: builtins.str):
        """
        :param Sequence['GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param Sequence['GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailArgs'] step_container_configuration_details: Container Details for a step in pipeline.
        :param builtins.str step_name: The name of the step.
        """
        pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        pulumi.set(__self__, "step_container_configuration_details", step_container_configuration_details)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepContainerConfigurationDetails")
    def step_container_configuration_details(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailResult']:
        """
        Container Details for a step in pipeline.
        """
        return pulumi.get(self, "step_container_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: builtins.str,
                 environment_variables: Mapping[str, builtins.str],
                 maximum_runtime_in_minutes: builtins.str):
        """
        :param builtins.str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, builtins.str] environment_variables: Environment variables to set for step.
        :param builtins.str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        pulumi.set(__self__, "environment_variables", environment_variables)
        pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> builtins.str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, builtins.str]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> builtins.str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailCreatePipelineRunDetailStepOverrideDetailStepContainerConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[builtins.str],
                 container_type: builtins.str,
                 entrypoints: Sequence[builtins.str],
                 image: builtins.str,
                 image_digest: builtins.str,
                 image_signature_id: builtins.str):
        """
        :param Sequence[builtins.str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param builtins.str container_type: The type of container.
        :param Sequence[builtins.str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param builtins.str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        :param builtins.str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param builtins.str image_signature_id: OCID of the container image signature
        """
        pulumi.set(__self__, "cmds", cmds)
        pulumi.set(__self__, "container_type", container_type)
        pulumi.set(__self__, "entrypoints", entrypoints)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "image_digest", image_digest)
        pulumi.set(__self__, "image_signature_id", image_signature_id)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[builtins.str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter(name="containerType")
    def container_type(self) -> builtins.str:
        """
        The type of container.
        """
        return pulumi.get(self, "container_type")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[builtins.str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter
    def image(self) -> builtins.str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> builtins.str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageSignatureId")
    def image_signature_id(self) -> builtins.str:
        """
        OCID of the container image signature
        """
        return pulumi.get(self, "image_signature_id")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailResult(dict):
    def __init__(__self__, *,
                 parameters: Sequence['outputs.GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterResult'],
                 trigger_name: builtins.str):
        """
        :param Sequence['GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterArgs'] parameters: Parameters provided for given trigger invocation (they must match predefined schema)
        :param builtins.str trigger_name: Name of trigger
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "trigger_name", trigger_name)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterResult']:
        """
        Parameters provided for given trigger invocation (they must match predefined schema)
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> builtins.str:
        """
        Name of trigger
        """
        return pulumi.get(self, "trigger_name")


@pulumi.output_type
class GetSchedulesScheduleActionActionDetailTriggerMlApplicationInstanceViewFlowDetailParameterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str name: Name of trigger parameter
        :param builtins.str value: Value of trigger parameter
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of trigger parameter
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        Value of trigger parameter
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSchedulesScheduleLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: builtins.str,
                 log_id: builtins.str):
        """
        :param builtins.str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param builtins.str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the custom log to be used for Schedule logging.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetSchedulesScheduleTriggerResult(dict):
    def __init__(__self__, *,
                 cron_expression: builtins.str,
                 frequency: builtins.str,
                 interval: builtins.int,
                 is_random_start_time: builtins.bool,
                 recurrence: builtins.str,
                 time_end: builtins.str,
                 time_start: builtins.str,
                 trigger_type: builtins.str):
        """
        :param builtins.str cron_expression: Schedule cron expression
        :param builtins.str frequency: The type of frequency
        :param builtins.int interval: The interval of frequency.
        :param builtins.bool is_random_start_time: when true and timeStart is null, system generate a random start time between now and now + interval;  isRandomStartTime can be true if timeStart is null.
        :param builtins.str recurrence: This recurrence field conforms to RFC-5545 formatting
        :param builtins.str time_end: The schedule end date time, if null, the schedule will never expire. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str time_start: The schedule starting date time, if null, System set the time when schedule is created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param builtins.str trigger_type: The schedule trigger type
        """
        pulumi.set(__self__, "cron_expression", cron_expression)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "is_random_start_time", is_random_start_time)
        pulumi.set(__self__, "recurrence", recurrence)
        pulumi.set(__self__, "time_end", time_end)
        pulumi.set(__self__, "time_start", time_start)
        pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> builtins.str:
        """
        Schedule cron expression
        """
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter
    def frequency(self) -> builtins.str:
        """
        The type of frequency
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def interval(self) -> builtins.int:
        """
        The interval of frequency.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="isRandomStartTime")
    def is_random_start_time(self) -> builtins.bool:
        """
        when true and timeStart is null, system generate a random start time between now and now + interval;  isRandomStartTime can be true if timeStart is null.
        """
        return pulumi.get(self, "is_random_start_time")

    @property
    @pulumi.getter
    def recurrence(self) -> builtins.str:
        """
        This recurrence field conforms to RFC-5545 formatting
        """
        return pulumi.get(self, "recurrence")

    @property
    @pulumi.getter(name="timeEnd")
    def time_end(self) -> builtins.str:
        """
        The schedule end date time, if null, the schedule will never expire. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_end")

    @property
    @pulumi.getter(name="timeStart")
    def time_start(self) -> builtins.str:
        """
        The schedule starting date time, if null, System set the time when schedule is created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_start")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> builtins.str:
        """
        The schedule trigger type
        """
        return pulumi.get(self, "trigger_type")


