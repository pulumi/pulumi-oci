# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'JobJobConfigurationDetails',
    'JobJobInfrastructureConfigurationDetails',
    'JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails',
    'JobJobLogConfigurationDetails',
    'JobJobStorageMountConfigurationDetailsList',
    'JobRunJobConfigurationOverrideDetails',
    'JobRunJobInfrastructureConfigurationDetail',
    'JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail',
    'JobRunJobLogConfigurationOverrideDetails',
    'JobRunJobStorageMountConfigurationDetailsList',
    'JobRunLogDetail',
    'ModelCustomMetadataList',
    'ModelDefinedMetadataList',
    'ModelDeploymentCategoryLogDetails',
    'ModelDeploymentCategoryLogDetailsAccess',
    'ModelDeploymentCategoryLogDetailsPredict',
    'ModelDeploymentModelDeploymentConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy',
    'NotebookSessionNotebookSessionConfigDetails',
    'NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails',
    'NotebookSessionNotebookSessionConfigurationDetails',
    'NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails',
    'NotebookSessionNotebookSessionRuntimeConfigDetails',
    'NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails',
    'NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection',
    'NotebookSessionNotebookSessionStorageMountConfigurationDetailsList',
    'PipelineConfigurationDetails',
    'PipelineInfrastructureConfigurationDetails',
    'PipelineInfrastructureConfigurationDetailsShapeConfigDetails',
    'PipelineLogConfigurationDetails',
    'PipelineRunConfigurationDetail',
    'PipelineRunConfigurationOverrideDetails',
    'PipelineRunLogConfigurationOverrideDetails',
    'PipelineRunLogDetail',
    'PipelineRunStepOverrideDetail',
    'PipelineRunStepOverrideDetailStepConfigurationDetails',
    'PipelineRunStepRun',
    'PipelineStepArtifact',
    'PipelineStepDetail',
    'PipelineStepDetailStepConfigurationDetails',
    'PipelineStepDetailStepInfrastructureConfigurationDetails',
    'PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails',
    'GetFastLaunchJobConfigsFastLaunchJobConfigResult',
    'GetFastLaunchJobConfigsFilterResult',
    'GetJobJobConfigurationDetailResult',
    'GetJobJobInfrastructureConfigurationDetailResult',
    'GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobJobLogConfigurationDetailResult',
    'GetJobJobStorageMountConfigurationDetailsListResult',
    'GetJobRunJobConfigurationOverrideDetailResult',
    'GetJobRunJobInfrastructureConfigurationDetailResult',
    'GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobRunJobLogConfigurationOverrideDetailResult',
    'GetJobRunJobStorageMountConfigurationDetailsListResult',
    'GetJobRunLogDetailResult',
    'GetJobRunsFilterResult',
    'GetJobRunsJobRunResult',
    'GetJobRunsJobRunJobConfigurationOverrideDetailResult',
    'GetJobRunsJobRunJobInfrastructureConfigurationDetailResult',
    'GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobRunsJobRunJobLogConfigurationOverrideDetailResult',
    'GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult',
    'GetJobRunsJobRunLogDetailResult',
    'GetJobShapesFilterResult',
    'GetJobShapesJobShapeResult',
    'GetJobsFilterResult',
    'GetJobsJobResult',
    'GetJobsJobJobConfigurationDetailResult',
    'GetJobsJobJobInfrastructureConfigurationDetailResult',
    'GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobsJobJobLogConfigurationDetailResult',
    'GetJobsJobJobStorageMountConfigurationDetailsListResult',
    'GetModelCustomMetadataListResult',
    'GetModelDefinedMetadataListResult',
    'GetModelDeploymentCategoryLogDetailResult',
    'GetModelDeploymentCategoryLogDetailAccessResult',
    'GetModelDeploymentCategoryLogDetailPredictResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult',
    'GetModelDeploymentShapesFilterResult',
    'GetModelDeploymentShapesModelDeploymentShapeResult',
    'GetModelDeploymentsFilterResult',
    'GetModelDeploymentsModelDeploymentResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult',
    'GetModelVersionSetsFilterResult',
    'GetModelVersionSetsModelVersionSetResult',
    'GetModelsFilterResult',
    'GetModelsModelResult',
    'GetModelsModelCustomMetadataListResult',
    'GetModelsModelDefinedMetadataListResult',
    'GetNotebookSessionNotebookSessionConfigDetailResult',
    'GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionNotebookSessionConfigurationDetailResult',
    'GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionNotebookSessionRuntimeConfigDetailResult',
    'GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult',
    'GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult',
    'GetNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult',
    'GetNotebookSessionShapesFilterResult',
    'GetNotebookSessionShapesNotebookSessionShapeResult',
    'GetNotebookSessionsFilterResult',
    'GetNotebookSessionsNotebookSessionResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult',
    'GetPipelineConfigurationDetailResult',
    'GetPipelineInfrastructureConfigurationDetailResult',
    'GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelineLogConfigurationDetailResult',
    'GetPipelineRunConfigurationDetailResult',
    'GetPipelineRunConfigurationOverrideDetailResult',
    'GetPipelineRunLogConfigurationOverrideDetailResult',
    'GetPipelineRunLogDetailResult',
    'GetPipelineRunStepOverrideDetailResult',
    'GetPipelineRunStepOverrideDetailStepConfigurationDetailResult',
    'GetPipelineRunStepRunResult',
    'GetPipelineRunsFilterResult',
    'GetPipelineRunsPipelineRunResult',
    'GetPipelineRunsPipelineRunConfigurationDetailResult',
    'GetPipelineRunsPipelineRunConfigurationOverrideDetailResult',
    'GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult',
    'GetPipelineRunsPipelineRunLogDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult',
    'GetPipelineRunsPipelineRunStepRunResult',
    'GetPipelineStepArtifactResult',
    'GetPipelineStepDetailResult',
    'GetPipelineStepDetailStepConfigurationDetailResult',
    'GetPipelineStepDetailStepInfrastructureConfigurationDetailResult',
    'GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelinesFilterResult',
    'GetPipelinesPipelineResult',
    'GetPipelinesPipelineConfigurationDetailResult',
    'GetPipelinesPipelineInfrastructureConfigurationDetailResult',
    'GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelinesPipelineLogConfigurationDetailResult',
    'GetPipelinesPipelineStepArtifactResult',
    'GetPipelinesPipelineStepDetailResult',
    'GetPipelinesPipelineStepDetailStepConfigurationDetailResult',
    'GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult',
    'GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPrivateEndpointsDataSciencePrivateEndpointResult',
    'GetPrivateEndpointsFilterResult',
    'GetProjectsFilterResult',
    'GetProjectsProjectResult',
]

@pulumi.output_type
class JobJobConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobType":
            suggest = "job_type"
        elif key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_type: str,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        """
        :param str job_type: The type of job.
        :param str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, Any] environment_variables: Environment variables to set for the job.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        JobJobConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_type=job_type,
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_type: Optional[str] = None,
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if job_type is None and 'jobType' in kwargs:
            job_type = kwargs['jobType']
        if job_type is None:
            raise TypeError("Missing 'job_type' argument")
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']

        _setter("job_type", job_type)
        if command_line_arguments is not None:
            _setter("command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class JobJobInfrastructureConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "jobInfrastructureType":
            suggest = "job_infrastructure_type"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "jobShapeConfigDetails":
            suggest = "job_shape_config_details"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobInfrastructureConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobInfrastructureConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobInfrastructureConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 job_infrastructure_type: str,
                 shape_name: str,
                 job_shape_config_details: Optional['outputs.JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails'] = None,
                 subnet_id: Optional[str] = None):
        """
        :param int block_storage_size_in_gbs: (Updatable) The size of the block storage volume to attach to the instance running the job
        :param str job_infrastructure_type: (Updatable) The infrastructure type used for job run.
        :param str shape_name: (Updatable) The shape used to launch the job run instances.
        :param 'JobJobInfrastructureConfigurationDetailsJobShapeConfigDetailsArgs' job_shape_config_details: (Updatable) Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param str subnet_id: (Updatable) The subnet to create a secondary vnic in to attach to the instance running the job
        """
        JobJobInfrastructureConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            job_infrastructure_type=job_infrastructure_type,
            shape_name=shape_name,
            job_shape_config_details=job_shape_config_details,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             job_infrastructure_type: Optional[str] = None,
             shape_name: Optional[str] = None,
             job_shape_config_details: Optional['outputs.JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails'] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if job_infrastructure_type is None and 'jobInfrastructureType' in kwargs:
            job_infrastructure_type = kwargs['jobInfrastructureType']
        if job_infrastructure_type is None:
            raise TypeError("Missing 'job_infrastructure_type' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")
        if job_shape_config_details is None and 'jobShapeConfigDetails' in kwargs:
            job_shape_config_details = kwargs['jobShapeConfigDetails']
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("job_infrastructure_type", job_infrastructure_type)
        _setter("shape_name", shape_name)
        if job_shape_config_details is not None:
            _setter("job_shape_config_details", job_shape_config_details)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        (Updatable) The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> str:
        """
        (Updatable) The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        (Updatable) The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional['outputs.JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails']:
        """
        (Updatable) Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        (Updatable) The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        """
        :param float memory_in_gbs: (Updatable) The total amount of memory available to the job run instance, in gigabytes.
        :param float ocpus: (Updatable) The total number of OCPUs available to the job run instance.
        """
        JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']

        if memory_in_gbs is not None:
            _setter("memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        """
        (Updatable) The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        """
        (Updatable) The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class JobJobLogConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobLogConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobLogConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobLogConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param bool enable_logging: If customer logging is enabled for job runs.
        :param str log_group_id: The log group id for where log objects are for job runs.
        :param str log_id: The log id the job run will push logs too.
        """
        JobJobLogConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']

        if enable_auto_log_creation is not None:
            _setter("enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            _setter("enable_logging", enable_logging)
        if log_group_id is not None:
            _setter("log_group_id", log_group_id)
        if log_id is not None:
            _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        """
        The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class JobJobStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_directory_name: str,
                 storage_type: str,
                 bucket: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param str destination_directory_name: (Updatable) The local directory name to be mounted
        :param str storage_type: (Updatable) The type of storage.
        :param str bucket: (Updatable) The object storage bucket
        :param str destination_path: (Updatable) The local path of the mounted directory, excluding directory name.
        :param str export_id: (Updatable) OCID of the export
        :param str mount_target_id: (Updatable) OCID of the mount target
        :param str namespace: (Updatable) The object storage namespace
        :param str prefix: (Updatable) Prefix in the bucket to mount
        """
        JobJobStorageMountConfigurationDetailsList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_directory_name=destination_directory_name,
            storage_type=storage_type,
            bucket=bucket,
            destination_path=destination_path,
            export_id=export_id,
            mount_target_id=mount_target_id,
            namespace=namespace,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_directory_name: Optional[str] = None,
             storage_type: Optional[str] = None,
             bucket: Optional[str] = None,
             destination_path: Optional[str] = None,
             export_id: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             namespace: Optional[str] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination_directory_name is None and 'destinationDirectoryName' in kwargs:
            destination_directory_name = kwargs['destinationDirectoryName']
        if destination_directory_name is None:
            raise TypeError("Missing 'destination_directory_name' argument")
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if storage_type is None:
            raise TypeError("Missing 'storage_type' argument")
        if destination_path is None and 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']

        _setter("destination_directory_name", destination_directory_name)
        _setter("storage_type", storage_type)
        if bucket is not None:
            _setter("bucket", bucket)
        if destination_path is not None:
            _setter("destination_path", destination_path)
        if export_id is not None:
            _setter("export_id", export_id)
        if mount_target_id is not None:
            _setter("mount_target_id", mount_target_id)
        if namespace is not None:
            _setter("namespace", namespace)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        """
        (Updatable) The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        (Updatable) The type of storage.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        (Updatable) The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        """
        (Updatable) The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        """
        (Updatable) OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        """
        (Updatable) OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        (Updatable) The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        (Updatable) Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class JobRunJobConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobType":
            suggest = "job_type"
        elif key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_type: str,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        """
        :param str job_type: The type of job.
        :param str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, Any] environment_variables: Environment variables to set for the job.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        JobRunJobConfigurationOverrideDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_type=job_type,
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_type: Optional[str] = None,
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if job_type is None and 'jobType' in kwargs:
            job_type = kwargs['jobType']
        if job_type is None:
            raise TypeError("Missing 'job_type' argument")
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']

        _setter("job_type", job_type)
        if command_line_arguments is not None:
            _setter("command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class JobRunJobInfrastructureConfigurationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "jobInfrastructureType":
            suggest = "job_infrastructure_type"
        elif key == "jobShapeConfigDetails":
            suggest = "job_shape_config_details"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobInfrastructureConfigurationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobInfrastructureConfigurationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobInfrastructureConfigurationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 job_infrastructure_type: Optional[str] = None,
                 job_shape_config_details: Optional[Sequence['outputs.JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail']] = None,
                 shape_name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param str shape_name: The shape used to launch the job run instances.
        :param str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        JobRunJobInfrastructureConfigurationDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            job_infrastructure_type=job_infrastructure_type,
            job_shape_config_details=job_shape_config_details,
            shape_name=shape_name,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             job_infrastructure_type: Optional[str] = None,
             job_shape_config_details: Optional[Sequence['outputs.JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail']] = None,
             shape_name: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if job_infrastructure_type is None and 'jobInfrastructureType' in kwargs:
            job_infrastructure_type = kwargs['jobInfrastructureType']
        if job_shape_config_details is None and 'jobShapeConfigDetails' in kwargs:
            job_shape_config_details = kwargs['jobShapeConfigDetails']
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']

        if block_storage_size_in_gbs is not None:
            _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        if job_infrastructure_type is not None:
            _setter("job_infrastructure_type", job_infrastructure_type)
        if job_shape_config_details is not None:
            _setter("job_shape_config_details", job_shape_config_details)
        if shape_name is not None:
            _setter("shape_name", shape_name)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> Optional[str]:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional[Sequence['outputs.JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail']]:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        """
        :param float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param float ocpus: The total number of OCPUs available to the job run instance.
        """
        JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']

        if memory_in_gbs is not None:
            _setter("memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class JobRunJobLogConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobLogConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobLogConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobLogConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param bool enable_logging: If customer logging is enabled for job runs.
        :param str log_group_id: The log group id for where log objects are for job runs.
        :param str log_id: The log id the job run will push logs too.
        """
        JobRunJobLogConfigurationOverrideDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']

        if enable_auto_log_creation is not None:
            _setter("enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            _setter("enable_logging", enable_logging)
        if log_group_id is not None:
            _setter("log_group_id", log_group_id)
        if log_id is not None:
            _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        """
        The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class JobRunJobStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination_directory_name: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_type: Optional[str] = None):
        """
        :param str bucket: The object storage bucket
        :param str destination_directory_name: The local directory name to be mounted
        :param str destination_path: The local path of the mounted directory, excluding directory name.
        :param str export_id: OCID of the export
        :param str mount_target_id: OCID of the mount target
        :param str namespace: The object storage namespace
        :param str prefix: Prefix in the bucket to mount
        :param str storage_type: The type of storage.
        """
        JobRunJobStorageMountConfigurationDetailsList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            destination_directory_name=destination_directory_name,
            destination_path=destination_path,
            export_id=export_id,
            mount_target_id=mount_target_id,
            namespace=namespace,
            prefix=prefix,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             destination_directory_name: Optional[str] = None,
             destination_path: Optional[str] = None,
             export_id: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             namespace: Optional[str] = None,
             prefix: Optional[str] = None,
             storage_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination_directory_name is None and 'destinationDirectoryName' in kwargs:
            destination_directory_name = kwargs['destinationDirectoryName']
        if destination_path is None and 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']

        if bucket is not None:
            _setter("bucket", bucket)
        if destination_directory_name is not None:
            _setter("destination_directory_name", destination_directory_name)
        if destination_path is not None:
            _setter("destination_path", destination_path)
        if export_id is not None:
            _setter("export_id", export_id)
        if mount_target_id is not None:
            _setter("mount_target_id", mount_target_id)
        if namespace is not None:
            _setter("namespace", namespace)
        if prefix is not None:
            _setter("prefix", prefix)
        if storage_type is not None:
            _setter("storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> Optional[str]:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class JobRunLogDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunLogDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunLogDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunLogDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        """
        :param str log_group_id: The log group id for where log objects are for job runs.
        :param str log_id: The log id the job run will push logs too.
        """
        JobRunLogDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']

        if log_group_id is not None:
            _setter("log_group_id", log_group_id)
        if log_id is not None:
            _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        """
        The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelCustomMetadataList(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str category: (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: (Updatable) A short description of the model.
        :param str key: (Updatable) Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testartifactresults
        :param str value: (Updatable) Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
               
               Allowed values for libraryName: scikit-learn, xgboost, tensorflow, pytorch, mxnet, keras, lightGBM, pymc3, pyOD, spacy, prophet, sktime, statsmodels, cuml, oracle_automl, h2o, transformers, nltk, emcee, pystan, bert, gensim, flair, word2vec, ensemble, other
        """
        ModelCustomMetadataList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            description=description,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[str] = None,
             description: Optional[str] = None,
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if category is not None:
            _setter("category", category)
        if description is not None:
            _setter("description", description)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testartifactresults
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other

        Allowed values for libraryName: scikit-learn, xgboost, tensorflow, pytorch, mxnet, keras, lightGBM, pymc3, pyOD, spacy, prophet, sktime, statsmodels, cuml, oracle_automl, h2o, transformers, nltk, emcee, pystan, bert, gensim, flair, word2vec, ensemble, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelDefinedMetadataList(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str category: (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: (Updatable) A short description of the model.
        :param str key: (Updatable) Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testartifactresults
        :param str value: (Updatable) Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
               
               Allowed values for libraryName: scikit-learn, xgboost, tensorflow, pytorch, mxnet, keras, lightGBM, pymc3, pyOD, spacy, prophet, sktime, statsmodels, cuml, oracle_automl, h2o, transformers, nltk, emcee, pystan, bert, gensim, flair, word2vec, ensemble, other
        """
        ModelDefinedMetadataList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            description=description,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[str] = None,
             description: Optional[str] = None,
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if category is not None:
            _setter("category", category)
        if description is not None:
            _setter("description", description)
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        """
        (Updatable) Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        (Updatable) Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testartifactresults
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        (Updatable) Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other

        Allowed values for libraryName: scikit-learn, xgboost, tensorflow, pytorch, mxnet, keras, lightGBM, pymc3, pyOD, spacy, prophet, sktime, statsmodels, cuml, oracle_automl, h2o, transformers, nltk, emcee, pystan, bert, gensim, flair, word2vec, ensemble, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelDeploymentCategoryLogDetails(dict):
    def __init__(__self__, *,
                 access: Optional['outputs.ModelDeploymentCategoryLogDetailsAccess'] = None,
                 predict: Optional['outputs.ModelDeploymentCategoryLogDetailsPredict'] = None):
        """
        :param 'ModelDeploymentCategoryLogDetailsAccessArgs' access: (Updatable) The log details.
        :param 'ModelDeploymentCategoryLogDetailsPredictArgs' predict: (Updatable) The log details.
        """
        ModelDeploymentCategoryLogDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access=access,
            predict=predict,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access: Optional['outputs.ModelDeploymentCategoryLogDetailsAccess'] = None,
             predict: Optional['outputs.ModelDeploymentCategoryLogDetailsPredict'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if access is not None:
            _setter("access", access)
        if predict is not None:
            _setter("predict", predict)

    @property
    @pulumi.getter
    def access(self) -> Optional['outputs.ModelDeploymentCategoryLogDetailsAccess']:
        """
        (Updatable) The log details.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def predict(self) -> Optional['outputs.ModelDeploymentCategoryLogDetailsPredict']:
        """
        (Updatable) The log details.
        """
        return pulumi.get(self, "predict")


@pulumi.output_type
class ModelDeploymentCategoryLogDetailsAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentCategoryLogDetailsAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentCategoryLogDetailsAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentCategoryLogDetailsAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        ModelDeploymentCategoryLogDetailsAccess._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelDeploymentCategoryLogDetailsPredict(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentCategoryLogDetailsPredict. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentCategoryLogDetailsPredict.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentCategoryLogDetailsPredict.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        ModelDeploymentCategoryLogDetailsPredict._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentType":
            suggest = "deployment_type"
        elif key == "modelConfigurationDetails":
            suggest = "model_configuration_details"
        elif key == "environmentConfigurationDetails":
            suggest = "environment_configuration_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_type: str,
                 model_configuration_details: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails',
                 environment_configuration_details: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails'] = None):
        """
        :param str deployment_type: (Updatable) The type of the model deployment.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsArgs' model_configuration_details: (Updatable) The model configuration details.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetailsArgs' environment_configuration_details: (Updatable) The configuration to carry the environment details thats used in Model Deployment creation
        """
        ModelDeploymentModelDeploymentConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            deployment_type=deployment_type,
            model_configuration_details=model_configuration_details,
            environment_configuration_details=environment_configuration_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             deployment_type: Optional[str] = None,
             model_configuration_details: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails'] = None,
             environment_configuration_details: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if deployment_type is None and 'deploymentType' in kwargs:
            deployment_type = kwargs['deploymentType']
        if deployment_type is None:
            raise TypeError("Missing 'deployment_type' argument")
        if model_configuration_details is None and 'modelConfigurationDetails' in kwargs:
            model_configuration_details = kwargs['modelConfigurationDetails']
        if model_configuration_details is None:
            raise TypeError("Missing 'model_configuration_details' argument")
        if environment_configuration_details is None and 'environmentConfigurationDetails' in kwargs:
            environment_configuration_details = kwargs['environmentConfigurationDetails']

        _setter("deployment_type", deployment_type)
        _setter("model_configuration_details", model_configuration_details)
        if environment_configuration_details is not None:
            _setter("environment_configuration_details", environment_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        (Updatable) The type of the model deployment.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails':
        """
        (Updatable) The model configuration details.
        """
        return pulumi.get(self, "model_configuration_details")

    @property
    @pulumi.getter(name="environmentConfigurationDetails")
    def environment_configuration_details(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails']:
        """
        (Updatable) The configuration to carry the environment details thats used in Model Deployment creation
        """
        return pulumi.get(self, "environment_configuration_details")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentConfigurationType":
            suggest = "environment_configuration_type"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "healthCheckPort":
            suggest = "health_check_port"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "serverPort":
            suggest = "server_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_configuration_type: str,
                 cmds: Optional[Sequence[str]] = None,
                 entrypoints: Optional[Sequence[str]] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 health_check_port: Optional[int] = None,
                 image: Optional[str] = None,
                 image_digest: Optional[str] = None,
                 server_port: Optional[int] = None):
        """
        :param str environment_configuration_type: (Updatable) The environment configuration type
        :param Sequence[str] cmds: (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[str] entrypoints: (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param Mapping[str, Any] environment_variables: (Updatable) Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        :param int health_check_port: (Updatable) The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        :param str image: (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param str image_digest: (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param int server_port: (Updatable) The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            environment_configuration_type=environment_configuration_type,
            cmds=cmds,
            entrypoints=entrypoints,
            environment_variables=environment_variables,
            health_check_port=health_check_port,
            image=image,
            image_digest=image_digest,
            server_port=server_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             environment_configuration_type: Optional[str] = None,
             cmds: Optional[Sequence[str]] = None,
             entrypoints: Optional[Sequence[str]] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             health_check_port: Optional[int] = None,
             image: Optional[str] = None,
             image_digest: Optional[str] = None,
             server_port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if environment_configuration_type is None and 'environmentConfigurationType' in kwargs:
            environment_configuration_type = kwargs['environmentConfigurationType']
        if environment_configuration_type is None:
            raise TypeError("Missing 'environment_configuration_type' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if health_check_port is None and 'healthCheckPort' in kwargs:
            health_check_port = kwargs['healthCheckPort']
        if image_digest is None and 'imageDigest' in kwargs:
            image_digest = kwargs['imageDigest']
        if server_port is None and 'serverPort' in kwargs:
            server_port = kwargs['serverPort']

        _setter("environment_configuration_type", environment_configuration_type)
        if cmds is not None:
            _setter("cmds", cmds)
        if entrypoints is not None:
            _setter("entrypoints", entrypoints)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if health_check_port is not None:
            _setter("health_check_port", health_check_port)
        if image is not None:
            _setter("image", image)
        if image_digest is not None:
            _setter("image_digest", image_digest)
        if server_port is not None:
            _setter("server_port", server_port)

    @property
    @pulumi.getter(name="environmentConfigurationType")
    def environment_configuration_type(self) -> str:
        """
        (Updatable) The environment configuration type
        """
        return pulumi.get(self, "environment_configuration_type")

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[str]]:
        """
        (Updatable) The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[int]:
        """
        (Updatable) The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        """
        (Updatable) The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        """
        (Updatable) The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[int]:
        """
        (Updatable) The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "server_port")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfiguration":
            suggest = "instance_configuration"
        elif key == "modelId":
            suggest = "model_id"
        elif key == "bandwidthMbps":
            suggest = "bandwidth_mbps"
        elif key == "scalingPolicy":
            suggest = "scaling_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration',
                 model_id: str,
                 bandwidth_mbps: Optional[int] = None,
                 scaling_policy: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy'] = None):
        """
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationArgs' instance_configuration: (Updatable) The model deployment instance configuration
        :param str model_id: (Updatable) The OCID of the model you want to deploy.
        :param int bandwidth_mbps: (Updatable) The minimum network bandwidth for the model deployment.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicyArgs' scaling_policy: (Updatable) The scaling policy to apply to each model of the deployment.
        """
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_configuration=instance_configuration,
            model_id=model_id,
            bandwidth_mbps=bandwidth_mbps,
            scaling_policy=scaling_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_configuration: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration'] = None,
             model_id: Optional[str] = None,
             bandwidth_mbps: Optional[int] = None,
             scaling_policy: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if instance_configuration is None and 'instanceConfiguration' in kwargs:
            instance_configuration = kwargs['instanceConfiguration']
        if instance_configuration is None:
            raise TypeError("Missing 'instance_configuration' argument")
        if model_id is None and 'modelId' in kwargs:
            model_id = kwargs['modelId']
        if model_id is None:
            raise TypeError("Missing 'model_id' argument")
        if bandwidth_mbps is None and 'bandwidthMbps' in kwargs:
            bandwidth_mbps = kwargs['bandwidthMbps']
        if scaling_policy is None and 'scalingPolicy' in kwargs:
            scaling_policy = kwargs['scalingPolicy']

        _setter("instance_configuration", instance_configuration)
        _setter("model_id", model_id)
        if bandwidth_mbps is not None:
            _setter("bandwidth_mbps", bandwidth_mbps)
        if scaling_policy is not None:
            _setter("scaling_policy", scaling_policy)

    @property
    @pulumi.getter(name="instanceConfiguration")
    def instance_configuration(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration':
        """
        (Updatable) The model deployment instance configuration
        """
        return pulumi.get(self, "instance_configuration")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> str:
        """
        (Updatable) The OCID of the model you want to deploy.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> Optional[int]:
        """
        (Updatable) The minimum network bandwidth for the model deployment.
        """
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy']:
        """
        (Updatable) The scaling policy to apply to each model of the deployment.
        """
        return pulumi.get(self, "scaling_policy")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceShapeName":
            suggest = "instance_shape_name"
        elif key == "modelDeploymentInstanceShapeConfigDetails":
            suggest = "model_deployment_instance_shape_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_shape_name: str,
                 model_deployment_instance_shape_config_details: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails'] = None):
        """
        :param str instance_shape_name: (Updatable) The shape used to launch the model deployment instances.
        :param 'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetailsArgs' model_deployment_instance_shape_config_details: (Updatable) Details for the model-deployment instance shape configuration.
        """
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_shape_name=instance_shape_name,
            model_deployment_instance_shape_config_details=model_deployment_instance_shape_config_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_shape_name: Optional[str] = None,
             model_deployment_instance_shape_config_details: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if instance_shape_name is None and 'instanceShapeName' in kwargs:
            instance_shape_name = kwargs['instanceShapeName']
        if instance_shape_name is None:
            raise TypeError("Missing 'instance_shape_name' argument")
        if model_deployment_instance_shape_config_details is None and 'modelDeploymentInstanceShapeConfigDetails' in kwargs:
            model_deployment_instance_shape_config_details = kwargs['modelDeploymentInstanceShapeConfigDetails']

        _setter("instance_shape_name", instance_shape_name)
        if model_deployment_instance_shape_config_details is not None:
            _setter("model_deployment_instance_shape_config_details", model_deployment_instance_shape_config_details)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> str:
        """
        (Updatable) The shape used to launch the model deployment instances.
        """
        return pulumi.get(self, "instance_shape_name")

    @property
    @pulumi.getter(name="modelDeploymentInstanceShapeConfigDetails")
    def model_deployment_instance_shape_config_details(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails']:
        """
        (Updatable) Details for the model-deployment instance shape configuration.
        """
        return pulumi.get(self, "model_deployment_instance_shape_config_details")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        """
        :param float memory_in_gbs: (Updatable) A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 to 512 GB and VM.Optimized3.Flex memory range is between 6 to 256 GB.
        :param float ocpus: (Updatable) A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 to 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']

        if memory_in_gbs is not None:
            _setter("memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        """
        (Updatable) A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 to 512 GB and VM.Optimized3.Flex memory range is between 6 to 256 GB.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        """
        (Updatable) A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 to 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 policy_type: str):
        """
        :param int instance_count: (Updatable) The number of instances for the model deployment.
        :param str policy_type: (Updatable) The type of scaling policy.
        """
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_count=instance_count,
            policy_type=policy_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_count: Optional[int] = None,
             policy_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if instance_count is None and 'instanceCount' in kwargs:
            instance_count = kwargs['instanceCount']
        if instance_count is None:
            raise TypeError("Missing 'instance_count' argument")
        if policy_type is None and 'policyType' in kwargs:
            policy_type = kwargs['policyType']
        if policy_type is None:
            raise TypeError("Missing 'policy_type' argument")

        _setter("instance_count", instance_count)
        _setter("policy_type", policy_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        (Updatable) The number of instances for the model deployment.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        (Updatable) The type of scaling policy.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "notebookSessionShapeConfigDetails":
            suggest = "notebook_session_shape_config_details"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shape: str,
                 block_storage_size_in_gbs: Optional[int] = None,
                 notebook_session_shape_config_details: Optional['outputs.NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails'] = None,
                 private_endpoint_id: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str shape: (Updatable) The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param int block_storage_size_in_gbs: (Updatable) A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param 'NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetailsArgs' notebook_session_shape_config_details: (Updatable) Details for the notebook session shape configuration.
        :param str private_endpoint_id: (Updatable) The OCID of a Data Science private endpoint.
        :param str subnet_id: (Updatable) A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        NotebookSessionNotebookSessionConfigDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            shape=shape,
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            notebook_session_shape_config_details=notebook_session_shape_config_details,
            private_endpoint_id=private_endpoint_id,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             shape: Optional[str] = None,
             block_storage_size_in_gbs: Optional[int] = None,
             notebook_session_shape_config_details: Optional['outputs.NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails'] = None,
             private_endpoint_id: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if shape is None:
            raise TypeError("Missing 'shape' argument")
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if notebook_session_shape_config_details is None and 'notebookSessionShapeConfigDetails' in kwargs:
            notebook_session_shape_config_details = kwargs['notebookSessionShapeConfigDetails']
        if private_endpoint_id is None and 'privateEndpointId' in kwargs:
            private_endpoint_id = kwargs['privateEndpointId']
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']

        _setter("shape", shape)
        if block_storage_size_in_gbs is not None:
            _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            _setter("notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            _setter("private_endpoint_id", private_endpoint_id)
        if subnet_id is not None:
            _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        (Updatable) The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        """
        (Updatable) A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails']:
        """
        (Updatable) Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        (Updatable) A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        """
        :param float memory_in_gbs: (Updatable) The total amount of memory available to the notebook session instance, in gigabytes.
        :param float ocpus: (Updatable) The total number of OCPUs available to the notebook session instance.
        """
        NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']

        if memory_in_gbs is not None:
            _setter("memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        """
        (Updatable) The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        """
        (Updatable) The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "notebookSessionShapeConfigDetails":
            suggest = "notebook_session_shape_config_details"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shape: str,
                 subnet_id: str,
                 block_storage_size_in_gbs: Optional[int] = None,
                 notebook_session_shape_config_details: Optional['outputs.NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails'] = None,
                 private_endpoint_id: Optional[str] = None):
        """
        :param str shape: (Updatable) The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param str subnet_id: (Updatable) A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        :param int block_storage_size_in_gbs: (Updatable) A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param 'NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetailsArgs' notebook_session_shape_config_details: (Updatable) Details for the notebook session shape configuration.
        :param str private_endpoint_id: (Updatable) The OCID of a Data Science private endpoint.
        """
        NotebookSessionNotebookSessionConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            shape=shape,
            subnet_id=subnet_id,
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            notebook_session_shape_config_details=notebook_session_shape_config_details,
            private_endpoint_id=private_endpoint_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             shape: Optional[str] = None,
             subnet_id: Optional[str] = None,
             block_storage_size_in_gbs: Optional[int] = None,
             notebook_session_shape_config_details: Optional['outputs.NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails'] = None,
             private_endpoint_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if shape is None:
            raise TypeError("Missing 'shape' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if notebook_session_shape_config_details is None and 'notebookSessionShapeConfigDetails' in kwargs:
            notebook_session_shape_config_details = kwargs['notebookSessionShapeConfigDetails']
        if private_endpoint_id is None and 'privateEndpointId' in kwargs:
            private_endpoint_id = kwargs['privateEndpointId']

        _setter("shape", shape)
        _setter("subnet_id", subnet_id)
        if block_storage_size_in_gbs is not None:
            _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            _setter("notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            _setter("private_endpoint_id", private_endpoint_id)

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        (Updatable) The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        (Updatable) A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        """
        (Updatable) A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails']:
        """
        (Updatable) Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        """
        :param float memory_in_gbs: (Updatable) The total amount of memory available to the notebook session instance, in gigabytes.
        :param float ocpus: (Updatable) The total number of OCPUs available to the notebook session instance.
        """
        NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']

        if memory_in_gbs is not None:
            _setter("memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        """
        (Updatable) The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        """
        (Updatable) The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class NotebookSessionNotebookSessionRuntimeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customEnvironmentVariables":
            suggest = "custom_environment_variables"
        elif key == "notebookSessionGitConfigDetails":
            suggest = "notebook_session_git_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionRuntimeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_environment_variables: Optional[Mapping[str, Any]] = None,
                 notebook_session_git_config_details: Optional['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails'] = None):
        """
        :param Mapping[str, Any] custom_environment_variables: (Updatable) Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        :param 'NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsArgs' notebook_session_git_config_details: (Updatable) Git configuration Details.
        """
        NotebookSessionNotebookSessionRuntimeConfigDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_environment_variables=custom_environment_variables,
            notebook_session_git_config_details=notebook_session_git_config_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_environment_variables: Optional[Mapping[str, Any]] = None,
             notebook_session_git_config_details: Optional['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if custom_environment_variables is None and 'customEnvironmentVariables' in kwargs:
            custom_environment_variables = kwargs['customEnvironmentVariables']
        if notebook_session_git_config_details is None and 'notebookSessionGitConfigDetails' in kwargs:
            notebook_session_git_config_details = kwargs['notebookSessionGitConfigDetails']

        if custom_environment_variables is not None:
            _setter("custom_environment_variables", custom_environment_variables)
        if notebook_session_git_config_details is not None:
            _setter("notebook_session_git_config_details", notebook_session_git_config_details)

    @property
    @pulumi.getter(name="customEnvironmentVariables")
    def custom_environment_variables(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        """
        return pulumi.get(self, "custom_environment_variables")

    @property
    @pulumi.getter(name="notebookSessionGitConfigDetails")
    def notebook_session_git_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails']:
        """
        (Updatable) Git configuration Details.
        """
        return pulumi.get(self, "notebook_session_git_config_details")


@pulumi.output_type
class NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notebookSessionGitRepoConfigCollections":
            suggest = "notebook_session_git_repo_config_collections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notebook_session_git_repo_config_collections: Optional[Sequence['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection']] = None):
        """
        :param Sequence['NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollectionArgs'] notebook_session_git_repo_config_collections: (Updatable) A collection of Git repository configurations.
        """
        NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notebook_session_git_repo_config_collections=notebook_session_git_repo_config_collections,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notebook_session_git_repo_config_collections: Optional[Sequence['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if notebook_session_git_repo_config_collections is None and 'notebookSessionGitRepoConfigCollections' in kwargs:
            notebook_session_git_repo_config_collections = kwargs['notebookSessionGitRepoConfigCollections']

        if notebook_session_git_repo_config_collections is not None:
            _setter("notebook_session_git_repo_config_collections", notebook_session_git_repo_config_collections)

    @property
    @pulumi.getter(name="notebookSessionGitRepoConfigCollections")
    def notebook_session_git_repo_config_collections(self) -> Optional[Sequence['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection']]:
        """
        (Updatable) A collection of Git repository configurations.
        """
        return pulumi.get(self, "notebook_session_git_repo_config_collections")


@pulumi.output_type
class NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: (Updatable) The repository URL
        """
        NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if url is None:
            raise TypeError("Missing 'url' argument")

        _setter("url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        (Updatable) The repository URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class NotebookSessionNotebookSessionStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_directory_name: str,
                 storage_type: str,
                 bucket: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None):
        """
        :param str destination_directory_name: (Updatable) The local directory name to be mounted
        :param str storage_type: (Updatable) The type of storage.
        :param str bucket: (Updatable) The object storage bucket
        :param str destination_path: (Updatable) The local path of the mounted directory, excluding directory name.
        :param str export_id: (Updatable) OCID of the export
        :param str mount_target_id: (Updatable) OCID of the mount target
        :param str namespace: (Updatable) The object storage namespace
        :param str prefix: (Updatable) Prefix in the bucket to mount
        """
        NotebookSessionNotebookSessionStorageMountConfigurationDetailsList._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_directory_name=destination_directory_name,
            storage_type=storage_type,
            bucket=bucket,
            destination_path=destination_path,
            export_id=export_id,
            mount_target_id=mount_target_id,
            namespace=namespace,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_directory_name: Optional[str] = None,
             storage_type: Optional[str] = None,
             bucket: Optional[str] = None,
             destination_path: Optional[str] = None,
             export_id: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             namespace: Optional[str] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination_directory_name is None and 'destinationDirectoryName' in kwargs:
            destination_directory_name = kwargs['destinationDirectoryName']
        if destination_directory_name is None:
            raise TypeError("Missing 'destination_directory_name' argument")
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if storage_type is None:
            raise TypeError("Missing 'storage_type' argument")
        if destination_path is None and 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']

        _setter("destination_directory_name", destination_directory_name)
        _setter("storage_type", storage_type)
        if bucket is not None:
            _setter("bucket", bucket)
        if destination_path is not None:
            _setter("destination_path", destination_path)
        if export_id is not None:
            _setter("export_id", export_id)
        if mount_target_id is not None:
            _setter("mount_target_id", mount_target_id)
        if namespace is not None:
            _setter("namespace", namespace)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        """
        (Updatable) The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        (Updatable) The type of storage.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        (Updatable) The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        """
        (Updatable) The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        """
        (Updatable) OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        """
        (Updatable) OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        (Updatable) The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        (Updatable) Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")


@pulumi.output_type
class PipelineConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        """
        :param str type: (Updatable) The type of pipeline.
        :param str command_line_arguments: (Updatable) The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: (Updatable) Environment variables to set for step.
        :param str maximum_runtime_in_minutes: (Updatable) A time bound for the execution of the step.
        """
        PipelineConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']

        _setter("type", type)
        if command_line_arguments is not None:
            _setter("command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Updatable) The type of pipeline.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        """
        (Updatable) The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        """
        (Updatable) A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineInfrastructureConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "shapeConfigDetails":
            suggest = "shape_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineInfrastructureConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineInfrastructureConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineInfrastructureConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 shape_name: str,
                 shape_config_details: Optional['outputs.PipelineInfrastructureConfigurationDetailsShapeConfigDetails'] = None):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        :param 'PipelineInfrastructureConfigurationDetailsShapeConfigDetailsArgs' shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        PipelineInfrastructureConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            shape_name=shape_name,
            shape_config_details=shape_config_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             shape_name: Optional[str] = None,
             shape_config_details: Optional['outputs.PipelineInfrastructureConfigurationDetailsShapeConfigDetails'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")
        if shape_config_details is None and 'shapeConfigDetails' in kwargs:
            shape_config_details = kwargs['shapeConfigDetails']

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("shape_name", shape_name)
        if shape_config_details is not None:
            _setter("shape_config_details", shape_config_details)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional['outputs.PipelineInfrastructureConfigurationDetailsShapeConfigDetails']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")


@pulumi.output_type
class PipelineInfrastructureConfigurationDetailsShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineInfrastructureConfigurationDetailsShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        """
        :param float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        PipelineInfrastructureConfigurationDetailsShapeConfigDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']

        if memory_in_gbs is not None:
            _setter("memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class PipelineLogConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineLogConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineLogConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineLogConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        """
        :param bool enable_auto_log_creation: (Updatable) If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param bool enable_logging: (Updatable) If customer logging is enabled for pipeline.
        :param str log_group_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        PipelineLogConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']

        if enable_auto_log_creation is not None:
            _setter("enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            _setter("enable_logging", enable_logging)
        if log_group_id is not None:
            _setter("log_group_id", log_group_id)
        if log_id is not None:
            _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        """
        (Updatable) If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        """
        (Updatable) If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        """
        (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class PipelineRunConfigurationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunConfigurationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunConfigurationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunConfigurationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param str type: The type of pipeline.
        """
        PipelineRunConfigurationDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']

        if command_line_arguments is not None:
            _setter("command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineRunConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        """
        :param str type: The type of pipeline.
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        PipelineRunConfigurationOverrideDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if type is None:
            raise TypeError("Missing 'type' argument")
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']

        _setter("type", type)
        if command_line_arguments is not None:
            _setter("command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineRunLogConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunLogConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunLogConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunLogConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param bool enable_logging: If customer logging is enabled for pipeline.
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        PipelineRunLogConfigurationOverrideDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']

        if enable_auto_log_creation is not None:
            _setter("enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            _setter("enable_logging", enable_logging)
        if log_group_id is not None:
            _setter("log_group_id", log_group_id)
        if log_id is not None:
            _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class PipelineRunLogDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunLogDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunLogDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunLogDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        PipelineRunLogDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']

        if log_group_id is not None:
            _setter("log_group_id", log_group_id)
        if log_id is not None:
            _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class PipelineRunStepOverrideDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepConfigurationDetails":
            suggest = "step_configuration_details"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_configuration_details: 'outputs.PipelineRunStepOverrideDetailStepConfigurationDetails',
                 step_name: str):
        """
        :param 'PipelineRunStepOverrideDetailStepConfigurationDetailsArgs' step_configuration_details: The configuration details of a step.
        :param str step_name: The name of the step.
        """
        PipelineRunStepOverrideDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            step_configuration_details=step_configuration_details,
            step_name=step_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             step_configuration_details: Optional['outputs.PipelineRunStepOverrideDetailStepConfigurationDetails'] = None,
             step_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if step_configuration_details is None and 'stepConfigurationDetails' in kwargs:
            step_configuration_details = kwargs['stepConfigurationDetails']
        if step_configuration_details is None:
            raise TypeError("Missing 'step_configuration_details' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")

        _setter("step_configuration_details", step_configuration_details)
        _setter("step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> 'outputs.PipelineRunStepOverrideDetailStepConfigurationDetails':
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class PipelineRunStepOverrideDetailStepConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetailStepConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetailStepConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetailStepConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        PipelineRunStepOverrideDetailStepConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']

        if command_line_arguments is not None:
            _setter("command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineRunStepRun(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobRunId":
            suggest = "job_run_id"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "stepName":
            suggest = "step_name"
        elif key == "stepType":
            suggest = "step_type"
        elif key == "timeFinished":
            suggest = "time_finished"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepRun. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepRun.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepRun.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_run_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 step_name: Optional[str] = None,
                 step_type: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        """
        :param str job_run_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        :param str lifecycle_details: Details of the state of the step run.
        :param str state: The state of the step run.
        :param str step_name: The name of the step.
        :param str step_type: The type of step.
        :param str time_finished: The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str time_started: The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        PipelineRunStepRun._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_run_id=job_run_id,
            lifecycle_details=lifecycle_details,
            state=state,
            step_name=step_name,
            step_type=step_type,
            time_finished=time_finished,
            time_started=time_started,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_run_id: Optional[str] = None,
             lifecycle_details: Optional[str] = None,
             state: Optional[str] = None,
             step_name: Optional[str] = None,
             step_type: Optional[str] = None,
             time_finished: Optional[str] = None,
             time_started: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if job_run_id is None and 'jobRunId' in kwargs:
            job_run_id = kwargs['jobRunId']
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']
        if time_finished is None and 'timeFinished' in kwargs:
            time_finished = kwargs['timeFinished']
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']

        if job_run_id is not None:
            _setter("job_run_id", job_run_id)
        if lifecycle_details is not None:
            _setter("lifecycle_details", lifecycle_details)
        if state is not None:
            _setter("state", state)
        if step_name is not None:
            _setter("step_name", step_name)
        if step_type is not None:
            _setter("step_type", step_type)
        if time_finished is not None:
            _setter("time_finished", time_finished)
        if time_started is not None:
            _setter("time_started", time_started)

    @property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        """
        return pulumi.get(self, "job_run_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        """
        Details of the state of the step run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The state of the step run.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        """
        The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        """
        The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class PipelineStepArtifact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactContentLength":
            suggest = "artifact_content_length"
        elif key == "pipelineStepArtifact":
            suggest = "pipeline_step_artifact"
        elif key == "stepName":
            suggest = "step_name"
        elif key == "artifactContentDisposition":
            suggest = "artifact_content_disposition"
        elif key == "artifactContentMd5":
            suggest = "artifact_content_md5"
        elif key == "artifactLastModified":
            suggest = "artifact_last_modified"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepArtifact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepArtifact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepArtifact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_content_length: str,
                 pipeline_step_artifact: str,
                 step_name: str,
                 artifact_content_disposition: Optional[str] = None,
                 artifact_content_md5: Optional[str] = None,
                 artifact_last_modified: Optional[str] = None):
        """
        :param str step_name: (Updatable) The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        PipelineStepArtifact._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            artifact_content_length=artifact_content_length,
            pipeline_step_artifact=pipeline_step_artifact,
            step_name=step_name,
            artifact_content_disposition=artifact_content_disposition,
            artifact_content_md5=artifact_content_md5,
            artifact_last_modified=artifact_last_modified,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             artifact_content_length: Optional[str] = None,
             pipeline_step_artifact: Optional[str] = None,
             step_name: Optional[str] = None,
             artifact_content_disposition: Optional[str] = None,
             artifact_content_md5: Optional[str] = None,
             artifact_last_modified: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if artifact_content_length is None and 'artifactContentLength' in kwargs:
            artifact_content_length = kwargs['artifactContentLength']
        if artifact_content_length is None:
            raise TypeError("Missing 'artifact_content_length' argument")
        if pipeline_step_artifact is None and 'pipelineStepArtifact' in kwargs:
            pipeline_step_artifact = kwargs['pipelineStepArtifact']
        if pipeline_step_artifact is None:
            raise TypeError("Missing 'pipeline_step_artifact' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")
        if artifact_content_disposition is None and 'artifactContentDisposition' in kwargs:
            artifact_content_disposition = kwargs['artifactContentDisposition']
        if artifact_content_md5 is None and 'artifactContentMd5' in kwargs:
            artifact_content_md5 = kwargs['artifactContentMd5']
        if artifact_last_modified is None and 'artifactLastModified' in kwargs:
            artifact_last_modified = kwargs['artifactLastModified']

        _setter("artifact_content_length", artifact_content_length)
        _setter("pipeline_step_artifact", pipeline_step_artifact)
        _setter("step_name", step_name)
        if artifact_content_disposition is not None:
            _setter("artifact_content_disposition", artifact_content_disposition)
        if artifact_content_md5 is not None:
            _setter("artifact_content_md5", artifact_content_md5)
        if artifact_last_modified is not None:
            _setter("artifact_last_modified", artifact_last_modified)

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="pipelineStepArtifact")
    def pipeline_step_artifact(self) -> str:
        return pulumi.get(self, "pipeline_step_artifact")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        (Updatable) The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "artifact_last_modified")


@pulumi.output_type
class PipelineStepDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepName":
            suggest = "step_name"
        elif key == "stepType":
            suggest = "step_type"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "isArtifactUploaded":
            suggest = "is_artifact_uploaded"
        elif key == "jobId":
            suggest = "job_id"
        elif key == "stepConfigurationDetails":
            suggest = "step_configuration_details"
        elif key == "stepInfrastructureConfigurationDetails":
            suggest = "step_infrastructure_configuration_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_name: str,
                 step_type: str,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 is_artifact_uploaded: Optional[bool] = None,
                 job_id: Optional[str] = None,
                 step_configuration_details: Optional['outputs.PipelineStepDetailStepConfigurationDetails'] = None,
                 step_infrastructure_configuration_details: Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetails'] = None):
        """
        :param str step_name: (Updatable) The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        :param str step_type: (Updatable) The type of step.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param Sequence[str] depends_ons: The list of step names this current step depends on for execution.
        :param str description: (Updatable) A short description of the step.
        :param bool is_artifact_uploaded: A flag to indicate whether the artifact has been uploaded for this step or not.
        :param str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        :param 'PipelineStepDetailStepConfigurationDetailsArgs' step_configuration_details: (Updatable) The configuration details of a step.
        :param 'PipelineStepDetailStepInfrastructureConfigurationDetailsArgs' step_infrastructure_configuration_details: The infrastructure configuration details of a pipeline or a step.
        """
        PipelineStepDetail._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            step_name=step_name,
            step_type=step_type,
            depends_ons=depends_ons,
            description=description,
            is_artifact_uploaded=is_artifact_uploaded,
            job_id=job_id,
            step_configuration_details=step_configuration_details,
            step_infrastructure_configuration_details=step_infrastructure_configuration_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             step_name: Optional[str] = None,
             step_type: Optional[str] = None,
             depends_ons: Optional[Sequence[str]] = None,
             description: Optional[str] = None,
             is_artifact_uploaded: Optional[bool] = None,
             job_id: Optional[str] = None,
             step_configuration_details: Optional['outputs.PipelineStepDetailStepConfigurationDetails'] = None,
             step_infrastructure_configuration_details: Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetails'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']
        if step_type is None:
            raise TypeError("Missing 'step_type' argument")
        if depends_ons is None and 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if is_artifact_uploaded is None and 'isArtifactUploaded' in kwargs:
            is_artifact_uploaded = kwargs['isArtifactUploaded']
        if job_id is None and 'jobId' in kwargs:
            job_id = kwargs['jobId']
        if step_configuration_details is None and 'stepConfigurationDetails' in kwargs:
            step_configuration_details = kwargs['stepConfigurationDetails']
        if step_infrastructure_configuration_details is None and 'stepInfrastructureConfigurationDetails' in kwargs:
            step_infrastructure_configuration_details = kwargs['stepInfrastructureConfigurationDetails']

        _setter("step_name", step_name)
        _setter("step_type", step_type)
        if depends_ons is not None:
            _setter("depends_ons", depends_ons)
        if description is not None:
            _setter("description", description)
        if is_artifact_uploaded is not None:
            _setter("is_artifact_uploaded", is_artifact_uploaded)
        if job_id is not None:
            _setter("job_id", job_id)
        if step_configuration_details is not None:
            _setter("step_configuration_details", step_configuration_details)
        if step_infrastructure_configuration_details is not None:
            _setter("step_infrastructure_configuration_details", step_infrastructure_configuration_details)

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        (Updatable) The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> str:
        """
        (Updatable) The type of step.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        """
        The list of step names this current step depends on for execution.
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        (Updatable) A short description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isArtifactUploaded")
    def is_artifact_uploaded(self) -> Optional[bool]:
        """
        A flag to indicate whether the artifact has been uploaded for this step or not.
        """
        return pulumi.get(self, "is_artifact_uploaded")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[str]:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Optional['outputs.PipelineStepDetailStepConfigurationDetails']:
        """
        (Updatable) The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepInfrastructureConfigurationDetails")
    def step_infrastructure_configuration_details(self) -> Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetails']:
        """
        The infrastructure configuration details of a pipeline or a step.
        """
        return pulumi.get(self, "step_infrastructure_configuration_details")


@pulumi.output_type
class PipelineStepDetailStepConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        """
        :param str command_line_arguments: (Updatable) The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: (Updatable) Environment variables to set for step.
        :param str maximum_runtime_in_minutes: (Updatable) A time bound for the execution of the step.
        """
        PipelineStepDetailStepConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']

        if command_line_arguments is not None:
            _setter("command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        """
        (Updatable) The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        """
        (Updatable) Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        """
        (Updatable) A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineStepDetailStepInfrastructureConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "shapeConfigDetails":
            suggest = "shape_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepInfrastructureConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 shape_name: str,
                 shape_config_details: Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails'] = None):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        :param 'PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetailsArgs' shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        PipelineStepDetailStepInfrastructureConfigurationDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            shape_name=shape_name,
            shape_config_details=shape_config_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             shape_name: Optional[str] = None,
             shape_config_details: Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")
        if shape_config_details is None and 'shapeConfigDetails' in kwargs:
            shape_config_details = kwargs['shapeConfigDetails']

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("shape_name", shape_name)
        if shape_config_details is not None:
            _setter("shape_config_details", shape_config_details)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")


@pulumi.output_type
class PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        """
        :param float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']

        if memory_in_gbs is not None:
            _setter("memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetFastLaunchJobConfigsFastLaunchJobConfigResult(dict):
    def __init__(__self__, *,
                 core_count: int,
                 managed_egress_support: str,
                 memory_in_gbs: int,
                 name: str,
                 shape_name: str,
                 shape_series: str):
        """
        :param int core_count: The number of cores associated with this fast launch job shape.
        :param str managed_egress_support: The managed egress support
        :param int memory_in_gbs: The number of cores associated with this fast launch job shape.
        :param str name: The name of the fast launch job config
        :param str shape_name: The name of the fast launch job shape.
        :param str shape_series: The family that the compute shape belongs to.
        """
        GetFastLaunchJobConfigsFastLaunchJobConfigResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            core_count=core_count,
            managed_egress_support=managed_egress_support,
            memory_in_gbs=memory_in_gbs,
            name=name,
            shape_name=shape_name,
            shape_series=shape_series,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             core_count: Optional[int] = None,
             managed_egress_support: Optional[str] = None,
             memory_in_gbs: Optional[int] = None,
             name: Optional[str] = None,
             shape_name: Optional[str] = None,
             shape_series: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if core_count is None and 'coreCount' in kwargs:
            core_count = kwargs['coreCount']
        if core_count is None:
            raise TypeError("Missing 'core_count' argument")
        if managed_egress_support is None and 'managedEgressSupport' in kwargs:
            managed_egress_support = kwargs['managedEgressSupport']
        if managed_egress_support is None:
            raise TypeError("Missing 'managed_egress_support' argument")
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")
        if shape_series is None and 'shapeSeries' in kwargs:
            shape_series = kwargs['shapeSeries']
        if shape_series is None:
            raise TypeError("Missing 'shape_series' argument")

        _setter("core_count", core_count)
        _setter("managed_egress_support", managed_egress_support)
        _setter("memory_in_gbs", memory_in_gbs)
        _setter("name", name)
        _setter("shape_name", shape_name)
        _setter("shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> int:
        """
        The number of cores associated with this fast launch job shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="managedEgressSupport")
    def managed_egress_support(self) -> str:
        """
        The managed egress support
        """
        return pulumi.get(self, "managed_egress_support")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> int:
        """
        The number of cores associated with this fast launch job shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the fast launch job config
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The name of the fast launch job shape.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> str:
        """
        The family that the compute shape belongs to.
        """
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetFastLaunchJobConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the fast launch job config
        """
        GetFastLaunchJobConfigsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the fast launch job config
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobJobConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 job_type: str,
                 maximum_runtime_in_minutes: str):
        """
        :param str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, Any] environment_variables: Environment variables to set for the job.
        :param str job_type: The type of job.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        GetJobJobConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            job_type=job_type,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             job_type: Optional[str] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if job_type is None and 'jobType' in kwargs:
            job_type = kwargs['jobType']
        if job_type is None:
            raise TypeError("Missing 'job_type' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("job_type", job_type)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 job_infrastructure_type: str,
                 job_shape_config_details: Sequence['outputs.GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult'],
                 shape_name: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param str shape_name: The shape used to launch the job run instances.
        :param str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        GetJobJobInfrastructureConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            job_infrastructure_type=job_infrastructure_type,
            job_shape_config_details=job_shape_config_details,
            shape_name=shape_name,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             job_infrastructure_type: Optional[str] = None,
             job_shape_config_details: Optional[Sequence['outputs.GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']] = None,
             shape_name: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if job_infrastructure_type is None and 'jobInfrastructureType' in kwargs:
            job_infrastructure_type = kwargs['jobInfrastructureType']
        if job_infrastructure_type is None:
            raise TypeError("Missing 'job_infrastructure_type' argument")
        if job_shape_config_details is None and 'jobShapeConfigDetails' in kwargs:
            job_shape_config_details = kwargs['jobShapeConfigDetails']
        if job_shape_config_details is None:
            raise TypeError("Missing 'job_shape_config_details' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("job_infrastructure_type", job_infrastructure_type)
        _setter("job_shape_config_details", job_shape_config_details)
        _setter("shape_name", shape_name)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> str:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Sequence['outputs.GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param float ocpus: The total number of OCPUs available to the job run instance.
        """
        GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobJobLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: bool,
                 enable_logging: bool,
                 log_group_id: str,
                 log_id: str):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param bool enable_logging: If customer logging is enabled for job runs.
        :param str log_group_id: The log group id for where log objects are for job runs.
        :param str log_id: The log id the job run will push logs too.
        """
        GetJobJobLogConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_auto_log_creation is None:
            raise TypeError("Missing 'enable_auto_log_creation' argument")
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if enable_logging is None:
            raise TypeError("Missing 'enable_logging' argument")
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("enable_auto_log_creation", enable_auto_log_creation)
        _setter("enable_logging", enable_logging)
        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> bool:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> bool:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 destination_directory_name: str,
                 destination_path: str,
                 export_id: str,
                 mount_target_id: str,
                 namespace: str,
                 prefix: str,
                 storage_type: str):
        """
        :param str bucket: The object storage bucket
        :param str destination_directory_name: The local directory name to be mounted
        :param str destination_path: The local path of the mounted directory, excluding directory name.
        :param str export_id: OCID of the export
        :param str mount_target_id: OCID of the mount target
        :param str namespace: The object storage namespace
        :param str prefix: Prefix in the bucket to mount
        :param str storage_type: The type of storage.
        """
        GetJobJobStorageMountConfigurationDetailsListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            destination_directory_name=destination_directory_name,
            destination_path=destination_path,
            export_id=export_id,
            mount_target_id=mount_target_id,
            namespace=namespace,
            prefix=prefix,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             destination_directory_name: Optional[str] = None,
             destination_path: Optional[str] = None,
             export_id: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             namespace: Optional[str] = None,
             prefix: Optional[str] = None,
             storage_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if destination_directory_name is None and 'destinationDirectoryName' in kwargs:
            destination_directory_name = kwargs['destinationDirectoryName']
        if destination_directory_name is None:
            raise TypeError("Missing 'destination_directory_name' argument")
        if destination_path is None and 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if destination_path is None:
            raise TypeError("Missing 'destination_path' argument")
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if export_id is None:
            raise TypeError("Missing 'export_id' argument")
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if prefix is None:
            raise TypeError("Missing 'prefix' argument")
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if storage_type is None:
            raise TypeError("Missing 'storage_type' argument")

        _setter("bucket", bucket)
        _setter("destination_directory_name", destination_directory_name)
        _setter("destination_path", destination_path)
        _setter("export_id", export_id)
        _setter("mount_target_id", mount_target_id)
        _setter("namespace", namespace)
        _setter("prefix", prefix)
        _setter("storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetJobRunJobConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 job_type: str,
                 maximum_runtime_in_minutes: str):
        """
        :param str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, Any] environment_variables: Environment variables to set for the job.
        :param str job_type: The type of job.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        GetJobRunJobConfigurationOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            job_type=job_type,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             job_type: Optional[str] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if job_type is None and 'jobType' in kwargs:
            job_type = kwargs['jobType']
        if job_type is None:
            raise TypeError("Missing 'job_type' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("job_type", job_type)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobRunJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 job_infrastructure_type: str,
                 job_shape_config_details: Sequence['outputs.GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult'],
                 shape_name: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param str shape_name: The shape used to launch the job run instances.
        :param str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        GetJobRunJobInfrastructureConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            job_infrastructure_type=job_infrastructure_type,
            job_shape_config_details=job_shape_config_details,
            shape_name=shape_name,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             job_infrastructure_type: Optional[str] = None,
             job_shape_config_details: Optional[Sequence['outputs.GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']] = None,
             shape_name: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if job_infrastructure_type is None and 'jobInfrastructureType' in kwargs:
            job_infrastructure_type = kwargs['jobInfrastructureType']
        if job_infrastructure_type is None:
            raise TypeError("Missing 'job_infrastructure_type' argument")
        if job_shape_config_details is None and 'jobShapeConfigDetails' in kwargs:
            job_shape_config_details = kwargs['jobShapeConfigDetails']
        if job_shape_config_details is None:
            raise TypeError("Missing 'job_shape_config_details' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("job_infrastructure_type", job_infrastructure_type)
        _setter("job_shape_config_details", job_shape_config_details)
        _setter("shape_name", shape_name)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> str:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Sequence['outputs.GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param float ocpus: The total number of OCPUs available to the job run instance.
        """
        GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobRunJobLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: bool,
                 enable_logging: bool,
                 log_group_id: str,
                 log_id: str):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param bool enable_logging: If customer logging is enabled for job runs.
        :param str log_group_id: The log group id for where log objects will be for job runs.
        :param str log_id: The log id of the log object the job run logs will be shipped to.
        """
        GetJobRunJobLogConfigurationOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_auto_log_creation is None:
            raise TypeError("Missing 'enable_auto_log_creation' argument")
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if enable_logging is None:
            raise TypeError("Missing 'enable_logging' argument")
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("enable_auto_log_creation", enable_auto_log_creation)
        _setter("enable_logging", enable_logging)
        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> bool:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> bool:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects will be for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id of the log object the job run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobRunJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 destination_directory_name: str,
                 destination_path: str,
                 export_id: str,
                 mount_target_id: str,
                 namespace: str,
                 prefix: str,
                 storage_type: str):
        """
        :param str bucket: The object storage bucket
        :param str destination_directory_name: The local directory name to be mounted
        :param str destination_path: The local path of the mounted directory, excluding directory name.
        :param str export_id: OCID of the export
        :param str mount_target_id: OCID of the mount target
        :param str namespace: The object storage namespace
        :param str prefix: Prefix in the bucket to mount
        :param str storage_type: The type of storage.
        """
        GetJobRunJobStorageMountConfigurationDetailsListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            destination_directory_name=destination_directory_name,
            destination_path=destination_path,
            export_id=export_id,
            mount_target_id=mount_target_id,
            namespace=namespace,
            prefix=prefix,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             destination_directory_name: Optional[str] = None,
             destination_path: Optional[str] = None,
             export_id: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             namespace: Optional[str] = None,
             prefix: Optional[str] = None,
             storage_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if destination_directory_name is None and 'destinationDirectoryName' in kwargs:
            destination_directory_name = kwargs['destinationDirectoryName']
        if destination_directory_name is None:
            raise TypeError("Missing 'destination_directory_name' argument")
        if destination_path is None and 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if destination_path is None:
            raise TypeError("Missing 'destination_path' argument")
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if export_id is None:
            raise TypeError("Missing 'export_id' argument")
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if prefix is None:
            raise TypeError("Missing 'prefix' argument")
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if storage_type is None:
            raise TypeError("Missing 'storage_type' argument")

        _setter("bucket", bucket)
        _setter("destination_directory_name", destination_directory_name)
        _setter("destination_path", destination_path)
        _setter("export_id", export_id)
        _setter("mount_target_id", mount_target_id)
        _setter("namespace", namespace)
        _setter("prefix", prefix)
        _setter("storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetJobRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The log group id for where log objects will be for job runs.
        :param str log_id: The log id of the log object the job run logs will be shipped to.
        """
        GetJobRunLogDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects will be for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id of the log object the job run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetJobRunsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobRunsJobRunResult(dict):
    def __init__(__self__, *,
                 asynchronous: bool,
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 job_configuration_override_details: Sequence['outputs.GetJobRunsJobRunJobConfigurationOverrideDetailResult'],
                 job_id: str,
                 job_infrastructure_configuration_details: Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailResult'],
                 job_log_configuration_override_details: Sequence['outputs.GetJobRunsJobRunJobLogConfigurationOverrideDetailResult'],
                 job_storage_mount_configuration_details_lists: Sequence['outputs.GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult'],
                 lifecycle_details: str,
                 log_details: Sequence['outputs.GetJobRunsJobRunLogDetailResult'],
                 project_id: str,
                 state: str,
                 time_accepted: str,
                 time_finished: str,
                 time_started: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param Sequence['GetJobRunsJobRunJobConfigurationOverrideDetailArgs'] job_configuration_override_details: The job configuration details
        :param str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job.
        :param Sequence['GetJobRunsJobRunJobInfrastructureConfigurationDetailArgs'] job_infrastructure_configuration_details: The job infrastructure configuration details (shape, block storage, etc.)
        :param Sequence['GetJobRunsJobRunJobLogConfigurationOverrideDetailArgs'] job_log_configuration_override_details: Logging configuration for resource.
        :param Sequence['GetJobRunsJobRunJobStorageMountConfigurationDetailsListArgs'] job_storage_mount_configuration_details_lists: Collection of JobStorageMountConfigurationDetails.
        :param str lifecycle_details: Details of the state of the job run.
        :param Sequence['GetJobRunsJobRunLogDetailArgs'] log_details: Customer logging details for job run.
        :param str project_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the job with.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_accepted: The date and time the job run was accepted in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str time_finished: The date and time the job run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str time_started: The date and time the job run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        GetJobRunsJobRunResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            asynchronous=asynchronous,
            compartment_id=compartment_id,
            created_by=created_by,
            defined_tags=defined_tags,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            job_configuration_override_details=job_configuration_override_details,
            job_id=job_id,
            job_infrastructure_configuration_details=job_infrastructure_configuration_details,
            job_log_configuration_override_details=job_log_configuration_override_details,
            job_storage_mount_configuration_details_lists=job_storage_mount_configuration_details_lists,
            lifecycle_details=lifecycle_details,
            log_details=log_details,
            project_id=project_id,
            state=state,
            time_accepted=time_accepted,
            time_finished=time_finished,
            time_started=time_started,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             asynchronous: Optional[bool] = None,
             compartment_id: Optional[str] = None,
             created_by: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             display_name: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             job_configuration_override_details: Optional[Sequence['outputs.GetJobRunsJobRunJobConfigurationOverrideDetailResult']] = None,
             job_id: Optional[str] = None,
             job_infrastructure_configuration_details: Optional[Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailResult']] = None,
             job_log_configuration_override_details: Optional[Sequence['outputs.GetJobRunsJobRunJobLogConfigurationOverrideDetailResult']] = None,
             job_storage_mount_configuration_details_lists: Optional[Sequence['outputs.GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult']] = None,
             lifecycle_details: Optional[str] = None,
             log_details: Optional[Sequence['outputs.GetJobRunsJobRunLogDetailResult']] = None,
             project_id: Optional[str] = None,
             state: Optional[str] = None,
             time_accepted: Optional[str] = None,
             time_finished: Optional[str] = None,
             time_started: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if asynchronous is None:
            raise TypeError("Missing 'asynchronous' argument")
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if job_configuration_override_details is None and 'jobConfigurationOverrideDetails' in kwargs:
            job_configuration_override_details = kwargs['jobConfigurationOverrideDetails']
        if job_configuration_override_details is None:
            raise TypeError("Missing 'job_configuration_override_details' argument")
        if job_id is None and 'jobId' in kwargs:
            job_id = kwargs['jobId']
        if job_id is None:
            raise TypeError("Missing 'job_id' argument")
        if job_infrastructure_configuration_details is None and 'jobInfrastructureConfigurationDetails' in kwargs:
            job_infrastructure_configuration_details = kwargs['jobInfrastructureConfigurationDetails']
        if job_infrastructure_configuration_details is None:
            raise TypeError("Missing 'job_infrastructure_configuration_details' argument")
        if job_log_configuration_override_details is None and 'jobLogConfigurationOverrideDetails' in kwargs:
            job_log_configuration_override_details = kwargs['jobLogConfigurationOverrideDetails']
        if job_log_configuration_override_details is None:
            raise TypeError("Missing 'job_log_configuration_override_details' argument")
        if job_storage_mount_configuration_details_lists is None and 'jobStorageMountConfigurationDetailsLists' in kwargs:
            job_storage_mount_configuration_details_lists = kwargs['jobStorageMountConfigurationDetailsLists']
        if job_storage_mount_configuration_details_lists is None:
            raise TypeError("Missing 'job_storage_mount_configuration_details_lists' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if log_details is None and 'logDetails' in kwargs:
            log_details = kwargs['logDetails']
        if log_details is None:
            raise TypeError("Missing 'log_details' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if time_accepted is None and 'timeAccepted' in kwargs:
            time_accepted = kwargs['timeAccepted']
        if time_accepted is None:
            raise TypeError("Missing 'time_accepted' argument")
        if time_finished is None and 'timeFinished' in kwargs:
            time_finished = kwargs['timeFinished']
        if time_finished is None:
            raise TypeError("Missing 'time_finished' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")

        _setter("asynchronous", asynchronous)
        _setter("compartment_id", compartment_id)
        _setter("created_by", created_by)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("job_configuration_override_details", job_configuration_override_details)
        _setter("job_id", job_id)
        _setter("job_infrastructure_configuration_details", job_infrastructure_configuration_details)
        _setter("job_log_configuration_override_details", job_log_configuration_override_details)
        _setter("job_storage_mount_configuration_details_lists", job_storage_mount_configuration_details_lists)
        _setter("lifecycle_details", lifecycle_details)
        _setter("log_details", log_details)
        _setter("project_id", project_id)
        _setter("state", state)
        _setter("time_accepted", time_accepted)
        _setter("time_finished", time_finished)
        _setter("time_started", time_started)

    @property
    @pulumi.getter
    def asynchronous(self) -> bool:
        return pulumi.get(self, "asynchronous")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobConfigurationOverrideDetails")
    def job_configuration_override_details(self) -> Sequence['outputs.GetJobRunsJobRunJobConfigurationOverrideDetailResult']:
        """
        The job configuration details
        """
        return pulumi.get(self, "job_configuration_override_details")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobInfrastructureConfigurationDetails")
    def job_infrastructure_configuration_details(self) -> Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailResult']:
        """
        The job infrastructure configuration details (shape, block storage, etc.)
        """
        return pulumi.get(self, "job_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="jobLogConfigurationOverrideDetails")
    def job_log_configuration_override_details(self) -> Sequence['outputs.GetJobRunsJobRunJobLogConfigurationOverrideDetailResult']:
        """
        Logging configuration for resource.
        """
        return pulumi.get(self, "job_log_configuration_override_details")

    @property
    @pulumi.getter(name="jobStorageMountConfigurationDetailsLists")
    def job_storage_mount_configuration_details_lists(self) -> Sequence['outputs.GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult']:
        """
        Collection of JobStorageMountConfigurationDetails.
        """
        return pulumi.get(self, "job_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details of the state of the job run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logDetails")
    def log_details(self) -> Sequence['outputs.GetJobRunsJobRunLogDetailResult']:
        """
        Customer logging details for job run.
        """
        return pulumi.get(self, "log_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the job with.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> str:
        """
        The date and time the job run was accepted in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        """
        The date and time the job run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The date and time the job run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetJobRunsJobRunJobConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 job_type: str,
                 maximum_runtime_in_minutes: str):
        """
        :param str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, Any] environment_variables: Environment variables to set for the job.
        :param str job_type: The type of job.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        GetJobRunsJobRunJobConfigurationOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            job_type=job_type,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             job_type: Optional[str] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if job_type is None and 'jobType' in kwargs:
            job_type = kwargs['jobType']
        if job_type is None:
            raise TypeError("Missing 'job_type' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("job_type", job_type)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobRunsJobRunJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 job_infrastructure_type: str,
                 job_shape_config_details: Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult'],
                 shape_name: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param str shape_name: The shape used to launch the job run instances.
        :param str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        GetJobRunsJobRunJobInfrastructureConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            job_infrastructure_type=job_infrastructure_type,
            job_shape_config_details=job_shape_config_details,
            shape_name=shape_name,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             job_infrastructure_type: Optional[str] = None,
             job_shape_config_details: Optional[Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']] = None,
             shape_name: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if job_infrastructure_type is None and 'jobInfrastructureType' in kwargs:
            job_infrastructure_type = kwargs['jobInfrastructureType']
        if job_infrastructure_type is None:
            raise TypeError("Missing 'job_infrastructure_type' argument")
        if job_shape_config_details is None and 'jobShapeConfigDetails' in kwargs:
            job_shape_config_details = kwargs['jobShapeConfigDetails']
        if job_shape_config_details is None:
            raise TypeError("Missing 'job_shape_config_details' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("job_infrastructure_type", job_infrastructure_type)
        _setter("job_shape_config_details", job_shape_config_details)
        _setter("shape_name", shape_name)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> str:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param float ocpus: The total number of OCPUs available to the job run instance.
        """
        GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobRunsJobRunJobLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: bool,
                 enable_logging: bool,
                 log_group_id: str,
                 log_id: str):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param bool enable_logging: If customer logging is enabled for job runs.
        :param str log_group_id: The log group id for where log objects will be for job runs.
        :param str log_id: The log id of the log object the job run logs will be shipped to.
        """
        GetJobRunsJobRunJobLogConfigurationOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_auto_log_creation is None:
            raise TypeError("Missing 'enable_auto_log_creation' argument")
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if enable_logging is None:
            raise TypeError("Missing 'enable_logging' argument")
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("enable_auto_log_creation", enable_auto_log_creation)
        _setter("enable_logging", enable_logging)
        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> bool:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> bool:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects will be for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id of the log object the job run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 destination_directory_name: str,
                 destination_path: str,
                 export_id: str,
                 mount_target_id: str,
                 namespace: str,
                 prefix: str,
                 storage_type: str):
        """
        :param str bucket: The object storage bucket
        :param str destination_directory_name: The local directory name to be mounted
        :param str destination_path: The local path of the mounted directory, excluding directory name.
        :param str export_id: OCID of the export
        :param str mount_target_id: OCID of the mount target
        :param str namespace: The object storage namespace
        :param str prefix: Prefix in the bucket to mount
        :param str storage_type: The type of storage.
        """
        GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            destination_directory_name=destination_directory_name,
            destination_path=destination_path,
            export_id=export_id,
            mount_target_id=mount_target_id,
            namespace=namespace,
            prefix=prefix,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             destination_directory_name: Optional[str] = None,
             destination_path: Optional[str] = None,
             export_id: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             namespace: Optional[str] = None,
             prefix: Optional[str] = None,
             storage_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if destination_directory_name is None and 'destinationDirectoryName' in kwargs:
            destination_directory_name = kwargs['destinationDirectoryName']
        if destination_directory_name is None:
            raise TypeError("Missing 'destination_directory_name' argument")
        if destination_path is None and 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if destination_path is None:
            raise TypeError("Missing 'destination_path' argument")
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if export_id is None:
            raise TypeError("Missing 'export_id' argument")
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if prefix is None:
            raise TypeError("Missing 'prefix' argument")
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if storage_type is None:
            raise TypeError("Missing 'storage_type' argument")

        _setter("bucket", bucket)
        _setter("destination_directory_name", destination_directory_name)
        _setter("destination_path", destination_path)
        _setter("export_id", export_id)
        _setter("mount_target_id", mount_target_id)
        _setter("namespace", namespace)
        _setter("prefix", prefix)
        _setter("storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetJobRunsJobRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The log group id for where log objects will be for job runs.
        :param str log_id: The log id of the log object the job run logs will be shipped to.
        """
        GetJobRunsJobRunLogDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects will be for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id of the log object the job run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the job shape.
        """
        GetJobShapesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the job shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobShapesJobShapeResult(dict):
    def __init__(__self__, *,
                 core_count: int,
                 memory_in_gbs: int,
                 name: str,
                 shape_series: str):
        """
        :param int core_count: The number of cores associated with this job run shape.
        :param int memory_in_gbs: The number of cores associated with this job shape.
        :param str name: The name of the job shape.
        :param str shape_series: The family that the compute shape belongs to.
        """
        GetJobShapesJobShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            core_count=core_count,
            memory_in_gbs=memory_in_gbs,
            name=name,
            shape_series=shape_series,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             core_count: Optional[int] = None,
             memory_in_gbs: Optional[int] = None,
             name: Optional[str] = None,
             shape_series: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if core_count is None and 'coreCount' in kwargs:
            core_count = kwargs['coreCount']
        if core_count is None:
            raise TypeError("Missing 'core_count' argument")
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if shape_series is None and 'shapeSeries' in kwargs:
            shape_series = kwargs['shapeSeries']
        if shape_series is None:
            raise TypeError("Missing 'shape_series' argument")

        _setter("core_count", core_count)
        _setter("memory_in_gbs", memory_in_gbs)
        _setter("name", name)
        _setter("shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> int:
        """
        The number of cores associated with this job run shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> int:
        """
        The number of cores associated with this job shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the job shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> str:
        """
        The family that the compute shape belongs to.
        """
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetJobsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobsJobResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: str,
                 artifact_content_length: str,
                 artifact_content_md5: str,
                 artifact_last_modified: str,
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 delete_related_job_runs: bool,
                 description: str,
                 display_name: str,
                 empty_artifact: bool,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 job_artifact: str,
                 job_configuration_details: Sequence['outputs.GetJobsJobJobConfigurationDetailResult'],
                 job_infrastructure_configuration_details: Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailResult'],
                 job_log_configuration_details: Sequence['outputs.GetJobsJobJobLogConfigurationDetailResult'],
                 job_storage_mount_configuration_details_lists: Sequence['outputs.GetJobsJobJobStorageMountConfigurationDetailsListResult'],
                 lifecycle_details: str,
                 project_id: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A short description of the job.
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param Sequence['GetJobsJobJobConfigurationDetailArgs'] job_configuration_details: The job configuration details
        :param Sequence['GetJobsJobJobInfrastructureConfigurationDetailArgs'] job_infrastructure_configuration_details: The job infrastructure configuration details (shape, block storage, etc.)
        :param Sequence['GetJobsJobJobLogConfigurationDetailArgs'] job_log_configuration_details: Logging configuration for resource.
        :param Sequence['GetJobsJobJobStorageMountConfigurationDetailsListArgs'] job_storage_mount_configuration_details_lists: Collection of JobStorageMountConfigurationDetails.
        :param str lifecycle_details: The state of the job.
        :param str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        GetJobsJobResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            artifact_content_disposition=artifact_content_disposition,
            artifact_content_length=artifact_content_length,
            artifact_content_md5=artifact_content_md5,
            artifact_last_modified=artifact_last_modified,
            compartment_id=compartment_id,
            created_by=created_by,
            defined_tags=defined_tags,
            delete_related_job_runs=delete_related_job_runs,
            description=description,
            display_name=display_name,
            empty_artifact=empty_artifact,
            freeform_tags=freeform_tags,
            id=id,
            job_artifact=job_artifact,
            job_configuration_details=job_configuration_details,
            job_infrastructure_configuration_details=job_infrastructure_configuration_details,
            job_log_configuration_details=job_log_configuration_details,
            job_storage_mount_configuration_details_lists=job_storage_mount_configuration_details_lists,
            lifecycle_details=lifecycle_details,
            project_id=project_id,
            state=state,
            time_created=time_created,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             artifact_content_disposition: Optional[str] = None,
             artifact_content_length: Optional[str] = None,
             artifact_content_md5: Optional[str] = None,
             artifact_last_modified: Optional[str] = None,
             compartment_id: Optional[str] = None,
             created_by: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             delete_related_job_runs: Optional[bool] = None,
             description: Optional[str] = None,
             display_name: Optional[str] = None,
             empty_artifact: Optional[bool] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             job_artifact: Optional[str] = None,
             job_configuration_details: Optional[Sequence['outputs.GetJobsJobJobConfigurationDetailResult']] = None,
             job_infrastructure_configuration_details: Optional[Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailResult']] = None,
             job_log_configuration_details: Optional[Sequence['outputs.GetJobsJobJobLogConfigurationDetailResult']] = None,
             job_storage_mount_configuration_details_lists: Optional[Sequence['outputs.GetJobsJobJobStorageMountConfigurationDetailsListResult']] = None,
             lifecycle_details: Optional[str] = None,
             project_id: Optional[str] = None,
             state: Optional[str] = None,
             time_created: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if artifact_content_disposition is None and 'artifactContentDisposition' in kwargs:
            artifact_content_disposition = kwargs['artifactContentDisposition']
        if artifact_content_disposition is None:
            raise TypeError("Missing 'artifact_content_disposition' argument")
        if artifact_content_length is None and 'artifactContentLength' in kwargs:
            artifact_content_length = kwargs['artifactContentLength']
        if artifact_content_length is None:
            raise TypeError("Missing 'artifact_content_length' argument")
        if artifact_content_md5 is None and 'artifactContentMd5' in kwargs:
            artifact_content_md5 = kwargs['artifactContentMd5']
        if artifact_content_md5 is None:
            raise TypeError("Missing 'artifact_content_md5' argument")
        if artifact_last_modified is None and 'artifactLastModified' in kwargs:
            artifact_last_modified = kwargs['artifactLastModified']
        if artifact_last_modified is None:
            raise TypeError("Missing 'artifact_last_modified' argument")
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if delete_related_job_runs is None and 'deleteRelatedJobRuns' in kwargs:
            delete_related_job_runs = kwargs['deleteRelatedJobRuns']
        if delete_related_job_runs is None:
            raise TypeError("Missing 'delete_related_job_runs' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if empty_artifact is None and 'emptyArtifact' in kwargs:
            empty_artifact = kwargs['emptyArtifact']
        if empty_artifact is None:
            raise TypeError("Missing 'empty_artifact' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if job_artifact is None and 'jobArtifact' in kwargs:
            job_artifact = kwargs['jobArtifact']
        if job_artifact is None:
            raise TypeError("Missing 'job_artifact' argument")
        if job_configuration_details is None and 'jobConfigurationDetails' in kwargs:
            job_configuration_details = kwargs['jobConfigurationDetails']
        if job_configuration_details is None:
            raise TypeError("Missing 'job_configuration_details' argument")
        if job_infrastructure_configuration_details is None and 'jobInfrastructureConfigurationDetails' in kwargs:
            job_infrastructure_configuration_details = kwargs['jobInfrastructureConfigurationDetails']
        if job_infrastructure_configuration_details is None:
            raise TypeError("Missing 'job_infrastructure_configuration_details' argument")
        if job_log_configuration_details is None and 'jobLogConfigurationDetails' in kwargs:
            job_log_configuration_details = kwargs['jobLogConfigurationDetails']
        if job_log_configuration_details is None:
            raise TypeError("Missing 'job_log_configuration_details' argument")
        if job_storage_mount_configuration_details_lists is None and 'jobStorageMountConfigurationDetailsLists' in kwargs:
            job_storage_mount_configuration_details_lists = kwargs['jobStorageMountConfigurationDetailsLists']
        if job_storage_mount_configuration_details_lists is None:
            raise TypeError("Missing 'job_storage_mount_configuration_details_lists' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")

        _setter("artifact_content_disposition", artifact_content_disposition)
        _setter("artifact_content_length", artifact_content_length)
        _setter("artifact_content_md5", artifact_content_md5)
        _setter("artifact_last_modified", artifact_last_modified)
        _setter("compartment_id", compartment_id)
        _setter("created_by", created_by)
        _setter("defined_tags", defined_tags)
        _setter("delete_related_job_runs", delete_related_job_runs)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("empty_artifact", empty_artifact)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("job_artifact", job_artifact)
        _setter("job_configuration_details", job_configuration_details)
        _setter("job_infrastructure_configuration_details", job_infrastructure_configuration_details)
        _setter("job_log_configuration_details", job_log_configuration_details)
        _setter("job_storage_mount_configuration_details_lists", job_storage_mount_configuration_details_lists)
        _setter("lifecycle_details", lifecycle_details)
        _setter("project_id", project_id)
        _setter("state", state)
        _setter("time_created", time_created)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> str:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> str:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> str:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deleteRelatedJobRuns")
    def delete_related_job_runs(self) -> bool:
        return pulumi.get(self, "delete_related_job_runs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the job.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emptyArtifact")
    def empty_artifact(self) -> bool:
        return pulumi.get(self, "empty_artifact")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobArtifact")
    def job_artifact(self) -> str:
        return pulumi.get(self, "job_artifact")

    @property
    @pulumi.getter(name="jobConfigurationDetails")
    def job_configuration_details(self) -> Sequence['outputs.GetJobsJobJobConfigurationDetailResult']:
        """
        The job configuration details
        """
        return pulumi.get(self, "job_configuration_details")

    @property
    @pulumi.getter(name="jobInfrastructureConfigurationDetails")
    def job_infrastructure_configuration_details(self) -> Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailResult']:
        """
        The job infrastructure configuration details (shape, block storage, etc.)
        """
        return pulumi.get(self, "job_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="jobLogConfigurationDetails")
    def job_log_configuration_details(self) -> Sequence['outputs.GetJobsJobJobLogConfigurationDetailResult']:
        """
        Logging configuration for resource.
        """
        return pulumi.get(self, "job_log_configuration_details")

    @property
    @pulumi.getter(name="jobStorageMountConfigurationDetailsLists")
    def job_storage_mount_configuration_details_lists(self) -> Sequence['outputs.GetJobsJobJobStorageMountConfigurationDetailsListResult']:
        """
        Collection of JobStorageMountConfigurationDetails.
        """
        return pulumi.get(self, "job_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        The state of the job.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetJobsJobJobConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 job_type: str,
                 maximum_runtime_in_minutes: str):
        """
        :param str command_line_arguments: The arguments to pass to the job.
        :param Mapping[str, Any] environment_variables: Environment variables to set for the job.
        :param str job_type: The type of job.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        GetJobsJobJobConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            job_type=job_type,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             job_type: Optional[str] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if job_type is None and 'jobType' in kwargs:
            job_type = kwargs['jobType']
        if job_type is None:
            raise TypeError("Missing 'job_type' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("job_type", job_type)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The arguments to pass to the job.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for the job.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> str:
        """
        The type of job.
        """
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the job. Timer starts when the job becomes active.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobsJobJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 job_infrastructure_type: str,
                 job_shape_config_details: Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult'],
                 shape_name: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance running the job
        :param str job_infrastructure_type: The infrastructure type used for job run.
        :param Sequence['GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailArgs'] job_shape_config_details: Details for the job run shape configuration. Specify only when a flex shape is selected.
        :param str shape_name: The shape used to launch the job run instances.
        :param str subnet_id: The subnet to create a secondary vnic in to attach to the instance running the job
        """
        GetJobsJobJobInfrastructureConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            job_infrastructure_type=job_infrastructure_type,
            job_shape_config_details=job_shape_config_details,
            shape_name=shape_name,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             job_infrastructure_type: Optional[str] = None,
             job_shape_config_details: Optional[Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']] = None,
             shape_name: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if job_infrastructure_type is None and 'jobInfrastructureType' in kwargs:
            job_infrastructure_type = kwargs['jobInfrastructureType']
        if job_infrastructure_type is None:
            raise TypeError("Missing 'job_infrastructure_type' argument")
        if job_shape_config_details is None and 'jobShapeConfigDetails' in kwargs:
            job_shape_config_details = kwargs['jobShapeConfigDetails']
        if job_shape_config_details is None:
            raise TypeError("Missing 'job_shape_config_details' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("job_infrastructure_type", job_infrastructure_type)
        _setter("job_shape_config_details", job_shape_config_details)
        _setter("shape_name", shape_name)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance running the job
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> str:
        """
        The infrastructure type used for job run.
        """
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']:
        """
        Details for the job run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the job run instances.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The subnet to create a secondary vnic in to attach to the instance running the job
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: The total amount of memory available to the job run instance, in gigabytes.
        :param float ocpus: The total number of OCPUs available to the job run instance.
        """
        GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the job run instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the job run instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobsJobJobLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: bool,
                 enable_logging: bool,
                 log_group_id: str,
                 log_id: str):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for job runs.
        :param bool enable_logging: If customer logging is enabled for job runs.
        :param str log_group_id: The log group id for where log objects are for job runs.
        :param str log_id: The log id the job run will push logs too.
        """
        GetJobsJobJobLogConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_auto_log_creation is None:
            raise TypeError("Missing 'enable_auto_log_creation' argument")
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if enable_logging is None:
            raise TypeError("Missing 'enable_logging' argument")
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("enable_auto_log_creation", enable_auto_log_creation)
        _setter("enable_logging", enable_logging)
        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> bool:
        """
        If automatic on-behalf-of log object creation is enabled for job runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> bool:
        """
        If customer logging is enabled for job runs.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects are for job runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id the job run will push logs too.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobsJobJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 destination_directory_name: str,
                 destination_path: str,
                 export_id: str,
                 mount_target_id: str,
                 namespace: str,
                 prefix: str,
                 storage_type: str):
        """
        :param str bucket: The object storage bucket
        :param str destination_directory_name: The local directory name to be mounted
        :param str destination_path: The local path of the mounted directory, excluding directory name.
        :param str export_id: OCID of the export
        :param str mount_target_id: OCID of the mount target
        :param str namespace: The object storage namespace
        :param str prefix: Prefix in the bucket to mount
        :param str storage_type: The type of storage.
        """
        GetJobsJobJobStorageMountConfigurationDetailsListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            destination_directory_name=destination_directory_name,
            destination_path=destination_path,
            export_id=export_id,
            mount_target_id=mount_target_id,
            namespace=namespace,
            prefix=prefix,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             destination_directory_name: Optional[str] = None,
             destination_path: Optional[str] = None,
             export_id: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             namespace: Optional[str] = None,
             prefix: Optional[str] = None,
             storage_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if destination_directory_name is None and 'destinationDirectoryName' in kwargs:
            destination_directory_name = kwargs['destinationDirectoryName']
        if destination_directory_name is None:
            raise TypeError("Missing 'destination_directory_name' argument")
        if destination_path is None and 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if destination_path is None:
            raise TypeError("Missing 'destination_path' argument")
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if export_id is None:
            raise TypeError("Missing 'export_id' argument")
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if prefix is None:
            raise TypeError("Missing 'prefix' argument")
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if storage_type is None:
            raise TypeError("Missing 'storage_type' argument")

        _setter("bucket", bucket)
        _setter("destination_directory_name", destination_directory_name)
        _setter("destination_path", destination_path)
        _setter("export_id", export_id)
        _setter("mount_target_id", mount_target_id)
        _setter("namespace", namespace)
        _setter("prefix", prefix)
        _setter("storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetModelCustomMetadataListResult(dict):
    def __init__(__self__, *,
                 category: str,
                 description: str,
                 key: str,
                 value: str):
        """
        :param str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: A short description of the model.
        :param str key: Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testartifactresults
        :param str value: Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        GetModelCustomMetadataListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            description=description,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[str] = None,
             description: Optional[str] = None,
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if category is None:
            raise TypeError("Missing 'category' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("category", category)
        _setter("description", description)
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testartifactresults
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelDefinedMetadataListResult(dict):
    def __init__(__self__, *,
                 category: str,
                 description: str,
                 key: str,
                 value: str):
        """
        :param str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: A short description of the model.
        :param str key: Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testartifactresults
        :param str value: Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        GetModelDefinedMetadataListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            description=description,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[str] = None,
             description: Optional[str] = None,
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if category is None:
            raise TypeError("Missing 'category' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("category", category)
        _setter("description", description)
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testartifactresults
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailResult(dict):
    def __init__(__self__, *,
                 accesses: Sequence['outputs.GetModelDeploymentCategoryLogDetailAccessResult'],
                 predicts: Sequence['outputs.GetModelDeploymentCategoryLogDetailPredictResult']):
        """
        :param Sequence['GetModelDeploymentCategoryLogDetailAccessArgs'] accesses: The log details.
        :param Sequence['GetModelDeploymentCategoryLogDetailPredictArgs'] predicts: The log details.
        """
        GetModelDeploymentCategoryLogDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accesses=accesses,
            predicts=predicts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accesses: Optional[Sequence['outputs.GetModelDeploymentCategoryLogDetailAccessResult']] = None,
             predicts: Optional[Sequence['outputs.GetModelDeploymentCategoryLogDetailPredictResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if accesses is None:
            raise TypeError("Missing 'accesses' argument")
        if predicts is None:
            raise TypeError("Missing 'predicts' argument")

        _setter("accesses", accesses)
        _setter("predicts", predicts)

    @property
    @pulumi.getter
    def accesses(self) -> Sequence['outputs.GetModelDeploymentCategoryLogDetailAccessResult']:
        """
        The log details.
        """
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def predicts(self) -> Sequence['outputs.GetModelDeploymentCategoryLogDetailPredictResult']:
        """
        The log details.
        """
        return pulumi.get(self, "predicts")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailAccessResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        GetModelDeploymentCategoryLogDetailAccessResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailPredictResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        GetModelDeploymentCategoryLogDetailPredictResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 deployment_type: str,
                 environment_configuration_details: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult'],
                 model_configuration_details: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']):
        """
        :param str deployment_type: The type of the model deployment.
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailArgs'] environment_configuration_details: The configuration to carry the environment details thats used in Model Deployment creation
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailArgs'] model_configuration_details: The model configuration details.
        """
        GetModelDeploymentModelDeploymentConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            deployment_type=deployment_type,
            environment_configuration_details=environment_configuration_details,
            model_configuration_details=model_configuration_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             deployment_type: Optional[str] = None,
             environment_configuration_details: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']] = None,
             model_configuration_details: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if deployment_type is None and 'deploymentType' in kwargs:
            deployment_type = kwargs['deploymentType']
        if deployment_type is None:
            raise TypeError("Missing 'deployment_type' argument")
        if environment_configuration_details is None and 'environmentConfigurationDetails' in kwargs:
            environment_configuration_details = kwargs['environmentConfigurationDetails']
        if environment_configuration_details is None:
            raise TypeError("Missing 'environment_configuration_details' argument")
        if model_configuration_details is None and 'modelConfigurationDetails' in kwargs:
            model_configuration_details = kwargs['modelConfigurationDetails']
        if model_configuration_details is None:
            raise TypeError("Missing 'model_configuration_details' argument")

        _setter("deployment_type", deployment_type)
        _setter("environment_configuration_details", environment_configuration_details)
        _setter("model_configuration_details", model_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        The type of the model deployment.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="environmentConfigurationDetails")
    def environment_configuration_details(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']:
        """
        The configuration to carry the environment details thats used in Model Deployment creation
        """
        return pulumi.get(self, "environment_configuration_details")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']:
        """
        The model configuration details.
        """
        return pulumi.get(self, "model_configuration_details")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[str],
                 entrypoints: Sequence[str],
                 environment_configuration_type: str,
                 environment_variables: Mapping[str, Any],
                 health_check_port: int,
                 image: str,
                 image_digest: str,
                 server_port: int):
        """
        :param Sequence[str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param str environment_configuration_type: The environment configuration type
        :param Mapping[str, Any] environment_variables: Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        :param int health_check_port: The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        :param str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param int server_port: The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cmds=cmds,
            entrypoints=entrypoints,
            environment_configuration_type=environment_configuration_type,
            environment_variables=environment_variables,
            health_check_port=health_check_port,
            image=image,
            image_digest=image_digest,
            server_port=server_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cmds: Optional[Sequence[str]] = None,
             entrypoints: Optional[Sequence[str]] = None,
             environment_configuration_type: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             health_check_port: Optional[int] = None,
             image: Optional[str] = None,
             image_digest: Optional[str] = None,
             server_port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cmds is None:
            raise TypeError("Missing 'cmds' argument")
        if entrypoints is None:
            raise TypeError("Missing 'entrypoints' argument")
        if environment_configuration_type is None and 'environmentConfigurationType' in kwargs:
            environment_configuration_type = kwargs['environmentConfigurationType']
        if environment_configuration_type is None:
            raise TypeError("Missing 'environment_configuration_type' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if health_check_port is None and 'healthCheckPort' in kwargs:
            health_check_port = kwargs['healthCheckPort']
        if health_check_port is None:
            raise TypeError("Missing 'health_check_port' argument")
        if image is None:
            raise TypeError("Missing 'image' argument")
        if image_digest is None and 'imageDigest' in kwargs:
            image_digest = kwargs['imageDigest']
        if image_digest is None:
            raise TypeError("Missing 'image_digest' argument")
        if server_port is None and 'serverPort' in kwargs:
            server_port = kwargs['serverPort']
        if server_port is None:
            raise TypeError("Missing 'server_port' argument")

        _setter("cmds", cmds)
        _setter("entrypoints", entrypoints)
        _setter("environment_configuration_type", environment_configuration_type)
        _setter("environment_variables", environment_variables)
        _setter("health_check_port", health_check_port)
        _setter("image", image)
        _setter("image_digest", image_digest)
        _setter("server_port", server_port)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="environmentConfigurationType")
    def environment_configuration_type(self) -> str:
        """
        The environment configuration type
        """
        return pulumi.get(self, "environment_configuration_type")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> int:
        """
        The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> int:
        """
        The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "server_port")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 bandwidth_mbps: int,
                 instance_configurations: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult'],
                 model_id: str,
                 scaling_policies: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']):
        """
        :param int bandwidth_mbps: The minimum network bandwidth for the model deployment.
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationArgs'] instance_configurations: The model deployment instance configuration
        :param str model_id: The OCID of the model you want to deploy.
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyArgs'] scaling_policies: The scaling policy to apply to each model of the deployment.
        """
        GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bandwidth_mbps=bandwidth_mbps,
            instance_configurations=instance_configurations,
            model_id=model_id,
            scaling_policies=scaling_policies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bandwidth_mbps: Optional[int] = None,
             instance_configurations: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']] = None,
             model_id: Optional[str] = None,
             scaling_policies: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bandwidth_mbps is None and 'bandwidthMbps' in kwargs:
            bandwidth_mbps = kwargs['bandwidthMbps']
        if bandwidth_mbps is None:
            raise TypeError("Missing 'bandwidth_mbps' argument")
        if instance_configurations is None and 'instanceConfigurations' in kwargs:
            instance_configurations = kwargs['instanceConfigurations']
        if instance_configurations is None:
            raise TypeError("Missing 'instance_configurations' argument")
        if model_id is None and 'modelId' in kwargs:
            model_id = kwargs['modelId']
        if model_id is None:
            raise TypeError("Missing 'model_id' argument")
        if scaling_policies is None and 'scalingPolicies' in kwargs:
            scaling_policies = kwargs['scalingPolicies']
        if scaling_policies is None:
            raise TypeError("Missing 'scaling_policies' argument")

        _setter("bandwidth_mbps", bandwidth_mbps)
        _setter("instance_configurations", instance_configurations)
        _setter("model_id", model_id)
        _setter("scaling_policies", scaling_policies)

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> int:
        """
        The minimum network bandwidth for the model deployment.
        """
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="instanceConfigurations")
    def instance_configurations(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']:
        """
        The model deployment instance configuration
        """
        return pulumi.get(self, "instance_configurations")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> str:
        """
        The OCID of the model you want to deploy.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']:
        """
        The scaling policy to apply to each model of the deployment.
        """
        return pulumi.get(self, "scaling_policies")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_shape_name: str,
                 model_deployment_instance_shape_config_details: Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']):
        """
        :param str instance_shape_name: The shape used to launch the model deployment instances.
        :param Sequence['GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailArgs'] model_deployment_instance_shape_config_details: Details for the model-deployment instance shape configuration.
        """
        GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_shape_name=instance_shape_name,
            model_deployment_instance_shape_config_details=model_deployment_instance_shape_config_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_shape_name: Optional[str] = None,
             model_deployment_instance_shape_config_details: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if instance_shape_name is None and 'instanceShapeName' in kwargs:
            instance_shape_name = kwargs['instanceShapeName']
        if instance_shape_name is None:
            raise TypeError("Missing 'instance_shape_name' argument")
        if model_deployment_instance_shape_config_details is None and 'modelDeploymentInstanceShapeConfigDetails' in kwargs:
            model_deployment_instance_shape_config_details = kwargs['modelDeploymentInstanceShapeConfigDetails']
        if model_deployment_instance_shape_config_details is None:
            raise TypeError("Missing 'model_deployment_instance_shape_config_details' argument")

        _setter("instance_shape_name", instance_shape_name)
        _setter("model_deployment_instance_shape_config_details", model_deployment_instance_shape_config_details)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> str:
        """
        The shape used to launch the model deployment instances.
        """
        return pulumi.get(self, "instance_shape_name")

    @property
    @pulumi.getter(name="modelDeploymentInstanceShapeConfigDetails")
    def model_deployment_instance_shape_config_details(self) -> Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']:
        """
        Details for the model-deployment instance shape configuration.
        """
        return pulumi.get(self, "model_deployment_instance_shape_config_details")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 and 512 GB and VM.Optimized3.Flex memory range is between 6 and 256 GB.
        :param float ocpus: A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 and 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 and 512 GB and VM.Optimized3.Flex memory range is between 6 and 256 GB.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 and 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult(dict):
    def __init__(__self__, *,
                 instance_count: int,
                 policy_type: str):
        """
        :param int instance_count: The number of instances for the model deployment.
        :param str policy_type: The type of scaling policy.
        """
        GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_count=instance_count,
            policy_type=policy_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_count: Optional[int] = None,
             policy_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if instance_count is None and 'instanceCount' in kwargs:
            instance_count = kwargs['instanceCount']
        if instance_count is None:
            raise TypeError("Missing 'instance_count' argument")
        if policy_type is None and 'policyType' in kwargs:
            policy_type = kwargs['policyType']
        if policy_type is None:
            raise TypeError("Missing 'policy_type' argument")

        _setter("instance_count", instance_count)
        _setter("policy_type", policy_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of instances for the model deployment.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of scaling policy.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetModelDeploymentShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the model deployment shape.
        """
        GetModelDeploymentShapesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the model deployment shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelDeploymentShapesModelDeploymentShapeResult(dict):
    def __init__(__self__, *,
                 core_count: int,
                 memory_in_gbs: int,
                 name: str,
                 shape_series: str):
        """
        :param int core_count: The number of cores associated with this model deployment shape.
        :param int memory_in_gbs: The amount of memory in GBs associated with this model deployment shape.
        :param str name: The name of the model deployment shape.
        :param str shape_series: The family that the compute shape belongs to.
        """
        GetModelDeploymentShapesModelDeploymentShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            core_count=core_count,
            memory_in_gbs=memory_in_gbs,
            name=name,
            shape_series=shape_series,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             core_count: Optional[int] = None,
             memory_in_gbs: Optional[int] = None,
             name: Optional[str] = None,
             shape_series: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if core_count is None and 'coreCount' in kwargs:
            core_count = kwargs['coreCount']
        if core_count is None:
            raise TypeError("Missing 'core_count' argument")
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if shape_series is None and 'shapeSeries' in kwargs:
            shape_series = kwargs['shapeSeries']
        if shape_series is None:
            raise TypeError("Missing 'shape_series' argument")

        _setter("core_count", core_count)
        _setter("memory_in_gbs", memory_in_gbs)
        _setter("name", name)
        _setter("shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> int:
        """
        The number of cores associated with this model deployment shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> int:
        """
        The amount of memory in GBs associated with this model deployment shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the model deployment shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> str:
        """
        The family that the compute shape belongs to.
        """
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetModelDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetModelDeploymentsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentResult(dict):
    def __init__(__self__, *,
                 category_log_details: Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailResult'],
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 model_deployment_configuration_details: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult'],
                 model_deployment_url: str,
                 project_id: str,
                 state: str,
                 time_created: str):
        """
        :param Sequence['GetModelDeploymentsModelDeploymentCategoryLogDetailArgs'] category_log_details: The log details for each category.
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A short description of the model deployment.
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str lifecycle_details: Details about the state of the model deployment.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailArgs'] model_deployment_configuration_details: The model deployment configuration details.
        :param str model_deployment_url: The URL to interact with the model deployment.
        :param str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time the resource was created, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        GetModelDeploymentsModelDeploymentResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_log_details=category_log_details,
            compartment_id=compartment_id,
            created_by=created_by,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            model_deployment_configuration_details=model_deployment_configuration_details,
            model_deployment_url=model_deployment_url,
            project_id=project_id,
            state=state,
            time_created=time_created,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_log_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailResult']] = None,
             compartment_id: Optional[str] = None,
             created_by: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             description: Optional[str] = None,
             display_name: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             lifecycle_details: Optional[str] = None,
             model_deployment_configuration_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult']] = None,
             model_deployment_url: Optional[str] = None,
             project_id: Optional[str] = None,
             state: Optional[str] = None,
             time_created: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if category_log_details is None and 'categoryLogDetails' in kwargs:
            category_log_details = kwargs['categoryLogDetails']
        if category_log_details is None:
            raise TypeError("Missing 'category_log_details' argument")
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if model_deployment_configuration_details is None and 'modelDeploymentConfigurationDetails' in kwargs:
            model_deployment_configuration_details = kwargs['modelDeploymentConfigurationDetails']
        if model_deployment_configuration_details is None:
            raise TypeError("Missing 'model_deployment_configuration_details' argument")
        if model_deployment_url is None and 'modelDeploymentUrl' in kwargs:
            model_deployment_url = kwargs['modelDeploymentUrl']
        if model_deployment_url is None:
            raise TypeError("Missing 'model_deployment_url' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")

        _setter("category_log_details", category_log_details)
        _setter("compartment_id", compartment_id)
        _setter("created_by", created_by)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("model_deployment_configuration_details", model_deployment_configuration_details)
        _setter("model_deployment_url", model_deployment_url)
        _setter("project_id", project_id)
        _setter("state", state)
        _setter("time_created", time_created)

    @property
    @pulumi.getter(name="categoryLogDetails")
    def category_log_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailResult']:
        """
        The log details for each category.
        """
        return pulumi.get(self, "category_log_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model deployment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details about the state of the model deployment.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelDeploymentConfigurationDetails")
    def model_deployment_configuration_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult']:
        """
        The model deployment configuration details.
        """
        return pulumi.get(self, "model_deployment_configuration_details")

    @property
    @pulumi.getter(name="modelDeploymentUrl")
    def model_deployment_url(self) -> str:
        """
        The URL to interact with the model deployment.
        """
        return pulumi.get(self, "model_deployment_url")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created, in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailResult(dict):
    def __init__(__self__, *,
                 accesses: Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult'],
                 predicts: Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult']):
        """
        :param Sequence['GetModelDeploymentsModelDeploymentCategoryLogDetailAccessArgs'] accesses: The log details.
        :param Sequence['GetModelDeploymentsModelDeploymentCategoryLogDetailPredictArgs'] predicts: The log details.
        """
        GetModelDeploymentsModelDeploymentCategoryLogDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accesses=accesses,
            predicts=predicts,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accesses: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult']] = None,
             predicts: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if accesses is None:
            raise TypeError("Missing 'accesses' argument")
        if predicts is None:
            raise TypeError("Missing 'predicts' argument")

        _setter("accesses", accesses)
        _setter("predicts", predicts)

    @property
    @pulumi.getter
    def accesses(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult']:
        """
        The log details.
        """
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def predicts(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult']:
        """
        The log details.
        """
        return pulumi.get(self, "predicts")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log group to work with.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of a log to work with.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 deployment_type: str,
                 environment_configuration_details: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult'],
                 model_configuration_details: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']):
        """
        :param str deployment_type: The type of the model deployment.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailArgs'] environment_configuration_details: The configuration to carry the environment details thats used in Model Deployment creation
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailArgs'] model_configuration_details: The model configuration details.
        """
        GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            deployment_type=deployment_type,
            environment_configuration_details=environment_configuration_details,
            model_configuration_details=model_configuration_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             deployment_type: Optional[str] = None,
             environment_configuration_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']] = None,
             model_configuration_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if deployment_type is None and 'deploymentType' in kwargs:
            deployment_type = kwargs['deploymentType']
        if deployment_type is None:
            raise TypeError("Missing 'deployment_type' argument")
        if environment_configuration_details is None and 'environmentConfigurationDetails' in kwargs:
            environment_configuration_details = kwargs['environmentConfigurationDetails']
        if environment_configuration_details is None:
            raise TypeError("Missing 'environment_configuration_details' argument")
        if model_configuration_details is None and 'modelConfigurationDetails' in kwargs:
            model_configuration_details = kwargs['modelConfigurationDetails']
        if model_configuration_details is None:
            raise TypeError("Missing 'model_configuration_details' argument")

        _setter("deployment_type", deployment_type)
        _setter("environment_configuration_details", environment_configuration_details)
        _setter("model_configuration_details", model_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        """
        The type of the model deployment.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="environmentConfigurationDetails")
    def environment_configuration_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']:
        """
        The configuration to carry the environment details thats used in Model Deployment creation
        """
        return pulumi.get(self, "environment_configuration_details")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']:
        """
        The model configuration details.
        """
        return pulumi.get(self, "model_configuration_details")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Sequence[str],
                 entrypoints: Sequence[str],
                 environment_configuration_type: str,
                 environment_variables: Mapping[str, Any],
                 health_check_port: int,
                 image: str,
                 image_digest: str,
                 server_port: int):
        """
        :param Sequence[str] cmds: The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        :param Sequence[str] entrypoints: The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        :param str environment_configuration_type: The environment configuration type
        :param Mapping[str, Any] environment_variables: Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        :param int health_check_port: The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        :param str image: The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        :param str image_digest: The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        :param int server_port: The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cmds=cmds,
            entrypoints=entrypoints,
            environment_configuration_type=environment_configuration_type,
            environment_variables=environment_variables,
            health_check_port=health_check_port,
            image=image,
            image_digest=image_digest,
            server_port=server_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cmds: Optional[Sequence[str]] = None,
             entrypoints: Optional[Sequence[str]] = None,
             environment_configuration_type: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             health_check_port: Optional[int] = None,
             image: Optional[str] = None,
             image_digest: Optional[str] = None,
             server_port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cmds is None:
            raise TypeError("Missing 'cmds' argument")
        if entrypoints is None:
            raise TypeError("Missing 'entrypoints' argument")
        if environment_configuration_type is None and 'environmentConfigurationType' in kwargs:
            environment_configuration_type = kwargs['environmentConfigurationType']
        if environment_configuration_type is None:
            raise TypeError("Missing 'environment_configuration_type' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if health_check_port is None and 'healthCheckPort' in kwargs:
            health_check_port = kwargs['healthCheckPort']
        if health_check_port is None:
            raise TypeError("Missing 'health_check_port' argument")
        if image is None:
            raise TypeError("Missing 'image' argument")
        if image_digest is None and 'imageDigest' in kwargs:
            image_digest = kwargs['imageDigest']
        if image_digest is None:
            raise TypeError("Missing 'image_digest' argument")
        if server_port is None and 'serverPort' in kwargs:
            server_port = kwargs['serverPort']
        if server_port is None:
            raise TypeError("Missing 'server_port' argument")

        _setter("cmds", cmds)
        _setter("entrypoints", entrypoints)
        _setter("environment_configuration_type", environment_configuration_type)
        _setter("environment_variables", environment_variables)
        _setter("health_check_port", health_check_port)
        _setter("image", image)
        _setter("image_digest", image_digest)
        _setter("server_port", server_port)

    @property
    @pulumi.getter
    def cmds(self) -> Sequence[str]:
        """
        The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings. Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
        """
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Sequence[str]:
        """
        The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings. Accept the `CMD` as extra arguments. The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes. More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
        """
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="environmentConfigurationType")
    def environment_configuration_type(self) -> str:
        """
        The environment configuration type
        """
        return pulumi.get(self, "environment_configuration_type")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for the web server container. The size of envVars must be less than 2048 bytes. Key should be under 32 characters. Key should contain only letters, digits and underscore (_) Key should start with a letter. Key should have at least 2 characters. Key should not end with underscore eg. `TEST_` Key if added cannot be empty. Value can be empty. No specific size limits on individual Values. But overall environment variables is limited to 2048 bytes. Key can't be reserved Model Deployment environment variables.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> int:
        """
        The port on which the container [HEALTHCHECK](https://docs.docker.com/engine/reference/builder/#healthcheck) would listen. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format. Acceptable format: `<region>.ocir.io/<registry>/<image>:<tag>` `<region>.ocir.io/<registry>/<image>:<tag>@digest`
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> str:
        """
        The digest of the container image. For example, `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
        """
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> int:
        """
        The port on which the web server serving the inference is running. The port can be anything between `1024` and `65535`. The following ports cannot be used `24224`, `8446`, `8447`.
        """
        return pulumi.get(self, "server_port")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 bandwidth_mbps: int,
                 instance_configurations: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult'],
                 model_id: str,
                 scaling_policies: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']):
        """
        :param int bandwidth_mbps: The minimum network bandwidth for the model deployment.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationArgs'] instance_configurations: The model deployment instance configuration
        :param str model_id: The OCID of the model you want to deploy.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyArgs'] scaling_policies: The scaling policy to apply to each model of the deployment.
        """
        GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bandwidth_mbps=bandwidth_mbps,
            instance_configurations=instance_configurations,
            model_id=model_id,
            scaling_policies=scaling_policies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bandwidth_mbps: Optional[int] = None,
             instance_configurations: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']] = None,
             model_id: Optional[str] = None,
             scaling_policies: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bandwidth_mbps is None and 'bandwidthMbps' in kwargs:
            bandwidth_mbps = kwargs['bandwidthMbps']
        if bandwidth_mbps is None:
            raise TypeError("Missing 'bandwidth_mbps' argument")
        if instance_configurations is None and 'instanceConfigurations' in kwargs:
            instance_configurations = kwargs['instanceConfigurations']
        if instance_configurations is None:
            raise TypeError("Missing 'instance_configurations' argument")
        if model_id is None and 'modelId' in kwargs:
            model_id = kwargs['modelId']
        if model_id is None:
            raise TypeError("Missing 'model_id' argument")
        if scaling_policies is None and 'scalingPolicies' in kwargs:
            scaling_policies = kwargs['scalingPolicies']
        if scaling_policies is None:
            raise TypeError("Missing 'scaling_policies' argument")

        _setter("bandwidth_mbps", bandwidth_mbps)
        _setter("instance_configurations", instance_configurations)
        _setter("model_id", model_id)
        _setter("scaling_policies", scaling_policies)

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> int:
        """
        The minimum network bandwidth for the model deployment.
        """
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="instanceConfigurations")
    def instance_configurations(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']:
        """
        The model deployment instance configuration
        """
        return pulumi.get(self, "instance_configurations")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> str:
        """
        The OCID of the model you want to deploy.
        """
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']:
        """
        The scaling policy to apply to each model of the deployment.
        """
        return pulumi.get(self, "scaling_policies")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_shape_name: str,
                 model_deployment_instance_shape_config_details: Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']):
        """
        :param str instance_shape_name: The shape used to launch the model deployment instances.
        :param Sequence['GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailArgs'] model_deployment_instance_shape_config_details: Details for the model-deployment instance shape configuration.
        """
        GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_shape_name=instance_shape_name,
            model_deployment_instance_shape_config_details=model_deployment_instance_shape_config_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_shape_name: Optional[str] = None,
             model_deployment_instance_shape_config_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if instance_shape_name is None and 'instanceShapeName' in kwargs:
            instance_shape_name = kwargs['instanceShapeName']
        if instance_shape_name is None:
            raise TypeError("Missing 'instance_shape_name' argument")
        if model_deployment_instance_shape_config_details is None and 'modelDeploymentInstanceShapeConfigDetails' in kwargs:
            model_deployment_instance_shape_config_details = kwargs['modelDeploymentInstanceShapeConfigDetails']
        if model_deployment_instance_shape_config_details is None:
            raise TypeError("Missing 'model_deployment_instance_shape_config_details' argument")

        _setter("instance_shape_name", instance_shape_name)
        _setter("model_deployment_instance_shape_config_details", model_deployment_instance_shape_config_details)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> str:
        """
        The shape used to launch the model deployment instances.
        """
        return pulumi.get(self, "instance_shape_name")

    @property
    @pulumi.getter(name="modelDeploymentInstanceShapeConfigDetails")
    def model_deployment_instance_shape_config_details(self) -> Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']:
        """
        Details for the model-deployment instance shape configuration.
        """
        return pulumi.get(self, "model_deployment_instance_shape_config_details")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 and 512 GB and VM.Optimized3.Flex memory range is between 6 and 256 GB.
        :param float ocpus: A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 and 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the memory to be specified with in the range of 6 to 1024 GB. VM.Standard3.Flex memory range is between 6 and 512 GB and VM.Optimized3.Flex memory range is between 6 and 256 GB.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        A model-deployment instance of type VM.Standard.E3.Flex or VM.Standard.E4.Flex allows the ocpu count to be specified with in the range of 1 to 64 ocpu. VM.Standard3.Flex OCPU range is between 1 and 32 ocpu and for VM.Optimized3.Flex OCPU range is 1 to 18 ocpu.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult(dict):
    def __init__(__self__, *,
                 instance_count: int,
                 policy_type: str):
        """
        :param int instance_count: The number of instances for the model deployment.
        :param str policy_type: The type of scaling policy.
        """
        GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_count=instance_count,
            policy_type=policy_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_count: Optional[int] = None,
             policy_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if instance_count is None and 'instanceCount' in kwargs:
            instance_count = kwargs['instanceCount']
        if instance_count is None:
            raise TypeError("Missing 'instance_count' argument")
        if policy_type is None and 'policyType' in kwargs:
            policy_type = kwargs['policyType']
        if policy_type is None:
            raise TypeError("Missing 'policy_type' argument")

        _setter("instance_count", instance_count)
        _setter("policy_type", policy_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        """
        The number of instances for the model deployment.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        """
        The type of scaling policy.
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetModelVersionSetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: A filter to return only resources that match the entire name given.
        """
        GetModelVersionSetsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelVersionSetsModelVersionSetResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 name: str,
                 project_id: str,
                 state: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A short description of the model version set.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str name: A filter to return only resources that match the entire name given.
        :param str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time that the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        :param str time_updated: The date and time that the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        GetModelVersionSetsModelVersionSetResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            created_by=created_by,
            defined_tags=defined_tags,
            description=description,
            freeform_tags=freeform_tags,
            id=id,
            name=name,
            project_id=project_id,
            state=state,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             created_by: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             description: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             name: Optional[str] = None,
             project_id: Optional[str] = None,
             state: Optional[str] = None,
             time_created: Optional[str] = None,
             time_updated: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if time_updated is None and 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if time_updated is None:
            raise TypeError("Missing 'time_updated' argument")

        _setter("compartment_id", compartment_id)
        _setter("created_by", created_by)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("name", name)
        _setter("project_id", project_id)
        _setter("state", state)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model version set.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A filter to return only resources that match the entire name given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetModelsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelsModelResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: str,
                 artifact_content_length: str,
                 artifact_content_md5: str,
                 artifact_last_modified: str,
                 compartment_id: str,
                 created_by: str,
                 custom_metadata_lists: Sequence['outputs.GetModelsModelCustomMetadataListResult'],
                 defined_metadata_lists: Sequence['outputs.GetModelsModelDefinedMetadataListResult'],
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 empty_model: bool,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 input_schema: str,
                 model_artifact: str,
                 output_schema: str,
                 project_id: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Sequence['GetModelsModelCustomMetadataListArgs'] custom_metadata_lists: An array of custom metadata details for the model.
        :param Sequence['GetModelsModelDefinedMetadataListArgs'] defined_metadata_lists: An array of defined metadata details for the model.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A short description of the model.
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str input_schema: Input schema file content in String format
        :param str output_schema: Output schema file content in String format
        :param str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        GetModelsModelResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            artifact_content_disposition=artifact_content_disposition,
            artifact_content_length=artifact_content_length,
            artifact_content_md5=artifact_content_md5,
            artifact_last_modified=artifact_last_modified,
            compartment_id=compartment_id,
            created_by=created_by,
            custom_metadata_lists=custom_metadata_lists,
            defined_metadata_lists=defined_metadata_lists,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            empty_model=empty_model,
            freeform_tags=freeform_tags,
            id=id,
            input_schema=input_schema,
            model_artifact=model_artifact,
            output_schema=output_schema,
            project_id=project_id,
            state=state,
            time_created=time_created,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             artifact_content_disposition: Optional[str] = None,
             artifact_content_length: Optional[str] = None,
             artifact_content_md5: Optional[str] = None,
             artifact_last_modified: Optional[str] = None,
             compartment_id: Optional[str] = None,
             created_by: Optional[str] = None,
             custom_metadata_lists: Optional[Sequence['outputs.GetModelsModelCustomMetadataListResult']] = None,
             defined_metadata_lists: Optional[Sequence['outputs.GetModelsModelDefinedMetadataListResult']] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             description: Optional[str] = None,
             display_name: Optional[str] = None,
             empty_model: Optional[bool] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             input_schema: Optional[str] = None,
             model_artifact: Optional[str] = None,
             output_schema: Optional[str] = None,
             project_id: Optional[str] = None,
             state: Optional[str] = None,
             time_created: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if artifact_content_disposition is None and 'artifactContentDisposition' in kwargs:
            artifact_content_disposition = kwargs['artifactContentDisposition']
        if artifact_content_disposition is None:
            raise TypeError("Missing 'artifact_content_disposition' argument")
        if artifact_content_length is None and 'artifactContentLength' in kwargs:
            artifact_content_length = kwargs['artifactContentLength']
        if artifact_content_length is None:
            raise TypeError("Missing 'artifact_content_length' argument")
        if artifact_content_md5 is None and 'artifactContentMd5' in kwargs:
            artifact_content_md5 = kwargs['artifactContentMd5']
        if artifact_content_md5 is None:
            raise TypeError("Missing 'artifact_content_md5' argument")
        if artifact_last_modified is None and 'artifactLastModified' in kwargs:
            artifact_last_modified = kwargs['artifactLastModified']
        if artifact_last_modified is None:
            raise TypeError("Missing 'artifact_last_modified' argument")
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if custom_metadata_lists is None and 'customMetadataLists' in kwargs:
            custom_metadata_lists = kwargs['customMetadataLists']
        if custom_metadata_lists is None:
            raise TypeError("Missing 'custom_metadata_lists' argument")
        if defined_metadata_lists is None and 'definedMetadataLists' in kwargs:
            defined_metadata_lists = kwargs['definedMetadataLists']
        if defined_metadata_lists is None:
            raise TypeError("Missing 'defined_metadata_lists' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if empty_model is None and 'emptyModel' in kwargs:
            empty_model = kwargs['emptyModel']
        if empty_model is None:
            raise TypeError("Missing 'empty_model' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if input_schema is None and 'inputSchema' in kwargs:
            input_schema = kwargs['inputSchema']
        if input_schema is None:
            raise TypeError("Missing 'input_schema' argument")
        if model_artifact is None and 'modelArtifact' in kwargs:
            model_artifact = kwargs['modelArtifact']
        if model_artifact is None:
            raise TypeError("Missing 'model_artifact' argument")
        if output_schema is None and 'outputSchema' in kwargs:
            output_schema = kwargs['outputSchema']
        if output_schema is None:
            raise TypeError("Missing 'output_schema' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")

        _setter("artifact_content_disposition", artifact_content_disposition)
        _setter("artifact_content_length", artifact_content_length)
        _setter("artifact_content_md5", artifact_content_md5)
        _setter("artifact_last_modified", artifact_last_modified)
        _setter("compartment_id", compartment_id)
        _setter("created_by", created_by)
        _setter("custom_metadata_lists", custom_metadata_lists)
        _setter("defined_metadata_lists", defined_metadata_lists)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("empty_model", empty_model)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("input_schema", input_schema)
        _setter("model_artifact", model_artifact)
        _setter("output_schema", output_schema)
        _setter("project_id", project_id)
        _setter("state", state)
        _setter("time_created", time_created)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> str:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> str:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> str:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="customMetadataLists")
    def custom_metadata_lists(self) -> Sequence['outputs.GetModelsModelCustomMetadataListResult']:
        """
        An array of custom metadata details for the model.
        """
        return pulumi.get(self, "custom_metadata_lists")

    @property
    @pulumi.getter(name="definedMetadataLists")
    def defined_metadata_lists(self) -> Sequence['outputs.GetModelsModelDefinedMetadataListResult']:
        """
        An array of defined metadata details for the model.
        """
        return pulumi.get(self, "defined_metadata_lists")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emptyModel")
    def empty_model(self) -> bool:
        return pulumi.get(self, "empty_model")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputSchema")
    def input_schema(self) -> str:
        """
        Input schema file content in String format
        """
        return pulumi.get(self, "input_schema")

    @property
    @pulumi.getter(name="modelArtifact")
    def model_artifact(self) -> str:
        return pulumi.get(self, "model_artifact")

    @property
    @pulumi.getter(name="outputSchema")
    def output_schema(self) -> str:
        """
        Output schema file content in String format
        """
        return pulumi.get(self, "output_schema")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetModelsModelCustomMetadataListResult(dict):
    def __init__(__self__, *,
                 category: str,
                 description: str,
                 key: str,
                 value: str):
        """
        :param str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: A short description of the model.
        :param str key: Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testartifactresults
        :param str value: Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        GetModelsModelCustomMetadataListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            description=description,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[str] = None,
             description: Optional[str] = None,
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if category is None:
            raise TypeError("Missing 'category' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("category", category)
        _setter("description", description)
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testartifactresults
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelsModelDefinedMetadataListResult(dict):
    def __init__(__self__, *,
                 category: str,
                 description: str,
                 key: str,
                 value: str):
        """
        :param str category: Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        :param str description: A short description of the model.
        :param str key: Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
               * useCaseType
               * libraryName
               * libraryVersion
               * estimatorClass
               * hyperParameters
               * testartifactresults
        :param str value: Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        GetModelsModelDefinedMetadataListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            description=description,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[str] = None,
             description: Optional[str] = None,
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if category is None:
            raise TypeError("Missing 'category' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("category", category)
        _setter("description", description)
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Category of model metadata which should be null for defined metadata.For custom metadata is should be one of the following values "Performance,Training Profile,Training and Validation Datasets,Training Environment,other".
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the model.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key of the model Metadata. The key can either be user defined or Oracle Cloud Infrastructure defined. List of Oracle Cloud Infrastructure defined keys:
        * useCaseType
        * libraryName
        * libraryVersion
        * estimatorClass
        * hyperParameters
        * testartifactresults
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Allowed values for useCaseType: binary_classification, regression, multinomial_classification, clustering, recommender, dimensionality_reduction/representation, time_series_forecasting, anomaly_detection, topic_modeling, ner, sentiment_analysis, image_classification, object_localization, other
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 notebook_session_shape_config_details: Sequence['outputs.GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult'],
                 private_endpoint_id: str,
                 shape: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param Sequence['GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailArgs'] notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        GetNotebookSessionNotebookSessionConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            notebook_session_shape_config_details=notebook_session_shape_config_details,
            private_endpoint_id=private_endpoint_id,
            shape=shape,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             notebook_session_shape_config_details: Optional[Sequence['outputs.GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']] = None,
             private_endpoint_id: Optional[str] = None,
             shape: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if notebook_session_shape_config_details is None and 'notebookSessionShapeConfigDetails' in kwargs:
            notebook_session_shape_config_details = kwargs['notebookSessionShapeConfigDetails']
        if notebook_session_shape_config_details is None:
            raise TypeError("Missing 'notebook_session_shape_config_details' argument")
        if private_endpoint_id is None and 'privateEndpointId' in kwargs:
            private_endpoint_id = kwargs['privateEndpointId']
        if private_endpoint_id is None:
            raise TypeError("Missing 'private_endpoint_id' argument")
        if shape is None:
            raise TypeError("Missing 'shape' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("notebook_session_shape_config_details", notebook_session_shape_config_details)
        _setter("private_endpoint_id", private_endpoint_id)
        _setter("shape", shape)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Sequence['outputs.GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']:
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: The total amount of memory available to the notebook session instance, in gigabytes.
        :param float ocpus: The total number of OCPUs available to the notebook session instance.
        """
        GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 notebook_session_shape_config_details: Sequence['outputs.GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult'],
                 private_endpoint_id: str,
                 shape: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param Sequence['GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailArgs'] notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        GetNotebookSessionNotebookSessionConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            notebook_session_shape_config_details=notebook_session_shape_config_details,
            private_endpoint_id=private_endpoint_id,
            shape=shape,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             notebook_session_shape_config_details: Optional[Sequence['outputs.GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']] = None,
             private_endpoint_id: Optional[str] = None,
             shape: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if notebook_session_shape_config_details is None and 'notebookSessionShapeConfigDetails' in kwargs:
            notebook_session_shape_config_details = kwargs['notebookSessionShapeConfigDetails']
        if notebook_session_shape_config_details is None:
            raise TypeError("Missing 'notebook_session_shape_config_details' argument")
        if private_endpoint_id is None and 'privateEndpointId' in kwargs:
            private_endpoint_id = kwargs['privateEndpointId']
        if private_endpoint_id is None:
            raise TypeError("Missing 'private_endpoint_id' argument")
        if shape is None:
            raise TypeError("Missing 'shape' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("notebook_session_shape_config_details", notebook_session_shape_config_details)
        _setter("private_endpoint_id", private_endpoint_id)
        _setter("shape", shape)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Sequence['outputs.GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']:
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: The total amount of memory available to the notebook session instance, in gigabytes.
        :param float ocpus: The total number of OCPUs available to the notebook session instance.
        """
        GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionNotebookSessionRuntimeConfigDetailResult(dict):
    def __init__(__self__, *,
                 custom_environment_variables: Mapping[str, Any],
                 notebook_session_git_config_details: Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']):
        """
        :param Mapping[str, Any] custom_environment_variables: Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        :param Sequence['GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailArgs'] notebook_session_git_config_details: Git configuration Details.
        """
        GetNotebookSessionNotebookSessionRuntimeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_environment_variables=custom_environment_variables,
            notebook_session_git_config_details=notebook_session_git_config_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_environment_variables: Optional[Mapping[str, Any]] = None,
             notebook_session_git_config_details: Optional[Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if custom_environment_variables is None and 'customEnvironmentVariables' in kwargs:
            custom_environment_variables = kwargs['customEnvironmentVariables']
        if custom_environment_variables is None:
            raise TypeError("Missing 'custom_environment_variables' argument")
        if notebook_session_git_config_details is None and 'notebookSessionGitConfigDetails' in kwargs:
            notebook_session_git_config_details = kwargs['notebookSessionGitConfigDetails']
        if notebook_session_git_config_details is None:
            raise TypeError("Missing 'notebook_session_git_config_details' argument")

        _setter("custom_environment_variables", custom_environment_variables)
        _setter("notebook_session_git_config_details", notebook_session_git_config_details)

    @property
    @pulumi.getter(name="customEnvironmentVariables")
    def custom_environment_variables(self) -> Mapping[str, Any]:
        """
        Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        """
        return pulumi.get(self, "custom_environment_variables")

    @property
    @pulumi.getter(name="notebookSessionGitConfigDetails")
    def notebook_session_git_config_details(self) -> Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']:
        """
        Git configuration Details.
        """
        return pulumi.get(self, "notebook_session_git_config_details")


@pulumi.output_type
class GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult(dict):
    def __init__(__self__, *,
                 notebook_session_git_repo_config_collections: Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']):
        """
        :param Sequence['GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionArgs'] notebook_session_git_repo_config_collections: A collection of Git repository configurations.
        """
        GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notebook_session_git_repo_config_collections=notebook_session_git_repo_config_collections,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notebook_session_git_repo_config_collections: Optional[Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if notebook_session_git_repo_config_collections is None and 'notebookSessionGitRepoConfigCollections' in kwargs:
            notebook_session_git_repo_config_collections = kwargs['notebookSessionGitRepoConfigCollections']
        if notebook_session_git_repo_config_collections is None:
            raise TypeError("Missing 'notebook_session_git_repo_config_collections' argument")

        _setter("notebook_session_git_repo_config_collections", notebook_session_git_repo_config_collections)

    @property
    @pulumi.getter(name="notebookSessionGitRepoConfigCollections")
    def notebook_session_git_repo_config_collections(self) -> Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']:
        """
        A collection of Git repository configurations.
        """
        return pulumi.get(self, "notebook_session_git_repo_config_collections")


@pulumi.output_type
class GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The repository URL
        """
        GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if url is None:
            raise TypeError("Missing 'url' argument")

        _setter("url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The repository URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 destination_directory_name: str,
                 destination_path: str,
                 export_id: str,
                 mount_target_id: str,
                 namespace: str,
                 prefix: str,
                 storage_type: str):
        """
        :param str bucket: The object storage bucket
        :param str destination_directory_name: The local directory name to be mounted
        :param str destination_path: The local path of the mounted directory, excluding directory name.
        :param str export_id: OCID of the export
        :param str mount_target_id: OCID of the mount target
        :param str namespace: The object storage namespace
        :param str prefix: Prefix in the bucket to mount
        :param str storage_type: The type of storage.
        """
        GetNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            destination_directory_name=destination_directory_name,
            destination_path=destination_path,
            export_id=export_id,
            mount_target_id=mount_target_id,
            namespace=namespace,
            prefix=prefix,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             destination_directory_name: Optional[str] = None,
             destination_path: Optional[str] = None,
             export_id: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             namespace: Optional[str] = None,
             prefix: Optional[str] = None,
             storage_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if destination_directory_name is None and 'destinationDirectoryName' in kwargs:
            destination_directory_name = kwargs['destinationDirectoryName']
        if destination_directory_name is None:
            raise TypeError("Missing 'destination_directory_name' argument")
        if destination_path is None and 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if destination_path is None:
            raise TypeError("Missing 'destination_path' argument")
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if export_id is None:
            raise TypeError("Missing 'export_id' argument")
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if prefix is None:
            raise TypeError("Missing 'prefix' argument")
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if storage_type is None:
            raise TypeError("Missing 'storage_type' argument")

        _setter("bucket", bucket)
        _setter("destination_directory_name", destination_directory_name)
        _setter("destination_path", destination_path)
        _setter("export_id", export_id)
        _setter("mount_target_id", mount_target_id)
        _setter("namespace", namespace)
        _setter("prefix", prefix)
        _setter("storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetNotebookSessionShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the notebook session shape.
        """
        GetNotebookSessionShapesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the notebook session shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNotebookSessionShapesNotebookSessionShapeResult(dict):
    def __init__(__self__, *,
                 core_count: int,
                 memory_in_gbs: int,
                 name: str,
                 shape_series: str):
        """
        :param int core_count: The number of cores associated with this notebook session shape.
        :param int memory_in_gbs: The amount of memory in GBs associated with this notebook session shape.
        :param str name: The name of the notebook session shape.
        :param str shape_series: The family that the compute shape belongs to.
        """
        GetNotebookSessionShapesNotebookSessionShapeResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            core_count=core_count,
            memory_in_gbs=memory_in_gbs,
            name=name,
            shape_series=shape_series,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             core_count: Optional[int] = None,
             memory_in_gbs: Optional[int] = None,
             name: Optional[str] = None,
             shape_series: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if core_count is None and 'coreCount' in kwargs:
            core_count = kwargs['coreCount']
        if core_count is None:
            raise TypeError("Missing 'core_count' argument")
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")
        if shape_series is None and 'shapeSeries' in kwargs:
            shape_series = kwargs['shapeSeries']
        if shape_series is None:
            raise TypeError("Missing 'shape_series' argument")

        _setter("core_count", core_count)
        _setter("memory_in_gbs", memory_in_gbs)
        _setter("name", name)
        _setter("shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> int:
        """
        The number of cores associated with this notebook session shape.
        """
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> int:
        """
        The amount of memory in GBs associated with this notebook session shape.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the notebook session shape.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> str:
        """
        The family that the compute shape belongs to.
        """
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetNotebookSessionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetNotebookSessionsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 notebook_session_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult'],
                 notebook_session_configuration_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult'],
                 notebook_session_runtime_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult'],
                 notebook_session_storage_mount_configuration_details_lists: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult'],
                 notebook_session_url: str,
                 project_id: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str lifecycle_details: Details about the state of the notebook session.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailArgs'] notebook_session_config_details: Details for the notebook session configuration.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailArgs'] notebook_session_configuration_details: Details for the notebook session configuration.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailArgs'] notebook_session_runtime_config_details: Notebook Session runtime configuration details.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListArgs'] notebook_session_storage_mount_configuration_details_lists: Collection of NotebookSessionStorageMountConfigurationDetails.
        :param str notebook_session_url: The URL to interact with the notebook session.
        :param str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        GetNotebookSessionsNotebookSessionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            created_by=created_by,
            defined_tags=defined_tags,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            notebook_session_config_details=notebook_session_config_details,
            notebook_session_configuration_details=notebook_session_configuration_details,
            notebook_session_runtime_config_details=notebook_session_runtime_config_details,
            notebook_session_storage_mount_configuration_details_lists=notebook_session_storage_mount_configuration_details_lists,
            notebook_session_url=notebook_session_url,
            project_id=project_id,
            state=state,
            time_created=time_created,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             created_by: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             display_name: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             lifecycle_details: Optional[str] = None,
             notebook_session_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult']] = None,
             notebook_session_configuration_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult']] = None,
             notebook_session_runtime_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult']] = None,
             notebook_session_storage_mount_configuration_details_lists: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult']] = None,
             notebook_session_url: Optional[str] = None,
             project_id: Optional[str] = None,
             state: Optional[str] = None,
             time_created: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if notebook_session_config_details is None and 'notebookSessionConfigDetails' in kwargs:
            notebook_session_config_details = kwargs['notebookSessionConfigDetails']
        if notebook_session_config_details is None:
            raise TypeError("Missing 'notebook_session_config_details' argument")
        if notebook_session_configuration_details is None and 'notebookSessionConfigurationDetails' in kwargs:
            notebook_session_configuration_details = kwargs['notebookSessionConfigurationDetails']
        if notebook_session_configuration_details is None:
            raise TypeError("Missing 'notebook_session_configuration_details' argument")
        if notebook_session_runtime_config_details is None and 'notebookSessionRuntimeConfigDetails' in kwargs:
            notebook_session_runtime_config_details = kwargs['notebookSessionRuntimeConfigDetails']
        if notebook_session_runtime_config_details is None:
            raise TypeError("Missing 'notebook_session_runtime_config_details' argument")
        if notebook_session_storage_mount_configuration_details_lists is None and 'notebookSessionStorageMountConfigurationDetailsLists' in kwargs:
            notebook_session_storage_mount_configuration_details_lists = kwargs['notebookSessionStorageMountConfigurationDetailsLists']
        if notebook_session_storage_mount_configuration_details_lists is None:
            raise TypeError("Missing 'notebook_session_storage_mount_configuration_details_lists' argument")
        if notebook_session_url is None and 'notebookSessionUrl' in kwargs:
            notebook_session_url = kwargs['notebookSessionUrl']
        if notebook_session_url is None:
            raise TypeError("Missing 'notebook_session_url' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")

        _setter("compartment_id", compartment_id)
        _setter("created_by", created_by)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("notebook_session_config_details", notebook_session_config_details)
        _setter("notebook_session_configuration_details", notebook_session_configuration_details)
        _setter("notebook_session_runtime_config_details", notebook_session_runtime_config_details)
        _setter("notebook_session_storage_mount_configuration_details_lists", notebook_session_storage_mount_configuration_details_lists)
        _setter("notebook_session_url", notebook_session_url)
        _setter("project_id", project_id)
        _setter("state", state)
        _setter("time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details about the state of the notebook session.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="notebookSessionConfigDetails")
    def notebook_session_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult']:
        """
        Details for the notebook session configuration.
        """
        return pulumi.get(self, "notebook_session_config_details")

    @property
    @pulumi.getter(name="notebookSessionConfigurationDetails")
    def notebook_session_configuration_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult']:
        """
        Details for the notebook session configuration.
        """
        return pulumi.get(self, "notebook_session_configuration_details")

    @property
    @pulumi.getter(name="notebookSessionRuntimeConfigDetails")
    def notebook_session_runtime_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult']:
        """
        Notebook Session runtime configuration details.
        """
        return pulumi.get(self, "notebook_session_runtime_config_details")

    @property
    @pulumi.getter(name="notebookSessionStorageMountConfigurationDetailsLists")
    def notebook_session_storage_mount_configuration_details_lists(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult']:
        """
        Collection of NotebookSessionStorageMountConfigurationDetails.
        """
        return pulumi.get(self, "notebook_session_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="notebookSessionUrl")
    def notebook_session_url(self) -> str:
        """
        The URL to interact with the notebook session.
        """
        return pulumi.get(self, "notebook_session_url")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 notebook_session_shape_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult'],
                 private_endpoint_id: str,
                 shape: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailArgs'] notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            notebook_session_shape_config_details=notebook_session_shape_config_details,
            private_endpoint_id=private_endpoint_id,
            shape=shape,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             notebook_session_shape_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']] = None,
             private_endpoint_id: Optional[str] = None,
             shape: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if notebook_session_shape_config_details is None and 'notebookSessionShapeConfigDetails' in kwargs:
            notebook_session_shape_config_details = kwargs['notebookSessionShapeConfigDetails']
        if notebook_session_shape_config_details is None:
            raise TypeError("Missing 'notebook_session_shape_config_details' argument")
        if private_endpoint_id is None and 'privateEndpointId' in kwargs:
            private_endpoint_id = kwargs['privateEndpointId']
        if private_endpoint_id is None:
            raise TypeError("Missing 'private_endpoint_id' argument")
        if shape is None:
            raise TypeError("Missing 'shape' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("notebook_session_shape_config_details", notebook_session_shape_config_details)
        _setter("private_endpoint_id", private_endpoint_id)
        _setter("shape", shape)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']:
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: The total amount of memory available to the notebook session instance, in gigabytes.
        :param float ocpus: The total number of OCPUs available to the notebook session instance.
        """
        GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 notebook_session_shape_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult'],
                 private_endpoint_id: str,
                 shape: str,
                 subnet_id: str):
        """
        :param int block_storage_size_in_gbs: A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailArgs'] notebook_session_shape_config_details: Details for the notebook session shape configuration.
        :param str private_endpoint_id: The OCID of a Data Science private endpoint.
        :param str shape: The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        :param str subnet_id: A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            notebook_session_shape_config_details=notebook_session_shape_config_details,
            private_endpoint_id=private_endpoint_id,
            shape=shape,
            subnet_id=subnet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             notebook_session_shape_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']] = None,
             private_endpoint_id: Optional[str] = None,
             shape: Optional[str] = None,
             subnet_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if notebook_session_shape_config_details is None and 'notebookSessionShapeConfigDetails' in kwargs:
            notebook_session_shape_config_details = kwargs['notebookSessionShapeConfigDetails']
        if notebook_session_shape_config_details is None:
            raise TypeError("Missing 'notebook_session_shape_config_details' argument")
        if private_endpoint_id is None and 'privateEndpointId' in kwargs:
            private_endpoint_id = kwargs['privateEndpointId']
        if private_endpoint_id is None:
            raise TypeError("Missing 'private_endpoint_id' argument")
        if shape is None:
            raise TypeError("Missing 'shape' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("notebook_session_shape_config_details", notebook_session_shape_config_details)
        _setter("private_endpoint_id", private_endpoint_id)
        _setter("shape", shape)
        _setter("subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        A notebook session instance is provided with a block storage volume. This specifies the size of the volume in GBs.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']:
        """
        Details for the notebook session shape configuration.
        """
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> str:
        """
        The OCID of a Data Science private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> str:
        """
        The shape used to launch the notebook session compute instance.  The list of available shapes in a given compartment can be retrieved using the `ListNotebookSessionShapes` endpoint.
        """
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        A notebook session instance is provided with a VNIC for network access.  This specifies the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet to create a VNIC in.  The subnet should be in a VCN with a NAT gateway for egress to the internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: The total amount of memory available to the notebook session instance, in gigabytes.
        :param float ocpus: The total number of OCPUs available to the notebook session instance.
        """
        GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        The total amount of memory available to the notebook session instance, in gigabytes.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        The total number of OCPUs available to the notebook session instance.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult(dict):
    def __init__(__self__, *,
                 custom_environment_variables: Mapping[str, Any],
                 notebook_session_git_config_details: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']):
        """
        :param Mapping[str, Any] custom_environment_variables: Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailArgs'] notebook_session_git_config_details: Git configuration Details.
        """
        GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_environment_variables=custom_environment_variables,
            notebook_session_git_config_details=notebook_session_git_config_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_environment_variables: Optional[Mapping[str, Any]] = None,
             notebook_session_git_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if custom_environment_variables is None and 'customEnvironmentVariables' in kwargs:
            custom_environment_variables = kwargs['customEnvironmentVariables']
        if custom_environment_variables is None:
            raise TypeError("Missing 'custom_environment_variables' argument")
        if notebook_session_git_config_details is None and 'notebookSessionGitConfigDetails' in kwargs:
            notebook_session_git_config_details = kwargs['notebookSessionGitConfigDetails']
        if notebook_session_git_config_details is None:
            raise TypeError("Missing 'notebook_session_git_config_details' argument")

        _setter("custom_environment_variables", custom_environment_variables)
        _setter("notebook_session_git_config_details", notebook_session_git_config_details)

    @property
    @pulumi.getter(name="customEnvironmentVariables")
    def custom_environment_variables(self) -> Mapping[str, Any]:
        """
        Custom environment variables for Notebook Session. These key-value pairs will be available for customers in Notebook Sessions.
        """
        return pulumi.get(self, "custom_environment_variables")

    @property
    @pulumi.getter(name="notebookSessionGitConfigDetails")
    def notebook_session_git_config_details(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']:
        """
        Git configuration Details.
        """
        return pulumi.get(self, "notebook_session_git_config_details")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult(dict):
    def __init__(__self__, *,
                 notebook_session_git_repo_config_collections: Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']):
        """
        :param Sequence['GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionArgs'] notebook_session_git_repo_config_collections: A collection of Git repository configurations.
        """
        GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            notebook_session_git_repo_config_collections=notebook_session_git_repo_config_collections,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             notebook_session_git_repo_config_collections: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if notebook_session_git_repo_config_collections is None and 'notebookSessionGitRepoConfigCollections' in kwargs:
            notebook_session_git_repo_config_collections = kwargs['notebookSessionGitRepoConfigCollections']
        if notebook_session_git_repo_config_collections is None:
            raise TypeError("Missing 'notebook_session_git_repo_config_collections' argument")

        _setter("notebook_session_git_repo_config_collections", notebook_session_git_repo_config_collections)

    @property
    @pulumi.getter(name="notebookSessionGitRepoConfigCollections")
    def notebook_session_git_repo_config_collections(self) -> Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']:
        """
        A collection of Git repository configurations.
        """
        return pulumi.get(self, "notebook_session_git_repo_config_collections")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult(dict):
    def __init__(__self__, *,
                 url: str):
        """
        :param str url: The repository URL
        """
        GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if url is None:
            raise TypeError("Missing 'url' argument")

        _setter("url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The repository URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 destination_directory_name: str,
                 destination_path: str,
                 export_id: str,
                 mount_target_id: str,
                 namespace: str,
                 prefix: str,
                 storage_type: str):
        """
        :param str bucket: The object storage bucket
        :param str destination_directory_name: The local directory name to be mounted
        :param str destination_path: The local path of the mounted directory, excluding directory name.
        :param str export_id: OCID of the export
        :param str mount_target_id: OCID of the mount target
        :param str namespace: The object storage namespace
        :param str prefix: Prefix in the bucket to mount
        :param str storage_type: The type of storage.
        """
        GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            destination_directory_name=destination_directory_name,
            destination_path=destination_path,
            export_id=export_id,
            mount_target_id=mount_target_id,
            namespace=namespace,
            prefix=prefix,
            storage_type=storage_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             destination_directory_name: Optional[str] = None,
             destination_path: Optional[str] = None,
             export_id: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             namespace: Optional[str] = None,
             prefix: Optional[str] = None,
             storage_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if destination_directory_name is None and 'destinationDirectoryName' in kwargs:
            destination_directory_name = kwargs['destinationDirectoryName']
        if destination_directory_name is None:
            raise TypeError("Missing 'destination_directory_name' argument")
        if destination_path is None and 'destinationPath' in kwargs:
            destination_path = kwargs['destinationPath']
        if destination_path is None:
            raise TypeError("Missing 'destination_path' argument")
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if export_id is None:
            raise TypeError("Missing 'export_id' argument")
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if prefix is None:
            raise TypeError("Missing 'prefix' argument")
        if storage_type is None and 'storageType' in kwargs:
            storage_type = kwargs['storageType']
        if storage_type is None:
            raise TypeError("Missing 'storage_type' argument")

        _setter("bucket", bucket)
        _setter("destination_directory_name", destination_directory_name)
        _setter("destination_path", destination_path)
        _setter("export_id", export_id)
        _setter("mount_target_id", mount_target_id)
        _setter("namespace", namespace)
        _setter("prefix", prefix)
        _setter("storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The object storage bucket
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        """
        The local directory name to be mounted
        """
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> str:
        """
        The local path of the mounted directory, excluding directory name.
        """
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> str:
        """
        OCID of the export
        """
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        OCID of the mount target
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The object storage namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        """
        Prefix in the bucket to mount
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The type of storage.
        """
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetPipelineConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str,
                 type: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param str type: The type of pipeline.
        """
        GetPipelineConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        _setter("type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 shape_config_details: Sequence['outputs.GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult'],
                 shape_name: str):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param Sequence['GetPipelineInfrastructureConfigurationDetailShapeConfigDetailArgs'] shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        """
        GetPipelineInfrastructureConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            shape_config_details=shape_config_details,
            shape_name=shape_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             shape_config_details: Optional[Sequence['outputs.GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']] = None,
             shape_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if shape_config_details is None and 'shapeConfigDetails' in kwargs:
            shape_config_details = kwargs['shapeConfigDetails']
        if shape_config_details is None:
            raise TypeError("Missing 'shape_config_details' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("shape_config_details", shape_config_details)
        _setter("shape_name", shape_name)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Sequence['outputs.GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: bool,
                 enable_logging: bool,
                 log_group_id: str,
                 log_id: str):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param bool enable_logging: If customer logging is enabled for pipeline.
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        GetPipelineLogConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_auto_log_creation is None:
            raise TypeError("Missing 'enable_auto_log_creation' argument")
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if enable_logging is None:
            raise TypeError("Missing 'enable_logging' argument")
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("enable_auto_log_creation", enable_auto_log_creation)
        _setter("enable_logging", enable_logging)
        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str,
                 type: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param str type: The type of pipeline.
        """
        GetPipelineRunConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        _setter("type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str,
                 type: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param str type: The type of pipeline.
        """
        GetPipelineRunConfigurationOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        _setter("type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: bool,
                 enable_logging: bool,
                 log_group_id: str,
                 log_id: str):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param bool enable_logging: If customer logging is enabled for pipeline.
        :param str log_group_id: The log group id for where log objects will be for pipeline runs.
        :param str log_id: The log id of the log object the pipeline run logs will be shipped to.
        """
        GetPipelineRunLogConfigurationOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_auto_log_creation is None:
            raise TypeError("Missing 'enable_auto_log_creation' argument")
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if enable_logging is None:
            raise TypeError("Missing 'enable_logging' argument")
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("enable_auto_log_creation", enable_auto_log_creation)
        _setter("enable_logging", enable_logging)
        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects will be for pipeline runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id of the log object the pipeline run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The log group id for where log objects will be for pipeline runs.
        :param str log_id: The log id of the log object the pipeline run logs will be shipped to.
        """
        GetPipelineRunLogDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects will be for pipeline runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id of the log object the pipeline run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailResult(dict):
    def __init__(__self__, *,
                 step_configuration_details: Sequence['outputs.GetPipelineRunStepOverrideDetailStepConfigurationDetailResult'],
                 step_name: str):
        """
        :param Sequence['GetPipelineRunStepOverrideDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param str step_name: The name of the step.
        """
        GetPipelineRunStepOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            step_configuration_details=step_configuration_details,
            step_name=step_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             step_configuration_details: Optional[Sequence['outputs.GetPipelineRunStepOverrideDetailStepConfigurationDetailResult']] = None,
             step_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if step_configuration_details is None and 'stepConfigurationDetails' in kwargs:
            step_configuration_details = kwargs['stepConfigurationDetails']
        if step_configuration_details is None:
            raise TypeError("Missing 'step_configuration_details' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")

        _setter("step_configuration_details", step_configuration_details)
        _setter("step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetPipelineRunStepOverrideDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        GetPipelineRunStepOverrideDetailStepConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelineRunStepRunResult(dict):
    def __init__(__self__, *,
                 job_run_id: str,
                 lifecycle_details: str,
                 state: str,
                 step_name: str,
                 step_type: str,
                 time_finished: str,
                 time_started: str):
        """
        :param str job_run_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        :param str lifecycle_details: Details of the state of the step run.
        :param str state: The state of the step run.
        :param str step_name: The name of the step.
        :param str step_type: The type of step.
        :param str time_finished: The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str time_started: The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        GetPipelineRunStepRunResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_run_id=job_run_id,
            lifecycle_details=lifecycle_details,
            state=state,
            step_name=step_name,
            step_type=step_type,
            time_finished=time_finished,
            time_started=time_started,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_run_id: Optional[str] = None,
             lifecycle_details: Optional[str] = None,
             state: Optional[str] = None,
             step_name: Optional[str] = None,
             step_type: Optional[str] = None,
             time_finished: Optional[str] = None,
             time_started: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if job_run_id is None and 'jobRunId' in kwargs:
            job_run_id = kwargs['jobRunId']
        if job_run_id is None:
            raise TypeError("Missing 'job_run_id' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']
        if step_type is None:
            raise TypeError("Missing 'step_type' argument")
        if time_finished is None and 'timeFinished' in kwargs:
            time_finished = kwargs['timeFinished']
        if time_finished is None:
            raise TypeError("Missing 'time_finished' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")

        _setter("job_run_id", job_run_id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("state", state)
        _setter("step_name", step_name)
        _setter("step_type", step_type)
        _setter("time_finished", time_finished)
        _setter("time_started", time_started)

    @property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        """
        return pulumi.get(self, "job_run_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details of the state of the step run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the step run.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> str:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        """
        The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetPipelineRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetPipelineRunsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelineRunsPipelineRunResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 configuration_details: Sequence['outputs.GetPipelineRunsPipelineRunConfigurationDetailResult'],
                 configuration_override_details: Sequence['outputs.GetPipelineRunsPipelineRunConfigurationOverrideDetailResult'],
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 delete_related_job_runs: bool,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 log_configuration_override_details: Sequence['outputs.GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult'],
                 log_details: Sequence['outputs.GetPipelineRunsPipelineRunLogDetailResult'],
                 pipeline_id: str,
                 project_id: str,
                 state: str,
                 step_override_details: Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailResult'],
                 step_runs: Sequence['outputs.GetPipelineRunsPipelineRunStepRunResult'],
                 system_tags: Mapping[str, Any],
                 time_accepted: str,
                 time_finished: str,
                 time_started: str,
                 time_updated: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetPipelineRunsPipelineRunConfigurationDetailArgs'] configuration_details: The configuration details of a pipeline.
        :param Sequence['GetPipelineRunsPipelineRunConfigurationOverrideDetailArgs'] configuration_override_details: The configuration details of a pipeline.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str lifecycle_details: Details of the state of the step run.
        :param Sequence['GetPipelineRunsPipelineRunLogConfigurationOverrideDetailArgs'] log_configuration_override_details: The pipeline log configuration details.
        :param Sequence['GetPipelineRunsPipelineRunLogDetailArgs'] log_details: Customer logging details for pipeline run.
        :param str pipeline_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline.
        :param str project_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the pipeline run with.
        :param str state: The current state of the PipelineRun.
        :param Sequence['GetPipelineRunsPipelineRunStepOverrideDetailArgs'] step_override_details: Array of step override details. Only Step Configuration is allowed to be overridden.
        :param Sequence['GetPipelineRunsPipelineRunStepRunArgs'] step_runs: Array of StepRun object for each step.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_accepted: The date and time the pipeline run was accepted in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str time_finished: The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str time_started: The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str time_updated: The date and time the pipeline run was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        GetPipelineRunsPipelineRunResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            configuration_details=configuration_details,
            configuration_override_details=configuration_override_details,
            created_by=created_by,
            defined_tags=defined_tags,
            delete_related_job_runs=delete_related_job_runs,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            log_configuration_override_details=log_configuration_override_details,
            log_details=log_details,
            pipeline_id=pipeline_id,
            project_id=project_id,
            state=state,
            step_override_details=step_override_details,
            step_runs=step_runs,
            system_tags=system_tags,
            time_accepted=time_accepted,
            time_finished=time_finished,
            time_started=time_started,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             configuration_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunConfigurationDetailResult']] = None,
             configuration_override_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunConfigurationOverrideDetailResult']] = None,
             created_by: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             delete_related_job_runs: Optional[bool] = None,
             display_name: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             lifecycle_details: Optional[str] = None,
             log_configuration_override_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult']] = None,
             log_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunLogDetailResult']] = None,
             pipeline_id: Optional[str] = None,
             project_id: Optional[str] = None,
             state: Optional[str] = None,
             step_override_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailResult']] = None,
             step_runs: Optional[Sequence['outputs.GetPipelineRunsPipelineRunStepRunResult']] = None,
             system_tags: Optional[Mapping[str, Any]] = None,
             time_accepted: Optional[str] = None,
             time_finished: Optional[str] = None,
             time_started: Optional[str] = None,
             time_updated: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if configuration_details is None and 'configurationDetails' in kwargs:
            configuration_details = kwargs['configurationDetails']
        if configuration_details is None:
            raise TypeError("Missing 'configuration_details' argument")
        if configuration_override_details is None and 'configurationOverrideDetails' in kwargs:
            configuration_override_details = kwargs['configurationOverrideDetails']
        if configuration_override_details is None:
            raise TypeError("Missing 'configuration_override_details' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if delete_related_job_runs is None and 'deleteRelatedJobRuns' in kwargs:
            delete_related_job_runs = kwargs['deleteRelatedJobRuns']
        if delete_related_job_runs is None:
            raise TypeError("Missing 'delete_related_job_runs' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if log_configuration_override_details is None and 'logConfigurationOverrideDetails' in kwargs:
            log_configuration_override_details = kwargs['logConfigurationOverrideDetails']
        if log_configuration_override_details is None:
            raise TypeError("Missing 'log_configuration_override_details' argument")
        if log_details is None and 'logDetails' in kwargs:
            log_details = kwargs['logDetails']
        if log_details is None:
            raise TypeError("Missing 'log_details' argument")
        if pipeline_id is None and 'pipelineId' in kwargs:
            pipeline_id = kwargs['pipelineId']
        if pipeline_id is None:
            raise TypeError("Missing 'pipeline_id' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if step_override_details is None and 'stepOverrideDetails' in kwargs:
            step_override_details = kwargs['stepOverrideDetails']
        if step_override_details is None:
            raise TypeError("Missing 'step_override_details' argument")
        if step_runs is None and 'stepRuns' in kwargs:
            step_runs = kwargs['stepRuns']
        if step_runs is None:
            raise TypeError("Missing 'step_runs' argument")
        if system_tags is None and 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if system_tags is None:
            raise TypeError("Missing 'system_tags' argument")
        if time_accepted is None and 'timeAccepted' in kwargs:
            time_accepted = kwargs['timeAccepted']
        if time_accepted is None:
            raise TypeError("Missing 'time_accepted' argument")
        if time_finished is None and 'timeFinished' in kwargs:
            time_finished = kwargs['timeFinished']
        if time_finished is None:
            raise TypeError("Missing 'time_finished' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")
        if time_updated is None and 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if time_updated is None:
            raise TypeError("Missing 'time_updated' argument")

        _setter("compartment_id", compartment_id)
        _setter("configuration_details", configuration_details)
        _setter("configuration_override_details", configuration_override_details)
        _setter("created_by", created_by)
        _setter("defined_tags", defined_tags)
        _setter("delete_related_job_runs", delete_related_job_runs)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("log_configuration_override_details", log_configuration_override_details)
        _setter("log_details", log_details)
        _setter("pipeline_id", pipeline_id)
        _setter("project_id", project_id)
        _setter("state", state)
        _setter("step_override_details", step_override_details)
        _setter("step_runs", step_runs)
        _setter("system_tags", system_tags)
        _setter("time_accepted", time_accepted)
        _setter("time_finished", time_finished)
        _setter("time_started", time_started)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationDetails")
    def configuration_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunConfigurationDetailResult']:
        """
        The configuration details of a pipeline.
        """
        return pulumi.get(self, "configuration_details")

    @property
    @pulumi.getter(name="configurationOverrideDetails")
    def configuration_override_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunConfigurationOverrideDetailResult']:
        """
        The configuration details of a pipeline.
        """
        return pulumi.get(self, "configuration_override_details")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deleteRelatedJobRuns")
    def delete_related_job_runs(self) -> bool:
        return pulumi.get(self, "delete_related_job_runs")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details of the state of the step run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logConfigurationOverrideDetails")
    def log_configuration_override_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult']:
        """
        The pipeline log configuration details.
        """
        return pulumi.get(self, "log_configuration_override_details")

    @property
    @pulumi.getter(name="logDetails")
    def log_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunLogDetailResult']:
        """
        Customer logging details for pipeline run.
        """
        return pulumi.get(self, "log_details")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the pipeline.
        """
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project to associate the pipeline run with.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the PipelineRun.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepOverrideDetails")
    def step_override_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailResult']:
        """
        Array of step override details. Only Step Configuration is allowed to be overridden.
        """
        return pulumi.get(self, "step_override_details")

    @property
    @pulumi.getter(name="stepRuns")
    def step_runs(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepRunResult']:
        """
        Array of StepRun object for each step.
        """
        return pulumi.get(self, "step_runs")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> str:
        """
        The date and time the pipeline run was accepted in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        """
        The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the pipeline run was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPipelineRunsPipelineRunConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str,
                 type: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param str type: The type of pipeline.
        """
        GetPipelineRunsPipelineRunConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        _setter("type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunsPipelineRunConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str,
                 type: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param str type: The type of pipeline.
        """
        GetPipelineRunsPipelineRunConfigurationOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        _setter("type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: bool,
                 enable_logging: bool,
                 log_group_id: str,
                 log_id: str):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param bool enable_logging: If customer logging is enabled for pipeline.
        :param str log_group_id: The log group id for where log objects will be for pipeline runs.
        :param str log_id: The log id of the log object the pipeline run logs will be shipped to.
        """
        GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_auto_log_creation is None:
            raise TypeError("Missing 'enable_auto_log_creation' argument")
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if enable_logging is None:
            raise TypeError("Missing 'enable_logging' argument")
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("enable_auto_log_creation", enable_auto_log_creation)
        _setter("enable_logging", enable_logging)
        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects will be for pipeline runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id of the log object the pipeline run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunsPipelineRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        """
        :param str log_group_id: The log group id for where log objects will be for pipeline runs.
        :param str log_id: The log id of the log object the pipeline run logs will be shipped to.
        """
        GetPipelineRunsPipelineRunLogDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The log group id for where log objects will be for pipeline runs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The log id of the log object the pipeline run logs will be shipped to.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailResult(dict):
    def __init__(__self__, *,
                 step_configuration_details: Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult'],
                 step_name: str):
        """
        :param Sequence['GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param str step_name: The name of the step.
        """
        GetPipelineRunsPipelineRunStepOverrideDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            step_configuration_details=step_configuration_details,
            step_name=step_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             step_configuration_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult']] = None,
             step_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if step_configuration_details is None and 'stepConfigurationDetails' in kwargs:
            step_configuration_details = kwargs['stepConfigurationDetails']
        if step_configuration_details is None:
            raise TypeError("Missing 'step_configuration_details' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")

        _setter("step_configuration_details", step_configuration_details)
        _setter("step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepRunResult(dict):
    def __init__(__self__, *,
                 job_run_id: str,
                 lifecycle_details: str,
                 state: str,
                 step_name: str,
                 step_type: str,
                 time_finished: str,
                 time_started: str):
        """
        :param str job_run_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        :param str lifecycle_details: Details of the state of the step run.
        :param str state: The current state of the PipelineRun.
        :param str step_name: The name of the step.
        :param str step_type: The type of step.
        :param str time_finished: The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        :param str time_started: The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        GetPipelineRunsPipelineRunStepRunResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            job_run_id=job_run_id,
            lifecycle_details=lifecycle_details,
            state=state,
            step_name=step_name,
            step_type=step_type,
            time_finished=time_finished,
            time_started=time_started,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             job_run_id: Optional[str] = None,
             lifecycle_details: Optional[str] = None,
             state: Optional[str] = None,
             step_name: Optional[str] = None,
             step_type: Optional[str] = None,
             time_finished: Optional[str] = None,
             time_started: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if job_run_id is None and 'jobRunId' in kwargs:
            job_run_id = kwargs['jobRunId']
        if job_run_id is None:
            raise TypeError("Missing 'job_run_id' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']
        if step_type is None:
            raise TypeError("Missing 'step_type' argument")
        if time_finished is None and 'timeFinished' in kwargs:
            time_finished = kwargs['timeFinished']
        if time_finished is None:
            raise TypeError("Missing 'time_finished' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")

        _setter("job_run_id", job_run_id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("state", state)
        _setter("step_name", step_name)
        _setter("step_type", step_type)
        _setter("time_finished", time_finished)
        _setter("time_started", time_started)

    @property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job run triggered for this step run.
        """
        return pulumi.get(self, "job_run_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details of the state of the step run.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the PipelineRun.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> str:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> str:
        """
        The date and time the pipeline run request was finished in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The date and time the pipeline run request was started in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetPipelineStepArtifactResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: str,
                 artifact_content_length: str,
                 artifact_content_md5: str,
                 artifact_last_modified: str,
                 pipeline_step_artifact: str,
                 step_name: str):
        """
        :param str step_name: The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        GetPipelineStepArtifactResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            artifact_content_disposition=artifact_content_disposition,
            artifact_content_length=artifact_content_length,
            artifact_content_md5=artifact_content_md5,
            artifact_last_modified=artifact_last_modified,
            pipeline_step_artifact=pipeline_step_artifact,
            step_name=step_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             artifact_content_disposition: Optional[str] = None,
             artifact_content_length: Optional[str] = None,
             artifact_content_md5: Optional[str] = None,
             artifact_last_modified: Optional[str] = None,
             pipeline_step_artifact: Optional[str] = None,
             step_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if artifact_content_disposition is None and 'artifactContentDisposition' in kwargs:
            artifact_content_disposition = kwargs['artifactContentDisposition']
        if artifact_content_disposition is None:
            raise TypeError("Missing 'artifact_content_disposition' argument")
        if artifact_content_length is None and 'artifactContentLength' in kwargs:
            artifact_content_length = kwargs['artifactContentLength']
        if artifact_content_length is None:
            raise TypeError("Missing 'artifact_content_length' argument")
        if artifact_content_md5 is None and 'artifactContentMd5' in kwargs:
            artifact_content_md5 = kwargs['artifactContentMd5']
        if artifact_content_md5 is None:
            raise TypeError("Missing 'artifact_content_md5' argument")
        if artifact_last_modified is None and 'artifactLastModified' in kwargs:
            artifact_last_modified = kwargs['artifactLastModified']
        if artifact_last_modified is None:
            raise TypeError("Missing 'artifact_last_modified' argument")
        if pipeline_step_artifact is None and 'pipelineStepArtifact' in kwargs:
            pipeline_step_artifact = kwargs['pipelineStepArtifact']
        if pipeline_step_artifact is None:
            raise TypeError("Missing 'pipeline_step_artifact' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")

        _setter("artifact_content_disposition", artifact_content_disposition)
        _setter("artifact_content_length", artifact_content_length)
        _setter("artifact_content_md5", artifact_content_md5)
        _setter("artifact_last_modified", artifact_last_modified)
        _setter("pipeline_step_artifact", pipeline_step_artifact)
        _setter("step_name", step_name)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> str:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> str:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> str:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="pipelineStepArtifact")
    def pipeline_step_artifact(self) -> str:
        return pulumi.get(self, "pipeline_step_artifact")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelineStepDetailResult(dict):
    def __init__(__self__, *,
                 depends_ons: Sequence[str],
                 description: str,
                 is_artifact_uploaded: bool,
                 job_id: str,
                 step_configuration_details: Sequence['outputs.GetPipelineStepDetailStepConfigurationDetailResult'],
                 step_infrastructure_configuration_details: Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailResult'],
                 step_name: str,
                 step_type: str):
        """
        :param Sequence[str] depends_ons: The list of step names this current step depends on for execution.
        :param str description: A short description of the step.
        :param bool is_artifact_uploaded: A flag to indicate whether the artifact has been uploaded for this step or not.
        :param str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        :param Sequence['GetPipelineStepDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param Sequence['GetPipelineStepDetailStepInfrastructureConfigurationDetailArgs'] step_infrastructure_configuration_details: The infrastructure configuration details of a pipeline or a step.
        :param str step_name: The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        :param str step_type: The type of step.
        """
        GetPipelineStepDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            depends_ons=depends_ons,
            description=description,
            is_artifact_uploaded=is_artifact_uploaded,
            job_id=job_id,
            step_configuration_details=step_configuration_details,
            step_infrastructure_configuration_details=step_infrastructure_configuration_details,
            step_name=step_name,
            step_type=step_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             depends_ons: Optional[Sequence[str]] = None,
             description: Optional[str] = None,
             is_artifact_uploaded: Optional[bool] = None,
             job_id: Optional[str] = None,
             step_configuration_details: Optional[Sequence['outputs.GetPipelineStepDetailStepConfigurationDetailResult']] = None,
             step_infrastructure_configuration_details: Optional[Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailResult']] = None,
             step_name: Optional[str] = None,
             step_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if depends_ons is None and 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if depends_ons is None:
            raise TypeError("Missing 'depends_ons' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if is_artifact_uploaded is None and 'isArtifactUploaded' in kwargs:
            is_artifact_uploaded = kwargs['isArtifactUploaded']
        if is_artifact_uploaded is None:
            raise TypeError("Missing 'is_artifact_uploaded' argument")
        if job_id is None and 'jobId' in kwargs:
            job_id = kwargs['jobId']
        if job_id is None:
            raise TypeError("Missing 'job_id' argument")
        if step_configuration_details is None and 'stepConfigurationDetails' in kwargs:
            step_configuration_details = kwargs['stepConfigurationDetails']
        if step_configuration_details is None:
            raise TypeError("Missing 'step_configuration_details' argument")
        if step_infrastructure_configuration_details is None and 'stepInfrastructureConfigurationDetails' in kwargs:
            step_infrastructure_configuration_details = kwargs['stepInfrastructureConfigurationDetails']
        if step_infrastructure_configuration_details is None:
            raise TypeError("Missing 'step_infrastructure_configuration_details' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']
        if step_type is None:
            raise TypeError("Missing 'step_type' argument")

        _setter("depends_ons", depends_ons)
        _setter("description", description)
        _setter("is_artifact_uploaded", is_artifact_uploaded)
        _setter("job_id", job_id)
        _setter("step_configuration_details", step_configuration_details)
        _setter("step_infrastructure_configuration_details", step_infrastructure_configuration_details)
        _setter("step_name", step_name)
        _setter("step_type", step_type)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Sequence[str]:
        """
        The list of step names this current step depends on for execution.
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isArtifactUploaded")
    def is_artifact_uploaded(self) -> bool:
        """
        A flag to indicate whether the artifact has been uploaded for this step or not.
        """
        return pulumi.get(self, "is_artifact_uploaded")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetPipelineStepDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepInfrastructureConfigurationDetails")
    def step_infrastructure_configuration_details(self) -> Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailResult']:
        """
        The infrastructure configuration details of a pipeline or a step.
        """
        return pulumi.get(self, "step_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> str:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetPipelineStepDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        GetPipelineStepDetailStepConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelineStepDetailStepInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 shape_config_details: Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult'],
                 shape_name: str):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param Sequence['GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailArgs'] shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        """
        GetPipelineStepDetailStepInfrastructureConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            shape_config_details=shape_config_details,
            shape_name=shape_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             shape_config_details: Optional[Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']] = None,
             shape_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if shape_config_details is None and 'shapeConfigDetails' in kwargs:
            shape_config_details = kwargs['shapeConfigDetails']
        if shape_config_details is None:
            raise TypeError("Missing 'shape_config_details' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("shape_config_details", shape_config_details)
        _setter("shape_name", shape_name)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelinesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetPipelinesFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelinesPipelineResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 configuration_details: Sequence['outputs.GetPipelinesPipelineConfigurationDetailResult'],
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 delete_related_pipeline_runs: bool,
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 infrastructure_configuration_details: Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailResult'],
                 lifecycle_details: str,
                 log_configuration_details: Sequence['outputs.GetPipelinesPipelineLogConfigurationDetailResult'],
                 project_id: str,
                 state: str,
                 step_artifacts: Sequence['outputs.GetPipelinesPipelineStepArtifactResult'],
                 step_details: Sequence['outputs.GetPipelinesPipelineStepDetailResult'],
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param Sequence['GetPipelinesPipelineConfigurationDetailArgs'] configuration_details: The configuration details of a pipeline.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A short description of the step.
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param Sequence['GetPipelinesPipelineInfrastructureConfigurationDetailArgs'] infrastructure_configuration_details: The infrastructure configuration details of a pipeline or a step.
        :param str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
        :param Sequence['GetPipelinesPipelineLogConfigurationDetailArgs'] log_configuration_details: The pipeline log configuration details.
        :param str project_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        :param str state: The current state of the Pipeline.
        :param Sequence['GetPipelinesPipelineStepDetailArgs'] step_details: Array of step details for each step.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        :param str time_updated: The date and time the resource was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        GetPipelinesPipelineResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            configuration_details=configuration_details,
            created_by=created_by,
            defined_tags=defined_tags,
            delete_related_pipeline_runs=delete_related_pipeline_runs,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            infrastructure_configuration_details=infrastructure_configuration_details,
            lifecycle_details=lifecycle_details,
            log_configuration_details=log_configuration_details,
            project_id=project_id,
            state=state,
            step_artifacts=step_artifacts,
            step_details=step_details,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineConfigurationDetailResult']] = None,
             created_by: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             delete_related_pipeline_runs: Optional[bool] = None,
             description: Optional[str] = None,
             display_name: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             infrastructure_configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailResult']] = None,
             lifecycle_details: Optional[str] = None,
             log_configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineLogConfigurationDetailResult']] = None,
             project_id: Optional[str] = None,
             state: Optional[str] = None,
             step_artifacts: Optional[Sequence['outputs.GetPipelinesPipelineStepArtifactResult']] = None,
             step_details: Optional[Sequence['outputs.GetPipelinesPipelineStepDetailResult']] = None,
             system_tags: Optional[Mapping[str, Any]] = None,
             time_created: Optional[str] = None,
             time_updated: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if configuration_details is None and 'configurationDetails' in kwargs:
            configuration_details = kwargs['configurationDetails']
        if configuration_details is None:
            raise TypeError("Missing 'configuration_details' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if delete_related_pipeline_runs is None and 'deleteRelatedPipelineRuns' in kwargs:
            delete_related_pipeline_runs = kwargs['deleteRelatedPipelineRuns']
        if delete_related_pipeline_runs is None:
            raise TypeError("Missing 'delete_related_pipeline_runs' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if infrastructure_configuration_details is None and 'infrastructureConfigurationDetails' in kwargs:
            infrastructure_configuration_details = kwargs['infrastructureConfigurationDetails']
        if infrastructure_configuration_details is None:
            raise TypeError("Missing 'infrastructure_configuration_details' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if log_configuration_details is None and 'logConfigurationDetails' in kwargs:
            log_configuration_details = kwargs['logConfigurationDetails']
        if log_configuration_details is None:
            raise TypeError("Missing 'log_configuration_details' argument")
        if project_id is None and 'projectId' in kwargs:
            project_id = kwargs['projectId']
        if project_id is None:
            raise TypeError("Missing 'project_id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if step_artifacts is None and 'stepArtifacts' in kwargs:
            step_artifacts = kwargs['stepArtifacts']
        if step_artifacts is None:
            raise TypeError("Missing 'step_artifacts' argument")
        if step_details is None and 'stepDetails' in kwargs:
            step_details = kwargs['stepDetails']
        if step_details is None:
            raise TypeError("Missing 'step_details' argument")
        if system_tags is None and 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if system_tags is None:
            raise TypeError("Missing 'system_tags' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if time_updated is None and 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if time_updated is None:
            raise TypeError("Missing 'time_updated' argument")

        _setter("compartment_id", compartment_id)
        _setter("configuration_details", configuration_details)
        _setter("created_by", created_by)
        _setter("defined_tags", defined_tags)
        _setter("delete_related_pipeline_runs", delete_related_pipeline_runs)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("infrastructure_configuration_details", infrastructure_configuration_details)
        _setter("lifecycle_details", lifecycle_details)
        _setter("log_configuration_details", log_configuration_details)
        _setter("project_id", project_id)
        _setter("state", state)
        _setter("step_artifacts", step_artifacts)
        _setter("step_details", step_details)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationDetails")
    def configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineConfigurationDetailResult']:
        """
        The configuration details of a pipeline.
        """
        return pulumi.get(self, "configuration_details")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deleteRelatedPipelineRuns")
    def delete_related_pipeline_runs(self) -> bool:
        return pulumi.get(self, "delete_related_pipeline_runs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="infrastructureConfigurationDetails")
    def infrastructure_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailResult']:
        """
        The infrastructure configuration details of a pipeline or a step.
        """
        return pulumi.get(self, "infrastructure_configuration_details")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in 'Failed' state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logConfigurationDetails")
    def log_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineLogConfigurationDetailResult']:
        """
        The pipeline log configuration details.
        """
        return pulumi.get(self, "log_configuration_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the Pipeline.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepArtifacts")
    def step_artifacts(self) -> Sequence['outputs.GetPipelinesPipelineStepArtifactResult']:
        return pulumi.get(self, "step_artifacts")

    @property
    @pulumi.getter(name="stepDetails")
    def step_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailResult']:
        """
        Array of step details for each step.
        """
        return pulumi.get(self, "step_details")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the resource was updated in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2020-08-06T21:10:29.41Z
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPipelinesPipelineConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str,
                 type: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        :param str type: The type of pipeline.
        """
        GetPipelinesPipelineConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        _setter("type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of pipeline.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelinesPipelineInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 shape_config_details: Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult'],
                 shape_name: str):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param Sequence['GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailArgs'] shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        """
        GetPipelinesPipelineInfrastructureConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            shape_config_details=shape_config_details,
            shape_name=shape_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             shape_config_details: Optional[Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']] = None,
             shape_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if shape_config_details is None and 'shapeConfigDetails' in kwargs:
            shape_config_details = kwargs['shapeConfigDetails']
        if shape_config_details is None:
            raise TypeError("Missing 'shape_config_details' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("shape_config_details", shape_config_details)
        _setter("shape_name", shape_name)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelinesPipelineLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: bool,
                 enable_logging: bool,
                 log_group_id: str,
                 log_id: str):
        """
        :param bool enable_auto_log_creation: If automatic on-behalf-of log object creation is enabled for pipeline runs.
        :param bool enable_logging: If customer logging is enabled for pipeline.
        :param str log_group_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        :param str log_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        GetPipelinesPipelineLogConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_auto_log_creation=enable_auto_log_creation,
            enable_logging=enable_logging,
            log_group_id=log_group_id,
            log_id=log_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_auto_log_creation: Optional[bool] = None,
             enable_logging: Optional[bool] = None,
             log_group_id: Optional[str] = None,
             log_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_auto_log_creation is None and 'enableAutoLogCreation' in kwargs:
            enable_auto_log_creation = kwargs['enableAutoLogCreation']
        if enable_auto_log_creation is None:
            raise TypeError("Missing 'enable_auto_log_creation' argument")
        if enable_logging is None and 'enableLogging' in kwargs:
            enable_logging = kwargs['enableLogging']
        if enable_logging is None:
            raise TypeError("Missing 'enable_logging' argument")
        if log_group_id is None and 'logGroupId' in kwargs:
            log_group_id = kwargs['logGroupId']
        if log_group_id is None:
            raise TypeError("Missing 'log_group_id' argument")
        if log_id is None and 'logId' in kwargs:
            log_id = kwargs['logId']
        if log_id is None:
            raise TypeError("Missing 'log_id' argument")

        _setter("enable_auto_log_creation", enable_auto_log_creation)
        _setter("enable_logging", enable_logging)
        _setter("log_group_id", log_group_id)
        _setter("log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> bool:
        """
        If automatic on-behalf-of log object creation is enabled for pipeline runs.
        """
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> bool:
        """
        If customer logging is enabled for pipeline.
        """
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log group.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the log.
        """
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelinesPipelineStepArtifactResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: str,
                 artifact_content_length: str,
                 artifact_content_md5: str,
                 artifact_last_modified: str,
                 pipeline_step_artifact: str,
                 step_name: str):
        """
        :param str step_name: The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        GetPipelinesPipelineStepArtifactResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            artifact_content_disposition=artifact_content_disposition,
            artifact_content_length=artifact_content_length,
            artifact_content_md5=artifact_content_md5,
            artifact_last_modified=artifact_last_modified,
            pipeline_step_artifact=pipeline_step_artifact,
            step_name=step_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             artifact_content_disposition: Optional[str] = None,
             artifact_content_length: Optional[str] = None,
             artifact_content_md5: Optional[str] = None,
             artifact_last_modified: Optional[str] = None,
             pipeline_step_artifact: Optional[str] = None,
             step_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if artifact_content_disposition is None and 'artifactContentDisposition' in kwargs:
            artifact_content_disposition = kwargs['artifactContentDisposition']
        if artifact_content_disposition is None:
            raise TypeError("Missing 'artifact_content_disposition' argument")
        if artifact_content_length is None and 'artifactContentLength' in kwargs:
            artifact_content_length = kwargs['artifactContentLength']
        if artifact_content_length is None:
            raise TypeError("Missing 'artifact_content_length' argument")
        if artifact_content_md5 is None and 'artifactContentMd5' in kwargs:
            artifact_content_md5 = kwargs['artifactContentMd5']
        if artifact_content_md5 is None:
            raise TypeError("Missing 'artifact_content_md5' argument")
        if artifact_last_modified is None and 'artifactLastModified' in kwargs:
            artifact_last_modified = kwargs['artifactLastModified']
        if artifact_last_modified is None:
            raise TypeError("Missing 'artifact_last_modified' argument")
        if pipeline_step_artifact is None and 'pipelineStepArtifact' in kwargs:
            pipeline_step_artifact = kwargs['pipelineStepArtifact']
        if pipeline_step_artifact is None:
            raise TypeError("Missing 'pipeline_step_artifact' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")

        _setter("artifact_content_disposition", artifact_content_disposition)
        _setter("artifact_content_length", artifact_content_length)
        _setter("artifact_content_md5", artifact_content_md5)
        _setter("artifact_last_modified", artifact_last_modified)
        _setter("pipeline_step_artifact", pipeline_step_artifact)
        _setter("step_name", step_name)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> str:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> str:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> str:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="pipelineStepArtifact")
    def pipeline_step_artifact(self) -> str:
        return pulumi.get(self, "pipeline_step_artifact")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelinesPipelineStepDetailResult(dict):
    def __init__(__self__, *,
                 depends_ons: Sequence[str],
                 description: str,
                 is_artifact_uploaded: bool,
                 job_id: str,
                 step_configuration_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepConfigurationDetailResult'],
                 step_infrastructure_configuration_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult'],
                 step_name: str,
                 step_type: str):
        """
        :param Sequence[str] depends_ons: The list of step names this current step depends on for execution.
        :param str description: A short description of the step.
        :param bool is_artifact_uploaded: A flag to indicate whether the artifact has been uploaded for this step or not.
        :param str job_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        :param Sequence['GetPipelinesPipelineStepDetailStepConfigurationDetailArgs'] step_configuration_details: The configuration details of a step.
        :param Sequence['GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailArgs'] step_infrastructure_configuration_details: The infrastructure configuration details of a pipeline or a step.
        :param str step_name: The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        :param str step_type: The type of step.
        """
        GetPipelinesPipelineStepDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            depends_ons=depends_ons,
            description=description,
            is_artifact_uploaded=is_artifact_uploaded,
            job_id=job_id,
            step_configuration_details=step_configuration_details,
            step_infrastructure_configuration_details=step_infrastructure_configuration_details,
            step_name=step_name,
            step_type=step_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             depends_ons: Optional[Sequence[str]] = None,
             description: Optional[str] = None,
             is_artifact_uploaded: Optional[bool] = None,
             job_id: Optional[str] = None,
             step_configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineStepDetailStepConfigurationDetailResult']] = None,
             step_infrastructure_configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult']] = None,
             step_name: Optional[str] = None,
             step_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if depends_ons is None and 'dependsOns' in kwargs:
            depends_ons = kwargs['dependsOns']
        if depends_ons is None:
            raise TypeError("Missing 'depends_ons' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if is_artifact_uploaded is None and 'isArtifactUploaded' in kwargs:
            is_artifact_uploaded = kwargs['isArtifactUploaded']
        if is_artifact_uploaded is None:
            raise TypeError("Missing 'is_artifact_uploaded' argument")
        if job_id is None and 'jobId' in kwargs:
            job_id = kwargs['jobId']
        if job_id is None:
            raise TypeError("Missing 'job_id' argument")
        if step_configuration_details is None and 'stepConfigurationDetails' in kwargs:
            step_configuration_details = kwargs['stepConfigurationDetails']
        if step_configuration_details is None:
            raise TypeError("Missing 'step_configuration_details' argument")
        if step_infrastructure_configuration_details is None and 'stepInfrastructureConfigurationDetails' in kwargs:
            step_infrastructure_configuration_details = kwargs['stepInfrastructureConfigurationDetails']
        if step_infrastructure_configuration_details is None:
            raise TypeError("Missing 'step_infrastructure_configuration_details' argument")
        if step_name is None and 'stepName' in kwargs:
            step_name = kwargs['stepName']
        if step_name is None:
            raise TypeError("Missing 'step_name' argument")
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']
        if step_type is None:
            raise TypeError("Missing 'step_type' argument")

        _setter("depends_ons", depends_ons)
        _setter("description", description)
        _setter("is_artifact_uploaded", is_artifact_uploaded)
        _setter("job_id", job_id)
        _setter("step_configuration_details", step_configuration_details)
        _setter("step_infrastructure_configuration_details", step_infrastructure_configuration_details)
        _setter("step_name", step_name)
        _setter("step_type", step_type)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Sequence[str]:
        """
        The list of step names this current step depends on for execution.
        """
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the step.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isArtifactUploaded")
    def is_artifact_uploaded(self) -> bool:
        """
        A flag to indicate whether the artifact has been uploaded for this step or not.
        """
        return pulumi.get(self, "is_artifact_uploaded")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the job to be used as a step.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepConfigurationDetailResult']:
        """
        The configuration details of a step.
        """
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepInfrastructureConfigurationDetails")
    def step_infrastructure_configuration_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult']:
        """
        The infrastructure configuration details of a pipeline or a step.
        """
        return pulumi.get(self, "step_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        The name of the step. It must be unique within the pipeline. This is used to create the pipeline DAG.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> str:
        """
        The type of step.
        """
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: str,
                 environment_variables: Mapping[str, Any],
                 maximum_runtime_in_minutes: str):
        """
        :param str command_line_arguments: The command line arguments to set for step.
        :param Mapping[str, Any] environment_variables: Environment variables to set for step.
        :param str maximum_runtime_in_minutes: A time bound for the execution of the step.
        """
        GetPipelinesPipelineStepDetailStepConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            command_line_arguments=command_line_arguments,
            environment_variables=environment_variables,
            maximum_runtime_in_minutes=maximum_runtime_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             command_line_arguments: Optional[str] = None,
             environment_variables: Optional[Mapping[str, Any]] = None,
             maximum_runtime_in_minutes: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if command_line_arguments is None and 'commandLineArguments' in kwargs:
            command_line_arguments = kwargs['commandLineArguments']
        if command_line_arguments is None:
            raise TypeError("Missing 'command_line_arguments' argument")
        if environment_variables is None and 'environmentVariables' in kwargs:
            environment_variables = kwargs['environmentVariables']
        if environment_variables is None:
            raise TypeError("Missing 'environment_variables' argument")
        if maximum_runtime_in_minutes is None and 'maximumRuntimeInMinutes' in kwargs:
            maximum_runtime_in_minutes = kwargs['maximumRuntimeInMinutes']
        if maximum_runtime_in_minutes is None:
            raise TypeError("Missing 'maximum_runtime_in_minutes' argument")

        _setter("command_line_arguments", command_line_arguments)
        _setter("environment_variables", environment_variables)
        _setter("maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> str:
        """
        The command line arguments to set for step.
        """
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Mapping[str, Any]:
        """
        Environment variables to set for step.
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> str:
        """
        A time bound for the execution of the step.
        """
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 shape_config_details: Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult'],
                 shape_name: str):
        """
        :param int block_storage_size_in_gbs: The size of the block storage volume to attach to the instance.
        :param Sequence['GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailArgs'] shape_config_details: Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        :param str shape_name: The shape used to launch the instance for all step runs in the pipeline.
        """
        GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            block_storage_size_in_gbs=block_storage_size_in_gbs,
            shape_config_details=shape_config_details,
            shape_name=shape_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             block_storage_size_in_gbs: Optional[int] = None,
             shape_config_details: Optional[Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']] = None,
             shape_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if block_storage_size_in_gbs is None and 'blockStorageSizeInGbs' in kwargs:
            block_storage_size_in_gbs = kwargs['blockStorageSizeInGbs']
        if block_storage_size_in_gbs is None:
            raise TypeError("Missing 'block_storage_size_in_gbs' argument")
        if shape_config_details is None and 'shapeConfigDetails' in kwargs:
            shape_config_details = kwargs['shapeConfigDetails']
        if shape_config_details is None:
            raise TypeError("Missing 'shape_config_details' argument")
        if shape_name is None and 'shapeName' in kwargs:
            shape_name = kwargs['shapeName']
        if shape_name is None:
            raise TypeError("Missing 'shape_name' argument")

        _setter("block_storage_size_in_gbs", block_storage_size_in_gbs)
        _setter("shape_config_details", shape_config_details)
        _setter("shape_name", shape_name)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        """
        The size of the block storage volume to attach to the instance.
        """
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']:
        """
        Details for the pipeline step run shape configuration. Specify only when a flex shape is selected.
        """
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        """
        The shape used to launch the instance for all step runs in the pipeline.
        """
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: float,
                 ocpus: float):
        """
        :param float memory_in_gbs: A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        :param float ocpus: A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            memory_in_gbs=memory_in_gbs,
            ocpus=ocpus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             memory_in_gbs: Optional[float] = None,
             ocpus: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if memory_in_gbs is None and 'memoryInGbs' in kwargs:
            memory_in_gbs = kwargs['memoryInGbs']
        if memory_in_gbs is None:
            raise TypeError("Missing 'memory_in_gbs' argument")
        if ocpus is None:
            raise TypeError("Missing 'ocpus' argument")

        _setter("memory_in_gbs", memory_in_gbs)
        _setter("ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows memory to be specified. This specifies the size of the memory in GBs.
        """
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        """
        A pipeline step run instance of type VM.Standard.E3.Flex allows the ocpu count to be specified.
        """
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPrivateEndpointsDataSciencePrivateEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 created_by: str,
                 data_science_resource_type: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 fqdn: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 lifecycle_details: str,
                 nsg_ids: Sequence[str],
                 state: str,
                 sub_domain: str,
                 subnet_id: str,
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param str data_science_resource_type: Resource types in the Data Science service such as notebooks.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A user friendly description. Avoid entering confidential information.
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param str fqdn: Accesing the Data Science resource using FQDN.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: The OCID of a private endpoint.
        :param str lifecycle_details: Details of the state of Data Science private endpoint.
        :param Sequence[str] nsg_ids: An array of network security group OCIDs.
        :param str state: The lifecycle state of the private endpoint.
        :param str subnet_id: The OCID of a subnet.
        :param str time_created: The date and time that the Data Science private endpoint was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
        :param str time_updated: The date and time that the Data Science private endpoint was updated expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
        """
        GetPrivateEndpointsDataSciencePrivateEndpointResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            created_by=created_by,
            data_science_resource_type=data_science_resource_type,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            fqdn=fqdn,
            freeform_tags=freeform_tags,
            id=id,
            lifecycle_details=lifecycle_details,
            nsg_ids=nsg_ids,
            state=state,
            sub_domain=sub_domain,
            subnet_id=subnet_id,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             created_by: Optional[str] = None,
             data_science_resource_type: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             description: Optional[str] = None,
             display_name: Optional[str] = None,
             fqdn: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             lifecycle_details: Optional[str] = None,
             nsg_ids: Optional[Sequence[str]] = None,
             state: Optional[str] = None,
             sub_domain: Optional[str] = None,
             subnet_id: Optional[str] = None,
             time_created: Optional[str] = None,
             time_updated: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if data_science_resource_type is None and 'dataScienceResourceType' in kwargs:
            data_science_resource_type = kwargs['dataScienceResourceType']
        if data_science_resource_type is None:
            raise TypeError("Missing 'data_science_resource_type' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if fqdn is None:
            raise TypeError("Missing 'fqdn' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if lifecycle_details is None and 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if lifecycle_details is None:
            raise TypeError("Missing 'lifecycle_details' argument")
        if nsg_ids is None and 'nsgIds' in kwargs:
            nsg_ids = kwargs['nsgIds']
        if nsg_ids is None:
            raise TypeError("Missing 'nsg_ids' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if sub_domain is None and 'subDomain' in kwargs:
            sub_domain = kwargs['subDomain']
        if sub_domain is None:
            raise TypeError("Missing 'sub_domain' argument")
        if subnet_id is None and 'subnetId' in kwargs:
            subnet_id = kwargs['subnetId']
        if subnet_id is None:
            raise TypeError("Missing 'subnet_id' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if time_updated is None and 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if time_updated is None:
            raise TypeError("Missing 'time_updated' argument")

        _setter("compartment_id", compartment_id)
        _setter("created_by", created_by)
        _setter("data_science_resource_type", data_science_resource_type)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("fqdn", fqdn)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("lifecycle_details", lifecycle_details)
        _setter("nsg_ids", nsg_ids)
        _setter("state", state)
        _setter("sub_domain", sub_domain)
        _setter("subnet_id", subnet_id)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="dataScienceResourceType")
    def data_science_resource_type(self) -> str:
        """
        Resource types in the Data Science service such as notebooks.
        """
        return pulumi.get(self, "data_science_resource_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A user friendly description. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        Accesing the Data Science resource using FQDN.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of a private endpoint.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        Details of the state of Data Science private endpoint.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Sequence[str]:
        """
        An array of network security group OCIDs.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The lifecycle state of the private endpoint.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> str:
        return pulumi.get(self, "sub_domain")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The OCID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time that the Data Science private endpoint was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time that the Data Science private endpoint was updated expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2018-04-03T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetPrivateEndpointsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetProjectsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 created_by: str,
                 defined_tags: Mapping[str, Any],
                 description: str,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 state: str,
                 time_created: str):
        """
        :param str compartment_id: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        :param str created_by: <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param str description: A short description of the project.
        :param str display_name: <b>Filter</b> results by its user-friendly name.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param str id: <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        :param str state: <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        :param str time_created: The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        GetProjectsProjectResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            created_by=created_by,
            defined_tags=defined_tags,
            description=description,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            state=state,
            time_created=time_created,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             created_by: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             description: Optional[str] = None,
             display_name: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             state: Optional[str] = None,
             time_created: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if created_by is None and 'createdBy' in kwargs:
            created_by = kwargs['createdBy']
        if created_by is None:
            raise TypeError("Missing 'created_by' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if description is None:
            raise TypeError("Missing 'description' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")

        _setter("compartment_id", compartment_id)
        _setter("created_by", created_by)
        _setter("defined_tags", defined_tags)
        _setter("description", description)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("state", state)
        _setter("time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        <b>Filter</b> results by the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the user who created the resource.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A short description of the project.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        <b>Filter</b> results by its user-friendly name.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        <b>Filter</b> results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        <b>Filter</b> results by the specified lifecycle state. Must be a valid state for the resource type.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the resource was created in the timestamp format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: 2019-08-25T21:10:29.41Z
        """
        return pulumi.get(self, "time_created")


