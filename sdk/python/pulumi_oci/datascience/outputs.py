# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'JobJobConfigurationDetails',
    'JobJobInfrastructureConfigurationDetails',
    'JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails',
    'JobJobLogConfigurationDetails',
    'JobJobStorageMountConfigurationDetailsList',
    'JobRunJobConfigurationOverrideDetails',
    'JobRunJobInfrastructureConfigurationDetail',
    'JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail',
    'JobRunJobLogConfigurationOverrideDetails',
    'JobRunJobStorageMountConfigurationDetailsList',
    'JobRunLogDetail',
    'ModelCustomMetadataList',
    'ModelDefinedMetadataList',
    'ModelDeploymentCategoryLogDetails',
    'ModelDeploymentCategoryLogDetailsAccess',
    'ModelDeploymentCategoryLogDetailsPredict',
    'ModelDeploymentModelDeploymentConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails',
    'ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy',
    'NotebookSessionNotebookSessionConfigDetails',
    'NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails',
    'NotebookSessionNotebookSessionConfigurationDetails',
    'NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails',
    'NotebookSessionNotebookSessionRuntimeConfigDetails',
    'NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails',
    'NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection',
    'NotebookSessionNotebookSessionStorageMountConfigurationDetailsList',
    'PipelineConfigurationDetails',
    'PipelineInfrastructureConfigurationDetails',
    'PipelineInfrastructureConfigurationDetailsShapeConfigDetails',
    'PipelineLogConfigurationDetails',
    'PipelineRunConfigurationDetail',
    'PipelineRunConfigurationOverrideDetails',
    'PipelineRunLogConfigurationOverrideDetails',
    'PipelineRunLogDetail',
    'PipelineRunStepOverrideDetail',
    'PipelineRunStepOverrideDetailStepConfigurationDetails',
    'PipelineRunStepRun',
    'PipelineStepArtifact',
    'PipelineStepDetail',
    'PipelineStepDetailStepConfigurationDetails',
    'PipelineStepDetailStepInfrastructureConfigurationDetails',
    'PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails',
    'GetFastLaunchJobConfigsFastLaunchJobConfigResult',
    'GetFastLaunchJobConfigsFilterResult',
    'GetJobJobConfigurationDetailResult',
    'GetJobJobInfrastructureConfigurationDetailResult',
    'GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobJobLogConfigurationDetailResult',
    'GetJobJobStorageMountConfigurationDetailsListResult',
    'GetJobRunJobConfigurationOverrideDetailResult',
    'GetJobRunJobInfrastructureConfigurationDetailResult',
    'GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobRunJobLogConfigurationOverrideDetailResult',
    'GetJobRunJobStorageMountConfigurationDetailsListResult',
    'GetJobRunLogDetailResult',
    'GetJobRunsFilterResult',
    'GetJobRunsJobRunResult',
    'GetJobRunsJobRunJobConfigurationOverrideDetailResult',
    'GetJobRunsJobRunJobInfrastructureConfigurationDetailResult',
    'GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobRunsJobRunJobLogConfigurationOverrideDetailResult',
    'GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult',
    'GetJobRunsJobRunLogDetailResult',
    'GetJobShapesFilterResult',
    'GetJobShapesJobShapeResult',
    'GetJobsFilterResult',
    'GetJobsJobResult',
    'GetJobsJobJobConfigurationDetailResult',
    'GetJobsJobJobInfrastructureConfigurationDetailResult',
    'GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult',
    'GetJobsJobJobLogConfigurationDetailResult',
    'GetJobsJobJobStorageMountConfigurationDetailsListResult',
    'GetModelCustomMetadataListResult',
    'GetModelDefinedMetadataListResult',
    'GetModelDeploymentCategoryLogDetailResult',
    'GetModelDeploymentCategoryLogDetailAccessResult',
    'GetModelDeploymentCategoryLogDetailPredictResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult',
    'GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult',
    'GetModelDeploymentShapesFilterResult',
    'GetModelDeploymentShapesModelDeploymentShapeResult',
    'GetModelDeploymentsFilterResult',
    'GetModelDeploymentsModelDeploymentResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult',
    'GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult',
    'GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult',
    'GetModelVersionSetsFilterResult',
    'GetModelVersionSetsModelVersionSetResult',
    'GetModelsFilterResult',
    'GetModelsModelResult',
    'GetModelsModelCustomMetadataListResult',
    'GetModelsModelDefinedMetadataListResult',
    'GetNotebookSessionNotebookSessionConfigDetailResult',
    'GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionNotebookSessionConfigurationDetailResult',
    'GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionNotebookSessionRuntimeConfigDetailResult',
    'GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult',
    'GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult',
    'GetNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult',
    'GetNotebookSessionShapesFilterResult',
    'GetNotebookSessionShapesNotebookSessionShapeResult',
    'GetNotebookSessionsFilterResult',
    'GetNotebookSessionsNotebookSessionResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult',
    'GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult',
    'GetPipelineConfigurationDetailResult',
    'GetPipelineInfrastructureConfigurationDetailResult',
    'GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelineLogConfigurationDetailResult',
    'GetPipelineRunConfigurationDetailResult',
    'GetPipelineRunConfigurationOverrideDetailResult',
    'GetPipelineRunLogConfigurationOverrideDetailResult',
    'GetPipelineRunLogDetailResult',
    'GetPipelineRunStepOverrideDetailResult',
    'GetPipelineRunStepOverrideDetailStepConfigurationDetailResult',
    'GetPipelineRunStepRunResult',
    'GetPipelineRunsFilterResult',
    'GetPipelineRunsPipelineRunResult',
    'GetPipelineRunsPipelineRunConfigurationDetailResult',
    'GetPipelineRunsPipelineRunConfigurationOverrideDetailResult',
    'GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult',
    'GetPipelineRunsPipelineRunLogDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailResult',
    'GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult',
    'GetPipelineRunsPipelineRunStepRunResult',
    'GetPipelineStepArtifactResult',
    'GetPipelineStepDetailResult',
    'GetPipelineStepDetailStepConfigurationDetailResult',
    'GetPipelineStepDetailStepInfrastructureConfigurationDetailResult',
    'GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelinesFilterResult',
    'GetPipelinesPipelineResult',
    'GetPipelinesPipelineConfigurationDetailResult',
    'GetPipelinesPipelineInfrastructureConfigurationDetailResult',
    'GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPipelinesPipelineLogConfigurationDetailResult',
    'GetPipelinesPipelineStepArtifactResult',
    'GetPipelinesPipelineStepDetailResult',
    'GetPipelinesPipelineStepDetailStepConfigurationDetailResult',
    'GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult',
    'GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult',
    'GetPrivateEndpointsDataSciencePrivateEndpointResult',
    'GetPrivateEndpointsFilterResult',
    'GetProjectsFilterResult',
    'GetProjectsProjectResult',
]

@pulumi.output_type
class JobJobConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobType":
            suggest = "job_type"
        elif key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_type: str,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        pulumi.set(__self__, "job_type", job_type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> str:
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class JobJobInfrastructureConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "jobInfrastructureType":
            suggest = "job_infrastructure_type"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "jobShapeConfigDetails":
            suggest = "job_shape_config_details"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobInfrastructureConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobInfrastructureConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobInfrastructureConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 job_infrastructure_type: str,
                 shape_name: str,
                 job_shape_config_details: Optional['outputs.JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails'] = None,
                 subnet_id: Optional[str] = None):
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        pulumi.set(__self__, "shape_name", shape_name)
        if job_shape_config_details is not None:
            pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> str:
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional['outputs.JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails']:
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobInfrastructureConfigurationDetailsJobShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class JobJobLogConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobLogConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobLogConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobLogConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class JobJobStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobJobStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_directory_name: str,
                 storage_type: str,
                 bucket: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "storage_type", storage_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class JobRunJobConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobType":
            suggest = "job_type"
        elif key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_type: str,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        pulumi.set(__self__, "job_type", job_type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> str:
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class JobRunJobInfrastructureConfigurationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "jobInfrastructureType":
            suggest = "job_infrastructure_type"
        elif key == "jobShapeConfigDetails":
            suggest = "job_shape_config_details"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobInfrastructureConfigurationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobInfrastructureConfigurationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobInfrastructureConfigurationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 job_infrastructure_type: Optional[str] = None,
                 job_shape_config_details: Optional[Sequence['outputs.JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail']] = None,
                 shape_name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if job_infrastructure_type is not None:
            pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        if job_shape_config_details is not None:
            pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> Optional[str]:
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional[Sequence['outputs.JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail']]:
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobInfrastructureConfigurationDetailJobShapeConfigDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class JobRunJobLogConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobLogConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobLogConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobLogConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class JobRunJobStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunJobStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunJobStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination_directory_name: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_directory_name is not None:
            pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class JobRunLogDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobRunLogDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobRunLogDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobRunLogDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelCustomMetadataList(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelDefinedMetadataList(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ModelDeploymentCategoryLogDetails(dict):
    def __init__(__self__, *,
                 access: Optional['outputs.ModelDeploymentCategoryLogDetailsAccess'] = None,
                 predict: Optional['outputs.ModelDeploymentCategoryLogDetailsPredict'] = None):
        if access is not None:
            pulumi.set(__self__, "access", access)
        if predict is not None:
            pulumi.set(__self__, "predict", predict)

    @property
    @pulumi.getter
    def access(self) -> Optional['outputs.ModelDeploymentCategoryLogDetailsAccess']:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def predict(self) -> Optional['outputs.ModelDeploymentCategoryLogDetailsPredict']:
        return pulumi.get(self, "predict")


@pulumi.output_type
class ModelDeploymentCategoryLogDetailsAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentCategoryLogDetailsAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentCategoryLogDetailsAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentCategoryLogDetailsAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelDeploymentCategoryLogDetailsPredict(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentCategoryLogDetailsPredict. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentCategoryLogDetailsPredict.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentCategoryLogDetailsPredict.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str,
                 log_id: str):
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> str:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deploymentType":
            suggest = "deployment_type"
        elif key == "modelConfigurationDetails":
            suggest = "model_configuration_details"
        elif key == "environmentConfigurationDetails":
            suggest = "environment_configuration_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deployment_type: str,
                 model_configuration_details: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails',
                 environment_configuration_details: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails'] = None):
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "model_configuration_details", model_configuration_details)
        if environment_configuration_details is not None:
            pulumi.set(__self__, "environment_configuration_details", environment_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> str:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails':
        return pulumi.get(self, "model_configuration_details")

    @property
    @pulumi.getter(name="environmentConfigurationDetails")
    def environment_configuration_details(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails']:
        return pulumi.get(self, "environment_configuration_details")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentConfigurationType":
            suggest = "environment_configuration_type"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "healthCheckPort":
            suggest = "health_check_port"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "serverPort":
            suggest = "server_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsEnvironmentConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_configuration_type: str,
                 cmds: Optional[Sequence[str]] = None,
                 entrypoints: Optional[Sequence[str]] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 health_check_port: Optional[int] = None,
                 image: Optional[str] = None,
                 image_digest: Optional[str] = None,
                 server_port: Optional[int] = None):
        pulumi.set(__self__, "environment_configuration_type", environment_configuration_type)
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)

    @property
    @pulumi.getter(name="environmentConfigurationType")
    def environment_configuration_type(self) -> str:
        return pulumi.get(self, "environment_configuration_type")

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[int]:
        return pulumi.get(self, "server_port")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceConfiguration":
            suggest = "instance_configuration"
        elif key == "modelId":
            suggest = "model_id"
        elif key == "bandwidthMbps":
            suggest = "bandwidth_mbps"
        elif key == "scalingPolicy":
            suggest = "scaling_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_configuration: 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration',
                 model_id: str,
                 bandwidth_mbps: Optional[int] = None,
                 scaling_policy: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy'] = None):
        pulumi.set(__self__, "instance_configuration", instance_configuration)
        pulumi.set(__self__, "model_id", model_id)
        if bandwidth_mbps is not None:
            pulumi.set(__self__, "bandwidth_mbps", bandwidth_mbps)
        if scaling_policy is not None:
            pulumi.set(__self__, "scaling_policy", scaling_policy)

    @property
    @pulumi.getter(name="instanceConfiguration")
    def instance_configuration(self) -> 'outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration':
        return pulumi.get(self, "instance_configuration")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> str:
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="scalingPolicy")
    def scaling_policy(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy']:
        return pulumi.get(self, "scaling_policy")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceShapeName":
            suggest = "instance_shape_name"
        elif key == "modelDeploymentInstanceShapeConfigDetails":
            suggest = "model_deployment_instance_shape_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_shape_name: str,
                 model_deployment_instance_shape_config_details: Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails'] = None):
        pulumi.set(__self__, "instance_shape_name", instance_shape_name)
        if model_deployment_instance_shape_config_details is not None:
            pulumi.set(__self__, "model_deployment_instance_shape_config_details", model_deployment_instance_shape_config_details)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> str:
        return pulumi.get(self, "instance_shape_name")

    @property
    @pulumi.getter(name="modelDeploymentInstanceShapeConfigDetails")
    def model_deployment_instance_shape_config_details(self) -> Optional['outputs.ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails']:
        return pulumi.get(self, "model_deployment_instance_shape_config_details")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsInstanceConfigurationModelDeploymentInstanceShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCount":
            suggest = "instance_count"
        elif key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModelDeploymentModelDeploymentConfigurationDetailsModelConfigurationDetailsScalingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_count: int,
                 policy_type: str):
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "notebookSessionShapeConfigDetails":
            suggest = "notebook_session_shape_config_details"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shape: str,
                 block_storage_size_in_gbs: Optional[int] = None,
                 notebook_session_shape_config_details: Optional['outputs.NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails'] = None,
                 private_endpoint_id: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        pulumi.set(__self__, "shape", shape)
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails']:
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "notebookSessionShapeConfigDetails":
            suggest = "notebook_session_shape_config_details"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 shape: str,
                 subnet_id: str,
                 block_storage_size_in_gbs: Optional[int] = None,
                 notebook_session_shape_config_details: Optional['outputs.NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails'] = None,
                 private_endpoint_id: Optional[str] = None):
        pulumi.set(__self__, "shape", shape)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)

    @property
    @pulumi.getter
    def shape(self) -> str:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails']:
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")


@pulumi.output_type
class NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionConfigurationDetailsNotebookSessionShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class NotebookSessionNotebookSessionRuntimeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customEnvironmentVariables":
            suggest = "custom_environment_variables"
        elif key == "notebookSessionGitConfigDetails":
            suggest = "notebook_session_git_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionRuntimeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_environment_variables: Optional[Mapping[str, Any]] = None,
                 notebook_session_git_config_details: Optional['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails'] = None):
        if custom_environment_variables is not None:
            pulumi.set(__self__, "custom_environment_variables", custom_environment_variables)
        if notebook_session_git_config_details is not None:
            pulumi.set(__self__, "notebook_session_git_config_details", notebook_session_git_config_details)

    @property
    @pulumi.getter(name="customEnvironmentVariables")
    def custom_environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_environment_variables")

    @property
    @pulumi.getter(name="notebookSessionGitConfigDetails")
    def notebook_session_git_config_details(self) -> Optional['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails']:
        return pulumi.get(self, "notebook_session_git_config_details")


@pulumi.output_type
class NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notebookSessionGitRepoConfigCollections":
            suggest = "notebook_session_git_repo_config_collections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notebook_session_git_repo_config_collections: Optional[Sequence['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection']] = None):
        if notebook_session_git_repo_config_collections is not None:
            pulumi.set(__self__, "notebook_session_git_repo_config_collections", notebook_session_git_repo_config_collections)

    @property
    @pulumi.getter(name="notebookSessionGitRepoConfigCollections")
    def notebook_session_git_repo_config_collections(self) -> Optional[Sequence['outputs.NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection']]:
        return pulumi.get(self, "notebook_session_git_repo_config_collections")


@pulumi.output_type
class NotebookSessionNotebookSessionRuntimeConfigDetailsNotebookSessionGitConfigDetailsNotebookSessionGitRepoConfigCollection(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class NotebookSessionNotebookSessionStorageMountConfigurationDetailsList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationDirectoryName":
            suggest = "destination_directory_name"
        elif key == "storageType":
            suggest = "storage_type"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "exportId":
            suggest = "export_id"
        elif key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotebookSessionNotebookSessionStorageMountConfigurationDetailsList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotebookSessionNotebookSessionStorageMountConfigurationDetailsList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotebookSessionNotebookSessionStorageMountConfigurationDetailsList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_directory_name: str,
                 storage_type: str,
                 bucket: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None):
        pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        pulumi.set(__self__, "storage_type", storage_type)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> str:
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class PipelineConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineInfrastructureConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "shapeConfigDetails":
            suggest = "shape_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineInfrastructureConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineInfrastructureConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineInfrastructureConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 shape_name: str,
                 shape_config_details: Optional['outputs.PipelineInfrastructureConfigurationDetailsShapeConfigDetails'] = None):
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "shape_name", shape_name)
        if shape_config_details is not None:
            pulumi.set(__self__, "shape_config_details", shape_config_details)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional['outputs.PipelineInfrastructureConfigurationDetailsShapeConfigDetails']:
        return pulumi.get(self, "shape_config_details")


@pulumi.output_type
class PipelineInfrastructureConfigurationDetailsShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineInfrastructureConfigurationDetailsShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class PipelineLogConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineLogConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineLogConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineLogConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class PipelineRunConfigurationDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunConfigurationDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunConfigurationDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunConfigurationDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None,
                 type: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class PipelineRunConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineRunLogConfigurationOverrideDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAutoLogCreation":
            suggest = "enable_auto_log_creation"
        elif key == "enableLogging":
            suggest = "enable_logging"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunLogConfigurationOverrideDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunLogConfigurationOverrideDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunLogConfigurationOverrideDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class PipelineRunLogDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"
        elif key == "logId":
            suggest = "log_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunLogDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunLogDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunLogDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class PipelineRunStepOverrideDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepConfigurationDetails":
            suggest = "step_configuration_details"
        elif key == "stepName":
            suggest = "step_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_configuration_details: 'outputs.PipelineRunStepOverrideDetailStepConfigurationDetails',
                 step_name: str):
        pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> 'outputs.PipelineRunStepOverrideDetailStepConfigurationDetails':
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        return pulumi.get(self, "step_name")


@pulumi.output_type
class PipelineRunStepOverrideDetailStepConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepOverrideDetailStepConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepOverrideDetailStepConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepOverrideDetailStepConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineRunStepRun(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobRunId":
            suggest = "job_run_id"
        elif key == "lifecycleDetails":
            suggest = "lifecycle_details"
        elif key == "stepName":
            suggest = "step_name"
        elif key == "stepType":
            suggest = "step_type"
        elif key == "timeFinished":
            suggest = "time_finished"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineRunStepRun. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineRunStepRun.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineRunStepRun.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_run_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 step_name: Optional[str] = None,
                 step_type: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if job_run_id is not None:
            pulumi.set(__self__, "job_run_id", job_run_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> Optional[str]:
        return pulumi.get(self, "job_run_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class PipelineStepArtifact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactContentLength":
            suggest = "artifact_content_length"
        elif key == "pipelineStepArtifact":
            suggest = "pipeline_step_artifact"
        elif key == "stepName":
            suggest = "step_name"
        elif key == "artifactContentDisposition":
            suggest = "artifact_content_disposition"
        elif key == "artifactContentMd5":
            suggest = "artifact_content_md5"
        elif key == "artifactLastModified":
            suggest = "artifact_last_modified"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepArtifact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepArtifact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepArtifact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_content_length: str,
                 pipeline_step_artifact: str,
                 step_name: str,
                 artifact_content_disposition: Optional[str] = None,
                 artifact_content_md5: Optional[str] = None,
                 artifact_last_modified: Optional[str] = None):
        pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        pulumi.set(__self__, "pipeline_step_artifact", pipeline_step_artifact)
        pulumi.set(__self__, "step_name", step_name)
        if artifact_content_disposition is not None:
            pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        if artifact_content_md5 is not None:
            pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        if artifact_last_modified is not None:
            pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> str:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="pipelineStepArtifact")
    def pipeline_step_artifact(self) -> str:
        return pulumi.get(self, "pipeline_step_artifact")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "artifact_last_modified")


@pulumi.output_type
class PipelineStepDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stepName":
            suggest = "step_name"
        elif key == "stepType":
            suggest = "step_type"
        elif key == "dependsOns":
            suggest = "depends_ons"
        elif key == "isArtifactUploaded":
            suggest = "is_artifact_uploaded"
        elif key == "jobId":
            suggest = "job_id"
        elif key == "stepConfigurationDetails":
            suggest = "step_configuration_details"
        elif key == "stepInfrastructureConfigurationDetails":
            suggest = "step_infrastructure_configuration_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 step_name: str,
                 step_type: str,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 is_artifact_uploaded: Optional[bool] = None,
                 job_id: Optional[str] = None,
                 step_configuration_details: Optional['outputs.PipelineStepDetailStepConfigurationDetails'] = None,
                 step_infrastructure_configuration_details: Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetails'] = None):
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_type", step_type)
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_artifact_uploaded is not None:
            pulumi.set(__self__, "is_artifact_uploaded", is_artifact_uploaded)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if step_configuration_details is not None:
            pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        if step_infrastructure_configuration_details is not None:
            pulumi.set(__self__, "step_infrastructure_configuration_details", step_infrastructure_configuration_details)

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> str:
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isArtifactUploaded")
    def is_artifact_uploaded(self) -> Optional[bool]:
        return pulumi.get(self, "is_artifact_uploaded")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[str]:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Optional['outputs.PipelineStepDetailStepConfigurationDetails']:
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepInfrastructureConfigurationDetails")
    def step_infrastructure_configuration_details(self) -> Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetails']:
        return pulumi.get(self, "step_infrastructure_configuration_details")


@pulumi.output_type
class PipelineStepDetailStepConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandLineArguments":
            suggest = "command_line_arguments"
        elif key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "maximumRuntimeInMinutes":
            suggest = "maximum_runtime_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class PipelineStepDetailStepInfrastructureConfigurationDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockStorageSizeInGbs":
            suggest = "block_storage_size_in_gbs"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "shapeConfigDetails":
            suggest = "shape_config_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepInfrastructureConfigurationDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_storage_size_in_gbs: int,
                 shape_name: str,
                 shape_config_details: Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails'] = None):
        pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        pulumi.set(__self__, "shape_name", shape_name)
        if shape_config_details is not None:
            pulumi.set(__self__, "shape_config_details", shape_config_details)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> int:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional['outputs.PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails']:
        return pulumi.get(self, "shape_config_details")


@pulumi.output_type
class PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PipelineStepDetailStepInfrastructureConfigurationDetailsShapeConfigDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetFastLaunchJobConfigsFastLaunchJobConfigResult(dict):
    def __init__(__self__, *,
                 core_count: Optional[int] = None,
                 managed_egress_support: Optional[str] = None,
                 memory_in_gbs: Optional[int] = None,
                 name: Optional[str] = None,
                 shape_name: Optional[str] = None,
                 shape_series: Optional[str] = None):
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if managed_egress_support is not None:
            pulumi.set(__self__, "managed_egress_support", managed_egress_support)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if shape_series is not None:
            pulumi.set(__self__, "shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[int]:
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="managedEgressSupport")
    def managed_egress_support(self) -> Optional[str]:
        return pulumi.get(self, "managed_egress_support")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> Optional[str]:
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetFastLaunchJobConfigsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobJobConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 job_type: Optional[str] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if job_type is not None:
            pulumi.set(__self__, "job_type", job_type)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> Optional[str]:
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 job_infrastructure_type: Optional[str] = None,
                 job_shape_config_details: Optional[Sequence['outputs.GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']] = None,
                 shape_name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if job_infrastructure_type is not None:
            pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        if job_shape_config_details is not None:
            pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> Optional[str]:
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional[Sequence['outputs.GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']]:
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobJobLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination_directory_name: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_directory_name is not None:
            pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetJobRunJobConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 job_type: Optional[str] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if job_type is not None:
            pulumi.set(__self__, "job_type", job_type)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> Optional[str]:
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobRunJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 job_infrastructure_type: Optional[str] = None,
                 job_shape_config_details: Optional[Sequence['outputs.GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']] = None,
                 shape_name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if job_infrastructure_type is not None:
            pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        if job_shape_config_details is not None:
            pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> Optional[str]:
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional[Sequence['outputs.GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']]:
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobRunJobLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobRunJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination_directory_name: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_directory_name is not None:
            pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetJobRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobRunsJobRunResult(dict):
    def __init__(__self__, *,
                 asynchronous: Optional[bool] = None,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 job_configuration_override_details: Optional[Sequence['outputs.GetJobRunsJobRunJobConfigurationOverrideDetailResult']] = None,
                 job_id: Optional[str] = None,
                 job_infrastructure_configuration_details: Optional[Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailResult']] = None,
                 job_log_configuration_override_details: Optional[Sequence['outputs.GetJobRunsJobRunJobLogConfigurationOverrideDetailResult']] = None,
                 job_storage_mount_configuration_details_lists: Optional[Sequence['outputs.GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 log_details: Optional[Sequence['outputs.GetJobRunsJobRunLogDetailResult']] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_accepted: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if asynchronous is not None:
            pulumi.set(__self__, "asynchronous", asynchronous)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if job_configuration_override_details is not None:
            pulumi.set(__self__, "job_configuration_override_details", job_configuration_override_details)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if job_infrastructure_configuration_details is not None:
            pulumi.set(__self__, "job_infrastructure_configuration_details", job_infrastructure_configuration_details)
        if job_log_configuration_override_details is not None:
            pulumi.set(__self__, "job_log_configuration_override_details", job_log_configuration_override_details)
        if job_storage_mount_configuration_details_lists is not None:
            pulumi.set(__self__, "job_storage_mount_configuration_details_lists", job_storage_mount_configuration_details_lists)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if log_details is not None:
            pulumi.set(__self__, "log_details", log_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_accepted is not None:
            pulumi.set(__self__, "time_accepted", time_accepted)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def asynchronous(self) -> Optional[bool]:
        return pulumi.get(self, "asynchronous")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobConfigurationOverrideDetails")
    def job_configuration_override_details(self) -> Optional[Sequence['outputs.GetJobRunsJobRunJobConfigurationOverrideDetailResult']]:
        return pulumi.get(self, "job_configuration_override_details")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[str]:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobInfrastructureConfigurationDetails")
    def job_infrastructure_configuration_details(self) -> Optional[Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailResult']]:
        return pulumi.get(self, "job_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="jobLogConfigurationOverrideDetails")
    def job_log_configuration_override_details(self) -> Optional[Sequence['outputs.GetJobRunsJobRunJobLogConfigurationOverrideDetailResult']]:
        return pulumi.get(self, "job_log_configuration_override_details")

    @property
    @pulumi.getter(name="jobStorageMountConfigurationDetailsLists")
    def job_storage_mount_configuration_details_lists(self) -> Optional[Sequence['outputs.GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult']]:
        return pulumi.get(self, "job_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logDetails")
    def log_details(self) -> Optional[Sequence['outputs.GetJobRunsJobRunLogDetailResult']]:
        return pulumi.get(self, "log_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> Optional[str]:
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetJobRunsJobRunJobConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 job_type: Optional[str] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if job_type is not None:
            pulumi.set(__self__, "job_type", job_type)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> Optional[str]:
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobRunsJobRunJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 job_infrastructure_type: Optional[str] = None,
                 job_shape_config_details: Optional[Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']] = None,
                 shape_name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if job_infrastructure_type is not None:
            pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        if job_shape_config_details is not None:
            pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> Optional[str]:
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional[Sequence['outputs.GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']]:
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobRunsJobRunJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobRunsJobRunJobLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobRunsJobRunJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination_directory_name: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_directory_name is not None:
            pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetJobRunsJobRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobShapesJobShapeResult(dict):
    def __init__(__self__, *,
                 core_count: Optional[int] = None,
                 memory_in_gbs: Optional[int] = None,
                 name: Optional[str] = None,
                 shape_series: Optional[str] = None):
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shape_series is not None:
            pulumi.set(__self__, "shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[int]:
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> Optional[str]:
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetJobsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetJobsJobResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: Optional[str] = None,
                 artifact_content_length: Optional[str] = None,
                 artifact_content_md5: Optional[str] = None,
                 artifact_last_modified: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 delete_related_job_runs: Optional[bool] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 empty_artifact: Optional[bool] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 job_artifact: Optional[str] = None,
                 job_configuration_details: Optional[Sequence['outputs.GetJobsJobJobConfigurationDetailResult']] = None,
                 job_infrastructure_configuration_details: Optional[Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailResult']] = None,
                 job_log_configuration_details: Optional[Sequence['outputs.GetJobsJobJobLogConfigurationDetailResult']] = None,
                 job_storage_mount_configuration_details_lists: Optional[Sequence['outputs.GetJobsJobJobStorageMountConfigurationDetailsListResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if artifact_content_disposition is not None:
            pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        if artifact_content_length is not None:
            pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        if artifact_content_md5 is not None:
            pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        if artifact_last_modified is not None:
            pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if delete_related_job_runs is not None:
            pulumi.set(__self__, "delete_related_job_runs", delete_related_job_runs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if empty_artifact is not None:
            pulumi.set(__self__, "empty_artifact", empty_artifact)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if job_artifact is not None:
            pulumi.set(__self__, "job_artifact", job_artifact)
        if job_configuration_details is not None:
            pulumi.set(__self__, "job_configuration_details", job_configuration_details)
        if job_infrastructure_configuration_details is not None:
            pulumi.set(__self__, "job_infrastructure_configuration_details", job_infrastructure_configuration_details)
        if job_log_configuration_details is not None:
            pulumi.set(__self__, "job_log_configuration_details", job_log_configuration_details)
        if job_storage_mount_configuration_details_lists is not None:
            pulumi.set(__self__, "job_storage_mount_configuration_details_lists", job_storage_mount_configuration_details_lists)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deleteRelatedJobRuns")
    def delete_related_job_runs(self) -> Optional[bool]:
        return pulumi.get(self, "delete_related_job_runs")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emptyArtifact")
    def empty_artifact(self) -> Optional[bool]:
        return pulumi.get(self, "empty_artifact")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobArtifact")
    def job_artifact(self) -> Optional[str]:
        return pulumi.get(self, "job_artifact")

    @property
    @pulumi.getter(name="jobConfigurationDetails")
    def job_configuration_details(self) -> Optional[Sequence['outputs.GetJobsJobJobConfigurationDetailResult']]:
        return pulumi.get(self, "job_configuration_details")

    @property
    @pulumi.getter(name="jobInfrastructureConfigurationDetails")
    def job_infrastructure_configuration_details(self) -> Optional[Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailResult']]:
        return pulumi.get(self, "job_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="jobLogConfigurationDetails")
    def job_log_configuration_details(self) -> Optional[Sequence['outputs.GetJobsJobJobLogConfigurationDetailResult']]:
        return pulumi.get(self, "job_log_configuration_details")

    @property
    @pulumi.getter(name="jobStorageMountConfigurationDetailsLists")
    def job_storage_mount_configuration_details_lists(self) -> Optional[Sequence['outputs.GetJobsJobJobStorageMountConfigurationDetailsListResult']]:
        return pulumi.get(self, "job_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetJobsJobJobConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 job_type: Optional[str] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if job_type is not None:
            pulumi.set(__self__, "job_type", job_type)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="jobType")
    def job_type(self) -> Optional[str]:
        return pulumi.get(self, "job_type")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetJobsJobJobInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 job_infrastructure_type: Optional[str] = None,
                 job_shape_config_details: Optional[Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']] = None,
                 shape_name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if job_infrastructure_type is not None:
            pulumi.set(__self__, "job_infrastructure_type", job_infrastructure_type)
        if job_shape_config_details is not None:
            pulumi.set(__self__, "job_shape_config_details", job_shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="jobInfrastructureType")
    def job_infrastructure_type(self) -> Optional[str]:
        return pulumi.get(self, "job_infrastructure_type")

    @property
    @pulumi.getter(name="jobShapeConfigDetails")
    def job_shape_config_details(self) -> Optional[Sequence['outputs.GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult']]:
        return pulumi.get(self, "job_shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetJobsJobJobInfrastructureConfigurationDetailJobShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetJobsJobJobLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetJobsJobJobStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination_directory_name: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_directory_name is not None:
            pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetModelCustomMetadataListResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelDefinedMetadataListResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailResult(dict):
    def __init__(__self__, *,
                 accesses: Optional[Sequence['outputs.GetModelDeploymentCategoryLogDetailAccessResult']] = None,
                 predicts: Optional[Sequence['outputs.GetModelDeploymentCategoryLogDetailPredictResult']] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if predicts is not None:
            pulumi.set(__self__, "predicts", predicts)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[Sequence['outputs.GetModelDeploymentCategoryLogDetailAccessResult']]:
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def predicts(self) -> Optional[Sequence['outputs.GetModelDeploymentCategoryLogDetailPredictResult']]:
        return pulumi.get(self, "predicts")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailAccessResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentCategoryLogDetailPredictResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 deployment_type: Optional[str] = None,
                 environment_configuration_details: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']] = None,
                 model_configuration_details: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']] = None):
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if environment_configuration_details is not None:
            pulumi.set(__self__, "environment_configuration_details", environment_configuration_details)
        if model_configuration_details is not None:
            pulumi.set(__self__, "model_configuration_details", model_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="environmentConfigurationDetails")
    def environment_configuration_details(self) -> Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']]:
        return pulumi.get(self, "environment_configuration_details")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']]:
        return pulumi.get(self, "model_configuration_details")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Optional[Sequence[str]] = None,
                 entrypoints: Optional[Sequence[str]] = None,
                 environment_configuration_type: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 health_check_port: Optional[int] = None,
                 image: Optional[str] = None,
                 image_digest: Optional[str] = None,
                 server_port: Optional[int] = None):
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if environment_configuration_type is not None:
            pulumi.set(__self__, "environment_configuration_type", environment_configuration_type)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="environmentConfigurationType")
    def environment_configuration_type(self) -> Optional[str]:
        return pulumi.get(self, "environment_configuration_type")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[int]:
        return pulumi.get(self, "server_port")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 bandwidth_mbps: Optional[int] = None,
                 instance_configurations: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']] = None,
                 model_id: Optional[str] = None,
                 scaling_policies: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']] = None):
        if bandwidth_mbps is not None:
            pulumi.set(__self__, "bandwidth_mbps", bandwidth_mbps)
        if instance_configurations is not None:
            pulumi.set(__self__, "instance_configurations", instance_configurations)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if scaling_policies is not None:
            pulumi.set(__self__, "scaling_policies", scaling_policies)

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="instanceConfigurations")
    def instance_configurations(self) -> Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']]:
        return pulumi.get(self, "instance_configurations")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[str]:
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']]:
        return pulumi.get(self, "scaling_policies")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_shape_name: Optional[str] = None,
                 model_deployment_instance_shape_config_details: Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']] = None):
        if instance_shape_name is not None:
            pulumi.set(__self__, "instance_shape_name", instance_shape_name)
        if model_deployment_instance_shape_config_details is not None:
            pulumi.set(__self__, "model_deployment_instance_shape_config_details", model_deployment_instance_shape_config_details)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_shape_name")

    @property
    @pulumi.getter(name="modelDeploymentInstanceShapeConfigDetails")
    def model_deployment_instance_shape_config_details(self) -> Optional[Sequence['outputs.GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']]:
        return pulumi.get(self, "model_deployment_instance_shape_config_details")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult(dict):
    def __init__(__self__, *,
                 instance_count: Optional[int] = None,
                 policy_type: Optional[str] = None):
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[int]:
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetModelDeploymentShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelDeploymentShapesModelDeploymentShapeResult(dict):
    def __init__(__self__, *,
                 core_count: Optional[int] = None,
                 memory_in_gbs: Optional[int] = None,
                 name: Optional[str] = None,
                 shape_series: Optional[str] = None):
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shape_series is not None:
            pulumi.set(__self__, "shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[int]:
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> Optional[str]:
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetModelDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentResult(dict):
    def __init__(__self__, *,
                 category_log_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailResult']] = None,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 model_deployment_configuration_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult']] = None,
                 model_deployment_url: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if category_log_details is not None:
            pulumi.set(__self__, "category_log_details", category_log_details)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if model_deployment_configuration_details is not None:
            pulumi.set(__self__, "model_deployment_configuration_details", model_deployment_configuration_details)
        if model_deployment_url is not None:
            pulumi.set(__self__, "model_deployment_url", model_deployment_url)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="categoryLogDetails")
    def category_log_details(self) -> Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailResult']]:
        return pulumi.get(self, "category_log_details")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="modelDeploymentConfigurationDetails")
    def model_deployment_configuration_details(self) -> Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult']]:
        return pulumi.get(self, "model_deployment_configuration_details")

    @property
    @pulumi.getter(name="modelDeploymentUrl")
    def model_deployment_url(self) -> Optional[str]:
        return pulumi.get(self, "model_deployment_url")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailResult(dict):
    def __init__(__self__, *,
                 accesses: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult']] = None,
                 predicts: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult']] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if predicts is not None:
            pulumi.set(__self__, "predicts", predicts)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult']]:
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def predicts(self) -> Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult']]:
        return pulumi.get(self, "predicts")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailAccessResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentCategoryLogDetailPredictResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 deployment_type: Optional[str] = None,
                 environment_configuration_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']] = None,
                 model_configuration_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']] = None):
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if environment_configuration_details is not None:
            pulumi.set(__self__, "environment_configuration_details", environment_configuration_details)
        if model_configuration_details is not None:
            pulumi.set(__self__, "model_configuration_details", model_configuration_details)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="environmentConfigurationDetails")
    def environment_configuration_details(self) -> Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult']]:
        return pulumi.get(self, "environment_configuration_details")

    @property
    @pulumi.getter(name="modelConfigurationDetails")
    def model_configuration_details(self) -> Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult']]:
        return pulumi.get(self, "model_configuration_details")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailEnvironmentConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 cmds: Optional[Sequence[str]] = None,
                 entrypoints: Optional[Sequence[str]] = None,
                 environment_configuration_type: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 health_check_port: Optional[int] = None,
                 image: Optional[str] = None,
                 image_digest: Optional[str] = None,
                 server_port: Optional[int] = None):
        if cmds is not None:
            pulumi.set(__self__, "cmds", cmds)
        if entrypoints is not None:
            pulumi.set(__self__, "entrypoints", entrypoints)
        if environment_configuration_type is not None:
            pulumi.set(__self__, "environment_configuration_type", environment_configuration_type)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if health_check_port is not None:
            pulumi.set(__self__, "health_check_port", health_check_port)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if server_port is not None:
            pulumi.set(__self__, "server_port", server_port)

    @property
    @pulumi.getter
    def cmds(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cmds")

    @property
    @pulumi.getter
    def entrypoints(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "entrypoints")

    @property
    @pulumi.getter(name="environmentConfigurationType")
    def environment_configuration_type(self) -> Optional[str]:
        return pulumi.get(self, "environment_configuration_type")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> Optional[int]:
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> Optional[int]:
        return pulumi.get(self, "server_port")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 bandwidth_mbps: Optional[int] = None,
                 instance_configurations: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']] = None,
                 model_id: Optional[str] = None,
                 scaling_policies: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']] = None):
        if bandwidth_mbps is not None:
            pulumi.set(__self__, "bandwidth_mbps", bandwidth_mbps)
        if instance_configurations is not None:
            pulumi.set(__self__, "instance_configurations", instance_configurations)
        if model_id is not None:
            pulumi.set(__self__, "model_id", model_id)
        if scaling_policies is not None:
            pulumi.set(__self__, "scaling_policies", scaling_policies)

    @property
    @pulumi.getter(name="bandwidthMbps")
    def bandwidth_mbps(self) -> Optional[int]:
        return pulumi.get(self, "bandwidth_mbps")

    @property
    @pulumi.getter(name="instanceConfigurations")
    def instance_configurations(self) -> Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult']]:
        return pulumi.get(self, "instance_configurations")

    @property
    @pulumi.getter(name="modelId")
    def model_id(self) -> Optional[str]:
        return pulumi.get(self, "model_id")

    @property
    @pulumi.getter(name="scalingPolicies")
    def scaling_policies(self) -> Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult']]:
        return pulumi.get(self, "scaling_policies")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationResult(dict):
    def __init__(__self__, *,
                 instance_shape_name: Optional[str] = None,
                 model_deployment_instance_shape_config_details: Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']] = None):
        if instance_shape_name is not None:
            pulumi.set(__self__, "instance_shape_name", instance_shape_name)
        if model_deployment_instance_shape_config_details is not None:
            pulumi.set(__self__, "model_deployment_instance_shape_config_details", model_deployment_instance_shape_config_details)

    @property
    @pulumi.getter(name="instanceShapeName")
    def instance_shape_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_shape_name")

    @property
    @pulumi.getter(name="modelDeploymentInstanceShapeConfigDetails")
    def model_deployment_instance_shape_config_details(self) -> Optional[Sequence['outputs.GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult']]:
        return pulumi.get(self, "model_deployment_instance_shape_config_details")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailInstanceConfigurationModelDeploymentInstanceShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetModelDeploymentsModelDeploymentModelDeploymentConfigurationDetailModelConfigurationDetailScalingPolicyResult(dict):
    def __init__(__self__, *,
                 instance_count: Optional[int] = None,
                 policy_type: Optional[str] = None):
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[int]:
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetModelVersionSetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelVersionSetsModelVersionSetResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetModelsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetModelsModelResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: Optional[str] = None,
                 artifact_content_length: Optional[str] = None,
                 artifact_content_md5: Optional[str] = None,
                 artifact_last_modified: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 custom_metadata_lists: Optional[Sequence['outputs.GetModelsModelCustomMetadataListResult']] = None,
                 defined_metadata_lists: Optional[Sequence['outputs.GetModelsModelDefinedMetadataListResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 empty_model: Optional[bool] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 input_schema: Optional[str] = None,
                 model_artifact: Optional[str] = None,
                 output_schema: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if artifact_content_disposition is not None:
            pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        if artifact_content_length is not None:
            pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        if artifact_content_md5 is not None:
            pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        if artifact_last_modified is not None:
            pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if custom_metadata_lists is not None:
            pulumi.set(__self__, "custom_metadata_lists", custom_metadata_lists)
        if defined_metadata_lists is not None:
            pulumi.set(__self__, "defined_metadata_lists", defined_metadata_lists)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if empty_model is not None:
            pulumi.set(__self__, "empty_model", empty_model)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if input_schema is not None:
            pulumi.set(__self__, "input_schema", input_schema)
        if model_artifact is not None:
            pulumi.set(__self__, "model_artifact", model_artifact)
        if output_schema is not None:
            pulumi.set(__self__, "output_schema", output_schema)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="customMetadataLists")
    def custom_metadata_lists(self) -> Optional[Sequence['outputs.GetModelsModelCustomMetadataListResult']]:
        return pulumi.get(self, "custom_metadata_lists")

    @property
    @pulumi.getter(name="definedMetadataLists")
    def defined_metadata_lists(self) -> Optional[Sequence['outputs.GetModelsModelDefinedMetadataListResult']]:
        return pulumi.get(self, "defined_metadata_lists")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emptyModel")
    def empty_model(self) -> Optional[bool]:
        return pulumi.get(self, "empty_model")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputSchema")
    def input_schema(self) -> Optional[str]:
        return pulumi.get(self, "input_schema")

    @property
    @pulumi.getter(name="modelArtifact")
    def model_artifact(self) -> Optional[str]:
        return pulumi.get(self, "model_artifact")

    @property
    @pulumi.getter(name="outputSchema")
    def output_schema(self) -> Optional[str]:
        return pulumi.get(self, "output_schema")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetModelsModelCustomMetadataListResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetModelsModelDefinedMetadataListResult(dict):
    def __init__(__self__, *,
                 category: Optional[str] = None,
                 description: Optional[str] = None,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if category is not None:
            pulumi.set(__self__, "category", category)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[str]:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 notebook_session_shape_config_details: Optional[Sequence['outputs.GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']] = None,
                 private_endpoint_id: Optional[str] = None,
                 shape: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional[Sequence['outputs.GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']]:
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 notebook_session_shape_config_details: Optional[Sequence['outputs.GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']] = None,
                 private_endpoint_id: Optional[str] = None,
                 shape: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional[Sequence['outputs.GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']]:
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionNotebookSessionRuntimeConfigDetailResult(dict):
    def __init__(__self__, *,
                 custom_environment_variables: Optional[Mapping[str, Any]] = None,
                 notebook_session_git_config_details: Optional[Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']] = None):
        if custom_environment_variables is not None:
            pulumi.set(__self__, "custom_environment_variables", custom_environment_variables)
        if notebook_session_git_config_details is not None:
            pulumi.set(__self__, "notebook_session_git_config_details", notebook_session_git_config_details)

    @property
    @pulumi.getter(name="customEnvironmentVariables")
    def custom_environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_environment_variables")

    @property
    @pulumi.getter(name="notebookSessionGitConfigDetails")
    def notebook_session_git_config_details(self) -> Optional[Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']]:
        return pulumi.get(self, "notebook_session_git_config_details")


@pulumi.output_type
class GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult(dict):
    def __init__(__self__, *,
                 notebook_session_git_repo_config_collections: Optional[Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']] = None):
        if notebook_session_git_repo_config_collections is not None:
            pulumi.set(__self__, "notebook_session_git_repo_config_collections", notebook_session_git_repo_config_collections)

    @property
    @pulumi.getter(name="notebookSessionGitRepoConfigCollections")
    def notebook_session_git_repo_config_collections(self) -> Optional[Sequence['outputs.GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']]:
        return pulumi.get(self, "notebook_session_git_repo_config_collections")


@pulumi.output_type
class GetNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult(dict):
    def __init__(__self__, *,
                 url: Optional[str] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination_directory_name: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_directory_name is not None:
            pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetNotebookSessionShapesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNotebookSessionShapesNotebookSessionShapeResult(dict):
    def __init__(__self__, *,
                 core_count: Optional[int] = None,
                 memory_in_gbs: Optional[int] = None,
                 name: Optional[str] = None,
                 shape_series: Optional[str] = None):
        if core_count is not None:
            pulumi.set(__self__, "core_count", core_count)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shape_series is not None:
            pulumi.set(__self__, "shape_series", shape_series)

    @property
    @pulumi.getter(name="coreCount")
    def core_count(self) -> Optional[int]:
        return pulumi.get(self, "core_count")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shapeSeries")
    def shape_series(self) -> Optional[str]:
        return pulumi.get(self, "shape_series")


@pulumi.output_type
class GetNotebookSessionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 notebook_session_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult']] = None,
                 notebook_session_configuration_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult']] = None,
                 notebook_session_runtime_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult']] = None,
                 notebook_session_storage_mount_configuration_details_lists: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult']] = None,
                 notebook_session_url: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if notebook_session_config_details is not None:
            pulumi.set(__self__, "notebook_session_config_details", notebook_session_config_details)
        if notebook_session_configuration_details is not None:
            pulumi.set(__self__, "notebook_session_configuration_details", notebook_session_configuration_details)
        if notebook_session_runtime_config_details is not None:
            pulumi.set(__self__, "notebook_session_runtime_config_details", notebook_session_runtime_config_details)
        if notebook_session_storage_mount_configuration_details_lists is not None:
            pulumi.set(__self__, "notebook_session_storage_mount_configuration_details_lists", notebook_session_storage_mount_configuration_details_lists)
        if notebook_session_url is not None:
            pulumi.set(__self__, "notebook_session_url", notebook_session_url)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="notebookSessionConfigDetails")
    def notebook_session_config_details(self) -> Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult']]:
        return pulumi.get(self, "notebook_session_config_details")

    @property
    @pulumi.getter(name="notebookSessionConfigurationDetails")
    def notebook_session_configuration_details(self) -> Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult']]:
        return pulumi.get(self, "notebook_session_configuration_details")

    @property
    @pulumi.getter(name="notebookSessionRuntimeConfigDetails")
    def notebook_session_runtime_config_details(self) -> Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult']]:
        return pulumi.get(self, "notebook_session_runtime_config_details")

    @property
    @pulumi.getter(name="notebookSessionStorageMountConfigurationDetailsLists")
    def notebook_session_storage_mount_configuration_details_lists(self) -> Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult']]:
        return pulumi.get(self, "notebook_session_storage_mount_configuration_details_lists")

    @property
    @pulumi.getter(name="notebookSessionUrl")
    def notebook_session_url(self) -> Optional[str]:
        return pulumi.get(self, "notebook_session_url")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 notebook_session_shape_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']] = None,
                 private_endpoint_id: Optional[str] = None,
                 shape: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult']]:
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 notebook_session_shape_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']] = None,
                 private_endpoint_id: Optional[str] = None,
                 shape: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if notebook_session_shape_config_details is not None:
            pulumi.set(__self__, "notebook_session_shape_config_details", notebook_session_shape_config_details)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if shape is not None:
            pulumi.set(__self__, "shape", shape)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="notebookSessionShapeConfigDetails")
    def notebook_session_shape_config_details(self) -> Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult']]:
        return pulumi.get(self, "notebook_session_shape_config_details")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[str]:
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def shape(self) -> Optional[str]:
        return pulumi.get(self, "shape")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionConfigurationDetailNotebookSessionShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailResult(dict):
    def __init__(__self__, *,
                 custom_environment_variables: Optional[Mapping[str, Any]] = None,
                 notebook_session_git_config_details: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']] = None):
        if custom_environment_variables is not None:
            pulumi.set(__self__, "custom_environment_variables", custom_environment_variables)
        if notebook_session_git_config_details is not None:
            pulumi.set(__self__, "notebook_session_git_config_details", notebook_session_git_config_details)

    @property
    @pulumi.getter(name="customEnvironmentVariables")
    def custom_environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "custom_environment_variables")

    @property
    @pulumi.getter(name="notebookSessionGitConfigDetails")
    def notebook_session_git_config_details(self) -> Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult']]:
        return pulumi.get(self, "notebook_session_git_config_details")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailResult(dict):
    def __init__(__self__, *,
                 notebook_session_git_repo_config_collections: Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']] = None):
        if notebook_session_git_repo_config_collections is not None:
            pulumi.set(__self__, "notebook_session_git_repo_config_collections", notebook_session_git_repo_config_collections)

    @property
    @pulumi.getter(name="notebookSessionGitRepoConfigCollections")
    def notebook_session_git_repo_config_collections(self) -> Optional[Sequence['outputs.GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult']]:
        return pulumi.get(self, "notebook_session_git_repo_config_collections")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionRuntimeConfigDetailNotebookSessionGitConfigDetailNotebookSessionGitRepoConfigCollectionResult(dict):
    def __init__(__self__, *,
                 url: Optional[str] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetNotebookSessionsNotebookSessionNotebookSessionStorageMountConfigurationDetailsListResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 destination_directory_name: Optional[str] = None,
                 destination_path: Optional[str] = None,
                 export_id: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 namespace: Optional[str] = None,
                 prefix: Optional[str] = None,
                 storage_type: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if destination_directory_name is not None:
            pulumi.set(__self__, "destination_directory_name", destination_directory_name)
        if destination_path is not None:
            pulumi.set(__self__, "destination_path", destination_path)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="destinationDirectoryName")
    def destination_directory_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_directory_name")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetPipelineConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None,
                 type: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 shape_config_details: Optional[Sequence['outputs.GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']] = None,
                 shape_name: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if shape_config_details is not None:
            pulumi.set(__self__, "shape_config_details", shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional[Sequence['outputs.GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']]:
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetPipelineInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelineLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None,
                 type: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None,
                 type: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailResult(dict):
    def __init__(__self__, *,
                 step_configuration_details: Optional[Sequence['outputs.GetPipelineRunStepOverrideDetailStepConfigurationDetailResult']] = None,
                 step_name: Optional[str] = None):
        if step_configuration_details is not None:
            pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Optional[Sequence['outputs.GetPipelineRunStepOverrideDetailStepConfigurationDetailResult']]:
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelineRunStepOverrideDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelineRunStepRunResult(dict):
    def __init__(__self__, *,
                 job_run_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 step_name: Optional[str] = None,
                 step_type: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if job_run_id is not None:
            pulumi.set(__self__, "job_run_id", job_run_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> Optional[str]:
        return pulumi.get(self, "job_run_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetPipelineRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelineRunsPipelineRunResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 configuration_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunConfigurationDetailResult']] = None,
                 configuration_override_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunConfigurationOverrideDetailResult']] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 delete_related_job_runs: Optional[bool] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 log_configuration_override_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult']] = None,
                 log_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunLogDetailResult']] = None,
                 pipeline_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 step_override_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailResult']] = None,
                 step_runs: Optional[Sequence['outputs.GetPipelineRunsPipelineRunStepRunResult']] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_accepted: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if configuration_details is not None:
            pulumi.set(__self__, "configuration_details", configuration_details)
        if configuration_override_details is not None:
            pulumi.set(__self__, "configuration_override_details", configuration_override_details)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if delete_related_job_runs is not None:
            pulumi.set(__self__, "delete_related_job_runs", delete_related_job_runs)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if log_configuration_override_details is not None:
            pulumi.set(__self__, "log_configuration_override_details", log_configuration_override_details)
        if log_details is not None:
            pulumi.set(__self__, "log_details", log_details)
        if pipeline_id is not None:
            pulumi.set(__self__, "pipeline_id", pipeline_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if step_override_details is not None:
            pulumi.set(__self__, "step_override_details", step_override_details)
        if step_runs is not None:
            pulumi.set(__self__, "step_runs", step_runs)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_accepted is not None:
            pulumi.set(__self__, "time_accepted", time_accepted)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationDetails")
    def configuration_details(self) -> Optional[Sequence['outputs.GetPipelineRunsPipelineRunConfigurationDetailResult']]:
        return pulumi.get(self, "configuration_details")

    @property
    @pulumi.getter(name="configurationOverrideDetails")
    def configuration_override_details(self) -> Optional[Sequence['outputs.GetPipelineRunsPipelineRunConfigurationOverrideDetailResult']]:
        return pulumi.get(self, "configuration_override_details")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deleteRelatedJobRuns")
    def delete_related_job_runs(self) -> Optional[bool]:
        return pulumi.get(self, "delete_related_job_runs")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logConfigurationOverrideDetails")
    def log_configuration_override_details(self) -> Optional[Sequence['outputs.GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult']]:
        return pulumi.get(self, "log_configuration_override_details")

    @property
    @pulumi.getter(name="logDetails")
    def log_details(self) -> Optional[Sequence['outputs.GetPipelineRunsPipelineRunLogDetailResult']]:
        return pulumi.get(self, "log_details")

    @property
    @pulumi.getter(name="pipelineId")
    def pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepOverrideDetails")
    def step_override_details(self) -> Optional[Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailResult']]:
        return pulumi.get(self, "step_override_details")

    @property
    @pulumi.getter(name="stepRuns")
    def step_runs(self) -> Optional[Sequence['outputs.GetPipelineRunsPipelineRunStepRunResult']]:
        return pulumi.get(self, "step_runs")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeAccepted")
    def time_accepted(self) -> Optional[str]:
        return pulumi.get(self, "time_accepted")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPipelineRunsPipelineRunConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None,
                 type: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunsPipelineRunConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None,
                 type: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelineRunsPipelineRunLogConfigurationOverrideDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunsPipelineRunLogDetailResult(dict):
    def __init__(__self__, *,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailResult(dict):
    def __init__(__self__, *,
                 step_configuration_details: Optional[Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult']] = None,
                 step_name: Optional[str] = None):
        if step_configuration_details is not None:
            pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Optional[Sequence['outputs.GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult']]:
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepOverrideDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelineRunsPipelineRunStepRunResult(dict):
    def __init__(__self__, *,
                 job_run_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 state: Optional[str] = None,
                 step_name: Optional[str] = None,
                 step_type: Optional[str] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if job_run_id is not None:
            pulumi.set(__self__, "job_run_id", job_run_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="jobRunId")
    def job_run_id(self) -> Optional[str]:
        return pulumi.get(self, "job_run_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        return pulumi.get(self, "step_type")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetPipelineStepArtifactResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: Optional[str] = None,
                 artifact_content_length: Optional[str] = None,
                 artifact_content_md5: Optional[str] = None,
                 artifact_last_modified: Optional[str] = None,
                 pipeline_step_artifact: Optional[str] = None,
                 step_name: Optional[str] = None):
        if artifact_content_disposition is not None:
            pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        if artifact_content_length is not None:
            pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        if artifact_content_md5 is not None:
            pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        if artifact_last_modified is not None:
            pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)
        if pipeline_step_artifact is not None:
            pulumi.set(__self__, "pipeline_step_artifact", pipeline_step_artifact)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="pipelineStepArtifact")
    def pipeline_step_artifact(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_step_artifact")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelineStepDetailResult(dict):
    def __init__(__self__, *,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 is_artifact_uploaded: Optional[bool] = None,
                 job_id: Optional[str] = None,
                 step_configuration_details: Optional[Sequence['outputs.GetPipelineStepDetailStepConfigurationDetailResult']] = None,
                 step_infrastructure_configuration_details: Optional[Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailResult']] = None,
                 step_name: Optional[str] = None,
                 step_type: Optional[str] = None):
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_artifact_uploaded is not None:
            pulumi.set(__self__, "is_artifact_uploaded", is_artifact_uploaded)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if step_configuration_details is not None:
            pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        if step_infrastructure_configuration_details is not None:
            pulumi.set(__self__, "step_infrastructure_configuration_details", step_infrastructure_configuration_details)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isArtifactUploaded")
    def is_artifact_uploaded(self) -> Optional[bool]:
        return pulumi.get(self, "is_artifact_uploaded")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[str]:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Optional[Sequence['outputs.GetPipelineStepDetailStepConfigurationDetailResult']]:
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepInfrastructureConfigurationDetails")
    def step_infrastructure_configuration_details(self) -> Optional[Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailResult']]:
        return pulumi.get(self, "step_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetPipelineStepDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelineStepDetailStepInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 shape_config_details: Optional[Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']] = None,
                 shape_name: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if shape_config_details is not None:
            pulumi.set(__self__, "shape_config_details", shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional[Sequence['outputs.GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']]:
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelinesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPipelinesPipelineResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineConfigurationDetailResult']] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 delete_related_pipeline_runs: Optional[bool] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 infrastructure_configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 log_configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineLogConfigurationDetailResult']] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 step_artifacts: Optional[Sequence['outputs.GetPipelinesPipelineStepArtifactResult']] = None,
                 step_details: Optional[Sequence['outputs.GetPipelinesPipelineStepDetailResult']] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if configuration_details is not None:
            pulumi.set(__self__, "configuration_details", configuration_details)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if delete_related_pipeline_runs is not None:
            pulumi.set(__self__, "delete_related_pipeline_runs", delete_related_pipeline_runs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if infrastructure_configuration_details is not None:
            pulumi.set(__self__, "infrastructure_configuration_details", infrastructure_configuration_details)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if log_configuration_details is not None:
            pulumi.set(__self__, "log_configuration_details", log_configuration_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if step_artifacts is not None:
            pulumi.set(__self__, "step_artifacts", step_artifacts)
        if step_details is not None:
            pulumi.set(__self__, "step_details", step_details)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configurationDetails")
    def configuration_details(self) -> Optional[Sequence['outputs.GetPipelinesPipelineConfigurationDetailResult']]:
        return pulumi.get(self, "configuration_details")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deleteRelatedPipelineRuns")
    def delete_related_pipeline_runs(self) -> Optional[bool]:
        return pulumi.get(self, "delete_related_pipeline_runs")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="infrastructureConfigurationDetails")
    def infrastructure_configuration_details(self) -> Optional[Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailResult']]:
        return pulumi.get(self, "infrastructure_configuration_details")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="logConfigurationDetails")
    def log_configuration_details(self) -> Optional[Sequence['outputs.GetPipelinesPipelineLogConfigurationDetailResult']]:
        return pulumi.get(self, "log_configuration_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stepArtifacts")
    def step_artifacts(self) -> Optional[Sequence['outputs.GetPipelinesPipelineStepArtifactResult']]:
        return pulumi.get(self, "step_artifacts")

    @property
    @pulumi.getter(name="stepDetails")
    def step_details(self) -> Optional[Sequence['outputs.GetPipelinesPipelineStepDetailResult']]:
        return pulumi.get(self, "step_details")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPipelinesPipelineConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None,
                 type: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetPipelinesPipelineInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 shape_config_details: Optional[Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']] = None,
                 shape_name: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if shape_config_details is not None:
            pulumi.set(__self__, "shape_config_details", shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional[Sequence['outputs.GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult']]:
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetPipelinesPipelineInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPipelinesPipelineLogConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 enable_auto_log_creation: Optional[bool] = None,
                 enable_logging: Optional[bool] = None,
                 log_group_id: Optional[str] = None,
                 log_id: Optional[str] = None):
        if enable_auto_log_creation is not None:
            pulumi.set(__self__, "enable_auto_log_creation", enable_auto_log_creation)
        if enable_logging is not None:
            pulumi.set(__self__, "enable_logging", enable_logging)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if log_id is not None:
            pulumi.set(__self__, "log_id", log_id)

    @property
    @pulumi.getter(name="enableAutoLogCreation")
    def enable_auto_log_creation(self) -> Optional[bool]:
        return pulumi.get(self, "enable_auto_log_creation")

    @property
    @pulumi.getter(name="enableLogging")
    def enable_logging(self) -> Optional[bool]:
        return pulumi.get(self, "enable_logging")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logId")
    def log_id(self) -> Optional[str]:
        return pulumi.get(self, "log_id")


@pulumi.output_type
class GetPipelinesPipelineStepArtifactResult(dict):
    def __init__(__self__, *,
                 artifact_content_disposition: Optional[str] = None,
                 artifact_content_length: Optional[str] = None,
                 artifact_content_md5: Optional[str] = None,
                 artifact_last_modified: Optional[str] = None,
                 pipeline_step_artifact: Optional[str] = None,
                 step_name: Optional[str] = None):
        if artifact_content_disposition is not None:
            pulumi.set(__self__, "artifact_content_disposition", artifact_content_disposition)
        if artifact_content_length is not None:
            pulumi.set(__self__, "artifact_content_length", artifact_content_length)
        if artifact_content_md5 is not None:
            pulumi.set(__self__, "artifact_content_md5", artifact_content_md5)
        if artifact_last_modified is not None:
            pulumi.set(__self__, "artifact_last_modified", artifact_last_modified)
        if pipeline_step_artifact is not None:
            pulumi.set(__self__, "pipeline_step_artifact", pipeline_step_artifact)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)

    @property
    @pulumi.getter(name="artifactContentDisposition")
    def artifact_content_disposition(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_disposition")

    @property
    @pulumi.getter(name="artifactContentLength")
    def artifact_content_length(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_length")

    @property
    @pulumi.getter(name="artifactContentMd5")
    def artifact_content_md5(self) -> Optional[str]:
        return pulumi.get(self, "artifact_content_md5")

    @property
    @pulumi.getter(name="artifactLastModified")
    def artifact_last_modified(self) -> Optional[str]:
        return pulumi.get(self, "artifact_last_modified")

    @property
    @pulumi.getter(name="pipelineStepArtifact")
    def pipeline_step_artifact(self) -> Optional[str]:
        return pulumi.get(self, "pipeline_step_artifact")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")


@pulumi.output_type
class GetPipelinesPipelineStepDetailResult(dict):
    def __init__(__self__, *,
                 depends_ons: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 is_artifact_uploaded: Optional[bool] = None,
                 job_id: Optional[str] = None,
                 step_configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineStepDetailStepConfigurationDetailResult']] = None,
                 step_infrastructure_configuration_details: Optional[Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult']] = None,
                 step_name: Optional[str] = None,
                 step_type: Optional[str] = None):
        if depends_ons is not None:
            pulumi.set(__self__, "depends_ons", depends_ons)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_artifact_uploaded is not None:
            pulumi.set(__self__, "is_artifact_uploaded", is_artifact_uploaded)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if step_configuration_details is not None:
            pulumi.set(__self__, "step_configuration_details", step_configuration_details)
        if step_infrastructure_configuration_details is not None:
            pulumi.set(__self__, "step_infrastructure_configuration_details", step_infrastructure_configuration_details)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)

    @property
    @pulumi.getter(name="dependsOns")
    def depends_ons(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "depends_ons")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isArtifactUploaded")
    def is_artifact_uploaded(self) -> Optional[bool]:
        return pulumi.get(self, "is_artifact_uploaded")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[str]:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="stepConfigurationDetails")
    def step_configuration_details(self) -> Optional[Sequence['outputs.GetPipelinesPipelineStepDetailStepConfigurationDetailResult']]:
        return pulumi.get(self, "step_configuration_details")

    @property
    @pulumi.getter(name="stepInfrastructureConfigurationDetails")
    def step_infrastructure_configuration_details(self) -> Optional[Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult']]:
        return pulumi.get(self, "step_infrastructure_configuration_details")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 command_line_arguments: Optional[str] = None,
                 environment_variables: Optional[Mapping[str, Any]] = None,
                 maximum_runtime_in_minutes: Optional[str] = None):
        if command_line_arguments is not None:
            pulumi.set(__self__, "command_line_arguments", command_line_arguments)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if maximum_runtime_in_minutes is not None:
            pulumi.set(__self__, "maximum_runtime_in_minutes", maximum_runtime_in_minutes)

    @property
    @pulumi.getter(name="commandLineArguments")
    def command_line_arguments(self) -> Optional[str]:
        return pulumi.get(self, "command_line_arguments")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="maximumRuntimeInMinutes")
    def maximum_runtime_in_minutes(self) -> Optional[str]:
        return pulumi.get(self, "maximum_runtime_in_minutes")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailResult(dict):
    def __init__(__self__, *,
                 block_storage_size_in_gbs: Optional[int] = None,
                 shape_config_details: Optional[Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']] = None,
                 shape_name: Optional[str] = None):
        if block_storage_size_in_gbs is not None:
            pulumi.set(__self__, "block_storage_size_in_gbs", block_storage_size_in_gbs)
        if shape_config_details is not None:
            pulumi.set(__self__, "shape_config_details", shape_config_details)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)

    @property
    @pulumi.getter(name="blockStorageSizeInGbs")
    def block_storage_size_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "block_storage_size_in_gbs")

    @property
    @pulumi.getter(name="shapeConfigDetails")
    def shape_config_details(self) -> Optional[Sequence['outputs.GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult']]:
        return pulumi.get(self, "shape_config_details")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetPipelinesPipelineStepDetailStepInfrastructureConfigurationDetailShapeConfigDetailResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetPrivateEndpointsDataSciencePrivateEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 data_science_resource_type: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 fqdn: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 sub_domain: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if data_science_resource_type is not None:
            pulumi.set(__self__, "data_science_resource_type", data_science_resource_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if sub_domain is not None:
            pulumi.set(__self__, "sub_domain", sub_domain)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="dataScienceResourceType")
    def data_science_resource_type(self) -> Optional[str]:
        return pulumi.get(self, "data_science_resource_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> Optional[str]:
        return pulumi.get(self, "sub_domain")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPrivateEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 created_by: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


