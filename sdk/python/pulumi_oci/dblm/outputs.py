# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPatchManagementDatabasesFilterResult',
    'GetPatchManagementDatabasesPatchDatabasesCollectionResult',
    'GetPatchManagementDatabasesPatchDatabasesCollectionItemResult',
    'GetPatchManagementDatabasesPatchDatabasesCollectionItemAdditionalPatchResult',
    'GetPatchManagementDatabasesPatchDatabasesCollectionItemImageDetailResult',
    'GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchActivityDetailResult',
    'GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchComplianceDetailResult',
    'GetPatchManagementDatabasesPatchDatabasesCollectionItemVulnerabilitiesSummaryResult',
    'GetPatchManagementImagesPatchRecommendationSummaryResult',
    'GetPatchManagementPatchOperationsSummaryResult',
    'GetPatchManagementResourceResult',
    'GetPatchManagementResourceHostInfoResult',
    'GetPatchManagementResourcesPatchComplianceSummaryResult',
    'GetVulnerabilityAggregatedVulnerabilityDataAggregatedVulnerabilityCollectionResult',
    'GetVulnerabilityAggregatedVulnerabilityDataAggregatedVulnerabilityCollectionItemResult',
    'GetVulnerabilityAggregatedVulnerabilityDataFilterResult',
    'GetVulnerabilityNotificationsFilterResult',
    'GetVulnerabilityNotificationsNotificationCollectionResult',
    'GetVulnerabilityNotificationsNotificationCollectionItemResult',
    'GetVulnerabilityPatchRecommendationsSummaryResult',
    'GetVulnerabilityResourceResult',
    'GetVulnerabilityResourceHostInfoResult',
    'GetVulnerabilityResourcesFilterResult',
    'GetVulnerabilityResourcesSummaryResult',
    'GetVulnerabilityResourcesVulnerabilityResourceCollectionResult',
    'GetVulnerabilityResourcesVulnerabilityResourceCollectionItemResult',
    'GetVulnerabilityResourcesVulnerabilityResourceCollectionItemChildPdbResult',
    'GetVulnerabilityResourcesVulnerabilityResourceCollectionItemMetricErrorResult',
    'GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsDetailResult',
    'GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsSummaryResult',
    'GetVulnerabilityResourcesVulnerabilityResourceCollectionItemVulnerabilitiesSummaryResult',
    'GetVulnerabilityScansFilterResult',
    'GetVulnerabilityScansVulnerabilityScanCollectionResult',
    'GetVulnerabilityScansVulnerabilityScanCollectionItemResult',
    'GetVulnerabilityVulnerabilitiesFilterResult',
    'GetVulnerabilityVulnerabilitiesSummaryResult',
    'GetVulnerabilityVulnerabilitiesVulnerabilityCollectionResult',
    'GetVulnerabilityVulnerabilitiesVulnerabilityCollectionItemResult',
]

@pulumi.output_type
class GetPatchManagementDatabasesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPatchManagementDatabasesPatchDatabasesCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemResult']):
        """
        :param Sequence['GetPatchManagementDatabasesPatchDatabasesCollectionItemArgs'] items: List of patchDatabases.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemResult']:
        """
        List of patchDatabases.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPatchManagementDatabasesPatchDatabasesCollectionItemResult(dict):
    def __init__(__self__, *,
                 additional_patches: Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemAdditionalPatchResult'],
                 current_patch_watermark: builtins.str,
                 database_id: builtins.str,
                 database_name: builtins.str,
                 database_type: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 freeform_tags: Mapping[str, builtins.str],
                 host_or_cluster: builtins.str,
                 image_details: Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemImageDetailResult'],
                 oracle_home_path: builtins.str,
                 patch_activity_details: Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchActivityDetailResult'],
                 patch_compliance_details: Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchComplianceDetailResult'],
                 patch_user: builtins.str,
                 release: builtins.str,
                 release_full_version: builtins.str,
                 state: builtins.str,
                 sudo_file_path: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 vulnerabilities_summaries: Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemVulnerabilitiesSummaryResult']):
        """
        :param Sequence['GetPatchManagementDatabasesPatchDatabasesCollectionItemAdditionalPatchArgs'] additional_patches: List of additional patches on database.
        :param builtins.str current_patch_watermark: This is the hashcode representing the list of patches applied.
        :param builtins.str database_id: Database ocid.
        :param builtins.str database_name: Database name.
        :param builtins.str database_type: Filter by database type. Possible values Single Instance or RAC.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str host_or_cluster: For SI, hosted on host and for RAC, host on cluster.
        :param Sequence['GetPatchManagementDatabasesPatchDatabasesCollectionItemImageDetailArgs'] image_details: Image details containing the subscribed image, its status, version, owner and time of creation.
        :param builtins.str oracle_home_path: Path to the Oracle home.
        :param Sequence['GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchActivityDetailArgs'] patch_activity_details: Details of deploy, update and migrate-listener(only for single Instance database) operations for this resource.
        :param Sequence['GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchComplianceDetailArgs'] patch_compliance_details: Patch Compliance Status
        :param builtins.str patch_user: Intermediate user to be used for patching, created and maintained by customers. This user requires sudo access to switch as Oracle home owner and root user
        :param builtins.str release: Database release.
        :param builtins.str release_full_version: Database release full version.
        :param builtins.str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param builtins.str sudo_file_path: Path to sudo binary (executable) file
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param Sequence['GetPatchManagementDatabasesPatchDatabasesCollectionItemVulnerabilitiesSummaryArgs'] vulnerabilities_summaries: Summary of vulnerabilities found in registered resources grouped by severity.
        """
        pulumi.set(__self__, "additional_patches", additional_patches)
        pulumi.set(__self__, "current_patch_watermark", current_patch_watermark)
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "host_or_cluster", host_or_cluster)
        pulumi.set(__self__, "image_details", image_details)
        pulumi.set(__self__, "oracle_home_path", oracle_home_path)
        pulumi.set(__self__, "patch_activity_details", patch_activity_details)
        pulumi.set(__self__, "patch_compliance_details", patch_compliance_details)
        pulumi.set(__self__, "patch_user", patch_user)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "release_full_version", release_full_version)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "sudo_file_path", sudo_file_path)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "vulnerabilities_summaries", vulnerabilities_summaries)

    @property
    @pulumi.getter(name="additionalPatches")
    def additional_patches(self) -> Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemAdditionalPatchResult']:
        """
        List of additional patches on database.
        """
        return pulumi.get(self, "additional_patches")

    @property
    @pulumi.getter(name="currentPatchWatermark")
    def current_patch_watermark(self) -> builtins.str:
        """
        This is the hashcode representing the list of patches applied.
        """
        return pulumi.get(self, "current_patch_watermark")

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> builtins.str:
        """
        Database ocid.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> builtins.str:
        """
        Database name.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> builtins.str:
        """
        Filter by database type. Possible values Single Instance or RAC.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostOrCluster")
    def host_or_cluster(self) -> builtins.str:
        """
        For SI, hosted on host and for RAC, host on cluster.
        """
        return pulumi.get(self, "host_or_cluster")

    @property
    @pulumi.getter(name="imageDetails")
    def image_details(self) -> Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemImageDetailResult']:
        """
        Image details containing the subscribed image, its status, version, owner and time of creation.
        """
        return pulumi.get(self, "image_details")

    @property
    @pulumi.getter(name="oracleHomePath")
    def oracle_home_path(self) -> builtins.str:
        """
        Path to the Oracle home.
        """
        return pulumi.get(self, "oracle_home_path")

    @property
    @pulumi.getter(name="patchActivityDetails")
    def patch_activity_details(self) -> Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchActivityDetailResult']:
        """
        Details of deploy, update and migrate-listener(only for single Instance database) operations for this resource.
        """
        return pulumi.get(self, "patch_activity_details")

    @property
    @pulumi.getter(name="patchComplianceDetails")
    def patch_compliance_details(self) -> Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchComplianceDetailResult']:
        """
        Patch Compliance Status
        """
        return pulumi.get(self, "patch_compliance_details")

    @property
    @pulumi.getter(name="patchUser")
    def patch_user(self) -> builtins.str:
        """
        Intermediate user to be used for patching, created and maintained by customers. This user requires sudo access to switch as Oracle home owner and root user
        """
        return pulumi.get(self, "patch_user")

    @property
    @pulumi.getter
    def release(self) -> builtins.str:
        """
        Database release.
        """
        return pulumi.get(self, "release")

    @property
    @pulumi.getter(name="releaseFullVersion")
    def release_full_version(self) -> builtins.str:
        """
        Database release full version.
        """
        return pulumi.get(self, "release_full_version")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="sudoFilePath")
    def sudo_file_path(self) -> builtins.str:
        """
        Path to sudo binary (executable) file
        """
        return pulumi.get(self, "sudo_file_path")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="vulnerabilitiesSummaries")
    def vulnerabilities_summaries(self) -> Sequence['outputs.GetPatchManagementDatabasesPatchDatabasesCollectionItemVulnerabilitiesSummaryResult']:
        """
        Summary of vulnerabilities found in registered resources grouped by severity.
        """
        return pulumi.get(self, "vulnerabilities_summaries")


@pulumi.output_type
class GetPatchManagementDatabasesPatchDatabasesCollectionItemAdditionalPatchResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 description: builtins.str,
                 patch_id: builtins.int,
                 patch_name: builtins.str):
        """
        :param builtins.str category: Shows if patch is recommended or is an additional patch from an existing database.
        :param builtins.str description: Description of the patch recommendation.
        :param builtins.int patch_id: Id for the patch recommendation.
        :param builtins.str patch_name: Name for the patch recommendation.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "patch_id", patch_id)
        pulumi.set(__self__, "patch_name", patch_name)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        """
        Shows if patch is recommended or is an additional patch from an existing database.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the patch recommendation.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="patchId")
    def patch_id(self) -> builtins.int:
        """
        Id for the patch recommendation.
        """
        return pulumi.get(self, "patch_id")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Name for the patch recommendation.
        """
        return pulumi.get(self, "patch_name")


@pulumi.output_type
class GetPatchManagementDatabasesPatchDatabasesCollectionItemImageDetailResult(dict):
    def __init__(__self__, *,
                 created_by: builtins.str,
                 current_version: builtins.str,
                 image_id: builtins.str,
                 image_owner: builtins.str,
                 image_status: builtins.str,
                 image_version: builtins.str,
                 subscribed_image: builtins.str,
                 time_image_creation: builtins.str,
                 up_to_date_image_version: builtins.str):
        """
        :param builtins.str created_by: Name of the person who created the image.
        :param builtins.str current_version: Name of the image version marked as current of the image.
        :param builtins.str image_id: Subscribed image
        :param builtins.str image_owner: Owner of the image.
        :param builtins.str image_status: Image status.
        :param builtins.str image_version: Release version of the image.
        :param builtins.str subscribed_image: Subscribed image.
        :param builtins.str time_image_creation: Date when the image was created.
        :param builtins.str up_to_date_image_version: An image version name, that is up to date and has no recommendations.
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_owner", image_owner)
        pulumi.set(__self__, "image_status", image_status)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "subscribed_image", subscribed_image)
        pulumi.set(__self__, "time_image_creation", time_image_creation)
        pulumi.set(__self__, "up_to_date_image_version", up_to_date_image_version)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> builtins.str:
        """
        Name of the person who created the image.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> builtins.str:
        """
        Name of the image version marked as current of the image.
        """
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> builtins.str:
        """
        Subscribed image
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageOwner")
    def image_owner(self) -> builtins.str:
        """
        Owner of the image.
        """
        return pulumi.get(self, "image_owner")

    @property
    @pulumi.getter(name="imageStatus")
    def image_status(self) -> builtins.str:
        """
        Image status.
        """
        return pulumi.get(self, "image_status")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> builtins.str:
        """
        Release version of the image.
        """
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter(name="subscribedImage")
    def subscribed_image(self) -> builtins.str:
        """
        Subscribed image.
        """
        return pulumi.get(self, "subscribed_image")

    @property
    @pulumi.getter(name="timeImageCreation")
    def time_image_creation(self) -> builtins.str:
        """
        Date when the image was created.
        """
        return pulumi.get(self, "time_image_creation")

    @property
    @pulumi.getter(name="upToDateImageVersion")
    def up_to_date_image_version(self) -> builtins.str:
        """
        An image version name, that is up to date and has no recommendations.
        """
        return pulumi.get(self, "up_to_date_image_version")


@pulumi.output_type
class GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchActivityDetailResult(dict):
    def __init__(__self__, *,
                 deploy_operation_id: builtins.str,
                 deploy_status: builtins.str,
                 deploy_task_id: builtins.str,
                 migrate_listener_operation_id: builtins.str,
                 migrate_listener_status: builtins.str,
                 migrate_listener_task_id: builtins.str,
                 update_operation_id: builtins.str,
                 update_status: builtins.str,
                 update_task_id: builtins.str):
        """
        :param builtins.str deploy_operation_id: Operation Identifier for deploy operation.
        :param builtins.str deploy_status: Status of deploy operation.
        :param builtins.str deploy_task_id: Task identifier for deploy operation.
        :param builtins.str migrate_listener_operation_id: Operation Identifier for migrate listener operation.
        :param builtins.str migrate_listener_status: Status of migrate listener operation.
        :param builtins.str migrate_listener_task_id: Task identifier for migrate listener operation.
        :param builtins.str update_operation_id: Operation Identifier for update operation.
        :param builtins.str update_status: Status of update operation.
        :param builtins.str update_task_id: Task identifier for update operation.
        """
        pulumi.set(__self__, "deploy_operation_id", deploy_operation_id)
        pulumi.set(__self__, "deploy_status", deploy_status)
        pulumi.set(__self__, "deploy_task_id", deploy_task_id)
        pulumi.set(__self__, "migrate_listener_operation_id", migrate_listener_operation_id)
        pulumi.set(__self__, "migrate_listener_status", migrate_listener_status)
        pulumi.set(__self__, "migrate_listener_task_id", migrate_listener_task_id)
        pulumi.set(__self__, "update_operation_id", update_operation_id)
        pulumi.set(__self__, "update_status", update_status)
        pulumi.set(__self__, "update_task_id", update_task_id)

    @property
    @pulumi.getter(name="deployOperationId")
    def deploy_operation_id(self) -> builtins.str:
        """
        Operation Identifier for deploy operation.
        """
        return pulumi.get(self, "deploy_operation_id")

    @property
    @pulumi.getter(name="deployStatus")
    def deploy_status(self) -> builtins.str:
        """
        Status of deploy operation.
        """
        return pulumi.get(self, "deploy_status")

    @property
    @pulumi.getter(name="deployTaskId")
    def deploy_task_id(self) -> builtins.str:
        """
        Task identifier for deploy operation.
        """
        return pulumi.get(self, "deploy_task_id")

    @property
    @pulumi.getter(name="migrateListenerOperationId")
    def migrate_listener_operation_id(self) -> builtins.str:
        """
        Operation Identifier for migrate listener operation.
        """
        return pulumi.get(self, "migrate_listener_operation_id")

    @property
    @pulumi.getter(name="migrateListenerStatus")
    def migrate_listener_status(self) -> builtins.str:
        """
        Status of migrate listener operation.
        """
        return pulumi.get(self, "migrate_listener_status")

    @property
    @pulumi.getter(name="migrateListenerTaskId")
    def migrate_listener_task_id(self) -> builtins.str:
        """
        Task identifier for migrate listener operation.
        """
        return pulumi.get(self, "migrate_listener_task_id")

    @property
    @pulumi.getter(name="updateOperationId")
    def update_operation_id(self) -> builtins.str:
        """
        Operation Identifier for update operation.
        """
        return pulumi.get(self, "update_operation_id")

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> builtins.str:
        """
        Status of update operation.
        """
        return pulumi.get(self, "update_status")

    @property
    @pulumi.getter(name="updateTaskId")
    def update_task_id(self) -> builtins.str:
        """
        Task identifier for update operation.
        """
        return pulumi.get(self, "update_task_id")


@pulumi.output_type
class GetPatchManagementDatabasesPatchDatabasesCollectionItemPatchComplianceDetailResult(dict):
    def __init__(__self__, *,
                 patch_compliance_status: builtins.str,
                 patch_compliance_version: builtins.str):
        """
        :param builtins.str patch_compliance_status: Patch compliance status.
        :param builtins.str patch_compliance_version: Resource patch compliance version name.
        """
        pulumi.set(__self__, "patch_compliance_status", patch_compliance_status)
        pulumi.set(__self__, "patch_compliance_version", patch_compliance_version)

    @property
    @pulumi.getter(name="patchComplianceStatus")
    def patch_compliance_status(self) -> builtins.str:
        """
        Patch compliance status.
        """
        return pulumi.get(self, "patch_compliance_status")

    @property
    @pulumi.getter(name="patchComplianceVersion")
    def patch_compliance_version(self) -> builtins.str:
        """
        Resource patch compliance version name.
        """
        return pulumi.get(self, "patch_compliance_version")


@pulumi.output_type
class GetPatchManagementDatabasesPatchDatabasesCollectionItemVulnerabilitiesSummaryResult(dict):
    def __init__(__self__, *,
                 critical: builtins.int,
                 high: builtins.int,
                 info: builtins.int,
                 low: builtins.int,
                 medium: builtins.int,
                 total: builtins.int):
        pulumi.set(__self__, "critical", critical)
        pulumi.set(__self__, "high", high)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "low", low)
        pulumi.set(__self__, "medium", medium)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def critical(self) -> builtins.int:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def high(self) -> builtins.int:
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def info(self) -> builtins.int:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def low(self) -> builtins.int:
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> builtins.int:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter
    def total(self) -> builtins.int:
        return pulumi.get(self, "total")


@pulumi.output_type
class GetPatchManagementImagesPatchRecommendationSummaryResult(dict):
    def __init__(__self__, *,
                 image_patch_recommendations_count: builtins.int,
                 total_images_count: builtins.int,
                 up_to_date_images_count: builtins.int):
        pulumi.set(__self__, "image_patch_recommendations_count", image_patch_recommendations_count)
        pulumi.set(__self__, "total_images_count", total_images_count)
        pulumi.set(__self__, "up_to_date_images_count", up_to_date_images_count)

    @property
    @pulumi.getter(name="imagePatchRecommendationsCount")
    def image_patch_recommendations_count(self) -> builtins.int:
        return pulumi.get(self, "image_patch_recommendations_count")

    @property
    @pulumi.getter(name="totalImagesCount")
    def total_images_count(self) -> builtins.int:
        return pulumi.get(self, "total_images_count")

    @property
    @pulumi.getter(name="upToDateImagesCount")
    def up_to_date_images_count(self) -> builtins.int:
        return pulumi.get(self, "up_to_date_images_count")


@pulumi.output_type
class GetPatchManagementPatchOperationsSummaryResult(dict):
    def __init__(__self__, *,
                 failed_patch_ops_count: builtins.int,
                 running_patch_ops_count: builtins.int,
                 scheduled_patch_ops_count: builtins.int,
                 successful_patch_ops_count: builtins.int,
                 warnings_patch_ops_count: builtins.int):
        pulumi.set(__self__, "failed_patch_ops_count", failed_patch_ops_count)
        pulumi.set(__self__, "running_patch_ops_count", running_patch_ops_count)
        pulumi.set(__self__, "scheduled_patch_ops_count", scheduled_patch_ops_count)
        pulumi.set(__self__, "successful_patch_ops_count", successful_patch_ops_count)
        pulumi.set(__self__, "warnings_patch_ops_count", warnings_patch_ops_count)

    @property
    @pulumi.getter(name="failedPatchOpsCount")
    def failed_patch_ops_count(self) -> builtins.int:
        return pulumi.get(self, "failed_patch_ops_count")

    @property
    @pulumi.getter(name="runningPatchOpsCount")
    def running_patch_ops_count(self) -> builtins.int:
        return pulumi.get(self, "running_patch_ops_count")

    @property
    @pulumi.getter(name="scheduledPatchOpsCount")
    def scheduled_patch_ops_count(self) -> builtins.int:
        return pulumi.get(self, "scheduled_patch_ops_count")

    @property
    @pulumi.getter(name="successfulPatchOpsCount")
    def successful_patch_ops_count(self) -> builtins.int:
        return pulumi.get(self, "successful_patch_ops_count")

    @property
    @pulumi.getter(name="warningsPatchOpsCount")
    def warnings_patch_ops_count(self) -> builtins.int:
        return pulumi.get(self, "warnings_patch_ops_count")


@pulumi.output_type
class GetPatchManagementResourceResult(dict):
    def __init__(__self__, *,
                 agent_id: builtins.str,
                 connector_id: builtins.str,
                 db_platform_type: builtins.str,
                 db_version: builtins.str,
                 deployment_type: builtins.str,
                 host_infos: Sequence['outputs.GetPatchManagementResourceHostInfoResult'],
                 is_cluster_db: builtins.bool,
                 license_type: builtins.str,
                 resource_compartment_id: builtins.str,
                 resource_id: builtins.str,
                 resource_name: builtins.str,
                 resource_type: builtins.str):
        """
        :param builtins.str agent_id: The agent Id of the agent managing the resource.
        :param builtins.str connector_id: The connector Id of the resource.
        :param builtins.str db_platform_type: The platform type of the resource.
        :param builtins.str db_version: The version of the resource.
        :param builtins.str deployment_type: The deployment type of the resource.
        :param Sequence['GetPatchManagementResourceHostInfoArgs'] host_infos: host info objects
        :param builtins.bool is_cluster_db: True if it is a cluster db.
        :param builtins.str license_type: The License Type of the resource.
        :param builtins.str resource_compartment_id: The compartmentId of the resource.
        :param builtins.str resource_id: The Id of the resource.
        :param builtins.str resource_name: The name of the resource.
        :param builtins.str resource_type: The type of the resource.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "connector_id", connector_id)
        pulumi.set(__self__, "db_platform_type", db_platform_type)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "host_infos", host_infos)
        pulumi.set(__self__, "is_cluster_db", is_cluster_db)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "resource_compartment_id", resource_compartment_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> builtins.str:
        """
        The agent Id of the agent managing the resource.
        """
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> builtins.str:
        """
        The connector Id of the resource.
        """
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="dbPlatformType")
    def db_platform_type(self) -> builtins.str:
        """
        The platform type of the resource.
        """
        return pulumi.get(self, "db_platform_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> builtins.str:
        """
        The version of the resource.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        The deployment type of the resource.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="hostInfos")
    def host_infos(self) -> Sequence['outputs.GetPatchManagementResourceHostInfoResult']:
        """
        host info objects
        """
        return pulumi.get(self, "host_infos")

    @property
    @pulumi.getter(name="isClusterDb")
    def is_cluster_db(self) -> builtins.bool:
        """
        True if it is a cluster db.
        """
        return pulumi.get(self, "is_cluster_db")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> builtins.str:
        """
        The License Type of the resource.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="resourceCompartmentId")
    def resource_compartment_id(self) -> builtins.str:
        """
        The compartmentId of the resource.
        """
        return pulumi.get(self, "resource_compartment_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The Id of the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> builtins.str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        The type of the resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetPatchManagementResourceHostInfoResult(dict):
    def __init__(__self__, *,
                 host_cores: builtins.int,
                 host_name: builtins.str):
        """
        :param builtins.int host_cores: Number of host cores.
        :param builtins.str host_name: The name of the host.
        """
        pulumi.set(__self__, "host_cores", host_cores)
        pulumi.set(__self__, "host_name", host_name)

    @property
    @pulumi.getter(name="hostCores")
    def host_cores(self) -> builtins.int:
        """
        Number of host cores.
        """
        return pulumi.get(self, "host_cores")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        The name of the host.
        """
        return pulumi.get(self, "host_name")


@pulumi.output_type
class GetPatchManagementResourcesPatchComplianceSummaryResult(dict):
    def __init__(__self__, *,
                 non_compliant_resources_count: builtins.int,
                 not_dblm_registered_resources_count: builtins.int,
                 not_subscribed_resources_count: builtins.int,
                 total_resources_count: builtins.int,
                 up_to_date_resources_count: builtins.int):
        pulumi.set(__self__, "non_compliant_resources_count", non_compliant_resources_count)
        pulumi.set(__self__, "not_dblm_registered_resources_count", not_dblm_registered_resources_count)
        pulumi.set(__self__, "not_subscribed_resources_count", not_subscribed_resources_count)
        pulumi.set(__self__, "total_resources_count", total_resources_count)
        pulumi.set(__self__, "up_to_date_resources_count", up_to_date_resources_count)

    @property
    @pulumi.getter(name="nonCompliantResourcesCount")
    def non_compliant_resources_count(self) -> builtins.int:
        return pulumi.get(self, "non_compliant_resources_count")

    @property
    @pulumi.getter(name="notDblmRegisteredResourcesCount")
    def not_dblm_registered_resources_count(self) -> builtins.int:
        return pulumi.get(self, "not_dblm_registered_resources_count")

    @property
    @pulumi.getter(name="notSubscribedResourcesCount")
    def not_subscribed_resources_count(self) -> builtins.int:
        return pulumi.get(self, "not_subscribed_resources_count")

    @property
    @pulumi.getter(name="totalResourcesCount")
    def total_resources_count(self) -> builtins.int:
        return pulumi.get(self, "total_resources_count")

    @property
    @pulumi.getter(name="upToDateResourcesCount")
    def up_to_date_resources_count(self) -> builtins.int:
        return pulumi.get(self, "up_to_date_resources_count")


@pulumi.output_type
class GetVulnerabilityAggregatedVulnerabilityDataAggregatedVulnerabilityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetVulnerabilityAggregatedVulnerabilityDataAggregatedVulnerabilityCollectionItemResult']):
        """
        :param Sequence['GetVulnerabilityAggregatedVulnerabilityDataAggregatedVulnerabilityCollectionItemArgs'] items: List of data
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetVulnerabilityAggregatedVulnerabilityDataAggregatedVulnerabilityCollectionItemResult']:
        """
        List of data
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityAggregatedVulnerabilityDataAggregatedVulnerabilityCollectionItemResult(dict):
    def __init__(__self__, *,
                 registered_resources_count: builtins.int,
                 timestamp: builtins.str,
                 vulnerabilities_count: builtins.int):
        """
        :param builtins.int registered_resources_count: Registered databases against which the scan ran.
        :param builtins.str timestamp: UTC timestamp when the scan completed.
        :param builtins.int vulnerabilities_count: Unresolved vulnerabilities that were found by the scan.
        """
        pulumi.set(__self__, "registered_resources_count", registered_resources_count)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "vulnerabilities_count", vulnerabilities_count)

    @property
    @pulumi.getter(name="registeredResourcesCount")
    def registered_resources_count(self) -> builtins.int:
        """
        Registered databases against which the scan ran.
        """
        return pulumi.get(self, "registered_resources_count")

    @property
    @pulumi.getter
    def timestamp(self) -> builtins.str:
        """
        UTC timestamp when the scan completed.
        """
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter(name="vulnerabilitiesCount")
    def vulnerabilities_count(self) -> builtins.int:
        """
        Unresolved vulnerabilities that were found by the scan.
        """
        return pulumi.get(self, "vulnerabilities_count")


@pulumi.output_type
class GetVulnerabilityAggregatedVulnerabilityDataFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVulnerabilityNotificationsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVulnerabilityNotificationsNotificationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetVulnerabilityNotificationsNotificationCollectionItemResult']):
        """
        :param Sequence['GetVulnerabilityNotificationsNotificationCollectionItemArgs'] items: Items for notifications.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetVulnerabilityNotificationsNotificationCollectionItemResult']:
        """
        Items for notifications.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityNotificationsNotificationCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 notification_text: builtins.str,
                 notification_type: builtins.str,
                 time_published: builtins.str):
        """
        :param builtins.str id: Notification identifier.
        :param builtins.str notification_text: Notification text
        :param builtins.str notification_type: Notification type
        :param builtins.str time_published: Published date
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "notification_text", notification_text)
        pulumi.set(__self__, "notification_type", notification_type)
        pulumi.set(__self__, "time_published", time_published)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Notification identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="notificationText")
    def notification_text(self) -> builtins.str:
        """
        Notification text
        """
        return pulumi.get(self, "notification_text")

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> builtins.str:
        """
        Notification type
        """
        return pulumi.get(self, "notification_type")

    @property
    @pulumi.getter(name="timePublished")
    def time_published(self) -> builtins.str:
        """
        Published date
        """
        return pulumi.get(self, "time_published")


@pulumi.output_type
class GetVulnerabilityPatchRecommendationsSummaryResult(dict):
    def __init__(__self__, *,
                 patch_available: builtins.int,
                 total: builtins.int,
                 up_to_date: builtins.int):
        pulumi.set(__self__, "patch_available", patch_available)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "up_to_date", up_to_date)

    @property
    @pulumi.getter(name="patchAvailable")
    def patch_available(self) -> builtins.int:
        return pulumi.get(self, "patch_available")

    @property
    @pulumi.getter
    def total(self) -> builtins.int:
        return pulumi.get(self, "total")

    @property
    @pulumi.getter(name="upToDate")
    def up_to_date(self) -> builtins.int:
        return pulumi.get(self, "up_to_date")


@pulumi.output_type
class GetVulnerabilityResourceResult(dict):
    def __init__(__self__, *,
                 agent_id: builtins.str,
                 connector_id: builtins.str,
                 db_platform_type: builtins.str,
                 db_version: builtins.str,
                 deployment_type: builtins.str,
                 host_infos: Sequence['outputs.GetVulnerabilityResourceHostInfoResult'],
                 is_cluster_db: builtins.bool,
                 license_type: builtins.str,
                 resource_compartment_id: builtins.str,
                 resource_id: builtins.str,
                 resource_name: builtins.str,
                 resource_type: builtins.str):
        """
        :param builtins.str agent_id: The agent Id of the agent managing the resource.
        :param builtins.str connector_id: The connector Id of the resource.
        :param builtins.str db_platform_type: The platform type of the resource.
        :param builtins.str db_version: The version of the resource.
        :param builtins.str deployment_type: The deployment type of the resource.
        :param Sequence['GetVulnerabilityResourceHostInfoArgs'] host_infos: host info objects
        :param builtins.bool is_cluster_db: True if it is a cluster db.
        :param builtins.str license_type: The License Type of the resource.
        :param builtins.str resource_compartment_id: The compartmentId of the resource.
        :param builtins.str resource_id: The Id of the resource.
        :param builtins.str resource_name: The name of the resource.
        :param builtins.str resource_type: The type of the resource.
        """
        pulumi.set(__self__, "agent_id", agent_id)
        pulumi.set(__self__, "connector_id", connector_id)
        pulumi.set(__self__, "db_platform_type", db_platform_type)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "deployment_type", deployment_type)
        pulumi.set(__self__, "host_infos", host_infos)
        pulumi.set(__self__, "is_cluster_db", is_cluster_db)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "resource_compartment_id", resource_compartment_id)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> builtins.str:
        """
        The agent Id of the agent managing the resource.
        """
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> builtins.str:
        """
        The connector Id of the resource.
        """
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="dbPlatformType")
    def db_platform_type(self) -> builtins.str:
        """
        The platform type of the resource.
        """
        return pulumi.get(self, "db_platform_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> builtins.str:
        """
        The version of the resource.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> builtins.str:
        """
        The deployment type of the resource.
        """
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="hostInfos")
    def host_infos(self) -> Sequence['outputs.GetVulnerabilityResourceHostInfoResult']:
        """
        host info objects
        """
        return pulumi.get(self, "host_infos")

    @property
    @pulumi.getter(name="isClusterDb")
    def is_cluster_db(self) -> builtins.bool:
        """
        True if it is a cluster db.
        """
        return pulumi.get(self, "is_cluster_db")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> builtins.str:
        """
        The License Type of the resource.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="resourceCompartmentId")
    def resource_compartment_id(self) -> builtins.str:
        """
        The compartmentId of the resource.
        """
        return pulumi.get(self, "resource_compartment_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The Id of the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> builtins.str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        The type of the resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetVulnerabilityResourceHostInfoResult(dict):
    def __init__(__self__, *,
                 host_cores: builtins.int,
                 host_name: builtins.str):
        """
        :param builtins.int host_cores: Number of host cores.
        :param builtins.str host_name: The name of the host.
        """
        pulumi.set(__self__, "host_cores", host_cores)
        pulumi.set(__self__, "host_name", host_name)

    @property
    @pulumi.getter(name="hostCores")
    def host_cores(self) -> builtins.int:
        """
        Number of host cores.
        """
        return pulumi.get(self, "host_cores")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> builtins.str:
        """
        The name of the host.
        """
        return pulumi.get(self, "host_name")


@pulumi.output_type
class GetVulnerabilityResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param builtins.str name: The name of the resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVulnerabilityResourcesSummaryResult(dict):
    def __init__(__self__, *,
                 not_registered_resources_count: builtins.int,
                 registered_resources_count: builtins.int,
                 total_resources_count: builtins.int,
                 vulnerable_resources_count: builtins.int,
                 clean_resources_count: Optional[builtins.int] = None,
                 error_resources_count: Optional[builtins.int] = None):
        pulumi.set(__self__, "not_registered_resources_count", not_registered_resources_count)
        pulumi.set(__self__, "registered_resources_count", registered_resources_count)
        pulumi.set(__self__, "total_resources_count", total_resources_count)
        pulumi.set(__self__, "vulnerable_resources_count", vulnerable_resources_count)
        if clean_resources_count is not None:
            pulumi.set(__self__, "clean_resources_count", clean_resources_count)
        if error_resources_count is not None:
            pulumi.set(__self__, "error_resources_count", error_resources_count)

    @property
    @pulumi.getter(name="notRegisteredResourcesCount")
    def not_registered_resources_count(self) -> builtins.int:
        return pulumi.get(self, "not_registered_resources_count")

    @property
    @pulumi.getter(name="registeredResourcesCount")
    def registered_resources_count(self) -> builtins.int:
        return pulumi.get(self, "registered_resources_count")

    @property
    @pulumi.getter(name="totalResourcesCount")
    def total_resources_count(self) -> builtins.int:
        return pulumi.get(self, "total_resources_count")

    @property
    @pulumi.getter(name="vulnerableResourcesCount")
    def vulnerable_resources_count(self) -> builtins.int:
        return pulumi.get(self, "vulnerable_resources_count")

    @property
    @pulumi.getter(name="cleanResourcesCount")
    def clean_resources_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "clean_resources_count")

    @property
    @pulumi.getter(name="errorResourcesCount")
    def error_resources_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "error_resources_count")


@pulumi.output_type
class GetVulnerabilityResourcesVulnerabilityResourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemResult']):
        """
        :param Sequence['GetVulnerabilityResourcesVulnerabilityResourceCollectionItemArgs'] items: Collection of assessed resources
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemResult']:
        """
        Collection of assessed resources
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityResourcesVulnerabilityResourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 child_pdbs: Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemChildPdbResult'],
                 id: builtins.str,
                 image_id: builtins.str,
                 metric_errors: Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemMetricErrorResult'],
                 name: builtins.str,
                 patch_recommendations_details: Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsDetailResult'],
                 patch_recommendations_summaries: Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsSummaryResult'],
                 platform: builtins.str,
                 release: builtins.str,
                 subscribed_image: builtins.str,
                 time_config_collected: builtins.str,
                 time_scan_ended: builtins.str,
                 version: builtins.str,
                 vulnerabilities_summaries: Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemVulnerabilitiesSummaryResult']):
        """
        :param Sequence['GetVulnerabilityResourcesVulnerabilityResourceCollectionItemChildPdbArgs'] child_pdbs: PDBs for a CDB.
        :param builtins.str id: The resource ID for this resource.
        :param builtins.str image_id: Identifier for the resource is subscribed to.
        :param Sequence['GetVulnerabilityResourcesVulnerabilityResourceCollectionItemMetricErrorArgs'] metric_errors: Metric errors.
        :param builtins.str name: The name of the resource.
        :param Sequence['GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsDetailArgs'] patch_recommendations_details: List of the patch recommendations for databases
        :param Sequence['GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsSummaryArgs'] patch_recommendations_summaries: Summary of the patch recommendations for databases.
        :param builtins.str platform: A string representing the platform of the resource.
        :param builtins.str release: A string representing the release of the resource.
        :param builtins.str subscribed_image: Image the resource is subscribed to.
        :param builtins.str time_config_collected: Time when the latest configuration collection happened.
        :param builtins.str time_scan_ended: Time when the latest scan happened for the resource.
        :param builtins.str version: A string representing the version of the resource.
        :param Sequence['GetVulnerabilityResourcesVulnerabilityResourceCollectionItemVulnerabilitiesSummaryArgs'] vulnerabilities_summaries: Summary of the resources that are registered and may or may not have vulnerabilities.
        """
        pulumi.set(__self__, "child_pdbs", child_pdbs)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "metric_errors", metric_errors)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "patch_recommendations_details", patch_recommendations_details)
        pulumi.set(__self__, "patch_recommendations_summaries", patch_recommendations_summaries)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "release", release)
        pulumi.set(__self__, "subscribed_image", subscribed_image)
        pulumi.set(__self__, "time_config_collected", time_config_collected)
        pulumi.set(__self__, "time_scan_ended", time_scan_ended)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vulnerabilities_summaries", vulnerabilities_summaries)

    @property
    @pulumi.getter(name="childPdbs")
    def child_pdbs(self) -> Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemChildPdbResult']:
        """
        PDBs for a CDB.
        """
        return pulumi.get(self, "child_pdbs")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The resource ID for this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> builtins.str:
        """
        Identifier for the resource is subscribed to.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="metricErrors")
    def metric_errors(self) -> Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemMetricErrorResult']:
        """
        Metric errors.
        """
        return pulumi.get(self, "metric_errors")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="patchRecommendationsDetails")
    def patch_recommendations_details(self) -> Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsDetailResult']:
        """
        List of the patch recommendations for databases
        """
        return pulumi.get(self, "patch_recommendations_details")

    @property
    @pulumi.getter(name="patchRecommendationsSummaries")
    def patch_recommendations_summaries(self) -> Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsSummaryResult']:
        """
        Summary of the patch recommendations for databases.
        """
        return pulumi.get(self, "patch_recommendations_summaries")

    @property
    @pulumi.getter
    def platform(self) -> builtins.str:
        """
        A string representing the platform of the resource.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def release(self) -> builtins.str:
        """
        A string representing the release of the resource.
        """
        return pulumi.get(self, "release")

    @property
    @pulumi.getter(name="subscribedImage")
    def subscribed_image(self) -> builtins.str:
        """
        Image the resource is subscribed to.
        """
        return pulumi.get(self, "subscribed_image")

    @property
    @pulumi.getter(name="timeConfigCollected")
    def time_config_collected(self) -> builtins.str:
        """
        Time when the latest configuration collection happened.
        """
        return pulumi.get(self, "time_config_collected")

    @property
    @pulumi.getter(name="timeScanEnded")
    def time_scan_ended(self) -> builtins.str:
        """
        Time when the latest scan happened for the resource.
        """
        return pulumi.get(self, "time_scan_ended")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        A string representing the version of the resource.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vulnerabilitiesSummaries")
    def vulnerabilities_summaries(self) -> Sequence['outputs.GetVulnerabilityResourcesVulnerabilityResourceCollectionItemVulnerabilitiesSummaryResult']:
        """
        Summary of the resources that are registered and may or may not have vulnerabilities.
        """
        return pulumi.get(self, "vulnerabilities_summaries")


@pulumi.output_type
class GetVulnerabilityResourcesVulnerabilityResourceCollectionItemChildPdbResult(dict):
    def __init__(__self__, *,
                 last_changed_by: builtins.str,
                 name: builtins.str,
                 open_mode: builtins.str,
                 pdb_id: builtins.str,
                 recovery_status: builtins.str,
                 restricted: builtins.str):
        """
        :param builtins.str last_changed_by: Last changed by
        :param builtins.str name: The name of the resource.
        :param builtins.str open_mode: Open mode
        :param builtins.str pdb_id: Identifier for the pluggable database.
        :param builtins.str recovery_status: Recovery status
        :param builtins.str restricted: Restricted
        """
        pulumi.set(__self__, "last_changed_by", last_changed_by)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "open_mode", open_mode)
        pulumi.set(__self__, "pdb_id", pdb_id)
        pulumi.set(__self__, "recovery_status", recovery_status)
        pulumi.set(__self__, "restricted", restricted)

    @property
    @pulumi.getter(name="lastChangedBy")
    def last_changed_by(self) -> builtins.str:
        """
        Last changed by
        """
        return pulumi.get(self, "last_changed_by")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openMode")
    def open_mode(self) -> builtins.str:
        """
        Open mode
        """
        return pulumi.get(self, "open_mode")

    @property
    @pulumi.getter(name="pdbId")
    def pdb_id(self) -> builtins.str:
        """
        Identifier for the pluggable database.
        """
        return pulumi.get(self, "pdb_id")

    @property
    @pulumi.getter(name="recoveryStatus")
    def recovery_status(self) -> builtins.str:
        """
        Recovery status
        """
        return pulumi.get(self, "recovery_status")

    @property
    @pulumi.getter
    def restricted(self) -> builtins.str:
        """
        Restricted
        """
        return pulumi.get(self, "restricted")


@pulumi.output_type
class GetVulnerabilityResourcesVulnerabilityResourceCollectionItemMetricErrorResult(dict):
    def __init__(__self__, *,
                 content_type: builtins.str,
                 data: builtins.str,
                 error_type: builtins.str,
                 level: builtins.str,
                 subject: builtins.str,
                 time_generated: builtins.str):
        """
        :param builtins.str content_type: Content type
        :param builtins.str data: Data
        :param builtins.str error_type: Error type
        :param builtins.str level: Level
        :param builtins.str subject: Subject
        :param builtins.str time_generated: Time the error record was generated
        """
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "error_type", error_type)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "time_generated", time_generated)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> builtins.str:
        """
        Content type
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def data(self) -> builtins.str:
        """
        Data
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> builtins.str:
        """
        Error type
        """
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter
    def level(self) -> builtins.str:
        """
        Level
        """
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def subject(self) -> builtins.str:
        """
        Subject
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="timeGenerated")
    def time_generated(self) -> builtins.str:
        """
        Time the error record was generated
        """
        return pulumi.get(self, "time_generated")


@pulumi.output_type
class GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsDetailResult(dict):
    def __init__(__self__, *,
                 abstract_text: builtins.str,
                 classification_name: builtins.str,
                 has_fix_for_cve: builtins.bool,
                 patch_name: builtins.str,
                 time_evaluated: builtins.str,
                 time_released: builtins.str):
        """
        :param builtins.str abstract_text: Description of the patch recommendation.
        :param builtins.str classification_name: Classification of the patch recommendation.
        :param builtins.bool has_fix_for_cve: If the patch has a fix for a CVE.
        :param builtins.str patch_name: Name of the patch recommendation.
        :param builtins.str time_evaluated: Evaluation date for the patch recommendation.
        :param builtins.str time_released: Release date for the patch.
        """
        pulumi.set(__self__, "abstract_text", abstract_text)
        pulumi.set(__self__, "classification_name", classification_name)
        pulumi.set(__self__, "has_fix_for_cve", has_fix_for_cve)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "time_evaluated", time_evaluated)
        pulumi.set(__self__, "time_released", time_released)

    @property
    @pulumi.getter(name="abstractText")
    def abstract_text(self) -> builtins.str:
        """
        Description of the patch recommendation.
        """
        return pulumi.get(self, "abstract_text")

    @property
    @pulumi.getter(name="classificationName")
    def classification_name(self) -> builtins.str:
        """
        Classification of the patch recommendation.
        """
        return pulumi.get(self, "classification_name")

    @property
    @pulumi.getter(name="hasFixForCve")
    def has_fix_for_cve(self) -> builtins.bool:
        """
        If the patch has a fix for a CVE.
        """
        return pulumi.get(self, "has_fix_for_cve")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Name of the patch recommendation.
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="timeEvaluated")
    def time_evaluated(self) -> builtins.str:
        """
        Evaluation date for the patch recommendation.
        """
        return pulumi.get(self, "time_evaluated")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        Release date for the patch.
        """
        return pulumi.get(self, "time_released")


@pulumi.output_type
class GetVulnerabilityResourcesVulnerabilityResourceCollectionItemPatchRecommendationsSummaryResult(dict):
    def __init__(__self__, *,
                 patch_available: builtins.int,
                 total: builtins.int,
                 up_to_date: builtins.int):
        pulumi.set(__self__, "patch_available", patch_available)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "up_to_date", up_to_date)

    @property
    @pulumi.getter(name="patchAvailable")
    def patch_available(self) -> builtins.int:
        return pulumi.get(self, "patch_available")

    @property
    @pulumi.getter
    def total(self) -> builtins.int:
        return pulumi.get(self, "total")

    @property
    @pulumi.getter(name="upToDate")
    def up_to_date(self) -> builtins.int:
        return pulumi.get(self, "up_to_date")


@pulumi.output_type
class GetVulnerabilityResourcesVulnerabilityResourceCollectionItemVulnerabilitiesSummaryResult(dict):
    def __init__(__self__, *,
                 critical: builtins.int,
                 high: builtins.int,
                 info: builtins.int,
                 low: builtins.int,
                 medium: builtins.int,
                 total: builtins.int):
        pulumi.set(__self__, "critical", critical)
        pulumi.set(__self__, "high", high)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "low", low)
        pulumi.set(__self__, "medium", medium)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def critical(self) -> builtins.int:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def high(self) -> builtins.int:
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def info(self) -> builtins.int:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def low(self) -> builtins.int:
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> builtins.int:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter
    def total(self) -> builtins.int:
        return pulumi.get(self, "total")


@pulumi.output_type
class GetVulnerabilityScansFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVulnerabilityScansVulnerabilityScanCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetVulnerabilityScansVulnerabilityScanCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetVulnerabilityScansVulnerabilityScanCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityScansVulnerabilityScanCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_ended: builtins.str,
                 vulnerability_scan_message: builtins.str,
                 vulnerability_scan_status: builtins.str,
                 vulnerability_scan_type: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VulnerabilityScan.
        :param builtins.str state: The current state of the VulnerabilityScan.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time the VulnerabilityScan was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_ended: The date and time the VulnerabilityScan was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str vulnerability_scan_message: The message of the vulnerability scan status.
        :param builtins.str vulnerability_scan_status: Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
        :param builtins.str vulnerability_scan_type: The scan type to use is 'CVE', 'PATCH' or 'IMAGE_PATCH'.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "vulnerability_scan_message", vulnerability_scan_message)
        pulumi.set(__self__, "vulnerability_scan_status", vulnerability_scan_status)
        pulumi.set(__self__, "vulnerability_scan_type", vulnerability_scan_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the VulnerabilityScan.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the VulnerabilityScan.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the VulnerabilityScan was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> builtins.str:
        """
        The date and time the VulnerabilityScan was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="vulnerabilityScanMessage")
    def vulnerability_scan_message(self) -> builtins.str:
        """
        The message of the vulnerability scan status.
        """
        return pulumi.get(self, "vulnerability_scan_message")

    @property
    @pulumi.getter(name="vulnerabilityScanStatus")
    def vulnerability_scan_status(self) -> builtins.str:
        """
        Filter by one or more vulnerability scan status. Possible values are completed, running, completed with error, aborted.
        """
        return pulumi.get(self, "vulnerability_scan_status")

    @property
    @pulumi.getter(name="vulnerabilityScanType")
    def vulnerability_scan_type(self) -> builtins.str:
        """
        The scan type to use is 'CVE', 'PATCH' or 'IMAGE_PATCH'.
        """
        return pulumi.get(self, "vulnerability_scan_type")


@pulumi.output_type
class GetVulnerabilityVulnerabilitiesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetVulnerabilityVulnerabilitiesSummaryResult(dict):
    def __init__(__self__, *,
                 critical: builtins.int,
                 high: builtins.int,
                 info: builtins.int,
                 low: builtins.int,
                 medium: builtins.int,
                 total: builtins.int):
        pulumi.set(__self__, "critical", critical)
        pulumi.set(__self__, "high", high)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "low", low)
        pulumi.set(__self__, "medium", medium)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def critical(self) -> builtins.int:
        return pulumi.get(self, "critical")

    @property
    @pulumi.getter
    def high(self) -> builtins.int:
        return pulumi.get(self, "high")

    @property
    @pulumi.getter
    def info(self) -> builtins.int:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter
    def low(self) -> builtins.int:
        return pulumi.get(self, "low")

    @property
    @pulumi.getter
    def medium(self) -> builtins.int:
        return pulumi.get(self, "medium")

    @property
    @pulumi.getter
    def total(self) -> builtins.int:
        return pulumi.get(self, "total")


@pulumi.output_type
class GetVulnerabilityVulnerabilitiesVulnerabilityCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetVulnerabilityVulnerabilitiesVulnerabilityCollectionItemResult']):
        """
        :param Sequence['GetVulnerabilityVulnerabilitiesVulnerabilityCollectionItemArgs'] items: Collection of vulnerability summary items.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetVulnerabilityVulnerabilitiesVulnerabilityCollectionItemResult']:
        """
        Collection of vulnerability summary items.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetVulnerabilityVulnerabilitiesVulnerabilityCollectionItemResult(dict):
    def __init__(__self__, *,
                 cve_id: builtins.str,
                 description: builtins.str,
                 risk_level: builtins.str,
                 score: builtins.str,
                 vulnerable_resources_count: builtins.int):
        """
        :param builtins.str cve_id: CVE vulnerability ID
        :param builtins.str description: Vulnerability description
        :param builtins.str risk_level: Risk level enumeration
        :param builtins.str score: Vulnerability score
        :param builtins.int vulnerable_resources_count: Number of vulnerable resources
        """
        pulumi.set(__self__, "cve_id", cve_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "risk_level", risk_level)
        pulumi.set(__self__, "score", score)
        pulumi.set(__self__, "vulnerable_resources_count", vulnerable_resources_count)

    @property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> builtins.str:
        """
        CVE vulnerability ID
        """
        return pulumi.get(self, "cve_id")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Vulnerability description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> builtins.str:
        """
        Risk level enumeration
        """
        return pulumi.get(self, "risk_level")

    @property
    @pulumi.getter
    def score(self) -> builtins.str:
        """
        Vulnerability score
        """
        return pulumi.get(self, "score")

    @property
    @pulumi.getter(name="vulnerableResourcesCount")
    def vulnerable_resources_count(self) -> builtins.int:
        """
        Number of vulnerable resources
        """
        return pulumi.get(self, "vulnerable_resources_count")


