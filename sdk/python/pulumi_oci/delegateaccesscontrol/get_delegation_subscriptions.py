# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDelegationSubscriptionsResult',
    'AwaitableGetDelegationSubscriptionsResult',
    'get_delegation_subscriptions',
    'get_delegation_subscriptions_output',
]

@pulumi.output_type
class GetDelegationSubscriptionsResult:
    """
    A collection of values returned by getDelegationSubscriptions.
    """
    def __init__(__self__, compartment_id=None, delegation_subscription_summary_collections=None, display_name=None, filters=None, id=None, state=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if delegation_subscription_summary_collections and not isinstance(delegation_subscription_summary_collections, list):
            raise TypeError("Expected argument 'delegation_subscription_summary_collections' to be a list")
        pulumi.set(__self__, "delegation_subscription_summary_collections", delegation_subscription_summary_collections)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment that contains the Delegation Subscription.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="delegationSubscriptionSummaryCollections")
    def delegation_subscription_summary_collections(self) -> Sequence['outputs.GetDelegationSubscriptionsDelegationSubscriptionSummaryCollectionResult']:
        """
        The list of delegation_subscription_summary_collection.
        """
        return pulumi.get(self, "delegation_subscription_summary_collections")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetDelegationSubscriptionsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current lifecycle state of the Service Provider.
        """
        return pulumi.get(self, "state")


class AwaitableGetDelegationSubscriptionsResult(GetDelegationSubscriptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDelegationSubscriptionsResult(
            compartment_id=self.compartment_id,
            delegation_subscription_summary_collections=self.delegation_subscription_summary_collections,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            state=self.state)


def get_delegation_subscriptions(compartment_id: Optional[str] = None,
                                 display_name: Optional[str] = None,
                                 filters: Optional[Sequence[Union['GetDelegationSubscriptionsFilterArgs', 'GetDelegationSubscriptionsFilterArgsDict']]] = None,
                                 state: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDelegationSubscriptionsResult:
    """
    This data source provides the list of Delegation Subscriptions in Oracle Cloud Infrastructure Delegate Access Control service.

    Lists the Delegation Subscriptions in Delegation Control.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_delegation_subscriptions = oci.DelegateAccessControl.get_delegation_subscriptions(compartment_id=compartment_id,
        display_name=delegation_subscription_display_name,
        state=delegation_subscription_state)
    ```


    :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    :param str display_name: A filter to return Delegation Subscription resources that match the given display name.
    :param str state: A filter to return only Delegation Subscription resources whose lifecycleState matches the given Delegation Subscription lifecycle state.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DelegateAccessControl/getDelegationSubscriptions:getDelegationSubscriptions', __args__, opts=opts, typ=GetDelegationSubscriptionsResult).value

    return AwaitableGetDelegationSubscriptionsResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        delegation_subscription_summary_collections=pulumi.get(__ret__, 'delegation_subscription_summary_collections'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        state=pulumi.get(__ret__, 'state'))
def get_delegation_subscriptions_output(compartment_id: Optional[pulumi.Input[str]] = None,
                                        display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                        filters: Optional[pulumi.Input[Optional[Sequence[Union['GetDelegationSubscriptionsFilterArgs', 'GetDelegationSubscriptionsFilterArgsDict']]]]] = None,
                                        state: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDelegationSubscriptionsResult]:
    """
    This data source provides the list of Delegation Subscriptions in Oracle Cloud Infrastructure Delegate Access Control service.

    Lists the Delegation Subscriptions in Delegation Control.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_delegation_subscriptions = oci.DelegateAccessControl.get_delegation_subscriptions(compartment_id=compartment_id,
        display_name=delegation_subscription_display_name,
        state=delegation_subscription_state)
    ```


    :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
    :param str display_name: A filter to return Delegation Subscription resources that match the given display name.
    :param str state: A filter to return only Delegation Subscription resources whose lifecycleState matches the given Delegation Subscription lifecycle state.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:DelegateAccessControl/getDelegationSubscriptions:getDelegationSubscriptions', __args__, opts=opts, typ=GetDelegationSubscriptionsResult)
    return __ret__.apply(lambda __response__: GetDelegationSubscriptionsResult(
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        delegation_subscription_summary_collections=pulumi.get(__response__, 'delegation_subscription_summary_collections'),
        display_name=pulumi.get(__response__, 'display_name'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        state=pulumi.get(__response__, 'state')))
