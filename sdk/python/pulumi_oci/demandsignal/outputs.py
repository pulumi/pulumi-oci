# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'OccDemandSignalOccDemandSignal',
    'OccDemandSignalOccDemandSignalValue',
    'OccDemandSignalPatchOperation',
    'GetOccDemandSignalOccDemandSignalResult',
    'GetOccDemandSignalOccDemandSignalValueResult',
    'GetOccDemandSignalPatchOperationResult',
    'GetOccDemandSignalsFilterResult',
    'GetOccDemandSignalsOccDemandSignalCollectionResult',
    'GetOccDemandSignalsOccDemandSignalCollectionItemResult',
    'GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalResult',
    'GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalValueResult',
    'GetOccDemandSignalsOccDemandSignalCollectionItemPatchOperationResult',
]

@pulumi.output_type
class OccDemandSignalOccDemandSignal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OccDemandSignalOccDemandSignal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OccDemandSignalOccDemandSignal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OccDemandSignalOccDemandSignal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 units: str,
                 values: Sequence['outputs.OccDemandSignalOccDemandSignalValue']):
        """
        :param str resource_type: The name of the resource for the data.
        :param str units: The units of the data.
        :param Sequence['OccDemandSignalOccDemandSignalValueArgs'] values: The values of forecast.
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "units", units)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The name of the resource for the data.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def units(self) -> str:
        """
        The units of the data.
        """
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.OccDemandSignalOccDemandSignalValue']:
        """
        The values of forecast.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class OccDemandSignalOccDemandSignalValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeExpected":
            suggest = "time_expected"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OccDemandSignalOccDemandSignalValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OccDemandSignalOccDemandSignalValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OccDemandSignalOccDemandSignalValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 time_expected: str,
                 value: float,
                 comments: Optional[str] = None):
        """
        :param str time_expected: The date of the Demand Signal Value.
        :param float value: The Demand Signal Value.
        :param str comments: Space provided for users to make comments regarding the value.
        """
        pulumi.set(__self__, "time_expected", time_expected)
        pulumi.set(__self__, "value", value)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)

    @property
    @pulumi.getter(name="timeExpected")
    def time_expected(self) -> str:
        """
        The date of the Demand Signal Value.
        """
        return pulumi.get(self, "time_expected")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        The Demand Signal Value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        """
        Space provided for users to make comments regarding the value.
        """
        return pulumi.get(self, "comments")


@pulumi.output_type
class OccDemandSignalPatchOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"
        elif key == "selectedItem":
            suggest = "selected_item"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OccDemandSignalPatchOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OccDemandSignalPatchOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OccDemandSignalPatchOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_: str,
                 operation: str,
                 selection: str,
                 value: Mapping[str, Any],
                 position: Optional[str] = None,
                 selected_item: Optional[str] = None):
        """
        :param str from_: (Updatable)
        :param str operation: (Updatable) The operation can be one of these values: `INSERT`, `INSERT_MULTIPLE`, `MERGE`, `MOVE`, `PROHIBIT`, `REMOVE`, `REPLACE`, `REQUIRE`
        :param str selection: (Updatable)
        :param Mapping[str, Any] value: (Updatable)
        :param str position: (Updatable)
        :param str selected_item: (Updatable)
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "value", value)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if selected_item is not None:
            pulumi.set(__self__, "selected_item", selected_item)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        """
        (Updatable)
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        (Updatable) The operation can be one of these values: `INSERT`, `INSERT_MULTIPLE`, `MERGE`, `MOVE`, `PROHIBIT`, `REMOVE`, `REPLACE`, `REQUIRE`
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def selection(self) -> str:
        """
        (Updatable)
        """
        return pulumi.get(self, "selection")

    @property
    @pulumi.getter
    def value(self) -> Mapping[str, Any]:
        """
        (Updatable)
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def position(self) -> Optional[str]:
        """
        (Updatable)
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="selectedItem")
    def selected_item(self) -> Optional[str]:
        """
        (Updatable)
        """
        return pulumi.get(self, "selected_item")


@pulumi.output_type
class GetOccDemandSignalOccDemandSignalResult(dict):
    def __init__(__self__, *,
                 resource_type: str,
                 units: str,
                 values: Sequence['outputs.GetOccDemandSignalOccDemandSignalValueResult']):
        """
        :param str resource_type: The name of the resource for the data.
        :param str units: The units of the data.
        :param Sequence['GetOccDemandSignalOccDemandSignalValueArgs'] values: The values of forecast.
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "units", units)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The name of the resource for the data.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def units(self) -> str:
        """
        The units of the data.
        """
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetOccDemandSignalOccDemandSignalValueResult']:
        """
        The values of forecast.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetOccDemandSignalOccDemandSignalValueResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 time_expected: str,
                 value: float):
        """
        :param str comments: Space provided for users to make comments regarding the value.
        :param str time_expected: The date of the Demand Signal Value.
        :param float value: The Demand Signal Value.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "time_expected", time_expected)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Space provided for users to make comments regarding the value.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="timeExpected")
    def time_expected(self) -> str:
        """
        The date of the Demand Signal Value.
        """
        return pulumi.get(self, "time_expected")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        The Demand Signal Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOccDemandSignalPatchOperationResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 operation: str,
                 position: str,
                 selected_item: str,
                 selection: str,
                 value: Mapping[str, Any]):
        """
        :param Mapping[str, Any] value: The Demand Signal Value.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "selected_item", selected_item)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def position(self) -> str:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="selectedItem")
    def selected_item(self) -> str:
        return pulumi.get(self, "selected_item")

    @property
    @pulumi.getter
    def selection(self) -> str:
        return pulumi.get(self, "selection")

    @property
    @pulumi.getter
    def value(self) -> Mapping[str, Any]:
        """
        The Demand Signal Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOccDemandSignalsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param Sequence[str] values: The values of forecast.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The values of forecast.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOccDemandSignalsOccDemandSignalCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOccDemandSignalsOccDemandSignalCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOccDemandSignalsOccDemandSignalCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOccDemandSignalsOccDemandSignalCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 is_active: bool,
                 lifecycle_details: str,
                 occ_demand_signal_id: str,
                 occ_demand_signals: Sequence['outputs.GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalResult'],
                 patch_operations: Sequence['outputs.GetOccDemandSignalsOccDemandSignalCollectionItemPatchOperationResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A filter to return only resources that match the given display name exactly.
        :param Mapping[str, Any] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        :param str id: The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OccDemandSignal.
        :param bool is_active: Indicator of whether to share the data with Oracle.
        :param str lifecycle_details: A message that describes the current state of the OccDemandSignal in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param Sequence['GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalArgs'] occ_demand_signals: The OccDemandSignal data.
        :param str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, Any] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the OccDemandSignal was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param str time_updated: The date and time the OccDemandSignal was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "occ_demand_signal_id", occ_demand_signal_id)
        pulumi.set(__self__, "occ_demand_signals", occ_demand_signals)
        pulumi.set(__self__, "patch_operations", patch_operations)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name exactly.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the OccDemandSignal.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> bool:
        """
        Indicator of whether to share the data with Oracle.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message that describes the current state of the OccDemandSignal in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="occDemandSignalId")
    def occ_demand_signal_id(self) -> str:
        return pulumi.get(self, "occ_demand_signal_id")

    @property
    @pulumi.getter(name="occDemandSignals")
    def occ_demand_signals(self) -> Sequence['outputs.GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalResult']:
        """
        The OccDemandSignal data.
        """
        return pulumi.get(self, "occ_demand_signals")

    @property
    @pulumi.getter(name="patchOperations")
    def patch_operations(self) -> Sequence['outputs.GetOccDemandSignalsOccDemandSignalCollectionItemPatchOperationResult']:
        return pulumi.get(self, "patch_operations")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the OccDemandSignal was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the OccDemandSignal was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalResult(dict):
    def __init__(__self__, *,
                 resource_type: str,
                 units: str,
                 values: Sequence['outputs.GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalValueResult']):
        """
        :param str resource_type: The name of the resource for the data.
        :param str units: The units of the data.
        :param Sequence['GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalValueArgs'] values: The values of forecast.
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "units", units)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        The name of the resource for the data.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def units(self) -> str:
        """
        The units of the data.
        """
        return pulumi.get(self, "units")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalValueResult']:
        """
        The values of forecast.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetOccDemandSignalsOccDemandSignalCollectionItemOccDemandSignalValueResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 time_expected: str,
                 value: float):
        """
        :param str comments: Space provided for users to make comments regarding the value.
        :param str time_expected: The date of the Demand Signal Value.
        :param float value: The Demand Signal Value.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "time_expected", time_expected)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        Space provided for users to make comments regarding the value.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="timeExpected")
    def time_expected(self) -> str:
        """
        The date of the Demand Signal Value.
        """
        return pulumi.get(self, "time_expected")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        The Demand Signal Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetOccDemandSignalsOccDemandSignalCollectionItemPatchOperationResult(dict):
    def __init__(__self__, *,
                 from_: str,
                 operation: str,
                 position: str,
                 selected_item: str,
                 selection: str,
                 value: Mapping[str, Any]):
        """
        :param Mapping[str, Any] value: The Demand Signal Value.
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "selected_item", selected_item)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> str:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def position(self) -> str:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="selectedItem")
    def selected_item(self) -> str:
        return pulumi.get(self, "selected_item")

    @property
    @pulumi.getter
    def selection(self) -> str:
        return pulumi.get(self, "selection")

    @property
    @pulumi.getter
    def value(self) -> Mapping[str, Any]:
        """
        The Demand Signal Value.
        """
        return pulumi.get(self, "value")


