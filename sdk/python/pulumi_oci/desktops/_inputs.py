# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DesktopPoolAvailabilityPolicyArgs',
    'DesktopPoolAvailabilityPolicyStartScheduleArgs',
    'DesktopPoolAvailabilityPolicyStopScheduleArgs',
    'DesktopPoolDevicePolicyArgs',
    'DesktopPoolImageArgs',
    'DesktopPoolNetworkConfigurationArgs',
    'GetDesktopPoolDesktopsFilterArgs',
    'GetDesktopPoolVolumesFilterArgs',
    'GetDesktopPoolsFilterArgs',
    'GetDesktopsFilterArgs',
]

@pulumi.input_type
class DesktopPoolAvailabilityPolicyArgs:
    def __init__(__self__, *,
                 start_schedule: pulumi.Input['DesktopPoolAvailabilityPolicyStartScheduleArgs'],
                 stop_schedule: pulumi.Input['DesktopPoolAvailabilityPolicyStopScheduleArgs']):
        """
        :param pulumi.Input['DesktopPoolAvailabilityPolicyStartScheduleArgs'] start_schedule: (Updatable) Provides the schedule information for a desktop.
        :param pulumi.Input['DesktopPoolAvailabilityPolicyStopScheduleArgs'] stop_schedule: (Updatable) Provides the schedule information for a desktop.
        """
        pulumi.set(__self__, "start_schedule", start_schedule)
        pulumi.set(__self__, "stop_schedule", stop_schedule)

    @property
    @pulumi.getter(name="startSchedule")
    def start_schedule(self) -> pulumi.Input['DesktopPoolAvailabilityPolicyStartScheduleArgs']:
        """
        (Updatable) Provides the schedule information for a desktop.
        """
        return pulumi.get(self, "start_schedule")

    @start_schedule.setter
    def start_schedule(self, value: pulumi.Input['DesktopPoolAvailabilityPolicyStartScheduleArgs']):
        pulumi.set(self, "start_schedule", value)

    @property
    @pulumi.getter(name="stopSchedule")
    def stop_schedule(self) -> pulumi.Input['DesktopPoolAvailabilityPolicyStopScheduleArgs']:
        """
        (Updatable) Provides the schedule information for a desktop.
        """
        return pulumi.get(self, "stop_schedule")

    @stop_schedule.setter
    def stop_schedule(self, value: pulumi.Input['DesktopPoolAvailabilityPolicyStopScheduleArgs']):
        pulumi.set(self, "stop_schedule", value)


@pulumi.input_type
class DesktopPoolAvailabilityPolicyStartScheduleArgs:
    def __init__(__self__, *,
                 cron_expression: pulumi.Input[str],
                 timezone: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cron_expression: (Updatable) A cron expression describing the desktop's schedule.
        :param pulumi.Input[str] timezone: (Updatable) The timezone of the desktop's schedule.
        """
        pulumi.set(__self__, "cron_expression", cron_expression)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> pulumi.Input[str]:
        """
        (Updatable) A cron expression describing the desktop's schedule.
        """
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "cron_expression", value)

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Input[str]:
        """
        (Updatable) The timezone of the desktop's schedule.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: pulumi.Input[str]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class DesktopPoolAvailabilityPolicyStopScheduleArgs:
    def __init__(__self__, *,
                 cron_expression: pulumi.Input[str],
                 timezone: pulumi.Input[str]):
        """
        :param pulumi.Input[str] cron_expression: (Updatable) A cron expression describing the desktop's schedule.
        :param pulumi.Input[str] timezone: (Updatable) The timezone of the desktop's schedule.
        """
        pulumi.set(__self__, "cron_expression", cron_expression)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> pulumi.Input[str]:
        """
        (Updatable) A cron expression describing the desktop's schedule.
        """
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "cron_expression", value)

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Input[str]:
        """
        (Updatable) The timezone of the desktop's schedule.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: pulumi.Input[str]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class DesktopPoolDevicePolicyArgs:
    def __init__(__self__, *,
                 audio_mode: pulumi.Input[str],
                 cdm_mode: pulumi.Input[str],
                 clipboard_mode: pulumi.Input[str],
                 is_display_enabled: pulumi.Input[bool],
                 is_keyboard_enabled: pulumi.Input[bool],
                 is_pointer_enabled: pulumi.Input[bool],
                 is_printing_enabled: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] audio_mode: (Updatable) The audio mode. NONE: No access to the local audio devices is permitted. TODESKTOP: The user may record audio on their desktop.  FROMDESKTOP: The user may play audio on their desktop. FULL: The user may play and record audio on their desktop.
        :param pulumi.Input[str] cdm_mode: (Updatable) The client local drive access mode. NONE: No access to local drives permitted. READONLY: The user may read from local drives on their desktop. FULL: The user may read from and write to their local drives on their desktop.
        :param pulumi.Input[str] clipboard_mode: (Updatable) The clipboard mode. NONE: No access to the local clipboard is permitted. TODESKTOP: The clipboard can be used to transfer data to the desktop only.  FROMDESKTOP: The clipboard can be used to transfer data from the desktop only. FULL: The clipboard can be used to transfer data to and from the desktop.
        :param pulumi.Input[bool] is_display_enabled: (Updatable) Indicates whether the display is enabled.
        :param pulumi.Input[bool] is_keyboard_enabled: (Updatable) Indicates whether the keyboard is enabled.
        :param pulumi.Input[bool] is_pointer_enabled: (Updatable) Indicates whether the pointer is enabled.
        :param pulumi.Input[bool] is_printing_enabled: (Updatable) Indicates whether printing is enabled.
        """
        pulumi.set(__self__, "audio_mode", audio_mode)
        pulumi.set(__self__, "cdm_mode", cdm_mode)
        pulumi.set(__self__, "clipboard_mode", clipboard_mode)
        pulumi.set(__self__, "is_display_enabled", is_display_enabled)
        pulumi.set(__self__, "is_keyboard_enabled", is_keyboard_enabled)
        pulumi.set(__self__, "is_pointer_enabled", is_pointer_enabled)
        pulumi.set(__self__, "is_printing_enabled", is_printing_enabled)

    @property
    @pulumi.getter(name="audioMode")
    def audio_mode(self) -> pulumi.Input[str]:
        """
        (Updatable) The audio mode. NONE: No access to the local audio devices is permitted. TODESKTOP: The user may record audio on their desktop.  FROMDESKTOP: The user may play audio on their desktop. FULL: The user may play and record audio on their desktop.
        """
        return pulumi.get(self, "audio_mode")

    @audio_mode.setter
    def audio_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "audio_mode", value)

    @property
    @pulumi.getter(name="cdmMode")
    def cdm_mode(self) -> pulumi.Input[str]:
        """
        (Updatable) The client local drive access mode. NONE: No access to local drives permitted. READONLY: The user may read from local drives on their desktop. FULL: The user may read from and write to their local drives on their desktop.
        """
        return pulumi.get(self, "cdm_mode")

    @cdm_mode.setter
    def cdm_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "cdm_mode", value)

    @property
    @pulumi.getter(name="clipboardMode")
    def clipboard_mode(self) -> pulumi.Input[str]:
        """
        (Updatable) The clipboard mode. NONE: No access to the local clipboard is permitted. TODESKTOP: The clipboard can be used to transfer data to the desktop only.  FROMDESKTOP: The clipboard can be used to transfer data from the desktop only. FULL: The clipboard can be used to transfer data to and from the desktop.
        """
        return pulumi.get(self, "clipboard_mode")

    @clipboard_mode.setter
    def clipboard_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "clipboard_mode", value)

    @property
    @pulumi.getter(name="isDisplayEnabled")
    def is_display_enabled(self) -> pulumi.Input[bool]:
        """
        (Updatable) Indicates whether the display is enabled.
        """
        return pulumi.get(self, "is_display_enabled")

    @is_display_enabled.setter
    def is_display_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_display_enabled", value)

    @property
    @pulumi.getter(name="isKeyboardEnabled")
    def is_keyboard_enabled(self) -> pulumi.Input[bool]:
        """
        (Updatable) Indicates whether the keyboard is enabled.
        """
        return pulumi.get(self, "is_keyboard_enabled")

    @is_keyboard_enabled.setter
    def is_keyboard_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_keyboard_enabled", value)

    @property
    @pulumi.getter(name="isPointerEnabled")
    def is_pointer_enabled(self) -> pulumi.Input[bool]:
        """
        (Updatable) Indicates whether the pointer is enabled.
        """
        return pulumi.get(self, "is_pointer_enabled")

    @is_pointer_enabled.setter
    def is_pointer_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_pointer_enabled", value)

    @property
    @pulumi.getter(name="isPrintingEnabled")
    def is_printing_enabled(self) -> pulumi.Input[bool]:
        """
        (Updatable) Indicates whether printing is enabled.
        """
        return pulumi.get(self, "is_printing_enabled")

    @is_printing_enabled.setter
    def is_printing_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_printing_enabled", value)


@pulumi.input_type
class DesktopPoolImageArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[str],
                 image_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] image_id: The OCID of the desktop image.
        :param pulumi.Input[str] image_name: The name of the desktop image.
        """
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        """
        The OCID of the desktop image.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        The name of the desktop image.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)


@pulumi.input_type
class DesktopPoolNetworkConfigurationArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 vcn_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] subnet_id: The OCID of the subnet to use for the desktop pool.
        :param pulumi.Input[str] vcn_id: The OCID of the VCN used by the desktop pool.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The OCID of the subnet to use for the desktop pool.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> pulumi.Input[str]:
        """
        The OCID of the VCN used by the desktop pool.
        """
        return pulumi.get(self, "vcn_id")

    @vcn_id.setter
    def vcn_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vcn_id", value)


@pulumi.input_type
class GetDesktopPoolDesktopsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDesktopPoolVolumesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        """
        :param str name: The name of the desktop pool volume.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the desktop pool volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDesktopPoolsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDesktopsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


