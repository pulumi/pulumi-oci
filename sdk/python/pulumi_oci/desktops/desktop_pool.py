# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DesktopPoolArgs', 'DesktopPool']

@pulumi.input_type
class DesktopPoolArgs:
    def __init__(__self__, *,
                 are_privileged_users: pulumi.Input[bool],
                 availability_domain: pulumi.Input[str],
                 availability_policy: pulumi.Input['DesktopPoolAvailabilityPolicyArgs'],
                 compartment_id: pulumi.Input[str],
                 contact_details: pulumi.Input[str],
                 device_policy: pulumi.Input['DesktopPoolDevicePolicyArgs'],
                 display_name: pulumi.Input[str],
                 image: pulumi.Input['DesktopPoolImageArgs'],
                 is_storage_enabled: pulumi.Input[bool],
                 maximum_size: pulumi.Input[int],
                 network_configuration: pulumi.Input['DesktopPoolNetworkConfigurationArgs'],
                 shape_name: pulumi.Input[str],
                 standby_size: pulumi.Input[int],
                 storage_backup_policy_id: pulumi.Input[str],
                 storage_size_in_gbs: pulumi.Input[int],
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 nsg_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 time_start_scheduled: Optional[pulumi.Input[str]] = None,
                 time_stop_scheduled: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DesktopPool resource.
        :param pulumi.Input[bool] are_privileged_users: Indicates whether desktop pool users have administrative privileges on their desktop.
        :param pulumi.Input[str] availability_domain: The availability domain of the desktop pool.
        :param pulumi.Input['DesktopPoolAvailabilityPolicyArgs'] availability_policy: (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        :param pulumi.Input[str] compartment_id: (Updatable) The OCID of the compartment which will contain the desktop pool.
        :param pulumi.Input[str] contact_details: (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        :param pulumi.Input['DesktopPoolDevicePolicyArgs'] device_policy: (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        :param pulumi.Input[str] display_name: (Updatable) A user friendly display name. Avoid entering confidential information.
        :param pulumi.Input['DesktopPoolImageArgs'] image: Provides information about the desktop image.
        :param pulumi.Input[bool] is_storage_enabled: Indicates whether storage is enabled for the desktop pool.
        :param pulumi.Input[int] maximum_size: (Updatable) The maximum number of desktops permitted in the desktop pool.
        :param pulumi.Input['DesktopPoolNetworkConfigurationArgs'] network_configuration: Provides information about the network configuration of the desktop pool.
        :param pulumi.Input[str] shape_name: The shape of the desktop pool.
        :param pulumi.Input[int] standby_size: (Updatable) The maximum number of standby desktops available in the desktop pool.
        :param pulumi.Input[str] storage_backup_policy_id: The backup policy OCID of the storage.
        :param pulumi.Input[int] storage_size_in_gbs: The size in GBs of the storage for the desktop pool.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param pulumi.Input[str] description: (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nsg_ids: A list of network security groups for the desktop pool.
        :param pulumi.Input[str] time_start_scheduled: (Updatable) The start time of the desktop pool.
        :param pulumi.Input[str] time_stop_scheduled: (Updatable) The stop time of the desktop pool.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "are_privileged_users", are_privileged_users)
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "availability_policy", availability_policy)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "contact_details", contact_details)
        pulumi.set(__self__, "device_policy", device_policy)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "is_storage_enabled", is_storage_enabled)
        pulumi.set(__self__, "maximum_size", maximum_size)
        pulumi.set(__self__, "network_configuration", network_configuration)
        pulumi.set(__self__, "shape_name", shape_name)
        pulumi.set(__self__, "standby_size", standby_size)
        pulumi.set(__self__, "storage_backup_policy_id", storage_backup_policy_id)
        pulumi.set(__self__, "storage_size_in_gbs", storage_size_in_gbs)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if time_start_scheduled is not None:
            pulumi.set(__self__, "time_start_scheduled", time_start_scheduled)
        if time_stop_scheduled is not None:
            pulumi.set(__self__, "time_stop_scheduled", time_stop_scheduled)

    @property
    @pulumi.getter(name="arePrivilegedUsers")
    def are_privileged_users(self) -> pulumi.Input[bool]:
        """
        Indicates whether desktop pool users have administrative privileges on their desktop.
        """
        return pulumi.get(self, "are_privileged_users")

    @are_privileged_users.setter
    def are_privileged_users(self, value: pulumi.Input[bool]):
        pulumi.set(self, "are_privileged_users", value)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> pulumi.Input[str]:
        """
        The availability domain of the desktop pool.
        """
        return pulumi.get(self, "availability_domain")

    @availability_domain.setter
    def availability_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "availability_domain", value)

    @property
    @pulumi.getter(name="availabilityPolicy")
    def availability_policy(self) -> pulumi.Input['DesktopPoolAvailabilityPolicyArgs']:
        """
        (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        """
        return pulumi.get(self, "availability_policy")

    @availability_policy.setter
    def availability_policy(self, value: pulumi.Input['DesktopPoolAvailabilityPolicyArgs']):
        pulumi.set(self, "availability_policy", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) The OCID of the compartment which will contain the desktop pool.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="contactDetails")
    def contact_details(self) -> pulumi.Input[str]:
        """
        (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        """
        return pulumi.get(self, "contact_details")

    @contact_details.setter
    def contact_details(self, value: pulumi.Input[str]):
        pulumi.set(self, "contact_details", value)

    @property
    @pulumi.getter(name="devicePolicy")
    def device_policy(self) -> pulumi.Input['DesktopPoolDevicePolicyArgs']:
        """
        (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        """
        return pulumi.get(self, "device_policy")

    @device_policy.setter
    def device_policy(self, value: pulumi.Input['DesktopPoolDevicePolicyArgs']):
        pulumi.set(self, "device_policy", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        (Updatable) A user friendly display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input['DesktopPoolImageArgs']:
        """
        Provides information about the desktop image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input['DesktopPoolImageArgs']):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="isStorageEnabled")
    def is_storage_enabled(self) -> pulumi.Input[bool]:
        """
        Indicates whether storage is enabled for the desktop pool.
        """
        return pulumi.get(self, "is_storage_enabled")

    @is_storage_enabled.setter
    def is_storage_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_storage_enabled", value)

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> pulumi.Input[int]:
        """
        (Updatable) The maximum number of desktops permitted in the desktop pool.
        """
        return pulumi.get(self, "maximum_size")

    @maximum_size.setter
    def maximum_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "maximum_size", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Input['DesktopPoolNetworkConfigurationArgs']:
        """
        Provides information about the network configuration of the desktop pool.
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: pulumi.Input['DesktopPoolNetworkConfigurationArgs']):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> pulumi.Input[str]:
        """
        The shape of the desktop pool.
        """
        return pulumi.get(self, "shape_name")

    @shape_name.setter
    def shape_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "shape_name", value)

    @property
    @pulumi.getter(name="standbySize")
    def standby_size(self) -> pulumi.Input[int]:
        """
        (Updatable) The maximum number of standby desktops available in the desktop pool.
        """
        return pulumi.get(self, "standby_size")

    @standby_size.setter
    def standby_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "standby_size", value)

    @property
    @pulumi.getter(name="storageBackupPolicyId")
    def storage_backup_policy_id(self) -> pulumi.Input[str]:
        """
        The backup policy OCID of the storage.
        """
        return pulumi.get(self, "storage_backup_policy_id")

    @storage_backup_policy_id.setter
    def storage_backup_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_backup_policy_id", value)

    @property
    @pulumi.getter(name="storageSizeInGbs")
    def storage_size_in_gbs(self) -> pulumi.Input[int]:
        """
        The size in GBs of the storage for the desktop pool.
        """
        return pulumi.get(self, "storage_size_in_gbs")

    @storage_size_in_gbs.setter
    def storage_size_in_gbs(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_size_in_gbs", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of network security groups for the desktop pool.
        """
        return pulumi.get(self, "nsg_ids")

    @nsg_ids.setter
    def nsg_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nsg_ids", value)

    @property
    @pulumi.getter(name="timeStartScheduled")
    def time_start_scheduled(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The start time of the desktop pool.
        """
        return pulumi.get(self, "time_start_scheduled")

    @time_start_scheduled.setter
    def time_start_scheduled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_start_scheduled", value)

    @property
    @pulumi.getter(name="timeStopScheduled")
    def time_stop_scheduled(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The stop time of the desktop pool.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "time_stop_scheduled")

    @time_stop_scheduled.setter
    def time_stop_scheduled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_stop_scheduled", value)


@pulumi.input_type
class _DesktopPoolState:
    def __init__(__self__, *,
                 active_desktops: Optional[pulumi.Input[int]] = None,
                 are_privileged_users: Optional[pulumi.Input[bool]] = None,
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 availability_policy: Optional[pulumi.Input['DesktopPoolAvailabilityPolicyArgs']] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 contact_details: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_policy: Optional[pulumi.Input['DesktopPoolDevicePolicyArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input['DesktopPoolImageArgs']] = None,
                 is_storage_enabled: Optional[pulumi.Input[bool]] = None,
                 maximum_size: Optional[pulumi.Input[int]] = None,
                 network_configuration: Optional[pulumi.Input['DesktopPoolNetworkConfigurationArgs']] = None,
                 nsg_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shape_name: Optional[pulumi.Input[str]] = None,
                 standby_size: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 storage_backup_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_size_in_gbs: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_start_scheduled: Optional[pulumi.Input[str]] = None,
                 time_stop_scheduled: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DesktopPool resources.
        :param pulumi.Input[int] active_desktops: The number of active desktops in the desktop pool.
        :param pulumi.Input[bool] are_privileged_users: Indicates whether desktop pool users have administrative privileges on their desktop.
        :param pulumi.Input[str] availability_domain: The availability domain of the desktop pool.
        :param pulumi.Input['DesktopPoolAvailabilityPolicyArgs'] availability_policy: (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        :param pulumi.Input[str] compartment_id: (Updatable) The OCID of the compartment which will contain the desktop pool.
        :param pulumi.Input[str] contact_details: (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param pulumi.Input[str] description: (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        :param pulumi.Input['DesktopPoolDevicePolicyArgs'] device_policy: (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        :param pulumi.Input[str] display_name: (Updatable) A user friendly display name. Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param pulumi.Input['DesktopPoolImageArgs'] image: Provides information about the desktop image.
        :param pulumi.Input[bool] is_storage_enabled: Indicates whether storage is enabled for the desktop pool.
        :param pulumi.Input[int] maximum_size: (Updatable) The maximum number of desktops permitted in the desktop pool.
        :param pulumi.Input['DesktopPoolNetworkConfigurationArgs'] network_configuration: Provides information about the network configuration of the desktop pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nsg_ids: A list of network security groups for the desktop pool.
        :param pulumi.Input[str] shape_name: The shape of the desktop pool.
        :param pulumi.Input[int] standby_size: (Updatable) The maximum number of standby desktops available in the desktop pool.
        :param pulumi.Input[str] state: The current state of the desktop pool.
        :param pulumi.Input[str] storage_backup_policy_id: The backup policy OCID of the storage.
        :param pulumi.Input[int] storage_size_in_gbs: The size in GBs of the storage for the desktop pool.
        :param pulumi.Input[str] time_created: The date and time the resource was created.
        :param pulumi.Input[str] time_start_scheduled: (Updatable) The start time of the desktop pool.
        :param pulumi.Input[str] time_stop_scheduled: (Updatable) The stop time of the desktop pool.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        if active_desktops is not None:
            pulumi.set(__self__, "active_desktops", active_desktops)
        if are_privileged_users is not None:
            pulumi.set(__self__, "are_privileged_users", are_privileged_users)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if availability_policy is not None:
            pulumi.set(__self__, "availability_policy", availability_policy)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if contact_details is not None:
            pulumi.set(__self__, "contact_details", contact_details)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_policy is not None:
            pulumi.set(__self__, "device_policy", device_policy)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if is_storage_enabled is not None:
            pulumi.set(__self__, "is_storage_enabled", is_storage_enabled)
        if maximum_size is not None:
            pulumi.set(__self__, "maximum_size", maximum_size)
        if network_configuration is not None:
            pulumi.set(__self__, "network_configuration", network_configuration)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)
        if standby_size is not None:
            pulumi.set(__self__, "standby_size", standby_size)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storage_backup_policy_id is not None:
            pulumi.set(__self__, "storage_backup_policy_id", storage_backup_policy_id)
        if storage_size_in_gbs is not None:
            pulumi.set(__self__, "storage_size_in_gbs", storage_size_in_gbs)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_start_scheduled is not None:
            pulumi.set(__self__, "time_start_scheduled", time_start_scheduled)
        if time_stop_scheduled is not None:
            pulumi.set(__self__, "time_stop_scheduled", time_stop_scheduled)

    @property
    @pulumi.getter(name="activeDesktops")
    def active_desktops(self) -> Optional[pulumi.Input[int]]:
        """
        The number of active desktops in the desktop pool.
        """
        return pulumi.get(self, "active_desktops")

    @active_desktops.setter
    def active_desktops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_desktops", value)

    @property
    @pulumi.getter(name="arePrivilegedUsers")
    def are_privileged_users(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether desktop pool users have administrative privileges on their desktop.
        """
        return pulumi.get(self, "are_privileged_users")

    @are_privileged_users.setter
    def are_privileged_users(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_privileged_users", value)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The availability domain of the desktop pool.
        """
        return pulumi.get(self, "availability_domain")

    @availability_domain.setter
    def availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_domain", value)

    @property
    @pulumi.getter(name="availabilityPolicy")
    def availability_policy(self) -> Optional[pulumi.Input['DesktopPoolAvailabilityPolicyArgs']]:
        """
        (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        """
        return pulumi.get(self, "availability_policy")

    @availability_policy.setter
    def availability_policy(self, value: Optional[pulumi.Input['DesktopPoolAvailabilityPolicyArgs']]):
        pulumi.set(self, "availability_policy", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the compartment which will contain the desktop pool.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="contactDetails")
    def contact_details(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        """
        return pulumi.get(self, "contact_details")

    @contact_details.setter
    def contact_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_details", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="devicePolicy")
    def device_policy(self) -> Optional[pulumi.Input['DesktopPoolDevicePolicyArgs']]:
        """
        (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        """
        return pulumi.get(self, "device_policy")

    @device_policy.setter
    def device_policy(self, value: Optional[pulumi.Input['DesktopPoolDevicePolicyArgs']]):
        pulumi.set(self, "device_policy", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user friendly display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['DesktopPoolImageArgs']]:
        """
        Provides information about the desktop image.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['DesktopPoolImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="isStorageEnabled")
    def is_storage_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether storage is enabled for the desktop pool.
        """
        return pulumi.get(self, "is_storage_enabled")

    @is_storage_enabled.setter
    def is_storage_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_storage_enabled", value)

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The maximum number of desktops permitted in the desktop pool.
        """
        return pulumi.get(self, "maximum_size")

    @maximum_size.setter
    def maximum_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_size", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional[pulumi.Input['DesktopPoolNetworkConfigurationArgs']]:
        """
        Provides information about the network configuration of the desktop pool.
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: Optional[pulumi.Input['DesktopPoolNetworkConfigurationArgs']]):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of network security groups for the desktop pool.
        """
        return pulumi.get(self, "nsg_ids")

    @nsg_ids.setter
    def nsg_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nsg_ids", value)

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[pulumi.Input[str]]:
        """
        The shape of the desktop pool.
        """
        return pulumi.get(self, "shape_name")

    @shape_name.setter
    def shape_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shape_name", value)

    @property
    @pulumi.getter(name="standbySize")
    def standby_size(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) The maximum number of standby desktops available in the desktop pool.
        """
        return pulumi.get(self, "standby_size")

    @standby_size.setter
    def standby_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "standby_size", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the desktop pool.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="storageBackupPolicyId")
    def storage_backup_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The backup policy OCID of the storage.
        """
        return pulumi.get(self, "storage_backup_policy_id")

    @storage_backup_policy_id.setter
    def storage_backup_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_backup_policy_id", value)

    @property
    @pulumi.getter(name="storageSizeInGbs")
    def storage_size_in_gbs(self) -> Optional[pulumi.Input[int]]:
        """
        The size in GBs of the storage for the desktop pool.
        """
        return pulumi.get(self, "storage_size_in_gbs")

    @storage_size_in_gbs.setter
    def storage_size_in_gbs(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size_in_gbs", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the resource was created.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeStartScheduled")
    def time_start_scheduled(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The start time of the desktop pool.
        """
        return pulumi.get(self, "time_start_scheduled")

    @time_start_scheduled.setter
    def time_start_scheduled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_start_scheduled", value)

    @property
    @pulumi.getter(name="timeStopScheduled")
    def time_stop_scheduled(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The stop time of the desktop pool.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "time_stop_scheduled")

    @time_stop_scheduled.setter
    def time_stop_scheduled(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_stop_scheduled", value)


class DesktopPool(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 are_privileged_users: Optional[pulumi.Input[bool]] = None,
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 availability_policy: Optional[pulumi.Input[Union['DesktopPoolAvailabilityPolicyArgs', 'DesktopPoolAvailabilityPolicyArgsDict']]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 contact_details: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_policy: Optional[pulumi.Input[Union['DesktopPoolDevicePolicyArgs', 'DesktopPoolDevicePolicyArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[Union['DesktopPoolImageArgs', 'DesktopPoolImageArgsDict']]] = None,
                 is_storage_enabled: Optional[pulumi.Input[bool]] = None,
                 maximum_size: Optional[pulumi.Input[int]] = None,
                 network_configuration: Optional[pulumi.Input[Union['DesktopPoolNetworkConfigurationArgs', 'DesktopPoolNetworkConfigurationArgsDict']]] = None,
                 nsg_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shape_name: Optional[pulumi.Input[str]] = None,
                 standby_size: Optional[pulumi.Input[int]] = None,
                 storage_backup_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_size_in_gbs: Optional[pulumi.Input[int]] = None,
                 time_start_scheduled: Optional[pulumi.Input[str]] = None,
                 time_stop_scheduled: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Desktop Pool resource in Oracle Cloud Infrastructure Desktops service.

        Creates a desktop pool with the given configuration parameters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_desktop_pool = oci.desktops.DesktopPool("test_desktop_pool",
            are_privileged_users=desktop_pool_are_privileged_users,
            availability_domain=desktop_pool_availability_domain,
            availability_policy={
                "start_schedule": {
                    "cron_expression": "0 10 8 ? * 2",
                    "timezone": "America/Denver",
                },
                "stop_schedule": {
                    "cron_expression": "0 20 18 ? * 6",
                    "timezone": "America/Denver",
                },
            },
            compartment_id=compartment_id,
            contact_details=desktop_pool_contact_details,
            device_policy={
                "audio_mode": desktop_pool_device_policy_audio_mode,
                "cdm_mode": desktop_pool_device_policy_cdm_mode,
                "clipboard_mode": desktop_pool_device_policy_clipboard_mode,
                "is_display_enabled": desktop_pool_device_policy_is_display_enabled,
                "is_keyboard_enabled": desktop_pool_device_policy_is_keyboard_enabled,
                "is_pointer_enabled": desktop_pool_device_policy_is_pointer_enabled,
                "is_printing_enabled": desktop_pool_device_policy_is_printing_enabled,
            },
            display_name=desktop_pool_display_name,
            image={
                "image_id": test_image["id"],
                "image_name": desktop_pool_image_image_name,
            },
            is_storage_enabled=desktop_pool_is_storage_enabled,
            maximum_size=desktop_pool_maximum_size,
            network_configuration={
                "subnet_id": test_subnet["id"],
                "vcn_id": test_vcn["id"],
            },
            shape_name="VM.Standard.E4.Flex",
            standby_size=desktop_pool_standby_size,
            storage_backup_policy_id="ocid1.volumebackuppolicy.oc1.xxxxyyyyyzzzz",
            storage_size_in_gbs=desktop_pool_storage_size_in_gbs,
            defined_tags={
                "Operations.CostCenter": "42",
            },
            description=desktop_pool_description,
            freeform_tags={
                "Department": "Finance",
            },
            nsg_ids=desktop_pool_nsg_ids,
            time_start_scheduled=desktop_pool_time_start_scheduled,
            time_stop_scheduled=desktop_pool_time_stop_scheduled)
        ```

        ## Import

        DesktopPools can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:Desktops/desktopPool:DesktopPool test_desktop_pool "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] are_privileged_users: Indicates whether desktop pool users have administrative privileges on their desktop.
        :param pulumi.Input[str] availability_domain: The availability domain of the desktop pool.
        :param pulumi.Input[Union['DesktopPoolAvailabilityPolicyArgs', 'DesktopPoolAvailabilityPolicyArgsDict']] availability_policy: (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        :param pulumi.Input[str] compartment_id: (Updatable) The OCID of the compartment which will contain the desktop pool.
        :param pulumi.Input[str] contact_details: (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param pulumi.Input[str] description: (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        :param pulumi.Input[Union['DesktopPoolDevicePolicyArgs', 'DesktopPoolDevicePolicyArgsDict']] device_policy: (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        :param pulumi.Input[str] display_name: (Updatable) A user friendly display name. Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param pulumi.Input[Union['DesktopPoolImageArgs', 'DesktopPoolImageArgsDict']] image: Provides information about the desktop image.
        :param pulumi.Input[bool] is_storage_enabled: Indicates whether storage is enabled for the desktop pool.
        :param pulumi.Input[int] maximum_size: (Updatable) The maximum number of desktops permitted in the desktop pool.
        :param pulumi.Input[Union['DesktopPoolNetworkConfigurationArgs', 'DesktopPoolNetworkConfigurationArgsDict']] network_configuration: Provides information about the network configuration of the desktop pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nsg_ids: A list of network security groups for the desktop pool.
        :param pulumi.Input[str] shape_name: The shape of the desktop pool.
        :param pulumi.Input[int] standby_size: (Updatable) The maximum number of standby desktops available in the desktop pool.
        :param pulumi.Input[str] storage_backup_policy_id: The backup policy OCID of the storage.
        :param pulumi.Input[int] storage_size_in_gbs: The size in GBs of the storage for the desktop pool.
        :param pulumi.Input[str] time_start_scheduled: (Updatable) The start time of the desktop pool.
        :param pulumi.Input[str] time_stop_scheduled: (Updatable) The stop time of the desktop pool.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DesktopPoolArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Desktop Pool resource in Oracle Cloud Infrastructure Desktops service.

        Creates a desktop pool with the given configuration parameters.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_desktop_pool = oci.desktops.DesktopPool("test_desktop_pool",
            are_privileged_users=desktop_pool_are_privileged_users,
            availability_domain=desktop_pool_availability_domain,
            availability_policy={
                "start_schedule": {
                    "cron_expression": "0 10 8 ? * 2",
                    "timezone": "America/Denver",
                },
                "stop_schedule": {
                    "cron_expression": "0 20 18 ? * 6",
                    "timezone": "America/Denver",
                },
            },
            compartment_id=compartment_id,
            contact_details=desktop_pool_contact_details,
            device_policy={
                "audio_mode": desktop_pool_device_policy_audio_mode,
                "cdm_mode": desktop_pool_device_policy_cdm_mode,
                "clipboard_mode": desktop_pool_device_policy_clipboard_mode,
                "is_display_enabled": desktop_pool_device_policy_is_display_enabled,
                "is_keyboard_enabled": desktop_pool_device_policy_is_keyboard_enabled,
                "is_pointer_enabled": desktop_pool_device_policy_is_pointer_enabled,
                "is_printing_enabled": desktop_pool_device_policy_is_printing_enabled,
            },
            display_name=desktop_pool_display_name,
            image={
                "image_id": test_image["id"],
                "image_name": desktop_pool_image_image_name,
            },
            is_storage_enabled=desktop_pool_is_storage_enabled,
            maximum_size=desktop_pool_maximum_size,
            network_configuration={
                "subnet_id": test_subnet["id"],
                "vcn_id": test_vcn["id"],
            },
            shape_name="VM.Standard.E4.Flex",
            standby_size=desktop_pool_standby_size,
            storage_backup_policy_id="ocid1.volumebackuppolicy.oc1.xxxxyyyyyzzzz",
            storage_size_in_gbs=desktop_pool_storage_size_in_gbs,
            defined_tags={
                "Operations.CostCenter": "42",
            },
            description=desktop_pool_description,
            freeform_tags={
                "Department": "Finance",
            },
            nsg_ids=desktop_pool_nsg_ids,
            time_start_scheduled=desktop_pool_time_start_scheduled,
            time_stop_scheduled=desktop_pool_time_stop_scheduled)
        ```

        ## Import

        DesktopPools can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:Desktops/desktopPool:DesktopPool test_desktop_pool "id"
        ```

        :param str resource_name: The name of the resource.
        :param DesktopPoolArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DesktopPoolArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 are_privileged_users: Optional[pulumi.Input[bool]] = None,
                 availability_domain: Optional[pulumi.Input[str]] = None,
                 availability_policy: Optional[pulumi.Input[Union['DesktopPoolAvailabilityPolicyArgs', 'DesktopPoolAvailabilityPolicyArgsDict']]] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 contact_details: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_policy: Optional[pulumi.Input[Union['DesktopPoolDevicePolicyArgs', 'DesktopPoolDevicePolicyArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 image: Optional[pulumi.Input[Union['DesktopPoolImageArgs', 'DesktopPoolImageArgsDict']]] = None,
                 is_storage_enabled: Optional[pulumi.Input[bool]] = None,
                 maximum_size: Optional[pulumi.Input[int]] = None,
                 network_configuration: Optional[pulumi.Input[Union['DesktopPoolNetworkConfigurationArgs', 'DesktopPoolNetworkConfigurationArgsDict']]] = None,
                 nsg_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shape_name: Optional[pulumi.Input[str]] = None,
                 standby_size: Optional[pulumi.Input[int]] = None,
                 storage_backup_policy_id: Optional[pulumi.Input[str]] = None,
                 storage_size_in_gbs: Optional[pulumi.Input[int]] = None,
                 time_start_scheduled: Optional[pulumi.Input[str]] = None,
                 time_stop_scheduled: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DesktopPoolArgs.__new__(DesktopPoolArgs)

            if are_privileged_users is None and not opts.urn:
                raise TypeError("Missing required property 'are_privileged_users'")
            __props__.__dict__["are_privileged_users"] = are_privileged_users
            if availability_domain is None and not opts.urn:
                raise TypeError("Missing required property 'availability_domain'")
            __props__.__dict__["availability_domain"] = availability_domain
            if availability_policy is None and not opts.urn:
                raise TypeError("Missing required property 'availability_policy'")
            __props__.__dict__["availability_policy"] = availability_policy
            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            if contact_details is None and not opts.urn:
                raise TypeError("Missing required property 'contact_details'")
            __props__.__dict__["contact_details"] = contact_details
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["description"] = description
            if device_policy is None and not opts.urn:
                raise TypeError("Missing required property 'device_policy'")
            __props__.__dict__["device_policy"] = device_policy
            if display_name is None and not opts.urn:
                raise TypeError("Missing required property 'display_name'")
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            if is_storage_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'is_storage_enabled'")
            __props__.__dict__["is_storage_enabled"] = is_storage_enabled
            if maximum_size is None and not opts.urn:
                raise TypeError("Missing required property 'maximum_size'")
            __props__.__dict__["maximum_size"] = maximum_size
            if network_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'network_configuration'")
            __props__.__dict__["network_configuration"] = network_configuration
            __props__.__dict__["nsg_ids"] = nsg_ids
            if shape_name is None and not opts.urn:
                raise TypeError("Missing required property 'shape_name'")
            __props__.__dict__["shape_name"] = shape_name
            if standby_size is None and not opts.urn:
                raise TypeError("Missing required property 'standby_size'")
            __props__.__dict__["standby_size"] = standby_size
            if storage_backup_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'storage_backup_policy_id'")
            __props__.__dict__["storage_backup_policy_id"] = storage_backup_policy_id
            if storage_size_in_gbs is None and not opts.urn:
                raise TypeError("Missing required property 'storage_size_in_gbs'")
            __props__.__dict__["storage_size_in_gbs"] = storage_size_in_gbs
            __props__.__dict__["time_start_scheduled"] = time_start_scheduled
            __props__.__dict__["time_stop_scheduled"] = time_stop_scheduled
            __props__.__dict__["active_desktops"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
        super(DesktopPool, __self__).__init__(
            'oci:Desktops/desktopPool:DesktopPool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_desktops: Optional[pulumi.Input[int]] = None,
            are_privileged_users: Optional[pulumi.Input[bool]] = None,
            availability_domain: Optional[pulumi.Input[str]] = None,
            availability_policy: Optional[pulumi.Input[Union['DesktopPoolAvailabilityPolicyArgs', 'DesktopPoolAvailabilityPolicyArgsDict']]] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            contact_details: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device_policy: Optional[pulumi.Input[Union['DesktopPoolDevicePolicyArgs', 'DesktopPoolDevicePolicyArgsDict']]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            image: Optional[pulumi.Input[Union['DesktopPoolImageArgs', 'DesktopPoolImageArgsDict']]] = None,
            is_storage_enabled: Optional[pulumi.Input[bool]] = None,
            maximum_size: Optional[pulumi.Input[int]] = None,
            network_configuration: Optional[pulumi.Input[Union['DesktopPoolNetworkConfigurationArgs', 'DesktopPoolNetworkConfigurationArgsDict']]] = None,
            nsg_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            shape_name: Optional[pulumi.Input[str]] = None,
            standby_size: Optional[pulumi.Input[int]] = None,
            state: Optional[pulumi.Input[str]] = None,
            storage_backup_policy_id: Optional[pulumi.Input[str]] = None,
            storage_size_in_gbs: Optional[pulumi.Input[int]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_start_scheduled: Optional[pulumi.Input[str]] = None,
            time_stop_scheduled: Optional[pulumi.Input[str]] = None) -> 'DesktopPool':
        """
        Get an existing DesktopPool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] active_desktops: The number of active desktops in the desktop pool.
        :param pulumi.Input[bool] are_privileged_users: Indicates whether desktop pool users have administrative privileges on their desktop.
        :param pulumi.Input[str] availability_domain: The availability domain of the desktop pool.
        :param pulumi.Input[Union['DesktopPoolAvailabilityPolicyArgs', 'DesktopPoolAvailabilityPolicyArgsDict']] availability_policy: (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        :param pulumi.Input[str] compartment_id: (Updatable) The OCID of the compartment which will contain the desktop pool.
        :param pulumi.Input[str] contact_details: (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        :param pulumi.Input[str] description: (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        :param pulumi.Input[Union['DesktopPoolDevicePolicyArgs', 'DesktopPoolDevicePolicyArgsDict']] device_policy: (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        :param pulumi.Input[str] display_name: (Updatable) A user friendly display name. Avoid entering confidential information.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] freeform_tags: (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        :param pulumi.Input[Union['DesktopPoolImageArgs', 'DesktopPoolImageArgsDict']] image: Provides information about the desktop image.
        :param pulumi.Input[bool] is_storage_enabled: Indicates whether storage is enabled for the desktop pool.
        :param pulumi.Input[int] maximum_size: (Updatable) The maximum number of desktops permitted in the desktop pool.
        :param pulumi.Input[Union['DesktopPoolNetworkConfigurationArgs', 'DesktopPoolNetworkConfigurationArgsDict']] network_configuration: Provides information about the network configuration of the desktop pool.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nsg_ids: A list of network security groups for the desktop pool.
        :param pulumi.Input[str] shape_name: The shape of the desktop pool.
        :param pulumi.Input[int] standby_size: (Updatable) The maximum number of standby desktops available in the desktop pool.
        :param pulumi.Input[str] state: The current state of the desktop pool.
        :param pulumi.Input[str] storage_backup_policy_id: The backup policy OCID of the storage.
        :param pulumi.Input[int] storage_size_in_gbs: The size in GBs of the storage for the desktop pool.
        :param pulumi.Input[str] time_created: The date and time the resource was created.
        :param pulumi.Input[str] time_start_scheduled: (Updatable) The start time of the desktop pool.
        :param pulumi.Input[str] time_stop_scheduled: (Updatable) The stop time of the desktop pool.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DesktopPoolState.__new__(_DesktopPoolState)

        __props__.__dict__["active_desktops"] = active_desktops
        __props__.__dict__["are_privileged_users"] = are_privileged_users
        __props__.__dict__["availability_domain"] = availability_domain
        __props__.__dict__["availability_policy"] = availability_policy
        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["contact_details"] = contact_details
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["description"] = description
        __props__.__dict__["device_policy"] = device_policy
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["image"] = image
        __props__.__dict__["is_storage_enabled"] = is_storage_enabled
        __props__.__dict__["maximum_size"] = maximum_size
        __props__.__dict__["network_configuration"] = network_configuration
        __props__.__dict__["nsg_ids"] = nsg_ids
        __props__.__dict__["shape_name"] = shape_name
        __props__.__dict__["standby_size"] = standby_size
        __props__.__dict__["state"] = state
        __props__.__dict__["storage_backup_policy_id"] = storage_backup_policy_id
        __props__.__dict__["storage_size_in_gbs"] = storage_size_in_gbs
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_start_scheduled"] = time_start_scheduled
        __props__.__dict__["time_stop_scheduled"] = time_stop_scheduled
        return DesktopPool(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeDesktops")
    def active_desktops(self) -> pulumi.Output[int]:
        """
        The number of active desktops in the desktop pool.
        """
        return pulumi.get(self, "active_desktops")

    @property
    @pulumi.getter(name="arePrivilegedUsers")
    def are_privileged_users(self) -> pulumi.Output[bool]:
        """
        Indicates whether desktop pool users have administrative privileges on their desktop.
        """
        return pulumi.get(self, "are_privileged_users")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> pulumi.Output[str]:
        """
        The availability domain of the desktop pool.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="availabilityPolicy")
    def availability_policy(self) -> pulumi.Output['outputs.DesktopPoolAvailabilityPolicy']:
        """
        (Updatable) Provides the start and stop schedule information for desktop availability of the desktop pool.
        """
        return pulumi.get(self, "availability_policy")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        (Updatable) The OCID of the compartment which will contain the desktop pool.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="contactDetails")
    def contact_details(self) -> pulumi.Output[str]:
        """
        (Updatable) Contact information of the desktop pool administrator. Avoid entering confidential information.
        """
        return pulumi.get(self, "contact_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, str]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Updatable) A user friendly description providing additional information about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="devicePolicy")
    def device_policy(self) -> pulumi.Output['outputs.DesktopPoolDevicePolicy']:
        """
        (Updatable) Provides the settings for desktop and client device options, such as audio in and out, client drive mapping, and clipboard access.
        """
        return pulumi.get(self, "device_policy")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        (Updatable) A user friendly display name. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, str]]:
        """
        (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def image(self) -> pulumi.Output['outputs.DesktopPoolImage']:
        """
        Provides information about the desktop image.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="isStorageEnabled")
    def is_storage_enabled(self) -> pulumi.Output[bool]:
        """
        Indicates whether storage is enabled for the desktop pool.
        """
        return pulumi.get(self, "is_storage_enabled")

    @property
    @pulumi.getter(name="maximumSize")
    def maximum_size(self) -> pulumi.Output[int]:
        """
        (Updatable) The maximum number of desktops permitted in the desktop pool.
        """
        return pulumi.get(self, "maximum_size")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Output['outputs.DesktopPoolNetworkConfiguration']:
        """
        Provides information about the network configuration of the desktop pool.
        """
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of network security groups for the desktop pool.
        """
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> pulumi.Output[str]:
        """
        The shape of the desktop pool.
        """
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="standbySize")
    def standby_size(self) -> pulumi.Output[int]:
        """
        (Updatable) The maximum number of standby desktops available in the desktop pool.
        """
        return pulumi.get(self, "standby_size")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the desktop pool.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageBackupPolicyId")
    def storage_backup_policy_id(self) -> pulumi.Output[str]:
        """
        The backup policy OCID of the storage.
        """
        return pulumi.get(self, "storage_backup_policy_id")

    @property
    @pulumi.getter(name="storageSizeInGbs")
    def storage_size_in_gbs(self) -> pulumi.Output[int]:
        """
        The size in GBs of the storage for the desktop pool.
        """
        return pulumi.get(self, "storage_size_in_gbs")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The date and time the resource was created.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeStartScheduled")
    def time_start_scheduled(self) -> pulumi.Output[Optional[str]]:
        """
        (Updatable) The start time of the desktop pool.
        """
        return pulumi.get(self, "time_start_scheduled")

    @property
    @pulumi.getter(name="timeStopScheduled")
    def time_stop_scheduled(self) -> pulumi.Output[Optional[str]]:
        """
        (Updatable) The stop time of the desktop pool.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "time_stop_scheduled")

