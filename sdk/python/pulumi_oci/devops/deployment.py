# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeploymentArgs', 'Deployment']

@pulumi.input_type
class DeploymentArgs:
    def __init__(__self__, *,
                 deploy_pipeline_id: pulumi.Input[str],
                 deployment_type: pulumi.Input[str],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deploy_artifact_override_arguments: Optional[pulumi.Input['DeploymentDeployArtifactOverrideArgumentsArgs']] = None,
                 deploy_stage_id: Optional[pulumi.Input[str]] = None,
                 deploy_stage_override_arguments: Optional[pulumi.Input['DeploymentDeployStageOverrideArgumentsArgs']] = None,
                 deployment_arguments: Optional[pulumi.Input['DeploymentDeploymentArgumentsArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 previous_deployment_id: Optional[pulumi.Input[str]] = None,
                 trigger_new_devops_deployment: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Deployment resource.
        """
        pulumi.set(__self__, "deploy_pipeline_id", deploy_pipeline_id)
        pulumi.set(__self__, "deployment_type", deployment_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_artifact_override_arguments is not None:
            pulumi.set(__self__, "deploy_artifact_override_arguments", deploy_artifact_override_arguments)
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if deploy_stage_override_arguments is not None:
            pulumi.set(__self__, "deploy_stage_override_arguments", deploy_stage_override_arguments)
        if deployment_arguments is not None:
            pulumi.set(__self__, "deployment_arguments", deployment_arguments)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if previous_deployment_id is not None:
            pulumi.set(__self__, "previous_deployment_id", previous_deployment_id)
        if trigger_new_devops_deployment is not None:
            pulumi.set(__self__, "trigger_new_devops_deployment", trigger_new_devops_deployment)

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deploy_pipeline_id")

    @deploy_pipeline_id.setter
    def deploy_pipeline_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "deploy_pipeline_id", value)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deployment_type")

    @deployment_type.setter
    def deployment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_type", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="deployArtifactOverrideArguments")
    def deploy_artifact_override_arguments(self) -> Optional[pulumi.Input['DeploymentDeployArtifactOverrideArgumentsArgs']]:
        return pulumi.get(self, "deploy_artifact_override_arguments")

    @deploy_artifact_override_arguments.setter
    def deploy_artifact_override_arguments(self, value: Optional[pulumi.Input['DeploymentDeployArtifactOverrideArgumentsArgs']]):
        pulumi.set(self, "deploy_artifact_override_arguments", value)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deploy_stage_id")

    @deploy_stage_id.setter
    def deploy_stage_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_stage_id", value)

    @property
    @pulumi.getter(name="deployStageOverrideArguments")
    def deploy_stage_override_arguments(self) -> Optional[pulumi.Input['DeploymentDeployStageOverrideArgumentsArgs']]:
        return pulumi.get(self, "deploy_stage_override_arguments")

    @deploy_stage_override_arguments.setter
    def deploy_stage_override_arguments(self, value: Optional[pulumi.Input['DeploymentDeployStageOverrideArgumentsArgs']]):
        pulumi.set(self, "deploy_stage_override_arguments", value)

    @property
    @pulumi.getter(name="deploymentArguments")
    def deployment_arguments(self) -> Optional[pulumi.Input['DeploymentDeploymentArgumentsArgs']]:
        return pulumi.get(self, "deployment_arguments")

    @deployment_arguments.setter
    def deployment_arguments(self, value: Optional[pulumi.Input['DeploymentDeploymentArgumentsArgs']]):
        pulumi.set(self, "deployment_arguments", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="previousDeploymentId")
    def previous_deployment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "previous_deployment_id")

    @previous_deployment_id.setter
    def previous_deployment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "previous_deployment_id", value)

    @property
    @pulumi.getter(name="triggerNewDevopsDeployment")
    def trigger_new_devops_deployment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trigger_new_devops_deployment")

    @trigger_new_devops_deployment.setter
    def trigger_new_devops_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trigger_new_devops_deployment", value)


@pulumi.input_type
class _DeploymentState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deploy_artifact_override_arguments: Optional[pulumi.Input['DeploymentDeployArtifactOverrideArgumentsArgs']] = None,
                 deploy_pipeline_artifacts: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentDeployPipelineArtifactArgs']]]] = None,
                 deploy_pipeline_environments: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentDeployPipelineEnvironmentArgs']]]] = None,
                 deploy_pipeline_id: Optional[pulumi.Input[str]] = None,
                 deploy_stage_id: Optional[pulumi.Input[str]] = None,
                 deploy_stage_override_arguments: Optional[pulumi.Input['DeploymentDeployStageOverrideArgumentsArgs']] = None,
                 deployment_arguments: Optional[pulumi.Input['DeploymentDeploymentArgumentsArgs']] = None,
                 deployment_execution_progresses: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentDeploymentExecutionProgressArgs']]]] = None,
                 deployment_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 previous_deployment_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 trigger_new_devops_deployment: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Deployment resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_artifact_override_arguments is not None:
            pulumi.set(__self__, "deploy_artifact_override_arguments", deploy_artifact_override_arguments)
        if deploy_pipeline_artifacts is not None:
            pulumi.set(__self__, "deploy_pipeline_artifacts", deploy_pipeline_artifacts)
        if deploy_pipeline_environments is not None:
            pulumi.set(__self__, "deploy_pipeline_environments", deploy_pipeline_environments)
        if deploy_pipeline_id is not None:
            pulumi.set(__self__, "deploy_pipeline_id", deploy_pipeline_id)
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if deploy_stage_override_arguments is not None:
            pulumi.set(__self__, "deploy_stage_override_arguments", deploy_stage_override_arguments)
        if deployment_arguments is not None:
            pulumi.set(__self__, "deployment_arguments", deployment_arguments)
        if deployment_execution_progresses is not None:
            pulumi.set(__self__, "deployment_execution_progresses", deployment_execution_progresses)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if previous_deployment_id is not None:
            pulumi.set(__self__, "previous_deployment_id", previous_deployment_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trigger_new_devops_deployment is not None:
            pulumi.set(__self__, "trigger_new_devops_deployment", trigger_new_devops_deployment)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="deployArtifactOverrideArguments")
    def deploy_artifact_override_arguments(self) -> Optional[pulumi.Input['DeploymentDeployArtifactOverrideArgumentsArgs']]:
        return pulumi.get(self, "deploy_artifact_override_arguments")

    @deploy_artifact_override_arguments.setter
    def deploy_artifact_override_arguments(self, value: Optional[pulumi.Input['DeploymentDeployArtifactOverrideArgumentsArgs']]):
        pulumi.set(self, "deploy_artifact_override_arguments", value)

    @property
    @pulumi.getter(name="deployPipelineArtifacts")
    def deploy_pipeline_artifacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentDeployPipelineArtifactArgs']]]]:
        return pulumi.get(self, "deploy_pipeline_artifacts")

    @deploy_pipeline_artifacts.setter
    def deploy_pipeline_artifacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentDeployPipelineArtifactArgs']]]]):
        pulumi.set(self, "deploy_pipeline_artifacts", value)

    @property
    @pulumi.getter(name="deployPipelineEnvironments")
    def deploy_pipeline_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentDeployPipelineEnvironmentArgs']]]]:
        return pulumi.get(self, "deploy_pipeline_environments")

    @deploy_pipeline_environments.setter
    def deploy_pipeline_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentDeployPipelineEnvironmentArgs']]]]):
        pulumi.set(self, "deploy_pipeline_environments", value)

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deploy_pipeline_id")

    @deploy_pipeline_id.setter
    def deploy_pipeline_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_pipeline_id", value)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deploy_stage_id")

    @deploy_stage_id.setter
    def deploy_stage_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_stage_id", value)

    @property
    @pulumi.getter(name="deployStageOverrideArguments")
    def deploy_stage_override_arguments(self) -> Optional[pulumi.Input['DeploymentDeployStageOverrideArgumentsArgs']]:
        return pulumi.get(self, "deploy_stage_override_arguments")

    @deploy_stage_override_arguments.setter
    def deploy_stage_override_arguments(self, value: Optional[pulumi.Input['DeploymentDeployStageOverrideArgumentsArgs']]):
        pulumi.set(self, "deploy_stage_override_arguments", value)

    @property
    @pulumi.getter(name="deploymentArguments")
    def deployment_arguments(self) -> Optional[pulumi.Input['DeploymentDeploymentArgumentsArgs']]:
        return pulumi.get(self, "deployment_arguments")

    @deployment_arguments.setter
    def deployment_arguments(self, value: Optional[pulumi.Input['DeploymentDeploymentArgumentsArgs']]):
        pulumi.set(self, "deployment_arguments", value)

    @property
    @pulumi.getter(name="deploymentExecutionProgresses")
    def deployment_execution_progresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentDeploymentExecutionProgressArgs']]]]:
        return pulumi.get(self, "deployment_execution_progresses")

    @deployment_execution_progresses.setter
    def deployment_execution_progresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeploymentDeploymentExecutionProgressArgs']]]]):
        pulumi.set(self, "deployment_execution_progresses", value)

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_type")

    @deployment_type.setter
    def deployment_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="previousDeploymentId")
    def previous_deployment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "previous_deployment_id")

    @previous_deployment_id.setter
    def previous_deployment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "previous_deployment_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter(name="triggerNewDevopsDeployment")
    def trigger_new_devops_deployment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trigger_new_devops_deployment")

    @trigger_new_devops_deployment.setter
    def trigger_new_devops_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trigger_new_devops_deployment", value)


class Deployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deploy_artifact_override_arguments: Optional[pulumi.Input[pulumi.InputType['DeploymentDeployArtifactOverrideArgumentsArgs']]] = None,
                 deploy_pipeline_id: Optional[pulumi.Input[str]] = None,
                 deploy_stage_id: Optional[pulumi.Input[str]] = None,
                 deploy_stage_override_arguments: Optional[pulumi.Input[pulumi.InputType['DeploymentDeployStageOverrideArgumentsArgs']]] = None,
                 deployment_arguments: Optional[pulumi.Input[pulumi.InputType['DeploymentDeploymentArgumentsArgs']]] = None,
                 deployment_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 previous_deployment_id: Optional[pulumi.Input[str]] = None,
                 trigger_new_devops_deployment: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a Deployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Deployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 deploy_artifact_override_arguments: Optional[pulumi.Input[pulumi.InputType['DeploymentDeployArtifactOverrideArgumentsArgs']]] = None,
                 deploy_pipeline_id: Optional[pulumi.Input[str]] = None,
                 deploy_stage_id: Optional[pulumi.Input[str]] = None,
                 deploy_stage_override_arguments: Optional[pulumi.Input[pulumi.InputType['DeploymentDeployStageOverrideArgumentsArgs']]] = None,
                 deployment_arguments: Optional[pulumi.Input[pulumi.InputType['DeploymentDeploymentArgumentsArgs']]] = None,
                 deployment_type: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 previous_deployment_id: Optional[pulumi.Input[str]] = None,
                 trigger_new_devops_deployment: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeploymentArgs.__new__(DeploymentArgs)

            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["deploy_artifact_override_arguments"] = deploy_artifact_override_arguments
            if deploy_pipeline_id is None and not opts.urn:
                raise TypeError("Missing required property 'deploy_pipeline_id'")
            __props__.__dict__["deploy_pipeline_id"] = deploy_pipeline_id
            __props__.__dict__["deploy_stage_id"] = deploy_stage_id
            __props__.__dict__["deploy_stage_override_arguments"] = deploy_stage_override_arguments
            __props__.__dict__["deployment_arguments"] = deployment_arguments
            if deployment_type is None and not opts.urn:
                raise TypeError("Missing required property 'deployment_type'")
            __props__.__dict__["deployment_type"] = deployment_type
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["previous_deployment_id"] = previous_deployment_id
            __props__.__dict__["trigger_new_devops_deployment"] = trigger_new_devops_deployment
            __props__.__dict__["compartment_id"] = None
            __props__.__dict__["deploy_pipeline_artifacts"] = None
            __props__.__dict__["deploy_pipeline_environments"] = None
            __props__.__dict__["deployment_execution_progresses"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["project_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(Deployment, __self__).__init__(
            'oci:DevOps/deployment:Deployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            deploy_artifact_override_arguments: Optional[pulumi.Input[pulumi.InputType['DeploymentDeployArtifactOverrideArgumentsArgs']]] = None,
            deploy_pipeline_artifacts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentDeployPipelineArtifactArgs']]]]] = None,
            deploy_pipeline_environments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentDeployPipelineEnvironmentArgs']]]]] = None,
            deploy_pipeline_id: Optional[pulumi.Input[str]] = None,
            deploy_stage_id: Optional[pulumi.Input[str]] = None,
            deploy_stage_override_arguments: Optional[pulumi.Input[pulumi.InputType['DeploymentDeployStageOverrideArgumentsArgs']]] = None,
            deployment_arguments: Optional[pulumi.Input[pulumi.InputType['DeploymentDeploymentArgumentsArgs']]] = None,
            deployment_execution_progresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeploymentDeploymentExecutionProgressArgs']]]]] = None,
            deployment_type: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            previous_deployment_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None,
            trigger_new_devops_deployment: Optional[pulumi.Input[bool]] = None) -> 'Deployment':
        """
        Get an existing Deployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeploymentState.__new__(_DeploymentState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["deploy_artifact_override_arguments"] = deploy_artifact_override_arguments
        __props__.__dict__["deploy_pipeline_artifacts"] = deploy_pipeline_artifacts
        __props__.__dict__["deploy_pipeline_environments"] = deploy_pipeline_environments
        __props__.__dict__["deploy_pipeline_id"] = deploy_pipeline_id
        __props__.__dict__["deploy_stage_id"] = deploy_stage_id
        __props__.__dict__["deploy_stage_override_arguments"] = deploy_stage_override_arguments
        __props__.__dict__["deployment_arguments"] = deployment_arguments
        __props__.__dict__["deployment_execution_progresses"] = deployment_execution_progresses
        __props__.__dict__["deployment_type"] = deployment_type
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["previous_deployment_id"] = previous_deployment_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        __props__.__dict__["trigger_new_devops_deployment"] = trigger_new_devops_deployment
        return Deployment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployArtifactOverrideArguments")
    def deploy_artifact_override_arguments(self) -> pulumi.Output[Optional['outputs.DeploymentDeployArtifactOverrideArguments']]:
        return pulumi.get(self, "deploy_artifact_override_arguments")

    @property
    @pulumi.getter(name="deployPipelineArtifacts")
    def deploy_pipeline_artifacts(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentDeployPipelineArtifact']]]:
        return pulumi.get(self, "deploy_pipeline_artifacts")

    @property
    @pulumi.getter(name="deployPipelineEnvironments")
    def deploy_pipeline_environments(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentDeployPipelineEnvironment']]]:
        return pulumi.get(self, "deploy_pipeline_environments")

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "deploy_pipeline_id")

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="deployStageOverrideArguments")
    def deploy_stage_override_arguments(self) -> pulumi.Output[Optional['outputs.DeploymentDeployStageOverrideArguments']]:
        return pulumi.get(self, "deploy_stage_override_arguments")

    @property
    @pulumi.getter(name="deploymentArguments")
    def deployment_arguments(self) -> pulumi.Output[Optional['outputs.DeploymentDeploymentArguments']]:
        return pulumi.get(self, "deployment_arguments")

    @property
    @pulumi.getter(name="deploymentExecutionProgresses")
    def deployment_execution_progresses(self) -> pulumi.Output[Optional[Sequence['outputs.DeploymentDeploymentExecutionProgress']]]:
        return pulumi.get(self, "deployment_execution_progresses")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="previousDeploymentId")
    def previous_deployment_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "previous_deployment_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="triggerNewDevopsDeployment")
    def trigger_new_devops_deployment(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "trigger_new_devops_deployment")

