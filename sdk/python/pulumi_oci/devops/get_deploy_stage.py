# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDeployStageResult',
    'AwaitableGetDeployStageResult',
    'get_deploy_stage',
    'get_deploy_stage_output',
]

@pulumi.output_type
class GetDeployStageResult:
    """
    A collection of values returned by getDeployStage.
    """
    def __init__(__self__, approval_policies=None, are_hooks_enabled=None, blue_backend_ips=None, blue_green_strategies=None, canary_strategies=None, command_spec_deploy_artifact_id=None, compartment_id=None, compute_instance_group_blue_green_deployment_deploy_stage_id=None, compute_instance_group_canary_deploy_stage_id=None, compute_instance_group_canary_traffic_shift_deploy_stage_id=None, compute_instance_group_deploy_environment_id=None, config=None, container_configs=None, defined_tags=None, deploy_artifact_id=None, deploy_artifact_ids=None, deploy_environment_id_a=None, deploy_environment_id_b=None, deploy_pipeline_id=None, deploy_stage_id=None, deploy_stage_predecessor_collections=None, deploy_stage_type=None, deployment_spec_deploy_artifact_id=None, description=None, display_name=None, docker_image_deploy_artifact_id=None, failure_policies=None, freeform_tags=None, function_deploy_environment_id=None, function_timeout_in_seconds=None, green_backend_ips=None, helm_chart_deploy_artifact_id=None, id=None, is_async=None, is_debug_enabled=None, is_force_enabled=None, is_validation_enabled=None, kubernetes_manifest_deploy_artifact_ids=None, lifecycle_details=None, load_balancer_configs=None, max_history=None, max_memory_in_mbs=None, namespace=None, oke_blue_green_deploy_stage_id=None, oke_canary_deploy_stage_id=None, oke_canary_traffic_shift_deploy_stage_id=None, oke_cluster_deploy_environment_id=None, production_load_balancer_configs=None, project_id=None, release_name=None, rollback_policies=None, rollout_policies=None, set_strings=None, set_values=None, should_cleanup_on_fail=None, should_not_wait=None, should_reset_values=None, should_reuse_values=None, should_skip_crds=None, should_skip_render_subchart_notes=None, state=None, system_tags=None, test_load_balancer_configs=None, time_created=None, time_updated=None, timeout_in_seconds=None, traffic_shift_target=None, values_artifact_ids=None, wait_criterias=None):
        if approval_policies and not isinstance(approval_policies, list):
            raise TypeError("Expected argument 'approval_policies' to be a list")
        pulumi.set(__self__, "approval_policies", approval_policies)
        if are_hooks_enabled and not isinstance(are_hooks_enabled, bool):
            raise TypeError("Expected argument 'are_hooks_enabled' to be a bool")
        pulumi.set(__self__, "are_hooks_enabled", are_hooks_enabled)
        if blue_backend_ips and not isinstance(blue_backend_ips, list):
            raise TypeError("Expected argument 'blue_backend_ips' to be a list")
        pulumi.set(__self__, "blue_backend_ips", blue_backend_ips)
        if blue_green_strategies and not isinstance(blue_green_strategies, list):
            raise TypeError("Expected argument 'blue_green_strategies' to be a list")
        pulumi.set(__self__, "blue_green_strategies", blue_green_strategies)
        if canary_strategies and not isinstance(canary_strategies, list):
            raise TypeError("Expected argument 'canary_strategies' to be a list")
        pulumi.set(__self__, "canary_strategies", canary_strategies)
        if command_spec_deploy_artifact_id and not isinstance(command_spec_deploy_artifact_id, str):
            raise TypeError("Expected argument 'command_spec_deploy_artifact_id' to be a str")
        pulumi.set(__self__, "command_spec_deploy_artifact_id", command_spec_deploy_artifact_id)
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_instance_group_blue_green_deployment_deploy_stage_id and not isinstance(compute_instance_group_blue_green_deployment_deploy_stage_id, str):
            raise TypeError("Expected argument 'compute_instance_group_blue_green_deployment_deploy_stage_id' to be a str")
        pulumi.set(__self__, "compute_instance_group_blue_green_deployment_deploy_stage_id", compute_instance_group_blue_green_deployment_deploy_stage_id)
        if compute_instance_group_canary_deploy_stage_id and not isinstance(compute_instance_group_canary_deploy_stage_id, str):
            raise TypeError("Expected argument 'compute_instance_group_canary_deploy_stage_id' to be a str")
        pulumi.set(__self__, "compute_instance_group_canary_deploy_stage_id", compute_instance_group_canary_deploy_stage_id)
        if compute_instance_group_canary_traffic_shift_deploy_stage_id and not isinstance(compute_instance_group_canary_traffic_shift_deploy_stage_id, str):
            raise TypeError("Expected argument 'compute_instance_group_canary_traffic_shift_deploy_stage_id' to be a str")
        pulumi.set(__self__, "compute_instance_group_canary_traffic_shift_deploy_stage_id", compute_instance_group_canary_traffic_shift_deploy_stage_id)
        if compute_instance_group_deploy_environment_id and not isinstance(compute_instance_group_deploy_environment_id, str):
            raise TypeError("Expected argument 'compute_instance_group_deploy_environment_id' to be a str")
        pulumi.set(__self__, "compute_instance_group_deploy_environment_id", compute_instance_group_deploy_environment_id)
        if config and not isinstance(config, dict):
            raise TypeError("Expected argument 'config' to be a dict")
        pulumi.set(__self__, "config", config)
        if container_configs and not isinstance(container_configs, list):
            raise TypeError("Expected argument 'container_configs' to be a list")
        pulumi.set(__self__, "container_configs", container_configs)
        if defined_tags and not isinstance(defined_tags, dict):
            raise TypeError("Expected argument 'defined_tags' to be a dict")
        pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_artifact_id and not isinstance(deploy_artifact_id, str):
            raise TypeError("Expected argument 'deploy_artifact_id' to be a str")
        pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_artifact_ids and not isinstance(deploy_artifact_ids, list):
            raise TypeError("Expected argument 'deploy_artifact_ids' to be a list")
        pulumi.set(__self__, "deploy_artifact_ids", deploy_artifact_ids)
        if deploy_environment_id_a and not isinstance(deploy_environment_id_a, str):
            raise TypeError("Expected argument 'deploy_environment_id_a' to be a str")
        pulumi.set(__self__, "deploy_environment_id_a", deploy_environment_id_a)
        if deploy_environment_id_b and not isinstance(deploy_environment_id_b, str):
            raise TypeError("Expected argument 'deploy_environment_id_b' to be a str")
        pulumi.set(__self__, "deploy_environment_id_b", deploy_environment_id_b)
        if deploy_pipeline_id and not isinstance(deploy_pipeline_id, str):
            raise TypeError("Expected argument 'deploy_pipeline_id' to be a str")
        pulumi.set(__self__, "deploy_pipeline_id", deploy_pipeline_id)
        if deploy_stage_id and not isinstance(deploy_stage_id, str):
            raise TypeError("Expected argument 'deploy_stage_id' to be a str")
        pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if deploy_stage_predecessor_collections and not isinstance(deploy_stage_predecessor_collections, list):
            raise TypeError("Expected argument 'deploy_stage_predecessor_collections' to be a list")
        pulumi.set(__self__, "deploy_stage_predecessor_collections", deploy_stage_predecessor_collections)
        if deploy_stage_type and not isinstance(deploy_stage_type, str):
            raise TypeError("Expected argument 'deploy_stage_type' to be a str")
        pulumi.set(__self__, "deploy_stage_type", deploy_stage_type)
        if deployment_spec_deploy_artifact_id and not isinstance(deployment_spec_deploy_artifact_id, str):
            raise TypeError("Expected argument 'deployment_spec_deploy_artifact_id' to be a str")
        pulumi.set(__self__, "deployment_spec_deploy_artifact_id", deployment_spec_deploy_artifact_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if docker_image_deploy_artifact_id and not isinstance(docker_image_deploy_artifact_id, str):
            raise TypeError("Expected argument 'docker_image_deploy_artifact_id' to be a str")
        pulumi.set(__self__, "docker_image_deploy_artifact_id", docker_image_deploy_artifact_id)
        if failure_policies and not isinstance(failure_policies, list):
            raise TypeError("Expected argument 'failure_policies' to be a list")
        pulumi.set(__self__, "failure_policies", failure_policies)
        if freeform_tags and not isinstance(freeform_tags, dict):
            raise TypeError("Expected argument 'freeform_tags' to be a dict")
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        if function_deploy_environment_id and not isinstance(function_deploy_environment_id, str):
            raise TypeError("Expected argument 'function_deploy_environment_id' to be a str")
        pulumi.set(__self__, "function_deploy_environment_id", function_deploy_environment_id)
        if function_timeout_in_seconds and not isinstance(function_timeout_in_seconds, int):
            raise TypeError("Expected argument 'function_timeout_in_seconds' to be a int")
        pulumi.set(__self__, "function_timeout_in_seconds", function_timeout_in_seconds)
        if green_backend_ips and not isinstance(green_backend_ips, list):
            raise TypeError("Expected argument 'green_backend_ips' to be a list")
        pulumi.set(__self__, "green_backend_ips", green_backend_ips)
        if helm_chart_deploy_artifact_id and not isinstance(helm_chart_deploy_artifact_id, str):
            raise TypeError("Expected argument 'helm_chart_deploy_artifact_id' to be a str")
        pulumi.set(__self__, "helm_chart_deploy_artifact_id", helm_chart_deploy_artifact_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_async and not isinstance(is_async, bool):
            raise TypeError("Expected argument 'is_async' to be a bool")
        pulumi.set(__self__, "is_async", is_async)
        if is_debug_enabled and not isinstance(is_debug_enabled, bool):
            raise TypeError("Expected argument 'is_debug_enabled' to be a bool")
        pulumi.set(__self__, "is_debug_enabled", is_debug_enabled)
        if is_force_enabled and not isinstance(is_force_enabled, bool):
            raise TypeError("Expected argument 'is_force_enabled' to be a bool")
        pulumi.set(__self__, "is_force_enabled", is_force_enabled)
        if is_validation_enabled and not isinstance(is_validation_enabled, bool):
            raise TypeError("Expected argument 'is_validation_enabled' to be a bool")
        pulumi.set(__self__, "is_validation_enabled", is_validation_enabled)
        if kubernetes_manifest_deploy_artifact_ids and not isinstance(kubernetes_manifest_deploy_artifact_ids, list):
            raise TypeError("Expected argument 'kubernetes_manifest_deploy_artifact_ids' to be a list")
        pulumi.set(__self__, "kubernetes_manifest_deploy_artifact_ids", kubernetes_manifest_deploy_artifact_ids)
        if lifecycle_details and not isinstance(lifecycle_details, str):
            raise TypeError("Expected argument 'lifecycle_details' to be a str")
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if load_balancer_configs and not isinstance(load_balancer_configs, list):
            raise TypeError("Expected argument 'load_balancer_configs' to be a list")
        pulumi.set(__self__, "load_balancer_configs", load_balancer_configs)
        if max_history and not isinstance(max_history, int):
            raise TypeError("Expected argument 'max_history' to be a int")
        pulumi.set(__self__, "max_history", max_history)
        if max_memory_in_mbs and not isinstance(max_memory_in_mbs, str):
            raise TypeError("Expected argument 'max_memory_in_mbs' to be a str")
        pulumi.set(__self__, "max_memory_in_mbs", max_memory_in_mbs)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if oke_blue_green_deploy_stage_id and not isinstance(oke_blue_green_deploy_stage_id, str):
            raise TypeError("Expected argument 'oke_blue_green_deploy_stage_id' to be a str")
        pulumi.set(__self__, "oke_blue_green_deploy_stage_id", oke_blue_green_deploy_stage_id)
        if oke_canary_deploy_stage_id and not isinstance(oke_canary_deploy_stage_id, str):
            raise TypeError("Expected argument 'oke_canary_deploy_stage_id' to be a str")
        pulumi.set(__self__, "oke_canary_deploy_stage_id", oke_canary_deploy_stage_id)
        if oke_canary_traffic_shift_deploy_stage_id and not isinstance(oke_canary_traffic_shift_deploy_stage_id, str):
            raise TypeError("Expected argument 'oke_canary_traffic_shift_deploy_stage_id' to be a str")
        pulumi.set(__self__, "oke_canary_traffic_shift_deploy_stage_id", oke_canary_traffic_shift_deploy_stage_id)
        if oke_cluster_deploy_environment_id and not isinstance(oke_cluster_deploy_environment_id, str):
            raise TypeError("Expected argument 'oke_cluster_deploy_environment_id' to be a str")
        pulumi.set(__self__, "oke_cluster_deploy_environment_id", oke_cluster_deploy_environment_id)
        if production_load_balancer_configs and not isinstance(production_load_balancer_configs, list):
            raise TypeError("Expected argument 'production_load_balancer_configs' to be a list")
        pulumi.set(__self__, "production_load_balancer_configs", production_load_balancer_configs)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if release_name and not isinstance(release_name, str):
            raise TypeError("Expected argument 'release_name' to be a str")
        pulumi.set(__self__, "release_name", release_name)
        if rollback_policies and not isinstance(rollback_policies, list):
            raise TypeError("Expected argument 'rollback_policies' to be a list")
        pulumi.set(__self__, "rollback_policies", rollback_policies)
        if rollout_policies and not isinstance(rollout_policies, list):
            raise TypeError("Expected argument 'rollout_policies' to be a list")
        pulumi.set(__self__, "rollout_policies", rollout_policies)
        if set_strings and not isinstance(set_strings, list):
            raise TypeError("Expected argument 'set_strings' to be a list")
        pulumi.set(__self__, "set_strings", set_strings)
        if set_values and not isinstance(set_values, list):
            raise TypeError("Expected argument 'set_values' to be a list")
        pulumi.set(__self__, "set_values", set_values)
        if should_cleanup_on_fail and not isinstance(should_cleanup_on_fail, bool):
            raise TypeError("Expected argument 'should_cleanup_on_fail' to be a bool")
        pulumi.set(__self__, "should_cleanup_on_fail", should_cleanup_on_fail)
        if should_not_wait and not isinstance(should_not_wait, bool):
            raise TypeError("Expected argument 'should_not_wait' to be a bool")
        pulumi.set(__self__, "should_not_wait", should_not_wait)
        if should_reset_values and not isinstance(should_reset_values, bool):
            raise TypeError("Expected argument 'should_reset_values' to be a bool")
        pulumi.set(__self__, "should_reset_values", should_reset_values)
        if should_reuse_values and not isinstance(should_reuse_values, bool):
            raise TypeError("Expected argument 'should_reuse_values' to be a bool")
        pulumi.set(__self__, "should_reuse_values", should_reuse_values)
        if should_skip_crds and not isinstance(should_skip_crds, bool):
            raise TypeError("Expected argument 'should_skip_crds' to be a bool")
        pulumi.set(__self__, "should_skip_crds", should_skip_crds)
        if should_skip_render_subchart_notes and not isinstance(should_skip_render_subchart_notes, bool):
            raise TypeError("Expected argument 'should_skip_render_subchart_notes' to be a bool")
        pulumi.set(__self__, "should_skip_render_subchart_notes", should_skip_render_subchart_notes)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if system_tags and not isinstance(system_tags, dict):
            raise TypeError("Expected argument 'system_tags' to be a dict")
        pulumi.set(__self__, "system_tags", system_tags)
        if test_load_balancer_configs and not isinstance(test_load_balancer_configs, list):
            raise TypeError("Expected argument 'test_load_balancer_configs' to be a list")
        pulumi.set(__self__, "test_load_balancer_configs", test_load_balancer_configs)
        if time_created and not isinstance(time_created, str):
            raise TypeError("Expected argument 'time_created' to be a str")
        pulumi.set(__self__, "time_created", time_created)
        if time_updated and not isinstance(time_updated, str):
            raise TypeError("Expected argument 'time_updated' to be a str")
        pulumi.set(__self__, "time_updated", time_updated)
        if timeout_in_seconds and not isinstance(timeout_in_seconds, int):
            raise TypeError("Expected argument 'timeout_in_seconds' to be a int")
        pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if traffic_shift_target and not isinstance(traffic_shift_target, str):
            raise TypeError("Expected argument 'traffic_shift_target' to be a str")
        pulumi.set(__self__, "traffic_shift_target", traffic_shift_target)
        if values_artifact_ids and not isinstance(values_artifact_ids, list):
            raise TypeError("Expected argument 'values_artifact_ids' to be a list")
        pulumi.set(__self__, "values_artifact_ids", values_artifact_ids)
        if wait_criterias and not isinstance(wait_criterias, list):
            raise TypeError("Expected argument 'wait_criterias' to be a list")
        pulumi.set(__self__, "wait_criterias", wait_criterias)

    @property
    @pulumi.getter(name="approvalPolicies")
    def approval_policies(self) -> Sequence['outputs.GetDeployStageApprovalPolicyResult']:
        """
        Specifies the approval policy.
        """
        return pulumi.get(self, "approval_policies")

    @property
    @pulumi.getter(name="areHooksEnabled")
    def are_hooks_enabled(self) -> bool:
        """
        Disable pre/post upgrade hooks. Set to false by default.
        """
        return pulumi.get(self, "are_hooks_enabled")

    @property
    @pulumi.getter(name="blueBackendIps")
    def blue_backend_ips(self) -> Sequence['outputs.GetDeployStageBlueBackendIpResult']:
        """
        Collection of backend environment IP addresses.
        """
        return pulumi.get(self, "blue_backend_ips")

    @property
    @pulumi.getter(name="blueGreenStrategies")
    def blue_green_strategies(self) -> Sequence['outputs.GetDeployStageBlueGreenStrategyResult']:
        """
        Specifies the required blue green release strategy for OKE deployment.
        """
        return pulumi.get(self, "blue_green_strategies")

    @property
    @pulumi.getter(name="canaryStrategies")
    def canary_strategies(self) -> Sequence['outputs.GetDeployStageCanaryStrategyResult']:
        """
        Specifies the required canary release strategy for OKE deployment.
        """
        return pulumi.get(self, "canary_strategies")

    @property
    @pulumi.getter(name="commandSpecDeployArtifactId")
    def command_spec_deploy_artifact_id(self) -> str:
        """
        The OCID of the artifact that contains the command specification.
        """
        return pulumi.get(self, "command_spec_deploy_artifact_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment where the ContainerInstance will be created.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeInstanceGroupBlueGreenDeploymentDeployStageId")
    def compute_instance_group_blue_green_deployment_deploy_stage_id(self) -> str:
        """
        The OCID of the upstream compute instance group blue-green deployment stage in this pipeline.
        """
        return pulumi.get(self, "compute_instance_group_blue_green_deployment_deploy_stage_id")

    @property
    @pulumi.getter(name="computeInstanceGroupCanaryDeployStageId")
    def compute_instance_group_canary_deploy_stage_id(self) -> str:
        """
        The OCID of an upstream compute instance group canary deployment stage ID in this pipeline.
        """
        return pulumi.get(self, "compute_instance_group_canary_deploy_stage_id")

    @property
    @pulumi.getter(name="computeInstanceGroupCanaryTrafficShiftDeployStageId")
    def compute_instance_group_canary_traffic_shift_deploy_stage_id(self) -> str:
        """
        A compute instance group canary traffic shift stage OCID for load balancer.
        """
        return pulumi.get(self, "compute_instance_group_canary_traffic_shift_deploy_stage_id")

    @property
    @pulumi.getter(name="computeInstanceGroupDeployEnvironmentId")
    def compute_instance_group_deploy_environment_id(self) -> str:
        """
        A compute instance group environment OCID for rolling deployment.
        """
        return pulumi.get(self, "compute_instance_group_deploy_environment_id")

    @property
    @pulumi.getter
    def config(self) -> Mapping[str, Any]:
        """
        User provided key and value pair configuration, which is assigned through constants or parameter.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="containerConfigs")
    def container_configs(self) -> Sequence['outputs.GetDeployStageContainerConfigResult']:
        """
        Specifies the container configuration.
        """
        return pulumi.get(self, "container_configs")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> str:
        """
        Optional artifact OCID. The artifact will be included in the body for the function invocation during the stage's execution. If the DeployArtifact.argumentSubstituitionMode is set to SUBSTITUTE_PLACEHOLDERS, then the pipeline parameter values will be used to replace the placeholders in the artifact content.
        """
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployArtifactIds")
    def deploy_artifact_ids(self) -> Sequence[str]:
        """
        The list of file artifact OCIDs to deploy.
        """
        return pulumi.get(self, "deploy_artifact_ids")

    @property
    @pulumi.getter(name="deployEnvironmentIdA")
    def deploy_environment_id_a(self) -> str:
        """
        First compute instance group environment OCID for deployment.
        """
        return pulumi.get(self, "deploy_environment_id_a")

    @property
    @pulumi.getter(name="deployEnvironmentIdB")
    def deploy_environment_id_b(self) -> str:
        """
        Second compute instance group environment OCID for deployment.
        """
        return pulumi.get(self, "deploy_environment_id_b")

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> str:
        """
        The OCID of a pipeline.
        """
        return pulumi.get(self, "deploy_pipeline_id")

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> str:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="deployStagePredecessorCollections")
    def deploy_stage_predecessor_collections(self) -> Sequence['outputs.GetDeployStageDeployStagePredecessorCollectionResult']:
        """
        Collection containing the predecessors of a stage.
        """
        return pulumi.get(self, "deploy_stage_predecessor_collections")

    @property
    @pulumi.getter(name="deployStageType")
    def deploy_stage_type(self) -> str:
        """
        Deployment stage type.
        """
        return pulumi.get(self, "deploy_stage_type")

    @property
    @pulumi.getter(name="deploymentSpecDeployArtifactId")
    def deployment_spec_deploy_artifact_id(self) -> str:
        """
        The OCID of the artifact that contains the deployment specification.
        """
        return pulumi.get(self, "deployment_spec_deploy_artifact_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Optional description about the deployment stage.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Deployment stage display name, which can be renamed and is not necessarily unique. Avoid entering confidential information.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dockerImageDeployArtifactId")
    def docker_image_deploy_artifact_id(self) -> str:
        """
        A Docker image artifact OCID.
        """
        return pulumi.get(self, "docker_image_deploy_artifact_id")

    @property
    @pulumi.getter(name="failurePolicies")
    def failure_policies(self) -> Sequence['outputs.GetDeployStageFailurePolicyResult']:
        """
        Specifies a failure policy for a compute instance group rolling deployment stage.
        """
        return pulumi.get(self, "failure_policies")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="functionDeployEnvironmentId")
    def function_deploy_environment_id(self) -> str:
        """
        Function environment OCID.
        """
        return pulumi.get(self, "function_deploy_environment_id")

    @property
    @pulumi.getter(name="functionTimeoutInSeconds")
    def function_timeout_in_seconds(self) -> int:
        """
        Timeout for execution of the Function. Value in seconds.
        """
        return pulumi.get(self, "function_timeout_in_seconds")

    @property
    @pulumi.getter(name="greenBackendIps")
    def green_backend_ips(self) -> Sequence['outputs.GetDeployStageGreenBackendIpResult']:
        """
        Collection of backend environment IP addresses.
        """
        return pulumi.get(self, "green_backend_ips")

    @property
    @pulumi.getter(name="helmChartDeployArtifactId")
    def helm_chart_deploy_artifact_id(self) -> str:
        """
        Helm chart artifact OCID.
        """
        return pulumi.get(self, "helm_chart_deploy_artifact_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier that is immutable on creation.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAsync")
    def is_async(self) -> bool:
        """
        A boolean flag specifies whether this stage executes asynchronously.
        """
        return pulumi.get(self, "is_async")

    @property
    @pulumi.getter(name="isDebugEnabled")
    def is_debug_enabled(self) -> bool:
        """
        Enables helm --debug option to stream output to tf stdout. Set to false by default.
        """
        return pulumi.get(self, "is_debug_enabled")

    @property
    @pulumi.getter(name="isForceEnabled")
    def is_force_enabled(self) -> bool:
        """
        Force resource update through delete; or if required, recreate. Set to false by default.
        """
        return pulumi.get(self, "is_force_enabled")

    @property
    @pulumi.getter(name="isValidationEnabled")
    def is_validation_enabled(self) -> bool:
        """
        A boolean flag specifies whether the invoked function must be validated.
        """
        return pulumi.get(self, "is_validation_enabled")

    @property
    @pulumi.getter(name="kubernetesManifestDeployArtifactIds")
    def kubernetes_manifest_deploy_artifact_ids(self) -> Sequence[str]:
        """
        List of Kubernetes manifest artifact OCIDs.
        """
        return pulumi.get(self, "kubernetes_manifest_deploy_artifact_ids")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="loadBalancerConfigs")
    def load_balancer_configs(self) -> Sequence['outputs.GetDeployStageLoadBalancerConfigResult']:
        """
        Specifies config for load balancer traffic shift stages. The Load Balancer specified here should be an Application Load Balancer type. Network Load Balancers are not supported.
        """
        return pulumi.get(self, "load_balancer_configs")

    @property
    @pulumi.getter(name="maxHistory")
    def max_history(self) -> int:
        """
        Limit the maximum number of revisions saved per release. Use 0 for no limit. Set to 10 by default
        """
        return pulumi.get(self, "max_history")

    @property
    @pulumi.getter(name="maxMemoryInMbs")
    def max_memory_in_mbs(self) -> str:
        """
        Maximum usable memory for the Function (in MB).
        """
        return pulumi.get(self, "max_memory_in_mbs")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Default Namespace to be used for Kubernetes deployment when not specified in the manifest.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="okeBlueGreenDeployStageId")
    def oke_blue_green_deploy_stage_id(self) -> str:
        """
        The OCID of the upstream OKE blue-green deployment stage in this pipeline.
        """
        return pulumi.get(self, "oke_blue_green_deploy_stage_id")

    @property
    @pulumi.getter(name="okeCanaryDeployStageId")
    def oke_canary_deploy_stage_id(self) -> str:
        """
        The OCID of an upstream OKE canary deployment stage in this pipeline.
        """
        return pulumi.get(self, "oke_canary_deploy_stage_id")

    @property
    @pulumi.getter(name="okeCanaryTrafficShiftDeployStageId")
    def oke_canary_traffic_shift_deploy_stage_id(self) -> str:
        """
        The OCID of an upstream OKE canary deployment traffic shift stage in this pipeline.
        """
        return pulumi.get(self, "oke_canary_traffic_shift_deploy_stage_id")

    @property
    @pulumi.getter(name="okeClusterDeployEnvironmentId")
    def oke_cluster_deploy_environment_id(self) -> str:
        """
        Kubernetes cluster environment OCID for deployment.
        """
        return pulumi.get(self, "oke_cluster_deploy_environment_id")

    @property
    @pulumi.getter(name="productionLoadBalancerConfigs")
    def production_load_balancer_configs(self) -> Sequence['outputs.GetDeployStageProductionLoadBalancerConfigResult']:
        """
        Specifies config for load balancer traffic shift stages. The Load Balancer specified here should be an Application Load Balancer type. Network Load Balancers are not supported.
        """
        return pulumi.get(self, "production_load_balancer_configs")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        The OCID of a project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> str:
        """
        Release name of the Helm chart.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="rollbackPolicies")
    def rollback_policies(self) -> Sequence['outputs.GetDeployStageRollbackPolicyResult']:
        """
        Specifies the rollback policy. This is initiated on the failure of certain stage types.
        """
        return pulumi.get(self, "rollback_policies")

    @property
    @pulumi.getter(name="rolloutPolicies")
    def rollout_policies(self) -> Sequence['outputs.GetDeployStageRolloutPolicyResult']:
        """
        Description of rollout policy for load balancer traffic shift stage.
        """
        return pulumi.get(self, "rollout_policies")

    @property
    @pulumi.getter(name="setStrings")
    def set_strings(self) -> Sequence['outputs.GetDeployStageSetStringResult']:
        """
        Specifies the name and value pairs to set helm values.
        """
        return pulumi.get(self, "set_strings")

    @property
    @pulumi.getter(name="setValues")
    def set_values(self) -> Sequence['outputs.GetDeployStageSetValueResult']:
        """
        Specifies the name and value pairs to set helm values.
        """
        return pulumi.get(self, "set_values")

    @property
    @pulumi.getter(name="shouldCleanupOnFail")
    def should_cleanup_on_fail(self) -> bool:
        """
        Allow deletion of new resources created during when an upgrade fails. Set to false by default.
        """
        return pulumi.get(self, "should_cleanup_on_fail")

    @property
    @pulumi.getter(name="shouldNotWait")
    def should_not_wait(self) -> bool:
        """
        Waits until all the resources are in a ready state to mark the release as successful. Set to false by default.
        """
        return pulumi.get(self, "should_not_wait")

    @property
    @pulumi.getter(name="shouldResetValues")
    def should_reset_values(self) -> bool:
        """
        During upgrade, reset the values to the ones built into the chart. It overrides shouldReuseValues. Set to false by default.
        """
        return pulumi.get(self, "should_reset_values")

    @property
    @pulumi.getter(name="shouldReuseValues")
    def should_reuse_values(self) -> bool:
        """
        During upgrade, reuse the values of the last release and merge overrides from the command line. Set to false by default.
        """
        return pulumi.get(self, "should_reuse_values")

    @property
    @pulumi.getter(name="shouldSkipCrds")
    def should_skip_crds(self) -> bool:
        """
        If set, no CRDs are installed. By default, CRDs are installed only if they are not present already. Set to false by default.
        """
        return pulumi.get(self, "should_skip_crds")

    @property
    @pulumi.getter(name="shouldSkipRenderSubchartNotes")
    def should_skip_render_subchart_notes(self) -> bool:
        """
        If set, renders subchart notes along with the parent. Set to false by default.
        """
        return pulumi.get(self, "should_skip_render_subchart_notes")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the deployment stage.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. See [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="testLoadBalancerConfigs")
    def test_load_balancer_configs(self) -> Sequence['outputs.GetDeployStageTestLoadBalancerConfigResult']:
        """
        Specifies config for load balancer traffic shift stages. The Load Balancer specified here should be an Application Load Balancer type. Network Load Balancers are not supported.
        """
        return pulumi.get(self, "test_load_balancer_configs")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        Time the deployment stage was created. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        Time the deployment stage was updated. Format defined by [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339).
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> int:
        """
        Time to wait for execution of a Shell/Helm stage. Defaults to 36000 seconds for Shell and 300 seconds for Helm Stage
        """
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="trafficShiftTarget")
    def traffic_shift_target(self) -> str:
        """
        Specifies the target or destination backend set.
        """
        return pulumi.get(self, "traffic_shift_target")

    @property
    @pulumi.getter(name="valuesArtifactIds")
    def values_artifact_ids(self) -> Sequence[str]:
        """
        List of values.yaml file artifact OCIDs.
        """
        return pulumi.get(self, "values_artifact_ids")

    @property
    @pulumi.getter(name="waitCriterias")
    def wait_criterias(self) -> Sequence['outputs.GetDeployStageWaitCriteriaResult']:
        """
        Specifies wait criteria for the Wait stage.
        """
        return pulumi.get(self, "wait_criterias")


class AwaitableGetDeployStageResult(GetDeployStageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeployStageResult(
            approval_policies=self.approval_policies,
            are_hooks_enabled=self.are_hooks_enabled,
            blue_backend_ips=self.blue_backend_ips,
            blue_green_strategies=self.blue_green_strategies,
            canary_strategies=self.canary_strategies,
            command_spec_deploy_artifact_id=self.command_spec_deploy_artifact_id,
            compartment_id=self.compartment_id,
            compute_instance_group_blue_green_deployment_deploy_stage_id=self.compute_instance_group_blue_green_deployment_deploy_stage_id,
            compute_instance_group_canary_deploy_stage_id=self.compute_instance_group_canary_deploy_stage_id,
            compute_instance_group_canary_traffic_shift_deploy_stage_id=self.compute_instance_group_canary_traffic_shift_deploy_stage_id,
            compute_instance_group_deploy_environment_id=self.compute_instance_group_deploy_environment_id,
            config=self.config,
            container_configs=self.container_configs,
            defined_tags=self.defined_tags,
            deploy_artifact_id=self.deploy_artifact_id,
            deploy_artifact_ids=self.deploy_artifact_ids,
            deploy_environment_id_a=self.deploy_environment_id_a,
            deploy_environment_id_b=self.deploy_environment_id_b,
            deploy_pipeline_id=self.deploy_pipeline_id,
            deploy_stage_id=self.deploy_stage_id,
            deploy_stage_predecessor_collections=self.deploy_stage_predecessor_collections,
            deploy_stage_type=self.deploy_stage_type,
            deployment_spec_deploy_artifact_id=self.deployment_spec_deploy_artifact_id,
            description=self.description,
            display_name=self.display_name,
            docker_image_deploy_artifact_id=self.docker_image_deploy_artifact_id,
            failure_policies=self.failure_policies,
            freeform_tags=self.freeform_tags,
            function_deploy_environment_id=self.function_deploy_environment_id,
            function_timeout_in_seconds=self.function_timeout_in_seconds,
            green_backend_ips=self.green_backend_ips,
            helm_chart_deploy_artifact_id=self.helm_chart_deploy_artifact_id,
            id=self.id,
            is_async=self.is_async,
            is_debug_enabled=self.is_debug_enabled,
            is_force_enabled=self.is_force_enabled,
            is_validation_enabled=self.is_validation_enabled,
            kubernetes_manifest_deploy_artifact_ids=self.kubernetes_manifest_deploy_artifact_ids,
            lifecycle_details=self.lifecycle_details,
            load_balancer_configs=self.load_balancer_configs,
            max_history=self.max_history,
            max_memory_in_mbs=self.max_memory_in_mbs,
            namespace=self.namespace,
            oke_blue_green_deploy_stage_id=self.oke_blue_green_deploy_stage_id,
            oke_canary_deploy_stage_id=self.oke_canary_deploy_stage_id,
            oke_canary_traffic_shift_deploy_stage_id=self.oke_canary_traffic_shift_deploy_stage_id,
            oke_cluster_deploy_environment_id=self.oke_cluster_deploy_environment_id,
            production_load_balancer_configs=self.production_load_balancer_configs,
            project_id=self.project_id,
            release_name=self.release_name,
            rollback_policies=self.rollback_policies,
            rollout_policies=self.rollout_policies,
            set_strings=self.set_strings,
            set_values=self.set_values,
            should_cleanup_on_fail=self.should_cleanup_on_fail,
            should_not_wait=self.should_not_wait,
            should_reset_values=self.should_reset_values,
            should_reuse_values=self.should_reuse_values,
            should_skip_crds=self.should_skip_crds,
            should_skip_render_subchart_notes=self.should_skip_render_subchart_notes,
            state=self.state,
            system_tags=self.system_tags,
            test_load_balancer_configs=self.test_load_balancer_configs,
            time_created=self.time_created,
            time_updated=self.time_updated,
            timeout_in_seconds=self.timeout_in_seconds,
            traffic_shift_target=self.traffic_shift_target,
            values_artifact_ids=self.values_artifact_ids,
            wait_criterias=self.wait_criterias)


def get_deploy_stage(deploy_stage_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeployStageResult:
    """
    This data source provides details about a specific Deploy Stage resource in Oracle Cloud Infrastructure Devops service.

    Retrieves a deployment stage by identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_deploy_stage = oci.DevOps.get_deploy_stage(deploy_stage_id=oci_devops_deploy_stage["test_deploy_stage"]["id"])
    ```


    :param str deploy_stage_id: Unique stage identifier.
    """
    __args__ = dict()
    __args__['deployStageId'] = deploy_stage_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:DevOps/getDeployStage:getDeployStage', __args__, opts=opts, typ=GetDeployStageResult).value

    return AwaitableGetDeployStageResult(
        approval_policies=pulumi.get(__ret__, 'approval_policies'),
        are_hooks_enabled=pulumi.get(__ret__, 'are_hooks_enabled'),
        blue_backend_ips=pulumi.get(__ret__, 'blue_backend_ips'),
        blue_green_strategies=pulumi.get(__ret__, 'blue_green_strategies'),
        canary_strategies=pulumi.get(__ret__, 'canary_strategies'),
        command_spec_deploy_artifact_id=pulumi.get(__ret__, 'command_spec_deploy_artifact_id'),
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        compute_instance_group_blue_green_deployment_deploy_stage_id=pulumi.get(__ret__, 'compute_instance_group_blue_green_deployment_deploy_stage_id'),
        compute_instance_group_canary_deploy_stage_id=pulumi.get(__ret__, 'compute_instance_group_canary_deploy_stage_id'),
        compute_instance_group_canary_traffic_shift_deploy_stage_id=pulumi.get(__ret__, 'compute_instance_group_canary_traffic_shift_deploy_stage_id'),
        compute_instance_group_deploy_environment_id=pulumi.get(__ret__, 'compute_instance_group_deploy_environment_id'),
        config=pulumi.get(__ret__, 'config'),
        container_configs=pulumi.get(__ret__, 'container_configs'),
        defined_tags=pulumi.get(__ret__, 'defined_tags'),
        deploy_artifact_id=pulumi.get(__ret__, 'deploy_artifact_id'),
        deploy_artifact_ids=pulumi.get(__ret__, 'deploy_artifact_ids'),
        deploy_environment_id_a=pulumi.get(__ret__, 'deploy_environment_id_a'),
        deploy_environment_id_b=pulumi.get(__ret__, 'deploy_environment_id_b'),
        deploy_pipeline_id=pulumi.get(__ret__, 'deploy_pipeline_id'),
        deploy_stage_id=pulumi.get(__ret__, 'deploy_stage_id'),
        deploy_stage_predecessor_collections=pulumi.get(__ret__, 'deploy_stage_predecessor_collections'),
        deploy_stage_type=pulumi.get(__ret__, 'deploy_stage_type'),
        deployment_spec_deploy_artifact_id=pulumi.get(__ret__, 'deployment_spec_deploy_artifact_id'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        docker_image_deploy_artifact_id=pulumi.get(__ret__, 'docker_image_deploy_artifact_id'),
        failure_policies=pulumi.get(__ret__, 'failure_policies'),
        freeform_tags=pulumi.get(__ret__, 'freeform_tags'),
        function_deploy_environment_id=pulumi.get(__ret__, 'function_deploy_environment_id'),
        function_timeout_in_seconds=pulumi.get(__ret__, 'function_timeout_in_seconds'),
        green_backend_ips=pulumi.get(__ret__, 'green_backend_ips'),
        helm_chart_deploy_artifact_id=pulumi.get(__ret__, 'helm_chart_deploy_artifact_id'),
        id=pulumi.get(__ret__, 'id'),
        is_async=pulumi.get(__ret__, 'is_async'),
        is_debug_enabled=pulumi.get(__ret__, 'is_debug_enabled'),
        is_force_enabled=pulumi.get(__ret__, 'is_force_enabled'),
        is_validation_enabled=pulumi.get(__ret__, 'is_validation_enabled'),
        kubernetes_manifest_deploy_artifact_ids=pulumi.get(__ret__, 'kubernetes_manifest_deploy_artifact_ids'),
        lifecycle_details=pulumi.get(__ret__, 'lifecycle_details'),
        load_balancer_configs=pulumi.get(__ret__, 'load_balancer_configs'),
        max_history=pulumi.get(__ret__, 'max_history'),
        max_memory_in_mbs=pulumi.get(__ret__, 'max_memory_in_mbs'),
        namespace=pulumi.get(__ret__, 'namespace'),
        oke_blue_green_deploy_stage_id=pulumi.get(__ret__, 'oke_blue_green_deploy_stage_id'),
        oke_canary_deploy_stage_id=pulumi.get(__ret__, 'oke_canary_deploy_stage_id'),
        oke_canary_traffic_shift_deploy_stage_id=pulumi.get(__ret__, 'oke_canary_traffic_shift_deploy_stage_id'),
        oke_cluster_deploy_environment_id=pulumi.get(__ret__, 'oke_cluster_deploy_environment_id'),
        production_load_balancer_configs=pulumi.get(__ret__, 'production_load_balancer_configs'),
        project_id=pulumi.get(__ret__, 'project_id'),
        release_name=pulumi.get(__ret__, 'release_name'),
        rollback_policies=pulumi.get(__ret__, 'rollback_policies'),
        rollout_policies=pulumi.get(__ret__, 'rollout_policies'),
        set_strings=pulumi.get(__ret__, 'set_strings'),
        set_values=pulumi.get(__ret__, 'set_values'),
        should_cleanup_on_fail=pulumi.get(__ret__, 'should_cleanup_on_fail'),
        should_not_wait=pulumi.get(__ret__, 'should_not_wait'),
        should_reset_values=pulumi.get(__ret__, 'should_reset_values'),
        should_reuse_values=pulumi.get(__ret__, 'should_reuse_values'),
        should_skip_crds=pulumi.get(__ret__, 'should_skip_crds'),
        should_skip_render_subchart_notes=pulumi.get(__ret__, 'should_skip_render_subchart_notes'),
        state=pulumi.get(__ret__, 'state'),
        system_tags=pulumi.get(__ret__, 'system_tags'),
        test_load_balancer_configs=pulumi.get(__ret__, 'test_load_balancer_configs'),
        time_created=pulumi.get(__ret__, 'time_created'),
        time_updated=pulumi.get(__ret__, 'time_updated'),
        timeout_in_seconds=pulumi.get(__ret__, 'timeout_in_seconds'),
        traffic_shift_target=pulumi.get(__ret__, 'traffic_shift_target'),
        values_artifact_ids=pulumi.get(__ret__, 'values_artifact_ids'),
        wait_criterias=pulumi.get(__ret__, 'wait_criterias'))


@_utilities.lift_output_func(get_deploy_stage)
def get_deploy_stage_output(deploy_stage_id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeployStageResult]:
    """
    This data source provides details about a specific Deploy Stage resource in Oracle Cloud Infrastructure Devops service.

    Retrieves a deployment stage by identifier.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_deploy_stage = oci.DevOps.get_deploy_stage(deploy_stage_id=oci_devops_deploy_stage["test_deploy_stage"]["id"])
    ```


    :param str deploy_stage_id: Unique stage identifier.
    """
    ...
