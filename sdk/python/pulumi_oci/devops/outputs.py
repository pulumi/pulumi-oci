# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BuildPipelineBuildPipelineParameters',
    'BuildPipelineBuildPipelineParametersItem',
    'BuildPipelineStageBuildPipelineStagePredecessorCollection',
    'BuildPipelineStageBuildPipelineStagePredecessorCollectionItem',
    'BuildPipelineStageBuildRunnerShapeConfig',
    'BuildPipelineStageBuildSourceCollection',
    'BuildPipelineStageBuildSourceCollectionItem',
    'BuildPipelineStageDeliverArtifactCollection',
    'BuildPipelineStageDeliverArtifactCollectionItem',
    'BuildPipelineStagePrivateAccessConfig',
    'BuildPipelineStageWaitCriteria',
    'BuildRunBuildOutput',
    'BuildRunBuildOutputArtifactOverrideParameter',
    'BuildRunBuildOutputArtifactOverrideParameterItem',
    'BuildRunBuildOutputDeliveredArtifact',
    'BuildRunBuildOutputDeliveredArtifactItem',
    'BuildRunBuildOutputExportedVariable',
    'BuildRunBuildOutputExportedVariableItem',
    'BuildRunBuildOutputVulnerabilityAuditSummaryCollection',
    'BuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem',
    'BuildRunBuildRunArguments',
    'BuildRunBuildRunArgumentsItem',
    'BuildRunBuildRunProgress',
    'BuildRunBuildRunSource',
    'BuildRunBuildRunSourceTriggerInfo',
    'BuildRunBuildRunSourceTriggerInfoAction',
    'BuildRunBuildRunSourceTriggerInfoActionFilter',
    'BuildRunBuildRunSourceTriggerInfoActionFilterExclude',
    'BuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter',
    'BuildRunBuildRunSourceTriggerInfoActionFilterInclude',
    'BuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter',
    'BuildRunCommitInfo',
    'ConnectionLastConnectionValidationResult',
    'ConnectionTlsVerifyConfig',
    'DeployArtifactDeployArtifactSource',
    'DeployArtifactDeployArtifactSourceHelmVerificationKeySource',
    'DeployEnvironmentComputeInstanceGroupSelectors',
    'DeployEnvironmentComputeInstanceGroupSelectorsItem',
    'DeployEnvironmentNetworkChannel',
    'DeployPipelineDeployPipelineArtifact',
    'DeployPipelineDeployPipelineArtifactItem',
    'DeployPipelineDeployPipelineArtifactItemDeployPipelineStage',
    'DeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem',
    'DeployPipelineDeployPipelineEnvironment',
    'DeployPipelineDeployPipelineEnvironmentItem',
    'DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStage',
    'DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem',
    'DeployPipelineDeployPipelineParameters',
    'DeployPipelineDeployPipelineParametersItem',
    'DeployStageApprovalPolicy',
    'DeployStageBlueBackendIps',
    'DeployStageBlueGreenStrategy',
    'DeployStageCanaryStrategy',
    'DeployStageContainerConfig',
    'DeployStageContainerConfigNetworkChannel',
    'DeployStageContainerConfigShapeConfig',
    'DeployStageDeployStagePredecessorCollection',
    'DeployStageDeployStagePredecessorCollectionItem',
    'DeployStageFailurePolicy',
    'DeployStageGreenBackendIps',
    'DeployStageLoadBalancerConfig',
    'DeployStageProductionLoadBalancerConfig',
    'DeployStageRollbackPolicy',
    'DeployStageRolloutPolicy',
    'DeployStageSetString',
    'DeployStageSetStringItem',
    'DeployStageSetValues',
    'DeployStageSetValuesItem',
    'DeployStageTestLoadBalancerConfig',
    'DeployStageWaitCriteria',
    'DeploymentDeployArtifactOverrideArguments',
    'DeploymentDeployArtifactOverrideArgumentsItem',
    'DeploymentDeployPipelineArtifact',
    'DeploymentDeployPipelineArtifactItem',
    'DeploymentDeployPipelineArtifactItemDeployPipelineStage',
    'DeploymentDeployPipelineArtifactItemDeployPipelineStageItem',
    'DeploymentDeployPipelineEnvironment',
    'DeploymentDeployPipelineEnvironmentItem',
    'DeploymentDeployPipelineEnvironmentItemDeployPipelineStage',
    'DeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem',
    'DeploymentDeployStageOverrideArguments',
    'DeploymentDeployStageOverrideArgumentsItem',
    'DeploymentDeploymentArguments',
    'DeploymentDeploymentArgumentsItem',
    'DeploymentDeploymentExecutionProgress',
    'ProjectNotificationConfig',
    'RepositoryMirrorRepositoryConfig',
    'RepositoryMirrorRepositoryConfigTriggerSchedule',
    'TriggerAction',
    'TriggerActionFilter',
    'TriggerActionFilterExclude',
    'TriggerActionFilterExcludeFileFilter',
    'TriggerActionFilterInclude',
    'TriggerActionFilterIncludeFileFilter',
    'GetBuildPipelineBuildPipelineParameterResult',
    'GetBuildPipelineBuildPipelineParameterItemResult',
    'GetBuildPipelineStageBuildPipelineStagePredecessorCollectionResult',
    'GetBuildPipelineStageBuildPipelineStagePredecessorCollectionItemResult',
    'GetBuildPipelineStageBuildRunnerShapeConfigResult',
    'GetBuildPipelineStageBuildSourceCollectionResult',
    'GetBuildPipelineStageBuildSourceCollectionItemResult',
    'GetBuildPipelineStageDeliverArtifactCollectionResult',
    'GetBuildPipelineStageDeliverArtifactCollectionItemResult',
    'GetBuildPipelineStagePrivateAccessConfigResult',
    'GetBuildPipelineStageWaitCriteriaResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionItemResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildRunnerShapeConfigResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionItemResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionItemResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemPrivateAccessConfigResult',
    'GetBuildPipelineStagesBuildPipelineStageCollectionItemWaitCriteriaResult',
    'GetBuildPipelineStagesFilterResult',
    'GetBuildPipelinesBuildPipelineCollectionResult',
    'GetBuildPipelinesBuildPipelineCollectionItemResult',
    'GetBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterResult',
    'GetBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterItemResult',
    'GetBuildPipelinesFilterResult',
    'GetBuildRunBuildOutputResult',
    'GetBuildRunBuildOutputArtifactOverrideParameterResult',
    'GetBuildRunBuildOutputArtifactOverrideParameterItemResult',
    'GetBuildRunBuildOutputDeliveredArtifactResult',
    'GetBuildRunBuildOutputDeliveredArtifactItemResult',
    'GetBuildRunBuildOutputExportedVariableResult',
    'GetBuildRunBuildOutputExportedVariableItemResult',
    'GetBuildRunBuildOutputVulnerabilityAuditSummaryCollectionResult',
    'GetBuildRunBuildOutputVulnerabilityAuditSummaryCollectionItemResult',
    'GetBuildRunBuildRunArgumentResult',
    'GetBuildRunBuildRunArgumentItemResult',
    'GetBuildRunBuildRunProgressResult',
    'GetBuildRunBuildRunSourceResult',
    'GetBuildRunBuildRunSourceTriggerInfoResult',
    'GetBuildRunBuildRunSourceTriggerInfoActionResult',
    'GetBuildRunBuildRunSourceTriggerInfoActionFilterResult',
    'GetBuildRunBuildRunSourceTriggerInfoActionFilterExcludeResult',
    'GetBuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilterResult',
    'GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeResult',
    'GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilterResult',
    'GetBuildRunCommitInfoResult',
    'GetBuildRunsBuildRunSummaryCollectionResult',
    'GetBuildRunsBuildRunSummaryCollectionItemResult',
    'GetBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentsResult',
    'GetBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentsItemResult',
    'GetBuildRunsBuildRunSummaryCollectionItemBuildRunProgressSummaryResult',
    'GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceResult',
    'GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoResult',
    'GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionResult',
    'GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterResult',
    'GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterIncludeResult',
    'GetBuildRunsBuildRunSummaryCollectionItemCommitInfoResult',
    'GetBuildRunsFilterResult',
    'GetConnectionLastConnectionValidationResultResult',
    'GetConnectionTlsVerifyConfigResult',
    'GetConnectionsConnectionCollectionResult',
    'GetConnectionsConnectionCollectionItemResult',
    'GetConnectionsConnectionCollectionItemLastConnectionValidationResultResult',
    'GetConnectionsConnectionCollectionItemTlsVerifyConfigResult',
    'GetConnectionsFilterResult',
    'GetDeployArtifactDeployArtifactSourceResult',
    'GetDeployArtifactDeployArtifactSourceHelmVerificationKeySourceResult',
    'GetDeployArtifactsDeployArtifactCollectionResult',
    'GetDeployArtifactsDeployArtifactCollectionItemResult',
    'GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceResult',
    'GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySourceResult',
    'GetDeployArtifactsFilterResult',
    'GetDeployEnvironmentComputeInstanceGroupSelectorResult',
    'GetDeployEnvironmentComputeInstanceGroupSelectorItemResult',
    'GetDeployEnvironmentNetworkChannelResult',
    'GetDeployEnvironmentsDeployEnvironmentCollectionResult',
    'GetDeployEnvironmentsDeployEnvironmentCollectionItemResult',
    'GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorResult',
    'GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorItemResult',
    'GetDeployEnvironmentsDeployEnvironmentCollectionItemNetworkChannelResult',
    'GetDeployEnvironmentsFilterResult',
    'GetDeployPipelineDeployPipelineArtifactResult',
    'GetDeployPipelineDeployPipelineArtifactItemResult',
    'GetDeployPipelineDeployPipelineArtifactItemDeployPipelineStageResult',
    'GetDeployPipelineDeployPipelineArtifactItemDeployPipelineStageItemResult',
    'GetDeployPipelineDeployPipelineEnvironmentResult',
    'GetDeployPipelineDeployPipelineEnvironmentItemResult',
    'GetDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageResult',
    'GetDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItemResult',
    'GetDeployPipelineDeployPipelineParameterResult',
    'GetDeployPipelineDeployPipelineParameterItemResult',
    'GetDeployPipelinesDeployPipelineCollectionResult',
    'GetDeployPipelinesDeployPipelineCollectionItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItemResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterResult',
    'GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterItemResult',
    'GetDeployPipelinesFilterResult',
    'GetDeployStageApprovalPolicyResult',
    'GetDeployStageBlueBackendIpResult',
    'GetDeployStageBlueGreenStrategyResult',
    'GetDeployStageCanaryStrategyResult',
    'GetDeployStageContainerConfigResult',
    'GetDeployStageContainerConfigNetworkChannelResult',
    'GetDeployStageContainerConfigShapeConfigResult',
    'GetDeployStageDeployStagePredecessorCollectionResult',
    'GetDeployStageDeployStagePredecessorCollectionItemResult',
    'GetDeployStageFailurePolicyResult',
    'GetDeployStageGreenBackendIpResult',
    'GetDeployStageLoadBalancerConfigResult',
    'GetDeployStageProductionLoadBalancerConfigResult',
    'GetDeployStageRollbackPolicyResult',
    'GetDeployStageRolloutPolicyResult',
    'GetDeployStageSetStringResult',
    'GetDeployStageSetStringItemResult',
    'GetDeployStageSetValueResult',
    'GetDeployStageSetValueItemResult',
    'GetDeployStageTestLoadBalancerConfigResult',
    'GetDeployStageWaitCriteriaResult',
    'GetDeployStagesDeployStageCollectionResult',
    'GetDeployStagesDeployStageCollectionItemResult',
    'GetDeployStagesDeployStageCollectionItemApprovalPolicyResult',
    'GetDeployStagesDeployStageCollectionItemBlueBackendIpResult',
    'GetDeployStagesDeployStageCollectionItemBlueGreenStrategyResult',
    'GetDeployStagesDeployStageCollectionItemCanaryStrategyResult',
    'GetDeployStagesDeployStageCollectionItemContainerConfigResult',
    'GetDeployStagesDeployStageCollectionItemContainerConfigNetworkChannelResult',
    'GetDeployStagesDeployStageCollectionItemContainerConfigShapeConfigResult',
    'GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionResult',
    'GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItemResult',
    'GetDeployStagesDeployStageCollectionItemFailurePolicyResult',
    'GetDeployStagesDeployStageCollectionItemGreenBackendIpResult',
    'GetDeployStagesDeployStageCollectionItemLoadBalancerConfigResult',
    'GetDeployStagesDeployStageCollectionItemProductionLoadBalancerConfigResult',
    'GetDeployStagesDeployStageCollectionItemRollbackPolicyResult',
    'GetDeployStagesDeployStageCollectionItemRolloutPolicyResult',
    'GetDeployStagesDeployStageCollectionItemSetStringResult',
    'GetDeployStagesDeployStageCollectionItemSetStringItemResult',
    'GetDeployStagesDeployStageCollectionItemSetValueResult',
    'GetDeployStagesDeployStageCollectionItemSetValueItemResult',
    'GetDeployStagesDeployStageCollectionItemTestLoadBalancerConfigResult',
    'GetDeployStagesDeployStageCollectionItemWaitCriteriaResult',
    'GetDeployStagesFilterResult',
    'GetDeploymentDeployArtifactOverrideArgumentResult',
    'GetDeploymentDeployArtifactOverrideArgumentItemResult',
    'GetDeploymentDeployPipelineArtifactResult',
    'GetDeploymentDeployPipelineArtifactItemResult',
    'GetDeploymentDeployPipelineArtifactItemDeployPipelineStageResult',
    'GetDeploymentDeployPipelineArtifactItemDeployPipelineStageItemResult',
    'GetDeploymentDeployPipelineEnvironmentResult',
    'GetDeploymentDeployPipelineEnvironmentItemResult',
    'GetDeploymentDeployPipelineEnvironmentItemDeployPipelineStageResult',
    'GetDeploymentDeployPipelineEnvironmentItemDeployPipelineStageItemResult',
    'GetDeploymentDeployStageOverrideArgumentResult',
    'GetDeploymentDeployStageOverrideArgumentItemResult',
    'GetDeploymentDeploymentArgumentResult',
    'GetDeploymentDeploymentArgumentItemResult',
    'GetDeploymentDeploymentExecutionProgressResult',
    'GetDeploymentsDeploymentCollectionResult',
    'GetDeploymentsDeploymentCollectionItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentResult',
    'GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageResult',
    'GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItemResult',
    'GetDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentResult',
    'GetDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentItemResult',
    'GetDeploymentsDeploymentCollectionItemDeploymentArgumentResult',
    'GetDeploymentsDeploymentCollectionItemDeploymentArgumentItemResult',
    'GetDeploymentsDeploymentCollectionItemDeploymentExecutionProgressResult',
    'GetDeploymentsFilterResult',
    'GetProjectNotificationConfigResult',
    'GetProjectsFilterResult',
    'GetProjectsProjectCollectionResult',
    'GetProjectsProjectCollectionItemResult',
    'GetProjectsProjectCollectionItemNotificationConfigResult',
    'GetRepoFileLineLineResult',
    'GetRepositoriesFilterResult',
    'GetRepositoriesRepositoryCollectionResult',
    'GetRepositoriesRepositoryCollectionItemResult',
    'GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigResult',
    'GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerScheduleResult',
    'GetRepositoryAuthorItemResult',
    'GetRepositoryAuthorsFilterResult',
    'GetRepositoryAuthorsRepositoryAuthorCollectionResult',
    'GetRepositoryAuthorsRepositoryAuthorCollectionItemResult',
    'GetRepositoryCommitsFilterResult',
    'GetRepositoryCommitsRepositoryCommitCollectionResult',
    'GetRepositoryCommitsRepositoryCommitCollectionItemResult',
    'GetRepositoryDiffChangeResult',
    'GetRepositoryDiffChangeDiffSectionResult',
    'GetRepositoryDiffChangeDiffSectionLineResult',
    'GetRepositoryDiffsDiffCollectionResult',
    'GetRepositoryDiffsDiffCollectionItemResult',
    'GetRepositoryDiffsDiffCollectionItemChangeResult',
    'GetRepositoryDiffsDiffCollectionItemChangeDiffSectionResult',
    'GetRepositoryDiffsDiffCollectionItemChangeDiffSectionLineResult',
    'GetRepositoryDiffsFilterResult',
    'GetRepositoryFileDiffChangeResult',
    'GetRepositoryFileDiffChangeDiffSectionResult',
    'GetRepositoryFileDiffChangeDiffSectionLineResult',
    'GetRepositoryFileLineLineResult',
    'GetRepositoryMirrorRecordsFilterResult',
    'GetRepositoryMirrorRecordsRepositoryMirrorRecordCollectionResult',
    'GetRepositoryMirrorRecordsRepositoryMirrorRecordCollectionItemResult',
    'GetRepositoryMirrorRepositoryConfigResult',
    'GetRepositoryMirrorRepositoryConfigTriggerScheduleResult',
    'GetRepositoryPathItemResult',
    'GetRepositoryPathsFilterResult',
    'GetRepositoryPathsRepositoryPathCollectionResult',
    'GetRepositoryPathsRepositoryPathCollectionItemResult',
    'GetRepositoryRefsFilterResult',
    'GetRepositoryRefsRepositoryRefCollectionResult',
    'GetRepositoryRefsRepositoryRefCollectionItemResult',
    'GetTriggerActionResult',
    'GetTriggerActionFilterResult',
    'GetTriggerActionFilterExcludeResult',
    'GetTriggerActionFilterExcludeFileFilterResult',
    'GetTriggerActionFilterIncludeResult',
    'GetTriggerActionFilterIncludeFileFilterResult',
    'GetTriggersFilterResult',
    'GetTriggersTriggerCollectionResult',
    'GetTriggersTriggerCollectionItemResult',
    'GetTriggersTriggerCollectionItemActionResult',
    'GetTriggersTriggerCollectionItemActionFilterResult',
    'GetTriggersTriggerCollectionItemActionFilterExcludeResult',
    'GetTriggersTriggerCollectionItemActionFilterExcludeFileFilterResult',
    'GetTriggersTriggerCollectionItemActionFilterIncludeResult',
    'GetTriggersTriggerCollectionItemActionFilterIncludeFileFilterResult',
]

@pulumi.output_type
class BuildPipelineBuildPipelineParameters(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.BuildPipelineBuildPipelineParametersItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.BuildPipelineBuildPipelineParametersItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class BuildPipelineBuildPipelineParametersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildPipelineBuildPipelineParametersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildPipelineBuildPipelineParametersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildPipelineBuildPipelineParametersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: str,
                 name: str,
                 description: Optional[str] = None):
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class BuildPipelineStageBuildPipelineStagePredecessorCollection(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.BuildPipelineStageBuildPipelineStagePredecessorCollectionItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.BuildPipelineStageBuildPipelineStagePredecessorCollectionItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class BuildPipelineStageBuildPipelineStagePredecessorCollectionItem(dict):
    def __init__(__self__, *,
                 id: str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class BuildPipelineStageBuildRunnerShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildRunnerType":
            suggest = "build_runner_type"
        elif key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildPipelineStageBuildRunnerShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildPipelineStageBuildRunnerShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildPipelineStageBuildRunnerShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 build_runner_type: str,
                 memory_in_gbs: Optional[int] = None,
                 ocpus: Optional[int] = None):
        pulumi.set(__self__, "build_runner_type", build_runner_type)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="buildRunnerType")
    def build_runner_type(self) -> str:
        return pulumi.get(self, "build_runner_type")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class BuildPipelineStageBuildSourceCollection(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.BuildPipelineStageBuildSourceCollectionItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.BuildPipelineStageBuildSourceCollectionItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class BuildPipelineStageBuildSourceCollectionItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionType":
            suggest = "connection_type"
        elif key == "connectionId":
            suggest = "connection_id"
        elif key == "repositoryId":
            suggest = "repository_id"
        elif key == "repositoryUrl":
            suggest = "repository_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildPipelineStageBuildSourceCollectionItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildPipelineStageBuildSourceCollectionItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildPipelineStageBuildSourceCollectionItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_type: str,
                 branch: Optional[str] = None,
                 connection_id: Optional[str] = None,
                 name: Optional[str] = None,
                 repository_id: Optional[str] = None,
                 repository_url: Optional[str] = None):
        pulumi.set(__self__, "connection_type", connection_type)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[str]:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class BuildPipelineStageDeliverArtifactCollection(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.BuildPipelineStageDeliverArtifactCollectionItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.BuildPipelineStageDeliverArtifactCollectionItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class BuildPipelineStageDeliverArtifactCollectionItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactId":
            suggest = "artifact_id"
        elif key == "artifactName":
            suggest = "artifact_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildPipelineStageDeliverArtifactCollectionItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildPipelineStageDeliverArtifactCollectionItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildPipelineStageDeliverArtifactCollectionItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_id: Optional[str] = None,
                 artifact_name: Optional[str] = None):
        if artifact_id is not None:
            pulumi.set(__self__, "artifact_id", artifact_id)
        if artifact_name is not None:
            pulumi.set(__self__, "artifact_name", artifact_name)

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "artifact_id")

    @property
    @pulumi.getter(name="artifactName")
    def artifact_name(self) -> Optional[str]:
        return pulumi.get(self, "artifact_name")


@pulumi.output_type
class BuildPipelineStagePrivateAccessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkChannelType":
            suggest = "network_channel_type"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "nsgIds":
            suggest = "nsg_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildPipelineStagePrivateAccessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildPipelineStagePrivateAccessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildPipelineStagePrivateAccessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_channel_type: str,
                 subnet_id: str,
                 nsg_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "network_channel_type", network_channel_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)

    @property
    @pulumi.getter(name="networkChannelType")
    def network_channel_type(self) -> str:
        return pulumi.get(self, "network_channel_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")


@pulumi.output_type
class BuildPipelineStageWaitCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitDuration":
            suggest = "wait_duration"
        elif key == "waitType":
            suggest = "wait_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildPipelineStageWaitCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildPipelineStageWaitCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildPipelineStageWaitCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 wait_duration: str,
                 wait_type: str):
        pulumi.set(__self__, "wait_duration", wait_duration)
        pulumi.set(__self__, "wait_type", wait_type)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> str:
        return pulumi.get(self, "wait_duration")

    @property
    @pulumi.getter(name="waitType")
    def wait_type(self) -> str:
        return pulumi.get(self, "wait_type")


@pulumi.output_type
class BuildRunBuildOutput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactOverrideParameters":
            suggest = "artifact_override_parameters"
        elif key == "deliveredArtifacts":
            suggest = "delivered_artifacts"
        elif key == "exportedVariables":
            suggest = "exported_variables"
        elif key == "vulnerabilityAuditSummaryCollections":
            suggest = "vulnerability_audit_summary_collections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildOutput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildOutput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildOutput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_override_parameters: Optional[Sequence['outputs.BuildRunBuildOutputArtifactOverrideParameter']] = None,
                 delivered_artifacts: Optional[Sequence['outputs.BuildRunBuildOutputDeliveredArtifact']] = None,
                 exported_variables: Optional[Sequence['outputs.BuildRunBuildOutputExportedVariable']] = None,
                 vulnerability_audit_summary_collections: Optional[Sequence['outputs.BuildRunBuildOutputVulnerabilityAuditSummaryCollection']] = None):
        if artifact_override_parameters is not None:
            pulumi.set(__self__, "artifact_override_parameters", artifact_override_parameters)
        if delivered_artifacts is not None:
            pulumi.set(__self__, "delivered_artifacts", delivered_artifacts)
        if exported_variables is not None:
            pulumi.set(__self__, "exported_variables", exported_variables)
        if vulnerability_audit_summary_collections is not None:
            pulumi.set(__self__, "vulnerability_audit_summary_collections", vulnerability_audit_summary_collections)

    @property
    @pulumi.getter(name="artifactOverrideParameters")
    def artifact_override_parameters(self) -> Optional[Sequence['outputs.BuildRunBuildOutputArtifactOverrideParameter']]:
        return pulumi.get(self, "artifact_override_parameters")

    @property
    @pulumi.getter(name="deliveredArtifacts")
    def delivered_artifacts(self) -> Optional[Sequence['outputs.BuildRunBuildOutputDeliveredArtifact']]:
        return pulumi.get(self, "delivered_artifacts")

    @property
    @pulumi.getter(name="exportedVariables")
    def exported_variables(self) -> Optional[Sequence['outputs.BuildRunBuildOutputExportedVariable']]:
        return pulumi.get(self, "exported_variables")

    @property
    @pulumi.getter(name="vulnerabilityAuditSummaryCollections")
    def vulnerability_audit_summary_collections(self) -> Optional[Sequence['outputs.BuildRunBuildOutputVulnerabilityAuditSummaryCollection']]:
        return pulumi.get(self, "vulnerability_audit_summary_collections")


@pulumi.output_type
class BuildRunBuildOutputArtifactOverrideParameter(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.BuildRunBuildOutputArtifactOverrideParameterItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.BuildRunBuildOutputArtifactOverrideParameterItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class BuildRunBuildOutputArtifactOverrideParameterItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployArtifactId":
            suggest = "deploy_artifact_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildOutputArtifactOverrideParameterItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildOutputArtifactOverrideParameterItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildOutputArtifactOverrideParameterItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class BuildRunBuildOutputDeliveredArtifact(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.BuildRunBuildOutputDeliveredArtifactItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.BuildRunBuildOutputDeliveredArtifactItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class BuildRunBuildOutputDeliveredArtifactItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactRepositoryId":
            suggest = "artifact_repository_id"
        elif key == "artifactType":
            suggest = "artifact_type"
        elif key == "deliveredArtifactHash":
            suggest = "delivered_artifact_hash"
        elif key == "deliveredArtifactId":
            suggest = "delivered_artifact_id"
        elif key == "deployArtifactId":
            suggest = "deploy_artifact_id"
        elif key == "imageUri":
            suggest = "image_uri"
        elif key == "outputArtifactName":
            suggest = "output_artifact_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildOutputDeliveredArtifactItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildOutputDeliveredArtifactItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildOutputDeliveredArtifactItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_repository_id: Optional[str] = None,
                 artifact_type: Optional[str] = None,
                 delivered_artifact_hash: Optional[str] = None,
                 delivered_artifact_id: Optional[str] = None,
                 deploy_artifact_id: Optional[str] = None,
                 image_uri: Optional[str] = None,
                 output_artifact_name: Optional[str] = None,
                 path: Optional[str] = None,
                 version: Optional[str] = None):
        if artifact_repository_id is not None:
            pulumi.set(__self__, "artifact_repository_id", artifact_repository_id)
        if artifact_type is not None:
            pulumi.set(__self__, "artifact_type", artifact_type)
        if delivered_artifact_hash is not None:
            pulumi.set(__self__, "delivered_artifact_hash", delivered_artifact_hash)
        if delivered_artifact_id is not None:
            pulumi.set(__self__, "delivered_artifact_id", delivered_artifact_id)
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if image_uri is not None:
            pulumi.set(__self__, "image_uri", image_uri)
        if output_artifact_name is not None:
            pulumi.set(__self__, "output_artifact_name", output_artifact_name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="artifactRepositoryId")
    def artifact_repository_id(self) -> Optional[str]:
        return pulumi.get(self, "artifact_repository_id")

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> Optional[str]:
        return pulumi.get(self, "artifact_type")

    @property
    @pulumi.getter(name="deliveredArtifactHash")
    def delivered_artifact_hash(self) -> Optional[str]:
        return pulumi.get(self, "delivered_artifact_hash")

    @property
    @pulumi.getter(name="deliveredArtifactId")
    def delivered_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "delivered_artifact_id")

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> Optional[str]:
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="outputArtifactName")
    def output_artifact_name(self) -> Optional[str]:
        return pulumi.get(self, "output_artifact_name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class BuildRunBuildOutputExportedVariable(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.BuildRunBuildOutputExportedVariableItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.BuildRunBuildOutputExportedVariableItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class BuildRunBuildOutputExportedVariableItem(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class BuildRunBuildOutputVulnerabilityAuditSummaryCollection(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.BuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.BuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class BuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildStageId":
            suggest = "build_stage_id"
        elif key == "commitHash":
            suggest = "commit_hash"
        elif key == "vulnerabilityAuditId":
            suggest = "vulnerability_audit_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildOutputVulnerabilityAuditSummaryCollectionItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 build_stage_id: Optional[str] = None,
                 commit_hash: Optional[str] = None,
                 vulnerability_audit_id: Optional[str] = None):
        if build_stage_id is not None:
            pulumi.set(__self__, "build_stage_id", build_stage_id)
        if commit_hash is not None:
            pulumi.set(__self__, "commit_hash", commit_hash)
        if vulnerability_audit_id is not None:
            pulumi.set(__self__, "vulnerability_audit_id", vulnerability_audit_id)

    @property
    @pulumi.getter(name="buildStageId")
    def build_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "build_stage_id")

    @property
    @pulumi.getter(name="commitHash")
    def commit_hash(self) -> Optional[str]:
        return pulumi.get(self, "commit_hash")

    @property
    @pulumi.getter(name="vulnerabilityAuditId")
    def vulnerability_audit_id(self) -> Optional[str]:
        return pulumi.get(self, "vulnerability_audit_id")


@pulumi.output_type
class BuildRunBuildRunArguments(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.BuildRunBuildRunArgumentsItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.BuildRunBuildRunArgumentsItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class BuildRunBuildRunArgumentsItem(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class BuildRunBuildRunProgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildPipelineStageRunProgress":
            suggest = "build_pipeline_stage_run_progress"
        elif key == "timeFinished":
            suggest = "time_finished"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildRunProgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildRunProgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildRunProgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 build_pipeline_stage_run_progress: Optional[Mapping[str, Any]] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if build_pipeline_stage_run_progress is not None:
            pulumi.set(__self__, "build_pipeline_stage_run_progress", build_pipeline_stage_run_progress)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="buildPipelineStageRunProgress")
    def build_pipeline_stage_run_progress(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "build_pipeline_stage_run_progress")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class BuildRunBuildRunSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryId":
            suggest = "repository_id"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "triggerId":
            suggest = "trigger_id"
        elif key == "triggerInfos":
            suggest = "trigger_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildRunSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildRunSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildRunSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_id: Optional[str] = None,
                 source_type: Optional[str] = None,
                 trigger_id: Optional[str] = None,
                 trigger_infos: Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfo']] = None):
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if trigger_infos is not None:
            pulumi.set(__self__, "trigger_infos", trigger_infos)

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[str]:
        return pulumi.get(self, "trigger_id")

    @property
    @pulumi.getter(name="triggerInfos")
    def trigger_infos(self) -> Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfo']]:
        return pulumi.get(self, "trigger_infos")


@pulumi.output_type
class BuildRunBuildRunSourceTriggerInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildRunSourceTriggerInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildRunSourceTriggerInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildRunSourceTriggerInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoAction']] = None,
                 display_name: Optional[str] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoAction']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class BuildRunBuildRunSourceTriggerInfoAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildPipelineId":
            suggest = "build_pipeline_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildRunSourceTriggerInfoAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildRunSourceTriggerInfoAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildRunSourceTriggerInfoAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 build_pipeline_id: Optional[str] = None,
                 filters: Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilter']] = None,
                 type: Optional[str] = None):
        if build_pipeline_id is not None:
            pulumi.set(__self__, "build_pipeline_id", build_pipeline_id)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="buildPipelineId")
    def build_pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "build_pipeline_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilter']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class BuildRunBuildRunSourceTriggerInfoActionFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerSource":
            suggest = "trigger_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildRunSourceTriggerInfoActionFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 events: Optional[Sequence[str]] = None,
                 excludes: Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilterExclude']] = None,
                 includes: Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilterInclude']] = None,
                 trigger_source: Optional[str] = None):
        if events is not None:
            pulumi.set(__self__, "events", events)
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def excludes(self) -> Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilterExclude']]:
        return pulumi.get(self, "excludes")

    @property
    @pulumi.getter
    def includes(self) -> Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilterInclude']]:
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[str]:
        return pulumi.get(self, "trigger_source")


@pulumi.output_type
class BuildRunBuildRunSourceTriggerInfoActionFilterExclude(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileFilters":
            suggest = "file_filters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildRunSourceTriggerInfoActionFilterExclude. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilterExclude.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilterExclude.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_filters: Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter']] = None):
        if file_filters is not None:
            pulumi.set(__self__, "file_filters", file_filters)

    @property
    @pulumi.getter(name="fileFilters")
    def file_filters(self) -> Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter']]:
        return pulumi.get(self, "file_filters")


@pulumi.output_type
class BuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePaths":
            suggest = "file_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


@pulumi.output_type
class BuildRunBuildRunSourceTriggerInfoActionFilterInclude(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseRef":
            suggest = "base_ref"
        elif key == "fileFilters":
            suggest = "file_filters"
        elif key == "headRef":
            suggest = "head_ref"
        elif key == "repositoryName":
            suggest = "repository_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildRunSourceTriggerInfoActionFilterInclude. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilterInclude.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilterInclude.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_ref: Optional[str] = None,
                 file_filters: Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter']] = None,
                 head_ref: Optional[str] = None,
                 repository_name: Optional[str] = None):
        if base_ref is not None:
            pulumi.set(__self__, "base_ref", base_ref)
        if file_filters is not None:
            pulumi.set(__self__, "file_filters", file_filters)
        if head_ref is not None:
            pulumi.set(__self__, "head_ref", head_ref)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)

    @property
    @pulumi.getter(name="baseRef")
    def base_ref(self) -> Optional[str]:
        return pulumi.get(self, "base_ref")

    @property
    @pulumi.getter(name="fileFilters")
    def file_filters(self) -> Optional[Sequence['outputs.BuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter']]:
        return pulumi.get(self, "file_filters")

    @property
    @pulumi.getter(name="headRef")
    def head_ref(self) -> Optional[str]:
        return pulumi.get(self, "head_ref")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[str]:
        return pulumi.get(self, "repository_name")


@pulumi.output_type
class BuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePaths":
            suggest = "file_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


@pulumi.output_type
class BuildRunCommitInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commitHash":
            suggest = "commit_hash"
        elif key == "repositoryBranch":
            suggest = "repository_branch"
        elif key == "repositoryUrl":
            suggest = "repository_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuildRunCommitInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuildRunCommitInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuildRunCommitInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commit_hash: str,
                 repository_branch: str,
                 repository_url: str):
        pulumi.set(__self__, "commit_hash", commit_hash)
        pulumi.set(__self__, "repository_branch", repository_branch)
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="commitHash")
    def commit_hash(self) -> str:
        return pulumi.get(self, "commit_hash")

    @property
    @pulumi.getter(name="repositoryBranch")
    def repository_branch(self) -> str:
        return pulumi.get(self, "repository_branch")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class ConnectionLastConnectionValidationResult(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeValidated":
            suggest = "time_validated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionLastConnectionValidationResult. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionLastConnectionValidationResult.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionLastConnectionValidationResult.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 message: Optional[str] = None,
                 result: Optional[str] = None,
                 time_validated: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if time_validated is not None:
            pulumi.set(__self__, "time_validated", time_validated)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def result(self) -> Optional[str]:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="timeValidated")
    def time_validated(self) -> Optional[str]:
        return pulumi.get(self, "time_validated")


@pulumi.output_type
class ConnectionTlsVerifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificateBundleId":
            suggest = "ca_certificate_bundle_id"
        elif key == "tlsVerifyMode":
            suggest = "tls_verify_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionTlsVerifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionTlsVerifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionTlsVerifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate_bundle_id: str,
                 tls_verify_mode: str):
        pulumi.set(__self__, "ca_certificate_bundle_id", ca_certificate_bundle_id)
        pulumi.set(__self__, "tls_verify_mode", tls_verify_mode)

    @property
    @pulumi.getter(name="caCertificateBundleId")
    def ca_certificate_bundle_id(self) -> str:
        return pulumi.get(self, "ca_certificate_bundle_id")

    @property
    @pulumi.getter(name="tlsVerifyMode")
    def tls_verify_mode(self) -> str:
        return pulumi.get(self, "tls_verify_mode")


@pulumi.output_type
class DeployArtifactDeployArtifactSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployArtifactSourceType":
            suggest = "deploy_artifact_source_type"
        elif key == "base64encodedContent":
            suggest = "base64encoded_content"
        elif key == "chartUrl":
            suggest = "chart_url"
        elif key == "deployArtifactPath":
            suggest = "deploy_artifact_path"
        elif key == "deployArtifactVersion":
            suggest = "deploy_artifact_version"
        elif key == "helmVerificationKeySource":
            suggest = "helm_verification_key_source"
        elif key == "imageDigest":
            suggest = "image_digest"
        elif key == "imageUri":
            suggest = "image_uri"
        elif key == "repositoryId":
            suggest = "repository_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployArtifactDeployArtifactSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployArtifactDeployArtifactSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployArtifactDeployArtifactSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_artifact_source_type: str,
                 base64encoded_content: Optional[str] = None,
                 chart_url: Optional[str] = None,
                 deploy_artifact_path: Optional[str] = None,
                 deploy_artifact_version: Optional[str] = None,
                 helm_verification_key_source: Optional['outputs.DeployArtifactDeployArtifactSourceHelmVerificationKeySource'] = None,
                 image_digest: Optional[str] = None,
                 image_uri: Optional[str] = None,
                 repository_id: Optional[str] = None):
        pulumi.set(__self__, "deploy_artifact_source_type", deploy_artifact_source_type)
        if base64encoded_content is not None:
            pulumi.set(__self__, "base64encoded_content", base64encoded_content)
        if chart_url is not None:
            pulumi.set(__self__, "chart_url", chart_url)
        if deploy_artifact_path is not None:
            pulumi.set(__self__, "deploy_artifact_path", deploy_artifact_path)
        if deploy_artifact_version is not None:
            pulumi.set(__self__, "deploy_artifact_version", deploy_artifact_version)
        if helm_verification_key_source is not None:
            pulumi.set(__self__, "helm_verification_key_source", helm_verification_key_source)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_uri is not None:
            pulumi.set(__self__, "image_uri", image_uri)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)

    @property
    @pulumi.getter(name="deployArtifactSourceType")
    def deploy_artifact_source_type(self) -> str:
        return pulumi.get(self, "deploy_artifact_source_type")

    @property
    @pulumi.getter(name="base64encodedContent")
    def base64encoded_content(self) -> Optional[str]:
        return pulumi.get(self, "base64encoded_content")

    @property
    @pulumi.getter(name="chartUrl")
    def chart_url(self) -> Optional[str]:
        return pulumi.get(self, "chart_url")

    @property
    @pulumi.getter(name="deployArtifactPath")
    def deploy_artifact_path(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_path")

    @property
    @pulumi.getter(name="deployArtifactVersion")
    def deploy_artifact_version(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_version")

    @property
    @pulumi.getter(name="helmVerificationKeySource")
    def helm_verification_key_source(self) -> Optional['outputs.DeployArtifactDeployArtifactSourceHelmVerificationKeySource']:
        return pulumi.get(self, "helm_verification_key_source")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> Optional[str]:
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")


@pulumi.output_type
class DeployArtifactDeployArtifactSourceHelmVerificationKeySource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "verificationKeySourceType":
            suggest = "verification_key_source_type"
        elif key == "currentPublicKey":
            suggest = "current_public_key"
        elif key == "previousPublicKey":
            suggest = "previous_public_key"
        elif key == "vaultSecretId":
            suggest = "vault_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployArtifactDeployArtifactSourceHelmVerificationKeySource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployArtifactDeployArtifactSourceHelmVerificationKeySource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployArtifactDeployArtifactSourceHelmVerificationKeySource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 verification_key_source_type: str,
                 current_public_key: Optional[str] = None,
                 previous_public_key: Optional[str] = None,
                 vault_secret_id: Optional[str] = None):
        pulumi.set(__self__, "verification_key_source_type", verification_key_source_type)
        if current_public_key is not None:
            pulumi.set(__self__, "current_public_key", current_public_key)
        if previous_public_key is not None:
            pulumi.set(__self__, "previous_public_key", previous_public_key)
        if vault_secret_id is not None:
            pulumi.set(__self__, "vault_secret_id", vault_secret_id)

    @property
    @pulumi.getter(name="verificationKeySourceType")
    def verification_key_source_type(self) -> str:
        return pulumi.get(self, "verification_key_source_type")

    @property
    @pulumi.getter(name="currentPublicKey")
    def current_public_key(self) -> Optional[str]:
        return pulumi.get(self, "current_public_key")

    @property
    @pulumi.getter(name="previousPublicKey")
    def previous_public_key(self) -> Optional[str]:
        return pulumi.get(self, "previous_public_key")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_secret_id")


@pulumi.output_type
class DeployEnvironmentComputeInstanceGroupSelectors(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployEnvironmentComputeInstanceGroupSelectorsItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployEnvironmentComputeInstanceGroupSelectorsItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployEnvironmentComputeInstanceGroupSelectorsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectorType":
            suggest = "selector_type"
        elif key == "computeInstanceIds":
            suggest = "compute_instance_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployEnvironmentComputeInstanceGroupSelectorsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployEnvironmentComputeInstanceGroupSelectorsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployEnvironmentComputeInstanceGroupSelectorsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 selector_type: str,
                 compute_instance_ids: Optional[Sequence[str]] = None,
                 query: Optional[str] = None,
                 region: Optional[str] = None):
        pulumi.set(__self__, "selector_type", selector_type)
        if compute_instance_ids is not None:
            pulumi.set(__self__, "compute_instance_ids", compute_instance_ids)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> str:
        return pulumi.get(self, "selector_type")

    @property
    @pulumi.getter(name="computeInstanceIds")
    def compute_instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compute_instance_ids")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class DeployEnvironmentNetworkChannel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkChannelType":
            suggest = "network_channel_type"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "nsgIds":
            suggest = "nsg_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployEnvironmentNetworkChannel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployEnvironmentNetworkChannel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployEnvironmentNetworkChannel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_channel_type: str,
                 subnet_id: str,
                 nsg_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "network_channel_type", network_channel_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)

    @property
    @pulumi.getter(name="networkChannelType")
    def network_channel_type(self) -> str:
        return pulumi.get(self, "network_channel_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")


@pulumi.output_type
class DeployPipelineDeployPipelineArtifact(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineArtifactItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployArtifactId":
            suggest = "deploy_artifact_id"
        elif key == "deployPipelineStages":
            suggest = "deploy_pipeline_stages"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineArtifactItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineArtifactItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineArtifactItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactItemDeployPipelineStage']] = None,
                 display_name: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactItemDeployPipelineStage']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeployPipelineDeployPipelineArtifactItemDeployPipelineStage(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageId":
            suggest = "deploy_stage_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineArtifactItemDeployPipelineStageItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeployPipelineDeployPipelineEnvironment(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineEnvironmentItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployEnvironmentId":
            suggest = "deploy_environment_id"
        elif key == "deployPipelineStages":
            suggest = "deploy_pipeline_stages"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineEnvironmentItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineEnvironmentItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineEnvironmentItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_environment_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStage']] = None,
                 display_name: Optional[str] = None):
        if deploy_environment_id is not None:
            pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStage']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStage(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageId":
            suggest = "deploy_stage_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeployPipelineDeployPipelineParameters(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeployPipelineDeployPipelineParametersItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeployPipelineDeployPipelineParametersItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployPipelineDeployPipelineParametersItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployPipelineDeployPipelineParametersItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployPipelineDeployPipelineParametersItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployPipelineDeployPipelineParametersItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 default_value: Optional[str] = None,
                 description: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class DeployStageApprovalPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "approvalPolicyType":
            suggest = "approval_policy_type"
        elif key == "numberOfApprovalsRequired":
            suggest = "number_of_approvals_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageApprovalPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageApprovalPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageApprovalPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 approval_policy_type: str,
                 number_of_approvals_required: int):
        pulumi.set(__self__, "approval_policy_type", approval_policy_type)
        pulumi.set(__self__, "number_of_approvals_required", number_of_approvals_required)

    @property
    @pulumi.getter(name="approvalPolicyType")
    def approval_policy_type(self) -> str:
        return pulumi.get(self, "approval_policy_type")

    @property
    @pulumi.getter(name="numberOfApprovalsRequired")
    def number_of_approvals_required(self) -> int:
        return pulumi.get(self, "number_of_approvals_required")


@pulumi.output_type
class DeployStageBlueBackendIps(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployStageBlueGreenStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressName":
            suggest = "ingress_name"
        elif key == "namespaceA":
            suggest = "namespace_a"
        elif key == "namespaceB":
            suggest = "namespace_b"
        elif key == "strategyType":
            suggest = "strategy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageBlueGreenStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageBlueGreenStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageBlueGreenStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingress_name: str,
                 namespace_a: str,
                 namespace_b: str,
                 strategy_type: str):
        pulumi.set(__self__, "ingress_name", ingress_name)
        pulumi.set(__self__, "namespace_a", namespace_a)
        pulumi.set(__self__, "namespace_b", namespace_b)
        pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="ingressName")
    def ingress_name(self) -> str:
        return pulumi.get(self, "ingress_name")

    @property
    @pulumi.getter(name="namespaceA")
    def namespace_a(self) -> str:
        return pulumi.get(self, "namespace_a")

    @property
    @pulumi.getter(name="namespaceB")
    def namespace_b(self) -> str:
        return pulumi.get(self, "namespace_b")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> str:
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class DeployStageCanaryStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ingressName":
            suggest = "ingress_name"
        elif key == "strategyType":
            suggest = "strategy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageCanaryStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageCanaryStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageCanaryStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ingress_name: str,
                 namespace: str,
                 strategy_type: str):
        pulumi.set(__self__, "ingress_name", ingress_name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="ingressName")
    def ingress_name(self) -> str:
        return pulumi.get(self, "ingress_name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> str:
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class DeployStageContainerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerConfigType":
            suggest = "container_config_type"
        elif key == "networkChannel":
            suggest = "network_channel"
        elif key == "shapeConfig":
            suggest = "shape_config"
        elif key == "shapeName":
            suggest = "shape_name"
        elif key == "availabilityDomain":
            suggest = "availability_domain"
        elif key == "compartmentId":
            suggest = "compartment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageContainerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageContainerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageContainerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_config_type: str,
                 network_channel: 'outputs.DeployStageContainerConfigNetworkChannel',
                 shape_config: 'outputs.DeployStageContainerConfigShapeConfig',
                 shape_name: str,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None):
        pulumi.set(__self__, "container_config_type", container_config_type)
        pulumi.set(__self__, "network_channel", network_channel)
        pulumi.set(__self__, "shape_config", shape_config)
        pulumi.set(__self__, "shape_name", shape_name)
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)

    @property
    @pulumi.getter(name="containerConfigType")
    def container_config_type(self) -> str:
        return pulumi.get(self, "container_config_type")

    @property
    @pulumi.getter(name="networkChannel")
    def network_channel(self) -> 'outputs.DeployStageContainerConfigNetworkChannel':
        return pulumi.get(self, "network_channel")

    @property
    @pulumi.getter(name="shapeConfig")
    def shape_config(self) -> 'outputs.DeployStageContainerConfigShapeConfig':
        return pulumi.get(self, "shape_config")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> str:
        return pulumi.get(self, "shape_name")

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")


@pulumi.output_type
class DeployStageContainerConfigNetworkChannel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkChannelType":
            suggest = "network_channel_type"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "nsgIds":
            suggest = "nsg_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageContainerConfigNetworkChannel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageContainerConfigNetworkChannel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageContainerConfigNetworkChannel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_channel_type: str,
                 subnet_id: str,
                 nsg_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "network_channel_type", network_channel_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)

    @property
    @pulumi.getter(name="networkChannelType")
    def network_channel_type(self) -> str:
        return pulumi.get(self, "network_channel_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")


@pulumi.output_type
class DeployStageContainerConfigShapeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memoryInGbs":
            suggest = "memory_in_gbs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageContainerConfigShapeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageContainerConfigShapeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageContainerConfigShapeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ocpus: float,
                 memory_in_gbs: Optional[float] = None):
        pulumi.set(__self__, "ocpus", ocpus)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)

    @property
    @pulumi.getter
    def ocpus(self) -> float:
        return pulumi.get(self, "ocpus")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")


@pulumi.output_type
class DeployStageDeployStagePredecessorCollection(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.DeployStageDeployStagePredecessorCollectionItem']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.DeployStageDeployStagePredecessorCollectionItem']:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployStageDeployStagePredecessorCollectionItem(dict):
    def __init__(__self__, *,
                 id: str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class DeployStageFailurePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"
        elif key == "failureCount":
            suggest = "failure_count"
        elif key == "failurePercentage":
            suggest = "failure_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageFailurePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageFailurePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageFailurePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: str,
                 failure_count: Optional[int] = None,
                 failure_percentage: Optional[int] = None):
        pulumi.set(__self__, "policy_type", policy_type)
        if failure_count is not None:
            pulumi.set(__self__, "failure_count", failure_count)
        if failure_percentage is not None:
            pulumi.set(__self__, "failure_percentage", failure_percentage)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="failureCount")
    def failure_count(self) -> Optional[int]:
        return pulumi.get(self, "failure_count")

    @property
    @pulumi.getter(name="failurePercentage")
    def failure_percentage(self) -> Optional[int]:
        return pulumi.get(self, "failure_percentage")


@pulumi.output_type
class DeployStageGreenBackendIps(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployStageLoadBalancerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "listenerName":
            suggest = "listener_name"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageLoadBalancerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageLoadBalancerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageLoadBalancerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class DeployStageProductionLoadBalancerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "listenerName":
            suggest = "listener_name"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageProductionLoadBalancerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageProductionLoadBalancerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageProductionLoadBalancerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class DeployStageRollbackPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageRollbackPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageRollbackPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageRollbackPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: Optional[str] = None):
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class DeployStageRolloutPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchCount":
            suggest = "batch_count"
        elif key == "batchDelayInSeconds":
            suggest = "batch_delay_in_seconds"
        elif key == "batchPercentage":
            suggest = "batch_percentage"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "rampLimitPercent":
            suggest = "ramp_limit_percent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageRolloutPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageRolloutPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageRolloutPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_count: Optional[int] = None,
                 batch_delay_in_seconds: Optional[int] = None,
                 batch_percentage: Optional[int] = None,
                 policy_type: Optional[str] = None,
                 ramp_limit_percent: Optional[float] = None):
        if batch_count is not None:
            pulumi.set(__self__, "batch_count", batch_count)
        if batch_delay_in_seconds is not None:
            pulumi.set(__self__, "batch_delay_in_seconds", batch_delay_in_seconds)
        if batch_percentage is not None:
            pulumi.set(__self__, "batch_percentage", batch_percentage)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if ramp_limit_percent is not None:
            pulumi.set(__self__, "ramp_limit_percent", ramp_limit_percent)

    @property
    @pulumi.getter(name="batchCount")
    def batch_count(self) -> Optional[int]:
        return pulumi.get(self, "batch_count")

    @property
    @pulumi.getter(name="batchDelayInSeconds")
    def batch_delay_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "batch_delay_in_seconds")

    @property
    @pulumi.getter(name="batchPercentage")
    def batch_percentage(self) -> Optional[int]:
        return pulumi.get(self, "batch_percentage")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="rampLimitPercent")
    def ramp_limit_percent(self) -> Optional[float]:
        return pulumi.get(self, "ramp_limit_percent")


@pulumi.output_type
class DeployStageSetString(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployStageSetStringItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployStageSetStringItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployStageSetStringItem(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeployStageSetValues(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeployStageSetValuesItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeployStageSetValuesItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeployStageSetValuesItem(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeployStageTestLoadBalancerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "listenerName":
            suggest = "listener_name"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageTestLoadBalancerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageTestLoadBalancerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageTestLoadBalancerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class DeployStageWaitCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitDuration":
            suggest = "wait_duration"
        elif key == "waitType":
            suggest = "wait_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeployStageWaitCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeployStageWaitCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeployStageWaitCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 wait_duration: str,
                 wait_type: str):
        pulumi.set(__self__, "wait_duration", wait_duration)
        pulumi.set(__self__, "wait_type", wait_type)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> str:
        return pulumi.get(self, "wait_duration")

    @property
    @pulumi.getter(name="waitType")
    def wait_type(self) -> str:
        return pulumi.get(self, "wait_type")


@pulumi.output_type
class DeploymentDeployArtifactOverrideArguments(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployArtifactOverrideArgumentsItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployArtifactOverrideArgumentsItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployArtifactOverrideArgumentsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployArtifactId":
            suggest = "deploy_artifact_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployArtifactOverrideArgumentsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployArtifactOverrideArgumentsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployArtifactOverrideArgumentsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentDeployPipelineArtifact(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployPipelineArtifactItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineArtifactItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployPipelineArtifactItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployArtifactId":
            suggest = "deploy_artifact_id"
        elif key == "deployPipelineStages":
            suggest = "deploy_pipeline_stages"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployPipelineArtifactItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployPipelineArtifactItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployPipelineArtifactItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.DeploymentDeployPipelineArtifactItemDeployPipelineStage']] = None,
                 display_name: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineArtifactItemDeployPipelineStage']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeploymentDeployPipelineArtifactItemDeployPipelineStage(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployPipelineArtifactItemDeployPipelineStageItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineArtifactItemDeployPipelineStageItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployPipelineArtifactItemDeployPipelineStageItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageId":
            suggest = "deploy_stage_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployPipelineArtifactItemDeployPipelineStageItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployPipelineArtifactItemDeployPipelineStageItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployPipelineArtifactItemDeployPipelineStageItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeploymentDeployPipelineEnvironment(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployPipelineEnvironmentItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployEnvironmentId":
            suggest = "deploy_environment_id"
        elif key == "deployPipelineStages":
            suggest = "deploy_pipeline_stages"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployPipelineEnvironmentItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployPipelineEnvironmentItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployPipelineEnvironmentItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_environment_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentItemDeployPipelineStage']] = None,
                 display_name: Optional[str] = None):
        if deploy_environment_id is not None:
            pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentItemDeployPipelineStage']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeploymentDeployPipelineEnvironmentItemDeployPipelineStage(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageId":
            suggest = "deploy_stage_id"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployPipelineEnvironmentItemDeployPipelineStageItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class DeploymentDeployStageOverrideArguments(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeployStageOverrideArgumentsItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeployStageOverrideArgumentsItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeployStageOverrideArgumentsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageId":
            suggest = "deploy_stage_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeployStageOverrideArgumentsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeployStageOverrideArgumentsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeployStageOverrideArgumentsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentDeploymentArguments(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.DeploymentDeploymentArgumentsItem']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DeploymentDeploymentArgumentsItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class DeploymentDeploymentArgumentsItem(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DeploymentDeploymentExecutionProgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deployStageExecutionProgress":
            suggest = "deploy_stage_execution_progress"
        elif key == "timeFinished":
            suggest = "time_finished"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentDeploymentExecutionProgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentDeploymentExecutionProgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentDeploymentExecutionProgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 deploy_stage_execution_progress: Optional[Mapping[str, Any]] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if deploy_stage_execution_progress is not None:
            pulumi.set(__self__, "deploy_stage_execution_progress", deploy_stage_execution_progress)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="deployStageExecutionProgress")
    def deploy_stage_execution_progress(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "deploy_stage_execution_progress")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class ProjectNotificationConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProjectNotificationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProjectNotificationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProjectNotificationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_id: str):
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class RepositoryMirrorRepositoryConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectorId":
            suggest = "connector_id"
        elif key == "repositoryUrl":
            suggest = "repository_url"
        elif key == "triggerSchedule":
            suggest = "trigger_schedule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositoryMirrorRepositoryConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositoryMirrorRepositoryConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositoryMirrorRepositoryConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connector_id: Optional[str] = None,
                 repository_url: Optional[str] = None,
                 trigger_schedule: Optional['outputs.RepositoryMirrorRepositoryConfigTriggerSchedule'] = None):
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if trigger_schedule is not None:
            pulumi.set(__self__, "trigger_schedule", trigger_schedule)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="triggerSchedule")
    def trigger_schedule(self) -> Optional['outputs.RepositoryMirrorRepositoryConfigTriggerSchedule']:
        return pulumi.get(self, "trigger_schedule")


@pulumi.output_type
class RepositoryMirrorRepositoryConfigTriggerSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleType":
            suggest = "schedule_type"
        elif key == "customSchedule":
            suggest = "custom_schedule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RepositoryMirrorRepositoryConfigTriggerSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RepositoryMirrorRepositoryConfigTriggerSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RepositoryMirrorRepositoryConfigTriggerSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_type: str,
                 custom_schedule: Optional[str] = None):
        pulumi.set(__self__, "schedule_type", schedule_type)
        if custom_schedule is not None:
            pulumi.set(__self__, "custom_schedule", custom_schedule)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="customSchedule")
    def custom_schedule(self) -> Optional[str]:
        return pulumi.get(self, "custom_schedule")


@pulumi.output_type
class TriggerAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildPipelineId":
            suggest = "build_pipeline_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 build_pipeline_id: str,
                 type: str,
                 filter: Optional['outputs.TriggerActionFilter'] = None):
        pulumi.set(__self__, "build_pipeline_id", build_pipeline_id)
        pulumi.set(__self__, "type", type)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter(name="buildPipelineId")
    def build_pipeline_id(self) -> str:
        return pulumi.get(self, "build_pipeline_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.TriggerActionFilter']:
        return pulumi.get(self, "filter")


@pulumi.output_type
class TriggerActionFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerSource":
            suggest = "trigger_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerActionFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerActionFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerActionFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trigger_source: str,
                 events: Optional[Sequence[str]] = None,
                 exclude: Optional['outputs.TriggerActionFilterExclude'] = None,
                 include: Optional['outputs.TriggerActionFilterInclude'] = None):
        pulumi.set(__self__, "trigger_source", trigger_source)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if exclude is not None:
            pulumi.set(__self__, "exclude", exclude)
        if include is not None:
            pulumi.set(__self__, "include", include)

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> str:
        return pulumi.get(self, "trigger_source")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def exclude(self) -> Optional['outputs.TriggerActionFilterExclude']:
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> Optional['outputs.TriggerActionFilterInclude']:
        return pulumi.get(self, "include")


@pulumi.output_type
class TriggerActionFilterExclude(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileFilter":
            suggest = "file_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerActionFilterExclude. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerActionFilterExclude.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerActionFilterExclude.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_filter: Optional['outputs.TriggerActionFilterExcludeFileFilter'] = None):
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional['outputs.TriggerActionFilterExcludeFileFilter']:
        return pulumi.get(self, "file_filter")


@pulumi.output_type
class TriggerActionFilterExcludeFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePaths":
            suggest = "file_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerActionFilterExcludeFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerActionFilterExcludeFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerActionFilterExcludeFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


@pulumi.output_type
class TriggerActionFilterInclude(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseRef":
            suggest = "base_ref"
        elif key == "fileFilter":
            suggest = "file_filter"
        elif key == "headRef":
            suggest = "head_ref"
        elif key == "repositoryName":
            suggest = "repository_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerActionFilterInclude. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerActionFilterInclude.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerActionFilterInclude.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_ref: Optional[str] = None,
                 file_filter: Optional['outputs.TriggerActionFilterIncludeFileFilter'] = None,
                 head_ref: Optional[str] = None,
                 repository_name: Optional[str] = None):
        if base_ref is not None:
            pulumi.set(__self__, "base_ref", base_ref)
        if file_filter is not None:
            pulumi.set(__self__, "file_filter", file_filter)
        if head_ref is not None:
            pulumi.set(__self__, "head_ref", head_ref)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)

    @property
    @pulumi.getter(name="baseRef")
    def base_ref(self) -> Optional[str]:
        return pulumi.get(self, "base_ref")

    @property
    @pulumi.getter(name="fileFilter")
    def file_filter(self) -> Optional['outputs.TriggerActionFilterIncludeFileFilter']:
        return pulumi.get(self, "file_filter")

    @property
    @pulumi.getter(name="headRef")
    def head_ref(self) -> Optional[str]:
        return pulumi.get(self, "head_ref")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[str]:
        return pulumi.get(self, "repository_name")


@pulumi.output_type
class TriggerActionFilterIncludeFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePaths":
            suggest = "file_paths"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TriggerActionFilterIncludeFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TriggerActionFilterIncludeFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TriggerActionFilterIncludeFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


@pulumi.output_type
class GetBuildPipelineBuildPipelineParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelineBuildPipelineParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelineBuildPipelineParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelineBuildPipelineParameterItemResult(dict):
    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBuildPipelineStageBuildPipelineStagePredecessorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelineStageBuildPipelineStagePredecessorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelineStageBuildPipelineStagePredecessorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelineStageBuildPipelineStagePredecessorCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetBuildPipelineStageBuildRunnerShapeConfigResult(dict):
    def __init__(__self__, *,
                 build_runner_type: Optional[str] = None,
                 memory_in_gbs: Optional[int] = None,
                 ocpus: Optional[int] = None):
        if build_runner_type is not None:
            pulumi.set(__self__, "build_runner_type", build_runner_type)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="buildRunnerType")
    def build_runner_type(self) -> Optional[str]:
        return pulumi.get(self, "build_runner_type")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBuildPipelineStageBuildSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelineStageBuildSourceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelineStageBuildSourceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelineStageBuildSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 branch: Optional[str] = None,
                 connection_id: Optional[str] = None,
                 connection_type: Optional[str] = None,
                 name: Optional[str] = None,
                 repository_id: Optional[str] = None,
                 repository_url: Optional[str] = None):
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[str]:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class GetBuildPipelineStageDeliverArtifactCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelineStageDeliverArtifactCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelineStageDeliverArtifactCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelineStageDeliverArtifactCollectionItemResult(dict):
    def __init__(__self__, *,
                 artifact_id: Optional[str] = None,
                 artifact_name: Optional[str] = None):
        if artifact_id is not None:
            pulumi.set(__self__, "artifact_id", artifact_id)
        if artifact_name is not None:
            pulumi.set(__self__, "artifact_name", artifact_name)

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "artifact_id")

    @property
    @pulumi.getter(name="artifactName")
    def artifact_name(self) -> Optional[str]:
        return pulumi.get(self, "artifact_name")


@pulumi.output_type
class GetBuildPipelineStagePrivateAccessConfigResult(dict):
    def __init__(__self__, *,
                 network_channel_type: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        if network_channel_type is not None:
            pulumi.set(__self__, "network_channel_type", network_channel_type)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="networkChannelType")
    def network_channel_type(self) -> Optional[str]:
        return pulumi.get(self, "network_channel_type")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetBuildPipelineStageWaitCriteriaResult(dict):
    def __init__(__self__, *,
                 wait_duration: Optional[str] = None,
                 wait_type: Optional[str] = None):
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)
        if wait_type is not None:
            pulumi.set(__self__, "wait_type", wait_type)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[str]:
        return pulumi.get(self, "wait_duration")

    @property
    @pulumi.getter(name="waitType")
    def wait_type(self) -> Optional[str]:
        return pulumi.get(self, "wait_type")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: str,
                 build_pipeline_id: Optional[str] = None,
                 build_pipeline_stage_predecessor_collections: Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionResult']] = None,
                 build_pipeline_stage_type: Optional[str] = None,
                 build_runner_shape_config: Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildRunnerShapeConfigResult'] = None,
                 build_source_collection: Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionResult'] = None,
                 build_spec_file: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 connection_type: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deliver_artifact_collection: Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionResult'] = None,
                 deploy_pipeline_id: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 image: Optional[str] = None,
                 is_pass_all_parameters_enabled: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 primary_build_source: Optional[str] = None,
                 private_access_config: Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemPrivateAccessConfigResult'] = None,
                 project_id: Optional[str] = None,
                 stage_execution_timeout_in_seconds: Optional[int] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 wait_criteria: Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemWaitCriteriaResult'] = None):
        pulumi.set(__self__, "id", id)
        if build_pipeline_id is not None:
            pulumi.set(__self__, "build_pipeline_id", build_pipeline_id)
        if build_pipeline_stage_predecessor_collections is not None:
            pulumi.set(__self__, "build_pipeline_stage_predecessor_collections", build_pipeline_stage_predecessor_collections)
        if build_pipeline_stage_type is not None:
            pulumi.set(__self__, "build_pipeline_stage_type", build_pipeline_stage_type)
        if build_runner_shape_config is not None:
            pulumi.set(__self__, "build_runner_shape_config", build_runner_shape_config)
        if build_source_collection is not None:
            pulumi.set(__self__, "build_source_collection", build_source_collection)
        if build_spec_file is not None:
            pulumi.set(__self__, "build_spec_file", build_spec_file)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deliver_artifact_collection is not None:
            pulumi.set(__self__, "deliver_artifact_collection", deliver_artifact_collection)
        if deploy_pipeline_id is not None:
            pulumi.set(__self__, "deploy_pipeline_id", deploy_pipeline_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if is_pass_all_parameters_enabled is not None:
            pulumi.set(__self__, "is_pass_all_parameters_enabled", is_pass_all_parameters_enabled)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if primary_build_source is not None:
            pulumi.set(__self__, "primary_build_source", primary_build_source)
        if private_access_config is not None:
            pulumi.set(__self__, "private_access_config", private_access_config)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if stage_execution_timeout_in_seconds is not None:
            pulumi.set(__self__, "stage_execution_timeout_in_seconds", stage_execution_timeout_in_seconds)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if wait_criteria is not None:
            pulumi.set(__self__, "wait_criteria", wait_criteria)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="buildPipelineId")
    def build_pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "build_pipeline_id")

    @property
    @pulumi.getter(name="buildPipelineStagePredecessorCollections")
    def build_pipeline_stage_predecessor_collections(self) -> Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionResult']]:
        return pulumi.get(self, "build_pipeline_stage_predecessor_collections")

    @property
    @pulumi.getter(name="buildPipelineStageType")
    def build_pipeline_stage_type(self) -> Optional[str]:
        return pulumi.get(self, "build_pipeline_stage_type")

    @property
    @pulumi.getter(name="buildRunnerShapeConfig")
    def build_runner_shape_config(self) -> Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildRunnerShapeConfigResult']:
        return pulumi.get(self, "build_runner_shape_config")

    @property
    @pulumi.getter(name="buildSourceCollection")
    def build_source_collection(self) -> Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionResult']:
        return pulumi.get(self, "build_source_collection")

    @property
    @pulumi.getter(name="buildSpecFile")
    def build_spec_file(self) -> Optional[str]:
        return pulumi.get(self, "build_spec_file")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deliverArtifactCollection")
    def deliver_artifact_collection(self) -> Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionResult']:
        return pulumi.get(self, "deliver_artifact_collection")

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_pipeline_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def image(self) -> Optional[str]:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="isPassAllParametersEnabled")
    def is_pass_all_parameters_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_pass_all_parameters_enabled")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="primaryBuildSource")
    def primary_build_source(self) -> Optional[str]:
        return pulumi.get(self, "primary_build_source")

    @property
    @pulumi.getter(name="privateAccessConfig")
    def private_access_config(self) -> Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemPrivateAccessConfigResult']:
        return pulumi.get(self, "private_access_config")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="stageExecutionTimeoutInSeconds")
    def stage_execution_timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "stage_execution_timeout_in_seconds")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="waitCriteria")
    def wait_criteria(self) -> Optional['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemWaitCriteriaResult']:
        return pulumi.get(self, "wait_criteria")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildPipelineStagePredecessorCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildRunnerShapeConfigResult(dict):
    def __init__(__self__, *,
                 build_runner_type: str,
                 memory_in_gbs: Optional[int] = None,
                 ocpus: Optional[int] = None):
        pulumi.set(__self__, "build_runner_type", build_runner_type)
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="buildRunnerType")
    def build_runner_type(self) -> str:
        return pulumi.get(self, "build_runner_type")

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[int]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[int]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemBuildSourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 branch: Optional[str] = None,
                 connection_id: Optional[str] = None,
                 connection_type: Optional[str] = None,
                 name: Optional[str] = None,
                 repository_id: Optional[str] = None,
                 repository_url: Optional[str] = None):
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter
    def branch(self) -> Optional[str]:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[str]:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemDeliverArtifactCollectionItemResult(dict):
    def __init__(__self__, *,
                 artifact_id: Optional[str] = None,
                 artifact_name: Optional[str] = None):
        if artifact_id is not None:
            pulumi.set(__self__, "artifact_id", artifact_id)
        if artifact_name is not None:
            pulumi.set(__self__, "artifact_name", artifact_name)

    @property
    @pulumi.getter(name="artifactId")
    def artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "artifact_id")

    @property
    @pulumi.getter(name="artifactName")
    def artifact_name(self) -> Optional[str]:
        return pulumi.get(self, "artifact_name")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemPrivateAccessConfigResult(dict):
    def __init__(__self__, *,
                 network_channel_type: str,
                 subnet_id: str,
                 nsg_ids: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "network_channel_type", network_channel_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)

    @property
    @pulumi.getter(name="networkChannelType")
    def network_channel_type(self) -> str:
        return pulumi.get(self, "network_channel_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")


@pulumi.output_type
class GetBuildPipelineStagesBuildPipelineStageCollectionItemWaitCriteriaResult(dict):
    def __init__(__self__, *,
                 wait_duration: str,
                 wait_type: Optional[str] = None):
        pulumi.set(__self__, "wait_duration", wait_duration)
        if wait_type is not None:
            pulumi.set(__self__, "wait_type", wait_type)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> str:
        return pulumi.get(self, "wait_duration")

    @property
    @pulumi.getter(name="waitType")
    def wait_type(self) -> Optional[str]:
        return pulumi.get(self, "wait_type")


@pulumi.output_type
class GetBuildPipelineStagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBuildPipelinesBuildPipelineCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelinesBuildPipelineCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelinesBuildPipelineCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelinesBuildPipelineCollectionItemResult(dict):
    def __init__(__self__, *,
                 build_pipeline_parameters: Optional[Sequence['outputs.GetBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if build_pipeline_parameters is not None:
            pulumi.set(__self__, "build_pipeline_parameters", build_pipeline_parameters)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="buildPipelineParameters")
    def build_pipeline_parameters(self) -> Optional[Sequence['outputs.GetBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterResult']]:
        return pulumi.get(self, "build_pipeline_parameters")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildPipelinesBuildPipelineCollectionItemBuildPipelineParameterItemResult(dict):
    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBuildPipelinesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetBuildRunBuildOutputResult(dict):
    def __init__(__self__, *,
                 artifact_override_parameters: Optional[Sequence['outputs.GetBuildRunBuildOutputArtifactOverrideParameterResult']] = None,
                 delivered_artifacts: Optional[Sequence['outputs.GetBuildRunBuildOutputDeliveredArtifactResult']] = None,
                 exported_variables: Optional[Sequence['outputs.GetBuildRunBuildOutputExportedVariableResult']] = None,
                 vulnerability_audit_summary_collections: Optional[Sequence['outputs.GetBuildRunBuildOutputVulnerabilityAuditSummaryCollectionResult']] = None):
        if artifact_override_parameters is not None:
            pulumi.set(__self__, "artifact_override_parameters", artifact_override_parameters)
        if delivered_artifacts is not None:
            pulumi.set(__self__, "delivered_artifacts", delivered_artifacts)
        if exported_variables is not None:
            pulumi.set(__self__, "exported_variables", exported_variables)
        if vulnerability_audit_summary_collections is not None:
            pulumi.set(__self__, "vulnerability_audit_summary_collections", vulnerability_audit_summary_collections)

    @property
    @pulumi.getter(name="artifactOverrideParameters")
    def artifact_override_parameters(self) -> Optional[Sequence['outputs.GetBuildRunBuildOutputArtifactOverrideParameterResult']]:
        return pulumi.get(self, "artifact_override_parameters")

    @property
    @pulumi.getter(name="deliveredArtifacts")
    def delivered_artifacts(self) -> Optional[Sequence['outputs.GetBuildRunBuildOutputDeliveredArtifactResult']]:
        return pulumi.get(self, "delivered_artifacts")

    @property
    @pulumi.getter(name="exportedVariables")
    def exported_variables(self) -> Optional[Sequence['outputs.GetBuildRunBuildOutputExportedVariableResult']]:
        return pulumi.get(self, "exported_variables")

    @property
    @pulumi.getter(name="vulnerabilityAuditSummaryCollections")
    def vulnerability_audit_summary_collections(self) -> Optional[Sequence['outputs.GetBuildRunBuildOutputVulnerabilityAuditSummaryCollectionResult']]:
        return pulumi.get(self, "vulnerability_audit_summary_collections")


@pulumi.output_type
class GetBuildRunBuildOutputArtifactOverrideParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildRunBuildOutputArtifactOverrideParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildRunBuildOutputArtifactOverrideParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildRunBuildOutputArtifactOverrideParameterItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBuildRunBuildOutputDeliveredArtifactResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildRunBuildOutputDeliveredArtifactItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildRunBuildOutputDeliveredArtifactItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildRunBuildOutputDeliveredArtifactItemResult(dict):
    def __init__(__self__, *,
                 artifact_repository_id: Optional[str] = None,
                 artifact_type: Optional[str] = None,
                 delivered_artifact_hash: Optional[str] = None,
                 delivered_artifact_id: Optional[str] = None,
                 deploy_artifact_id: Optional[str] = None,
                 image_uri: Optional[str] = None,
                 output_artifact_name: Optional[str] = None,
                 path: Optional[str] = None,
                 version: Optional[str] = None):
        if artifact_repository_id is not None:
            pulumi.set(__self__, "artifact_repository_id", artifact_repository_id)
        if artifact_type is not None:
            pulumi.set(__self__, "artifact_type", artifact_type)
        if delivered_artifact_hash is not None:
            pulumi.set(__self__, "delivered_artifact_hash", delivered_artifact_hash)
        if delivered_artifact_id is not None:
            pulumi.set(__self__, "delivered_artifact_id", delivered_artifact_id)
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if image_uri is not None:
            pulumi.set(__self__, "image_uri", image_uri)
        if output_artifact_name is not None:
            pulumi.set(__self__, "output_artifact_name", output_artifact_name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="artifactRepositoryId")
    def artifact_repository_id(self) -> Optional[str]:
        return pulumi.get(self, "artifact_repository_id")

    @property
    @pulumi.getter(name="artifactType")
    def artifact_type(self) -> Optional[str]:
        return pulumi.get(self, "artifact_type")

    @property
    @pulumi.getter(name="deliveredArtifactHash")
    def delivered_artifact_hash(self) -> Optional[str]:
        return pulumi.get(self, "delivered_artifact_hash")

    @property
    @pulumi.getter(name="deliveredArtifactId")
    def delivered_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "delivered_artifact_id")

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> Optional[str]:
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="outputArtifactName")
    def output_artifact_name(self) -> Optional[str]:
        return pulumi.get(self, "output_artifact_name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetBuildRunBuildOutputExportedVariableResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildRunBuildOutputExportedVariableItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildRunBuildOutputExportedVariableItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildRunBuildOutputExportedVariableItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBuildRunBuildOutputVulnerabilityAuditSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildRunBuildOutputVulnerabilityAuditSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildRunBuildOutputVulnerabilityAuditSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildRunBuildOutputVulnerabilityAuditSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 build_stage_id: Optional[str] = None,
                 commit_hash: Optional[str] = None,
                 vulnerability_audit_id: Optional[str] = None):
        if build_stage_id is not None:
            pulumi.set(__self__, "build_stage_id", build_stage_id)
        if commit_hash is not None:
            pulumi.set(__self__, "commit_hash", commit_hash)
        if vulnerability_audit_id is not None:
            pulumi.set(__self__, "vulnerability_audit_id", vulnerability_audit_id)

    @property
    @pulumi.getter(name="buildStageId")
    def build_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "build_stage_id")

    @property
    @pulumi.getter(name="commitHash")
    def commit_hash(self) -> Optional[str]:
        return pulumi.get(self, "commit_hash")

    @property
    @pulumi.getter(name="vulnerabilityAuditId")
    def vulnerability_audit_id(self) -> Optional[str]:
        return pulumi.get(self, "vulnerability_audit_id")


@pulumi.output_type
class GetBuildRunBuildRunArgumentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildRunBuildRunArgumentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildRunBuildRunArgumentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildRunBuildRunArgumentItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBuildRunBuildRunProgressResult(dict):
    def __init__(__self__, *,
                 build_pipeline_stage_run_progress: Optional[Mapping[str, Any]] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if build_pipeline_stage_run_progress is not None:
            pulumi.set(__self__, "build_pipeline_stage_run_progress", build_pipeline_stage_run_progress)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="buildPipelineStageRunProgress")
    def build_pipeline_stage_run_progress(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "build_pipeline_stage_run_progress")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetBuildRunBuildRunSourceResult(dict):
    def __init__(__self__, *,
                 repository_id: Optional[str] = None,
                 source_type: Optional[str] = None,
                 trigger_id: Optional[str] = None,
                 trigger_infos: Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoResult']] = None):
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)
        if trigger_infos is not None:
            pulumi.set(__self__, "trigger_infos", trigger_infos)

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[str]:
        return pulumi.get(self, "trigger_id")

    @property
    @pulumi.getter(name="triggerInfos")
    def trigger_infos(self) -> Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoResult']]:
        return pulumi.get(self, "trigger_infos")


@pulumi.output_type
class GetBuildRunBuildRunSourceTriggerInfoResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionResult']] = None,
                 display_name: Optional[str] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionResult']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetBuildRunBuildRunSourceTriggerInfoActionResult(dict):
    def __init__(__self__, *,
                 build_pipeline_id: Optional[str] = None,
                 filters: Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterResult']] = None,
                 type: Optional[str] = None):
        if build_pipeline_id is not None:
            pulumi.set(__self__, "build_pipeline_id", build_pipeline_id)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="buildPipelineId")
    def build_pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "build_pipeline_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBuildRunBuildRunSourceTriggerInfoActionFilterResult(dict):
    def __init__(__self__, *,
                 events: Optional[Sequence[str]] = None,
                 excludes: Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterExcludeResult']] = None,
                 includes: Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeResult']] = None,
                 trigger_source: Optional[str] = None):
        if events is not None:
            pulumi.set(__self__, "events", events)
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def excludes(self) -> Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterExcludeResult']]:
        return pulumi.get(self, "excludes")

    @property
    @pulumi.getter
    def includes(self) -> Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeResult']]:
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[str]:
        return pulumi.get(self, "trigger_source")


@pulumi.output_type
class GetBuildRunBuildRunSourceTriggerInfoActionFilterExcludeResult(dict):
    def __init__(__self__, *,
                 file_filters: Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilterResult']] = None):
        if file_filters is not None:
            pulumi.set(__self__, "file_filters", file_filters)

    @property
    @pulumi.getter(name="fileFilters")
    def file_filters(self) -> Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilterResult']]:
        return pulumi.get(self, "file_filters")


@pulumi.output_type
class GetBuildRunBuildRunSourceTriggerInfoActionFilterExcludeFileFilterResult(dict):
    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


@pulumi.output_type
class GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeResult(dict):
    def __init__(__self__, *,
                 base_ref: Optional[str] = None,
                 file_filters: Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilterResult']] = None,
                 head_ref: Optional[str] = None,
                 repository_name: Optional[str] = None):
        if base_ref is not None:
            pulumi.set(__self__, "base_ref", base_ref)
        if file_filters is not None:
            pulumi.set(__self__, "file_filters", file_filters)
        if head_ref is not None:
            pulumi.set(__self__, "head_ref", head_ref)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)

    @property
    @pulumi.getter(name="baseRef")
    def base_ref(self) -> Optional[str]:
        return pulumi.get(self, "base_ref")

    @property
    @pulumi.getter(name="fileFilters")
    def file_filters(self) -> Optional[Sequence['outputs.GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilterResult']]:
        return pulumi.get(self, "file_filters")

    @property
    @pulumi.getter(name="headRef")
    def head_ref(self) -> Optional[str]:
        return pulumi.get(self, "head_ref")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[str]:
        return pulumi.get(self, "repository_name")


@pulumi.output_type
class GetBuildRunBuildRunSourceTriggerInfoActionFilterIncludeFileFilterResult(dict):
    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


@pulumi.output_type
class GetBuildRunCommitInfoResult(dict):
    def __init__(__self__, *,
                 commit_hash: Optional[str] = None,
                 repository_branch: Optional[str] = None,
                 repository_url: Optional[str] = None):
        if commit_hash is not None:
            pulumi.set(__self__, "commit_hash", commit_hash)
        if repository_branch is not None:
            pulumi.set(__self__, "repository_branch", repository_branch)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="commitHash")
    def commit_hash(self) -> Optional[str]:
        return pulumi.get(self, "commit_hash")

    @property
    @pulumi.getter(name="repositoryBranch")
    def repository_branch(self) -> Optional[str]:
        return pulumi.get(self, "repository_branch")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemResult(dict):
    def __init__(__self__, *,
                 build_pipeline_id: str,
                 id: str,
                 build_run_arguments: Optional['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentsResult'] = None,
                 build_run_progress_summaries: Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunProgressSummaryResult']] = None,
                 build_run_sources: Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceResult']] = None,
                 commit_info: Optional['outputs.GetBuildRunsBuildRunSummaryCollectionItemCommitInfoResult'] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 lifecycle_details: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        pulumi.set(__self__, "build_pipeline_id", build_pipeline_id)
        pulumi.set(__self__, "id", id)
        if build_run_arguments is not None:
            pulumi.set(__self__, "build_run_arguments", build_run_arguments)
        if build_run_progress_summaries is not None:
            pulumi.set(__self__, "build_run_progress_summaries", build_run_progress_summaries)
        if build_run_sources is not None:
            pulumi.set(__self__, "build_run_sources", build_run_sources)
        if commit_info is not None:
            pulumi.set(__self__, "commit_info", commit_info)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="buildPipelineId")
    def build_pipeline_id(self) -> str:
        return pulumi.get(self, "build_pipeline_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="buildRunArguments")
    def build_run_arguments(self) -> Optional['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentsResult']:
        return pulumi.get(self, "build_run_arguments")

    @property
    @pulumi.getter(name="buildRunProgressSummaries")
    def build_run_progress_summaries(self) -> Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunProgressSummaryResult']]:
        return pulumi.get(self, "build_run_progress_summaries")

    @property
    @pulumi.getter(name="buildRunSources")
    def build_run_sources(self) -> Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceResult']]:
        return pulumi.get(self, "build_run_sources")

    @property
    @pulumi.getter(name="commitInfo")
    def commit_info(self) -> Optional['outputs.GetBuildRunsBuildRunSummaryCollectionItemCommitInfoResult']:
        return pulumi.get(self, "commit_info")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentsResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentsItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentsItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemBuildRunArgumentsItemResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemBuildRunProgressSummaryResult(dict):
    def __init__(__self__, *,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceResult(dict):
    def __init__(__self__, *,
                 repository_id: Optional[str] = None,
                 source_type: Optional[str] = None,
                 trigger_infos: Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoResult']] = None):
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if trigger_infos is not None:
            pulumi.set(__self__, "trigger_infos", trigger_infos)

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="triggerInfos")
    def trigger_infos(self) -> Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoResult']]:
        return pulumi.get(self, "trigger_infos")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionResult']] = None,
                 display_name: Optional[str] = None,
                 trigger_id: Optional[str] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if trigger_id is not None:
            pulumi.set(__self__, "trigger_id", trigger_id)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionResult']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[str]:
        return pulumi.get(self, "trigger_id")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionResult(dict):
    def __init__(__self__, *,
                 build_pipeline_id: Optional[str] = None,
                 filters: Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterResult']] = None,
                 type: Optional[str] = None):
        if build_pipeline_id is not None:
            pulumi.set(__self__, "build_pipeline_id", build_pipeline_id)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="buildPipelineId")
    def build_pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "build_pipeline_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterResult(dict):
    def __init__(__self__, *,
                 events: Optional[Sequence[str]] = None,
                 includes: Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterIncludeResult']] = None,
                 trigger_source: Optional[str] = None):
        if events is not None:
            pulumi.set(__self__, "events", events)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def includes(self) -> Optional[Sequence['outputs.GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterIncludeResult']]:
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[str]:
        return pulumi.get(self, "trigger_source")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemBuildRunSourceTriggerInfoActionFilterIncludeResult(dict):
    def __init__(__self__, *,
                 base_ref: Optional[str] = None,
                 head_ref: Optional[str] = None):
        if base_ref is not None:
            pulumi.set(__self__, "base_ref", base_ref)
        if head_ref is not None:
            pulumi.set(__self__, "head_ref", head_ref)

    @property
    @pulumi.getter(name="baseRef")
    def base_ref(self) -> Optional[str]:
        return pulumi.get(self, "base_ref")

    @property
    @pulumi.getter(name="headRef")
    def head_ref(self) -> Optional[str]:
        return pulumi.get(self, "head_ref")


@pulumi.output_type
class GetBuildRunsBuildRunSummaryCollectionItemCommitInfoResult(dict):
    def __init__(__self__, *,
                 commit_hash: str,
                 repository_branch: str,
                 repository_url: str):
        pulumi.set(__self__, "commit_hash", commit_hash)
        pulumi.set(__self__, "repository_branch", repository_branch)
        pulumi.set(__self__, "repository_url", repository_url)

    @property
    @pulumi.getter(name="commitHash")
    def commit_hash(self) -> str:
        return pulumi.get(self, "commit_hash")

    @property
    @pulumi.getter(name="repositoryBranch")
    def repository_branch(self) -> str:
        return pulumi.get(self, "repository_branch")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> str:
        return pulumi.get(self, "repository_url")


@pulumi.output_type
class GetBuildRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetConnectionLastConnectionValidationResultResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 result: Optional[str] = None,
                 time_validated: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if time_validated is not None:
            pulumi.set(__self__, "time_validated", time_validated)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def result(self) -> Optional[str]:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="timeValidated")
    def time_validated(self) -> Optional[str]:
        return pulumi.get(self, "time_validated")


@pulumi.output_type
class GetConnectionTlsVerifyConfigResult(dict):
    def __init__(__self__, *,
                 ca_certificate_bundle_id: Optional[str] = None,
                 tls_verify_mode: Optional[str] = None):
        if ca_certificate_bundle_id is not None:
            pulumi.set(__self__, "ca_certificate_bundle_id", ca_certificate_bundle_id)
        if tls_verify_mode is not None:
            pulumi.set(__self__, "tls_verify_mode", tls_verify_mode)

    @property
    @pulumi.getter(name="caCertificateBundleId")
    def ca_certificate_bundle_id(self) -> Optional[str]:
        return pulumi.get(self, "ca_certificate_bundle_id")

    @property
    @pulumi.getter(name="tlsVerifyMode")
    def tls_verify_mode(self) -> Optional[str]:
        return pulumi.get(self, "tls_verify_mode")


@pulumi.output_type
class GetConnectionsConnectionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemResult(dict):
    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 app_password: Optional[str] = None,
                 base_url: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 connection_type: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 last_connection_validation_results: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemLastConnectionValidationResultResult']] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 tls_verify_configs: Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemTlsVerifyConfigResult']] = None,
                 username: Optional[str] = None):
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if app_password is not None:
            pulumi.set(__self__, "app_password", app_password)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_connection_validation_results is not None:
            pulumi.set(__self__, "last_connection_validation_results", last_connection_validation_results)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if tls_verify_configs is not None:
            pulumi.set(__self__, "tls_verify_configs", tls_verify_configs)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="appPassword")
    def app_password(self) -> Optional[str]:
        return pulumi.get(self, "app_password")

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[str]:
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[str]:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastConnectionValidationResults")
    def last_connection_validation_results(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemLastConnectionValidationResultResult']]:
        return pulumi.get(self, "last_connection_validation_results")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="tlsVerifyConfigs")
    def tls_verify_configs(self) -> Optional[Sequence['outputs.GetConnectionsConnectionCollectionItemTlsVerifyConfigResult']]:
        return pulumi.get(self, "tls_verify_configs")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemLastConnectionValidationResultResult(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 result: Optional[str] = None,
                 time_validated: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if time_validated is not None:
            pulumi.set(__self__, "time_validated", time_validated)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def result(self) -> Optional[str]:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="timeValidated")
    def time_validated(self) -> Optional[str]:
        return pulumi.get(self, "time_validated")


@pulumi.output_type
class GetConnectionsConnectionCollectionItemTlsVerifyConfigResult(dict):
    def __init__(__self__, *,
                 ca_certificate_bundle_id: Optional[str] = None,
                 tls_verify_mode: Optional[str] = None):
        if ca_certificate_bundle_id is not None:
            pulumi.set(__self__, "ca_certificate_bundle_id", ca_certificate_bundle_id)
        if tls_verify_mode is not None:
            pulumi.set(__self__, "tls_verify_mode", tls_verify_mode)

    @property
    @pulumi.getter(name="caCertificateBundleId")
    def ca_certificate_bundle_id(self) -> Optional[str]:
        return pulumi.get(self, "ca_certificate_bundle_id")

    @property
    @pulumi.getter(name="tlsVerifyMode")
    def tls_verify_mode(self) -> Optional[str]:
        return pulumi.get(self, "tls_verify_mode")


@pulumi.output_type
class GetConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeployArtifactDeployArtifactSourceResult(dict):
    def __init__(__self__, *,
                 base64encoded_content: Optional[str] = None,
                 chart_url: Optional[str] = None,
                 deploy_artifact_path: Optional[str] = None,
                 deploy_artifact_source_type: Optional[str] = None,
                 deploy_artifact_version: Optional[str] = None,
                 helm_verification_key_sources: Optional[Sequence['outputs.GetDeployArtifactDeployArtifactSourceHelmVerificationKeySourceResult']] = None,
                 image_digest: Optional[str] = None,
                 image_uri: Optional[str] = None,
                 repository_id: Optional[str] = None):
        if base64encoded_content is not None:
            pulumi.set(__self__, "base64encoded_content", base64encoded_content)
        if chart_url is not None:
            pulumi.set(__self__, "chart_url", chart_url)
        if deploy_artifact_path is not None:
            pulumi.set(__self__, "deploy_artifact_path", deploy_artifact_path)
        if deploy_artifact_source_type is not None:
            pulumi.set(__self__, "deploy_artifact_source_type", deploy_artifact_source_type)
        if deploy_artifact_version is not None:
            pulumi.set(__self__, "deploy_artifact_version", deploy_artifact_version)
        if helm_verification_key_sources is not None:
            pulumi.set(__self__, "helm_verification_key_sources", helm_verification_key_sources)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_uri is not None:
            pulumi.set(__self__, "image_uri", image_uri)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)

    @property
    @pulumi.getter(name="base64encodedContent")
    def base64encoded_content(self) -> Optional[str]:
        return pulumi.get(self, "base64encoded_content")

    @property
    @pulumi.getter(name="chartUrl")
    def chart_url(self) -> Optional[str]:
        return pulumi.get(self, "chart_url")

    @property
    @pulumi.getter(name="deployArtifactPath")
    def deploy_artifact_path(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_path")

    @property
    @pulumi.getter(name="deployArtifactSourceType")
    def deploy_artifact_source_type(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_source_type")

    @property
    @pulumi.getter(name="deployArtifactVersion")
    def deploy_artifact_version(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_version")

    @property
    @pulumi.getter(name="helmVerificationKeySources")
    def helm_verification_key_sources(self) -> Optional[Sequence['outputs.GetDeployArtifactDeployArtifactSourceHelmVerificationKeySourceResult']]:
        return pulumi.get(self, "helm_verification_key_sources")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> Optional[str]:
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")


@pulumi.output_type
class GetDeployArtifactDeployArtifactSourceHelmVerificationKeySourceResult(dict):
    def __init__(__self__, *,
                 current_public_key: Optional[str] = None,
                 previous_public_key: Optional[str] = None,
                 vault_secret_id: Optional[str] = None,
                 verification_key_source_type: Optional[str] = None):
        if current_public_key is not None:
            pulumi.set(__self__, "current_public_key", current_public_key)
        if previous_public_key is not None:
            pulumi.set(__self__, "previous_public_key", previous_public_key)
        if vault_secret_id is not None:
            pulumi.set(__self__, "vault_secret_id", vault_secret_id)
        if verification_key_source_type is not None:
            pulumi.set(__self__, "verification_key_source_type", verification_key_source_type)

    @property
    @pulumi.getter(name="currentPublicKey")
    def current_public_key(self) -> Optional[str]:
        return pulumi.get(self, "current_public_key")

    @property
    @pulumi.getter(name="previousPublicKey")
    def previous_public_key(self) -> Optional[str]:
        return pulumi.get(self, "previous_public_key")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_secret_id")

    @property
    @pulumi.getter(name="verificationKeySourceType")
    def verification_key_source_type(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_source_type")


@pulumi.output_type
class GetDeployArtifactsDeployArtifactCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployArtifactsDeployArtifactCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployArtifactsDeployArtifactCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployArtifactsDeployArtifactCollectionItemResult(dict):
    def __init__(__self__, *,
                 argument_substitution_mode: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deploy_artifact_sources: Optional[Sequence['outputs.GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceResult']] = None,
                 deploy_artifact_type: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if argument_substitution_mode is not None:
            pulumi.set(__self__, "argument_substitution_mode", argument_substitution_mode)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_artifact_sources is not None:
            pulumi.set(__self__, "deploy_artifact_sources", deploy_artifact_sources)
        if deploy_artifact_type is not None:
            pulumi.set(__self__, "deploy_artifact_type", deploy_artifact_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="argumentSubstitutionMode")
    def argument_substitution_mode(self) -> Optional[str]:
        return pulumi.get(self, "argument_substitution_mode")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployArtifactSources")
    def deploy_artifact_sources(self) -> Optional[Sequence['outputs.GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceResult']]:
        return pulumi.get(self, "deploy_artifact_sources")

    @property
    @pulumi.getter(name="deployArtifactType")
    def deploy_artifact_type(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceResult(dict):
    def __init__(__self__, *,
                 base64encoded_content: Optional[str] = None,
                 chart_url: Optional[str] = None,
                 deploy_artifact_path: Optional[str] = None,
                 deploy_artifact_source_type: Optional[str] = None,
                 deploy_artifact_version: Optional[str] = None,
                 helm_verification_key_sources: Optional[Sequence['outputs.GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySourceResult']] = None,
                 image_digest: Optional[str] = None,
                 image_uri: Optional[str] = None,
                 repository_id: Optional[str] = None):
        if base64encoded_content is not None:
            pulumi.set(__self__, "base64encoded_content", base64encoded_content)
        if chart_url is not None:
            pulumi.set(__self__, "chart_url", chart_url)
        if deploy_artifact_path is not None:
            pulumi.set(__self__, "deploy_artifact_path", deploy_artifact_path)
        if deploy_artifact_source_type is not None:
            pulumi.set(__self__, "deploy_artifact_source_type", deploy_artifact_source_type)
        if deploy_artifact_version is not None:
            pulumi.set(__self__, "deploy_artifact_version", deploy_artifact_version)
        if helm_verification_key_sources is not None:
            pulumi.set(__self__, "helm_verification_key_sources", helm_verification_key_sources)
        if image_digest is not None:
            pulumi.set(__self__, "image_digest", image_digest)
        if image_uri is not None:
            pulumi.set(__self__, "image_uri", image_uri)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)

    @property
    @pulumi.getter(name="base64encodedContent")
    def base64encoded_content(self) -> Optional[str]:
        return pulumi.get(self, "base64encoded_content")

    @property
    @pulumi.getter(name="chartUrl")
    def chart_url(self) -> Optional[str]:
        return pulumi.get(self, "chart_url")

    @property
    @pulumi.getter(name="deployArtifactPath")
    def deploy_artifact_path(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_path")

    @property
    @pulumi.getter(name="deployArtifactSourceType")
    def deploy_artifact_source_type(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_source_type")

    @property
    @pulumi.getter(name="deployArtifactVersion")
    def deploy_artifact_version(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_version")

    @property
    @pulumi.getter(name="helmVerificationKeySources")
    def helm_verification_key_sources(self) -> Optional[Sequence['outputs.GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySourceResult']]:
        return pulumi.get(self, "helm_verification_key_sources")

    @property
    @pulumi.getter(name="imageDigest")
    def image_digest(self) -> Optional[str]:
        return pulumi.get(self, "image_digest")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> Optional[str]:
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")


@pulumi.output_type
class GetDeployArtifactsDeployArtifactCollectionItemDeployArtifactSourceHelmVerificationKeySourceResult(dict):
    def __init__(__self__, *,
                 current_public_key: Optional[str] = None,
                 previous_public_key: Optional[str] = None,
                 vault_secret_id: Optional[str] = None,
                 verification_key_source_type: Optional[str] = None):
        if current_public_key is not None:
            pulumi.set(__self__, "current_public_key", current_public_key)
        if previous_public_key is not None:
            pulumi.set(__self__, "previous_public_key", previous_public_key)
        if vault_secret_id is not None:
            pulumi.set(__self__, "vault_secret_id", vault_secret_id)
        if verification_key_source_type is not None:
            pulumi.set(__self__, "verification_key_source_type", verification_key_source_type)

    @property
    @pulumi.getter(name="currentPublicKey")
    def current_public_key(self) -> Optional[str]:
        return pulumi.get(self, "current_public_key")

    @property
    @pulumi.getter(name="previousPublicKey")
    def previous_public_key(self) -> Optional[str]:
        return pulumi.get(self, "previous_public_key")

    @property
    @pulumi.getter(name="vaultSecretId")
    def vault_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "vault_secret_id")

    @property
    @pulumi.getter(name="verificationKeySourceType")
    def verification_key_source_type(self) -> Optional[str]:
        return pulumi.get(self, "verification_key_source_type")


@pulumi.output_type
class GetDeployArtifactsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeployEnvironmentComputeInstanceGroupSelectorResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployEnvironmentComputeInstanceGroupSelectorItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployEnvironmentComputeInstanceGroupSelectorItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployEnvironmentComputeInstanceGroupSelectorItemResult(dict):
    def __init__(__self__, *,
                 compute_instance_ids: Optional[Sequence[str]] = None,
                 query: Optional[str] = None,
                 region: Optional[str] = None,
                 selector_type: Optional[str] = None):
        if compute_instance_ids is not None:
            pulumi.set(__self__, "compute_instance_ids", compute_instance_ids)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if selector_type is not None:
            pulumi.set(__self__, "selector_type", selector_type)

    @property
    @pulumi.getter(name="computeInstanceIds")
    def compute_instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compute_instance_ids")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> Optional[str]:
        return pulumi.get(self, "selector_type")


@pulumi.output_type
class GetDeployEnvironmentNetworkChannelResult(dict):
    def __init__(__self__, *,
                 network_channel_type: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        if network_channel_type is not None:
            pulumi.set(__self__, "network_channel_type", network_channel_type)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="networkChannelType")
    def network_channel_type(self) -> Optional[str]:
        return pulumi.get(self, "network_channel_type")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetDeployEnvironmentsDeployEnvironmentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployEnvironmentsDeployEnvironmentCollectionItemResult(dict):
    def __init__(__self__, *,
                 cluster_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compute_instance_group_selectors: Optional[Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deploy_environment_type: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 function_id: Optional[str] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 network_channels: Optional[Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemNetworkChannelResult']] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_instance_group_selectors is not None:
            pulumi.set(__self__, "compute_instance_group_selectors", compute_instance_group_selectors)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_environment_type is not None:
            pulumi.set(__self__, "deploy_environment_type", deploy_environment_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if network_channels is not None:
            pulumi.set(__self__, "network_channels", network_channels)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeInstanceGroupSelectors")
    def compute_instance_group_selectors(self) -> Optional[Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorResult']]:
        return pulumi.get(self, "compute_instance_group_selectors")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployEnvironmentType")
    def deploy_environment_type(self) -> Optional[str]:
        return pulumi.get(self, "deploy_environment_type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="networkChannels")
    def network_channels(self) -> Optional[Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemNetworkChannelResult']]:
        return pulumi.get(self, "network_channels")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployEnvironmentsDeployEnvironmentCollectionItemComputeInstanceGroupSelectorItemResult(dict):
    def __init__(__self__, *,
                 compute_instance_ids: Optional[Sequence[str]] = None,
                 query: Optional[str] = None,
                 region: Optional[str] = None,
                 selector_type: Optional[str] = None):
        if compute_instance_ids is not None:
            pulumi.set(__self__, "compute_instance_ids", compute_instance_ids)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if selector_type is not None:
            pulumi.set(__self__, "selector_type", selector_type)

    @property
    @pulumi.getter(name="computeInstanceIds")
    def compute_instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compute_instance_ids")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="selectorType")
    def selector_type(self) -> Optional[str]:
        return pulumi.get(self, "selector_type")


@pulumi.output_type
class GetDeployEnvironmentsDeployEnvironmentCollectionItemNetworkChannelResult(dict):
    def __init__(__self__, *,
                 network_channel_type: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        if network_channel_type is not None:
            pulumi.set(__self__, "network_channel_type", network_channel_type)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="networkChannelType")
    def network_channel_type(self) -> Optional[str]:
        return pulumi.get(self, "network_channel_type")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetDeployEnvironmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeployPipelineDeployPipelineArtifactResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelineDeployPipelineArtifactItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelineDeployPipelineArtifactItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineArtifactItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.GetDeployPipelineDeployPipelineArtifactItemDeployPipelineStageResult']] = None,
                 display_name: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.GetDeployPipelineDeployPipelineArtifactItemDeployPipelineStageResult']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelineDeployPipelineArtifactItemDeployPipelineStageResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelineDeployPipelineArtifactItemDeployPipelineStageItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelineDeployPipelineArtifactItemDeployPipelineStageItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineArtifactItemDeployPipelineStageItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelineDeployPipelineEnvironmentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineEnvironmentItemResult(dict):
    def __init__(__self__, *,
                 deploy_environment_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageResult']] = None,
                 display_name: Optional[str] = None):
        if deploy_environment_id is not None:
            pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageResult']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineEnvironmentItemDeployPipelineStageItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelineDeployPipelineParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelineDeployPipelineParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelineDeployPipelineParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelineDeployPipelineParameterItemResult(dict):
    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deploy_pipeline_artifacts: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactResult']] = None,
                 deploy_pipeline_environments: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentResult']] = None,
                 deploy_pipeline_parameters: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterResult']] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_pipeline_artifacts is not None:
            pulumi.set(__self__, "deploy_pipeline_artifacts", deploy_pipeline_artifacts)
        if deploy_pipeline_environments is not None:
            pulumi.set(__self__, "deploy_pipeline_environments", deploy_pipeline_environments)
        if deploy_pipeline_parameters is not None:
            pulumi.set(__self__, "deploy_pipeline_parameters", deploy_pipeline_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployPipelineArtifacts")
    def deploy_pipeline_artifacts(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactResult']]:
        return pulumi.get(self, "deploy_pipeline_artifacts")

    @property
    @pulumi.getter(name="deployPipelineEnvironments")
    def deploy_pipeline_environments(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentResult']]:
        return pulumi.get(self, "deploy_pipeline_environments")

    @property
    @pulumi.getter(name="deployPipelineParameters")
    def deploy_pipeline_parameters(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterResult']]:
        return pulumi.get(self, "deploy_pipeline_parameters")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageResult']] = None,
                 display_name: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageResult']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineArtifactItemDeployPipelineStageItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemResult(dict):
    def __init__(__self__, *,
                 deploy_environment_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageResult']] = None,
                 display_name: Optional[str] = None):
        if deploy_environment_id is not None:
            pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageResult']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployPipelinesDeployPipelineCollectionItemDeployPipelineParameterItemResult(dict):
    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 description: Optional[str] = None,
                 name: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDeployPipelinesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeployStageApprovalPolicyResult(dict):
    def __init__(__self__, *,
                 approval_policy_type: Optional[str] = None,
                 number_of_approvals_required: Optional[int] = None):
        if approval_policy_type is not None:
            pulumi.set(__self__, "approval_policy_type", approval_policy_type)
        if number_of_approvals_required is not None:
            pulumi.set(__self__, "number_of_approvals_required", number_of_approvals_required)

    @property
    @pulumi.getter(name="approvalPolicyType")
    def approval_policy_type(self) -> Optional[str]:
        return pulumi.get(self, "approval_policy_type")

    @property
    @pulumi.getter(name="numberOfApprovalsRequired")
    def number_of_approvals_required(self) -> Optional[int]:
        return pulumi.get(self, "number_of_approvals_required")


@pulumi.output_type
class GetDeployStageBlueBackendIpResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStageBlueGreenStrategyResult(dict):
    def __init__(__self__, *,
                 ingress_name: Optional[str] = None,
                 namespace_a: Optional[str] = None,
                 namespace_b: Optional[str] = None,
                 strategy_type: Optional[str] = None):
        if ingress_name is not None:
            pulumi.set(__self__, "ingress_name", ingress_name)
        if namespace_a is not None:
            pulumi.set(__self__, "namespace_a", namespace_a)
        if namespace_b is not None:
            pulumi.set(__self__, "namespace_b", namespace_b)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="ingressName")
    def ingress_name(self) -> Optional[str]:
        return pulumi.get(self, "ingress_name")

    @property
    @pulumi.getter(name="namespaceA")
    def namespace_a(self) -> Optional[str]:
        return pulumi.get(self, "namespace_a")

    @property
    @pulumi.getter(name="namespaceB")
    def namespace_b(self) -> Optional[str]:
        return pulumi.get(self, "namespace_b")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[str]:
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class GetDeployStageCanaryStrategyResult(dict):
    def __init__(__self__, *,
                 ingress_name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 strategy_type: Optional[str] = None):
        if ingress_name is not None:
            pulumi.set(__self__, "ingress_name", ingress_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="ingressName")
    def ingress_name(self) -> Optional[str]:
        return pulumi.get(self, "ingress_name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[str]:
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class GetDeployStageContainerConfigResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 container_config_type: Optional[str] = None,
                 network_channels: Optional[Sequence['outputs.GetDeployStageContainerConfigNetworkChannelResult']] = None,
                 shape_configs: Optional[Sequence['outputs.GetDeployStageContainerConfigShapeConfigResult']] = None,
                 shape_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if container_config_type is not None:
            pulumi.set(__self__, "container_config_type", container_config_type)
        if network_channels is not None:
            pulumi.set(__self__, "network_channels", network_channels)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerConfigType")
    def container_config_type(self) -> Optional[str]:
        return pulumi.get(self, "container_config_type")

    @property
    @pulumi.getter(name="networkChannels")
    def network_channels(self) -> Optional[Sequence['outputs.GetDeployStageContainerConfigNetworkChannelResult']]:
        return pulumi.get(self, "network_channels")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetDeployStageContainerConfigShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetDeployStageContainerConfigNetworkChannelResult(dict):
    def __init__(__self__, *,
                 network_channel_type: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        if network_channel_type is not None:
            pulumi.set(__self__, "network_channel_type", network_channel_type)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="networkChannelType")
    def network_channel_type(self) -> Optional[str]:
        return pulumi.get(self, "network_channel_type")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetDeployStageContainerConfigShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetDeployStageDeployStagePredecessorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployStageDeployStagePredecessorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployStageDeployStagePredecessorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStageDeployStagePredecessorCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDeployStageFailurePolicyResult(dict):
    def __init__(__self__, *,
                 failure_count: Optional[int] = None,
                 failure_percentage: Optional[int] = None,
                 policy_type: Optional[str] = None):
        if failure_count is not None:
            pulumi.set(__self__, "failure_count", failure_count)
        if failure_percentage is not None:
            pulumi.set(__self__, "failure_percentage", failure_percentage)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="failureCount")
    def failure_count(self) -> Optional[int]:
        return pulumi.get(self, "failure_count")

    @property
    @pulumi.getter(name="failurePercentage")
    def failure_percentage(self) -> Optional[int]:
        return pulumi.get(self, "failure_percentage")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetDeployStageGreenBackendIpResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStageLoadBalancerConfigResult(dict):
    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDeployStageProductionLoadBalancerConfigResult(dict):
    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDeployStageRollbackPolicyResult(dict):
    def __init__(__self__, *,
                 policy_type: Optional[str] = None):
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetDeployStageRolloutPolicyResult(dict):
    def __init__(__self__, *,
                 batch_count: Optional[int] = None,
                 batch_delay_in_seconds: Optional[int] = None,
                 batch_percentage: Optional[int] = None,
                 policy_type: Optional[str] = None,
                 ramp_limit_percent: Optional[float] = None):
        if batch_count is not None:
            pulumi.set(__self__, "batch_count", batch_count)
        if batch_delay_in_seconds is not None:
            pulumi.set(__self__, "batch_delay_in_seconds", batch_delay_in_seconds)
        if batch_percentage is not None:
            pulumi.set(__self__, "batch_percentage", batch_percentage)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if ramp_limit_percent is not None:
            pulumi.set(__self__, "ramp_limit_percent", ramp_limit_percent)

    @property
    @pulumi.getter(name="batchCount")
    def batch_count(self) -> Optional[int]:
        return pulumi.get(self, "batch_count")

    @property
    @pulumi.getter(name="batchDelayInSeconds")
    def batch_delay_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "batch_delay_in_seconds")

    @property
    @pulumi.getter(name="batchPercentage")
    def batch_percentage(self) -> Optional[int]:
        return pulumi.get(self, "batch_percentage")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="rampLimitPercent")
    def ramp_limit_percent(self) -> Optional[float]:
        return pulumi.get(self, "ramp_limit_percent")


@pulumi.output_type
class GetDeployStageSetStringResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployStageSetStringItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployStageSetStringItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStageSetStringItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeployStageSetValueResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployStageSetValueItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployStageSetValueItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStageSetValueItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeployStageTestLoadBalancerConfigResult(dict):
    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDeployStageWaitCriteriaResult(dict):
    def __init__(__self__, *,
                 wait_duration: Optional[str] = None,
                 wait_type: Optional[str] = None):
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)
        if wait_type is not None:
            pulumi.set(__self__, "wait_type", wait_type)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[str]:
        return pulumi.get(self, "wait_duration")

    @property
    @pulumi.getter(name="waitType")
    def wait_type(self) -> Optional[str]:
        return pulumi.get(self, "wait_type")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemResult(dict):
    def __init__(__self__, *,
                 approval_policies: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemApprovalPolicyResult']] = None,
                 are_hooks_enabled: Optional[bool] = None,
                 blue_backend_ips: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemBlueBackendIpResult']] = None,
                 blue_green_strategies: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemBlueGreenStrategyResult']] = None,
                 canary_strategies: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemCanaryStrategyResult']] = None,
                 command_spec_deploy_artifact_id: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 compute_instance_group_blue_green_deployment_deploy_stage_id: Optional[str] = None,
                 compute_instance_group_canary_deploy_stage_id: Optional[str] = None,
                 compute_instance_group_canary_traffic_shift_deploy_stage_id: Optional[str] = None,
                 compute_instance_group_deploy_environment_id: Optional[str] = None,
                 config: Optional[Mapping[str, Any]] = None,
                 container_configs: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemContainerConfigResult']] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deploy_artifact_id: Optional[str] = None,
                 deploy_artifact_ids: Optional[Sequence[str]] = None,
                 deploy_environment_id_a: Optional[str] = None,
                 deploy_environment_id_b: Optional[str] = None,
                 deploy_pipeline_id: Optional[str] = None,
                 deploy_stage_predecessor_collections: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionResult']] = None,
                 deploy_stage_type: Optional[str] = None,
                 deployment_spec_deploy_artifact_id: Optional[str] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 docker_image_deploy_artifact_id: Optional[str] = None,
                 failure_policies: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemFailurePolicyResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 function_deploy_environment_id: Optional[str] = None,
                 function_timeout_in_seconds: Optional[int] = None,
                 green_backend_ips: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemGreenBackendIpResult']] = None,
                 helm_chart_deploy_artifact_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_async: Optional[bool] = None,
                 is_debug_enabled: Optional[bool] = None,
                 is_force_enabled: Optional[bool] = None,
                 is_validation_enabled: Optional[bool] = None,
                 kubernetes_manifest_deploy_artifact_ids: Optional[Sequence[str]] = None,
                 lifecycle_details: Optional[str] = None,
                 load_balancer_configs: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemLoadBalancerConfigResult']] = None,
                 max_history: Optional[int] = None,
                 max_memory_in_mbs: Optional[str] = None,
                 namespace: Optional[str] = None,
                 oke_blue_green_deploy_stage_id: Optional[str] = None,
                 oke_canary_deploy_stage_id: Optional[str] = None,
                 oke_canary_traffic_shift_deploy_stage_id: Optional[str] = None,
                 oke_cluster_deploy_environment_id: Optional[str] = None,
                 production_load_balancer_configs: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemProductionLoadBalancerConfigResult']] = None,
                 project_id: Optional[str] = None,
                 release_name: Optional[str] = None,
                 rollback_policies: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemRollbackPolicyResult']] = None,
                 rollout_policies: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemRolloutPolicyResult']] = None,
                 set_strings: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemSetStringResult']] = None,
                 set_values: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemSetValueResult']] = None,
                 should_cleanup_on_fail: Optional[bool] = None,
                 should_not_wait: Optional[bool] = None,
                 should_reset_values: Optional[bool] = None,
                 should_reuse_values: Optional[bool] = None,
                 should_skip_crds: Optional[bool] = None,
                 should_skip_render_subchart_notes: Optional[bool] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 test_load_balancer_configs: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemTestLoadBalancerConfigResult']] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 timeout_in_seconds: Optional[int] = None,
                 traffic_shift_target: Optional[str] = None,
                 values_artifact_ids: Optional[Sequence[str]] = None,
                 wait_criterias: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemWaitCriteriaResult']] = None):
        if approval_policies is not None:
            pulumi.set(__self__, "approval_policies", approval_policies)
        if are_hooks_enabled is not None:
            pulumi.set(__self__, "are_hooks_enabled", are_hooks_enabled)
        if blue_backend_ips is not None:
            pulumi.set(__self__, "blue_backend_ips", blue_backend_ips)
        if blue_green_strategies is not None:
            pulumi.set(__self__, "blue_green_strategies", blue_green_strategies)
        if canary_strategies is not None:
            pulumi.set(__self__, "canary_strategies", canary_strategies)
        if command_spec_deploy_artifact_id is not None:
            pulumi.set(__self__, "command_spec_deploy_artifact_id", command_spec_deploy_artifact_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if compute_instance_group_blue_green_deployment_deploy_stage_id is not None:
            pulumi.set(__self__, "compute_instance_group_blue_green_deployment_deploy_stage_id", compute_instance_group_blue_green_deployment_deploy_stage_id)
        if compute_instance_group_canary_deploy_stage_id is not None:
            pulumi.set(__self__, "compute_instance_group_canary_deploy_stage_id", compute_instance_group_canary_deploy_stage_id)
        if compute_instance_group_canary_traffic_shift_deploy_stage_id is not None:
            pulumi.set(__self__, "compute_instance_group_canary_traffic_shift_deploy_stage_id", compute_instance_group_canary_traffic_shift_deploy_stage_id)
        if compute_instance_group_deploy_environment_id is not None:
            pulumi.set(__self__, "compute_instance_group_deploy_environment_id", compute_instance_group_deploy_environment_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if container_configs is not None:
            pulumi.set(__self__, "container_configs", container_configs)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_artifact_ids is not None:
            pulumi.set(__self__, "deploy_artifact_ids", deploy_artifact_ids)
        if deploy_environment_id_a is not None:
            pulumi.set(__self__, "deploy_environment_id_a", deploy_environment_id_a)
        if deploy_environment_id_b is not None:
            pulumi.set(__self__, "deploy_environment_id_b", deploy_environment_id_b)
        if deploy_pipeline_id is not None:
            pulumi.set(__self__, "deploy_pipeline_id", deploy_pipeline_id)
        if deploy_stage_predecessor_collections is not None:
            pulumi.set(__self__, "deploy_stage_predecessor_collections", deploy_stage_predecessor_collections)
        if deploy_stage_type is not None:
            pulumi.set(__self__, "deploy_stage_type", deploy_stage_type)
        if deployment_spec_deploy_artifact_id is not None:
            pulumi.set(__self__, "deployment_spec_deploy_artifact_id", deployment_spec_deploy_artifact_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if docker_image_deploy_artifact_id is not None:
            pulumi.set(__self__, "docker_image_deploy_artifact_id", docker_image_deploy_artifact_id)
        if failure_policies is not None:
            pulumi.set(__self__, "failure_policies", failure_policies)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if function_deploy_environment_id is not None:
            pulumi.set(__self__, "function_deploy_environment_id", function_deploy_environment_id)
        if function_timeout_in_seconds is not None:
            pulumi.set(__self__, "function_timeout_in_seconds", function_timeout_in_seconds)
        if green_backend_ips is not None:
            pulumi.set(__self__, "green_backend_ips", green_backend_ips)
        if helm_chart_deploy_artifact_id is not None:
            pulumi.set(__self__, "helm_chart_deploy_artifact_id", helm_chart_deploy_artifact_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_async is not None:
            pulumi.set(__self__, "is_async", is_async)
        if is_debug_enabled is not None:
            pulumi.set(__self__, "is_debug_enabled", is_debug_enabled)
        if is_force_enabled is not None:
            pulumi.set(__self__, "is_force_enabled", is_force_enabled)
        if is_validation_enabled is not None:
            pulumi.set(__self__, "is_validation_enabled", is_validation_enabled)
        if kubernetes_manifest_deploy_artifact_ids is not None:
            pulumi.set(__self__, "kubernetes_manifest_deploy_artifact_ids", kubernetes_manifest_deploy_artifact_ids)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if load_balancer_configs is not None:
            pulumi.set(__self__, "load_balancer_configs", load_balancer_configs)
        if max_history is not None:
            pulumi.set(__self__, "max_history", max_history)
        if max_memory_in_mbs is not None:
            pulumi.set(__self__, "max_memory_in_mbs", max_memory_in_mbs)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if oke_blue_green_deploy_stage_id is not None:
            pulumi.set(__self__, "oke_blue_green_deploy_stage_id", oke_blue_green_deploy_stage_id)
        if oke_canary_deploy_stage_id is not None:
            pulumi.set(__self__, "oke_canary_deploy_stage_id", oke_canary_deploy_stage_id)
        if oke_canary_traffic_shift_deploy_stage_id is not None:
            pulumi.set(__self__, "oke_canary_traffic_shift_deploy_stage_id", oke_canary_traffic_shift_deploy_stage_id)
        if oke_cluster_deploy_environment_id is not None:
            pulumi.set(__self__, "oke_cluster_deploy_environment_id", oke_cluster_deploy_environment_id)
        if production_load_balancer_configs is not None:
            pulumi.set(__self__, "production_load_balancer_configs", production_load_balancer_configs)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if release_name is not None:
            pulumi.set(__self__, "release_name", release_name)
        if rollback_policies is not None:
            pulumi.set(__self__, "rollback_policies", rollback_policies)
        if rollout_policies is not None:
            pulumi.set(__self__, "rollout_policies", rollout_policies)
        if set_strings is not None:
            pulumi.set(__self__, "set_strings", set_strings)
        if set_values is not None:
            pulumi.set(__self__, "set_values", set_values)
        if should_cleanup_on_fail is not None:
            pulumi.set(__self__, "should_cleanup_on_fail", should_cleanup_on_fail)
        if should_not_wait is not None:
            pulumi.set(__self__, "should_not_wait", should_not_wait)
        if should_reset_values is not None:
            pulumi.set(__self__, "should_reset_values", should_reset_values)
        if should_reuse_values is not None:
            pulumi.set(__self__, "should_reuse_values", should_reuse_values)
        if should_skip_crds is not None:
            pulumi.set(__self__, "should_skip_crds", should_skip_crds)
        if should_skip_render_subchart_notes is not None:
            pulumi.set(__self__, "should_skip_render_subchart_notes", should_skip_render_subchart_notes)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if test_load_balancer_configs is not None:
            pulumi.set(__self__, "test_load_balancer_configs", test_load_balancer_configs)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if timeout_in_seconds is not None:
            pulumi.set(__self__, "timeout_in_seconds", timeout_in_seconds)
        if traffic_shift_target is not None:
            pulumi.set(__self__, "traffic_shift_target", traffic_shift_target)
        if values_artifact_ids is not None:
            pulumi.set(__self__, "values_artifact_ids", values_artifact_ids)
        if wait_criterias is not None:
            pulumi.set(__self__, "wait_criterias", wait_criterias)

    @property
    @pulumi.getter(name="approvalPolicies")
    def approval_policies(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemApprovalPolicyResult']]:
        return pulumi.get(self, "approval_policies")

    @property
    @pulumi.getter(name="areHooksEnabled")
    def are_hooks_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_hooks_enabled")

    @property
    @pulumi.getter(name="blueBackendIps")
    def blue_backend_ips(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemBlueBackendIpResult']]:
        return pulumi.get(self, "blue_backend_ips")

    @property
    @pulumi.getter(name="blueGreenStrategies")
    def blue_green_strategies(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemBlueGreenStrategyResult']]:
        return pulumi.get(self, "blue_green_strategies")

    @property
    @pulumi.getter(name="canaryStrategies")
    def canary_strategies(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemCanaryStrategyResult']]:
        return pulumi.get(self, "canary_strategies")

    @property
    @pulumi.getter(name="commandSpecDeployArtifactId")
    def command_spec_deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "command_spec_deploy_artifact_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="computeInstanceGroupBlueGreenDeploymentDeployStageId")
    def compute_instance_group_blue_green_deployment_deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_instance_group_blue_green_deployment_deploy_stage_id")

    @property
    @pulumi.getter(name="computeInstanceGroupCanaryDeployStageId")
    def compute_instance_group_canary_deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_instance_group_canary_deploy_stage_id")

    @property
    @pulumi.getter(name="computeInstanceGroupCanaryTrafficShiftDeployStageId")
    def compute_instance_group_canary_traffic_shift_deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_instance_group_canary_traffic_shift_deploy_stage_id")

    @property
    @pulumi.getter(name="computeInstanceGroupDeployEnvironmentId")
    def compute_instance_group_deploy_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "compute_instance_group_deploy_environment_id")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="containerConfigs")
    def container_configs(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemContainerConfigResult']]:
        return pulumi.get(self, "container_configs")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployArtifactIds")
    def deploy_artifact_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "deploy_artifact_ids")

    @property
    @pulumi.getter(name="deployEnvironmentIdA")
    def deploy_environment_id_a(self) -> Optional[str]:
        return pulumi.get(self, "deploy_environment_id_a")

    @property
    @pulumi.getter(name="deployEnvironmentIdB")
    def deploy_environment_id_b(self) -> Optional[str]:
        return pulumi.get(self, "deploy_environment_id_b")

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_pipeline_id")

    @property
    @pulumi.getter(name="deployStagePredecessorCollections")
    def deploy_stage_predecessor_collections(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionResult']]:
        return pulumi.get(self, "deploy_stage_predecessor_collections")

    @property
    @pulumi.getter(name="deployStageType")
    def deploy_stage_type(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_type")

    @property
    @pulumi.getter(name="deploymentSpecDeployArtifactId")
    def deployment_spec_deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deployment_spec_deploy_artifact_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="dockerImageDeployArtifactId")
    def docker_image_deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "docker_image_deploy_artifact_id")

    @property
    @pulumi.getter(name="failurePolicies")
    def failure_policies(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemFailurePolicyResult']]:
        return pulumi.get(self, "failure_policies")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="functionDeployEnvironmentId")
    def function_deploy_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "function_deploy_environment_id")

    @property
    @pulumi.getter(name="functionTimeoutInSeconds")
    def function_timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "function_timeout_in_seconds")

    @property
    @pulumi.getter(name="greenBackendIps")
    def green_backend_ips(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemGreenBackendIpResult']]:
        return pulumi.get(self, "green_backend_ips")

    @property
    @pulumi.getter(name="helmChartDeployArtifactId")
    def helm_chart_deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "helm_chart_deploy_artifact_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAsync")
    def is_async(self) -> Optional[bool]:
        return pulumi.get(self, "is_async")

    @property
    @pulumi.getter(name="isDebugEnabled")
    def is_debug_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_debug_enabled")

    @property
    @pulumi.getter(name="isForceEnabled")
    def is_force_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_force_enabled")

    @property
    @pulumi.getter(name="isValidationEnabled")
    def is_validation_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_validation_enabled")

    @property
    @pulumi.getter(name="kubernetesManifestDeployArtifactIds")
    def kubernetes_manifest_deploy_artifact_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "kubernetes_manifest_deploy_artifact_ids")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="loadBalancerConfigs")
    def load_balancer_configs(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemLoadBalancerConfigResult']]:
        return pulumi.get(self, "load_balancer_configs")

    @property
    @pulumi.getter(name="maxHistory")
    def max_history(self) -> Optional[int]:
        return pulumi.get(self, "max_history")

    @property
    @pulumi.getter(name="maxMemoryInMbs")
    def max_memory_in_mbs(self) -> Optional[str]:
        return pulumi.get(self, "max_memory_in_mbs")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="okeBlueGreenDeployStageId")
    def oke_blue_green_deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "oke_blue_green_deploy_stage_id")

    @property
    @pulumi.getter(name="okeCanaryDeployStageId")
    def oke_canary_deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "oke_canary_deploy_stage_id")

    @property
    @pulumi.getter(name="okeCanaryTrafficShiftDeployStageId")
    def oke_canary_traffic_shift_deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "oke_canary_traffic_shift_deploy_stage_id")

    @property
    @pulumi.getter(name="okeClusterDeployEnvironmentId")
    def oke_cluster_deploy_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "oke_cluster_deploy_environment_id")

    @property
    @pulumi.getter(name="productionLoadBalancerConfigs")
    def production_load_balancer_configs(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemProductionLoadBalancerConfigResult']]:
        return pulumi.get(self, "production_load_balancer_configs")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> Optional[str]:
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="rollbackPolicies")
    def rollback_policies(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemRollbackPolicyResult']]:
        return pulumi.get(self, "rollback_policies")

    @property
    @pulumi.getter(name="rolloutPolicies")
    def rollout_policies(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemRolloutPolicyResult']]:
        return pulumi.get(self, "rollout_policies")

    @property
    @pulumi.getter(name="setStrings")
    def set_strings(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemSetStringResult']]:
        return pulumi.get(self, "set_strings")

    @property
    @pulumi.getter(name="setValues")
    def set_values(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemSetValueResult']]:
        return pulumi.get(self, "set_values")

    @property
    @pulumi.getter(name="shouldCleanupOnFail")
    def should_cleanup_on_fail(self) -> Optional[bool]:
        return pulumi.get(self, "should_cleanup_on_fail")

    @property
    @pulumi.getter(name="shouldNotWait")
    def should_not_wait(self) -> Optional[bool]:
        return pulumi.get(self, "should_not_wait")

    @property
    @pulumi.getter(name="shouldResetValues")
    def should_reset_values(self) -> Optional[bool]:
        return pulumi.get(self, "should_reset_values")

    @property
    @pulumi.getter(name="shouldReuseValues")
    def should_reuse_values(self) -> Optional[bool]:
        return pulumi.get(self, "should_reuse_values")

    @property
    @pulumi.getter(name="shouldSkipCrds")
    def should_skip_crds(self) -> Optional[bool]:
        return pulumi.get(self, "should_skip_crds")

    @property
    @pulumi.getter(name="shouldSkipRenderSubchartNotes")
    def should_skip_render_subchart_notes(self) -> Optional[bool]:
        return pulumi.get(self, "should_skip_render_subchart_notes")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="testLoadBalancerConfigs")
    def test_load_balancer_configs(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemTestLoadBalancerConfigResult']]:
        return pulumi.get(self, "test_load_balancer_configs")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")

    @property
    @pulumi.getter(name="trafficShiftTarget")
    def traffic_shift_target(self) -> Optional[str]:
        return pulumi.get(self, "traffic_shift_target")

    @property
    @pulumi.getter(name="valuesArtifactIds")
    def values_artifact_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values_artifact_ids")

    @property
    @pulumi.getter(name="waitCriterias")
    def wait_criterias(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemWaitCriteriaResult']]:
        return pulumi.get(self, "wait_criterias")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemApprovalPolicyResult(dict):
    def __init__(__self__, *,
                 approval_policy_type: Optional[str] = None,
                 number_of_approvals_required: Optional[int] = None):
        if approval_policy_type is not None:
            pulumi.set(__self__, "approval_policy_type", approval_policy_type)
        if number_of_approvals_required is not None:
            pulumi.set(__self__, "number_of_approvals_required", number_of_approvals_required)

    @property
    @pulumi.getter(name="approvalPolicyType")
    def approval_policy_type(self) -> Optional[str]:
        return pulumi.get(self, "approval_policy_type")

    @property
    @pulumi.getter(name="numberOfApprovalsRequired")
    def number_of_approvals_required(self) -> Optional[int]:
        return pulumi.get(self, "number_of_approvals_required")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemBlueBackendIpResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemBlueGreenStrategyResult(dict):
    def __init__(__self__, *,
                 ingress_name: Optional[str] = None,
                 namespace_a: Optional[str] = None,
                 namespace_b: Optional[str] = None,
                 strategy_type: Optional[str] = None):
        if ingress_name is not None:
            pulumi.set(__self__, "ingress_name", ingress_name)
        if namespace_a is not None:
            pulumi.set(__self__, "namespace_a", namespace_a)
        if namespace_b is not None:
            pulumi.set(__self__, "namespace_b", namespace_b)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="ingressName")
    def ingress_name(self) -> Optional[str]:
        return pulumi.get(self, "ingress_name")

    @property
    @pulumi.getter(name="namespaceA")
    def namespace_a(self) -> Optional[str]:
        return pulumi.get(self, "namespace_a")

    @property
    @pulumi.getter(name="namespaceB")
    def namespace_b(self) -> Optional[str]:
        return pulumi.get(self, "namespace_b")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[str]:
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemCanaryStrategyResult(dict):
    def __init__(__self__, *,
                 ingress_name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 strategy_type: Optional[str] = None):
        if ingress_name is not None:
            pulumi.set(__self__, "ingress_name", ingress_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="ingressName")
    def ingress_name(self) -> Optional[str]:
        return pulumi.get(self, "ingress_name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[str]:
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemContainerConfigResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 container_config_type: Optional[str] = None,
                 network_channels: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemContainerConfigNetworkChannelResult']] = None,
                 shape_configs: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemContainerConfigShapeConfigResult']] = None,
                 shape_name: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if container_config_type is not None:
            pulumi.set(__self__, "container_config_type", container_config_type)
        if network_channels is not None:
            pulumi.set(__self__, "network_channels", network_channels)
        if shape_configs is not None:
            pulumi.set(__self__, "shape_configs", shape_configs)
        if shape_name is not None:
            pulumi.set(__self__, "shape_name", shape_name)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="containerConfigType")
    def container_config_type(self) -> Optional[str]:
        return pulumi.get(self, "container_config_type")

    @property
    @pulumi.getter(name="networkChannels")
    def network_channels(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemContainerConfigNetworkChannelResult']]:
        return pulumi.get(self, "network_channels")

    @property
    @pulumi.getter(name="shapeConfigs")
    def shape_configs(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemContainerConfigShapeConfigResult']]:
        return pulumi.get(self, "shape_configs")

    @property
    @pulumi.getter(name="shapeName")
    def shape_name(self) -> Optional[str]:
        return pulumi.get(self, "shape_name")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemContainerConfigNetworkChannelResult(dict):
    def __init__(__self__, *,
                 network_channel_type: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        if network_channel_type is not None:
            pulumi.set(__self__, "network_channel_type", network_channel_type)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="networkChannelType")
    def network_channel_type(self) -> Optional[str]:
        return pulumi.get(self, "network_channel_type")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemContainerConfigShapeConfigResult(dict):
    def __init__(__self__, *,
                 memory_in_gbs: Optional[float] = None,
                 ocpus: Optional[float] = None):
        if memory_in_gbs is not None:
            pulumi.set(__self__, "memory_in_gbs", memory_in_gbs)
        if ocpus is not None:
            pulumi.set(__self__, "ocpus", ocpus)

    @property
    @pulumi.getter(name="memoryInGbs")
    def memory_in_gbs(self) -> Optional[float]:
        return pulumi.get(self, "memory_in_gbs")

    @property
    @pulumi.getter
    def ocpus(self) -> Optional[float]:
        return pulumi.get(self, "ocpus")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemDeployStagePredecessorCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemFailurePolicyResult(dict):
    def __init__(__self__, *,
                 failure_count: Optional[int] = None,
                 failure_percentage: Optional[int] = None,
                 policy_type: Optional[str] = None):
        if failure_count is not None:
            pulumi.set(__self__, "failure_count", failure_count)
        if failure_percentage is not None:
            pulumi.set(__self__, "failure_percentage", failure_percentage)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="failureCount")
    def failure_count(self) -> Optional[int]:
        return pulumi.get(self, "failure_count")

    @property
    @pulumi.getter(name="failurePercentage")
    def failure_percentage(self) -> Optional[int]:
        return pulumi.get(self, "failure_percentage")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemGreenBackendIpResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence[str]] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemLoadBalancerConfigResult(dict):
    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemProductionLoadBalancerConfigResult(dict):
    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemRollbackPolicyResult(dict):
    def __init__(__self__, *,
                 policy_type: Optional[str] = None):
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemRolloutPolicyResult(dict):
    def __init__(__self__, *,
                 batch_count: Optional[int] = None,
                 batch_delay_in_seconds: Optional[int] = None,
                 batch_percentage: Optional[int] = None,
                 policy_type: Optional[str] = None,
                 ramp_limit_percent: Optional[float] = None):
        if batch_count is not None:
            pulumi.set(__self__, "batch_count", batch_count)
        if batch_delay_in_seconds is not None:
            pulumi.set(__self__, "batch_delay_in_seconds", batch_delay_in_seconds)
        if batch_percentage is not None:
            pulumi.set(__self__, "batch_percentage", batch_percentage)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if ramp_limit_percent is not None:
            pulumi.set(__self__, "ramp_limit_percent", ramp_limit_percent)

    @property
    @pulumi.getter(name="batchCount")
    def batch_count(self) -> Optional[int]:
        return pulumi.get(self, "batch_count")

    @property
    @pulumi.getter(name="batchDelayInSeconds")
    def batch_delay_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "batch_delay_in_seconds")

    @property
    @pulumi.getter(name="batchPercentage")
    def batch_percentage(self) -> Optional[int]:
        return pulumi.get(self, "batch_percentage")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="rampLimitPercent")
    def ramp_limit_percent(self) -> Optional[float]:
        return pulumi.get(self, "ramp_limit_percent")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemSetStringResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemSetStringItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemSetStringItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemSetStringItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemSetValueResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemSetValueItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeployStagesDeployStageCollectionItemSetValueItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemSetValueItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemTestLoadBalancerConfigResult(dict):
    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 listener_name: Optional[str] = None,
                 load_balancer_id: Optional[str] = None,
                 state: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDeployStagesDeployStageCollectionItemWaitCriteriaResult(dict):
    def __init__(__self__, *,
                 wait_duration: Optional[str] = None,
                 wait_type: Optional[str] = None):
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)
        if wait_type is not None:
            pulumi.set(__self__, "wait_type", wait_type)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[str]:
        return pulumi.get(self, "wait_duration")

    @property
    @pulumi.getter(name="waitType")
    def wait_type(self) -> Optional[str]:
        return pulumi.get(self, "wait_type")


@pulumi.output_type
class GetDeployStagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDeploymentDeployArtifactOverrideArgumentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentDeployArtifactOverrideArgumentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentDeployArtifactOverrideArgumentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployArtifactOverrideArgumentItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentDeployPipelineArtifactResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentDeployPipelineArtifactItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentDeployPipelineArtifactItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployPipelineArtifactItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.GetDeploymentDeployPipelineArtifactItemDeployPipelineStageResult']] = None,
                 display_name: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.GetDeploymentDeployPipelineArtifactItemDeployPipelineStageResult']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentDeployPipelineArtifactItemDeployPipelineStageResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentDeployPipelineArtifactItemDeployPipelineStageItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentDeployPipelineArtifactItemDeployPipelineStageItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployPipelineArtifactItemDeployPipelineStageItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentDeployPipelineEnvironmentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentDeployPipelineEnvironmentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentDeployPipelineEnvironmentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployPipelineEnvironmentItemResult(dict):
    def __init__(__self__, *,
                 deploy_environment_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.GetDeploymentDeployPipelineEnvironmentItemDeployPipelineStageResult']] = None,
                 display_name: Optional[str] = None):
        if deploy_environment_id is not None:
            pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.GetDeploymentDeployPipelineEnvironmentItemDeployPipelineStageResult']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentDeployPipelineEnvironmentItemDeployPipelineStageResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentDeployPipelineEnvironmentItemDeployPipelineStageItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentDeployPipelineEnvironmentItemDeployPipelineStageItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployPipelineEnvironmentItemDeployPipelineStageItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentDeployStageOverrideArgumentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentDeployStageOverrideArgumentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentDeployStageOverrideArgumentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeployStageOverrideArgumentItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentDeploymentArgumentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentDeploymentArgumentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentDeploymentArgumentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentDeploymentArgumentItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentDeploymentExecutionProgressResult(dict):
    def __init__(__self__, *,
                 deploy_stage_execution_progress: Optional[Mapping[str, Any]] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if deploy_stage_execution_progress is not None:
            pulumi.set(__self__, "deploy_stage_execution_progress", deploy_stage_execution_progress)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="deployStageExecutionProgress")
    def deploy_stage_execution_progress(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "deploy_stage_execution_progress")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 deploy_artifact_override_arguments: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentResult']] = None,
                 deploy_pipeline_artifacts: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactResult']] = None,
                 deploy_pipeline_environments: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentResult']] = None,
                 deploy_pipeline_id: Optional[str] = None,
                 deploy_stage_id: Optional[str] = None,
                 deploy_stage_override_arguments: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentResult']] = None,
                 deployment_arguments: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentArgumentResult']] = None,
                 deployment_execution_progresses: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentExecutionProgressResult']] = None,
                 deployment_type: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 previous_deployment_id: Optional[str] = None,
                 project_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trigger_new_devops_deployment: Optional[bool] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if deploy_artifact_override_arguments is not None:
            pulumi.set(__self__, "deploy_artifact_override_arguments", deploy_artifact_override_arguments)
        if deploy_pipeline_artifacts is not None:
            pulumi.set(__self__, "deploy_pipeline_artifacts", deploy_pipeline_artifacts)
        if deploy_pipeline_environments is not None:
            pulumi.set(__self__, "deploy_pipeline_environments", deploy_pipeline_environments)
        if deploy_pipeline_id is not None:
            pulumi.set(__self__, "deploy_pipeline_id", deploy_pipeline_id)
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if deploy_stage_override_arguments is not None:
            pulumi.set(__self__, "deploy_stage_override_arguments", deploy_stage_override_arguments)
        if deployment_arguments is not None:
            pulumi.set(__self__, "deployment_arguments", deployment_arguments)
        if deployment_execution_progresses is not None:
            pulumi.set(__self__, "deployment_execution_progresses", deployment_execution_progresses)
        if deployment_type is not None:
            pulumi.set(__self__, "deployment_type", deployment_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if previous_deployment_id is not None:
            pulumi.set(__self__, "previous_deployment_id", previous_deployment_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trigger_new_devops_deployment is not None:
            pulumi.set(__self__, "trigger_new_devops_deployment", trigger_new_devops_deployment)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deployArtifactOverrideArguments")
    def deploy_artifact_override_arguments(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentResult']]:
        return pulumi.get(self, "deploy_artifact_override_arguments")

    @property
    @pulumi.getter(name="deployPipelineArtifacts")
    def deploy_pipeline_artifacts(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactResult']]:
        return pulumi.get(self, "deploy_pipeline_artifacts")

    @property
    @pulumi.getter(name="deployPipelineEnvironments")
    def deploy_pipeline_environments(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentResult']]:
        return pulumi.get(self, "deploy_pipeline_environments")

    @property
    @pulumi.getter(name="deployPipelineId")
    def deploy_pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_pipeline_id")

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="deployStageOverrideArguments")
    def deploy_stage_override_arguments(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentResult']]:
        return pulumi.get(self, "deploy_stage_override_arguments")

    @property
    @pulumi.getter(name="deploymentArguments")
    def deployment_arguments(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentArgumentResult']]:
        return pulumi.get(self, "deployment_arguments")

    @property
    @pulumi.getter(name="deploymentExecutionProgresses")
    def deployment_execution_progresses(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentExecutionProgressResult']]:
        return pulumi.get(self, "deployment_execution_progresses")

    @property
    @pulumi.getter(name="deploymentType")
    def deployment_type(self) -> Optional[str]:
        return pulumi.get(self, "deployment_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="previousDeploymentId")
    def previous_deployment_id(self) -> Optional[str]:
        return pulumi.get(self, "previous_deployment_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="triggerNewDevopsDeployment")
    def trigger_new_devops_deployment(self) -> Optional[bool]:
        return pulumi.get(self, "trigger_new_devops_deployment")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployArtifactOverrideArgumentItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemResult(dict):
    def __init__(__self__, *,
                 deploy_artifact_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageResult']] = None,
                 display_name: Optional[str] = None):
        if deploy_artifact_id is not None:
            pulumi.set(__self__, "deploy_artifact_id", deploy_artifact_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployArtifactId")
    def deploy_artifact_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_artifact_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageResult']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineArtifactItemDeployPipelineStageItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemResult(dict):
    def __init__(__self__, *,
                 deploy_environment_id: Optional[str] = None,
                 deploy_pipeline_stages: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageResult']] = None,
                 display_name: Optional[str] = None):
        if deploy_environment_id is not None:
            pulumi.set(__self__, "deploy_environment_id", deploy_environment_id)
        if deploy_pipeline_stages is not None:
            pulumi.set(__self__, "deploy_pipeline_stages", deploy_pipeline_stages)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployEnvironmentId")
    def deploy_environment_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_environment_id")

    @property
    @pulumi.getter(name="deployPipelineStages")
    def deploy_pipeline_stages(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageResult']]:
        return pulumi.get(self, "deploy_pipeline_stages")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployPipelineEnvironmentItemDeployPipelineStageItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 display_name: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeployStageOverrideArgumentItemResult(dict):
    def __init__(__self__, *,
                 deploy_stage_id: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if deploy_stage_id is not None:
            pulumi.set(__self__, "deploy_stage_id", deploy_stage_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="deployStageId")
    def deploy_stage_id(self) -> Optional[str]:
        return pulumi.get(self, "deploy_stage_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeploymentArgumentResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentArgumentItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDeploymentsDeploymentCollectionItemDeploymentArgumentItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeploymentArgumentItemResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeploymentsDeploymentCollectionItemDeploymentExecutionProgressResult(dict):
    def __init__(__self__, *,
                 deploy_stage_execution_progress: Optional[Mapping[str, Any]] = None,
                 time_finished: Optional[str] = None,
                 time_started: Optional[str] = None):
        if deploy_stage_execution_progress is not None:
            pulumi.set(__self__, "deploy_stage_execution_progress", deploy_stage_execution_progress)
        if time_finished is not None:
            pulumi.set(__self__, "time_finished", time_finished)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter(name="deployStageExecutionProgress")
    def deploy_stage_execution_progress(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "deploy_stage_execution_progress")

    @property
    @pulumi.getter(name="timeFinished")
    def time_finished(self) -> Optional[str]:
        return pulumi.get(self, "time_finished")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetDeploymentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectNotificationConfigResult(dict):
    def __init__(__self__, *,
                 topic_id: Optional[str] = None):
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetProjectsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetProjectsProjectCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetProjectsProjectCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetProjectsProjectCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetProjectsProjectCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 namespace: Optional[str] = None,
                 notification_configs: Optional[Sequence['outputs.GetProjectsProjectCollectionItemNotificationConfigResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if notification_configs is not None:
            pulumi.set(__self__, "notification_configs", notification_configs)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="notificationConfigs")
    def notification_configs(self) -> Optional[Sequence['outputs.GetProjectsProjectCollectionItemNotificationConfigResult']]:
        return pulumi.get(self, "notification_configs")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetProjectsProjectCollectionItemNotificationConfigResult(dict):
    def __init__(__self__, *,
                 topic_id: Optional[str] = None):
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[str]:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class GetRepoFileLineLineResult(dict):
    def __init__(__self__, *,
                 line_content: Optional[str] = None,
                 line_number: Optional[int] = None):
        if line_content is not None:
            pulumi.set(__self__, "line_content", line_content)
        if line_number is not None:
            pulumi.set(__self__, "line_number", line_number)

    @property
    @pulumi.getter(name="lineContent")
    def line_content(self) -> Optional[str]:
        return pulumi.get(self, "line_content")

    @property
    @pulumi.getter(name="lineNumber")
    def line_number(self) -> Optional[int]:
        return pulumi.get(self, "line_number")


@pulumi.output_type
class GetRepositoriesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRepositoriesRepositoryCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRepositoriesRepositoryCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRepositoriesRepositoryCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRepositoriesRepositoryCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 project_id: str,
                 repository_type: str,
                 branch_count: Optional[int] = None,
                 commit_count: Optional[int] = None,
                 compartment_id: Optional[str] = None,
                 default_branch: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 http_url: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 mirror_repository_config: Optional['outputs.GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigResult'] = None,
                 namespace: Optional[str] = None,
                 project_name: Optional[str] = None,
                 size_in_bytes: Optional[str] = None,
                 ssh_url: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trigger_build_events: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "repository_type", repository_type)
        if branch_count is not None:
            pulumi.set(__self__, "branch_count", branch_count)
        if commit_count is not None:
            pulumi.set(__self__, "commit_count", commit_count)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if http_url is not None:
            pulumi.set(__self__, "http_url", http_url)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if mirror_repository_config is not None:
            pulumi.set(__self__, "mirror_repository_config", mirror_repository_config)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if ssh_url is not None:
            pulumi.set(__self__, "ssh_url", ssh_url)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trigger_build_events is not None:
            pulumi.set(__self__, "trigger_build_events", trigger_build_events)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="repositoryType")
    def repository_type(self) -> str:
        return pulumi.get(self, "repository_type")

    @property
    @pulumi.getter(name="branchCount")
    def branch_count(self) -> Optional[int]:
        return pulumi.get(self, "branch_count")

    @property
    @pulumi.getter(name="commitCount")
    def commit_count(self) -> Optional[int]:
        return pulumi.get(self, "commit_count")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[str]:
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> Optional[str]:
        return pulumi.get(self, "http_url")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="mirrorRepositoryConfig")
    def mirror_repository_config(self) -> Optional['outputs.GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigResult']:
        return pulumi.get(self, "mirror_repository_config")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="sshUrl")
    def ssh_url(self) -> Optional[str]:
        return pulumi.get(self, "ssh_url")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="triggerBuildEvents")
    def trigger_build_events(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "trigger_build_events")


@pulumi.output_type
class GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigResult(dict):
    def __init__(__self__, *,
                 connector_id: Optional[str] = None,
                 repository_url: Optional[str] = None,
                 trigger_schedule: Optional['outputs.GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerScheduleResult'] = None):
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if trigger_schedule is not None:
            pulumi.set(__self__, "trigger_schedule", trigger_schedule)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="triggerSchedule")
    def trigger_schedule(self) -> Optional['outputs.GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerScheduleResult']:
        return pulumi.get(self, "trigger_schedule")


@pulumi.output_type
class GetRepositoriesRepositoryCollectionItemMirrorRepositoryConfigTriggerScheduleResult(dict):
    def __init__(__self__, *,
                 schedule_type: str,
                 custom_schedule: Optional[str] = None):
        pulumi.set(__self__, "schedule_type", schedule_type)
        if custom_schedule is not None:
            pulumi.set(__self__, "custom_schedule", custom_schedule)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="customSchedule")
    def custom_schedule(self) -> Optional[str]:
        return pulumi.get(self, "custom_schedule")


@pulumi.output_type
class GetRepositoryAuthorItemResult(dict):
    def __init__(__self__, *,
                 author_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None):
        if author_name is not None:
            pulumi.set(__self__, "author_name", author_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)

    @property
    @pulumi.getter(name="authorName")
    def author_name(self) -> Optional[str]:
        return pulumi.get(self, "author_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")


@pulumi.output_type
class GetRepositoryAuthorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRepositoryAuthorsRepositoryAuthorCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRepositoryAuthorsRepositoryAuthorCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRepositoryAuthorsRepositoryAuthorCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRepositoryAuthorsRepositoryAuthorCollectionItemResult(dict):
    def __init__(__self__, *,
                 author_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None):
        if author_name is not None:
            pulumi.set(__self__, "author_name", author_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)

    @property
    @pulumi.getter(name="authorName")
    def author_name(self) -> Optional[str]:
        return pulumi.get(self, "author_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")


@pulumi.output_type
class GetRepositoryCommitsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRepositoryCommitsRepositoryCommitCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRepositoryCommitsRepositoryCommitCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRepositoryCommitsRepositoryCommitCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRepositoryCommitsRepositoryCommitCollectionItemResult(dict):
    def __init__(__self__, *,
                 author_email: Optional[str] = None,
                 author_name: Optional[str] = None,
                 commit_id: Optional[str] = None,
                 commit_message: Optional[str] = None,
                 committer_email: Optional[str] = None,
                 committer_name: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 parent_commit_ids: Optional[Sequence[str]] = None,
                 time_created: Optional[str] = None,
                 tree_id: Optional[str] = None):
        if author_email is not None:
            pulumi.set(__self__, "author_email", author_email)
        if author_name is not None:
            pulumi.set(__self__, "author_name", author_name)
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if commit_message is not None:
            pulumi.set(__self__, "commit_message", commit_message)
        if committer_email is not None:
            pulumi.set(__self__, "committer_email", committer_email)
        if committer_name is not None:
            pulumi.set(__self__, "committer_name", committer_name)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if parent_commit_ids is not None:
            pulumi.set(__self__, "parent_commit_ids", parent_commit_ids)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if tree_id is not None:
            pulumi.set(__self__, "tree_id", tree_id)

    @property
    @pulumi.getter(name="authorEmail")
    def author_email(self) -> Optional[str]:
        return pulumi.get(self, "author_email")

    @property
    @pulumi.getter(name="authorName")
    def author_name(self) -> Optional[str]:
        return pulumi.get(self, "author_name")

    @property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[str]:
        return pulumi.get(self, "commit_id")

    @property
    @pulumi.getter(name="commitMessage")
    def commit_message(self) -> Optional[str]:
        return pulumi.get(self, "commit_message")

    @property
    @pulumi.getter(name="committerEmail")
    def committer_email(self) -> Optional[str]:
        return pulumi.get(self, "committer_email")

    @property
    @pulumi.getter(name="committerName")
    def committer_name(self) -> Optional[str]:
        return pulumi.get(self, "committer_name")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="parentCommitIds")
    def parent_commit_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "parent_commit_ids")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="treeId")
    def tree_id(self) -> Optional[str]:
        return pulumi.get(self, "tree_id")


@pulumi.output_type
class GetRepositoryDiffChangeResult(dict):
    def __init__(__self__, *,
                 base_line: Optional[int] = None,
                 base_span: Optional[int] = None,
                 diff_sections: Optional[Sequence['outputs.GetRepositoryDiffChangeDiffSectionResult']] = None,
                 target_line: Optional[int] = None,
                 target_span: Optional[int] = None):
        if base_line is not None:
            pulumi.set(__self__, "base_line", base_line)
        if base_span is not None:
            pulumi.set(__self__, "base_span", base_span)
        if diff_sections is not None:
            pulumi.set(__self__, "diff_sections", diff_sections)
        if target_line is not None:
            pulumi.set(__self__, "target_line", target_line)
        if target_span is not None:
            pulumi.set(__self__, "target_span", target_span)

    @property
    @pulumi.getter(name="baseLine")
    def base_line(self) -> Optional[int]:
        return pulumi.get(self, "base_line")

    @property
    @pulumi.getter(name="baseSpan")
    def base_span(self) -> Optional[int]:
        return pulumi.get(self, "base_span")

    @property
    @pulumi.getter(name="diffSections")
    def diff_sections(self) -> Optional[Sequence['outputs.GetRepositoryDiffChangeDiffSectionResult']]:
        return pulumi.get(self, "diff_sections")

    @property
    @pulumi.getter(name="targetLine")
    def target_line(self) -> Optional[int]:
        return pulumi.get(self, "target_line")

    @property
    @pulumi.getter(name="targetSpan")
    def target_span(self) -> Optional[int]:
        return pulumi.get(self, "target_span")


@pulumi.output_type
class GetRepositoryDiffChangeDiffSectionResult(dict):
    def __init__(__self__, *,
                 lines: Optional[Sequence['outputs.GetRepositoryDiffChangeDiffSectionLineResult']] = None,
                 type: Optional[str] = None):
        if lines is not None:
            pulumi.set(__self__, "lines", lines)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def lines(self) -> Optional[Sequence['outputs.GetRepositoryDiffChangeDiffSectionLineResult']]:
        return pulumi.get(self, "lines")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRepositoryDiffChangeDiffSectionLineResult(dict):
    def __init__(__self__, *,
                 base_line: Optional[int] = None,
                 conflict_marker: Optional[str] = None,
                 line_content: Optional[str] = None,
                 target_line: Optional[int] = None):
        if base_line is not None:
            pulumi.set(__self__, "base_line", base_line)
        if conflict_marker is not None:
            pulumi.set(__self__, "conflict_marker", conflict_marker)
        if line_content is not None:
            pulumi.set(__self__, "line_content", line_content)
        if target_line is not None:
            pulumi.set(__self__, "target_line", target_line)

    @property
    @pulumi.getter(name="baseLine")
    def base_line(self) -> Optional[int]:
        return pulumi.get(self, "base_line")

    @property
    @pulumi.getter(name="conflictMarker")
    def conflict_marker(self) -> Optional[str]:
        return pulumi.get(self, "conflict_marker")

    @property
    @pulumi.getter(name="lineContent")
    def line_content(self) -> Optional[str]:
        return pulumi.get(self, "line_content")

    @property
    @pulumi.getter(name="targetLine")
    def target_line(self) -> Optional[int]:
        return pulumi.get(self, "target_line")


@pulumi.output_type
class GetRepositoryDiffsDiffCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRepositoryDiffsDiffCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRepositoryDiffsDiffCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRepositoryDiffsDiffCollectionItemResult(dict):
    def __init__(__self__, *,
                 are_conflicts_in_file: Optional[bool] = None,
                 changes: Optional[Sequence['outputs.GetRepositoryDiffsDiffCollectionItemChangeResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 is_binary: Optional[bool] = None,
                 is_large: Optional[bool] = None,
                 new_id: Optional[str] = None,
                 new_path: Optional[str] = None,
                 old_id: Optional[str] = None,
                 old_path: Optional[str] = None):
        if are_conflicts_in_file is not None:
            pulumi.set(__self__, "are_conflicts_in_file", are_conflicts_in_file)
        if changes is not None:
            pulumi.set(__self__, "changes", changes)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_binary is not None:
            pulumi.set(__self__, "is_binary", is_binary)
        if is_large is not None:
            pulumi.set(__self__, "is_large", is_large)
        if new_id is not None:
            pulumi.set(__self__, "new_id", new_id)
        if new_path is not None:
            pulumi.set(__self__, "new_path", new_path)
        if old_id is not None:
            pulumi.set(__self__, "old_id", old_id)
        if old_path is not None:
            pulumi.set(__self__, "old_path", old_path)

    @property
    @pulumi.getter(name="areConflictsInFile")
    def are_conflicts_in_file(self) -> Optional[bool]:
        return pulumi.get(self, "are_conflicts_in_file")

    @property
    @pulumi.getter
    def changes(self) -> Optional[Sequence['outputs.GetRepositoryDiffsDiffCollectionItemChangeResult']]:
        return pulumi.get(self, "changes")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isBinary")
    def is_binary(self) -> Optional[bool]:
        return pulumi.get(self, "is_binary")

    @property
    @pulumi.getter(name="isLarge")
    def is_large(self) -> Optional[bool]:
        return pulumi.get(self, "is_large")

    @property
    @pulumi.getter(name="newId")
    def new_id(self) -> Optional[str]:
        return pulumi.get(self, "new_id")

    @property
    @pulumi.getter(name="newPath")
    def new_path(self) -> Optional[str]:
        return pulumi.get(self, "new_path")

    @property
    @pulumi.getter(name="oldId")
    def old_id(self) -> Optional[str]:
        return pulumi.get(self, "old_id")

    @property
    @pulumi.getter(name="oldPath")
    def old_path(self) -> Optional[str]:
        return pulumi.get(self, "old_path")


@pulumi.output_type
class GetRepositoryDiffsDiffCollectionItemChangeResult(dict):
    def __init__(__self__, *,
                 base_line: Optional[int] = None,
                 base_span: Optional[int] = None,
                 diff_sections: Optional[Sequence['outputs.GetRepositoryDiffsDiffCollectionItemChangeDiffSectionResult']] = None,
                 target_line: Optional[int] = None,
                 target_span: Optional[int] = None):
        if base_line is not None:
            pulumi.set(__self__, "base_line", base_line)
        if base_span is not None:
            pulumi.set(__self__, "base_span", base_span)
        if diff_sections is not None:
            pulumi.set(__self__, "diff_sections", diff_sections)
        if target_line is not None:
            pulumi.set(__self__, "target_line", target_line)
        if target_span is not None:
            pulumi.set(__self__, "target_span", target_span)

    @property
    @pulumi.getter(name="baseLine")
    def base_line(self) -> Optional[int]:
        return pulumi.get(self, "base_line")

    @property
    @pulumi.getter(name="baseSpan")
    def base_span(self) -> Optional[int]:
        return pulumi.get(self, "base_span")

    @property
    @pulumi.getter(name="diffSections")
    def diff_sections(self) -> Optional[Sequence['outputs.GetRepositoryDiffsDiffCollectionItemChangeDiffSectionResult']]:
        return pulumi.get(self, "diff_sections")

    @property
    @pulumi.getter(name="targetLine")
    def target_line(self) -> Optional[int]:
        return pulumi.get(self, "target_line")

    @property
    @pulumi.getter(name="targetSpan")
    def target_span(self) -> Optional[int]:
        return pulumi.get(self, "target_span")


@pulumi.output_type
class GetRepositoryDiffsDiffCollectionItemChangeDiffSectionResult(dict):
    def __init__(__self__, *,
                 lines: Optional[Sequence['outputs.GetRepositoryDiffsDiffCollectionItemChangeDiffSectionLineResult']] = None,
                 type: Optional[str] = None):
        if lines is not None:
            pulumi.set(__self__, "lines", lines)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def lines(self) -> Optional[Sequence['outputs.GetRepositoryDiffsDiffCollectionItemChangeDiffSectionLineResult']]:
        return pulumi.get(self, "lines")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRepositoryDiffsDiffCollectionItemChangeDiffSectionLineResult(dict):
    def __init__(__self__, *,
                 base_line: Optional[int] = None,
                 conflict_marker: Optional[str] = None,
                 line_content: Optional[str] = None,
                 target_line: Optional[int] = None):
        if base_line is not None:
            pulumi.set(__self__, "base_line", base_line)
        if conflict_marker is not None:
            pulumi.set(__self__, "conflict_marker", conflict_marker)
        if line_content is not None:
            pulumi.set(__self__, "line_content", line_content)
        if target_line is not None:
            pulumi.set(__self__, "target_line", target_line)

    @property
    @pulumi.getter(name="baseLine")
    def base_line(self) -> Optional[int]:
        return pulumi.get(self, "base_line")

    @property
    @pulumi.getter(name="conflictMarker")
    def conflict_marker(self) -> Optional[str]:
        return pulumi.get(self, "conflict_marker")

    @property
    @pulumi.getter(name="lineContent")
    def line_content(self) -> Optional[str]:
        return pulumi.get(self, "line_content")

    @property
    @pulumi.getter(name="targetLine")
    def target_line(self) -> Optional[int]:
        return pulumi.get(self, "target_line")


@pulumi.output_type
class GetRepositoryDiffsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRepositoryFileDiffChangeResult(dict):
    def __init__(__self__, *,
                 base_line: Optional[int] = None,
                 base_span: Optional[int] = None,
                 diff_sections: Optional[Sequence['outputs.GetRepositoryFileDiffChangeDiffSectionResult']] = None,
                 target_line: Optional[int] = None,
                 target_span: Optional[int] = None):
        if base_line is not None:
            pulumi.set(__self__, "base_line", base_line)
        if base_span is not None:
            pulumi.set(__self__, "base_span", base_span)
        if diff_sections is not None:
            pulumi.set(__self__, "diff_sections", diff_sections)
        if target_line is not None:
            pulumi.set(__self__, "target_line", target_line)
        if target_span is not None:
            pulumi.set(__self__, "target_span", target_span)

    @property
    @pulumi.getter(name="baseLine")
    def base_line(self) -> Optional[int]:
        return pulumi.get(self, "base_line")

    @property
    @pulumi.getter(name="baseSpan")
    def base_span(self) -> Optional[int]:
        return pulumi.get(self, "base_span")

    @property
    @pulumi.getter(name="diffSections")
    def diff_sections(self) -> Optional[Sequence['outputs.GetRepositoryFileDiffChangeDiffSectionResult']]:
        return pulumi.get(self, "diff_sections")

    @property
    @pulumi.getter(name="targetLine")
    def target_line(self) -> Optional[int]:
        return pulumi.get(self, "target_line")

    @property
    @pulumi.getter(name="targetSpan")
    def target_span(self) -> Optional[int]:
        return pulumi.get(self, "target_span")


@pulumi.output_type
class GetRepositoryFileDiffChangeDiffSectionResult(dict):
    def __init__(__self__, *,
                 lines: Optional[Sequence['outputs.GetRepositoryFileDiffChangeDiffSectionLineResult']] = None,
                 type: Optional[str] = None):
        if lines is not None:
            pulumi.set(__self__, "lines", lines)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def lines(self) -> Optional[Sequence['outputs.GetRepositoryFileDiffChangeDiffSectionLineResult']]:
        return pulumi.get(self, "lines")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRepositoryFileDiffChangeDiffSectionLineResult(dict):
    def __init__(__self__, *,
                 base_line: Optional[int] = None,
                 conflict_marker: Optional[str] = None,
                 line_content: Optional[str] = None,
                 target_line: Optional[int] = None):
        if base_line is not None:
            pulumi.set(__self__, "base_line", base_line)
        if conflict_marker is not None:
            pulumi.set(__self__, "conflict_marker", conflict_marker)
        if line_content is not None:
            pulumi.set(__self__, "line_content", line_content)
        if target_line is not None:
            pulumi.set(__self__, "target_line", target_line)

    @property
    @pulumi.getter(name="baseLine")
    def base_line(self) -> Optional[int]:
        return pulumi.get(self, "base_line")

    @property
    @pulumi.getter(name="conflictMarker")
    def conflict_marker(self) -> Optional[str]:
        return pulumi.get(self, "conflict_marker")

    @property
    @pulumi.getter(name="lineContent")
    def line_content(self) -> Optional[str]:
        return pulumi.get(self, "line_content")

    @property
    @pulumi.getter(name="targetLine")
    def target_line(self) -> Optional[int]:
        return pulumi.get(self, "target_line")


@pulumi.output_type
class GetRepositoryFileLineLineResult(dict):
    def __init__(__self__, *,
                 line_content: Optional[str] = None,
                 line_number: Optional[int] = None):
        if line_content is not None:
            pulumi.set(__self__, "line_content", line_content)
        if line_number is not None:
            pulumi.set(__self__, "line_number", line_number)

    @property
    @pulumi.getter(name="lineContent")
    def line_content(self) -> Optional[str]:
        return pulumi.get(self, "line_content")

    @property
    @pulumi.getter(name="lineNumber")
    def line_number(self) -> Optional[int]:
        return pulumi.get(self, "line_number")


@pulumi.output_type
class GetRepositoryMirrorRecordsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRepositoryMirrorRecordsRepositoryMirrorRecordCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRepositoryMirrorRecordsRepositoryMirrorRecordCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRepositoryMirrorRecordsRepositoryMirrorRecordCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRepositoryMirrorRecordsRepositoryMirrorRecordCollectionItemResult(dict):
    def __init__(__self__, *,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 mirror_status: Optional[str] = None,
                 time_completed: Optional[str] = None,
                 time_enqueued: Optional[str] = None,
                 time_started: Optional[str] = None,
                 work_request_id: Optional[str] = None):
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if mirror_status is not None:
            pulumi.set(__self__, "mirror_status", mirror_status)
        if time_completed is not None:
            pulumi.set(__self__, "time_completed", time_completed)
        if time_enqueued is not None:
            pulumi.set(__self__, "time_enqueued", time_enqueued)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if work_request_id is not None:
            pulumi.set(__self__, "work_request_id", work_request_id)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="mirrorStatus")
    def mirror_status(self) -> Optional[str]:
        return pulumi.get(self, "mirror_status")

    @property
    @pulumi.getter(name="timeCompleted")
    def time_completed(self) -> Optional[str]:
        return pulumi.get(self, "time_completed")

    @property
    @pulumi.getter(name="timeEnqueued")
    def time_enqueued(self) -> Optional[str]:
        return pulumi.get(self, "time_enqueued")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="workRequestId")
    def work_request_id(self) -> Optional[str]:
        return pulumi.get(self, "work_request_id")


@pulumi.output_type
class GetRepositoryMirrorRepositoryConfigResult(dict):
    def __init__(__self__, *,
                 connector_id: Optional[str] = None,
                 repository_url: Optional[str] = None,
                 trigger_schedules: Optional[Sequence['outputs.GetRepositoryMirrorRepositoryConfigTriggerScheduleResult']] = None):
        if connector_id is not None:
            pulumi.set(__self__, "connector_id", connector_id)
        if repository_url is not None:
            pulumi.set(__self__, "repository_url", repository_url)
        if trigger_schedules is not None:
            pulumi.set(__self__, "trigger_schedules", trigger_schedules)

    @property
    @pulumi.getter(name="connectorId")
    def connector_id(self) -> Optional[str]:
        return pulumi.get(self, "connector_id")

    @property
    @pulumi.getter(name="repositoryUrl")
    def repository_url(self) -> Optional[str]:
        return pulumi.get(self, "repository_url")

    @property
    @pulumi.getter(name="triggerSchedules")
    def trigger_schedules(self) -> Optional[Sequence['outputs.GetRepositoryMirrorRepositoryConfigTriggerScheduleResult']]:
        return pulumi.get(self, "trigger_schedules")


@pulumi.output_type
class GetRepositoryMirrorRepositoryConfigTriggerScheduleResult(dict):
    def __init__(__self__, *,
                 custom_schedule: Optional[str] = None,
                 schedule_type: Optional[str] = None):
        if custom_schedule is not None:
            pulumi.set(__self__, "custom_schedule", custom_schedule)
        if schedule_type is not None:
            pulumi.set(__self__, "schedule_type", schedule_type)

    @property
    @pulumi.getter(name="customSchedule")
    def custom_schedule(self) -> Optional[str]:
        return pulumi.get(self, "custom_schedule")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> Optional[str]:
        return pulumi.get(self, "schedule_type")


@pulumi.output_type
class GetRepositoryPathItemResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 sha: Optional[str] = None,
                 size_in_bytes: Optional[str] = None,
                 submodule_git_url: Optional[str] = None,
                 type: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if sha is not None:
            pulumi.set(__self__, "sha", sha)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if submodule_git_url is not None:
            pulumi.set(__self__, "submodule_git_url", submodule_git_url)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def sha(self) -> Optional[str]:
        return pulumi.get(self, "sha")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="submoduleGitUrl")
    def submodule_git_url(self) -> Optional[str]:
        return pulumi.get(self, "submodule_git_url")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRepositoryPathsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRepositoryPathsRepositoryPathCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRepositoryPathsRepositoryPathCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRepositoryPathsRepositoryPathCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRepositoryPathsRepositoryPathCollectionItemResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 sha: Optional[str] = None,
                 size_in_bytes: Optional[str] = None,
                 submodule_git_url: Optional[str] = None,
                 type: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if sha is not None:
            pulumi.set(__self__, "sha", sha)
        if size_in_bytes is not None:
            pulumi.set(__self__, "size_in_bytes", size_in_bytes)
        if submodule_git_url is not None:
            pulumi.set(__self__, "submodule_git_url", submodule_git_url)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def sha(self) -> Optional[str]:
        return pulumi.get(self, "sha")

    @property
    @pulumi.getter(name="sizeInBytes")
    def size_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "size_in_bytes")

    @property
    @pulumi.getter(name="submoduleGitUrl")
    def submodule_git_url(self) -> Optional[str]:
        return pulumi.get(self, "submodule_git_url")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRepositoryRefsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRepositoryRefsRepositoryRefCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetRepositoryRefsRepositoryRefCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetRepositoryRefsRepositoryRefCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetRepositoryRefsRepositoryRefCollectionItemResult(dict):
    def __init__(__self__, *,
                 commit_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 full_ref_name: Optional[str] = None,
                 id: Optional[str] = None,
                 object_id: Optional[str] = None,
                 ref_name: Optional[str] = None,
                 ref_type: Optional[str] = None,
                 repository_id: Optional[str] = None):
        if commit_id is not None:
            pulumi.set(__self__, "commit_id", commit_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if full_ref_name is not None:
            pulumi.set(__self__, "full_ref_name", full_ref_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if ref_name is not None:
            pulumi.set(__self__, "ref_name", ref_name)
        if ref_type is not None:
            pulumi.set(__self__, "ref_type", ref_type)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)

    @property
    @pulumi.getter(name="commitId")
    def commit_id(self) -> Optional[str]:
        return pulumi.get(self, "commit_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="fullRefName")
    def full_ref_name(self) -> Optional[str]:
        return pulumi.get(self, "full_ref_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[str]:
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="refName")
    def ref_name(self) -> Optional[str]:
        return pulumi.get(self, "ref_name")

    @property
    @pulumi.getter(name="refType")
    def ref_type(self) -> Optional[str]:
        return pulumi.get(self, "ref_type")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")


@pulumi.output_type
class GetTriggerActionResult(dict):
    def __init__(__self__, *,
                 build_pipeline_id: Optional[str] = None,
                 filters: Optional[Sequence['outputs.GetTriggerActionFilterResult']] = None,
                 type: Optional[str] = None):
        if build_pipeline_id is not None:
            pulumi.set(__self__, "build_pipeline_id", build_pipeline_id)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="buildPipelineId")
    def build_pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "build_pipeline_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetTriggerActionFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTriggerActionFilterResult(dict):
    def __init__(__self__, *,
                 events: Optional[Sequence[str]] = None,
                 excludes: Optional[Sequence['outputs.GetTriggerActionFilterExcludeResult']] = None,
                 includes: Optional[Sequence['outputs.GetTriggerActionFilterIncludeResult']] = None,
                 trigger_source: Optional[str] = None):
        if events is not None:
            pulumi.set(__self__, "events", events)
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def excludes(self) -> Optional[Sequence['outputs.GetTriggerActionFilterExcludeResult']]:
        return pulumi.get(self, "excludes")

    @property
    @pulumi.getter
    def includes(self) -> Optional[Sequence['outputs.GetTriggerActionFilterIncludeResult']]:
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[str]:
        return pulumi.get(self, "trigger_source")


@pulumi.output_type
class GetTriggerActionFilterExcludeResult(dict):
    def __init__(__self__, *,
                 file_filters: Optional[Sequence['outputs.GetTriggerActionFilterExcludeFileFilterResult']] = None):
        if file_filters is not None:
            pulumi.set(__self__, "file_filters", file_filters)

    @property
    @pulumi.getter(name="fileFilters")
    def file_filters(self) -> Optional[Sequence['outputs.GetTriggerActionFilterExcludeFileFilterResult']]:
        return pulumi.get(self, "file_filters")


@pulumi.output_type
class GetTriggerActionFilterExcludeFileFilterResult(dict):
    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


@pulumi.output_type
class GetTriggerActionFilterIncludeResult(dict):
    def __init__(__self__, *,
                 base_ref: Optional[str] = None,
                 file_filters: Optional[Sequence['outputs.GetTriggerActionFilterIncludeFileFilterResult']] = None,
                 head_ref: Optional[str] = None,
                 repository_name: Optional[str] = None):
        if base_ref is not None:
            pulumi.set(__self__, "base_ref", base_ref)
        if file_filters is not None:
            pulumi.set(__self__, "file_filters", file_filters)
        if head_ref is not None:
            pulumi.set(__self__, "head_ref", head_ref)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)

    @property
    @pulumi.getter(name="baseRef")
    def base_ref(self) -> Optional[str]:
        return pulumi.get(self, "base_ref")

    @property
    @pulumi.getter(name="fileFilters")
    def file_filters(self) -> Optional[Sequence['outputs.GetTriggerActionFilterIncludeFileFilterResult']]:
        return pulumi.get(self, "file_filters")

    @property
    @pulumi.getter(name="headRef")
    def head_ref(self) -> Optional[str]:
        return pulumi.get(self, "head_ref")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[str]:
        return pulumi.get(self, "repository_name")


@pulumi.output_type
class GetTriggerActionFilterIncludeFileFilterResult(dict):
    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


@pulumi.output_type
class GetTriggersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTriggersTriggerCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetTriggersTriggerCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetTriggersTriggerCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetTriggersTriggerCollectionItemResult(dict):
    def __init__(__self__, *,
                 actions: Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionResult']] = None,
                 compartment_id: Optional[str] = None,
                 connection_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 description: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 project_id: Optional[str] = None,
                 repository_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 trigger_source: Optional[str] = None,
                 trigger_url: Optional[str] = None):
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if repository_id is not None:
            pulumi.set(__self__, "repository_id", repository_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)
        if trigger_url is not None:
            pulumi.set(__self__, "trigger_url", trigger_url)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionResult']]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[str]:
        return pulumi.get(self, "connection_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="repositoryId")
    def repository_id(self) -> Optional[str]:
        return pulumi.get(self, "repository_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[str]:
        return pulumi.get(self, "trigger_source")

    @property
    @pulumi.getter(name="triggerUrl")
    def trigger_url(self) -> Optional[str]:
        return pulumi.get(self, "trigger_url")


@pulumi.output_type
class GetTriggersTriggerCollectionItemActionResult(dict):
    def __init__(__self__, *,
                 build_pipeline_id: Optional[str] = None,
                 filters: Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterResult']] = None,
                 type: Optional[str] = None):
        if build_pipeline_id is not None:
            pulumi.set(__self__, "build_pipeline_id", build_pipeline_id)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="buildPipelineId")
    def build_pipeline_id(self) -> Optional[str]:
        return pulumi.get(self, "build_pipeline_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTriggersTriggerCollectionItemActionFilterResult(dict):
    def __init__(__self__, *,
                 events: Optional[Sequence[str]] = None,
                 excludes: Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterExcludeResult']] = None,
                 includes: Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterIncludeResult']] = None,
                 trigger_source: Optional[str] = None):
        if events is not None:
            pulumi.set(__self__, "events", events)
        if excludes is not None:
            pulumi.set(__self__, "excludes", excludes)
        if includes is not None:
            pulumi.set(__self__, "includes", includes)
        if trigger_source is not None:
            pulumi.set(__self__, "trigger_source", trigger_source)

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def excludes(self) -> Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterExcludeResult']]:
        return pulumi.get(self, "excludes")

    @property
    @pulumi.getter
    def includes(self) -> Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterIncludeResult']]:
        return pulumi.get(self, "includes")

    @property
    @pulumi.getter(name="triggerSource")
    def trigger_source(self) -> Optional[str]:
        return pulumi.get(self, "trigger_source")


@pulumi.output_type
class GetTriggersTriggerCollectionItemActionFilterExcludeResult(dict):
    def __init__(__self__, *,
                 file_filters: Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterExcludeFileFilterResult']] = None):
        if file_filters is not None:
            pulumi.set(__self__, "file_filters", file_filters)

    @property
    @pulumi.getter(name="fileFilters")
    def file_filters(self) -> Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterExcludeFileFilterResult']]:
        return pulumi.get(self, "file_filters")


@pulumi.output_type
class GetTriggersTriggerCollectionItemActionFilterExcludeFileFilterResult(dict):
    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


@pulumi.output_type
class GetTriggersTriggerCollectionItemActionFilterIncludeResult(dict):
    def __init__(__self__, *,
                 base_ref: Optional[str] = None,
                 file_filters: Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterIncludeFileFilterResult']] = None,
                 head_ref: Optional[str] = None,
                 repository_name: Optional[str] = None):
        if base_ref is not None:
            pulumi.set(__self__, "base_ref", base_ref)
        if file_filters is not None:
            pulumi.set(__self__, "file_filters", file_filters)
        if head_ref is not None:
            pulumi.set(__self__, "head_ref", head_ref)
        if repository_name is not None:
            pulumi.set(__self__, "repository_name", repository_name)

    @property
    @pulumi.getter(name="baseRef")
    def base_ref(self) -> Optional[str]:
        return pulumi.get(self, "base_ref")

    @property
    @pulumi.getter(name="fileFilters")
    def file_filters(self) -> Optional[Sequence['outputs.GetTriggersTriggerCollectionItemActionFilterIncludeFileFilterResult']]:
        return pulumi.get(self, "file_filters")

    @property
    @pulumi.getter(name="headRef")
    def head_ref(self) -> Optional[str]:
        return pulumi.get(self, "head_ref")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> Optional[str]:
        return pulumi.get(self, "repository_name")


@pulumi.output_type
class GetTriggersTriggerCollectionItemActionFilterIncludeFileFilterResult(dict):
    def __init__(__self__, *,
                 file_paths: Optional[Sequence[str]] = None):
        if file_paths is not None:
            pulumi.set(__self__, "file_paths", file_paths)

    @property
    @pulumi.getter(name="filePaths")
    def file_paths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "file_paths")


