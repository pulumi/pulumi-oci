# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DrPlanExecutionExecutionOptionsArgs',
    'DrPlanExecutionGroupExecutionArgs',
    'DrPlanExecutionGroupExecutionStepExecutionArgs',
    'DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs',
    'DrPlanExecutionLogLocationArgs',
    'DrPlanPlanGroupArgs',
    'DrPlanPlanGroupStepArgs',
    'DrPlanPlanGroupStepUserDefinedStepArgs',
    'DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs',
    'DrProtectionGroupAssociationArgs',
    'DrProtectionGroupLogLocationArgs',
    'DrProtectionGroupMemberArgs',
    'DrProtectionGroupMemberBackendSetMappingArgs',
    'DrProtectionGroupMemberBlockVolumeOperationArgs',
    'DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs',
    'DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs',
    'DrProtectionGroupMemberExportMappingArgs',
    'DrProtectionGroupMemberFileSystemOperationArgs',
    'DrProtectionGroupMemberFileSystemOperationMountDetailsArgs',
    'DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs',
    'DrProtectionGroupMemberVnicMappingArgs',
    'GetDrPlanExecutionsFilterArgs',
    'GetDrPlansFilterArgs',
    'GetDrProtectionGroupsFilterArgs',
]

@pulumi.input_type
class DrPlanExecutionExecutionOptionsArgs:
    def __init__(__self__, *,
                 plan_execution_type: pulumi.Input[str],
                 are_prechecks_enabled: Optional[pulumi.Input[bool]] = None,
                 are_warnings_ignored: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] plan_execution_type: The type of the plan execution.
        :param pulumi.Input[bool] are_prechecks_enabled: A flag indicating whether prechecks should be executed before the plan execution.  Example: `false`
        :param pulumi.Input[bool] are_warnings_ignored: A flag indicating whether warnings should be ignored during the switchover precheck.  Example: `true`
        """
        DrPlanExecutionExecutionOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            plan_execution_type=plan_execution_type,
            are_prechecks_enabled=are_prechecks_enabled,
            are_warnings_ignored=are_warnings_ignored,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             plan_execution_type: Optional[pulumi.Input[str]] = None,
             are_prechecks_enabled: Optional[pulumi.Input[bool]] = None,
             are_warnings_ignored: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if plan_execution_type is None and 'planExecutionType' in kwargs:
            plan_execution_type = kwargs['planExecutionType']
        if plan_execution_type is None:
            raise TypeError("Missing 'plan_execution_type' argument")
        if are_prechecks_enabled is None and 'arePrechecksEnabled' in kwargs:
            are_prechecks_enabled = kwargs['arePrechecksEnabled']
        if are_warnings_ignored is None and 'areWarningsIgnored' in kwargs:
            are_warnings_ignored = kwargs['areWarningsIgnored']

        _setter("plan_execution_type", plan_execution_type)
        if are_prechecks_enabled is not None:
            _setter("are_prechecks_enabled", are_prechecks_enabled)
        if are_warnings_ignored is not None:
            _setter("are_warnings_ignored", are_warnings_ignored)

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> pulumi.Input[str]:
        """
        The type of the plan execution.
        """
        return pulumi.get(self, "plan_execution_type")

    @plan_execution_type.setter
    def plan_execution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_execution_type", value)

    @property
    @pulumi.getter(name="arePrechecksEnabled")
    def are_prechecks_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether prechecks should be executed before the plan execution.  Example: `false`
        """
        return pulumi.get(self, "are_prechecks_enabled")

    @are_prechecks_enabled.setter
    def are_prechecks_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_prechecks_enabled", value)

    @property
    @pulumi.getter(name="areWarningsIgnored")
    def are_warnings_ignored(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether warnings should be ignored during the switchover precheck.  Example: `true`
        """
        return pulumi.get(self, "are_warnings_ignored")

    @are_warnings_ignored.setter
    def are_warnings_ignored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_warnings_ignored", value)


@pulumi.input_type
class DrPlanExecutionGroupExecutionArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 execution_duration_in_sec: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_details: Optional[pulumi.Input[str]] = None,
                 step_executions: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionArgs']]]] = None,
                 time_ended: Optional[pulumi.Input[str]] = None,
                 time_started: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: (Updatable) The display name of the DR plan execution.  Example: `Execution - EBS Switchover PHX to IAD`
        :param pulumi.Input[int] execution_duration_in_sec: The total duration in seconds taken to complete the step execution.  Example: `35`
        :param pulumi.Input[str] group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param pulumi.Input[str] status: The status of the step execution.
        :param pulumi.Input[str] status_details: Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        :param pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionArgs']]] step_executions: A list of step executions in the group.
        :param pulumi.Input[str] time_ended: The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param pulumi.Input[str] time_started: The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param pulumi.Input[str] type: The group type.  Example: `BUILT_IN`
        """
        DrPlanExecutionGroupExecutionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            execution_duration_in_sec=execution_duration_in_sec,
            group_id=group_id,
            status=status,
            status_details=status_details,
            step_executions=step_executions,
            time_ended=time_ended,
            time_started=time_started,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[pulumi.Input[str]] = None,
             execution_duration_in_sec: Optional[pulumi.Input[int]] = None,
             group_id: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input[str]] = None,
             status_details: Optional[pulumi.Input[str]] = None,
             step_executions: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionArgs']]]] = None,
             time_ended: Optional[pulumi.Input[str]] = None,
             time_started: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if execution_duration_in_sec is None and 'executionDurationInSec' in kwargs:
            execution_duration_in_sec = kwargs['executionDurationInSec']
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if status_details is None and 'statusDetails' in kwargs:
            status_details = kwargs['statusDetails']
        if step_executions is None and 'stepExecutions' in kwargs:
            step_executions = kwargs['stepExecutions']
        if time_ended is None and 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']

        if display_name is not None:
            _setter("display_name", display_name)
        if execution_duration_in_sec is not None:
            _setter("execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            _setter("group_id", group_id)
        if status is not None:
            _setter("status", status)
        if status_details is not None:
            _setter("status_details", status_details)
        if step_executions is not None:
            _setter("step_executions", step_executions)
        if time_ended is not None:
            _setter("time_ended", time_ended)
        if time_started is not None:
            _setter("time_started", time_started)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The display name of the DR plan execution.  Example: `Execution - EBS Switchover PHX to IAD`
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[pulumi.Input[int]]:
        """
        The total duration in seconds taken to complete the step execution.  Example: `35`
        """
        return pulumi.get(self, "execution_duration_in_sec")

    @execution_duration_in_sec.setter
    def execution_duration_in_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "execution_duration_in_sec", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the step execution.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[str]]:
        """
        Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        """
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_details", value)

    @property
    @pulumi.getter(name="stepExecutions")
    def step_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionArgs']]]]:
        """
        A list of step executions in the group.
        """
        return pulumi.get(self, "step_executions")

    @step_executions.setter
    def step_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionArgs']]]]):
        pulumi.set(self, "step_executions", value)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_ended")

    @time_ended.setter
    def time_ended(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_ended", value)

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_started")

    @time_started.setter
    def time_started(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_started", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The group type.  Example: `BUILT_IN`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DrPlanExecutionGroupExecutionStepExecutionArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 execution_duration_in_sec: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 log_locations: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_details: Optional[pulumi.Input[str]] = None,
                 step_id: Optional[pulumi.Input[str]] = None,
                 time_ended: Optional[pulumi.Input[str]] = None,
                 time_started: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: (Updatable) The display name of the DR plan execution.  Example: `Execution - EBS Switchover PHX to IAD`
        :param pulumi.Input[int] execution_duration_in_sec: The total duration in seconds taken to complete the step execution.  Example: `35`
        :param pulumi.Input[str] group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs']]] log_locations: The details of an object storage log location for a DR protection group.
        :param pulumi.Input[str] status: The status of the step execution.
        :param pulumi.Input[str] status_details: Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        :param pulumi.Input[str] step_id: The unique id of the step. Must not be modified by user.  Example: `sgid1.step..uniqueID`
        :param pulumi.Input[str] time_ended: The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param pulumi.Input[str] time_started: The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param pulumi.Input[str] type: The group type.  Example: `BUILT_IN`
        """
        DrPlanExecutionGroupExecutionStepExecutionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            execution_duration_in_sec=execution_duration_in_sec,
            group_id=group_id,
            log_locations=log_locations,
            status=status,
            status_details=status_details,
            step_id=step_id,
            time_ended=time_ended,
            time_started=time_started,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[pulumi.Input[str]] = None,
             execution_duration_in_sec: Optional[pulumi.Input[int]] = None,
             group_id: Optional[pulumi.Input[str]] = None,
             log_locations: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs']]]] = None,
             status: Optional[pulumi.Input[str]] = None,
             status_details: Optional[pulumi.Input[str]] = None,
             step_id: Optional[pulumi.Input[str]] = None,
             time_ended: Optional[pulumi.Input[str]] = None,
             time_started: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if execution_duration_in_sec is None and 'executionDurationInSec' in kwargs:
            execution_duration_in_sec = kwargs['executionDurationInSec']
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if log_locations is None and 'logLocations' in kwargs:
            log_locations = kwargs['logLocations']
        if status_details is None and 'statusDetails' in kwargs:
            status_details = kwargs['statusDetails']
        if step_id is None and 'stepId' in kwargs:
            step_id = kwargs['stepId']
        if time_ended is None and 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']

        if display_name is not None:
            _setter("display_name", display_name)
        if execution_duration_in_sec is not None:
            _setter("execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            _setter("group_id", group_id)
        if log_locations is not None:
            _setter("log_locations", log_locations)
        if status is not None:
            _setter("status", status)
        if status_details is not None:
            _setter("status_details", status_details)
        if step_id is not None:
            _setter("step_id", step_id)
        if time_ended is not None:
            _setter("time_ended", time_ended)
        if time_started is not None:
            _setter("time_started", time_started)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The display name of the DR plan execution.  Example: `Execution - EBS Switchover PHX to IAD`
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[pulumi.Input[int]]:
        """
        The total duration in seconds taken to complete the step execution.  Example: `35`
        """
        return pulumi.get(self, "execution_duration_in_sec")

    @execution_duration_in_sec.setter
    def execution_duration_in_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "execution_duration_in_sec", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs']]]]:
        """
        The details of an object storage log location for a DR protection group.
        """
        return pulumi.get(self, "log_locations")

    @log_locations.setter
    def log_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs']]]]):
        pulumi.set(self, "log_locations", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the step execution.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[str]]:
        """
        Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        """
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_details", value)

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique id of the step. Must not be modified by user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "step_id")

    @step_id.setter
    def step_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "step_id", value)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_ended")

    @time_ended.setter
    def time_ended(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_ended", value)

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_started")

    @time_started.setter
    def time_started(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_started", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The group type.  Example: `BUILT_IN`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param pulumi.Input[str] namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param pulumi.Input[str] object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             object: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if bucket is not None:
            _setter("bucket", bucket)
        if namespace is not None:
            _setter("namespace", namespace)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class DrPlanExecutionLogLocationArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param pulumi.Input[str] namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param pulumi.Input[str] object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        DrPlanExecutionLogLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             object: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if bucket is not None:
            _setter("bucket", bucket)
        if namespace is not None:
            _setter("namespace", namespace)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class DrPlanPlanGroupArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: (Updatable) The display name of the DR plan being created.  Example: `EBS Switchover PHX to IAD`
        :param pulumi.Input[str] id: The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        :param pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepArgs']]] steps: The list of steps in the group.
        :param pulumi.Input[str] type: The type of DR plan to be created. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DrPlanPlanGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            id=id,
            steps=steps,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             steps: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepArgs']]]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']

        if display_name is not None:
            _setter("display_name", display_name)
        if id is not None:
            _setter("id", id)
        if steps is not None:
            _setter("steps", steps)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The display name of the DR plan being created.  Example: `EBS Switchover PHX to IAD`
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepArgs']]]]:
        """
        The list of steps in the group.
        """
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of DR plan to be created. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DrPlanPlanGroupStepArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 error_mode: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_defined_steps: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepArgs']]]] = None):
        """
        :param pulumi.Input[str] display_name: (Updatable) The display name of the DR plan being created.  Example: `EBS Switchover PHX to IAD`
        :param pulumi.Input[str] error_mode: The error mode for this step.
        :param pulumi.Input[str] group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param pulumi.Input[str] id: The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        :param pulumi.Input[bool] is_enabled: A flag indicating whether this step should be enabled for execution.  Example: `true`
        :param pulumi.Input[str] member_id: The OCID of the member associated with this step.  Example: `ocid1.database.oc1..uniqueID`
        :param pulumi.Input[int] timeout: The timeout in seconds for executing this step.  Example: `600`
        :param pulumi.Input[str] type: The type of DR plan to be created. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepArgs']]] user_defined_steps: The details for a user-defined step in a DR plan.
        """
        DrPlanPlanGroupStepArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            error_mode=error_mode,
            group_id=group_id,
            id=id,
            is_enabled=is_enabled,
            member_id=member_id,
            timeout=timeout,
            type=type,
            user_defined_steps=user_defined_steps,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[pulumi.Input[str]] = None,
             error_mode: Optional[pulumi.Input[str]] = None,
             group_id: Optional[pulumi.Input[str]] = None,
             id: Optional[pulumi.Input[str]] = None,
             is_enabled: Optional[pulumi.Input[bool]] = None,
             member_id: Optional[pulumi.Input[str]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             type: Optional[pulumi.Input[str]] = None,
             user_defined_steps: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if error_mode is None and 'errorMode' in kwargs:
            error_mode = kwargs['errorMode']
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if member_id is None and 'memberId' in kwargs:
            member_id = kwargs['memberId']
        if user_defined_steps is None and 'userDefinedSteps' in kwargs:
            user_defined_steps = kwargs['userDefinedSteps']

        if display_name is not None:
            _setter("display_name", display_name)
        if error_mode is not None:
            _setter("error_mode", error_mode)
        if group_id is not None:
            _setter("group_id", group_id)
        if id is not None:
            _setter("id", id)
        if is_enabled is not None:
            _setter("is_enabled", is_enabled)
        if member_id is not None:
            _setter("member_id", member_id)
        if timeout is not None:
            _setter("timeout", timeout)
        if type is not None:
            _setter("type", type)
        if user_defined_steps is not None:
            _setter("user_defined_steps", user_defined_steps)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The display name of the DR plan being created.  Example: `EBS Switchover PHX to IAD`
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="errorMode")
    def error_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The error mode for this step.
        """
        return pulumi.get(self, "error_mode")

    @error_mode.setter
    def error_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_mode", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A flag indicating whether this step should be enabled for execution.  Example: `true`
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the member associated with this step.  Example: `ocid1.database.oc1..uniqueID`
        """
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in seconds for executing this step.  Example: `600`
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of DR plan to be created. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userDefinedSteps")
    def user_defined_steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepArgs']]]]:
        """
        The details for a user-defined step in a DR plan.
        """
        return pulumi.get(self, "user_defined_steps")

    @user_defined_steps.setter
    def user_defined_steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepArgs']]]]):
        pulumi.set(self, "user_defined_steps", value)


@pulumi.input_type
class DrPlanPlanGroupStepUserDefinedStepArgs:
    def __init__(__self__, *,
                 function_id: Optional[pulumi.Input[str]] = None,
                 function_region: Optional[pulumi.Input[str]] = None,
                 object_storage_script_locations: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs']]]] = None,
                 request_body: Optional[pulumi.Input[str]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 run_on_instance_id: Optional[pulumi.Input[str]] = None,
                 run_on_instance_region: Optional[pulumi.Input[str]] = None,
                 script_command: Optional[pulumi.Input[str]] = None,
                 step_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] function_id: The OCID of function to be invoked.  Example: `ocid1.fnfunc.oc1..uniqueID`
        :param pulumi.Input[str] function_region: The region in which the function is deployed.  Example: `us-ashburn-1`
        :param pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs']]] object_storage_script_locations: The details of an object storage script location for a user-defined step in a DR plan.
        :param pulumi.Input[str] request_body: The request body for the function.  Example: `{ "FnParam1", "FnParam2" }`
        :param pulumi.Input[str] run_as_user: The userid on the instance to be used for executing the script or command.  Example: `opc`
        :param pulumi.Input[str] run_on_instance_id: The OCID of the instance on which this script or command should be executed.
        :param pulumi.Input[str] run_on_instance_region: The region of the instance where this script or command should be executed.  Example: `us-ashburn-1`
        :param pulumi.Input[str] script_command: The script name and arguments.  Example: `/usr/bin/python3 /home/opc/scripts/my_app_script.py arg1 arg2 arg3`
        :param pulumi.Input[str] step_type: The type of the user-defined step.
        """
        DrPlanPlanGroupStepUserDefinedStepArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_id=function_id,
            function_region=function_region,
            object_storage_script_locations=object_storage_script_locations,
            request_body=request_body,
            run_as_user=run_as_user,
            run_on_instance_id=run_on_instance_id,
            run_on_instance_region=run_on_instance_region,
            script_command=script_command,
            step_type=step_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_id: Optional[pulumi.Input[str]] = None,
             function_region: Optional[pulumi.Input[str]] = None,
             object_storage_script_locations: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs']]]] = None,
             request_body: Optional[pulumi.Input[str]] = None,
             run_as_user: Optional[pulumi.Input[str]] = None,
             run_on_instance_id: Optional[pulumi.Input[str]] = None,
             run_on_instance_region: Optional[pulumi.Input[str]] = None,
             script_command: Optional[pulumi.Input[str]] = None,
             step_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if function_id is None and 'functionId' in kwargs:
            function_id = kwargs['functionId']
        if function_region is None and 'functionRegion' in kwargs:
            function_region = kwargs['functionRegion']
        if object_storage_script_locations is None and 'objectStorageScriptLocations' in kwargs:
            object_storage_script_locations = kwargs['objectStorageScriptLocations']
        if request_body is None and 'requestBody' in kwargs:
            request_body = kwargs['requestBody']
        if run_as_user is None and 'runAsUser' in kwargs:
            run_as_user = kwargs['runAsUser']
        if run_on_instance_id is None and 'runOnInstanceId' in kwargs:
            run_on_instance_id = kwargs['runOnInstanceId']
        if run_on_instance_region is None and 'runOnInstanceRegion' in kwargs:
            run_on_instance_region = kwargs['runOnInstanceRegion']
        if script_command is None and 'scriptCommand' in kwargs:
            script_command = kwargs['scriptCommand']
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']

        if function_id is not None:
            _setter("function_id", function_id)
        if function_region is not None:
            _setter("function_region", function_region)
        if object_storage_script_locations is not None:
            _setter("object_storage_script_locations", object_storage_script_locations)
        if request_body is not None:
            _setter("request_body", request_body)
        if run_as_user is not None:
            _setter("run_as_user", run_as_user)
        if run_on_instance_id is not None:
            _setter("run_on_instance_id", run_on_instance_id)
        if run_on_instance_region is not None:
            _setter("run_on_instance_region", run_on_instance_region)
        if script_command is not None:
            _setter("script_command", script_command)
        if step_type is not None:
            _setter("step_type", step_type)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of function to be invoked.  Example: `ocid1.fnfunc.oc1..uniqueID`
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="functionRegion")
    def function_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region in which the function is deployed.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "function_region")

    @function_region.setter
    def function_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_region", value)

    @property
    @pulumi.getter(name="objectStorageScriptLocations")
    def object_storage_script_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs']]]]:
        """
        The details of an object storage script location for a user-defined step in a DR plan.
        """
        return pulumi.get(self, "object_storage_script_locations")

    @object_storage_script_locations.setter
    def object_storage_script_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs']]]]):
        pulumi.set(self, "object_storage_script_locations", value)

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> Optional[pulumi.Input[str]]:
        """
        The request body for the function.  Example: `{ "FnParam1", "FnParam2" }`
        """
        return pulumi.get(self, "request_body")

    @request_body.setter
    def request_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_body", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        """
        The userid on the instance to be used for executing the script or command.  Example: `opc`
        """
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="runOnInstanceId")
    def run_on_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the instance on which this script or command should be executed.
        """
        return pulumi.get(self, "run_on_instance_id")

    @run_on_instance_id.setter
    def run_on_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_on_instance_id", value)

    @property
    @pulumi.getter(name="runOnInstanceRegion")
    def run_on_instance_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the instance where this script or command should be executed.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "run_on_instance_region")

    @run_on_instance_region.setter
    def run_on_instance_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_on_instance_region", value)

    @property
    @pulumi.getter(name="scriptCommand")
    def script_command(self) -> Optional[pulumi.Input[str]]:
        """
        The script name and arguments.  Example: `/usr/bin/python3 /home/opc/scripts/my_app_script.py arg1 arg2 arg3`
        """
        return pulumi.get(self, "script_command")

    @script_command.setter
    def script_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_command", value)

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the user-defined step.
        """
        return pulumi.get(self, "step_type")

    @step_type.setter
    def step_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "step_type", value)


@pulumi.input_type
class DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: The bucket name inside the object storage namespace.  Example: `custom_dr_scripts`
        :param pulumi.Input[str] namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param pulumi.Input[str] object: The object name inside the object storage bucket.  Example: `validate_app_start.sh`
        """
        DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             object: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if bucket is not None:
            _setter("bucket", bucket)
        if namespace is not None:
            _setter("namespace", namespace)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The bucket name inside the object storage namespace.  Example: `custom_dr_scripts`
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        The object name inside the object storage bucket.  Example: `validate_app_start.sh`
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class DrProtectionGroupAssociationArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 peer_id: Optional[pulumi.Input[str]] = None,
                 peer_region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] role: The role of the DR protection group.  Example: `STANDBY`
        :param pulumi.Input[str] peer_id: The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param pulumi.Input[str] peer_region: The region of the peer DR protection group.  Example: `us-ashburn-1`
        """
        DrProtectionGroupAssociationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role=role,
            peer_id=peer_id,
            peer_region=peer_region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role: Optional[pulumi.Input[str]] = None,
             peer_id: Optional[pulumi.Input[str]] = None,
             peer_region: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if role is None:
            raise TypeError("Missing 'role' argument")
        if peer_id is None and 'peerId' in kwargs:
            peer_id = kwargs['peerId']
        if peer_region is None and 'peerRegion' in kwargs:
            peer_region = kwargs['peerRegion']

        _setter("role", role)
        if peer_id is not None:
            _setter("peer_id", peer_id)
        if peer_region is not None:
            _setter("peer_region", peer_region)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The role of the DR protection group.  Example: `STANDBY`
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "peer_id")

    @peer_id.setter
    def peer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_id", value)

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the peer DR protection group.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "peer_region")

    @peer_region.setter
    def peer_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_region", value)


@pulumi.input_type
class DrProtectionGroupLogLocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 object: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: (Updatable) The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param pulumi.Input[str] namespace: (Updatable) The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param pulumi.Input[str] object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        DrProtectionGroupLogLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[pulumi.Input[str]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             object: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        (Updatable) The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        (Updatable) The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class DrProtectionGroupMemberArgs:
    def __init__(__self__, *,
                 member_id: pulumi.Input[str],
                 member_type: pulumi.Input[str],
                 backend_set_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBackendSetMappingArgs']]]] = None,
                 block_volume_operations: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationArgs']]]] = None,
                 destination_availability_domain: Optional[pulumi.Input[str]] = None,
                 destination_capacity_reservation_id: Optional[pulumi.Input[str]] = None,
                 destination_compartment_id: Optional[pulumi.Input[str]] = None,
                 destination_dedicated_vm_host_id: Optional[pulumi.Input[str]] = None,
                 destination_load_balancer_id: Optional[pulumi.Input[str]] = None,
                 destination_network_load_balancer_id: Optional[pulumi.Input[str]] = None,
                 export_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberExportMappingArgs']]]] = None,
                 file_system_operations: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberFileSystemOperationArgs']]]] = None,
                 is_movable: Optional[pulumi.Input[bool]] = None,
                 is_retain_fault_domain: Optional[pulumi.Input[bool]] = None,
                 is_start_stop_enabled: Optional[pulumi.Input[bool]] = None,
                 password_vault_secret_id: Optional[pulumi.Input[str]] = None,
                 vnic_mapping: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]] = None,
                 vnic_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]] = None):
        """
        :param pulumi.Input[str] member_id: (Updatable) The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        :param pulumi.Input[str] member_type: (Updatable) The type of the member.
        :param pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBackendSetMappingArgs']]] backend_set_mappings: (Updatable) A list of backend set mappings that are used to transfer or update backends during DR.
        :param pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationArgs']]] block_volume_operations: (Updatable) A list of operations performed on block volumes used by the compute instance.
        :param pulumi.Input[str] destination_availability_domain: (Updatable) The availability domain of the destination mount target.  Example: `BBTh:region-AD`
        :param pulumi.Input[str] destination_capacity_reservation_id: (Updatable) The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        :param pulumi.Input[str] destination_compartment_id: (Updatable) The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        :param pulumi.Input[str] destination_dedicated_vm_host_id: (Updatable) The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        :param pulumi.Input[str] destination_load_balancer_id: (Updatable) The OCID of the destination load balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        :param pulumi.Input[str] destination_network_load_balancer_id: (Updatable) The OCID of the destination network load balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        :param pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberExportMappingArgs']]] export_mappings: (Updatable) A list of mappings between file system exports in the primary region and mount targets in the standby region.
        :param pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberFileSystemOperationArgs']]] file_system_operations: (Updatable) A list of operations performed on file systems used by the compute instance.
        :param pulumi.Input[bool] is_movable: (Updatable) A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
        :param pulumi.Input[bool] is_retain_fault_domain: (Updatable) A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
        :param pulumi.Input[bool] is_start_stop_enabled: (Updatable) A flag indicating whether the non-movable compute instance should be started and stopped during DR operations. *Prechecks cannot be executed on stopped instances that are configured to be started.*
        :param pulumi.Input[str] password_vault_secret_id: (Updatable) The OCID of the vault secret where the database SYSDBA password is stored.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        :param pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]] vnic_mapping: (Updatable) A list of compute instance VNIC mappings.
        :param pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]] vnic_mappings: (Updatable) A list of compute instance VNIC mappings.
        """
        DrProtectionGroupMemberArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            member_id=member_id,
            member_type=member_type,
            backend_set_mappings=backend_set_mappings,
            block_volume_operations=block_volume_operations,
            destination_availability_domain=destination_availability_domain,
            destination_capacity_reservation_id=destination_capacity_reservation_id,
            destination_compartment_id=destination_compartment_id,
            destination_dedicated_vm_host_id=destination_dedicated_vm_host_id,
            destination_load_balancer_id=destination_load_balancer_id,
            destination_network_load_balancer_id=destination_network_load_balancer_id,
            export_mappings=export_mappings,
            file_system_operations=file_system_operations,
            is_movable=is_movable,
            is_retain_fault_domain=is_retain_fault_domain,
            is_start_stop_enabled=is_start_stop_enabled,
            password_vault_secret_id=password_vault_secret_id,
            vnic_mapping=vnic_mapping,
            vnic_mappings=vnic_mappings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             member_id: Optional[pulumi.Input[str]] = None,
             member_type: Optional[pulumi.Input[str]] = None,
             backend_set_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBackendSetMappingArgs']]]] = None,
             block_volume_operations: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationArgs']]]] = None,
             destination_availability_domain: Optional[pulumi.Input[str]] = None,
             destination_capacity_reservation_id: Optional[pulumi.Input[str]] = None,
             destination_compartment_id: Optional[pulumi.Input[str]] = None,
             destination_dedicated_vm_host_id: Optional[pulumi.Input[str]] = None,
             destination_load_balancer_id: Optional[pulumi.Input[str]] = None,
             destination_network_load_balancer_id: Optional[pulumi.Input[str]] = None,
             export_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberExportMappingArgs']]]] = None,
             file_system_operations: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberFileSystemOperationArgs']]]] = None,
             is_movable: Optional[pulumi.Input[bool]] = None,
             is_retain_fault_domain: Optional[pulumi.Input[bool]] = None,
             is_start_stop_enabled: Optional[pulumi.Input[bool]] = None,
             password_vault_secret_id: Optional[pulumi.Input[str]] = None,
             vnic_mapping: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]] = None,
             vnic_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if member_id is None and 'memberId' in kwargs:
            member_id = kwargs['memberId']
        if member_id is None:
            raise TypeError("Missing 'member_id' argument")
        if member_type is None and 'memberType' in kwargs:
            member_type = kwargs['memberType']
        if member_type is None:
            raise TypeError("Missing 'member_type' argument")
        if backend_set_mappings is None and 'backendSetMappings' in kwargs:
            backend_set_mappings = kwargs['backendSetMappings']
        if block_volume_operations is None and 'blockVolumeOperations' in kwargs:
            block_volume_operations = kwargs['blockVolumeOperations']
        if destination_availability_domain is None and 'destinationAvailabilityDomain' in kwargs:
            destination_availability_domain = kwargs['destinationAvailabilityDomain']
        if destination_capacity_reservation_id is None and 'destinationCapacityReservationId' in kwargs:
            destination_capacity_reservation_id = kwargs['destinationCapacityReservationId']
        if destination_compartment_id is None and 'destinationCompartmentId' in kwargs:
            destination_compartment_id = kwargs['destinationCompartmentId']
        if destination_dedicated_vm_host_id is None and 'destinationDedicatedVmHostId' in kwargs:
            destination_dedicated_vm_host_id = kwargs['destinationDedicatedVmHostId']
        if destination_load_balancer_id is None and 'destinationLoadBalancerId' in kwargs:
            destination_load_balancer_id = kwargs['destinationLoadBalancerId']
        if destination_network_load_balancer_id is None and 'destinationNetworkLoadBalancerId' in kwargs:
            destination_network_load_balancer_id = kwargs['destinationNetworkLoadBalancerId']
        if export_mappings is None and 'exportMappings' in kwargs:
            export_mappings = kwargs['exportMappings']
        if file_system_operations is None and 'fileSystemOperations' in kwargs:
            file_system_operations = kwargs['fileSystemOperations']
        if is_movable is None and 'isMovable' in kwargs:
            is_movable = kwargs['isMovable']
        if is_retain_fault_domain is None and 'isRetainFaultDomain' in kwargs:
            is_retain_fault_domain = kwargs['isRetainFaultDomain']
        if is_start_stop_enabled is None and 'isStartStopEnabled' in kwargs:
            is_start_stop_enabled = kwargs['isStartStopEnabled']
        if password_vault_secret_id is None and 'passwordVaultSecretId' in kwargs:
            password_vault_secret_id = kwargs['passwordVaultSecretId']
        if vnic_mapping is None and 'vnicMapping' in kwargs:
            vnic_mapping = kwargs['vnicMapping']
        if vnic_mappings is None and 'vnicMappings' in kwargs:
            vnic_mappings = kwargs['vnicMappings']

        _setter("member_id", member_id)
        _setter("member_type", member_type)
        if backend_set_mappings is not None:
            _setter("backend_set_mappings", backend_set_mappings)
        if block_volume_operations is not None:
            _setter("block_volume_operations", block_volume_operations)
        if destination_availability_domain is not None:
            _setter("destination_availability_domain", destination_availability_domain)
        if destination_capacity_reservation_id is not None:
            _setter("destination_capacity_reservation_id", destination_capacity_reservation_id)
        if destination_compartment_id is not None:
            _setter("destination_compartment_id", destination_compartment_id)
        if destination_dedicated_vm_host_id is not None:
            _setter("destination_dedicated_vm_host_id", destination_dedicated_vm_host_id)
        if destination_load_balancer_id is not None:
            _setter("destination_load_balancer_id", destination_load_balancer_id)
        if destination_network_load_balancer_id is not None:
            _setter("destination_network_load_balancer_id", destination_network_load_balancer_id)
        if export_mappings is not None:
            _setter("export_mappings", export_mappings)
        if file_system_operations is not None:
            _setter("file_system_operations", file_system_operations)
        if is_movable is not None:
            _setter("is_movable", is_movable)
        if is_retain_fault_domain is not None:
            _setter("is_retain_fault_domain", is_retain_fault_domain)
        if is_start_stop_enabled is not None:
            _setter("is_start_stop_enabled", is_start_stop_enabled)
        if password_vault_secret_id is not None:
            _setter("password_vault_secret_id", password_vault_secret_id)
        if vnic_mapping is not None:
            _setter("vnic_mapping", vnic_mapping)
        if vnic_mappings is not None:
            _setter("vnic_mappings", vnic_mappings)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Input[str]:
        """
        (Updatable) The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        """
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> pulumi.Input[str]:
        """
        (Updatable) The type of the member.
        """
        return pulumi.get(self, "member_type")

    @member_type.setter
    def member_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "member_type", value)

    @property
    @pulumi.getter(name="backendSetMappings")
    def backend_set_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBackendSetMappingArgs']]]]:
        """
        (Updatable) A list of backend set mappings that are used to transfer or update backends during DR.
        """
        return pulumi.get(self, "backend_set_mappings")

    @backend_set_mappings.setter
    def backend_set_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBackendSetMappingArgs']]]]):
        pulumi.set(self, "backend_set_mappings", value)

    @property
    @pulumi.getter(name="blockVolumeOperations")
    def block_volume_operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationArgs']]]]:
        """
        (Updatable) A list of operations performed on block volumes used by the compute instance.
        """
        return pulumi.get(self, "block_volume_operations")

    @block_volume_operations.setter
    def block_volume_operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationArgs']]]]):
        pulumi.set(self, "block_volume_operations", value)

    @property
    @pulumi.getter(name="destinationAvailabilityDomain")
    def destination_availability_domain(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The availability domain of the destination mount target.  Example: `BBTh:region-AD`
        """
        return pulumi.get(self, "destination_availability_domain")

    @destination_availability_domain.setter
    def destination_availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_availability_domain", value)

    @property
    @pulumi.getter(name="destinationCapacityReservationId")
    def destination_capacity_reservation_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_capacity_reservation_id")

    @destination_capacity_reservation_id.setter
    def destination_capacity_reservation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_capacity_reservation_id", value)

    @property
    @pulumi.getter(name="destinationCompartmentId")
    def destination_compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_compartment_id")

    @destination_compartment_id.setter
    def destination_compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_compartment_id", value)

    @property
    @pulumi.getter(name="destinationDedicatedVmHostId")
    def destination_dedicated_vm_host_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_dedicated_vm_host_id")

    @destination_dedicated_vm_host_id.setter
    def destination_dedicated_vm_host_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_dedicated_vm_host_id", value)

    @property
    @pulumi.getter(name="destinationLoadBalancerId")
    def destination_load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the destination load balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_load_balancer_id")

    @destination_load_balancer_id.setter
    def destination_load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_load_balancer_id", value)

    @property
    @pulumi.getter(name="destinationNetworkLoadBalancerId")
    def destination_network_load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the destination network load balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_network_load_balancer_id")

    @destination_network_load_balancer_id.setter
    def destination_network_load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_network_load_balancer_id", value)

    @property
    @pulumi.getter(name="exportMappings")
    def export_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberExportMappingArgs']]]]:
        """
        (Updatable) A list of mappings between file system exports in the primary region and mount targets in the standby region.
        """
        return pulumi.get(self, "export_mappings")

    @export_mappings.setter
    def export_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberExportMappingArgs']]]]):
        pulumi.set(self, "export_mappings", value)

    @property
    @pulumi.getter(name="fileSystemOperations")
    def file_system_operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberFileSystemOperationArgs']]]]:
        """
        (Updatable) A list of operations performed on file systems used by the compute instance.
        """
        return pulumi.get(self, "file_system_operations")

    @file_system_operations.setter
    def file_system_operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberFileSystemOperationArgs']]]]):
        pulumi.set(self, "file_system_operations", value)

    @property
    @pulumi.getter(name="isMovable")
    def is_movable(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
        """
        return pulumi.get(self, "is_movable")

    @is_movable.setter
    def is_movable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_movable", value)

    @property
    @pulumi.getter(name="isRetainFaultDomain")
    def is_retain_fault_domain(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
        """
        return pulumi.get(self, "is_retain_fault_domain")

    @is_retain_fault_domain.setter
    def is_retain_fault_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_retain_fault_domain", value)

    @property
    @pulumi.getter(name="isStartStopEnabled")
    def is_start_stop_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) A flag indicating whether the non-movable compute instance should be started and stopped during DR operations. *Prechecks cannot be executed on stopped instances that are configured to be started.*
        """
        return pulumi.get(self, "is_start_stop_enabled")

    @is_start_stop_enabled.setter
    def is_start_stop_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_start_stop_enabled", value)

    @property
    @pulumi.getter(name="passwordVaultSecretId")
    def password_vault_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the vault secret where the database SYSDBA password is stored.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        """
        return pulumi.get(self, "password_vault_secret_id")

    @password_vault_secret_id.setter
    def password_vault_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_vault_secret_id", value)

    @property
    @pulumi.getter(name="vnicMapping")
    def vnic_mapping(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]]:
        """
        (Updatable) A list of compute instance VNIC mappings.
        """
        return pulumi.get(self, "vnic_mapping")

    @vnic_mapping.setter
    def vnic_mapping(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]]):
        pulumi.set(self, "vnic_mapping", value)

    @property
    @pulumi.getter(name="vnicMappings")
    def vnic_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]]:
        """
        (Updatable) A list of compute instance VNIC mappings.
        """
        return pulumi.get(self, "vnic_mappings")

    @vnic_mappings.setter
    def vnic_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]]):
        pulumi.set(self, "vnic_mappings", value)


@pulumi.input_type
class DrProtectionGroupMemberBackendSetMappingArgs:
    def __init__(__self__, *,
                 destination_backend_set_name: Optional[pulumi.Input[str]] = None,
                 is_backend_set_for_non_movable: Optional[pulumi.Input[bool]] = None,
                 source_backend_set_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination_backend_set_name: (Updatable) The name of the destination backend set.  Example: `Destination-BackendSet-1`
        :param pulumi.Input[bool] is_backend_set_for_non_movable: (Updatable) This flag specifies if this backend set is used for traffic for non-movable compute instances. Backend sets that point to non-movable instances are only enabled or disabled during DR, their contents are not altered. For non-movable instances this flag should be set to 'true'. Backend sets that point to movable instances are emptied and their contents are transferred to the  destination region load balancer.  For movable instances this flag should be set to 'false'.   Example: `true`
        :param pulumi.Input[str] source_backend_set_name: (Updatable) The name of the source backend set.  Example: `Source-BackendSet-1`
        """
        DrProtectionGroupMemberBackendSetMappingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_backend_set_name=destination_backend_set_name,
            is_backend_set_for_non_movable=is_backend_set_for_non_movable,
            source_backend_set_name=source_backend_set_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_backend_set_name: Optional[pulumi.Input[str]] = None,
             is_backend_set_for_non_movable: Optional[pulumi.Input[bool]] = None,
             source_backend_set_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_backend_set_name is None and 'destinationBackendSetName' in kwargs:
            destination_backend_set_name = kwargs['destinationBackendSetName']
        if is_backend_set_for_non_movable is None and 'isBackendSetForNonMovable' in kwargs:
            is_backend_set_for_non_movable = kwargs['isBackendSetForNonMovable']
        if source_backend_set_name is None and 'sourceBackendSetName' in kwargs:
            source_backend_set_name = kwargs['sourceBackendSetName']

        if destination_backend_set_name is not None:
            _setter("destination_backend_set_name", destination_backend_set_name)
        if is_backend_set_for_non_movable is not None:
            _setter("is_backend_set_for_non_movable", is_backend_set_for_non_movable)
        if source_backend_set_name is not None:
            _setter("source_backend_set_name", source_backend_set_name)

    @property
    @pulumi.getter(name="destinationBackendSetName")
    def destination_backend_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The name of the destination backend set.  Example: `Destination-BackendSet-1`
        """
        return pulumi.get(self, "destination_backend_set_name")

    @destination_backend_set_name.setter
    def destination_backend_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_backend_set_name", value)

    @property
    @pulumi.getter(name="isBackendSetForNonMovable")
    def is_backend_set_for_non_movable(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) This flag specifies if this backend set is used for traffic for non-movable compute instances. Backend sets that point to non-movable instances are only enabled or disabled during DR, their contents are not altered. For non-movable instances this flag should be set to 'true'. Backend sets that point to movable instances are emptied and their contents are transferred to the  destination region load balancer.  For movable instances this flag should be set to 'false'.   Example: `true`
        """
        return pulumi.get(self, "is_backend_set_for_non_movable")

    @is_backend_set_for_non_movable.setter
    def is_backend_set_for_non_movable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_backend_set_for_non_movable", value)

    @property
    @pulumi.getter(name="sourceBackendSetName")
    def source_backend_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The name of the source backend set.  Example: `Source-BackendSet-1`
        """
        return pulumi.get(self, "source_backend_set_name")

    @source_backend_set_name.setter
    def source_backend_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_backend_set_name", value)


@pulumi.input_type
class DrProtectionGroupMemberBlockVolumeOperationArgs:
    def __init__(__self__, *,
                 attachment_details: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs']] = None,
                 block_volume_id: Optional[pulumi.Input[str]] = None,
                 mount_details: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs']] = None):
        """
        :param pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs'] attachment_details: (Updatable) The details for creating a block volume attachment.
        :param pulumi.Input[str] block_volume_id: (Updatable) The OCID of the block volume.  Example: `ocid1.volume.oc1..uniqueID`
        :param pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs'] mount_details: (Updatable) The details for creating a file system mount.
        """
        DrProtectionGroupMemberBlockVolumeOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attachment_details=attachment_details,
            block_volume_id=block_volume_id,
            mount_details=mount_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attachment_details: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs']] = None,
             block_volume_id: Optional[pulumi.Input[str]] = None,
             mount_details: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if attachment_details is None and 'attachmentDetails' in kwargs:
            attachment_details = kwargs['attachmentDetails']
        if block_volume_id is None and 'blockVolumeId' in kwargs:
            block_volume_id = kwargs['blockVolumeId']
        if mount_details is None and 'mountDetails' in kwargs:
            mount_details = kwargs['mountDetails']

        if attachment_details is not None:
            _setter("attachment_details", attachment_details)
        if block_volume_id is not None:
            _setter("block_volume_id", block_volume_id)
        if mount_details is not None:
            _setter("mount_details", mount_details)

    @property
    @pulumi.getter(name="attachmentDetails")
    def attachment_details(self) -> Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs']]:
        """
        (Updatable) The details for creating a block volume attachment.
        """
        return pulumi.get(self, "attachment_details")

    @attachment_details.setter
    def attachment_details(self, value: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs']]):
        pulumi.set(self, "attachment_details", value)

    @property
    @pulumi.getter(name="blockVolumeId")
    def block_volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the block volume.  Example: `ocid1.volume.oc1..uniqueID`
        """
        return pulumi.get(self, "block_volume_id")

    @block_volume_id.setter
    def block_volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_volume_id", value)

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs']]:
        """
        (Updatable) The details for creating a file system mount.
        """
        return pulumi.get(self, "mount_details")

    @mount_details.setter
    def mount_details(self, value: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs']]):
        pulumi.set(self, "mount_details", value)


@pulumi.input_type
class DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs:
    def __init__(__self__, *,
                 volume_attachment_reference_instance_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] volume_attachment_reference_instance_id: (Updatable) The OCID of the reference compute instance from which to obtain the attachment details for the volume. This reference compute instance is from the peer DR protection group.  Example: `ocid1.instance.oc1..uniqueID`
        """
        DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            volume_attachment_reference_instance_id=volume_attachment_reference_instance_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             volume_attachment_reference_instance_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if volume_attachment_reference_instance_id is None and 'volumeAttachmentReferenceInstanceId' in kwargs:
            volume_attachment_reference_instance_id = kwargs['volumeAttachmentReferenceInstanceId']

        if volume_attachment_reference_instance_id is not None:
            _setter("volume_attachment_reference_instance_id", volume_attachment_reference_instance_id)

    @property
    @pulumi.getter(name="volumeAttachmentReferenceInstanceId")
    def volume_attachment_reference_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the reference compute instance from which to obtain the attachment details for the volume. This reference compute instance is from the peer DR protection group.  Example: `ocid1.instance.oc1..uniqueID`
        """
        return pulumi.get(self, "volume_attachment_reference_instance_id")

    @volume_attachment_reference_instance_id.setter
    def volume_attachment_reference_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_attachment_reference_instance_id", value)


@pulumi.input_type
class DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs:
    def __init__(__self__, *,
                 mount_point: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mount_point: (Updatable) The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_point=mount_point,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_point: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_point is None and 'mountPoint' in kwargs:
            mount_point = kwargs['mountPoint']

        if mount_point is not None:
            _setter("mount_point", mount_point)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        return pulumi.get(self, "mount_point")

    @mount_point.setter
    def mount_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_point", value)


@pulumi.input_type
class DrProtectionGroupMemberExportMappingArgs:
    def __init__(__self__, *,
                 destination_mount_target_id: Optional[pulumi.Input[str]] = None,
                 export_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination_mount_target_id: (Updatable) The OCID of the destination mount target in the destination region which is used to export the file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        :param pulumi.Input[str] export_id: (Updatable) The OCID of the export path in the primary region used to mount or unmount the file system.  Example: `ocid1.export.oc1..uniqueID`
        """
        DrProtectionGroupMemberExportMappingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_mount_target_id=destination_mount_target_id,
            export_id=export_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_mount_target_id: Optional[pulumi.Input[str]] = None,
             export_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_mount_target_id is None and 'destinationMountTargetId' in kwargs:
            destination_mount_target_id = kwargs['destinationMountTargetId']
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']

        if destination_mount_target_id is not None:
            _setter("destination_mount_target_id", destination_mount_target_id)
        if export_id is not None:
            _setter("export_id", export_id)

    @property
    @pulumi.getter(name="destinationMountTargetId")
    def destination_mount_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the destination mount target in the destination region which is used to export the file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_mount_target_id")

    @destination_mount_target_id.setter
    def destination_mount_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_mount_target_id", value)

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the export path in the primary region used to mount or unmount the file system.  Example: `ocid1.export.oc1..uniqueID`
        """
        return pulumi.get(self, "export_id")

    @export_id.setter
    def export_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_id", value)


@pulumi.input_type
class DrProtectionGroupMemberFileSystemOperationArgs:
    def __init__(__self__, *,
                 export_path: Optional[pulumi.Input[str]] = None,
                 mount_details: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationMountDetailsArgs']] = None,
                 mount_point: Optional[pulumi.Input[str]] = None,
                 mount_target_id: Optional[pulumi.Input[str]] = None,
                 unmount_details: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs']] = None):
        """
        :param pulumi.Input[str] export_path: (Updatable) The export path of the file system.  Example: `/fs-export-path`
        :param pulumi.Input['DrProtectionGroupMemberFileSystemOperationMountDetailsArgs'] mount_details: (Updatable) The details for creating a file system mount.
        :param pulumi.Input[str] mount_point: (Updatable) The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        :param pulumi.Input[str] mount_target_id: (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        :param pulumi.Input['DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs'] unmount_details: (Updatable) The details for creating a file system unmount.
        """
        DrProtectionGroupMemberFileSystemOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            export_path=export_path,
            mount_details=mount_details,
            mount_point=mount_point,
            mount_target_id=mount_target_id,
            unmount_details=unmount_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             export_path: Optional[pulumi.Input[str]] = None,
             mount_details: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationMountDetailsArgs']] = None,
             mount_point: Optional[pulumi.Input[str]] = None,
             mount_target_id: Optional[pulumi.Input[str]] = None,
             unmount_details: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if export_path is None and 'exportPath' in kwargs:
            export_path = kwargs['exportPath']
        if mount_details is None and 'mountDetails' in kwargs:
            mount_details = kwargs['mountDetails']
        if mount_point is None and 'mountPoint' in kwargs:
            mount_point = kwargs['mountPoint']
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if unmount_details is None and 'unmountDetails' in kwargs:
            unmount_details = kwargs['unmountDetails']

        if export_path is not None:
            _setter("export_path", export_path)
        if mount_details is not None:
            _setter("mount_details", mount_details)
        if mount_point is not None:
            _setter("mount_point", mount_point)
        if mount_target_id is not None:
            _setter("mount_target_id", mount_target_id)
        if unmount_details is not None:
            _setter("unmount_details", unmount_details)

    @property
    @pulumi.getter(name="exportPath")
    def export_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The export path of the file system.  Example: `/fs-export-path`
        """
        return pulumi.get(self, "export_path")

    @export_path.setter
    def export_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_path", value)

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationMountDetailsArgs']]:
        """
        (Updatable) The details for creating a file system mount.
        """
        return pulumi.get(self, "mount_details")

    @mount_details.setter
    def mount_details(self, value: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationMountDetailsArgs']]):
        pulumi.set(self, "mount_details", value)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        return pulumi.get(self, "mount_point")

    @mount_point.setter
    def mount_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_point", value)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")

    @mount_target_id.setter
    def mount_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target_id", value)

    @property
    @pulumi.getter(name="unmountDetails")
    def unmount_details(self) -> Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs']]:
        """
        (Updatable) The details for creating a file system unmount.
        """
        return pulumi.get(self, "unmount_details")

    @unmount_details.setter
    def unmount_details(self, value: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs']]):
        pulumi.set(self, "unmount_details", value)


@pulumi.input_type
class DrProtectionGroupMemberFileSystemOperationMountDetailsArgs:
    def __init__(__self__, *,
                 mount_target_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mount_target_id: (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        DrProtectionGroupMemberFileSystemOperationMountDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_target_id=mount_target_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_target_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']

        if mount_target_id is not None:
            _setter("mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")

    @mount_target_id.setter
    def mount_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target_id", value)


@pulumi.input_type
class DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs:
    def __init__(__self__, *,
                 mount_target_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] mount_target_id: (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_target_id=mount_target_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_target_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']

        if mount_target_id is not None:
            _setter("mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")

    @mount_target_id.setter
    def mount_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target_id", value)


@pulumi.input_type
class DrProtectionGroupMemberVnicMappingArgs:
    def __init__(__self__, *,
                 destination_nsg_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 destination_primary_private_ip_address: Optional[pulumi.Input[str]] = None,
                 destination_primary_private_ip_hostname_label: Optional[pulumi.Input[str]] = None,
                 destination_subnet_id: Optional[pulumi.Input[str]] = None,
                 source_vnic_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] destination_nsg_id_lists: (Updatable) A list of OCIDs of network security groups (NSG) in the destination region which should be assigned to the source VNIC.  Example: `[ ocid1.networksecuritygroup.oc1..uniqueID, ocid1.networksecuritygroup.oc1..uniqueID ]`
        :param pulumi.Input[str] destination_primary_private_ip_address: (Updatable) The primary private IP address to be assigned to the source VNIC in the destination subnet.  This IP address must belong to the destination subnet.  Example: `10.0.3.3`
        :param pulumi.Input[str] destination_primary_private_ip_hostname_label: (Updatable) The hostname label to be assigned in the destination subnet for the primary private IP of the source VNIC. This label is the hostname portion of the private IP's fully qualified domain name (FQDN)  (for example, 'myhost1' in the FQDN 'myhost1.subnet123.vcn1.oraclevcn.com').  Example: `myhost1`
        :param pulumi.Input[str] destination_subnet_id: (Updatable) The OCID of the destination subnet to which the source VNIC should connect.          Example: `ocid1.subnet.oc1..uniqueID`
        :param pulumi.Input[str] source_vnic_id: (Updatable) The OCID of the source VNIC.  Example: `ocid1.vnic.oc1..uniqueID`
        """
        DrProtectionGroupMemberVnicMappingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_nsg_id_lists=destination_nsg_id_lists,
            destination_primary_private_ip_address=destination_primary_private_ip_address,
            destination_primary_private_ip_hostname_label=destination_primary_private_ip_hostname_label,
            destination_subnet_id=destination_subnet_id,
            source_vnic_id=source_vnic_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_nsg_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             destination_primary_private_ip_address: Optional[pulumi.Input[str]] = None,
             destination_primary_private_ip_hostname_label: Optional[pulumi.Input[str]] = None,
             destination_subnet_id: Optional[pulumi.Input[str]] = None,
             source_vnic_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_nsg_id_lists is None and 'destinationNsgIdLists' in kwargs:
            destination_nsg_id_lists = kwargs['destinationNsgIdLists']
        if destination_primary_private_ip_address is None and 'destinationPrimaryPrivateIpAddress' in kwargs:
            destination_primary_private_ip_address = kwargs['destinationPrimaryPrivateIpAddress']
        if destination_primary_private_ip_hostname_label is None and 'destinationPrimaryPrivateIpHostnameLabel' in kwargs:
            destination_primary_private_ip_hostname_label = kwargs['destinationPrimaryPrivateIpHostnameLabel']
        if destination_subnet_id is None and 'destinationSubnetId' in kwargs:
            destination_subnet_id = kwargs['destinationSubnetId']
        if source_vnic_id is None and 'sourceVnicId' in kwargs:
            source_vnic_id = kwargs['sourceVnicId']

        if destination_nsg_id_lists is not None:
            _setter("destination_nsg_id_lists", destination_nsg_id_lists)
        if destination_primary_private_ip_address is not None:
            _setter("destination_primary_private_ip_address", destination_primary_private_ip_address)
        if destination_primary_private_ip_hostname_label is not None:
            _setter("destination_primary_private_ip_hostname_label", destination_primary_private_ip_hostname_label)
        if destination_subnet_id is not None:
            _setter("destination_subnet_id", destination_subnet_id)
        if source_vnic_id is not None:
            _setter("source_vnic_id", source_vnic_id)

    @property
    @pulumi.getter(name="destinationNsgIdLists")
    def destination_nsg_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Updatable) A list of OCIDs of network security groups (NSG) in the destination region which should be assigned to the source VNIC.  Example: `[ ocid1.networksecuritygroup.oc1..uniqueID, ocid1.networksecuritygroup.oc1..uniqueID ]`
        """
        return pulumi.get(self, "destination_nsg_id_lists")

    @destination_nsg_id_lists.setter
    def destination_nsg_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_nsg_id_lists", value)

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpAddress")
    def destination_primary_private_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The primary private IP address to be assigned to the source VNIC in the destination subnet.  This IP address must belong to the destination subnet.  Example: `10.0.3.3`
        """
        return pulumi.get(self, "destination_primary_private_ip_address")

    @destination_primary_private_ip_address.setter
    def destination_primary_private_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_primary_private_ip_address", value)

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpHostnameLabel")
    def destination_primary_private_ip_hostname_label(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The hostname label to be assigned in the destination subnet for the primary private IP of the source VNIC. This label is the hostname portion of the private IP's fully qualified domain name (FQDN)  (for example, 'myhost1' in the FQDN 'myhost1.subnet123.vcn1.oraclevcn.com').  Example: `myhost1`
        """
        return pulumi.get(self, "destination_primary_private_ip_hostname_label")

    @destination_primary_private_ip_hostname_label.setter
    def destination_primary_private_ip_hostname_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_primary_private_ip_hostname_label", value)

    @property
    @pulumi.getter(name="destinationSubnetId")
    def destination_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the destination subnet to which the source VNIC should connect.          Example: `ocid1.subnet.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_subnet_id")

    @destination_subnet_id.setter
    def destination_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_subnet_id", value)

    @property
    @pulumi.getter(name="sourceVnicId")
    def source_vnic_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) The OCID of the source VNIC.  Example: `ocid1.vnic.oc1..uniqueID`
        """
        return pulumi.get(self, "source_vnic_id")

    @source_vnic_id.setter
    def source_vnic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_vnic_id", value)


@pulumi.input_type
class GetDrPlanExecutionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetDrPlanExecutionsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDrPlansFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetDrPlansFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDrProtectionGroupsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetDrProtectionGroupsFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


