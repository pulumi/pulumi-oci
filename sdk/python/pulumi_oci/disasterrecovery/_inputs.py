# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'DrPlanExecutionExecutionOptionsArgs',
    'DrPlanExecutionGroupExecutionArgs',
    'DrPlanExecutionGroupExecutionStepExecutionArgs',
    'DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs',
    'DrPlanExecutionLogLocationArgs',
    'DrPlanPlanGroupArgs',
    'DrPlanPlanGroupStepArgs',
    'DrPlanPlanGroupStepUserDefinedStepArgs',
    'DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs',
    'DrProtectionGroupAssociationArgs',
    'DrProtectionGroupLogLocationArgs',
    'DrProtectionGroupMemberArgs',
    'DrProtectionGroupMemberBackendSetMappingArgs',
    'DrProtectionGroupMemberBlockVolumeOperationArgs',
    'DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs',
    'DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs',
    'DrProtectionGroupMemberExportMappingArgs',
    'DrProtectionGroupMemberFileSystemOperationArgs',
    'DrProtectionGroupMemberFileSystemOperationMountDetailsArgs',
    'DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs',
    'DrProtectionGroupMemberVnicMappingArgs',
    'GetDrPlanExecutionsFilterArgs',
    'GetDrPlansFilterArgs',
    'GetDrProtectionGroupsFilterArgs',
]

@pulumi.input_type
class DrPlanExecutionExecutionOptionsArgs:
    def __init__(__self__, *,
                 plan_execution_type: pulumi.Input[str],
                 are_prechecks_enabled: Optional[pulumi.Input[bool]] = None,
                 are_warnings_ignored: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "plan_execution_type", plan_execution_type)
        if are_prechecks_enabled is not None:
            pulumi.set(__self__, "are_prechecks_enabled", are_prechecks_enabled)
        if are_warnings_ignored is not None:
            pulumi.set(__self__, "are_warnings_ignored", are_warnings_ignored)

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plan_execution_type")

    @plan_execution_type.setter
    def plan_execution_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_execution_type", value)

    @property
    @pulumi.getter(name="arePrechecksEnabled")
    def are_prechecks_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "are_prechecks_enabled")

    @are_prechecks_enabled.setter
    def are_prechecks_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_prechecks_enabled", value)

    @property
    @pulumi.getter(name="areWarningsIgnored")
    def are_warnings_ignored(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "are_warnings_ignored")

    @are_warnings_ignored.setter
    def are_warnings_ignored(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "are_warnings_ignored", value)


@pulumi.input_type
class DrPlanExecutionGroupExecutionArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 execution_duration_in_sec: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_details: Optional[pulumi.Input[str]] = None,
                 step_executions: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionArgs']]]] = None,
                 time_ended: Optional[pulumi.Input[str]] = None,
                 time_started: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if step_executions is not None:
            pulumi.set(__self__, "step_executions", step_executions)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "execution_duration_in_sec")

    @execution_duration_in_sec.setter
    def execution_duration_in_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "execution_duration_in_sec", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_details", value)

    @property
    @pulumi.getter(name="stepExecutions")
    def step_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionArgs']]]]:
        return pulumi.get(self, "step_executions")

    @step_executions.setter
    def step_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionArgs']]]]):
        pulumi.set(self, "step_executions", value)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_ended")

    @time_ended.setter
    def time_ended(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_ended", value)

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_started")

    @time_started.setter
    def time_started(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_started", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DrPlanExecutionGroupExecutionStepExecutionArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 execution_duration_in_sec: Optional[pulumi.Input[int]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 log_locations: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 status_details: Optional[pulumi.Input[str]] = None,
                 step_id: Optional[pulumi.Input[str]] = None,
                 time_ended: Optional[pulumi.Input[str]] = None,
                 time_started: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if log_locations is not None:
            pulumi.set(__self__, "log_locations", log_locations)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if step_id is not None:
            pulumi.set(__self__, "step_id", step_id)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "execution_duration_in_sec")

    @execution_duration_in_sec.setter
    def execution_duration_in_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "execution_duration_in_sec", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs']]]]:
        return pulumi.get(self, "log_locations")

    @log_locations.setter
    def log_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs']]]]):
        pulumi.set(self, "log_locations", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_details")

    @status_details.setter
    def status_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_details", value)

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "step_id")

    @step_id.setter
    def step_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "step_id", value)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_ended")

    @time_ended.setter
    def time_ended(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_ended", value)

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_started")

    @time_started.setter
    def time_started(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_started", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class DrPlanExecutionLogLocationArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class DrPlanPlanGroupArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepArgs']]]]:
        return pulumi.get(self, "steps")

    @steps.setter
    def steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepArgs']]]]):
        pulumi.set(self, "steps", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DrPlanPlanGroupStepArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 error_mode: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_defined_steps: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepArgs']]]] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if error_mode is not None:
            pulumi.set(__self__, "error_mode", error_mode)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_defined_steps is not None:
            pulumi.set(__self__, "user_defined_steps", user_defined_steps)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="errorMode")
    def error_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_mode")

    @error_mode.setter
    def error_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_mode", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userDefinedSteps")
    def user_defined_steps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepArgs']]]]:
        return pulumi.get(self, "user_defined_steps")

    @user_defined_steps.setter
    def user_defined_steps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepArgs']]]]):
        pulumi.set(self, "user_defined_steps", value)


@pulumi.input_type
class DrPlanPlanGroupStepUserDefinedStepArgs:
    def __init__(__self__, *,
                 function_id: Optional[pulumi.Input[str]] = None,
                 function_region: Optional[pulumi.Input[str]] = None,
                 object_storage_script_locations: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs']]]] = None,
                 request_body: Optional[pulumi.Input[str]] = None,
                 run_as_user: Optional[pulumi.Input[str]] = None,
                 run_on_instance_id: Optional[pulumi.Input[str]] = None,
                 run_on_instance_region: Optional[pulumi.Input[str]] = None,
                 script_command: Optional[pulumi.Input[str]] = None,
                 step_type: Optional[pulumi.Input[str]] = None):
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if function_region is not None:
            pulumi.set(__self__, "function_region", function_region)
        if object_storage_script_locations is not None:
            pulumi.set(__self__, "object_storage_script_locations", object_storage_script_locations)
        if request_body is not None:
            pulumi.set(__self__, "request_body", request_body)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if run_on_instance_id is not None:
            pulumi.set(__self__, "run_on_instance_id", run_on_instance_id)
        if run_on_instance_region is not None:
            pulumi.set(__self__, "run_on_instance_region", run_on_instance_region)
        if script_command is not None:
            pulumi.set(__self__, "script_command", script_command)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter(name="functionRegion")
    def function_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function_region")

    @function_region.setter
    def function_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_region", value)

    @property
    @pulumi.getter(name="objectStorageScriptLocations")
    def object_storage_script_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs']]]]:
        return pulumi.get(self, "object_storage_script_locations")

    @object_storage_script_locations.setter
    def object_storage_script_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs']]]]):
        pulumi.set(self, "object_storage_script_locations", value)

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_body")

    @request_body.setter
    def request_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_body", value)

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_as_user")

    @run_as_user.setter
    def run_as_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_as_user", value)

    @property
    @pulumi.getter(name="runOnInstanceId")
    def run_on_instance_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_on_instance_id")

    @run_on_instance_id.setter
    def run_on_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_on_instance_id", value)

    @property
    @pulumi.getter(name="runOnInstanceRegion")
    def run_on_instance_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "run_on_instance_region")

    @run_on_instance_region.setter
    def run_on_instance_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_on_instance_region", value)

    @property
    @pulumi.getter(name="scriptCommand")
    def script_command(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "script_command")

    @script_command.setter
    def script_command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_command", value)

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "step_type")

    @step_type.setter
    def step_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "step_type", value)


@pulumi.input_type
class DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 object: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class DrProtectionGroupAssociationArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 peer_id: Optional[pulumi.Input[str]] = None,
                 peer_region: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "role", role)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_region is not None:
            pulumi.set(__self__, "peer_region", peer_region)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_id")

    @peer_id.setter
    def peer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_id", value)

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_region")

    @peer_region.setter
    def peer_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_region", value)


@pulumi.input_type
class DrProtectionGroupLogLocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 object: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class DrProtectionGroupMemberArgs:
    def __init__(__self__, *,
                 member_id: pulumi.Input[str],
                 member_type: pulumi.Input[str],
                 backend_set_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBackendSetMappingArgs']]]] = None,
                 block_volume_operations: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationArgs']]]] = None,
                 destination_availability_domain: Optional[pulumi.Input[str]] = None,
                 destination_capacity_reservation_id: Optional[pulumi.Input[str]] = None,
                 destination_compartment_id: Optional[pulumi.Input[str]] = None,
                 destination_dedicated_vm_host_id: Optional[pulumi.Input[str]] = None,
                 destination_load_balancer_id: Optional[pulumi.Input[str]] = None,
                 destination_network_load_balancer_id: Optional[pulumi.Input[str]] = None,
                 export_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberExportMappingArgs']]]] = None,
                 file_system_operations: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberFileSystemOperationArgs']]]] = None,
                 is_movable: Optional[pulumi.Input[bool]] = None,
                 is_retain_fault_domain: Optional[pulumi.Input[bool]] = None,
                 is_start_stop_enabled: Optional[pulumi.Input[bool]] = None,
                 password_vault_secret_id: Optional[pulumi.Input[str]] = None,
                 vnic_mapping: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]] = None,
                 vnic_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]] = None):
        pulumi.set(__self__, "member_id", member_id)
        pulumi.set(__self__, "member_type", member_type)
        if backend_set_mappings is not None:
            pulumi.set(__self__, "backend_set_mappings", backend_set_mappings)
        if block_volume_operations is not None:
            pulumi.set(__self__, "block_volume_operations", block_volume_operations)
        if destination_availability_domain is not None:
            pulumi.set(__self__, "destination_availability_domain", destination_availability_domain)
        if destination_capacity_reservation_id is not None:
            pulumi.set(__self__, "destination_capacity_reservation_id", destination_capacity_reservation_id)
        if destination_compartment_id is not None:
            pulumi.set(__self__, "destination_compartment_id", destination_compartment_id)
        if destination_dedicated_vm_host_id is not None:
            pulumi.set(__self__, "destination_dedicated_vm_host_id", destination_dedicated_vm_host_id)
        if destination_load_balancer_id is not None:
            pulumi.set(__self__, "destination_load_balancer_id", destination_load_balancer_id)
        if destination_network_load_balancer_id is not None:
            pulumi.set(__self__, "destination_network_load_balancer_id", destination_network_load_balancer_id)
        if export_mappings is not None:
            pulumi.set(__self__, "export_mappings", export_mappings)
        if file_system_operations is not None:
            pulumi.set(__self__, "file_system_operations", file_system_operations)
        if is_movable is not None:
            pulumi.set(__self__, "is_movable", is_movable)
        if is_retain_fault_domain is not None:
            pulumi.set(__self__, "is_retain_fault_domain", is_retain_fault_domain)
        if is_start_stop_enabled is not None:
            pulumi.set(__self__, "is_start_stop_enabled", is_start_stop_enabled)
        if password_vault_secret_id is not None:
            pulumi.set(__self__, "password_vault_secret_id", password_vault_secret_id)
        if vnic_mapping is not None:
            pulumi.set(__self__, "vnic_mapping", vnic_mapping)
        if vnic_mappings is not None:
            pulumi.set(__self__, "vnic_mappings", vnic_mappings)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "member_type")

    @member_type.setter
    def member_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "member_type", value)

    @property
    @pulumi.getter(name="backendSetMappings")
    def backend_set_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBackendSetMappingArgs']]]]:
        return pulumi.get(self, "backend_set_mappings")

    @backend_set_mappings.setter
    def backend_set_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBackendSetMappingArgs']]]]):
        pulumi.set(self, "backend_set_mappings", value)

    @property
    @pulumi.getter(name="blockVolumeOperations")
    def block_volume_operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationArgs']]]]:
        return pulumi.get(self, "block_volume_operations")

    @block_volume_operations.setter
    def block_volume_operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationArgs']]]]):
        pulumi.set(self, "block_volume_operations", value)

    @property
    @pulumi.getter(name="destinationAvailabilityDomain")
    def destination_availability_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_availability_domain")

    @destination_availability_domain.setter
    def destination_availability_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_availability_domain", value)

    @property
    @pulumi.getter(name="destinationCapacityReservationId")
    def destination_capacity_reservation_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_capacity_reservation_id")

    @destination_capacity_reservation_id.setter
    def destination_capacity_reservation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_capacity_reservation_id", value)

    @property
    @pulumi.getter(name="destinationCompartmentId")
    def destination_compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_compartment_id")

    @destination_compartment_id.setter
    def destination_compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_compartment_id", value)

    @property
    @pulumi.getter(name="destinationDedicatedVmHostId")
    def destination_dedicated_vm_host_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_dedicated_vm_host_id")

    @destination_dedicated_vm_host_id.setter
    def destination_dedicated_vm_host_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_dedicated_vm_host_id", value)

    @property
    @pulumi.getter(name="destinationLoadBalancerId")
    def destination_load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_load_balancer_id")

    @destination_load_balancer_id.setter
    def destination_load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_load_balancer_id", value)

    @property
    @pulumi.getter(name="destinationNetworkLoadBalancerId")
    def destination_network_load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_network_load_balancer_id")

    @destination_network_load_balancer_id.setter
    def destination_network_load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_network_load_balancer_id", value)

    @property
    @pulumi.getter(name="exportMappings")
    def export_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberExportMappingArgs']]]]:
        return pulumi.get(self, "export_mappings")

    @export_mappings.setter
    def export_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberExportMappingArgs']]]]):
        pulumi.set(self, "export_mappings", value)

    @property
    @pulumi.getter(name="fileSystemOperations")
    def file_system_operations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberFileSystemOperationArgs']]]]:
        return pulumi.get(self, "file_system_operations")

    @file_system_operations.setter
    def file_system_operations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberFileSystemOperationArgs']]]]):
        pulumi.set(self, "file_system_operations", value)

    @property
    @pulumi.getter(name="isMovable")
    def is_movable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_movable")

    @is_movable.setter
    def is_movable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_movable", value)

    @property
    @pulumi.getter(name="isRetainFaultDomain")
    def is_retain_fault_domain(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_retain_fault_domain")

    @is_retain_fault_domain.setter
    def is_retain_fault_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_retain_fault_domain", value)

    @property
    @pulumi.getter(name="isStartStopEnabled")
    def is_start_stop_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_start_stop_enabled")

    @is_start_stop_enabled.setter
    def is_start_stop_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_start_stop_enabled", value)

    @property
    @pulumi.getter(name="passwordVaultSecretId")
    def password_vault_secret_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_vault_secret_id")

    @password_vault_secret_id.setter
    def password_vault_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_vault_secret_id", value)

    @property
    @pulumi.getter(name="vnicMapping")
    def vnic_mapping(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]]:
        return pulumi.get(self, "vnic_mapping")

    @vnic_mapping.setter
    def vnic_mapping(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]]):
        pulumi.set(self, "vnic_mapping", value)

    @property
    @pulumi.getter(name="vnicMappings")
    def vnic_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]]:
        return pulumi.get(self, "vnic_mappings")

    @vnic_mappings.setter
    def vnic_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrProtectionGroupMemberVnicMappingArgs']]]]):
        pulumi.set(self, "vnic_mappings", value)


@pulumi.input_type
class DrProtectionGroupMemberBackendSetMappingArgs:
    def __init__(__self__, *,
                 destination_backend_set_name: Optional[pulumi.Input[str]] = None,
                 is_backend_set_for_non_movable: Optional[pulumi.Input[bool]] = None,
                 source_backend_set_name: Optional[pulumi.Input[str]] = None):
        if destination_backend_set_name is not None:
            pulumi.set(__self__, "destination_backend_set_name", destination_backend_set_name)
        if is_backend_set_for_non_movable is not None:
            pulumi.set(__self__, "is_backend_set_for_non_movable", is_backend_set_for_non_movable)
        if source_backend_set_name is not None:
            pulumi.set(__self__, "source_backend_set_name", source_backend_set_name)

    @property
    @pulumi.getter(name="destinationBackendSetName")
    def destination_backend_set_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_backend_set_name")

    @destination_backend_set_name.setter
    def destination_backend_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_backend_set_name", value)

    @property
    @pulumi.getter(name="isBackendSetForNonMovable")
    def is_backend_set_for_non_movable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_backend_set_for_non_movable")

    @is_backend_set_for_non_movable.setter
    def is_backend_set_for_non_movable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_backend_set_for_non_movable", value)

    @property
    @pulumi.getter(name="sourceBackendSetName")
    def source_backend_set_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_backend_set_name")

    @source_backend_set_name.setter
    def source_backend_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_backend_set_name", value)


@pulumi.input_type
class DrProtectionGroupMemberBlockVolumeOperationArgs:
    def __init__(__self__, *,
                 attachment_details: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs']] = None,
                 block_volume_id: Optional[pulumi.Input[str]] = None,
                 mount_details: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs']] = None):
        if attachment_details is not None:
            pulumi.set(__self__, "attachment_details", attachment_details)
        if block_volume_id is not None:
            pulumi.set(__self__, "block_volume_id", block_volume_id)
        if mount_details is not None:
            pulumi.set(__self__, "mount_details", mount_details)

    @property
    @pulumi.getter(name="attachmentDetails")
    def attachment_details(self) -> Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs']]:
        return pulumi.get(self, "attachment_details")

    @attachment_details.setter
    def attachment_details(self, value: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs']]):
        pulumi.set(self, "attachment_details", value)

    @property
    @pulumi.getter(name="blockVolumeId")
    def block_volume_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "block_volume_id")

    @block_volume_id.setter
    def block_volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "block_volume_id", value)

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs']]:
        return pulumi.get(self, "mount_details")

    @mount_details.setter
    def mount_details(self, value: Optional[pulumi.Input['DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs']]):
        pulumi.set(self, "mount_details", value)


@pulumi.input_type
class DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs:
    def __init__(__self__, *,
                 volume_attachment_reference_instance_id: Optional[pulumi.Input[str]] = None):
        if volume_attachment_reference_instance_id is not None:
            pulumi.set(__self__, "volume_attachment_reference_instance_id", volume_attachment_reference_instance_id)

    @property
    @pulumi.getter(name="volumeAttachmentReferenceInstanceId")
    def volume_attachment_reference_instance_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_attachment_reference_instance_id")

    @volume_attachment_reference_instance_id.setter
    def volume_attachment_reference_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_attachment_reference_instance_id", value)


@pulumi.input_type
class DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs:
    def __init__(__self__, *,
                 mount_point: Optional[pulumi.Input[str]] = None):
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_point")

    @mount_point.setter
    def mount_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_point", value)


@pulumi.input_type
class DrProtectionGroupMemberExportMappingArgs:
    def __init__(__self__, *,
                 destination_mount_target_id: Optional[pulumi.Input[str]] = None,
                 export_id: Optional[pulumi.Input[str]] = None):
        if destination_mount_target_id is not None:
            pulumi.set(__self__, "destination_mount_target_id", destination_mount_target_id)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)

    @property
    @pulumi.getter(name="destinationMountTargetId")
    def destination_mount_target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_mount_target_id")

    @destination_mount_target_id.setter
    def destination_mount_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_mount_target_id", value)

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "export_id")

    @export_id.setter
    def export_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_id", value)


@pulumi.input_type
class DrProtectionGroupMemberFileSystemOperationArgs:
    def __init__(__self__, *,
                 export_path: Optional[pulumi.Input[str]] = None,
                 mount_details: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationMountDetailsArgs']] = None,
                 mount_point: Optional[pulumi.Input[str]] = None,
                 mount_target_id: Optional[pulumi.Input[str]] = None,
                 unmount_details: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs']] = None):
        if export_path is not None:
            pulumi.set(__self__, "export_path", export_path)
        if mount_details is not None:
            pulumi.set(__self__, "mount_details", mount_details)
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if unmount_details is not None:
            pulumi.set(__self__, "unmount_details", unmount_details)

    @property
    @pulumi.getter(name="exportPath")
    def export_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "export_path")

    @export_path.setter
    def export_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_path", value)

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationMountDetailsArgs']]:
        return pulumi.get(self, "mount_details")

    @mount_details.setter
    def mount_details(self, value: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationMountDetailsArgs']]):
        pulumi.set(self, "mount_details", value)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_point")

    @mount_point.setter
    def mount_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_point", value)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_target_id")

    @mount_target_id.setter
    def mount_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target_id", value)

    @property
    @pulumi.getter(name="unmountDetails")
    def unmount_details(self) -> Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs']]:
        return pulumi.get(self, "unmount_details")

    @unmount_details.setter
    def unmount_details(self, value: Optional[pulumi.Input['DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs']]):
        pulumi.set(self, "unmount_details", value)


@pulumi.input_type
class DrProtectionGroupMemberFileSystemOperationMountDetailsArgs:
    def __init__(__self__, *,
                 mount_target_id: Optional[pulumi.Input[str]] = None):
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_target_id")

    @mount_target_id.setter
    def mount_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target_id", value)


@pulumi.input_type
class DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs:
    def __init__(__self__, *,
                 mount_target_id: Optional[pulumi.Input[str]] = None):
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mount_target_id")

    @mount_target_id.setter
    def mount_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target_id", value)


@pulumi.input_type
class DrProtectionGroupMemberVnicMappingArgs:
    def __init__(__self__, *,
                 destination_nsg_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 destination_primary_private_ip_address: Optional[pulumi.Input[str]] = None,
                 destination_primary_private_ip_hostname_label: Optional[pulumi.Input[str]] = None,
                 destination_subnet_id: Optional[pulumi.Input[str]] = None,
                 source_vnic_id: Optional[pulumi.Input[str]] = None):
        if destination_nsg_id_lists is not None:
            pulumi.set(__self__, "destination_nsg_id_lists", destination_nsg_id_lists)
        if destination_primary_private_ip_address is not None:
            pulumi.set(__self__, "destination_primary_private_ip_address", destination_primary_private_ip_address)
        if destination_primary_private_ip_hostname_label is not None:
            pulumi.set(__self__, "destination_primary_private_ip_hostname_label", destination_primary_private_ip_hostname_label)
        if destination_subnet_id is not None:
            pulumi.set(__self__, "destination_subnet_id", destination_subnet_id)
        if source_vnic_id is not None:
            pulumi.set(__self__, "source_vnic_id", source_vnic_id)

    @property
    @pulumi.getter(name="destinationNsgIdLists")
    def destination_nsg_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_nsg_id_lists")

    @destination_nsg_id_lists.setter
    def destination_nsg_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_nsg_id_lists", value)

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpAddress")
    def destination_primary_private_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_primary_private_ip_address")

    @destination_primary_private_ip_address.setter
    def destination_primary_private_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_primary_private_ip_address", value)

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpHostnameLabel")
    def destination_primary_private_ip_hostname_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_primary_private_ip_hostname_label")

    @destination_primary_private_ip_hostname_label.setter
    def destination_primary_private_ip_hostname_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_primary_private_ip_hostname_label", value)

    @property
    @pulumi.getter(name="destinationSubnetId")
    def destination_subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_subnet_id")

    @destination_subnet_id.setter
    def destination_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_subnet_id", value)

    @property
    @pulumi.getter(name="sourceVnicId")
    def source_vnic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_vnic_id")

    @source_vnic_id.setter
    def source_vnic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_vnic_id", value)


@pulumi.input_type
class GetDrPlanExecutionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDrPlansFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class GetDrProtectionGroupsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[bool]):
        pulumi.set(self, "regex", value)


