# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DrPlanExecutionArgs', 'DrPlanExecution']

@pulumi.input_type
class DrPlanExecutionArgs:
    def __init__(__self__, *,
                 execution_options: pulumi.Input['DrPlanExecutionExecutionOptionsArgs'],
                 plan_id: pulumi.Input[str],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a DrPlanExecution resource.
        """
        pulumi.set(__self__, "execution_options", execution_options)
        pulumi.set(__self__, "plan_id", plan_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)

    @property
    @pulumi.getter(name="executionOptions")
    def execution_options(self) -> pulumi.Input['DrPlanExecutionExecutionOptionsArgs']:
        return pulumi.get(self, "execution_options")

    @execution_options.setter
    def execution_options(self, value: pulumi.Input['DrPlanExecutionExecutionOptionsArgs']):
        pulumi.set(self, "execution_options", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)


@pulumi.input_type
class _DrPlanExecutionState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 dr_protection_group_id: Optional[pulumi.Input[str]] = None,
                 execution_duration_in_sec: Optional[pulumi.Input[int]] = None,
                 execution_options: Optional[pulumi.Input['DrPlanExecutionExecutionOptionsArgs']] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 group_executions: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionArgs']]]] = None,
                 life_cycle_details: Optional[pulumi.Input[str]] = None,
                 log_locations: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionLogLocationArgs']]]] = None,
                 peer_dr_protection_group_id: Optional[pulumi.Input[str]] = None,
                 peer_region: Optional[pulumi.Input[str]] = None,
                 plan_execution_type: Optional[pulumi.Input[str]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_ended: Optional[pulumi.Input[str]] = None,
                 time_started: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DrPlanExecution resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dr_protection_group_id is not None:
            pulumi.set(__self__, "dr_protection_group_id", dr_protection_group_id)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if execution_options is not None:
            pulumi.set(__self__, "execution_options", execution_options)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if group_executions is not None:
            pulumi.set(__self__, "group_executions", group_executions)
        if life_cycle_details is not None:
            pulumi.set(__self__, "life_cycle_details", life_cycle_details)
        if log_locations is not None:
            pulumi.set(__self__, "log_locations", log_locations)
        if peer_dr_protection_group_id is not None:
            pulumi.set(__self__, "peer_dr_protection_group_id", peer_dr_protection_group_id)
        if peer_region is not None:
            pulumi.set(__self__, "peer_region", peer_region)
        if plan_execution_type is not None:
            pulumi.set(__self__, "plan_execution_type", plan_execution_type)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="drProtectionGroupId")
    def dr_protection_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dr_protection_group_id")

    @dr_protection_group_id.setter
    def dr_protection_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dr_protection_group_id", value)

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "execution_duration_in_sec")

    @execution_duration_in_sec.setter
    def execution_duration_in_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "execution_duration_in_sec", value)

    @property
    @pulumi.getter(name="executionOptions")
    def execution_options(self) -> Optional[pulumi.Input['DrPlanExecutionExecutionOptionsArgs']]:
        return pulumi.get(self, "execution_options")

    @execution_options.setter
    def execution_options(self, value: Optional[pulumi.Input['DrPlanExecutionExecutionOptionsArgs']]):
        pulumi.set(self, "execution_options", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="groupExecutions")
    def group_executions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionArgs']]]]:
        return pulumi.get(self, "group_executions")

    @group_executions.setter
    def group_executions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionGroupExecutionArgs']]]]):
        pulumi.set(self, "group_executions", value)

    @property
    @pulumi.getter(name="lifeCycleDetails")
    def life_cycle_details(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "life_cycle_details")

    @life_cycle_details.setter
    def life_cycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "life_cycle_details", value)

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionLogLocationArgs']]]]:
        return pulumi.get(self, "log_locations")

    @log_locations.setter
    def log_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DrPlanExecutionLogLocationArgs']]]]):
        pulumi.set(self, "log_locations", value)

    @property
    @pulumi.getter(name="peerDrProtectionGroupId")
    def peer_dr_protection_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_dr_protection_group_id")

    @peer_dr_protection_group_id.setter
    def peer_dr_protection_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_dr_protection_group_id", value)

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "peer_region")

    @peer_region.setter
    def peer_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_region", value)

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plan_execution_type")

    @plan_execution_type.setter
    def plan_execution_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_execution_type", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_ended")

    @time_ended.setter
    def time_ended(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_ended", value)

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_started")

    @time_started.setter
    def time_started(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_started", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class DrPlanExecution(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 execution_options: Optional[pulumi.Input[pulumi.InputType['DrPlanExecutionExecutionOptionsArgs']]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DrPlanExecution resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DrPlanExecutionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DrPlanExecution resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DrPlanExecutionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DrPlanExecutionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 execution_options: Optional[pulumi.Input[pulumi.InputType['DrPlanExecutionExecutionOptionsArgs']]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DrPlanExecutionArgs.__new__(DrPlanExecutionArgs)

            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            if execution_options is None and not opts.urn:
                raise TypeError("Missing required property 'execution_options'")
            __props__.__dict__["execution_options"] = execution_options
            __props__.__dict__["freeform_tags"] = freeform_tags
            if plan_id is None and not opts.urn:
                raise TypeError("Missing required property 'plan_id'")
            __props__.__dict__["plan_id"] = plan_id
            __props__.__dict__["compartment_id"] = None
            __props__.__dict__["dr_protection_group_id"] = None
            __props__.__dict__["execution_duration_in_sec"] = None
            __props__.__dict__["group_executions"] = None
            __props__.__dict__["life_cycle_details"] = None
            __props__.__dict__["log_locations"] = None
            __props__.__dict__["peer_dr_protection_group_id"] = None
            __props__.__dict__["peer_region"] = None
            __props__.__dict__["plan_execution_type"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_ended"] = None
            __props__.__dict__["time_started"] = None
            __props__.__dict__["time_updated"] = None
        super(DrPlanExecution, __self__).__init__(
            'oci:DisasterRecovery/drPlanExecution:DrPlanExecution',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            dr_protection_group_id: Optional[pulumi.Input[str]] = None,
            execution_duration_in_sec: Optional[pulumi.Input[int]] = None,
            execution_options: Optional[pulumi.Input[pulumi.InputType['DrPlanExecutionExecutionOptionsArgs']]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            group_executions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DrPlanExecutionGroupExecutionArgs']]]]] = None,
            life_cycle_details: Optional[pulumi.Input[str]] = None,
            log_locations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DrPlanExecutionLogLocationArgs']]]]] = None,
            peer_dr_protection_group_id: Optional[pulumi.Input[str]] = None,
            peer_region: Optional[pulumi.Input[str]] = None,
            plan_execution_type: Optional[pulumi.Input[str]] = None,
            plan_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_ended: Optional[pulumi.Input[str]] = None,
            time_started: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'DrPlanExecution':
        """
        Get an existing DrPlanExecution resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DrPlanExecutionState.__new__(_DrPlanExecutionState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["dr_protection_group_id"] = dr_protection_group_id
        __props__.__dict__["execution_duration_in_sec"] = execution_duration_in_sec
        __props__.__dict__["execution_options"] = execution_options
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["group_executions"] = group_executions
        __props__.__dict__["life_cycle_details"] = life_cycle_details
        __props__.__dict__["log_locations"] = log_locations
        __props__.__dict__["peer_dr_protection_group_id"] = peer_dr_protection_group_id
        __props__.__dict__["peer_region"] = peer_region
        __props__.__dict__["plan_execution_type"] = plan_execution_type
        __props__.__dict__["plan_id"] = plan_id
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_ended"] = time_ended
        __props__.__dict__["time_started"] = time_started
        __props__.__dict__["time_updated"] = time_updated
        return DrPlanExecution(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drProtectionGroupId")
    def dr_protection_group_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dr_protection_group_id")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="executionOptions")
    def execution_options(self) -> pulumi.Output['outputs.DrPlanExecutionExecutionOptions']:
        return pulumi.get(self, "execution_options")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="groupExecutions")
    def group_executions(self) -> pulumi.Output[Optional[Sequence['outputs.DrPlanExecutionGroupExecution']]]:
        return pulumi.get(self, "group_executions")

    @property
    @pulumi.getter(name="lifeCycleDetails")
    def life_cycle_details(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "life_cycle_details")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> pulumi.Output[Optional[Sequence['outputs.DrPlanExecutionLogLocation']]]:
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter(name="peerDrProtectionGroupId")
    def peer_dr_protection_group_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "peer_dr_protection_group_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "plan_execution_type")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "time_updated")

