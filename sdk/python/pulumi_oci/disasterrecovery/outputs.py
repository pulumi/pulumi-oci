# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DrPlanExecutionExecutionOptions',
    'DrPlanExecutionGroupExecution',
    'DrPlanExecutionGroupExecutionStepExecution',
    'DrPlanExecutionGroupExecutionStepExecutionLogLocation',
    'DrPlanExecutionLogLocation',
    'DrPlanPlanGroup',
    'DrPlanPlanGroupStep',
    'DrPlanPlanGroupStepUserDefinedStep',
    'DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation',
    'DrProtectionGroupAssociation',
    'DrProtectionGroupLogLocation',
    'DrProtectionGroupMember',
    'DrProtectionGroupMemberBackendSetMapping',
    'DrProtectionGroupMemberBlockVolumeOperation',
    'DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails',
    'DrProtectionGroupMemberBlockVolumeOperationMountDetails',
    'DrProtectionGroupMemberExportMapping',
    'DrProtectionGroupMemberFileSystemOperation',
    'DrProtectionGroupMemberFileSystemOperationMountDetails',
    'DrProtectionGroupMemberFileSystemOperationUnmountDetails',
    'DrProtectionGroupMemberVnicMapping',
    'GetDrPlanExecutionExecutionOptionResult',
    'GetDrPlanExecutionGroupExecutionResult',
    'GetDrPlanExecutionGroupExecutionStepExecutionResult',
    'GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult',
    'GetDrPlanExecutionLogLocationResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult',
    'GetDrPlanExecutionsFilterResult',
    'GetDrPlanPlanGroupResult',
    'GetDrPlanPlanGroupStepResult',
    'GetDrPlanPlanGroupStepUserDefinedStepResult',
    'GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult',
    'GetDrPlansDrPlanCollectionResult',
    'GetDrPlansDrPlanCollectionItemResult',
    'GetDrPlansDrPlanCollectionItemPlanGroupResult',
    'GetDrPlansDrPlanCollectionItemPlanGroupStepResult',
    'GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult',
    'GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult',
    'GetDrPlansFilterResult',
    'GetDrProtectionGroupAssociationResult',
    'GetDrProtectionGroupLogLocationResult',
    'GetDrProtectionGroupMemberResult',
    'GetDrProtectionGroupMemberBackendSetMappingResult',
    'GetDrProtectionGroupMemberBlockVolumeOperationResult',
    'GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult',
    'GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult',
    'GetDrProtectionGroupMemberExportMappingResult',
    'GetDrProtectionGroupMemberFileSystemOperationResult',
    'GetDrProtectionGroupMemberFileSystemOperationMountDetailResult',
    'GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult',
    'GetDrProtectionGroupMemberVnicMappingResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult',
    'GetDrProtectionGroupsFilterResult',
]

@pulumi.output_type
class DrPlanExecutionExecutionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planExecutionType":
            suggest = "plan_execution_type"
        elif key == "arePrechecksEnabled":
            suggest = "are_prechecks_enabled"
        elif key == "areWarningsIgnored":
            suggest = "are_warnings_ignored"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanExecutionExecutionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanExecutionExecutionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanExecutionExecutionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plan_execution_type: str,
                 are_prechecks_enabled: Optional[bool] = None,
                 are_warnings_ignored: Optional[bool] = None):
        pulumi.set(__self__, "plan_execution_type", plan_execution_type)
        if are_prechecks_enabled is not None:
            pulumi.set(__self__, "are_prechecks_enabled", are_prechecks_enabled)
        if are_warnings_ignored is not None:
            pulumi.set(__self__, "are_warnings_ignored", are_warnings_ignored)

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> str:
        return pulumi.get(self, "plan_execution_type")

    @property
    @pulumi.getter(name="arePrechecksEnabled")
    def are_prechecks_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_prechecks_enabled")

    @property
    @pulumi.getter(name="areWarningsIgnored")
    def are_warnings_ignored(self) -> Optional[bool]:
        return pulumi.get(self, "are_warnings_ignored")


@pulumi.output_type
class DrPlanExecutionGroupExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "executionDurationInSec":
            suggest = "execution_duration_in_sec"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "statusDetails":
            suggest = "status_details"
        elif key == "stepExecutions":
            suggest = "step_executions"
        elif key == "timeEnded":
            suggest = "time_ended"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanExecutionGroupExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanExecutionGroupExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanExecutionGroupExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 execution_duration_in_sec: Optional[int] = None,
                 group_id: Optional[str] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 step_executions: Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecution']] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if step_executions is not None:
            pulumi.set(__self__, "step_executions", step_executions)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepExecutions")
    def step_executions(self) -> Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecution']]:
        return pulumi.get(self, "step_executions")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DrPlanExecutionGroupExecutionStepExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "executionDurationInSec":
            suggest = "execution_duration_in_sec"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "logLocations":
            suggest = "log_locations"
        elif key == "statusDetails":
            suggest = "status_details"
        elif key == "stepId":
            suggest = "step_id"
        elif key == "timeEnded":
            suggest = "time_ended"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanExecutionGroupExecutionStepExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanExecutionGroupExecutionStepExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanExecutionGroupExecutionStepExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 execution_duration_in_sec: Optional[int] = None,
                 group_id: Optional[str] = None,
                 log_locations: Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecutionLogLocation']] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 step_id: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if log_locations is not None:
            pulumi.set(__self__, "log_locations", log_locations)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if step_id is not None:
            pulumi.set(__self__, "step_id", step_id)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecutionLogLocation']]:
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> Optional[str]:
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DrPlanExecutionGroupExecutionStepExecutionLogLocation(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class DrPlanExecutionLogLocation(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class DrPlanPlanGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanPlanGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanPlanGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanPlanGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 steps: Optional[Sequence['outputs.DrPlanPlanGroupStep']] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.DrPlanPlanGroupStep']]:
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class DrPlanPlanGroupStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "errorMode":
            suggest = "error_mode"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "memberId":
            suggest = "member_id"
        elif key == "userDefinedSteps":
            suggest = "user_defined_steps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanPlanGroupStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanPlanGroupStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanPlanGroupStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 error_mode: Optional[str] = None,
                 group_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 member_id: Optional[str] = None,
                 timeout: Optional[int] = None,
                 type: Optional[str] = None,
                 user_defined_steps: Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStep']] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if error_mode is not None:
            pulumi.set(__self__, "error_mode", error_mode)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_defined_steps is not None:
            pulumi.set(__self__, "user_defined_steps", user_defined_steps)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorMode")
    def error_mode(self) -> Optional[str]:
        return pulumi.get(self, "error_mode")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[str]:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefinedSteps")
    def user_defined_steps(self) -> Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStep']]:
        return pulumi.get(self, "user_defined_steps")


@pulumi.output_type
class DrPlanPlanGroupStepUserDefinedStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionId":
            suggest = "function_id"
        elif key == "functionRegion":
            suggest = "function_region"
        elif key == "objectStorageScriptLocations":
            suggest = "object_storage_script_locations"
        elif key == "requestBody":
            suggest = "request_body"
        elif key == "runAsUser":
            suggest = "run_as_user"
        elif key == "runOnInstanceId":
            suggest = "run_on_instance_id"
        elif key == "runOnInstanceRegion":
            suggest = "run_on_instance_region"
        elif key == "scriptCommand":
            suggest = "script_command"
        elif key == "stepType":
            suggest = "step_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanPlanGroupStepUserDefinedStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanPlanGroupStepUserDefinedStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanPlanGroupStepUserDefinedStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_id: Optional[str] = None,
                 function_region: Optional[str] = None,
                 object_storage_script_locations: Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation']] = None,
                 request_body: Optional[str] = None,
                 run_as_user: Optional[str] = None,
                 run_on_instance_id: Optional[str] = None,
                 run_on_instance_region: Optional[str] = None,
                 script_command: Optional[str] = None,
                 step_type: Optional[str] = None):
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if function_region is not None:
            pulumi.set(__self__, "function_region", function_region)
        if object_storage_script_locations is not None:
            pulumi.set(__self__, "object_storage_script_locations", object_storage_script_locations)
        if request_body is not None:
            pulumi.set(__self__, "request_body", request_body)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if run_on_instance_id is not None:
            pulumi.set(__self__, "run_on_instance_id", run_on_instance_id)
        if run_on_instance_region is not None:
            pulumi.set(__self__, "run_on_instance_region", run_on_instance_region)
        if script_command is not None:
            pulumi.set(__self__, "script_command", script_command)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="functionRegion")
    def function_region(self) -> Optional[str]:
        return pulumi.get(self, "function_region")

    @property
    @pulumi.getter(name="objectStorageScriptLocations")
    def object_storage_script_locations(self) -> Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation']]:
        return pulumi.get(self, "object_storage_script_locations")

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> Optional[str]:
        return pulumi.get(self, "request_body")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="runOnInstanceId")
    def run_on_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "run_on_instance_id")

    @property
    @pulumi.getter(name="runOnInstanceRegion")
    def run_on_instance_region(self) -> Optional[str]:
        return pulumi.get(self, "run_on_instance_region")

    @property
    @pulumi.getter(name="scriptCommand")
    def script_command(self) -> Optional[str]:
        return pulumi.get(self, "script_command")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        return pulumi.get(self, "step_type")


@pulumi.output_type
class DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class DrProtectionGroupAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "peerId":
            suggest = "peer_id"
        elif key == "peerRegion":
            suggest = "peer_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: str,
                 peer_id: Optional[str] = None,
                 peer_region: Optional[str] = None):
        pulumi.set(__self__, "role", role)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_region is not None:
            pulumi.set(__self__, "peer_region", peer_region)

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[str]:
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[str]:
        return pulumi.get(self, "peer_region")


@pulumi.output_type
class DrProtectionGroupLogLocation(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: Optional[str] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class DrProtectionGroupMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memberId":
            suggest = "member_id"
        elif key == "memberType":
            suggest = "member_type"
        elif key == "backendSetMappings":
            suggest = "backend_set_mappings"
        elif key == "blockVolumeOperations":
            suggest = "block_volume_operations"
        elif key == "destinationAvailabilityDomain":
            suggest = "destination_availability_domain"
        elif key == "destinationCapacityReservationId":
            suggest = "destination_capacity_reservation_id"
        elif key == "destinationCompartmentId":
            suggest = "destination_compartment_id"
        elif key == "destinationDedicatedVmHostId":
            suggest = "destination_dedicated_vm_host_id"
        elif key == "destinationLoadBalancerId":
            suggest = "destination_load_balancer_id"
        elif key == "destinationNetworkLoadBalancerId":
            suggest = "destination_network_load_balancer_id"
        elif key == "exportMappings":
            suggest = "export_mappings"
        elif key == "fileSystemOperations":
            suggest = "file_system_operations"
        elif key == "isMovable":
            suggest = "is_movable"
        elif key == "isRetainFaultDomain":
            suggest = "is_retain_fault_domain"
        elif key == "isStartStopEnabled":
            suggest = "is_start_stop_enabled"
        elif key == "passwordVaultSecretId":
            suggest = "password_vault_secret_id"
        elif key == "vnicMapping":
            suggest = "vnic_mapping"
        elif key == "vnicMappings":
            suggest = "vnic_mappings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 member_id: str,
                 member_type: str,
                 backend_set_mappings: Optional[Sequence['outputs.DrProtectionGroupMemberBackendSetMapping']] = None,
                 block_volume_operations: Optional[Sequence['outputs.DrProtectionGroupMemberBlockVolumeOperation']] = None,
                 destination_availability_domain: Optional[str] = None,
                 destination_capacity_reservation_id: Optional[str] = None,
                 destination_compartment_id: Optional[str] = None,
                 destination_dedicated_vm_host_id: Optional[str] = None,
                 destination_load_balancer_id: Optional[str] = None,
                 destination_network_load_balancer_id: Optional[str] = None,
                 export_mappings: Optional[Sequence['outputs.DrProtectionGroupMemberExportMapping']] = None,
                 file_system_operations: Optional[Sequence['outputs.DrProtectionGroupMemberFileSystemOperation']] = None,
                 is_movable: Optional[bool] = None,
                 is_retain_fault_domain: Optional[bool] = None,
                 is_start_stop_enabled: Optional[bool] = None,
                 password_vault_secret_id: Optional[str] = None,
                 vnic_mapping: Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']] = None,
                 vnic_mappings: Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']] = None):
        pulumi.set(__self__, "member_id", member_id)
        pulumi.set(__self__, "member_type", member_type)
        if backend_set_mappings is not None:
            pulumi.set(__self__, "backend_set_mappings", backend_set_mappings)
        if block_volume_operations is not None:
            pulumi.set(__self__, "block_volume_operations", block_volume_operations)
        if destination_availability_domain is not None:
            pulumi.set(__self__, "destination_availability_domain", destination_availability_domain)
        if destination_capacity_reservation_id is not None:
            pulumi.set(__self__, "destination_capacity_reservation_id", destination_capacity_reservation_id)
        if destination_compartment_id is not None:
            pulumi.set(__self__, "destination_compartment_id", destination_compartment_id)
        if destination_dedicated_vm_host_id is not None:
            pulumi.set(__self__, "destination_dedicated_vm_host_id", destination_dedicated_vm_host_id)
        if destination_load_balancer_id is not None:
            pulumi.set(__self__, "destination_load_balancer_id", destination_load_balancer_id)
        if destination_network_load_balancer_id is not None:
            pulumi.set(__self__, "destination_network_load_balancer_id", destination_network_load_balancer_id)
        if export_mappings is not None:
            pulumi.set(__self__, "export_mappings", export_mappings)
        if file_system_operations is not None:
            pulumi.set(__self__, "file_system_operations", file_system_operations)
        if is_movable is not None:
            pulumi.set(__self__, "is_movable", is_movable)
        if is_retain_fault_domain is not None:
            pulumi.set(__self__, "is_retain_fault_domain", is_retain_fault_domain)
        if is_start_stop_enabled is not None:
            pulumi.set(__self__, "is_start_stop_enabled", is_start_stop_enabled)
        if password_vault_secret_id is not None:
            pulumi.set(__self__, "password_vault_secret_id", password_vault_secret_id)
        if vnic_mapping is not None:
            pulumi.set(__self__, "vnic_mapping", vnic_mapping)
        if vnic_mappings is not None:
            pulumi.set(__self__, "vnic_mappings", vnic_mappings)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> str:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> str:
        return pulumi.get(self, "member_type")

    @property
    @pulumi.getter(name="backendSetMappings")
    def backend_set_mappings(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberBackendSetMapping']]:
        return pulumi.get(self, "backend_set_mappings")

    @property
    @pulumi.getter(name="blockVolumeOperations")
    def block_volume_operations(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberBlockVolumeOperation']]:
        return pulumi.get(self, "block_volume_operations")

    @property
    @pulumi.getter(name="destinationAvailabilityDomain")
    def destination_availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "destination_availability_domain")

    @property
    @pulumi.getter(name="destinationCapacityReservationId")
    def destination_capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_capacity_reservation_id")

    @property
    @pulumi.getter(name="destinationCompartmentId")
    def destination_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_compartment_id")

    @property
    @pulumi.getter(name="destinationDedicatedVmHostId")
    def destination_dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_dedicated_vm_host_id")

    @property
    @pulumi.getter(name="destinationLoadBalancerId")
    def destination_load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_load_balancer_id")

    @property
    @pulumi.getter(name="destinationNetworkLoadBalancerId")
    def destination_network_load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_network_load_balancer_id")

    @property
    @pulumi.getter(name="exportMappings")
    def export_mappings(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberExportMapping']]:
        return pulumi.get(self, "export_mappings")

    @property
    @pulumi.getter(name="fileSystemOperations")
    def file_system_operations(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberFileSystemOperation']]:
        return pulumi.get(self, "file_system_operations")

    @property
    @pulumi.getter(name="isMovable")
    def is_movable(self) -> Optional[bool]:
        return pulumi.get(self, "is_movable")

    @property
    @pulumi.getter(name="isRetainFaultDomain")
    def is_retain_fault_domain(self) -> Optional[bool]:
        return pulumi.get(self, "is_retain_fault_domain")

    @property
    @pulumi.getter(name="isStartStopEnabled")
    def is_start_stop_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_start_stop_enabled")

    @property
    @pulumi.getter(name="passwordVaultSecretId")
    def password_vault_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_vault_secret_id")

    @property
    @pulumi.getter(name="vnicMapping")
    def vnic_mapping(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']]:
        return pulumi.get(self, "vnic_mapping")

    @property
    @pulumi.getter(name="vnicMappings")
    def vnic_mappings(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']]:
        return pulumi.get(self, "vnic_mappings")


@pulumi.output_type
class DrProtectionGroupMemberBackendSetMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBackendSetName":
            suggest = "destination_backend_set_name"
        elif key == "isBackendSetForNonMovable":
            suggest = "is_backend_set_for_non_movable"
        elif key == "sourceBackendSetName":
            suggest = "source_backend_set_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberBackendSetMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberBackendSetMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberBackendSetMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_backend_set_name: Optional[str] = None,
                 is_backend_set_for_non_movable: Optional[bool] = None,
                 source_backend_set_name: Optional[str] = None):
        if destination_backend_set_name is not None:
            pulumi.set(__self__, "destination_backend_set_name", destination_backend_set_name)
        if is_backend_set_for_non_movable is not None:
            pulumi.set(__self__, "is_backend_set_for_non_movable", is_backend_set_for_non_movable)
        if source_backend_set_name is not None:
            pulumi.set(__self__, "source_backend_set_name", source_backend_set_name)

    @property
    @pulumi.getter(name="destinationBackendSetName")
    def destination_backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_backend_set_name")

    @property
    @pulumi.getter(name="isBackendSetForNonMovable")
    def is_backend_set_for_non_movable(self) -> Optional[bool]:
        return pulumi.get(self, "is_backend_set_for_non_movable")

    @property
    @pulumi.getter(name="sourceBackendSetName")
    def source_backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "source_backend_set_name")


@pulumi.output_type
class DrProtectionGroupMemberBlockVolumeOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachmentDetails":
            suggest = "attachment_details"
        elif key == "blockVolumeId":
            suggest = "block_volume_id"
        elif key == "mountDetails":
            suggest = "mount_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberBlockVolumeOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberBlockVolumeOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberBlockVolumeOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attachment_details: Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails'] = None,
                 block_volume_id: Optional[str] = None,
                 mount_details: Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationMountDetails'] = None):
        if attachment_details is not None:
            pulumi.set(__self__, "attachment_details", attachment_details)
        if block_volume_id is not None:
            pulumi.set(__self__, "block_volume_id", block_volume_id)
        if mount_details is not None:
            pulumi.set(__self__, "mount_details", mount_details)

    @property
    @pulumi.getter(name="attachmentDetails")
    def attachment_details(self) -> Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails']:
        return pulumi.get(self, "attachment_details")

    @property
    @pulumi.getter(name="blockVolumeId")
    def block_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_id")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationMountDetails']:
        return pulumi.get(self, "mount_details")


@pulumi.output_type
class DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeAttachmentReferenceInstanceId":
            suggest = "volume_attachment_reference_instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 volume_attachment_reference_instance_id: Optional[str] = None):
        if volume_attachment_reference_instance_id is not None:
            pulumi.set(__self__, "volume_attachment_reference_instance_id", volume_attachment_reference_instance_id)

    @property
    @pulumi.getter(name="volumeAttachmentReferenceInstanceId")
    def volume_attachment_reference_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_attachment_reference_instance_id")


@pulumi.output_type
class DrProtectionGroupMemberBlockVolumeOperationMountDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPoint":
            suggest = "mount_point"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberBlockVolumeOperationMountDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberBlockVolumeOperationMountDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberBlockVolumeOperationMountDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_point: Optional[str] = None):
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        return pulumi.get(self, "mount_point")


@pulumi.output_type
class DrProtectionGroupMemberExportMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationMountTargetId":
            suggest = "destination_mount_target_id"
        elif key == "exportId":
            suggest = "export_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberExportMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberExportMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberExportMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_mount_target_id: Optional[str] = None,
                 export_id: Optional[str] = None):
        if destination_mount_target_id is not None:
            pulumi.set(__self__, "destination_mount_target_id", destination_mount_target_id)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)

    @property
    @pulumi.getter(name="destinationMountTargetId")
    def destination_mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_mount_target_id")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")


@pulumi.output_type
class DrProtectionGroupMemberFileSystemOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportPath":
            suggest = "export_path"
        elif key == "mountDetails":
            suggest = "mount_details"
        elif key == "mountPoint":
            suggest = "mount_point"
        elif key == "mountTargetId":
            suggest = "mount_target_id"
        elif key == "unmountDetails":
            suggest = "unmount_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberFileSystemOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberFileSystemOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberFileSystemOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 export_path: Optional[str] = None,
                 mount_details: Optional['outputs.DrProtectionGroupMemberFileSystemOperationMountDetails'] = None,
                 mount_point: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 unmount_details: Optional['outputs.DrProtectionGroupMemberFileSystemOperationUnmountDetails'] = None):
        if export_path is not None:
            pulumi.set(__self__, "export_path", export_path)
        if mount_details is not None:
            pulumi.set(__self__, "mount_details", mount_details)
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if unmount_details is not None:
            pulumi.set(__self__, "unmount_details", unmount_details)

    @property
    @pulumi.getter(name="exportPath")
    def export_path(self) -> Optional[str]:
        return pulumi.get(self, "export_path")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional['outputs.DrProtectionGroupMemberFileSystemOperationMountDetails']:
        return pulumi.get(self, "mount_details")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter(name="unmountDetails")
    def unmount_details(self) -> Optional['outputs.DrProtectionGroupMemberFileSystemOperationUnmountDetails']:
        return pulumi.get(self, "unmount_details")


@pulumi.output_type
class DrProtectionGroupMemberFileSystemOperationMountDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberFileSystemOperationMountDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberFileSystemOperationMountDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberFileSystemOperationMountDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_target_id: Optional[str] = None):
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class DrProtectionGroupMemberFileSystemOperationUnmountDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberFileSystemOperationUnmountDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberFileSystemOperationUnmountDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberFileSystemOperationUnmountDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_target_id: Optional[str] = None):
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class DrProtectionGroupMemberVnicMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationNsgIdLists":
            suggest = "destination_nsg_id_lists"
        elif key == "destinationPrimaryPrivateIpAddress":
            suggest = "destination_primary_private_ip_address"
        elif key == "destinationPrimaryPrivateIpHostnameLabel":
            suggest = "destination_primary_private_ip_hostname_label"
        elif key == "destinationSubnetId":
            suggest = "destination_subnet_id"
        elif key == "sourceVnicId":
            suggest = "source_vnic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberVnicMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberVnicMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberVnicMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_nsg_id_lists: Optional[Sequence[str]] = None,
                 destination_primary_private_ip_address: Optional[str] = None,
                 destination_primary_private_ip_hostname_label: Optional[str] = None,
                 destination_subnet_id: Optional[str] = None,
                 source_vnic_id: Optional[str] = None):
        if destination_nsg_id_lists is not None:
            pulumi.set(__self__, "destination_nsg_id_lists", destination_nsg_id_lists)
        if destination_primary_private_ip_address is not None:
            pulumi.set(__self__, "destination_primary_private_ip_address", destination_primary_private_ip_address)
        if destination_primary_private_ip_hostname_label is not None:
            pulumi.set(__self__, "destination_primary_private_ip_hostname_label", destination_primary_private_ip_hostname_label)
        if destination_subnet_id is not None:
            pulumi.set(__self__, "destination_subnet_id", destination_subnet_id)
        if source_vnic_id is not None:
            pulumi.set(__self__, "source_vnic_id", source_vnic_id)

    @property
    @pulumi.getter(name="destinationNsgIdLists")
    def destination_nsg_id_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_nsg_id_lists")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpAddress")
    def destination_primary_private_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "destination_primary_private_ip_address")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpHostnameLabel")
    def destination_primary_private_ip_hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "destination_primary_private_ip_hostname_label")

    @property
    @pulumi.getter(name="destinationSubnetId")
    def destination_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_subnet_id")

    @property
    @pulumi.getter(name="sourceVnicId")
    def source_vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "source_vnic_id")


@pulumi.output_type
class GetDrPlanExecutionExecutionOptionResult(dict):
    def __init__(__self__, *,
                 are_prechecks_enabled: Optional[bool] = None,
                 are_warnings_ignored: Optional[bool] = None,
                 plan_execution_type: Optional[str] = None):
        if are_prechecks_enabled is not None:
            pulumi.set(__self__, "are_prechecks_enabled", are_prechecks_enabled)
        if are_warnings_ignored is not None:
            pulumi.set(__self__, "are_warnings_ignored", are_warnings_ignored)
        if plan_execution_type is not None:
            pulumi.set(__self__, "plan_execution_type", plan_execution_type)

    @property
    @pulumi.getter(name="arePrechecksEnabled")
    def are_prechecks_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_prechecks_enabled")

    @property
    @pulumi.getter(name="areWarningsIgnored")
    def are_warnings_ignored(self) -> Optional[bool]:
        return pulumi.get(self, "are_warnings_ignored")

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> Optional[str]:
        return pulumi.get(self, "plan_execution_type")


@pulumi.output_type
class GetDrPlanExecutionGroupExecutionResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 execution_duration_in_sec: Optional[int] = None,
                 group_id: Optional[str] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 step_executions: Optional[Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionResult']] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if step_executions is not None:
            pulumi.set(__self__, "step_executions", step_executions)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepExecutions")
    def step_executions(self) -> Optional[Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionResult']]:
        return pulumi.get(self, "step_executions")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanExecutionGroupExecutionStepExecutionResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 execution_duration_in_sec: Optional[int] = None,
                 group_id: Optional[str] = None,
                 log_locations: Optional[Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult']] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 step_id: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if log_locations is not None:
            pulumi.set(__self__, "log_locations", log_locations)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if step_id is not None:
            pulumi.set(__self__, "step_id", step_id)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult']]:
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> Optional[str]:
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlanExecutionLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dr_protection_group_id: Optional[str] = None,
                 execution_duration_in_sec: Optional[int] = None,
                 execution_options: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 group_executions: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult']] = None,
                 id: Optional[str] = None,
                 life_cycle_details: Optional[str] = None,
                 log_locations: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult']] = None,
                 peer_dr_protection_group_id: Optional[str] = None,
                 peer_region: Optional[str] = None,
                 plan_execution_type: Optional[str] = None,
                 plan_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dr_protection_group_id is not None:
            pulumi.set(__self__, "dr_protection_group_id", dr_protection_group_id)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if execution_options is not None:
            pulumi.set(__self__, "execution_options", execution_options)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if group_executions is not None:
            pulumi.set(__self__, "group_executions", group_executions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if life_cycle_details is not None:
            pulumi.set(__self__, "life_cycle_details", life_cycle_details)
        if log_locations is not None:
            pulumi.set(__self__, "log_locations", log_locations)
        if peer_dr_protection_group_id is not None:
            pulumi.set(__self__, "peer_dr_protection_group_id", peer_dr_protection_group_id)
        if peer_region is not None:
            pulumi.set(__self__, "peer_region", peer_region)
        if plan_execution_type is not None:
            pulumi.set(__self__, "plan_execution_type", plan_execution_type)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drProtectionGroupId")
    def dr_protection_group_id(self) -> Optional[str]:
        return pulumi.get(self, "dr_protection_group_id")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="executionOptions")
    def execution_options(self) -> Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult']]:
        return pulumi.get(self, "execution_options")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="groupExecutions")
    def group_executions(self) -> Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult']]:
        return pulumi.get(self, "group_executions")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifeCycleDetails")
    def life_cycle_details(self) -> Optional[str]:
        return pulumi.get(self, "life_cycle_details")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult']]:
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter(name="peerDrProtectionGroupId")
    def peer_dr_protection_group_id(self) -> Optional[str]:
        return pulumi.get(self, "peer_dr_protection_group_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[str]:
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> Optional[str]:
        return pulumi.get(self, "plan_execution_type")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[str]:
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult(dict):
    def __init__(__self__, *,
                 are_prechecks_enabled: Optional[bool] = None,
                 are_warnings_ignored: Optional[bool] = None,
                 plan_execution_type: Optional[str] = None):
        if are_prechecks_enabled is not None:
            pulumi.set(__self__, "are_prechecks_enabled", are_prechecks_enabled)
        if are_warnings_ignored is not None:
            pulumi.set(__self__, "are_warnings_ignored", are_warnings_ignored)
        if plan_execution_type is not None:
            pulumi.set(__self__, "plan_execution_type", plan_execution_type)

    @property
    @pulumi.getter(name="arePrechecksEnabled")
    def are_prechecks_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "are_prechecks_enabled")

    @property
    @pulumi.getter(name="areWarningsIgnored")
    def are_warnings_ignored(self) -> Optional[bool]:
        return pulumi.get(self, "are_warnings_ignored")

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> Optional[str]:
        return pulumi.get(self, "plan_execution_type")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 execution_duration_in_sec: Optional[int] = None,
                 group_id: Optional[str] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 step_executions: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult']] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if step_executions is not None:
            pulumi.set(__self__, "step_executions", step_executions)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepExecutions")
    def step_executions(self) -> Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult']]:
        return pulumi.get(self, "step_executions")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 execution_duration_in_sec: Optional[int] = None,
                 group_id: Optional[str] = None,
                 log_locations: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult']] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 step_id: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if execution_duration_in_sec is not None:
            pulumi.set(__self__, "execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if log_locations is not None:
            pulumi.set(__self__, "log_locations", log_locations)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if step_id is not None:
            pulumi.set(__self__, "step_id", step_id)
        if time_ended is not None:
            pulumi.set(__self__, "time_ended", time_ended)
        if time_started is not None:
            pulumi.set(__self__, "time_started", time_started)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[int]:
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult']]:
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> Optional[str]:
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlanExecutionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDrPlanPlanGroupResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 steps: Optional[Sequence['outputs.GetDrPlanPlanGroupStepResult']] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.GetDrPlanPlanGroupStepResult']]:
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanPlanGroupStepResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 error_mode: Optional[str] = None,
                 group_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 member_id: Optional[str] = None,
                 timeout: Optional[int] = None,
                 type: Optional[str] = None,
                 user_defined_steps: Optional[Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepResult']] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if error_mode is not None:
            pulumi.set(__self__, "error_mode", error_mode)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_defined_steps is not None:
            pulumi.set(__self__, "user_defined_steps", user_defined_steps)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorMode")
    def error_mode(self) -> Optional[str]:
        return pulumi.get(self, "error_mode")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[str]:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefinedSteps")
    def user_defined_steps(self) -> Optional[Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepResult']]:
        return pulumi.get(self, "user_defined_steps")


@pulumi.output_type
class GetDrPlanPlanGroupStepUserDefinedStepResult(dict):
    def __init__(__self__, *,
                 function_id: Optional[str] = None,
                 function_region: Optional[str] = None,
                 object_storage_script_locations: Optional[Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult']] = None,
                 request_body: Optional[str] = None,
                 run_as_user: Optional[str] = None,
                 run_on_instance_id: Optional[str] = None,
                 run_on_instance_region: Optional[str] = None,
                 script_command: Optional[str] = None,
                 step_type: Optional[str] = None):
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if function_region is not None:
            pulumi.set(__self__, "function_region", function_region)
        if object_storage_script_locations is not None:
            pulumi.set(__self__, "object_storage_script_locations", object_storage_script_locations)
        if request_body is not None:
            pulumi.set(__self__, "request_body", request_body)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if run_on_instance_id is not None:
            pulumi.set(__self__, "run_on_instance_id", run_on_instance_id)
        if run_on_instance_region is not None:
            pulumi.set(__self__, "run_on_instance_region", run_on_instance_region)
        if script_command is not None:
            pulumi.set(__self__, "script_command", script_command)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="functionRegion")
    def function_region(self) -> Optional[str]:
        return pulumi.get(self, "function_region")

    @property
    @pulumi.getter(name="objectStorageScriptLocations")
    def object_storage_script_locations(self) -> Optional[Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult']]:
        return pulumi.get(self, "object_storage_script_locations")

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> Optional[str]:
        return pulumi.get(self, "request_body")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="runOnInstanceId")
    def run_on_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "run_on_instance_id")

    @property
    @pulumi.getter(name="runOnInstanceRegion")
    def run_on_instance_region(self) -> Optional[str]:
        return pulumi.get(self, "run_on_instance_region")

    @property
    @pulumi.getter(name="scriptCommand")
    def script_command(self) -> Optional[str]:
        return pulumi.get(self, "script_command")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlansDrPlanCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 dr_protection_group_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 life_cycle_details: Optional[str] = None,
                 peer_dr_protection_group_id: Optional[str] = None,
                 peer_region: Optional[str] = None,
                 plan_groups: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupResult']] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None,
                 type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if dr_protection_group_id is not None:
            pulumi.set(__self__, "dr_protection_group_id", dr_protection_group_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if life_cycle_details is not None:
            pulumi.set(__self__, "life_cycle_details", life_cycle_details)
        if peer_dr_protection_group_id is not None:
            pulumi.set(__self__, "peer_dr_protection_group_id", peer_dr_protection_group_id)
        if peer_region is not None:
            pulumi.set(__self__, "peer_region", peer_region)
        if plan_groups is not None:
            pulumi.set(__self__, "plan_groups", plan_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drProtectionGroupId")
    def dr_protection_group_id(self) -> Optional[str]:
        return pulumi.get(self, "dr_protection_group_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifeCycleDetails")
    def life_cycle_details(self) -> Optional[str]:
        return pulumi.get(self, "life_cycle_details")

    @property
    @pulumi.getter(name="peerDrProtectionGroupId")
    def peer_dr_protection_group_id(self) -> Optional[str]:
        return pulumi.get(self, "peer_dr_protection_group_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[str]:
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter(name="planGroups")
    def plan_groups(self) -> Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupResult']]:
        return pulumi.get(self, "plan_groups")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemPlanGroupResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 steps: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepResult']] = None,
                 type: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if steps is not None:
            pulumi.set(__self__, "steps", steps)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepResult']]:
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemPlanGroupStepResult(dict):
    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 error_mode: Optional[str] = None,
                 group_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 member_id: Optional[str] = None,
                 timeout: Optional[int] = None,
                 type: Optional[str] = None,
                 user_defined_steps: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult']] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if error_mode is not None:
            pulumi.set(__self__, "error_mode", error_mode)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_defined_steps is not None:
            pulumi.set(__self__, "user_defined_steps", user_defined_steps)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorMode")
    def error_mode(self) -> Optional[str]:
        return pulumi.get(self, "error_mode")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[str]:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefinedSteps")
    def user_defined_steps(self) -> Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult']]:
        return pulumi.get(self, "user_defined_steps")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult(dict):
    def __init__(__self__, *,
                 function_id: Optional[str] = None,
                 function_region: Optional[str] = None,
                 object_storage_script_locations: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult']] = None,
                 request_body: Optional[str] = None,
                 run_as_user: Optional[str] = None,
                 run_on_instance_id: Optional[str] = None,
                 run_on_instance_region: Optional[str] = None,
                 script_command: Optional[str] = None,
                 step_type: Optional[str] = None):
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if function_region is not None:
            pulumi.set(__self__, "function_region", function_region)
        if object_storage_script_locations is not None:
            pulumi.set(__self__, "object_storage_script_locations", object_storage_script_locations)
        if request_body is not None:
            pulumi.set(__self__, "request_body", request_body)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if run_on_instance_id is not None:
            pulumi.set(__self__, "run_on_instance_id", run_on_instance_id)
        if run_on_instance_region is not None:
            pulumi.set(__self__, "run_on_instance_region", run_on_instance_region)
        if script_command is not None:
            pulumi.set(__self__, "script_command", script_command)
        if step_type is not None:
            pulumi.set(__self__, "step_type", step_type)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="functionRegion")
    def function_region(self) -> Optional[str]:
        return pulumi.get(self, "function_region")

    @property
    @pulumi.getter(name="objectStorageScriptLocations")
    def object_storage_script_locations(self) -> Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult']]:
        return pulumi.get(self, "object_storage_script_locations")

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> Optional[str]:
        return pulumi.get(self, "request_body")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="runOnInstanceId")
    def run_on_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "run_on_instance_id")

    @property
    @pulumi.getter(name="runOnInstanceRegion")
    def run_on_instance_region(self) -> Optional[str]:
        return pulumi.get(self, "run_on_instance_region")

    @property
    @pulumi.getter(name="scriptCommand")
    def script_command(self) -> Optional[str]:
        return pulumi.get(self, "script_command")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlansFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDrProtectionGroupAssociationResult(dict):
    def __init__(__self__, *,
                 peer_id: Optional[str] = None,
                 peer_region: Optional[str] = None,
                 role: Optional[str] = None):
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_region is not None:
            pulumi.set(__self__, "peer_region", peer_region)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[str]:
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[str]:
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class GetDrProtectionGroupLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrProtectionGroupMemberResult(dict):
    def __init__(__self__, *,
                 backend_set_mappings: Optional[Sequence['outputs.GetDrProtectionGroupMemberBackendSetMappingResult']] = None,
                 block_volume_operations: Optional[Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationResult']] = None,
                 destination_availability_domain: Optional[str] = None,
                 destination_capacity_reservation_id: Optional[str] = None,
                 destination_compartment_id: Optional[str] = None,
                 destination_dedicated_vm_host_id: Optional[str] = None,
                 destination_load_balancer_id: Optional[str] = None,
                 destination_network_load_balancer_id: Optional[str] = None,
                 export_mappings: Optional[Sequence['outputs.GetDrProtectionGroupMemberExportMappingResult']] = None,
                 file_system_operations: Optional[Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationResult']] = None,
                 is_movable: Optional[bool] = None,
                 is_retain_fault_domain: Optional[bool] = None,
                 is_start_stop_enabled: Optional[bool] = None,
                 member_id: Optional[str] = None,
                 member_type: Optional[str] = None,
                 password_vault_secret_id: Optional[str] = None,
                 vnic_mapping: Optional[Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult']] = None,
                 vnic_mappings: Optional[Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult']] = None):
        if backend_set_mappings is not None:
            pulumi.set(__self__, "backend_set_mappings", backend_set_mappings)
        if block_volume_operations is not None:
            pulumi.set(__self__, "block_volume_operations", block_volume_operations)
        if destination_availability_domain is not None:
            pulumi.set(__self__, "destination_availability_domain", destination_availability_domain)
        if destination_capacity_reservation_id is not None:
            pulumi.set(__self__, "destination_capacity_reservation_id", destination_capacity_reservation_id)
        if destination_compartment_id is not None:
            pulumi.set(__self__, "destination_compartment_id", destination_compartment_id)
        if destination_dedicated_vm_host_id is not None:
            pulumi.set(__self__, "destination_dedicated_vm_host_id", destination_dedicated_vm_host_id)
        if destination_load_balancer_id is not None:
            pulumi.set(__self__, "destination_load_balancer_id", destination_load_balancer_id)
        if destination_network_load_balancer_id is not None:
            pulumi.set(__self__, "destination_network_load_balancer_id", destination_network_load_balancer_id)
        if export_mappings is not None:
            pulumi.set(__self__, "export_mappings", export_mappings)
        if file_system_operations is not None:
            pulumi.set(__self__, "file_system_operations", file_system_operations)
        if is_movable is not None:
            pulumi.set(__self__, "is_movable", is_movable)
        if is_retain_fault_domain is not None:
            pulumi.set(__self__, "is_retain_fault_domain", is_retain_fault_domain)
        if is_start_stop_enabled is not None:
            pulumi.set(__self__, "is_start_stop_enabled", is_start_stop_enabled)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if member_type is not None:
            pulumi.set(__self__, "member_type", member_type)
        if password_vault_secret_id is not None:
            pulumi.set(__self__, "password_vault_secret_id", password_vault_secret_id)
        if vnic_mapping is not None:
            pulumi.set(__self__, "vnic_mapping", vnic_mapping)
        if vnic_mappings is not None:
            pulumi.set(__self__, "vnic_mappings", vnic_mappings)

    @property
    @pulumi.getter(name="backendSetMappings")
    def backend_set_mappings(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberBackendSetMappingResult']]:
        return pulumi.get(self, "backend_set_mappings")

    @property
    @pulumi.getter(name="blockVolumeOperations")
    def block_volume_operations(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationResult']]:
        return pulumi.get(self, "block_volume_operations")

    @property
    @pulumi.getter(name="destinationAvailabilityDomain")
    def destination_availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "destination_availability_domain")

    @property
    @pulumi.getter(name="destinationCapacityReservationId")
    def destination_capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_capacity_reservation_id")

    @property
    @pulumi.getter(name="destinationCompartmentId")
    def destination_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_compartment_id")

    @property
    @pulumi.getter(name="destinationDedicatedVmHostId")
    def destination_dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_dedicated_vm_host_id")

    @property
    @pulumi.getter(name="destinationLoadBalancerId")
    def destination_load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_load_balancer_id")

    @property
    @pulumi.getter(name="destinationNetworkLoadBalancerId")
    def destination_network_load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_network_load_balancer_id")

    @property
    @pulumi.getter(name="exportMappings")
    def export_mappings(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberExportMappingResult']]:
        return pulumi.get(self, "export_mappings")

    @property
    @pulumi.getter(name="fileSystemOperations")
    def file_system_operations(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationResult']]:
        return pulumi.get(self, "file_system_operations")

    @property
    @pulumi.getter(name="isMovable")
    def is_movable(self) -> Optional[bool]:
        return pulumi.get(self, "is_movable")

    @property
    @pulumi.getter(name="isRetainFaultDomain")
    def is_retain_fault_domain(self) -> Optional[bool]:
        return pulumi.get(self, "is_retain_fault_domain")

    @property
    @pulumi.getter(name="isStartStopEnabled")
    def is_start_stop_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_start_stop_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[str]:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> Optional[str]:
        return pulumi.get(self, "member_type")

    @property
    @pulumi.getter(name="passwordVaultSecretId")
    def password_vault_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_vault_secret_id")

    @property
    @pulumi.getter(name="vnicMapping")
    def vnic_mapping(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult']]:
        return pulumi.get(self, "vnic_mapping")

    @property
    @pulumi.getter(name="vnicMappings")
    def vnic_mappings(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult']]:
        return pulumi.get(self, "vnic_mappings")


@pulumi.output_type
class GetDrProtectionGroupMemberBackendSetMappingResult(dict):
    def __init__(__self__, *,
                 destination_backend_set_name: Optional[str] = None,
                 is_backend_set_for_non_movable: Optional[bool] = None,
                 source_backend_set_name: Optional[str] = None):
        if destination_backend_set_name is not None:
            pulumi.set(__self__, "destination_backend_set_name", destination_backend_set_name)
        if is_backend_set_for_non_movable is not None:
            pulumi.set(__self__, "is_backend_set_for_non_movable", is_backend_set_for_non_movable)
        if source_backend_set_name is not None:
            pulumi.set(__self__, "source_backend_set_name", source_backend_set_name)

    @property
    @pulumi.getter(name="destinationBackendSetName")
    def destination_backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_backend_set_name")

    @property
    @pulumi.getter(name="isBackendSetForNonMovable")
    def is_backend_set_for_non_movable(self) -> Optional[bool]:
        return pulumi.get(self, "is_backend_set_for_non_movable")

    @property
    @pulumi.getter(name="sourceBackendSetName")
    def source_backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "source_backend_set_name")


@pulumi.output_type
class GetDrProtectionGroupMemberBlockVolumeOperationResult(dict):
    def __init__(__self__, *,
                 attachment_details: Optional[Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult']] = None,
                 block_volume_id: Optional[str] = None,
                 mount_details: Optional[Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult']] = None):
        if attachment_details is not None:
            pulumi.set(__self__, "attachment_details", attachment_details)
        if block_volume_id is not None:
            pulumi.set(__self__, "block_volume_id", block_volume_id)
        if mount_details is not None:
            pulumi.set(__self__, "mount_details", mount_details)

    @property
    @pulumi.getter(name="attachmentDetails")
    def attachment_details(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult']]:
        return pulumi.get(self, "attachment_details")

    @property
    @pulumi.getter(name="blockVolumeId")
    def block_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_id")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult']]:
        return pulumi.get(self, "mount_details")


@pulumi.output_type
class GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult(dict):
    def __init__(__self__, *,
                 volume_attachment_reference_instance_id: Optional[str] = None):
        if volume_attachment_reference_instance_id is not None:
            pulumi.set(__self__, "volume_attachment_reference_instance_id", volume_attachment_reference_instance_id)

    @property
    @pulumi.getter(name="volumeAttachmentReferenceInstanceId")
    def volume_attachment_reference_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_attachment_reference_instance_id")


@pulumi.output_type
class GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult(dict):
    def __init__(__self__, *,
                 mount_point: Optional[str] = None):
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        return pulumi.get(self, "mount_point")


@pulumi.output_type
class GetDrProtectionGroupMemberExportMappingResult(dict):
    def __init__(__self__, *,
                 destination_mount_target_id: Optional[str] = None,
                 export_id: Optional[str] = None):
        if destination_mount_target_id is not None:
            pulumi.set(__self__, "destination_mount_target_id", destination_mount_target_id)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)

    @property
    @pulumi.getter(name="destinationMountTargetId")
    def destination_mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_mount_target_id")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")


@pulumi.output_type
class GetDrProtectionGroupMemberFileSystemOperationResult(dict):
    def __init__(__self__, *,
                 export_path: Optional[str] = None,
                 mount_details: Optional[Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationMountDetailResult']] = None,
                 mount_point: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 unmount_details: Optional[Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult']] = None):
        if export_path is not None:
            pulumi.set(__self__, "export_path", export_path)
        if mount_details is not None:
            pulumi.set(__self__, "mount_details", mount_details)
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if unmount_details is not None:
            pulumi.set(__self__, "unmount_details", unmount_details)

    @property
    @pulumi.getter(name="exportPath")
    def export_path(self) -> Optional[str]:
        return pulumi.get(self, "export_path")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationMountDetailResult']]:
        return pulumi.get(self, "mount_details")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter(name="unmountDetails")
    def unmount_details(self) -> Optional[Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult']]:
        return pulumi.get(self, "unmount_details")


@pulumi.output_type
class GetDrProtectionGroupMemberFileSystemOperationMountDetailResult(dict):
    def __init__(__self__, *,
                 mount_target_id: Optional[str] = None):
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult(dict):
    def __init__(__self__, *,
                 mount_target_id: Optional[str] = None):
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class GetDrProtectionGroupMemberVnicMappingResult(dict):
    def __init__(__self__, *,
                 destination_nsg_id_lists: Optional[Sequence[str]] = None,
                 destination_primary_private_ip_address: Optional[str] = None,
                 destination_primary_private_ip_hostname_label: Optional[str] = None,
                 destination_subnet_id: Optional[str] = None,
                 source_vnic_id: Optional[str] = None):
        if destination_nsg_id_lists is not None:
            pulumi.set(__self__, "destination_nsg_id_lists", destination_nsg_id_lists)
        if destination_primary_private_ip_address is not None:
            pulumi.set(__self__, "destination_primary_private_ip_address", destination_primary_private_ip_address)
        if destination_primary_private_ip_hostname_label is not None:
            pulumi.set(__self__, "destination_primary_private_ip_hostname_label", destination_primary_private_ip_hostname_label)
        if destination_subnet_id is not None:
            pulumi.set(__self__, "destination_subnet_id", destination_subnet_id)
        if source_vnic_id is not None:
            pulumi.set(__self__, "source_vnic_id", source_vnic_id)

    @property
    @pulumi.getter(name="destinationNsgIdLists")
    def destination_nsg_id_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_nsg_id_lists")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpAddress")
    def destination_primary_private_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "destination_primary_private_ip_address")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpHostnameLabel")
    def destination_primary_private_ip_hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "destination_primary_private_ip_hostname_label")

    @property
    @pulumi.getter(name="destinationSubnetId")
    def destination_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_subnet_id")

    @property
    @pulumi.getter(name="sourceVnicId")
    def source_vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "source_vnic_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 associations: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 disassociate_trigger: Optional[int] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 life_cycle_details: Optional[str] = None,
                 lifecycle_sub_state: Optional[str] = None,
                 log_locations: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult']] = None,
                 members: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult']] = None,
                 peer_id: Optional[str] = None,
                 peer_region: Optional[str] = None,
                 role: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if associations is not None:
            pulumi.set(__self__, "associations", associations)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if disassociate_trigger is not None:
            pulumi.set(__self__, "disassociate_trigger", disassociate_trigger)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if life_cycle_details is not None:
            pulumi.set(__self__, "life_cycle_details", life_cycle_details)
        if lifecycle_sub_state is not None:
            pulumi.set(__self__, "lifecycle_sub_state", lifecycle_sub_state)
        if log_locations is not None:
            pulumi.set(__self__, "log_locations", log_locations)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_region is not None:
            pulumi.set(__self__, "peer_region", peer_region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def associations(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult']]:
        return pulumi.get(self, "associations")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="disassociateTrigger")
    def disassociate_trigger(self) -> Optional[int]:
        return pulumi.get(self, "disassociate_trigger")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifeCycleDetails")
    def life_cycle_details(self) -> Optional[str]:
        return pulumi.get(self, "life_cycle_details")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult']]:
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def members(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult']]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[str]:
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[str]:
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult(dict):
    def __init__(__self__, *,
                 peer_id: Optional[str] = None,
                 peer_region: Optional[str] = None,
                 role: Optional[str] = None):
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_region is not None:
            pulumi.set(__self__, "peer_region", peer_region)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[str]:
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[str]:
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult(dict):
    def __init__(__self__, *,
                 backend_set_mappings: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult']] = None,
                 block_volume_operations: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult']] = None,
                 destination_availability_domain: Optional[str] = None,
                 destination_capacity_reservation_id: Optional[str] = None,
                 destination_compartment_id: Optional[str] = None,
                 destination_dedicated_vm_host_id: Optional[str] = None,
                 destination_load_balancer_id: Optional[str] = None,
                 destination_network_load_balancer_id: Optional[str] = None,
                 export_mappings: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult']] = None,
                 file_system_operations: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult']] = None,
                 is_movable: Optional[bool] = None,
                 is_retain_fault_domain: Optional[bool] = None,
                 is_start_stop_enabled: Optional[bool] = None,
                 member_id: Optional[str] = None,
                 member_type: Optional[str] = None,
                 password_vault_secret_id: Optional[str] = None,
                 vnic_mapping: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult']] = None,
                 vnic_mappings: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult']] = None):
        if backend_set_mappings is not None:
            pulumi.set(__self__, "backend_set_mappings", backend_set_mappings)
        if block_volume_operations is not None:
            pulumi.set(__self__, "block_volume_operations", block_volume_operations)
        if destination_availability_domain is not None:
            pulumi.set(__self__, "destination_availability_domain", destination_availability_domain)
        if destination_capacity_reservation_id is not None:
            pulumi.set(__self__, "destination_capacity_reservation_id", destination_capacity_reservation_id)
        if destination_compartment_id is not None:
            pulumi.set(__self__, "destination_compartment_id", destination_compartment_id)
        if destination_dedicated_vm_host_id is not None:
            pulumi.set(__self__, "destination_dedicated_vm_host_id", destination_dedicated_vm_host_id)
        if destination_load_balancer_id is not None:
            pulumi.set(__self__, "destination_load_balancer_id", destination_load_balancer_id)
        if destination_network_load_balancer_id is not None:
            pulumi.set(__self__, "destination_network_load_balancer_id", destination_network_load_balancer_id)
        if export_mappings is not None:
            pulumi.set(__self__, "export_mappings", export_mappings)
        if file_system_operations is not None:
            pulumi.set(__self__, "file_system_operations", file_system_operations)
        if is_movable is not None:
            pulumi.set(__self__, "is_movable", is_movable)
        if is_retain_fault_domain is not None:
            pulumi.set(__self__, "is_retain_fault_domain", is_retain_fault_domain)
        if is_start_stop_enabled is not None:
            pulumi.set(__self__, "is_start_stop_enabled", is_start_stop_enabled)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if member_type is not None:
            pulumi.set(__self__, "member_type", member_type)
        if password_vault_secret_id is not None:
            pulumi.set(__self__, "password_vault_secret_id", password_vault_secret_id)
        if vnic_mapping is not None:
            pulumi.set(__self__, "vnic_mapping", vnic_mapping)
        if vnic_mappings is not None:
            pulumi.set(__self__, "vnic_mappings", vnic_mappings)

    @property
    @pulumi.getter(name="backendSetMappings")
    def backend_set_mappings(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult']]:
        return pulumi.get(self, "backend_set_mappings")

    @property
    @pulumi.getter(name="blockVolumeOperations")
    def block_volume_operations(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult']]:
        return pulumi.get(self, "block_volume_operations")

    @property
    @pulumi.getter(name="destinationAvailabilityDomain")
    def destination_availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "destination_availability_domain")

    @property
    @pulumi.getter(name="destinationCapacityReservationId")
    def destination_capacity_reservation_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_capacity_reservation_id")

    @property
    @pulumi.getter(name="destinationCompartmentId")
    def destination_compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_compartment_id")

    @property
    @pulumi.getter(name="destinationDedicatedVmHostId")
    def destination_dedicated_vm_host_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_dedicated_vm_host_id")

    @property
    @pulumi.getter(name="destinationLoadBalancerId")
    def destination_load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_load_balancer_id")

    @property
    @pulumi.getter(name="destinationNetworkLoadBalancerId")
    def destination_network_load_balancer_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_network_load_balancer_id")

    @property
    @pulumi.getter(name="exportMappings")
    def export_mappings(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult']]:
        return pulumi.get(self, "export_mappings")

    @property
    @pulumi.getter(name="fileSystemOperations")
    def file_system_operations(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult']]:
        return pulumi.get(self, "file_system_operations")

    @property
    @pulumi.getter(name="isMovable")
    def is_movable(self) -> Optional[bool]:
        return pulumi.get(self, "is_movable")

    @property
    @pulumi.getter(name="isRetainFaultDomain")
    def is_retain_fault_domain(self) -> Optional[bool]:
        return pulumi.get(self, "is_retain_fault_domain")

    @property
    @pulumi.getter(name="isStartStopEnabled")
    def is_start_stop_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_start_stop_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[str]:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> Optional[str]:
        return pulumi.get(self, "member_type")

    @property
    @pulumi.getter(name="passwordVaultSecretId")
    def password_vault_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_vault_secret_id")

    @property
    @pulumi.getter(name="vnicMapping")
    def vnic_mapping(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult']]:
        return pulumi.get(self, "vnic_mapping")

    @property
    @pulumi.getter(name="vnicMappings")
    def vnic_mappings(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult']]:
        return pulumi.get(self, "vnic_mappings")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult(dict):
    def __init__(__self__, *,
                 destination_backend_set_name: Optional[str] = None,
                 is_backend_set_for_non_movable: Optional[bool] = None,
                 source_backend_set_name: Optional[str] = None):
        if destination_backend_set_name is not None:
            pulumi.set(__self__, "destination_backend_set_name", destination_backend_set_name)
        if is_backend_set_for_non_movable is not None:
            pulumi.set(__self__, "is_backend_set_for_non_movable", is_backend_set_for_non_movable)
        if source_backend_set_name is not None:
            pulumi.set(__self__, "source_backend_set_name", source_backend_set_name)

    @property
    @pulumi.getter(name="destinationBackendSetName")
    def destination_backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "destination_backend_set_name")

    @property
    @pulumi.getter(name="isBackendSetForNonMovable")
    def is_backend_set_for_non_movable(self) -> Optional[bool]:
        return pulumi.get(self, "is_backend_set_for_non_movable")

    @property
    @pulumi.getter(name="sourceBackendSetName")
    def source_backend_set_name(self) -> Optional[str]:
        return pulumi.get(self, "source_backend_set_name")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult(dict):
    def __init__(__self__, *,
                 attachment_details: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult']] = None,
                 block_volume_id: Optional[str] = None,
                 mount_details: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult']] = None):
        if attachment_details is not None:
            pulumi.set(__self__, "attachment_details", attachment_details)
        if block_volume_id is not None:
            pulumi.set(__self__, "block_volume_id", block_volume_id)
        if mount_details is not None:
            pulumi.set(__self__, "mount_details", mount_details)

    @property
    @pulumi.getter(name="attachmentDetails")
    def attachment_details(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult']]:
        return pulumi.get(self, "attachment_details")

    @property
    @pulumi.getter(name="blockVolumeId")
    def block_volume_id(self) -> Optional[str]:
        return pulumi.get(self, "block_volume_id")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult']]:
        return pulumi.get(self, "mount_details")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult(dict):
    def __init__(__self__, *,
                 volume_attachment_reference_instance_id: Optional[str] = None):
        if volume_attachment_reference_instance_id is not None:
            pulumi.set(__self__, "volume_attachment_reference_instance_id", volume_attachment_reference_instance_id)

    @property
    @pulumi.getter(name="volumeAttachmentReferenceInstanceId")
    def volume_attachment_reference_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_attachment_reference_instance_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult(dict):
    def __init__(__self__, *,
                 mount_point: Optional[str] = None):
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        return pulumi.get(self, "mount_point")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult(dict):
    def __init__(__self__, *,
                 destination_mount_target_id: Optional[str] = None,
                 export_id: Optional[str] = None):
        if destination_mount_target_id is not None:
            pulumi.set(__self__, "destination_mount_target_id", destination_mount_target_id)
        if export_id is not None:
            pulumi.set(__self__, "export_id", export_id)

    @property
    @pulumi.getter(name="destinationMountTargetId")
    def destination_mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_mount_target_id")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        return pulumi.get(self, "export_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult(dict):
    def __init__(__self__, *,
                 export_path: Optional[str] = None,
                 mount_details: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult']] = None,
                 mount_point: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 unmount_details: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult']] = None):
        if export_path is not None:
            pulumi.set(__self__, "export_path", export_path)
        if mount_details is not None:
            pulumi.set(__self__, "mount_details", mount_details)
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if unmount_details is not None:
            pulumi.set(__self__, "unmount_details", unmount_details)

    @property
    @pulumi.getter(name="exportPath")
    def export_path(self) -> Optional[str]:
        return pulumi.get(self, "export_path")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult']]:
        return pulumi.get(self, "mount_details")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter(name="unmountDetails")
    def unmount_details(self) -> Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult']]:
        return pulumi.get(self, "unmount_details")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult(dict):
    def __init__(__self__, *,
                 mount_target_id: Optional[str] = None):
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult(dict):
    def __init__(__self__, *,
                 mount_target_id: Optional[str] = None):
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult(dict):
    def __init__(__self__, *,
                 destination_nsg_id_lists: Optional[Sequence[str]] = None,
                 destination_primary_private_ip_address: Optional[str] = None,
                 destination_primary_private_ip_hostname_label: Optional[str] = None,
                 destination_subnet_id: Optional[str] = None,
                 source_vnic_id: Optional[str] = None):
        if destination_nsg_id_lists is not None:
            pulumi.set(__self__, "destination_nsg_id_lists", destination_nsg_id_lists)
        if destination_primary_private_ip_address is not None:
            pulumi.set(__self__, "destination_primary_private_ip_address", destination_primary_private_ip_address)
        if destination_primary_private_ip_hostname_label is not None:
            pulumi.set(__self__, "destination_primary_private_ip_hostname_label", destination_primary_private_ip_hostname_label)
        if destination_subnet_id is not None:
            pulumi.set(__self__, "destination_subnet_id", destination_subnet_id)
        if source_vnic_id is not None:
            pulumi.set(__self__, "source_vnic_id", source_vnic_id)

    @property
    @pulumi.getter(name="destinationNsgIdLists")
    def destination_nsg_id_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_nsg_id_lists")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpAddress")
    def destination_primary_private_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "destination_primary_private_ip_address")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpHostnameLabel")
    def destination_primary_private_ip_hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "destination_primary_private_ip_hostname_label")

    @property
    @pulumi.getter(name="destinationSubnetId")
    def destination_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_subnet_id")

    @property
    @pulumi.getter(name="sourceVnicId")
    def source_vnic_id(self) -> Optional[str]:
        return pulumi.get(self, "source_vnic_id")


@pulumi.output_type
class GetDrProtectionGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


