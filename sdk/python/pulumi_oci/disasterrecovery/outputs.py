# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DrPlanExecutionExecutionOptions',
    'DrPlanExecutionGroupExecution',
    'DrPlanExecutionGroupExecutionStepExecution',
    'DrPlanExecutionGroupExecutionStepExecutionLogLocation',
    'DrPlanExecutionLogLocation',
    'DrPlanPlanGroup',
    'DrPlanPlanGroupStep',
    'DrPlanPlanGroupStepUserDefinedStep',
    'DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation',
    'DrProtectionGroupAssociation',
    'DrProtectionGroupLogLocation',
    'DrProtectionGroupMember',
    'DrProtectionGroupMemberBackendSetMapping',
    'DrProtectionGroupMemberBlockVolumeOperation',
    'DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails',
    'DrProtectionGroupMemberBlockVolumeOperationMountDetails',
    'DrProtectionGroupMemberExportMapping',
    'DrProtectionGroupMemberFileSystemOperation',
    'DrProtectionGroupMemberFileSystemOperationMountDetails',
    'DrProtectionGroupMemberFileSystemOperationUnmountDetails',
    'DrProtectionGroupMemberVnicMapping',
    'GetDrPlanExecutionExecutionOptionResult',
    'GetDrPlanExecutionGroupExecutionResult',
    'GetDrPlanExecutionGroupExecutionStepExecutionResult',
    'GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult',
    'GetDrPlanExecutionLogLocationResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult',
    'GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult',
    'GetDrPlanExecutionsFilterResult',
    'GetDrPlanPlanGroupResult',
    'GetDrPlanPlanGroupStepResult',
    'GetDrPlanPlanGroupStepUserDefinedStepResult',
    'GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult',
    'GetDrPlansDrPlanCollectionResult',
    'GetDrPlansDrPlanCollectionItemResult',
    'GetDrPlansDrPlanCollectionItemPlanGroupResult',
    'GetDrPlansDrPlanCollectionItemPlanGroupStepResult',
    'GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult',
    'GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult',
    'GetDrPlansFilterResult',
    'GetDrProtectionGroupAssociationResult',
    'GetDrProtectionGroupLogLocationResult',
    'GetDrProtectionGroupMemberResult',
    'GetDrProtectionGroupMemberBackendSetMappingResult',
    'GetDrProtectionGroupMemberBlockVolumeOperationResult',
    'GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult',
    'GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult',
    'GetDrProtectionGroupMemberExportMappingResult',
    'GetDrProtectionGroupMemberFileSystemOperationResult',
    'GetDrProtectionGroupMemberFileSystemOperationMountDetailResult',
    'GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult',
    'GetDrProtectionGroupMemberVnicMappingResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult',
    'GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult',
    'GetDrProtectionGroupsFilterResult',
]

@pulumi.output_type
class DrPlanExecutionExecutionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "planExecutionType":
            suggest = "plan_execution_type"
        elif key == "arePrechecksEnabled":
            suggest = "are_prechecks_enabled"
        elif key == "areWarningsIgnored":
            suggest = "are_warnings_ignored"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanExecutionExecutionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanExecutionExecutionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanExecutionExecutionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 plan_execution_type: str,
                 are_prechecks_enabled: Optional[bool] = None,
                 are_warnings_ignored: Optional[bool] = None):
        """
        :param str plan_execution_type: The type of the plan execution.
        :param bool are_prechecks_enabled: A flag indicating whether prechecks should be executed before the plan execution.  Example: `false`
        :param bool are_warnings_ignored: A flag indicating whether warnings should be ignored during the switchover precheck.  Example: `true`
        """
        DrPlanExecutionExecutionOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            plan_execution_type=plan_execution_type,
            are_prechecks_enabled=are_prechecks_enabled,
            are_warnings_ignored=are_warnings_ignored,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             plan_execution_type: Optional[str] = None,
             are_prechecks_enabled: Optional[bool] = None,
             are_warnings_ignored: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if plan_execution_type is None and 'planExecutionType' in kwargs:
            plan_execution_type = kwargs['planExecutionType']
        if plan_execution_type is None:
            raise TypeError("Missing 'plan_execution_type' argument")
        if are_prechecks_enabled is None and 'arePrechecksEnabled' in kwargs:
            are_prechecks_enabled = kwargs['arePrechecksEnabled']
        if are_warnings_ignored is None and 'areWarningsIgnored' in kwargs:
            are_warnings_ignored = kwargs['areWarningsIgnored']

        _setter("plan_execution_type", plan_execution_type)
        if are_prechecks_enabled is not None:
            _setter("are_prechecks_enabled", are_prechecks_enabled)
        if are_warnings_ignored is not None:
            _setter("are_warnings_ignored", are_warnings_ignored)

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> str:
        """
        The type of the plan execution.
        """
        return pulumi.get(self, "plan_execution_type")

    @property
    @pulumi.getter(name="arePrechecksEnabled")
    def are_prechecks_enabled(self) -> Optional[bool]:
        """
        A flag indicating whether prechecks should be executed before the plan execution.  Example: `false`
        """
        return pulumi.get(self, "are_prechecks_enabled")

    @property
    @pulumi.getter(name="areWarningsIgnored")
    def are_warnings_ignored(self) -> Optional[bool]:
        """
        A flag indicating whether warnings should be ignored during the switchover precheck.  Example: `true`
        """
        return pulumi.get(self, "are_warnings_ignored")


@pulumi.output_type
class DrPlanExecutionGroupExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "executionDurationInSec":
            suggest = "execution_duration_in_sec"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "statusDetails":
            suggest = "status_details"
        elif key == "stepExecutions":
            suggest = "step_executions"
        elif key == "timeEnded":
            suggest = "time_ended"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanExecutionGroupExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanExecutionGroupExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanExecutionGroupExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 execution_duration_in_sec: Optional[int] = None,
                 group_id: Optional[str] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 step_executions: Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecution']] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str display_name: (Updatable) The display name of the DR plan execution.  Example: `Execution - EBS Switchover PHX to IAD`
        :param int execution_duration_in_sec: The total duration in seconds taken to complete the step execution.  Example: `35`
        :param str group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param str status: The status of the step execution.
        :param str status_details: Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        :param Sequence['DrPlanExecutionGroupExecutionStepExecutionArgs'] step_executions: A list of step executions in the group.
        :param str time_ended: The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_started: The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str type: The group type.  Example: `BUILT_IN`
        """
        DrPlanExecutionGroupExecution._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            execution_duration_in_sec=execution_duration_in_sec,
            group_id=group_id,
            status=status,
            status_details=status_details,
            step_executions=step_executions,
            time_ended=time_ended,
            time_started=time_started,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             execution_duration_in_sec: Optional[int] = None,
             group_id: Optional[str] = None,
             status: Optional[str] = None,
             status_details: Optional[str] = None,
             step_executions: Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecution']] = None,
             time_ended: Optional[str] = None,
             time_started: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if execution_duration_in_sec is None and 'executionDurationInSec' in kwargs:
            execution_duration_in_sec = kwargs['executionDurationInSec']
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if status_details is None and 'statusDetails' in kwargs:
            status_details = kwargs['statusDetails']
        if step_executions is None and 'stepExecutions' in kwargs:
            step_executions = kwargs['stepExecutions']
        if time_ended is None and 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']

        if display_name is not None:
            _setter("display_name", display_name)
        if execution_duration_in_sec is not None:
            _setter("execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            _setter("group_id", group_id)
        if status is not None:
            _setter("status", status)
        if status_details is not None:
            _setter("status_details", status_details)
        if step_executions is not None:
            _setter("step_executions", step_executions)
        if time_ended is not None:
            _setter("time_ended", time_ended)
        if time_started is not None:
            _setter("time_started", time_started)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) The display name of the DR plan execution.  Example: `Execution - EBS Switchover PHX to IAD`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[int]:
        """
        The total duration in seconds taken to complete the step execution.  Example: `35`
        """
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the step execution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        """
        Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        """
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepExecutions")
    def step_executions(self) -> Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecution']]:
        """
        A list of step executions in the group.
        """
        return pulumi.get(self, "step_executions")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        """
        The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        """
        The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The group type.  Example: `BUILT_IN`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DrPlanExecutionGroupExecutionStepExecution(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "executionDurationInSec":
            suggest = "execution_duration_in_sec"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "logLocations":
            suggest = "log_locations"
        elif key == "statusDetails":
            suggest = "status_details"
        elif key == "stepId":
            suggest = "step_id"
        elif key == "timeEnded":
            suggest = "time_ended"
        elif key == "timeStarted":
            suggest = "time_started"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanExecutionGroupExecutionStepExecution. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanExecutionGroupExecutionStepExecution.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanExecutionGroupExecutionStepExecution.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 execution_duration_in_sec: Optional[int] = None,
                 group_id: Optional[str] = None,
                 log_locations: Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecutionLogLocation']] = None,
                 status: Optional[str] = None,
                 status_details: Optional[str] = None,
                 step_id: Optional[str] = None,
                 time_ended: Optional[str] = None,
                 time_started: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str display_name: (Updatable) The display name of the DR plan execution.  Example: `Execution - EBS Switchover PHX to IAD`
        :param int execution_duration_in_sec: The total duration in seconds taken to complete the step execution.  Example: `35`
        :param str group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param Sequence['DrPlanExecutionGroupExecutionStepExecutionLogLocationArgs'] log_locations: The details of an object storage log location for a DR protection group.
        :param str status: The status of the step execution.
        :param str status_details: Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        :param str step_id: The unique id of the step. Must not be modified by user.  Example: `sgid1.step..uniqueID`
        :param str time_ended: The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_started: The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str type: The group type.  Example: `BUILT_IN`
        """
        DrPlanExecutionGroupExecutionStepExecution._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            execution_duration_in_sec=execution_duration_in_sec,
            group_id=group_id,
            log_locations=log_locations,
            status=status,
            status_details=status_details,
            step_id=step_id,
            time_ended=time_ended,
            time_started=time_started,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             execution_duration_in_sec: Optional[int] = None,
             group_id: Optional[str] = None,
             log_locations: Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecutionLogLocation']] = None,
             status: Optional[str] = None,
             status_details: Optional[str] = None,
             step_id: Optional[str] = None,
             time_ended: Optional[str] = None,
             time_started: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if execution_duration_in_sec is None and 'executionDurationInSec' in kwargs:
            execution_duration_in_sec = kwargs['executionDurationInSec']
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if log_locations is None and 'logLocations' in kwargs:
            log_locations = kwargs['logLocations']
        if status_details is None and 'statusDetails' in kwargs:
            status_details = kwargs['statusDetails']
        if step_id is None and 'stepId' in kwargs:
            step_id = kwargs['stepId']
        if time_ended is None and 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']

        if display_name is not None:
            _setter("display_name", display_name)
        if execution_duration_in_sec is not None:
            _setter("execution_duration_in_sec", execution_duration_in_sec)
        if group_id is not None:
            _setter("group_id", group_id)
        if log_locations is not None:
            _setter("log_locations", log_locations)
        if status is not None:
            _setter("status", status)
        if status_details is not None:
            _setter("status_details", status_details)
        if step_id is not None:
            _setter("step_id", step_id)
        if time_ended is not None:
            _setter("time_ended", time_ended)
        if time_started is not None:
            _setter("time_started", time_started)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) The display name of the DR plan execution.  Example: `Execution - EBS Switchover PHX to IAD`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> Optional[int]:
        """
        The total duration in seconds taken to complete the step execution.  Example: `35`
        """
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Optional[Sequence['outputs.DrPlanExecutionGroupExecutionStepExecutionLogLocation']]:
        """
        The details of an object storage log location for a DR protection group.
        """
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the step execution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[str]:
        """
        Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        """
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> Optional[str]:
        """
        The unique id of the step. Must not be modified by user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> Optional[str]:
        """
        The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> Optional[str]:
        """
        The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The group type.  Example: `BUILT_IN`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DrPlanExecutionGroupExecutionStepExecutionLogLocation(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        DrPlanExecutionGroupExecutionStepExecutionLogLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if bucket is not None:
            _setter("bucket", bucket)
        if namespace is not None:
            _setter("namespace", namespace)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class DrPlanExecutionLogLocation(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        DrPlanExecutionLogLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if bucket is not None:
            _setter("bucket", bucket)
        if namespace is not None:
            _setter("namespace", namespace)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class DrPlanPlanGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanPlanGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanPlanGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanPlanGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 steps: Optional[Sequence['outputs.DrPlanPlanGroupStep']] = None,
                 type: Optional[str] = None):
        """
        :param str display_name: (Updatable) The display name of the DR plan being created.  Example: `EBS Switchover PHX to IAD`
        :param str id: The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        :param Sequence['DrPlanPlanGroupStepArgs'] steps: The list of steps in the group.
        :param str type: The type of DR plan to be created. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        DrPlanPlanGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            id=id,
            steps=steps,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             id: Optional[str] = None,
             steps: Optional[Sequence['outputs.DrPlanPlanGroupStep']] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']

        if display_name is not None:
            _setter("display_name", display_name)
        if id is not None:
            _setter("id", id)
        if steps is not None:
            _setter("steps", steps)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) The display name of the DR plan being created.  Example: `EBS Switchover PHX to IAD`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def steps(self) -> Optional[Sequence['outputs.DrPlanPlanGroupStep']]:
        """
        The list of steps in the group.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of DR plan to be created. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DrPlanPlanGroupStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "errorMode":
            suggest = "error_mode"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "isEnabled":
            suggest = "is_enabled"
        elif key == "memberId":
            suggest = "member_id"
        elif key == "userDefinedSteps":
            suggest = "user_defined_steps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanPlanGroupStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanPlanGroupStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanPlanGroupStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 error_mode: Optional[str] = None,
                 group_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_enabled: Optional[bool] = None,
                 member_id: Optional[str] = None,
                 timeout: Optional[int] = None,
                 type: Optional[str] = None,
                 user_defined_steps: Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStep']] = None):
        """
        :param str display_name: (Updatable) The display name of the DR plan being created.  Example: `EBS Switchover PHX to IAD`
        :param str error_mode: The error mode for this step.
        :param str group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param str id: The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        :param bool is_enabled: A flag indicating whether this step should be enabled for execution.  Example: `true`
        :param str member_id: The OCID of the member associated with this step.  Example: `ocid1.database.oc1..uniqueID`
        :param int timeout: The timeout in seconds for executing this step.  Example: `600`
        :param str type: The type of DR plan to be created. 
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param Sequence['DrPlanPlanGroupStepUserDefinedStepArgs'] user_defined_steps: The details for a user-defined step in a DR plan.
        """
        DrPlanPlanGroupStep._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            error_mode=error_mode,
            group_id=group_id,
            id=id,
            is_enabled=is_enabled,
            member_id=member_id,
            timeout=timeout,
            type=type,
            user_defined_steps=user_defined_steps,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             error_mode: Optional[str] = None,
             group_id: Optional[str] = None,
             id: Optional[str] = None,
             is_enabled: Optional[bool] = None,
             member_id: Optional[str] = None,
             timeout: Optional[int] = None,
             type: Optional[str] = None,
             user_defined_steps: Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStep']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if error_mode is None and 'errorMode' in kwargs:
            error_mode = kwargs['errorMode']
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if member_id is None and 'memberId' in kwargs:
            member_id = kwargs['memberId']
        if user_defined_steps is None and 'userDefinedSteps' in kwargs:
            user_defined_steps = kwargs['userDefinedSteps']

        if display_name is not None:
            _setter("display_name", display_name)
        if error_mode is not None:
            _setter("error_mode", error_mode)
        if group_id is not None:
            _setter("group_id", group_id)
        if id is not None:
            _setter("id", id)
        if is_enabled is not None:
            _setter("is_enabled", is_enabled)
        if member_id is not None:
            _setter("member_id", member_id)
        if timeout is not None:
            _setter("timeout", timeout)
        if type is not None:
            _setter("type", type)
        if user_defined_steps is not None:
            _setter("user_defined_steps", user_defined_steps)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        (Updatable) The display name of the DR plan being created.  Example: `EBS Switchover PHX to IAD`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorMode")
    def error_mode(self) -> Optional[str]:
        """
        The error mode for this step.
        """
        return pulumi.get(self, "error_mode")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        """
        A flag indicating whether this step should be enabled for execution.  Example: `true`
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[str]:
        """
        The OCID of the member associated with this step.  Example: `ocid1.database.oc1..uniqueID`
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        The timeout in seconds for executing this step.  Example: `600`
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of DR plan to be created. 


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefinedSteps")
    def user_defined_steps(self) -> Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStep']]:
        """
        The details for a user-defined step in a DR plan.
        """
        return pulumi.get(self, "user_defined_steps")


@pulumi.output_type
class DrPlanPlanGroupStepUserDefinedStep(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionId":
            suggest = "function_id"
        elif key == "functionRegion":
            suggest = "function_region"
        elif key == "objectStorageScriptLocations":
            suggest = "object_storage_script_locations"
        elif key == "requestBody":
            suggest = "request_body"
        elif key == "runAsUser":
            suggest = "run_as_user"
        elif key == "runOnInstanceId":
            suggest = "run_on_instance_id"
        elif key == "runOnInstanceRegion":
            suggest = "run_on_instance_region"
        elif key == "scriptCommand":
            suggest = "script_command"
        elif key == "stepType":
            suggest = "step_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrPlanPlanGroupStepUserDefinedStep. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrPlanPlanGroupStepUserDefinedStep.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrPlanPlanGroupStepUserDefinedStep.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_id: Optional[str] = None,
                 function_region: Optional[str] = None,
                 object_storage_script_locations: Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation']] = None,
                 request_body: Optional[str] = None,
                 run_as_user: Optional[str] = None,
                 run_on_instance_id: Optional[str] = None,
                 run_on_instance_region: Optional[str] = None,
                 script_command: Optional[str] = None,
                 step_type: Optional[str] = None):
        """
        :param str function_id: The OCID of function to be invoked.  Example: `ocid1.fnfunc.oc1..uniqueID`
        :param str function_region: The region in which the function is deployed.  Example: `us-ashburn-1`
        :param Sequence['DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs'] object_storage_script_locations: The details of an object storage script location for a user-defined step in a DR plan.
        :param str request_body: The request body for the function.  Example: `{ "FnParam1", "FnParam2" }`
        :param str run_as_user: The userid on the instance to be used for executing the script or command.  Example: `opc`
        :param str run_on_instance_id: The OCID of the instance on which this script or command should be executed.
        :param str run_on_instance_region: The region of the instance where this script or command should be executed.  Example: `us-ashburn-1`
        :param str script_command: The script name and arguments.  Example: `/usr/bin/python3 /home/opc/scripts/my_app_script.py arg1 arg2 arg3`
        :param str step_type: The type of the user-defined step.
        """
        DrPlanPlanGroupStepUserDefinedStep._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_id=function_id,
            function_region=function_region,
            object_storage_script_locations=object_storage_script_locations,
            request_body=request_body,
            run_as_user=run_as_user,
            run_on_instance_id=run_on_instance_id,
            run_on_instance_region=run_on_instance_region,
            script_command=script_command,
            step_type=step_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_id: Optional[str] = None,
             function_region: Optional[str] = None,
             object_storage_script_locations: Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation']] = None,
             request_body: Optional[str] = None,
             run_as_user: Optional[str] = None,
             run_on_instance_id: Optional[str] = None,
             run_on_instance_region: Optional[str] = None,
             script_command: Optional[str] = None,
             step_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if function_id is None and 'functionId' in kwargs:
            function_id = kwargs['functionId']
        if function_region is None and 'functionRegion' in kwargs:
            function_region = kwargs['functionRegion']
        if object_storage_script_locations is None and 'objectStorageScriptLocations' in kwargs:
            object_storage_script_locations = kwargs['objectStorageScriptLocations']
        if request_body is None and 'requestBody' in kwargs:
            request_body = kwargs['requestBody']
        if run_as_user is None and 'runAsUser' in kwargs:
            run_as_user = kwargs['runAsUser']
        if run_on_instance_id is None and 'runOnInstanceId' in kwargs:
            run_on_instance_id = kwargs['runOnInstanceId']
        if run_on_instance_region is None and 'runOnInstanceRegion' in kwargs:
            run_on_instance_region = kwargs['runOnInstanceRegion']
        if script_command is None and 'scriptCommand' in kwargs:
            script_command = kwargs['scriptCommand']
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']

        if function_id is not None:
            _setter("function_id", function_id)
        if function_region is not None:
            _setter("function_region", function_region)
        if object_storage_script_locations is not None:
            _setter("object_storage_script_locations", object_storage_script_locations)
        if request_body is not None:
            _setter("request_body", request_body)
        if run_as_user is not None:
            _setter("run_as_user", run_as_user)
        if run_on_instance_id is not None:
            _setter("run_on_instance_id", run_on_instance_id)
        if run_on_instance_region is not None:
            _setter("run_on_instance_region", run_on_instance_region)
        if script_command is not None:
            _setter("script_command", script_command)
        if step_type is not None:
            _setter("step_type", step_type)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        """
        The OCID of function to be invoked.  Example: `ocid1.fnfunc.oc1..uniqueID`
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="functionRegion")
    def function_region(self) -> Optional[str]:
        """
        The region in which the function is deployed.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "function_region")

    @property
    @pulumi.getter(name="objectStorageScriptLocations")
    def object_storage_script_locations(self) -> Optional[Sequence['outputs.DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation']]:
        """
        The details of an object storage script location for a user-defined step in a DR plan.
        """
        return pulumi.get(self, "object_storage_script_locations")

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> Optional[str]:
        """
        The request body for the function.  Example: `{ "FnParam1", "FnParam2" }`
        """
        return pulumi.get(self, "request_body")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[str]:
        """
        The userid on the instance to be used for executing the script or command.  Example: `opc`
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="runOnInstanceId")
    def run_on_instance_id(self) -> Optional[str]:
        """
        The OCID of the instance on which this script or command should be executed.
        """
        return pulumi.get(self, "run_on_instance_id")

    @property
    @pulumi.getter(name="runOnInstanceRegion")
    def run_on_instance_region(self) -> Optional[str]:
        """
        The region of the instance where this script or command should be executed.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "run_on_instance_region")

    @property
    @pulumi.getter(name="scriptCommand")
    def script_command(self) -> Optional[str]:
        """
        The script name and arguments.  Example: `/usr/bin/python3 /home/opc/scripts/my_app_script.py arg1 arg2 arg3`
        """
        return pulumi.get(self, "script_command")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> Optional[str]:
        """
        The type of the user-defined step.
        """
        return pulumi.get(self, "step_type")


@pulumi.output_type
class DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 namespace: Optional[str] = None,
                 object: Optional[str] = None):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `custom_dr_scripts`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `validate_app_start.sh`
        """
        DrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if bucket is not None:
            _setter("bucket", bucket)
        if namespace is not None:
            _setter("namespace", namespace)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        """
        The bucket name inside the object storage namespace.  Example: `custom_dr_scripts`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        """
        The object name inside the object storage bucket.  Example: `validate_app_start.sh`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class DrProtectionGroupAssociation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "peerId":
            suggest = "peer_id"
        elif key == "peerRegion":
            suggest = "peer_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupAssociation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupAssociation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupAssociation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: str,
                 peer_id: Optional[str] = None,
                 peer_region: Optional[str] = None):
        """
        :param str role: The role of the DR protection group.  Example: `STANDBY`
        :param str peer_id: The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param str peer_region: The region of the peer DR protection group.  Example: `us-ashburn-1`
        """
        DrProtectionGroupAssociation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role=role,
            peer_id=peer_id,
            peer_region=peer_region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role: Optional[str] = None,
             peer_id: Optional[str] = None,
             peer_region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if role is None:
            raise TypeError("Missing 'role' argument")
        if peer_id is None and 'peerId' in kwargs:
            peer_id = kwargs['peerId']
        if peer_region is None and 'peerRegion' in kwargs:
            peer_region = kwargs['peerRegion']

        _setter("role", role)
        if peer_id is not None:
            _setter("peer_id", peer_id)
        if peer_region is not None:
            _setter("peer_region", peer_region)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role of the DR protection group.  Example: `STANDBY`
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[str]:
        """
        The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> Optional[str]:
        """
        The region of the peer DR protection group.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "peer_region")


@pulumi.output_type
class DrProtectionGroupLogLocation(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: Optional[str] = None):
        """
        :param str bucket: (Updatable) The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param str namespace: (Updatable) The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        DrProtectionGroupLogLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        if object is not None:
            _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        (Updatable) The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        (Updatable) The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> Optional[str]:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class DrProtectionGroupMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memberId":
            suggest = "member_id"
        elif key == "memberType":
            suggest = "member_type"
        elif key == "backendSetMappings":
            suggest = "backend_set_mappings"
        elif key == "blockVolumeOperations":
            suggest = "block_volume_operations"
        elif key == "destinationAvailabilityDomain":
            suggest = "destination_availability_domain"
        elif key == "destinationCapacityReservationId":
            suggest = "destination_capacity_reservation_id"
        elif key == "destinationCompartmentId":
            suggest = "destination_compartment_id"
        elif key == "destinationDedicatedVmHostId":
            suggest = "destination_dedicated_vm_host_id"
        elif key == "destinationLoadBalancerId":
            suggest = "destination_load_balancer_id"
        elif key == "destinationNetworkLoadBalancerId":
            suggest = "destination_network_load_balancer_id"
        elif key == "exportMappings":
            suggest = "export_mappings"
        elif key == "fileSystemOperations":
            suggest = "file_system_operations"
        elif key == "isMovable":
            suggest = "is_movable"
        elif key == "isRetainFaultDomain":
            suggest = "is_retain_fault_domain"
        elif key == "isStartStopEnabled":
            suggest = "is_start_stop_enabled"
        elif key == "passwordVaultSecretId":
            suggest = "password_vault_secret_id"
        elif key == "vnicMapping":
            suggest = "vnic_mapping"
        elif key == "vnicMappings":
            suggest = "vnic_mappings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 member_id: str,
                 member_type: str,
                 backend_set_mappings: Optional[Sequence['outputs.DrProtectionGroupMemberBackendSetMapping']] = None,
                 block_volume_operations: Optional[Sequence['outputs.DrProtectionGroupMemberBlockVolumeOperation']] = None,
                 destination_availability_domain: Optional[str] = None,
                 destination_capacity_reservation_id: Optional[str] = None,
                 destination_compartment_id: Optional[str] = None,
                 destination_dedicated_vm_host_id: Optional[str] = None,
                 destination_load_balancer_id: Optional[str] = None,
                 destination_network_load_balancer_id: Optional[str] = None,
                 export_mappings: Optional[Sequence['outputs.DrProtectionGroupMemberExportMapping']] = None,
                 file_system_operations: Optional[Sequence['outputs.DrProtectionGroupMemberFileSystemOperation']] = None,
                 is_movable: Optional[bool] = None,
                 is_retain_fault_domain: Optional[bool] = None,
                 is_start_stop_enabled: Optional[bool] = None,
                 password_vault_secret_id: Optional[str] = None,
                 vnic_mapping: Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']] = None,
                 vnic_mappings: Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']] = None):
        """
        :param str member_id: (Updatable) The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        :param str member_type: (Updatable) The type of the member.
        :param Sequence['DrProtectionGroupMemberBackendSetMappingArgs'] backend_set_mappings: (Updatable) A list of backend set mappings that are used to transfer or update backends during DR.
        :param Sequence['DrProtectionGroupMemberBlockVolumeOperationArgs'] block_volume_operations: (Updatable) A list of operations performed on block volumes used by the compute instance.
        :param str destination_availability_domain: (Updatable) The availability domain of the destination mount target.  Example: `BBTh:region-AD`
        :param str destination_capacity_reservation_id: (Updatable) The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        :param str destination_compartment_id: (Updatable) The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        :param str destination_dedicated_vm_host_id: (Updatable) The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        :param str destination_load_balancer_id: (Updatable) The OCID of the destination load balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        :param str destination_network_load_balancer_id: (Updatable) The OCID of the destination network load balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        :param Sequence['DrProtectionGroupMemberExportMappingArgs'] export_mappings: (Updatable) A list of mappings between file system exports in the primary region and mount targets in the standby region.
        :param Sequence['DrProtectionGroupMemberFileSystemOperationArgs'] file_system_operations: (Updatable) A list of operations performed on file systems used by the compute instance.
        :param bool is_movable: (Updatable) A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
        :param bool is_retain_fault_domain: (Updatable) A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
        :param bool is_start_stop_enabled: (Updatable) A flag indicating whether the non-movable compute instance should be started and stopped during DR operations. *Prechecks cannot be executed on stopped instances that are configured to be started.*
        :param str password_vault_secret_id: (Updatable) The OCID of the vault secret where the database SYSDBA password is stored.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        :param Sequence['DrProtectionGroupMemberVnicMappingArgs'] vnic_mapping: (Updatable) A list of compute instance VNIC mappings.
        :param Sequence['DrProtectionGroupMemberVnicMappingArgs'] vnic_mappings: (Updatable) A list of compute instance VNIC mappings.
        """
        DrProtectionGroupMember._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            member_id=member_id,
            member_type=member_type,
            backend_set_mappings=backend_set_mappings,
            block_volume_operations=block_volume_operations,
            destination_availability_domain=destination_availability_domain,
            destination_capacity_reservation_id=destination_capacity_reservation_id,
            destination_compartment_id=destination_compartment_id,
            destination_dedicated_vm_host_id=destination_dedicated_vm_host_id,
            destination_load_balancer_id=destination_load_balancer_id,
            destination_network_load_balancer_id=destination_network_load_balancer_id,
            export_mappings=export_mappings,
            file_system_operations=file_system_operations,
            is_movable=is_movable,
            is_retain_fault_domain=is_retain_fault_domain,
            is_start_stop_enabled=is_start_stop_enabled,
            password_vault_secret_id=password_vault_secret_id,
            vnic_mapping=vnic_mapping,
            vnic_mappings=vnic_mappings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             member_id: Optional[str] = None,
             member_type: Optional[str] = None,
             backend_set_mappings: Optional[Sequence['outputs.DrProtectionGroupMemberBackendSetMapping']] = None,
             block_volume_operations: Optional[Sequence['outputs.DrProtectionGroupMemberBlockVolumeOperation']] = None,
             destination_availability_domain: Optional[str] = None,
             destination_capacity_reservation_id: Optional[str] = None,
             destination_compartment_id: Optional[str] = None,
             destination_dedicated_vm_host_id: Optional[str] = None,
             destination_load_balancer_id: Optional[str] = None,
             destination_network_load_balancer_id: Optional[str] = None,
             export_mappings: Optional[Sequence['outputs.DrProtectionGroupMemberExportMapping']] = None,
             file_system_operations: Optional[Sequence['outputs.DrProtectionGroupMemberFileSystemOperation']] = None,
             is_movable: Optional[bool] = None,
             is_retain_fault_domain: Optional[bool] = None,
             is_start_stop_enabled: Optional[bool] = None,
             password_vault_secret_id: Optional[str] = None,
             vnic_mapping: Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']] = None,
             vnic_mappings: Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if member_id is None and 'memberId' in kwargs:
            member_id = kwargs['memberId']
        if member_id is None:
            raise TypeError("Missing 'member_id' argument")
        if member_type is None and 'memberType' in kwargs:
            member_type = kwargs['memberType']
        if member_type is None:
            raise TypeError("Missing 'member_type' argument")
        if backend_set_mappings is None and 'backendSetMappings' in kwargs:
            backend_set_mappings = kwargs['backendSetMappings']
        if block_volume_operations is None and 'blockVolumeOperations' in kwargs:
            block_volume_operations = kwargs['blockVolumeOperations']
        if destination_availability_domain is None and 'destinationAvailabilityDomain' in kwargs:
            destination_availability_domain = kwargs['destinationAvailabilityDomain']
        if destination_capacity_reservation_id is None and 'destinationCapacityReservationId' in kwargs:
            destination_capacity_reservation_id = kwargs['destinationCapacityReservationId']
        if destination_compartment_id is None and 'destinationCompartmentId' in kwargs:
            destination_compartment_id = kwargs['destinationCompartmentId']
        if destination_dedicated_vm_host_id is None and 'destinationDedicatedVmHostId' in kwargs:
            destination_dedicated_vm_host_id = kwargs['destinationDedicatedVmHostId']
        if destination_load_balancer_id is None and 'destinationLoadBalancerId' in kwargs:
            destination_load_balancer_id = kwargs['destinationLoadBalancerId']
        if destination_network_load_balancer_id is None and 'destinationNetworkLoadBalancerId' in kwargs:
            destination_network_load_balancer_id = kwargs['destinationNetworkLoadBalancerId']
        if export_mappings is None and 'exportMappings' in kwargs:
            export_mappings = kwargs['exportMappings']
        if file_system_operations is None and 'fileSystemOperations' in kwargs:
            file_system_operations = kwargs['fileSystemOperations']
        if is_movable is None and 'isMovable' in kwargs:
            is_movable = kwargs['isMovable']
        if is_retain_fault_domain is None and 'isRetainFaultDomain' in kwargs:
            is_retain_fault_domain = kwargs['isRetainFaultDomain']
        if is_start_stop_enabled is None and 'isStartStopEnabled' in kwargs:
            is_start_stop_enabled = kwargs['isStartStopEnabled']
        if password_vault_secret_id is None and 'passwordVaultSecretId' in kwargs:
            password_vault_secret_id = kwargs['passwordVaultSecretId']
        if vnic_mapping is None and 'vnicMapping' in kwargs:
            vnic_mapping = kwargs['vnicMapping']
        if vnic_mappings is None and 'vnicMappings' in kwargs:
            vnic_mappings = kwargs['vnicMappings']

        _setter("member_id", member_id)
        _setter("member_type", member_type)
        if backend_set_mappings is not None:
            _setter("backend_set_mappings", backend_set_mappings)
        if block_volume_operations is not None:
            _setter("block_volume_operations", block_volume_operations)
        if destination_availability_domain is not None:
            _setter("destination_availability_domain", destination_availability_domain)
        if destination_capacity_reservation_id is not None:
            _setter("destination_capacity_reservation_id", destination_capacity_reservation_id)
        if destination_compartment_id is not None:
            _setter("destination_compartment_id", destination_compartment_id)
        if destination_dedicated_vm_host_id is not None:
            _setter("destination_dedicated_vm_host_id", destination_dedicated_vm_host_id)
        if destination_load_balancer_id is not None:
            _setter("destination_load_balancer_id", destination_load_balancer_id)
        if destination_network_load_balancer_id is not None:
            _setter("destination_network_load_balancer_id", destination_network_load_balancer_id)
        if export_mappings is not None:
            _setter("export_mappings", export_mappings)
        if file_system_operations is not None:
            _setter("file_system_operations", file_system_operations)
        if is_movable is not None:
            _setter("is_movable", is_movable)
        if is_retain_fault_domain is not None:
            _setter("is_retain_fault_domain", is_retain_fault_domain)
        if is_start_stop_enabled is not None:
            _setter("is_start_stop_enabled", is_start_stop_enabled)
        if password_vault_secret_id is not None:
            _setter("password_vault_secret_id", password_vault_secret_id)
        if vnic_mapping is not None:
            _setter("vnic_mapping", vnic_mapping)
        if vnic_mappings is not None:
            _setter("vnic_mappings", vnic_mappings)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> str:
        """
        (Updatable) The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> str:
        """
        (Updatable) The type of the member.
        """
        return pulumi.get(self, "member_type")

    @property
    @pulumi.getter(name="backendSetMappings")
    def backend_set_mappings(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberBackendSetMapping']]:
        """
        (Updatable) A list of backend set mappings that are used to transfer or update backends during DR.
        """
        return pulumi.get(self, "backend_set_mappings")

    @property
    @pulumi.getter(name="blockVolumeOperations")
    def block_volume_operations(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberBlockVolumeOperation']]:
        """
        (Updatable) A list of operations performed on block volumes used by the compute instance.
        """
        return pulumi.get(self, "block_volume_operations")

    @property
    @pulumi.getter(name="destinationAvailabilityDomain")
    def destination_availability_domain(self) -> Optional[str]:
        """
        (Updatable) The availability domain of the destination mount target.  Example: `BBTh:region-AD`
        """
        return pulumi.get(self, "destination_availability_domain")

    @property
    @pulumi.getter(name="destinationCapacityReservationId")
    def destination_capacity_reservation_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_capacity_reservation_id")

    @property
    @pulumi.getter(name="destinationCompartmentId")
    def destination_compartment_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_compartment_id")

    @property
    @pulumi.getter(name="destinationDedicatedVmHostId")
    def destination_dedicated_vm_host_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_dedicated_vm_host_id")

    @property
    @pulumi.getter(name="destinationLoadBalancerId")
    def destination_load_balancer_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the destination load balancer.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_load_balancer_id")

    @property
    @pulumi.getter(name="destinationNetworkLoadBalancerId")
    def destination_network_load_balancer_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the destination network load balancer.  Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_network_load_balancer_id")

    @property
    @pulumi.getter(name="exportMappings")
    def export_mappings(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberExportMapping']]:
        """
        (Updatable) A list of mappings between file system exports in the primary region and mount targets in the standby region.
        """
        return pulumi.get(self, "export_mappings")

    @property
    @pulumi.getter(name="fileSystemOperations")
    def file_system_operations(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberFileSystemOperation']]:
        """
        (Updatable) A list of operations performed on file systems used by the compute instance.
        """
        return pulumi.get(self, "file_system_operations")

    @property
    @pulumi.getter(name="isMovable")
    def is_movable(self) -> Optional[bool]:
        """
        (Updatable) A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
        """
        return pulumi.get(self, "is_movable")

    @property
    @pulumi.getter(name="isRetainFaultDomain")
    def is_retain_fault_domain(self) -> Optional[bool]:
        """
        (Updatable) A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
        """
        return pulumi.get(self, "is_retain_fault_domain")

    @property
    @pulumi.getter(name="isStartStopEnabled")
    def is_start_stop_enabled(self) -> Optional[bool]:
        """
        (Updatable) A flag indicating whether the non-movable compute instance should be started and stopped during DR operations. *Prechecks cannot be executed on stopped instances that are configured to be started.*
        """
        return pulumi.get(self, "is_start_stop_enabled")

    @property
    @pulumi.getter(name="passwordVaultSecretId")
    def password_vault_secret_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the vault secret where the database SYSDBA password is stored.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        """
        return pulumi.get(self, "password_vault_secret_id")

    @property
    @pulumi.getter(name="vnicMapping")
    def vnic_mapping(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']]:
        """
        (Updatable) A list of compute instance VNIC mappings.
        """
        return pulumi.get(self, "vnic_mapping")

    @property
    @pulumi.getter(name="vnicMappings")
    def vnic_mappings(self) -> Optional[Sequence['outputs.DrProtectionGroupMemberVnicMapping']]:
        """
        (Updatable) A list of compute instance VNIC mappings.
        """
        return pulumi.get(self, "vnic_mappings")


@pulumi.output_type
class DrProtectionGroupMemberBackendSetMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationBackendSetName":
            suggest = "destination_backend_set_name"
        elif key == "isBackendSetForNonMovable":
            suggest = "is_backend_set_for_non_movable"
        elif key == "sourceBackendSetName":
            suggest = "source_backend_set_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberBackendSetMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberBackendSetMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberBackendSetMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_backend_set_name: Optional[str] = None,
                 is_backend_set_for_non_movable: Optional[bool] = None,
                 source_backend_set_name: Optional[str] = None):
        """
        :param str destination_backend_set_name: (Updatable) The name of the destination backend set.  Example: `Destination-BackendSet-1`
        :param bool is_backend_set_for_non_movable: (Updatable) This flag specifies if this backend set is used for traffic for non-movable compute instances. Backend sets that point to non-movable instances are only enabled or disabled during DR, their contents are not altered. For non-movable instances this flag should be set to 'true'. Backend sets that point to movable instances are emptied and their contents are transferred to the  destination region load balancer.  For movable instances this flag should be set to 'false'.   Example: `true`
        :param str source_backend_set_name: (Updatable) The name of the source backend set.  Example: `Source-BackendSet-1`
        """
        DrProtectionGroupMemberBackendSetMapping._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_backend_set_name=destination_backend_set_name,
            is_backend_set_for_non_movable=is_backend_set_for_non_movable,
            source_backend_set_name=source_backend_set_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_backend_set_name: Optional[str] = None,
             is_backend_set_for_non_movable: Optional[bool] = None,
             source_backend_set_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_backend_set_name is None and 'destinationBackendSetName' in kwargs:
            destination_backend_set_name = kwargs['destinationBackendSetName']
        if is_backend_set_for_non_movable is None and 'isBackendSetForNonMovable' in kwargs:
            is_backend_set_for_non_movable = kwargs['isBackendSetForNonMovable']
        if source_backend_set_name is None and 'sourceBackendSetName' in kwargs:
            source_backend_set_name = kwargs['sourceBackendSetName']

        if destination_backend_set_name is not None:
            _setter("destination_backend_set_name", destination_backend_set_name)
        if is_backend_set_for_non_movable is not None:
            _setter("is_backend_set_for_non_movable", is_backend_set_for_non_movable)
        if source_backend_set_name is not None:
            _setter("source_backend_set_name", source_backend_set_name)

    @property
    @pulumi.getter(name="destinationBackendSetName")
    def destination_backend_set_name(self) -> Optional[str]:
        """
        (Updatable) The name of the destination backend set.  Example: `Destination-BackendSet-1`
        """
        return pulumi.get(self, "destination_backend_set_name")

    @property
    @pulumi.getter(name="isBackendSetForNonMovable")
    def is_backend_set_for_non_movable(self) -> Optional[bool]:
        """
        (Updatable) This flag specifies if this backend set is used for traffic for non-movable compute instances. Backend sets that point to non-movable instances are only enabled or disabled during DR, their contents are not altered. For non-movable instances this flag should be set to 'true'. Backend sets that point to movable instances are emptied and their contents are transferred to the  destination region load balancer.  For movable instances this flag should be set to 'false'.   Example: `true`
        """
        return pulumi.get(self, "is_backend_set_for_non_movable")

    @property
    @pulumi.getter(name="sourceBackendSetName")
    def source_backend_set_name(self) -> Optional[str]:
        """
        (Updatable) The name of the source backend set.  Example: `Source-BackendSet-1`
        """
        return pulumi.get(self, "source_backend_set_name")


@pulumi.output_type
class DrProtectionGroupMemberBlockVolumeOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachmentDetails":
            suggest = "attachment_details"
        elif key == "blockVolumeId":
            suggest = "block_volume_id"
        elif key == "mountDetails":
            suggest = "mount_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberBlockVolumeOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberBlockVolumeOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberBlockVolumeOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attachment_details: Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails'] = None,
                 block_volume_id: Optional[str] = None,
                 mount_details: Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationMountDetails'] = None):
        """
        :param 'DrProtectionGroupMemberBlockVolumeOperationAttachmentDetailsArgs' attachment_details: (Updatable) The details for creating a block volume attachment.
        :param str block_volume_id: (Updatable) The OCID of the block volume.  Example: `ocid1.volume.oc1..uniqueID`
        :param 'DrProtectionGroupMemberBlockVolumeOperationMountDetailsArgs' mount_details: (Updatable) The details for creating a file system mount.
        """
        DrProtectionGroupMemberBlockVolumeOperation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attachment_details=attachment_details,
            block_volume_id=block_volume_id,
            mount_details=mount_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attachment_details: Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails'] = None,
             block_volume_id: Optional[str] = None,
             mount_details: Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationMountDetails'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if attachment_details is None and 'attachmentDetails' in kwargs:
            attachment_details = kwargs['attachmentDetails']
        if block_volume_id is None and 'blockVolumeId' in kwargs:
            block_volume_id = kwargs['blockVolumeId']
        if mount_details is None and 'mountDetails' in kwargs:
            mount_details = kwargs['mountDetails']

        if attachment_details is not None:
            _setter("attachment_details", attachment_details)
        if block_volume_id is not None:
            _setter("block_volume_id", block_volume_id)
        if mount_details is not None:
            _setter("mount_details", mount_details)

    @property
    @pulumi.getter(name="attachmentDetails")
    def attachment_details(self) -> Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails']:
        """
        (Updatable) The details for creating a block volume attachment.
        """
        return pulumi.get(self, "attachment_details")

    @property
    @pulumi.getter(name="blockVolumeId")
    def block_volume_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the block volume.  Example: `ocid1.volume.oc1..uniqueID`
        """
        return pulumi.get(self, "block_volume_id")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional['outputs.DrProtectionGroupMemberBlockVolumeOperationMountDetails']:
        """
        (Updatable) The details for creating a file system mount.
        """
        return pulumi.get(self, "mount_details")


@pulumi.output_type
class DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeAttachmentReferenceInstanceId":
            suggest = "volume_attachment_reference_instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 volume_attachment_reference_instance_id: Optional[str] = None):
        """
        :param str volume_attachment_reference_instance_id: (Updatable) The OCID of the reference compute instance from which to obtain the attachment details for the volume. This reference compute instance is from the peer DR protection group.  Example: `ocid1.instance.oc1..uniqueID`
        """
        DrProtectionGroupMemberBlockVolumeOperationAttachmentDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            volume_attachment_reference_instance_id=volume_attachment_reference_instance_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             volume_attachment_reference_instance_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if volume_attachment_reference_instance_id is None and 'volumeAttachmentReferenceInstanceId' in kwargs:
            volume_attachment_reference_instance_id = kwargs['volumeAttachmentReferenceInstanceId']

        if volume_attachment_reference_instance_id is not None:
            _setter("volume_attachment_reference_instance_id", volume_attachment_reference_instance_id)

    @property
    @pulumi.getter(name="volumeAttachmentReferenceInstanceId")
    def volume_attachment_reference_instance_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the reference compute instance from which to obtain the attachment details for the volume. This reference compute instance is from the peer DR protection group.  Example: `ocid1.instance.oc1..uniqueID`
        """
        return pulumi.get(self, "volume_attachment_reference_instance_id")


@pulumi.output_type
class DrProtectionGroupMemberBlockVolumeOperationMountDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPoint":
            suggest = "mount_point"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberBlockVolumeOperationMountDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberBlockVolumeOperationMountDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberBlockVolumeOperationMountDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_point: Optional[str] = None):
        """
        :param str mount_point: (Updatable) The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        DrProtectionGroupMemberBlockVolumeOperationMountDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_point=mount_point,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_point: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_point is None and 'mountPoint' in kwargs:
            mount_point = kwargs['mountPoint']

        if mount_point is not None:
            _setter("mount_point", mount_point)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        """
        (Updatable) The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        return pulumi.get(self, "mount_point")


@pulumi.output_type
class DrProtectionGroupMemberExportMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationMountTargetId":
            suggest = "destination_mount_target_id"
        elif key == "exportId":
            suggest = "export_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberExportMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberExportMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberExportMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_mount_target_id: Optional[str] = None,
                 export_id: Optional[str] = None):
        """
        :param str destination_mount_target_id: (Updatable) The OCID of the destination mount target in the destination region which is used to export the file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        :param str export_id: (Updatable) The OCID of the export path in the primary region used to mount or unmount the file system.  Example: `ocid1.export.oc1..uniqueID`
        """
        DrProtectionGroupMemberExportMapping._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_mount_target_id=destination_mount_target_id,
            export_id=export_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_mount_target_id: Optional[str] = None,
             export_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_mount_target_id is None and 'destinationMountTargetId' in kwargs:
            destination_mount_target_id = kwargs['destinationMountTargetId']
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']

        if destination_mount_target_id is not None:
            _setter("destination_mount_target_id", destination_mount_target_id)
        if export_id is not None:
            _setter("export_id", export_id)

    @property
    @pulumi.getter(name="destinationMountTargetId")
    def destination_mount_target_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the destination mount target in the destination region which is used to export the file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_mount_target_id")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the export path in the primary region used to mount or unmount the file system.  Example: `ocid1.export.oc1..uniqueID`
        """
        return pulumi.get(self, "export_id")


@pulumi.output_type
class DrProtectionGroupMemberFileSystemOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exportPath":
            suggest = "export_path"
        elif key == "mountDetails":
            suggest = "mount_details"
        elif key == "mountPoint":
            suggest = "mount_point"
        elif key == "mountTargetId":
            suggest = "mount_target_id"
        elif key == "unmountDetails":
            suggest = "unmount_details"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberFileSystemOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberFileSystemOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberFileSystemOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 export_path: Optional[str] = None,
                 mount_details: Optional['outputs.DrProtectionGroupMemberFileSystemOperationMountDetails'] = None,
                 mount_point: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 unmount_details: Optional['outputs.DrProtectionGroupMemberFileSystemOperationUnmountDetails'] = None):
        """
        :param str export_path: (Updatable) The export path of the file system.  Example: `/fs-export-path`
        :param 'DrProtectionGroupMemberFileSystemOperationMountDetailsArgs' mount_details: (Updatable) The details for creating a file system mount.
        :param str mount_point: (Updatable) The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        :param str mount_target_id: (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        :param 'DrProtectionGroupMemberFileSystemOperationUnmountDetailsArgs' unmount_details: (Updatable) The details for creating a file system unmount.
        """
        DrProtectionGroupMemberFileSystemOperation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            export_path=export_path,
            mount_details=mount_details,
            mount_point=mount_point,
            mount_target_id=mount_target_id,
            unmount_details=unmount_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             export_path: Optional[str] = None,
             mount_details: Optional['outputs.DrProtectionGroupMemberFileSystemOperationMountDetails'] = None,
             mount_point: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             unmount_details: Optional['outputs.DrProtectionGroupMemberFileSystemOperationUnmountDetails'] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if export_path is None and 'exportPath' in kwargs:
            export_path = kwargs['exportPath']
        if mount_details is None and 'mountDetails' in kwargs:
            mount_details = kwargs['mountDetails']
        if mount_point is None and 'mountPoint' in kwargs:
            mount_point = kwargs['mountPoint']
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if unmount_details is None and 'unmountDetails' in kwargs:
            unmount_details = kwargs['unmountDetails']

        if export_path is not None:
            _setter("export_path", export_path)
        if mount_details is not None:
            _setter("mount_details", mount_details)
        if mount_point is not None:
            _setter("mount_point", mount_point)
        if mount_target_id is not None:
            _setter("mount_target_id", mount_target_id)
        if unmount_details is not None:
            _setter("unmount_details", unmount_details)

    @property
    @pulumi.getter(name="exportPath")
    def export_path(self) -> Optional[str]:
        """
        (Updatable) The export path of the file system.  Example: `/fs-export-path`
        """
        return pulumi.get(self, "export_path")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Optional['outputs.DrProtectionGroupMemberFileSystemOperationMountDetails']:
        """
        (Updatable) The details for creating a file system mount.
        """
        return pulumi.get(self, "mount_details")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        """
        (Updatable) The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter(name="unmountDetails")
    def unmount_details(self) -> Optional['outputs.DrProtectionGroupMemberFileSystemOperationUnmountDetails']:
        """
        (Updatable) The details for creating a file system unmount.
        """
        return pulumi.get(self, "unmount_details")


@pulumi.output_type
class DrProtectionGroupMemberFileSystemOperationMountDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberFileSystemOperationMountDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberFileSystemOperationMountDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberFileSystemOperationMountDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_target_id: Optional[str] = None):
        """
        :param str mount_target_id: (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        DrProtectionGroupMemberFileSystemOperationMountDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_target_id=mount_target_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_target_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']

        if mount_target_id is not None:
            _setter("mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class DrProtectionGroupMemberFileSystemOperationUnmountDetails(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountTargetId":
            suggest = "mount_target_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberFileSystemOperationUnmountDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberFileSystemOperationUnmountDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberFileSystemOperationUnmountDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_target_id: Optional[str] = None):
        """
        :param str mount_target_id: (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        DrProtectionGroupMemberFileSystemOperationUnmountDetails._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_target_id=mount_target_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_target_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']

        if mount_target_id is not None:
            _setter("mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the mount target.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class DrProtectionGroupMemberVnicMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationNsgIdLists":
            suggest = "destination_nsg_id_lists"
        elif key == "destinationPrimaryPrivateIpAddress":
            suggest = "destination_primary_private_ip_address"
        elif key == "destinationPrimaryPrivateIpHostnameLabel":
            suggest = "destination_primary_private_ip_hostname_label"
        elif key == "destinationSubnetId":
            suggest = "destination_subnet_id"
        elif key == "sourceVnicId":
            suggest = "source_vnic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DrProtectionGroupMemberVnicMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DrProtectionGroupMemberVnicMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DrProtectionGroupMemberVnicMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_nsg_id_lists: Optional[Sequence[str]] = None,
                 destination_primary_private_ip_address: Optional[str] = None,
                 destination_primary_private_ip_hostname_label: Optional[str] = None,
                 destination_subnet_id: Optional[str] = None,
                 source_vnic_id: Optional[str] = None):
        """
        :param Sequence[str] destination_nsg_id_lists: (Updatable) A list of OCIDs of network security groups (NSG) in the destination region which should be assigned to the source VNIC.  Example: `[ ocid1.networksecuritygroup.oc1..uniqueID, ocid1.networksecuritygroup.oc1..uniqueID ]`
        :param str destination_primary_private_ip_address: (Updatable) The primary private IP address to be assigned to the source VNIC in the destination subnet.  This IP address must belong to the destination subnet.  Example: `10.0.3.3`
        :param str destination_primary_private_ip_hostname_label: (Updatable) The hostname label to be assigned in the destination subnet for the primary private IP of the source VNIC. This label is the hostname portion of the private IP's fully qualified domain name (FQDN)  (for example, 'myhost1' in the FQDN 'myhost1.subnet123.vcn1.oraclevcn.com').  Example: `myhost1`
        :param str destination_subnet_id: (Updatable) The OCID of the destination subnet to which the source VNIC should connect.          Example: `ocid1.subnet.oc1..uniqueID`
        :param str source_vnic_id: (Updatable) The OCID of the source VNIC.  Example: `ocid1.vnic.oc1..uniqueID`
        """
        DrProtectionGroupMemberVnicMapping._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_nsg_id_lists=destination_nsg_id_lists,
            destination_primary_private_ip_address=destination_primary_private_ip_address,
            destination_primary_private_ip_hostname_label=destination_primary_private_ip_hostname_label,
            destination_subnet_id=destination_subnet_id,
            source_vnic_id=source_vnic_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_nsg_id_lists: Optional[Sequence[str]] = None,
             destination_primary_private_ip_address: Optional[str] = None,
             destination_primary_private_ip_hostname_label: Optional[str] = None,
             destination_subnet_id: Optional[str] = None,
             source_vnic_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_nsg_id_lists is None and 'destinationNsgIdLists' in kwargs:
            destination_nsg_id_lists = kwargs['destinationNsgIdLists']
        if destination_primary_private_ip_address is None and 'destinationPrimaryPrivateIpAddress' in kwargs:
            destination_primary_private_ip_address = kwargs['destinationPrimaryPrivateIpAddress']
        if destination_primary_private_ip_hostname_label is None and 'destinationPrimaryPrivateIpHostnameLabel' in kwargs:
            destination_primary_private_ip_hostname_label = kwargs['destinationPrimaryPrivateIpHostnameLabel']
        if destination_subnet_id is None and 'destinationSubnetId' in kwargs:
            destination_subnet_id = kwargs['destinationSubnetId']
        if source_vnic_id is None and 'sourceVnicId' in kwargs:
            source_vnic_id = kwargs['sourceVnicId']

        if destination_nsg_id_lists is not None:
            _setter("destination_nsg_id_lists", destination_nsg_id_lists)
        if destination_primary_private_ip_address is not None:
            _setter("destination_primary_private_ip_address", destination_primary_private_ip_address)
        if destination_primary_private_ip_hostname_label is not None:
            _setter("destination_primary_private_ip_hostname_label", destination_primary_private_ip_hostname_label)
        if destination_subnet_id is not None:
            _setter("destination_subnet_id", destination_subnet_id)
        if source_vnic_id is not None:
            _setter("source_vnic_id", source_vnic_id)

    @property
    @pulumi.getter(name="destinationNsgIdLists")
    def destination_nsg_id_lists(self) -> Optional[Sequence[str]]:
        """
        (Updatable) A list of OCIDs of network security groups (NSG) in the destination region which should be assigned to the source VNIC.  Example: `[ ocid1.networksecuritygroup.oc1..uniqueID, ocid1.networksecuritygroup.oc1..uniqueID ]`
        """
        return pulumi.get(self, "destination_nsg_id_lists")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpAddress")
    def destination_primary_private_ip_address(self) -> Optional[str]:
        """
        (Updatable) The primary private IP address to be assigned to the source VNIC in the destination subnet.  This IP address must belong to the destination subnet.  Example: `10.0.3.3`
        """
        return pulumi.get(self, "destination_primary_private_ip_address")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpHostnameLabel")
    def destination_primary_private_ip_hostname_label(self) -> Optional[str]:
        """
        (Updatable) The hostname label to be assigned in the destination subnet for the primary private IP of the source VNIC. This label is the hostname portion of the private IP's fully qualified domain name (FQDN)  (for example, 'myhost1' in the FQDN 'myhost1.subnet123.vcn1.oraclevcn.com').  Example: `myhost1`
        """
        return pulumi.get(self, "destination_primary_private_ip_hostname_label")

    @property
    @pulumi.getter(name="destinationSubnetId")
    def destination_subnet_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the destination subnet to which the source VNIC should connect.          Example: `ocid1.subnet.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_subnet_id")

    @property
    @pulumi.getter(name="sourceVnicId")
    def source_vnic_id(self) -> Optional[str]:
        """
        (Updatable) The OCID of the source VNIC.  Example: `ocid1.vnic.oc1..uniqueID`
        """
        return pulumi.get(self, "source_vnic_id")


@pulumi.output_type
class GetDrPlanExecutionExecutionOptionResult(dict):
    def __init__(__self__, *,
                 are_prechecks_enabled: bool,
                 are_warnings_ignored: bool,
                 plan_execution_type: str):
        """
        :param bool are_prechecks_enabled: A flag indicating whether a precheck should be executed before the plan execution.  Example: `true`
        :param bool are_warnings_ignored: A flag indicating whether warnings should be ignored during the plan execution.  Example: `false`
        :param str plan_execution_type: The type of the DR plan executed.
        """
        GetDrPlanExecutionExecutionOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            are_prechecks_enabled=are_prechecks_enabled,
            are_warnings_ignored=are_warnings_ignored,
            plan_execution_type=plan_execution_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             are_prechecks_enabled: Optional[bool] = None,
             are_warnings_ignored: Optional[bool] = None,
             plan_execution_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if are_prechecks_enabled is None and 'arePrechecksEnabled' in kwargs:
            are_prechecks_enabled = kwargs['arePrechecksEnabled']
        if are_prechecks_enabled is None:
            raise TypeError("Missing 'are_prechecks_enabled' argument")
        if are_warnings_ignored is None and 'areWarningsIgnored' in kwargs:
            are_warnings_ignored = kwargs['areWarningsIgnored']
        if are_warnings_ignored is None:
            raise TypeError("Missing 'are_warnings_ignored' argument")
        if plan_execution_type is None and 'planExecutionType' in kwargs:
            plan_execution_type = kwargs['planExecutionType']
        if plan_execution_type is None:
            raise TypeError("Missing 'plan_execution_type' argument")

        _setter("are_prechecks_enabled", are_prechecks_enabled)
        _setter("are_warnings_ignored", are_warnings_ignored)
        _setter("plan_execution_type", plan_execution_type)

    @property
    @pulumi.getter(name="arePrechecksEnabled")
    def are_prechecks_enabled(self) -> bool:
        """
        A flag indicating whether a precheck should be executed before the plan execution.  Example: `true`
        """
        return pulumi.get(self, "are_prechecks_enabled")

    @property
    @pulumi.getter(name="areWarningsIgnored")
    def are_warnings_ignored(self) -> bool:
        """
        A flag indicating whether warnings should be ignored during the plan execution.  Example: `false`
        """
        return pulumi.get(self, "are_warnings_ignored")

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> str:
        """
        The type of the DR plan executed.
        """
        return pulumi.get(self, "plan_execution_type")


@pulumi.output_type
class GetDrPlanExecutionGroupExecutionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 execution_duration_in_sec: int,
                 group_id: str,
                 status: str,
                 status_details: str,
                 step_executions: Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionResult'],
                 time_ended: str,
                 time_started: str,
                 type: str):
        """
        :param str display_name: The display name of the step execution.  Example: `DATABASE_SWITCHOVER`
        :param int execution_duration_in_sec: The total duration in seconds taken to complete the step execution.  Example: `35`
        :param str group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param str status: The status of the step execution.
        :param str status_details: Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        :param Sequence['GetDrPlanExecutionGroupExecutionStepExecutionArgs'] step_executions: A list of step executions in the group.
        :param str time_ended: The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_started: The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str type: The group type.  Example: `BUILT_IN`
        """
        GetDrPlanExecutionGroupExecutionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            execution_duration_in_sec=execution_duration_in_sec,
            group_id=group_id,
            status=status,
            status_details=status_details,
            step_executions=step_executions,
            time_ended=time_ended,
            time_started=time_started,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             execution_duration_in_sec: Optional[int] = None,
             group_id: Optional[str] = None,
             status: Optional[str] = None,
             status_details: Optional[str] = None,
             step_executions: Optional[Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionResult']] = None,
             time_ended: Optional[str] = None,
             time_started: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if execution_duration_in_sec is None and 'executionDurationInSec' in kwargs:
            execution_duration_in_sec = kwargs['executionDurationInSec']
        if execution_duration_in_sec is None:
            raise TypeError("Missing 'execution_duration_in_sec' argument")
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if group_id is None:
            raise TypeError("Missing 'group_id' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if status_details is None and 'statusDetails' in kwargs:
            status_details = kwargs['statusDetails']
        if status_details is None:
            raise TypeError("Missing 'status_details' argument")
        if step_executions is None and 'stepExecutions' in kwargs:
            step_executions = kwargs['stepExecutions']
        if step_executions is None:
            raise TypeError("Missing 'step_executions' argument")
        if time_ended is None and 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if time_ended is None:
            raise TypeError("Missing 'time_ended' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("display_name", display_name)
        _setter("execution_duration_in_sec", execution_duration_in_sec)
        _setter("group_id", group_id)
        _setter("status", status)
        _setter("status_details", status_details)
        _setter("step_executions", step_executions)
        _setter("time_ended", time_ended)
        _setter("time_started", time_started)
        _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the step execution.  Example: `DATABASE_SWITCHOVER`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> int:
        """
        The total duration in seconds taken to complete the step execution.  Example: `35`
        """
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the step execution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> str:
        """
        Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        """
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepExecutions")
    def step_executions(self) -> Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionResult']:
        """
        A list of step executions in the group.
        """
        return pulumi.get(self, "step_executions")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> str:
        """
        The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The group type.  Example: `BUILT_IN`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanExecutionGroupExecutionStepExecutionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 execution_duration_in_sec: int,
                 group_id: str,
                 log_locations: Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult'],
                 status: str,
                 status_details: str,
                 step_id: str,
                 time_ended: str,
                 time_started: str,
                 type: str):
        """
        :param str display_name: The display name of the step execution.  Example: `DATABASE_SWITCHOVER`
        :param int execution_duration_in_sec: The total duration in seconds taken to complete the step execution.  Example: `35`
        :param str group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param Sequence['GetDrPlanExecutionGroupExecutionStepExecutionLogLocationArgs'] log_locations: The details of an object storage log location for a DR protection group.
        :param str status: The status of the step execution.
        :param str status_details: Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        :param str step_id: The unique id of the step. Must not be modified by user.  Example: `sgid1.step..uniqueID`
        :param str time_ended: The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_started: The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str type: The group type.  Example: `BUILT_IN`
        """
        GetDrPlanExecutionGroupExecutionStepExecutionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            execution_duration_in_sec=execution_duration_in_sec,
            group_id=group_id,
            log_locations=log_locations,
            status=status,
            status_details=status_details,
            step_id=step_id,
            time_ended=time_ended,
            time_started=time_started,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             execution_duration_in_sec: Optional[int] = None,
             group_id: Optional[str] = None,
             log_locations: Optional[Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult']] = None,
             status: Optional[str] = None,
             status_details: Optional[str] = None,
             step_id: Optional[str] = None,
             time_ended: Optional[str] = None,
             time_started: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if execution_duration_in_sec is None and 'executionDurationInSec' in kwargs:
            execution_duration_in_sec = kwargs['executionDurationInSec']
        if execution_duration_in_sec is None:
            raise TypeError("Missing 'execution_duration_in_sec' argument")
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if group_id is None:
            raise TypeError("Missing 'group_id' argument")
        if log_locations is None and 'logLocations' in kwargs:
            log_locations = kwargs['logLocations']
        if log_locations is None:
            raise TypeError("Missing 'log_locations' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if status_details is None and 'statusDetails' in kwargs:
            status_details = kwargs['statusDetails']
        if status_details is None:
            raise TypeError("Missing 'status_details' argument")
        if step_id is None and 'stepId' in kwargs:
            step_id = kwargs['stepId']
        if step_id is None:
            raise TypeError("Missing 'step_id' argument")
        if time_ended is None and 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if time_ended is None:
            raise TypeError("Missing 'time_ended' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("display_name", display_name)
        _setter("execution_duration_in_sec", execution_duration_in_sec)
        _setter("group_id", group_id)
        _setter("log_locations", log_locations)
        _setter("status", status)
        _setter("status_details", status_details)
        _setter("step_id", step_id)
        _setter("time_ended", time_ended)
        _setter("time_started", time_started)
        _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the step execution.  Example: `DATABASE_SWITCHOVER`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> int:
        """
        The total duration in seconds taken to complete the step execution.  Example: `35`
        """
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Sequence['outputs.GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult']:
        """
        The details of an object storage log location for a DR protection group.
        """
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the step execution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> str:
        """
        Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        """
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> str:
        """
        The unique id of the step. Must not be modified by user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> str:
        """
        The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The group type.  Example: `BUILT_IN`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        GetDrPlanExecutionGroupExecutionStepExecutionLogLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlanExecutionLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        GetDrPlanExecutionLogLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemResult']):
        GetDrPlanExecutionsDrPlanExecutionCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 dr_protection_group_id: str,
                 execution_duration_in_sec: int,
                 execution_options: Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult'],
                 freeform_tags: Mapping[str, Any],
                 group_executions: Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult'],
                 id: str,
                 life_cycle_details: str,
                 log_locations: Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult'],
                 peer_dr_protection_group_id: str,
                 peer_region: str,
                 plan_execution_type: str,
                 plan_id: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_ended: str,
                 time_started: str,
                 time_updated: str):
        """
        :param str compartment_id: The OCID of the compartment containing this DR plan execution.  Example: `ocid1.compartment.oc1..uniqueID`
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        :param str dr_protection_group_id: The OCID of the DR protection group. Mandatory query param.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param int execution_duration_in_sec: The total duration in seconds taken to complete the step execution.  Example: `35`
        :param Sequence['GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionArgs'] execution_options: The options for a plan execution.
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  Example: `{"Department": "Finance"}`
        :param Sequence['GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionArgs'] group_executions: A list of groups executed in this DR plan execution.
        :param str id: The OCID of the DR plan execution.  Example: `ocid1.drplanexecution.oc1..uniqueID`
        :param str life_cycle_details: A message describing the DR plan execution's current state in more detail.
        :param Sequence['GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationArgs'] log_locations: The details of an object storage log location for a DR protection group.
        :param str peer_dr_protection_group_id: The OCID of peer DR protection group associated with this plan's DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param str peer_region: The region of the peer DR protection group associated with this plan's DR protection group.  Example: `us-ashburn-1`
        :param str plan_execution_type: The type of the DR plan executed.
        :param str plan_id: The OCID of the DR plan.  Example: `ocid1.drplan.oc1..uniqueID`
        :param str state: A filter to return only DR plan executions that match the given lifecycle state.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time at which DR plan execution was created. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_ended: The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_started: The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_updated: The time when DR plan execution was last updated. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        GetDrPlanExecutionsDrPlanExecutionCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            display_name=display_name,
            dr_protection_group_id=dr_protection_group_id,
            execution_duration_in_sec=execution_duration_in_sec,
            execution_options=execution_options,
            freeform_tags=freeform_tags,
            group_executions=group_executions,
            id=id,
            life_cycle_details=life_cycle_details,
            log_locations=log_locations,
            peer_dr_protection_group_id=peer_dr_protection_group_id,
            peer_region=peer_region,
            plan_execution_type=plan_execution_type,
            plan_id=plan_id,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_ended=time_ended,
            time_started=time_started,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             display_name: Optional[str] = None,
             dr_protection_group_id: Optional[str] = None,
             execution_duration_in_sec: Optional[int] = None,
             execution_options: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult']] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             group_executions: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult']] = None,
             id: Optional[str] = None,
             life_cycle_details: Optional[str] = None,
             log_locations: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult']] = None,
             peer_dr_protection_group_id: Optional[str] = None,
             peer_region: Optional[str] = None,
             plan_execution_type: Optional[str] = None,
             plan_id: Optional[str] = None,
             state: Optional[str] = None,
             system_tags: Optional[Mapping[str, Any]] = None,
             time_created: Optional[str] = None,
             time_ended: Optional[str] = None,
             time_started: Optional[str] = None,
             time_updated: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if dr_protection_group_id is None and 'drProtectionGroupId' in kwargs:
            dr_protection_group_id = kwargs['drProtectionGroupId']
        if dr_protection_group_id is None:
            raise TypeError("Missing 'dr_protection_group_id' argument")
        if execution_duration_in_sec is None and 'executionDurationInSec' in kwargs:
            execution_duration_in_sec = kwargs['executionDurationInSec']
        if execution_duration_in_sec is None:
            raise TypeError("Missing 'execution_duration_in_sec' argument")
        if execution_options is None and 'executionOptions' in kwargs:
            execution_options = kwargs['executionOptions']
        if execution_options is None:
            raise TypeError("Missing 'execution_options' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if group_executions is None and 'groupExecutions' in kwargs:
            group_executions = kwargs['groupExecutions']
        if group_executions is None:
            raise TypeError("Missing 'group_executions' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if life_cycle_details is None and 'lifeCycleDetails' in kwargs:
            life_cycle_details = kwargs['lifeCycleDetails']
        if life_cycle_details is None:
            raise TypeError("Missing 'life_cycle_details' argument")
        if log_locations is None and 'logLocations' in kwargs:
            log_locations = kwargs['logLocations']
        if log_locations is None:
            raise TypeError("Missing 'log_locations' argument")
        if peer_dr_protection_group_id is None and 'peerDrProtectionGroupId' in kwargs:
            peer_dr_protection_group_id = kwargs['peerDrProtectionGroupId']
        if peer_dr_protection_group_id is None:
            raise TypeError("Missing 'peer_dr_protection_group_id' argument")
        if peer_region is None and 'peerRegion' in kwargs:
            peer_region = kwargs['peerRegion']
        if peer_region is None:
            raise TypeError("Missing 'peer_region' argument")
        if plan_execution_type is None and 'planExecutionType' in kwargs:
            plan_execution_type = kwargs['planExecutionType']
        if plan_execution_type is None:
            raise TypeError("Missing 'plan_execution_type' argument")
        if plan_id is None and 'planId' in kwargs:
            plan_id = kwargs['planId']
        if plan_id is None:
            raise TypeError("Missing 'plan_id' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if system_tags is None and 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if system_tags is None:
            raise TypeError("Missing 'system_tags' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if time_ended is None and 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if time_ended is None:
            raise TypeError("Missing 'time_ended' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")
        if time_updated is None and 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if time_updated is None:
            raise TypeError("Missing 'time_updated' argument")

        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("dr_protection_group_id", dr_protection_group_id)
        _setter("execution_duration_in_sec", execution_duration_in_sec)
        _setter("execution_options", execution_options)
        _setter("freeform_tags", freeform_tags)
        _setter("group_executions", group_executions)
        _setter("id", id)
        _setter("life_cycle_details", life_cycle_details)
        _setter("log_locations", log_locations)
        _setter("peer_dr_protection_group_id", peer_dr_protection_group_id)
        _setter("peer_region", peer_region)
        _setter("plan_execution_type", plan_execution_type)
        _setter("plan_id", plan_id)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_ended", time_ended)
        _setter("time_started", time_started)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment containing this DR plan execution.  Example: `ocid1.compartment.oc1..uniqueID`
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drProtectionGroupId")
    def dr_protection_group_id(self) -> str:
        """
        The OCID of the DR protection group. Mandatory query param.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "dr_protection_group_id")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> int:
        """
        The total duration in seconds taken to complete the step execution.  Example: `35`
        """
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="executionOptions")
    def execution_options(self) -> Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult']:
        """
        The options for a plan execution.
        """
        return pulumi.get(self, "execution_options")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="groupExecutions")
    def group_executions(self) -> Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult']:
        """
        A list of groups executed in this DR plan execution.
        """
        return pulumi.get(self, "group_executions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the DR plan execution.  Example: `ocid1.drplanexecution.oc1..uniqueID`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifeCycleDetails")
    def life_cycle_details(self) -> str:
        """
        A message describing the DR plan execution's current state in more detail.
        """
        return pulumi.get(self, "life_cycle_details")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult']:
        """
        The details of an object storage log location for a DR protection group.
        """
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter(name="peerDrProtectionGroupId")
    def peer_dr_protection_group_id(self) -> str:
        """
        The OCID of peer DR protection group associated with this plan's DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "peer_dr_protection_group_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> str:
        """
        The region of the peer DR protection group associated with this plan's DR protection group.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> str:
        """
        The type of the DR plan executed.
        """
        return pulumi.get(self, "plan_execution_type")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        """
        The OCID of the DR plan.  Example: `ocid1.drplan.oc1..uniqueID`
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only DR plan executions that match the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time at which DR plan execution was created. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> str:
        """
        The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The time when DR plan execution was last updated. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult(dict):
    def __init__(__self__, *,
                 are_prechecks_enabled: bool,
                 are_warnings_ignored: bool,
                 plan_execution_type: str):
        """
        :param bool are_prechecks_enabled: A flag indicating whether a precheck should be executed before the plan execution.  Example: `true`
        :param bool are_warnings_ignored: A flag indicating whether warnings should be ignored during the plan execution.  Example: `false`
        :param str plan_execution_type: The type of the DR plan executed.
        """
        GetDrPlanExecutionsDrPlanExecutionCollectionItemExecutionOptionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            are_prechecks_enabled=are_prechecks_enabled,
            are_warnings_ignored=are_warnings_ignored,
            plan_execution_type=plan_execution_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             are_prechecks_enabled: Optional[bool] = None,
             are_warnings_ignored: Optional[bool] = None,
             plan_execution_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if are_prechecks_enabled is None and 'arePrechecksEnabled' in kwargs:
            are_prechecks_enabled = kwargs['arePrechecksEnabled']
        if are_prechecks_enabled is None:
            raise TypeError("Missing 'are_prechecks_enabled' argument")
        if are_warnings_ignored is None and 'areWarningsIgnored' in kwargs:
            are_warnings_ignored = kwargs['areWarningsIgnored']
        if are_warnings_ignored is None:
            raise TypeError("Missing 'are_warnings_ignored' argument")
        if plan_execution_type is None and 'planExecutionType' in kwargs:
            plan_execution_type = kwargs['planExecutionType']
        if plan_execution_type is None:
            raise TypeError("Missing 'plan_execution_type' argument")

        _setter("are_prechecks_enabled", are_prechecks_enabled)
        _setter("are_warnings_ignored", are_warnings_ignored)
        _setter("plan_execution_type", plan_execution_type)

    @property
    @pulumi.getter(name="arePrechecksEnabled")
    def are_prechecks_enabled(self) -> bool:
        """
        A flag indicating whether a precheck should be executed before the plan execution.  Example: `true`
        """
        return pulumi.get(self, "are_prechecks_enabled")

    @property
    @pulumi.getter(name="areWarningsIgnored")
    def are_warnings_ignored(self) -> bool:
        """
        A flag indicating whether warnings should be ignored during the plan execution.  Example: `false`
        """
        return pulumi.get(self, "are_warnings_ignored")

    @property
    @pulumi.getter(name="planExecutionType")
    def plan_execution_type(self) -> str:
        """
        The type of the DR plan executed.
        """
        return pulumi.get(self, "plan_execution_type")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 execution_duration_in_sec: int,
                 group_id: str,
                 status: str,
                 status_details: str,
                 step_executions: Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult'],
                 time_ended: str,
                 time_started: str,
                 type: str):
        """
        :param str display_name: A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        :param int execution_duration_in_sec: The total duration in seconds taken to complete the step execution.  Example: `35`
        :param str group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param str status: The status of the step execution.
        :param str status_details: Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        :param Sequence['GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionArgs'] step_executions: A list of step executions in the group.
        :param str time_ended: The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_started: The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str type: The group type.  Example: `BUILT_IN`
        """
        GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            execution_duration_in_sec=execution_duration_in_sec,
            group_id=group_id,
            status=status,
            status_details=status_details,
            step_executions=step_executions,
            time_ended=time_ended,
            time_started=time_started,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             execution_duration_in_sec: Optional[int] = None,
             group_id: Optional[str] = None,
             status: Optional[str] = None,
             status_details: Optional[str] = None,
             step_executions: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult']] = None,
             time_ended: Optional[str] = None,
             time_started: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if execution_duration_in_sec is None and 'executionDurationInSec' in kwargs:
            execution_duration_in_sec = kwargs['executionDurationInSec']
        if execution_duration_in_sec is None:
            raise TypeError("Missing 'execution_duration_in_sec' argument")
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if group_id is None:
            raise TypeError("Missing 'group_id' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if status_details is None and 'statusDetails' in kwargs:
            status_details = kwargs['statusDetails']
        if status_details is None:
            raise TypeError("Missing 'status_details' argument")
        if step_executions is None and 'stepExecutions' in kwargs:
            step_executions = kwargs['stepExecutions']
        if step_executions is None:
            raise TypeError("Missing 'step_executions' argument")
        if time_ended is None and 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if time_ended is None:
            raise TypeError("Missing 'time_ended' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("display_name", display_name)
        _setter("execution_duration_in_sec", execution_duration_in_sec)
        _setter("group_id", group_id)
        _setter("status", status)
        _setter("status_details", status_details)
        _setter("step_executions", step_executions)
        _setter("time_ended", time_ended)
        _setter("time_started", time_started)
        _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> int:
        """
        The total duration in seconds taken to complete the step execution.  Example: `35`
        """
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the step execution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> str:
        """
        Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        """
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepExecutions")
    def step_executions(self) -> Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult']:
        """
        A list of step executions in the group.
        """
        return pulumi.get(self, "step_executions")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> str:
        """
        The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The group type.  Example: `BUILT_IN`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 execution_duration_in_sec: int,
                 group_id: str,
                 log_locations: Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult'],
                 status: str,
                 status_details: str,
                 step_id: str,
                 time_ended: str,
                 time_started: str,
                 type: str):
        """
        :param str display_name: A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        :param int execution_duration_in_sec: The total duration in seconds taken to complete the step execution.  Example: `35`
        :param str group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param Sequence['GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationArgs'] log_locations: The details of an object storage log location for a DR protection group.
        :param str status: The status of the step execution.
        :param str status_details: Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        :param str step_id: The unique id of the step. Must not be modified by user.  Example: `sgid1.step..uniqueID`
        :param str time_ended: The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_started: The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str type: The group type.  Example: `BUILT_IN`
        """
        GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            execution_duration_in_sec=execution_duration_in_sec,
            group_id=group_id,
            log_locations=log_locations,
            status=status,
            status_details=status_details,
            step_id=step_id,
            time_ended=time_ended,
            time_started=time_started,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             execution_duration_in_sec: Optional[int] = None,
             group_id: Optional[str] = None,
             log_locations: Optional[Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult']] = None,
             status: Optional[str] = None,
             status_details: Optional[str] = None,
             step_id: Optional[str] = None,
             time_ended: Optional[str] = None,
             time_started: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if execution_duration_in_sec is None and 'executionDurationInSec' in kwargs:
            execution_duration_in_sec = kwargs['executionDurationInSec']
        if execution_duration_in_sec is None:
            raise TypeError("Missing 'execution_duration_in_sec' argument")
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if group_id is None:
            raise TypeError("Missing 'group_id' argument")
        if log_locations is None and 'logLocations' in kwargs:
            log_locations = kwargs['logLocations']
        if log_locations is None:
            raise TypeError("Missing 'log_locations' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")
        if status_details is None and 'statusDetails' in kwargs:
            status_details = kwargs['statusDetails']
        if status_details is None:
            raise TypeError("Missing 'status_details' argument")
        if step_id is None and 'stepId' in kwargs:
            step_id = kwargs['stepId']
        if step_id is None:
            raise TypeError("Missing 'step_id' argument")
        if time_ended is None and 'timeEnded' in kwargs:
            time_ended = kwargs['timeEnded']
        if time_ended is None:
            raise TypeError("Missing 'time_ended' argument")
        if time_started is None and 'timeStarted' in kwargs:
            time_started = kwargs['timeStarted']
        if time_started is None:
            raise TypeError("Missing 'time_started' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("display_name", display_name)
        _setter("execution_duration_in_sec", execution_duration_in_sec)
        _setter("group_id", group_id)
        _setter("log_locations", log_locations)
        _setter("status", status)
        _setter("status_details", status_details)
        _setter("step_id", step_id)
        _setter("time_ended", time_ended)
        _setter("time_started", time_started)
        _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="executionDurationInSec")
    def execution_duration_in_sec(self) -> int:
        """
        The total duration in seconds taken to complete the step execution.  Example: `35`
        """
        return pulumi.get(self, "execution_duration_in_sec")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Sequence['outputs.GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult']:
        """
        The details of an object storage log location for a DR protection group.
        """
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of the step execution.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> str:
        """
        Additional details on the step execution status.  Example: `This step failed to complete due to a timeout`
        """
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> str:
        """
        The unique id of the step. Must not be modified by user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> str:
        """
        The date and time at which DR plan execution succeeded, failed, was paused, or was canceled. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> str:
        """
        The date and time at which DR plan execution began. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_started")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The group type.  Example: `BUILT_IN`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        GetDrPlanExecutionsDrPlanExecutionCollectionItemGroupExecutionStepExecutionLogLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        GetDrPlanExecutionsDrPlanExecutionCollectionItemLogLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlanExecutionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetDrPlanExecutionsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDrPlanPlanGroupResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str,
                 steps: Sequence['outputs.GetDrPlanPlanGroupStepResult'],
                 type: str):
        """
        :param str display_name: The display name of the group.  Example: `DATABASE_SWITCHOVER`
        :param str id: The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        :param Sequence['GetDrPlanPlanGroupStepArgs'] steps: The list of steps in the group.
        :param str type: The type of the DR plan.
        """
        GetDrPlanPlanGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            id=id,
            steps=steps,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             id: Optional[str] = None,
             steps: Optional[Sequence['outputs.GetDrPlanPlanGroupStepResult']] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if steps is None:
            raise TypeError("Missing 'steps' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("display_name", display_name)
        _setter("id", id)
        _setter("steps", steps)
        _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the group.  Example: `DATABASE_SWITCHOVER`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetDrPlanPlanGroupStepResult']:
        """
        The list of steps in the group.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the DR plan.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlanPlanGroupStepResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 error_mode: str,
                 group_id: str,
                 id: str,
                 is_enabled: bool,
                 member_id: str,
                 timeout: int,
                 type: str,
                 user_defined_steps: Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepResult']):
        """
        :param str display_name: The display name of the group.  Example: `DATABASE_SWITCHOVER`
        :param str error_mode: The error mode for this step.
        :param str group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param str id: The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        :param bool is_enabled: A flag indicating whether this step should be enabled for execution.  Example: `true`
        :param str member_id: The OCID of the member associated with this step.  Example: `ocid1.database.oc1..uniqueID`
        :param int timeout: The timeout in seconds for executing this step.  Example: `600`
        :param str type: The type of the DR plan.
        :param Sequence['GetDrPlanPlanGroupStepUserDefinedStepArgs'] user_defined_steps: The details for a user-defined step in a DR plan.
        """
        GetDrPlanPlanGroupStepResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            error_mode=error_mode,
            group_id=group_id,
            id=id,
            is_enabled=is_enabled,
            member_id=member_id,
            timeout=timeout,
            type=type,
            user_defined_steps=user_defined_steps,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             error_mode: Optional[str] = None,
             group_id: Optional[str] = None,
             id: Optional[str] = None,
             is_enabled: Optional[bool] = None,
             member_id: Optional[str] = None,
             timeout: Optional[int] = None,
             type: Optional[str] = None,
             user_defined_steps: Optional[Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if error_mode is None and 'errorMode' in kwargs:
            error_mode = kwargs['errorMode']
        if error_mode is None:
            raise TypeError("Missing 'error_mode' argument")
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if group_id is None:
            raise TypeError("Missing 'group_id' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if is_enabled is None:
            raise TypeError("Missing 'is_enabled' argument")
        if member_id is None and 'memberId' in kwargs:
            member_id = kwargs['memberId']
        if member_id is None:
            raise TypeError("Missing 'member_id' argument")
        if timeout is None:
            raise TypeError("Missing 'timeout' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if user_defined_steps is None and 'userDefinedSteps' in kwargs:
            user_defined_steps = kwargs['userDefinedSteps']
        if user_defined_steps is None:
            raise TypeError("Missing 'user_defined_steps' argument")

        _setter("display_name", display_name)
        _setter("error_mode", error_mode)
        _setter("group_id", group_id)
        _setter("id", id)
        _setter("is_enabled", is_enabled)
        _setter("member_id", member_id)
        _setter("timeout", timeout)
        _setter("type", type)
        _setter("user_defined_steps", user_defined_steps)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the group.  Example: `DATABASE_SWITCHOVER`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorMode")
    def error_mode(self) -> str:
        """
        The error mode for this step.
        """
        return pulumi.get(self, "error_mode")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        A flag indicating whether this step should be enabled for execution.  Example: `true`
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> str:
        """
        The OCID of the member associated with this step.  Example: `ocid1.database.oc1..uniqueID`
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        The timeout in seconds for executing this step.  Example: `600`
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the DR plan.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefinedSteps")
    def user_defined_steps(self) -> Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepResult']:
        """
        The details for a user-defined step in a DR plan.
        """
        return pulumi.get(self, "user_defined_steps")


@pulumi.output_type
class GetDrPlanPlanGroupStepUserDefinedStepResult(dict):
    def __init__(__self__, *,
                 function_id: str,
                 function_region: str,
                 object_storage_script_locations: Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult'],
                 request_body: str,
                 run_as_user: str,
                 run_on_instance_id: str,
                 run_on_instance_region: str,
                 script_command: str,
                 step_type: str):
        """
        :param str function_id: The OCID of function to be invoked.  Example: `ocid1.fnfunc.oc1..uniqueID`
        :param str function_region: The region in which the function is deployed.  Example: `us-ashburn-1`
        :param Sequence['GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs'] object_storage_script_locations: The details of an object storage script location for a user-defined step in a DR plan.
        :param str request_body: The request body for the function.  Example: `{ "FnParam1", "FnParam2" }`
        :param str run_as_user: The userid on the instance to be used for executing the script or command.  Example: `opc`
        :param str run_on_instance_id: The OCID of the instance on which this script or command should be executed.
        :param str run_on_instance_region: The region of the instance where this script or command should be executed.  Example: `us-ashburn-1`
        :param str script_command: The script name and arguments.  Example: `/usr/bin/python3 /home/opc/scripts/my_app_script.py arg1 arg2 arg3`
        :param str step_type: The type of the user-defined step.
        """
        GetDrPlanPlanGroupStepUserDefinedStepResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_id=function_id,
            function_region=function_region,
            object_storage_script_locations=object_storage_script_locations,
            request_body=request_body,
            run_as_user=run_as_user,
            run_on_instance_id=run_on_instance_id,
            run_on_instance_region=run_on_instance_region,
            script_command=script_command,
            step_type=step_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_id: Optional[str] = None,
             function_region: Optional[str] = None,
             object_storage_script_locations: Optional[Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult']] = None,
             request_body: Optional[str] = None,
             run_as_user: Optional[str] = None,
             run_on_instance_id: Optional[str] = None,
             run_on_instance_region: Optional[str] = None,
             script_command: Optional[str] = None,
             step_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if function_id is None and 'functionId' in kwargs:
            function_id = kwargs['functionId']
        if function_id is None:
            raise TypeError("Missing 'function_id' argument")
        if function_region is None and 'functionRegion' in kwargs:
            function_region = kwargs['functionRegion']
        if function_region is None:
            raise TypeError("Missing 'function_region' argument")
        if object_storage_script_locations is None and 'objectStorageScriptLocations' in kwargs:
            object_storage_script_locations = kwargs['objectStorageScriptLocations']
        if object_storage_script_locations is None:
            raise TypeError("Missing 'object_storage_script_locations' argument")
        if request_body is None and 'requestBody' in kwargs:
            request_body = kwargs['requestBody']
        if request_body is None:
            raise TypeError("Missing 'request_body' argument")
        if run_as_user is None and 'runAsUser' in kwargs:
            run_as_user = kwargs['runAsUser']
        if run_as_user is None:
            raise TypeError("Missing 'run_as_user' argument")
        if run_on_instance_id is None and 'runOnInstanceId' in kwargs:
            run_on_instance_id = kwargs['runOnInstanceId']
        if run_on_instance_id is None:
            raise TypeError("Missing 'run_on_instance_id' argument")
        if run_on_instance_region is None and 'runOnInstanceRegion' in kwargs:
            run_on_instance_region = kwargs['runOnInstanceRegion']
        if run_on_instance_region is None:
            raise TypeError("Missing 'run_on_instance_region' argument")
        if script_command is None and 'scriptCommand' in kwargs:
            script_command = kwargs['scriptCommand']
        if script_command is None:
            raise TypeError("Missing 'script_command' argument")
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']
        if step_type is None:
            raise TypeError("Missing 'step_type' argument")

        _setter("function_id", function_id)
        _setter("function_region", function_region)
        _setter("object_storage_script_locations", object_storage_script_locations)
        _setter("request_body", request_body)
        _setter("run_as_user", run_as_user)
        _setter("run_on_instance_id", run_on_instance_id)
        _setter("run_on_instance_region", run_on_instance_region)
        _setter("script_command", script_command)
        _setter("step_type", step_type)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The OCID of function to be invoked.  Example: `ocid1.fnfunc.oc1..uniqueID`
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="functionRegion")
    def function_region(self) -> str:
        """
        The region in which the function is deployed.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "function_region")

    @property
    @pulumi.getter(name="objectStorageScriptLocations")
    def object_storage_script_locations(self) -> Sequence['outputs.GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult']:
        """
        The details of an object storage script location for a user-defined step in a DR plan.
        """
        return pulumi.get(self, "object_storage_script_locations")

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> str:
        """
        The request body for the function.  Example: `{ "FnParam1", "FnParam2" }`
        """
        return pulumi.get(self, "request_body")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> str:
        """
        The userid on the instance to be used for executing the script or command.  Example: `opc`
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="runOnInstanceId")
    def run_on_instance_id(self) -> str:
        """
        The OCID of the instance on which this script or command should be executed.
        """
        return pulumi.get(self, "run_on_instance_id")

    @property
    @pulumi.getter(name="runOnInstanceRegion")
    def run_on_instance_region(self) -> str:
        """
        The region of the instance where this script or command should be executed.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "run_on_instance_region")

    @property
    @pulumi.getter(name="scriptCommand")
    def script_command(self) -> str:
        """
        The script name and arguments.  Example: `/usr/bin/python3 /home/opc/scripts/my_app_script.py arg1 arg2 arg3`
        """
        return pulumi.get(self, "script_command")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> str:
        """
        The type of the user-defined step.
        """
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `custom_dr_scripts`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `validate_app_start.sh`
        """
        GetDrPlanPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name inside the object storage namespace.  Example: `custom_dr_scripts`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name inside the object storage bucket.  Example: `validate_app_start.sh`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlansDrPlanCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDrPlansDrPlanCollectionItemResult']):
        GetDrPlansDrPlanCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDrPlansDrPlanCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 display_name: str,
                 dr_protection_group_id: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 life_cycle_details: str,
                 peer_dr_protection_group_id: str,
                 peer_region: str,
                 plan_groups: Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupResult'],
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str,
                 type: str):
        """
        :param str compartment_id: The OCID of the compartment containing the DR plan.  Example: `ocid1.compartment.oc1..uniqueID`
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        :param str dr_protection_group_id: The OCID of the DR protection group. Mandatory query param.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  Example: `{"Department": "Finance"}`
        :param str id: The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        :param str life_cycle_details: A message describing the DR plan's current state in more detail.
        :param str peer_dr_protection_group_id: The OCID of the peer DR protection group associated with this plan's DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param str peer_region: The region of the peer DR protection group associated with this plan's DR protection group.  Example: `us-ashburn-1`
        :param Sequence['GetDrPlansDrPlanCollectionItemPlanGroupArgs'] plan_groups: The list of groups in this DR plan.
        :param str state: A filter to return only DR plans that match the given lifecycle state.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the DR plan was created. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_updated: The date and time the DR plan was updated. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str type: The type of the DR plan.
        """
        GetDrPlansDrPlanCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            display_name=display_name,
            dr_protection_group_id=dr_protection_group_id,
            freeform_tags=freeform_tags,
            id=id,
            life_cycle_details=life_cycle_details,
            peer_dr_protection_group_id=peer_dr_protection_group_id,
            peer_region=peer_region,
            plan_groups=plan_groups,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             display_name: Optional[str] = None,
             dr_protection_group_id: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             life_cycle_details: Optional[str] = None,
             peer_dr_protection_group_id: Optional[str] = None,
             peer_region: Optional[str] = None,
             plan_groups: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupResult']] = None,
             state: Optional[str] = None,
             system_tags: Optional[Mapping[str, Any]] = None,
             time_created: Optional[str] = None,
             time_updated: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if dr_protection_group_id is None and 'drProtectionGroupId' in kwargs:
            dr_protection_group_id = kwargs['drProtectionGroupId']
        if dr_protection_group_id is None:
            raise TypeError("Missing 'dr_protection_group_id' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if life_cycle_details is None and 'lifeCycleDetails' in kwargs:
            life_cycle_details = kwargs['lifeCycleDetails']
        if life_cycle_details is None:
            raise TypeError("Missing 'life_cycle_details' argument")
        if peer_dr_protection_group_id is None and 'peerDrProtectionGroupId' in kwargs:
            peer_dr_protection_group_id = kwargs['peerDrProtectionGroupId']
        if peer_dr_protection_group_id is None:
            raise TypeError("Missing 'peer_dr_protection_group_id' argument")
        if peer_region is None and 'peerRegion' in kwargs:
            peer_region = kwargs['peerRegion']
        if peer_region is None:
            raise TypeError("Missing 'peer_region' argument")
        if plan_groups is None and 'planGroups' in kwargs:
            plan_groups = kwargs['planGroups']
        if plan_groups is None:
            raise TypeError("Missing 'plan_groups' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if system_tags is None and 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if system_tags is None:
            raise TypeError("Missing 'system_tags' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if time_updated is None and 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if time_updated is None:
            raise TypeError("Missing 'time_updated' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("display_name", display_name)
        _setter("dr_protection_group_id", dr_protection_group_id)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("life_cycle_details", life_cycle_details)
        _setter("peer_dr_protection_group_id", peer_dr_protection_group_id)
        _setter("peer_region", peer_region)
        _setter("plan_groups", plan_groups)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)
        _setter("type", type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The OCID of the compartment containing the DR plan.  Example: `ocid1.compartment.oc1..uniqueID`
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="drProtectionGroupId")
    def dr_protection_group_id(self) -> str:
        """
        The OCID of the DR protection group. Mandatory query param.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "dr_protection_group_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifeCycleDetails")
    def life_cycle_details(self) -> str:
        """
        A message describing the DR plan's current state in more detail.
        """
        return pulumi.get(self, "life_cycle_details")

    @property
    @pulumi.getter(name="peerDrProtectionGroupId")
    def peer_dr_protection_group_id(self) -> str:
        """
        The OCID of the peer DR protection group associated with this plan's DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "peer_dr_protection_group_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> str:
        """
        The region of the peer DR protection group associated with this plan's DR protection group.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter(name="planGroups")
    def plan_groups(self) -> Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupResult']:
        """
        The list of groups in this DR plan.
        """
        return pulumi.get(self, "plan_groups")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only DR plans that match the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the DR plan was created. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the DR plan was updated. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the DR plan.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemPlanGroupResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str,
                 steps: Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepResult'],
                 type: str):
        """
        :param str display_name: A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        :param str id: The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        :param Sequence['GetDrPlansDrPlanCollectionItemPlanGroupStepArgs'] steps: The list of steps in the group.
        :param str type: The type of the DR plan.
        """
        GetDrPlansDrPlanCollectionItemPlanGroupResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            id=id,
            steps=steps,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             id: Optional[str] = None,
             steps: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepResult']] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if steps is None:
            raise TypeError("Missing 'steps' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")

        _setter("display_name", display_name)
        _setter("id", id)
        _setter("steps", steps)
        _setter("type", type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepResult']:
        """
        The list of steps in the group.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the DR plan.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemPlanGroupStepResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 error_mode: str,
                 group_id: str,
                 id: str,
                 is_enabled: bool,
                 member_id: str,
                 timeout: int,
                 type: str,
                 user_defined_steps: Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult']):
        """
        :param str display_name: A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        :param str error_mode: The error mode for this step.
        :param str group_id: The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        :param str id: The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        :param bool is_enabled: A flag indicating whether this step should be enabled for execution.  Example: `true`
        :param str member_id: The OCID of the member associated with this step.  Example: `ocid1.database.oc1..uniqueID`
        :param int timeout: The timeout in seconds for executing this step.  Example: `600`
        :param str type: The type of the DR plan.
        :param Sequence['GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepArgs'] user_defined_steps: The details for a user-defined step in a DR plan.
        """
        GetDrPlansDrPlanCollectionItemPlanGroupStepResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_name=display_name,
            error_mode=error_mode,
            group_id=group_id,
            id=id,
            is_enabled=is_enabled,
            member_id=member_id,
            timeout=timeout,
            type=type,
            user_defined_steps=user_defined_steps,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_name: Optional[str] = None,
             error_mode: Optional[str] = None,
             group_id: Optional[str] = None,
             id: Optional[str] = None,
             is_enabled: Optional[bool] = None,
             member_id: Optional[str] = None,
             timeout: Optional[int] = None,
             type: Optional[str] = None,
             user_defined_steps: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if error_mode is None and 'errorMode' in kwargs:
            error_mode = kwargs['errorMode']
        if error_mode is None:
            raise TypeError("Missing 'error_mode' argument")
        if group_id is None and 'groupId' in kwargs:
            group_id = kwargs['groupId']
        if group_id is None:
            raise TypeError("Missing 'group_id' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if is_enabled is None and 'isEnabled' in kwargs:
            is_enabled = kwargs['isEnabled']
        if is_enabled is None:
            raise TypeError("Missing 'is_enabled' argument")
        if member_id is None and 'memberId' in kwargs:
            member_id = kwargs['memberId']
        if member_id is None:
            raise TypeError("Missing 'member_id' argument")
        if timeout is None:
            raise TypeError("Missing 'timeout' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if user_defined_steps is None and 'userDefinedSteps' in kwargs:
            user_defined_steps = kwargs['userDefinedSteps']
        if user_defined_steps is None:
            raise TypeError("Missing 'user_defined_steps' argument")

        _setter("display_name", display_name)
        _setter("error_mode", error_mode)
        _setter("group_id", group_id)
        _setter("id", id)
        _setter("is_enabled", is_enabled)
        _setter("member_id", member_id)
        _setter("timeout", timeout)
        _setter("type", type)
        _setter("user_defined_steps", user_defined_steps)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorMode")
    def error_mode(self) -> str:
        """
        The error mode for this step.
        """
        return pulumi.get(self, "error_mode")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        The unique id of the group to which this step belongs. Must not be modified by user.  Example: `sgid1.group..uniqueID`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique id of the step. Must not be modified by the user.  Example: `sgid1.step..uniqueID`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        """
        A flag indicating whether this step should be enabled for execution.  Example: `true`
        """
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> str:
        """
        The OCID of the member associated with this step.  Example: `ocid1.database.oc1..uniqueID`
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        The timeout in seconds for executing this step.  Example: `600`
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the DR plan.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefinedSteps")
    def user_defined_steps(self) -> Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult']:
        """
        The details for a user-defined step in a DR plan.
        """
        return pulumi.get(self, "user_defined_steps")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult(dict):
    def __init__(__self__, *,
                 function_id: str,
                 function_region: str,
                 object_storage_script_locations: Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult'],
                 request_body: str,
                 run_as_user: str,
                 run_on_instance_id: str,
                 run_on_instance_region: str,
                 script_command: str,
                 step_type: str):
        """
        :param str function_id: The OCID of function to be invoked.  Example: `ocid1.fnfunc.oc1..uniqueID`
        :param str function_region: The region in which the function is deployed.  Example: `us-ashburn-1`
        :param Sequence['GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationArgs'] object_storage_script_locations: The details of an object storage script location for a user-defined step in a DR plan.
        :param str request_body: The request body for the function.  Example: `{ "FnParam1", "FnParam2" }`
        :param str run_as_user: The userid on the instance to be used for executing the script or command.  Example: `opc`
        :param str run_on_instance_id: The OCID of the instance on which this script or command should be executed.
        :param str run_on_instance_region: The region of the instance where this script or command should be executed.  Example: `us-ashburn-1`
        :param str script_command: The script name and arguments.  Example: `/usr/bin/python3 /home/opc/scripts/my_app_script.py arg1 arg2 arg3`
        :param str step_type: The type of the user-defined step.
        """
        GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_id=function_id,
            function_region=function_region,
            object_storage_script_locations=object_storage_script_locations,
            request_body=request_body,
            run_as_user=run_as_user,
            run_on_instance_id=run_on_instance_id,
            run_on_instance_region=run_on_instance_region,
            script_command=script_command,
            step_type=step_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_id: Optional[str] = None,
             function_region: Optional[str] = None,
             object_storage_script_locations: Optional[Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult']] = None,
             request_body: Optional[str] = None,
             run_as_user: Optional[str] = None,
             run_on_instance_id: Optional[str] = None,
             run_on_instance_region: Optional[str] = None,
             script_command: Optional[str] = None,
             step_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if function_id is None and 'functionId' in kwargs:
            function_id = kwargs['functionId']
        if function_id is None:
            raise TypeError("Missing 'function_id' argument")
        if function_region is None and 'functionRegion' in kwargs:
            function_region = kwargs['functionRegion']
        if function_region is None:
            raise TypeError("Missing 'function_region' argument")
        if object_storage_script_locations is None and 'objectStorageScriptLocations' in kwargs:
            object_storage_script_locations = kwargs['objectStorageScriptLocations']
        if object_storage_script_locations is None:
            raise TypeError("Missing 'object_storage_script_locations' argument")
        if request_body is None and 'requestBody' in kwargs:
            request_body = kwargs['requestBody']
        if request_body is None:
            raise TypeError("Missing 'request_body' argument")
        if run_as_user is None and 'runAsUser' in kwargs:
            run_as_user = kwargs['runAsUser']
        if run_as_user is None:
            raise TypeError("Missing 'run_as_user' argument")
        if run_on_instance_id is None and 'runOnInstanceId' in kwargs:
            run_on_instance_id = kwargs['runOnInstanceId']
        if run_on_instance_id is None:
            raise TypeError("Missing 'run_on_instance_id' argument")
        if run_on_instance_region is None and 'runOnInstanceRegion' in kwargs:
            run_on_instance_region = kwargs['runOnInstanceRegion']
        if run_on_instance_region is None:
            raise TypeError("Missing 'run_on_instance_region' argument")
        if script_command is None and 'scriptCommand' in kwargs:
            script_command = kwargs['scriptCommand']
        if script_command is None:
            raise TypeError("Missing 'script_command' argument")
        if step_type is None and 'stepType' in kwargs:
            step_type = kwargs['stepType']
        if step_type is None:
            raise TypeError("Missing 'step_type' argument")

        _setter("function_id", function_id)
        _setter("function_region", function_region)
        _setter("object_storage_script_locations", object_storage_script_locations)
        _setter("request_body", request_body)
        _setter("run_as_user", run_as_user)
        _setter("run_on_instance_id", run_on_instance_id)
        _setter("run_on_instance_region", run_on_instance_region)
        _setter("script_command", script_command)
        _setter("step_type", step_type)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> str:
        """
        The OCID of function to be invoked.  Example: `ocid1.fnfunc.oc1..uniqueID`
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="functionRegion")
    def function_region(self) -> str:
        """
        The region in which the function is deployed.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "function_region")

    @property
    @pulumi.getter(name="objectStorageScriptLocations")
    def object_storage_script_locations(self) -> Sequence['outputs.GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult']:
        """
        The details of an object storage script location for a user-defined step in a DR plan.
        """
        return pulumi.get(self, "object_storage_script_locations")

    @property
    @pulumi.getter(name="requestBody")
    def request_body(self) -> str:
        """
        The request body for the function.  Example: `{ "FnParam1", "FnParam2" }`
        """
        return pulumi.get(self, "request_body")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> str:
        """
        The userid on the instance to be used for executing the script or command.  Example: `opc`
        """
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="runOnInstanceId")
    def run_on_instance_id(self) -> str:
        """
        The OCID of the instance on which this script or command should be executed.
        """
        return pulumi.get(self, "run_on_instance_id")

    @property
    @pulumi.getter(name="runOnInstanceRegion")
    def run_on_instance_region(self) -> str:
        """
        The region of the instance where this script or command should be executed.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "run_on_instance_region")

    @property
    @pulumi.getter(name="scriptCommand")
    def script_command(self) -> str:
        """
        The script name and arguments.  Example: `/usr/bin/python3 /home/opc/scripts/my_app_script.py arg1 arg2 arg3`
        """
        return pulumi.get(self, "script_command")

    @property
    @pulumi.getter(name="stepType")
    def step_type(self) -> str:
        """
        The type of the user-defined step.
        """
        return pulumi.get(self, "step_type")


@pulumi.output_type
class GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `custom_dr_scripts`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `validate_app_start.sh`
        """
        GetDrPlansDrPlanCollectionItemPlanGroupStepUserDefinedStepObjectStorageScriptLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name inside the object storage namespace.  Example: `custom_dr_scripts`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name inside the object storage bucket.  Example: `validate_app_start.sh`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrPlansFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetDrPlansFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetDrProtectionGroupAssociationResult(dict):
    def __init__(__self__, *,
                 peer_id: str,
                 peer_region: str,
                 role: str):
        """
        :param str peer_id: The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param str peer_region: The region of the peer DR protection group.  Example: `us-ashburn-1`
        :param str role: The role of the DR protection group.
        """
        GetDrProtectionGroupAssociationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            peer_id=peer_id,
            peer_region=peer_region,
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             peer_id: Optional[str] = None,
             peer_region: Optional[str] = None,
             role: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if peer_id is None and 'peerId' in kwargs:
            peer_id = kwargs['peerId']
        if peer_id is None:
            raise TypeError("Missing 'peer_id' argument")
        if peer_region is None and 'peerRegion' in kwargs:
            peer_region = kwargs['peerRegion']
        if peer_region is None:
            raise TypeError("Missing 'peer_region' argument")
        if role is None:
            raise TypeError("Missing 'role' argument")

        _setter("peer_id", peer_id)
        _setter("peer_region", peer_region)
        _setter("role", role)

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> str:
        """
        The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> str:
        """
        The region of the peer DR protection group.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role of the DR protection group.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetDrProtectionGroupLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        GetDrProtectionGroupLogLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrProtectionGroupMemberResult(dict):
    def __init__(__self__, *,
                 backend_set_mappings: Sequence['outputs.GetDrProtectionGroupMemberBackendSetMappingResult'],
                 block_volume_operations: Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationResult'],
                 destination_availability_domain: str,
                 destination_capacity_reservation_id: str,
                 destination_compartment_id: str,
                 destination_dedicated_vm_host_id: str,
                 destination_load_balancer_id: str,
                 destination_network_load_balancer_id: str,
                 export_mappings: Sequence['outputs.GetDrProtectionGroupMemberExportMappingResult'],
                 file_system_operations: Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationResult'],
                 is_movable: bool,
                 is_retain_fault_domain: bool,
                 is_start_stop_enabled: bool,
                 member_id: str,
                 member_type: str,
                 password_vault_secret_id: str,
                 vnic_mapping: Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult'],
                 vnic_mappings: Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult']):
        """
        :param Sequence['GetDrProtectionGroupMemberBackendSetMappingArgs'] backend_set_mappings: A list of backend set mappings that are used to transfer or update backends during DR.
        :param Sequence['GetDrProtectionGroupMemberBlockVolumeOperationArgs'] block_volume_operations: Operations performed on a list of block volumes used on the non-movable compute instance.
        :param str destination_availability_domain: The availability domain of the destination mount target. Example: `BBTh:region-AD`
        :param str destination_capacity_reservation_id: The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        :param str destination_compartment_id: The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        :param str destination_dedicated_vm_host_id: The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        :param str destination_load_balancer_id: The OCID of the destination load balancer. The backend sets in this destination load balancer are updated during DR.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        :param str destination_network_load_balancer_id: The OCID of the destination network load balancer. The backend sets in this destination network load balancer are updated during DR.                Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        :param Sequence['GetDrProtectionGroupMemberExportMappingArgs'] export_mappings: A list of mappings between the primary region file system export and destination region mount target.
        :param Sequence['GetDrProtectionGroupMemberFileSystemOperationArgs'] file_system_operations: Operations performed on a list of file systems used on the non-movable compute instance.
        :param bool is_movable: A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
        :param bool is_retain_fault_domain: A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
        :param bool is_start_stop_enabled: A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
        :param str member_id: The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        :param str member_type: The type of the member.
        :param str password_vault_secret_id: The OCID of the vault secret where the database SYSDBA password is stored. This password is used for performing database DR operations.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        :param Sequence['GetDrProtectionGroupMemberVnicMappingArgs'] vnic_mapping: A list of compute instance VNIC mappings.
        :param Sequence['GetDrProtectionGroupMemberVnicMappingArgs'] vnic_mappings: A list of compute instance VNIC mappings.
        """
        GetDrProtectionGroupMemberResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backend_set_mappings=backend_set_mappings,
            block_volume_operations=block_volume_operations,
            destination_availability_domain=destination_availability_domain,
            destination_capacity_reservation_id=destination_capacity_reservation_id,
            destination_compartment_id=destination_compartment_id,
            destination_dedicated_vm_host_id=destination_dedicated_vm_host_id,
            destination_load_balancer_id=destination_load_balancer_id,
            destination_network_load_balancer_id=destination_network_load_balancer_id,
            export_mappings=export_mappings,
            file_system_operations=file_system_operations,
            is_movable=is_movable,
            is_retain_fault_domain=is_retain_fault_domain,
            is_start_stop_enabled=is_start_stop_enabled,
            member_id=member_id,
            member_type=member_type,
            password_vault_secret_id=password_vault_secret_id,
            vnic_mapping=vnic_mapping,
            vnic_mappings=vnic_mappings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backend_set_mappings: Optional[Sequence['outputs.GetDrProtectionGroupMemberBackendSetMappingResult']] = None,
             block_volume_operations: Optional[Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationResult']] = None,
             destination_availability_domain: Optional[str] = None,
             destination_capacity_reservation_id: Optional[str] = None,
             destination_compartment_id: Optional[str] = None,
             destination_dedicated_vm_host_id: Optional[str] = None,
             destination_load_balancer_id: Optional[str] = None,
             destination_network_load_balancer_id: Optional[str] = None,
             export_mappings: Optional[Sequence['outputs.GetDrProtectionGroupMemberExportMappingResult']] = None,
             file_system_operations: Optional[Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationResult']] = None,
             is_movable: Optional[bool] = None,
             is_retain_fault_domain: Optional[bool] = None,
             is_start_stop_enabled: Optional[bool] = None,
             member_id: Optional[str] = None,
             member_type: Optional[str] = None,
             password_vault_secret_id: Optional[str] = None,
             vnic_mapping: Optional[Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult']] = None,
             vnic_mappings: Optional[Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if backend_set_mappings is None and 'backendSetMappings' in kwargs:
            backend_set_mappings = kwargs['backendSetMappings']
        if backend_set_mappings is None:
            raise TypeError("Missing 'backend_set_mappings' argument")
        if block_volume_operations is None and 'blockVolumeOperations' in kwargs:
            block_volume_operations = kwargs['blockVolumeOperations']
        if block_volume_operations is None:
            raise TypeError("Missing 'block_volume_operations' argument")
        if destination_availability_domain is None and 'destinationAvailabilityDomain' in kwargs:
            destination_availability_domain = kwargs['destinationAvailabilityDomain']
        if destination_availability_domain is None:
            raise TypeError("Missing 'destination_availability_domain' argument")
        if destination_capacity_reservation_id is None and 'destinationCapacityReservationId' in kwargs:
            destination_capacity_reservation_id = kwargs['destinationCapacityReservationId']
        if destination_capacity_reservation_id is None:
            raise TypeError("Missing 'destination_capacity_reservation_id' argument")
        if destination_compartment_id is None and 'destinationCompartmentId' in kwargs:
            destination_compartment_id = kwargs['destinationCompartmentId']
        if destination_compartment_id is None:
            raise TypeError("Missing 'destination_compartment_id' argument")
        if destination_dedicated_vm_host_id is None and 'destinationDedicatedVmHostId' in kwargs:
            destination_dedicated_vm_host_id = kwargs['destinationDedicatedVmHostId']
        if destination_dedicated_vm_host_id is None:
            raise TypeError("Missing 'destination_dedicated_vm_host_id' argument")
        if destination_load_balancer_id is None and 'destinationLoadBalancerId' in kwargs:
            destination_load_balancer_id = kwargs['destinationLoadBalancerId']
        if destination_load_balancer_id is None:
            raise TypeError("Missing 'destination_load_balancer_id' argument")
        if destination_network_load_balancer_id is None and 'destinationNetworkLoadBalancerId' in kwargs:
            destination_network_load_balancer_id = kwargs['destinationNetworkLoadBalancerId']
        if destination_network_load_balancer_id is None:
            raise TypeError("Missing 'destination_network_load_balancer_id' argument")
        if export_mappings is None and 'exportMappings' in kwargs:
            export_mappings = kwargs['exportMappings']
        if export_mappings is None:
            raise TypeError("Missing 'export_mappings' argument")
        if file_system_operations is None and 'fileSystemOperations' in kwargs:
            file_system_operations = kwargs['fileSystemOperations']
        if file_system_operations is None:
            raise TypeError("Missing 'file_system_operations' argument")
        if is_movable is None and 'isMovable' in kwargs:
            is_movable = kwargs['isMovable']
        if is_movable is None:
            raise TypeError("Missing 'is_movable' argument")
        if is_retain_fault_domain is None and 'isRetainFaultDomain' in kwargs:
            is_retain_fault_domain = kwargs['isRetainFaultDomain']
        if is_retain_fault_domain is None:
            raise TypeError("Missing 'is_retain_fault_domain' argument")
        if is_start_stop_enabled is None and 'isStartStopEnabled' in kwargs:
            is_start_stop_enabled = kwargs['isStartStopEnabled']
        if is_start_stop_enabled is None:
            raise TypeError("Missing 'is_start_stop_enabled' argument")
        if member_id is None and 'memberId' in kwargs:
            member_id = kwargs['memberId']
        if member_id is None:
            raise TypeError("Missing 'member_id' argument")
        if member_type is None and 'memberType' in kwargs:
            member_type = kwargs['memberType']
        if member_type is None:
            raise TypeError("Missing 'member_type' argument")
        if password_vault_secret_id is None and 'passwordVaultSecretId' in kwargs:
            password_vault_secret_id = kwargs['passwordVaultSecretId']
        if password_vault_secret_id is None:
            raise TypeError("Missing 'password_vault_secret_id' argument")
        if vnic_mapping is None and 'vnicMapping' in kwargs:
            vnic_mapping = kwargs['vnicMapping']
        if vnic_mapping is None:
            raise TypeError("Missing 'vnic_mapping' argument")
        if vnic_mappings is None and 'vnicMappings' in kwargs:
            vnic_mappings = kwargs['vnicMappings']
        if vnic_mappings is None:
            raise TypeError("Missing 'vnic_mappings' argument")

        _setter("backend_set_mappings", backend_set_mappings)
        _setter("block_volume_operations", block_volume_operations)
        _setter("destination_availability_domain", destination_availability_domain)
        _setter("destination_capacity_reservation_id", destination_capacity_reservation_id)
        _setter("destination_compartment_id", destination_compartment_id)
        _setter("destination_dedicated_vm_host_id", destination_dedicated_vm_host_id)
        _setter("destination_load_balancer_id", destination_load_balancer_id)
        _setter("destination_network_load_balancer_id", destination_network_load_balancer_id)
        _setter("export_mappings", export_mappings)
        _setter("file_system_operations", file_system_operations)
        _setter("is_movable", is_movable)
        _setter("is_retain_fault_domain", is_retain_fault_domain)
        _setter("is_start_stop_enabled", is_start_stop_enabled)
        _setter("member_id", member_id)
        _setter("member_type", member_type)
        _setter("password_vault_secret_id", password_vault_secret_id)
        _setter("vnic_mapping", vnic_mapping)
        _setter("vnic_mappings", vnic_mappings)

    @property
    @pulumi.getter(name="backendSetMappings")
    def backend_set_mappings(self) -> Sequence['outputs.GetDrProtectionGroupMemberBackendSetMappingResult']:
        """
        A list of backend set mappings that are used to transfer or update backends during DR.
        """
        return pulumi.get(self, "backend_set_mappings")

    @property
    @pulumi.getter(name="blockVolumeOperations")
    def block_volume_operations(self) -> Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationResult']:
        """
        Operations performed on a list of block volumes used on the non-movable compute instance.
        """
        return pulumi.get(self, "block_volume_operations")

    @property
    @pulumi.getter(name="destinationAvailabilityDomain")
    def destination_availability_domain(self) -> str:
        """
        The availability domain of the destination mount target. Example: `BBTh:region-AD`
        """
        return pulumi.get(self, "destination_availability_domain")

    @property
    @pulumi.getter(name="destinationCapacityReservationId")
    def destination_capacity_reservation_id(self) -> str:
        """
        The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_capacity_reservation_id")

    @property
    @pulumi.getter(name="destinationCompartmentId")
    def destination_compartment_id(self) -> str:
        """
        The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_compartment_id")

    @property
    @pulumi.getter(name="destinationDedicatedVmHostId")
    def destination_dedicated_vm_host_id(self) -> str:
        """
        The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_dedicated_vm_host_id")

    @property
    @pulumi.getter(name="destinationLoadBalancerId")
    def destination_load_balancer_id(self) -> str:
        """
        The OCID of the destination load balancer. The backend sets in this destination load balancer are updated during DR.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_load_balancer_id")

    @property
    @pulumi.getter(name="destinationNetworkLoadBalancerId")
    def destination_network_load_balancer_id(self) -> str:
        """
        The OCID of the destination network load balancer. The backend sets in this destination network load balancer are updated during DR.                Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_network_load_balancer_id")

    @property
    @pulumi.getter(name="exportMappings")
    def export_mappings(self) -> Sequence['outputs.GetDrProtectionGroupMemberExportMappingResult']:
        """
        A list of mappings between the primary region file system export and destination region mount target.
        """
        return pulumi.get(self, "export_mappings")

    @property
    @pulumi.getter(name="fileSystemOperations")
    def file_system_operations(self) -> Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationResult']:
        """
        Operations performed on a list of file systems used on the non-movable compute instance.
        """
        return pulumi.get(self, "file_system_operations")

    @property
    @pulumi.getter(name="isMovable")
    def is_movable(self) -> bool:
        """
        A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
        """
        return pulumi.get(self, "is_movable")

    @property
    @pulumi.getter(name="isRetainFaultDomain")
    def is_retain_fault_domain(self) -> bool:
        """
        A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
        """
        return pulumi.get(self, "is_retain_fault_domain")

    @property
    @pulumi.getter(name="isStartStopEnabled")
    def is_start_stop_enabled(self) -> bool:
        """
        A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
        """
        return pulumi.get(self, "is_start_stop_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> str:
        """
        The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> str:
        """
        The type of the member.
        """
        return pulumi.get(self, "member_type")

    @property
    @pulumi.getter(name="passwordVaultSecretId")
    def password_vault_secret_id(self) -> str:
        """
        The OCID of the vault secret where the database SYSDBA password is stored. This password is used for performing database DR operations.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        """
        return pulumi.get(self, "password_vault_secret_id")

    @property
    @pulumi.getter(name="vnicMapping")
    def vnic_mapping(self) -> Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult']:
        """
        A list of compute instance VNIC mappings.
        """
        return pulumi.get(self, "vnic_mapping")

    @property
    @pulumi.getter(name="vnicMappings")
    def vnic_mappings(self) -> Sequence['outputs.GetDrProtectionGroupMemberVnicMappingResult']:
        """
        A list of compute instance VNIC mappings.
        """
        return pulumi.get(self, "vnic_mappings")


@pulumi.output_type
class GetDrProtectionGroupMemberBackendSetMappingResult(dict):
    def __init__(__self__, *,
                 destination_backend_set_name: str,
                 is_backend_set_for_non_movable: bool,
                 source_backend_set_name: str):
        """
        :param str destination_backend_set_name: The name of the destination backend set.  Example: `My_Destination_Backend_Set`
        :param bool is_backend_set_for_non_movable: This flag specifies if this backend set is used for traffic for non-movable compute instances. Backend sets that point to non-movable instances are only enabled or disabled during DR. For non-movable instances this flag should be set to 'true'. Backend sets that point to movable instances are emptied and their contents are transferred to the destination region network load balancer.  For movable instances this flag should be set to 'false'.   Example: `true`
        :param str source_backend_set_name: The name of the source backend set.  Example: `My_Source_Backend_Set`
        """
        GetDrProtectionGroupMemberBackendSetMappingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_backend_set_name=destination_backend_set_name,
            is_backend_set_for_non_movable=is_backend_set_for_non_movable,
            source_backend_set_name=source_backend_set_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_backend_set_name: Optional[str] = None,
             is_backend_set_for_non_movable: Optional[bool] = None,
             source_backend_set_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_backend_set_name is None and 'destinationBackendSetName' in kwargs:
            destination_backend_set_name = kwargs['destinationBackendSetName']
        if destination_backend_set_name is None:
            raise TypeError("Missing 'destination_backend_set_name' argument")
        if is_backend_set_for_non_movable is None and 'isBackendSetForNonMovable' in kwargs:
            is_backend_set_for_non_movable = kwargs['isBackendSetForNonMovable']
        if is_backend_set_for_non_movable is None:
            raise TypeError("Missing 'is_backend_set_for_non_movable' argument")
        if source_backend_set_name is None and 'sourceBackendSetName' in kwargs:
            source_backend_set_name = kwargs['sourceBackendSetName']
        if source_backend_set_name is None:
            raise TypeError("Missing 'source_backend_set_name' argument")

        _setter("destination_backend_set_name", destination_backend_set_name)
        _setter("is_backend_set_for_non_movable", is_backend_set_for_non_movable)
        _setter("source_backend_set_name", source_backend_set_name)

    @property
    @pulumi.getter(name="destinationBackendSetName")
    def destination_backend_set_name(self) -> str:
        """
        The name of the destination backend set.  Example: `My_Destination_Backend_Set`
        """
        return pulumi.get(self, "destination_backend_set_name")

    @property
    @pulumi.getter(name="isBackendSetForNonMovable")
    def is_backend_set_for_non_movable(self) -> bool:
        """
        This flag specifies if this backend set is used for traffic for non-movable compute instances. Backend sets that point to non-movable instances are only enabled or disabled during DR. For non-movable instances this flag should be set to 'true'. Backend sets that point to movable instances are emptied and their contents are transferred to the destination region network load balancer.  For movable instances this flag should be set to 'false'.   Example: `true`
        """
        return pulumi.get(self, "is_backend_set_for_non_movable")

    @property
    @pulumi.getter(name="sourceBackendSetName")
    def source_backend_set_name(self) -> str:
        """
        The name of the source backend set.  Example: `My_Source_Backend_Set`
        """
        return pulumi.get(self, "source_backend_set_name")


@pulumi.output_type
class GetDrProtectionGroupMemberBlockVolumeOperationResult(dict):
    def __init__(__self__, *,
                 attachment_details: Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult'],
                 block_volume_id: str,
                 mount_details: Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult']):
        """
        :param Sequence['GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailArgs'] attachment_details: The details for attaching or detaching a block volume.
        :param str block_volume_id: The OCID of the block volume.  Example: `ocid1.volume.oc1..uniqueID`
        :param Sequence['GetDrProtectionGroupMemberBlockVolumeOperationMountDetailArgs'] mount_details: Mount details of a file system.
        """
        GetDrProtectionGroupMemberBlockVolumeOperationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attachment_details=attachment_details,
            block_volume_id=block_volume_id,
            mount_details=mount_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attachment_details: Optional[Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult']] = None,
             block_volume_id: Optional[str] = None,
             mount_details: Optional[Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if attachment_details is None and 'attachmentDetails' in kwargs:
            attachment_details = kwargs['attachmentDetails']
        if attachment_details is None:
            raise TypeError("Missing 'attachment_details' argument")
        if block_volume_id is None and 'blockVolumeId' in kwargs:
            block_volume_id = kwargs['blockVolumeId']
        if block_volume_id is None:
            raise TypeError("Missing 'block_volume_id' argument")
        if mount_details is None and 'mountDetails' in kwargs:
            mount_details = kwargs['mountDetails']
        if mount_details is None:
            raise TypeError("Missing 'mount_details' argument")

        _setter("attachment_details", attachment_details)
        _setter("block_volume_id", block_volume_id)
        _setter("mount_details", mount_details)

    @property
    @pulumi.getter(name="attachmentDetails")
    def attachment_details(self) -> Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult']:
        """
        The details for attaching or detaching a block volume.
        """
        return pulumi.get(self, "attachment_details")

    @property
    @pulumi.getter(name="blockVolumeId")
    def block_volume_id(self) -> str:
        """
        The OCID of the block volume.  Example: `ocid1.volume.oc1..uniqueID`
        """
        return pulumi.get(self, "block_volume_id")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Sequence['outputs.GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult']:
        """
        Mount details of a file system.
        """
        return pulumi.get(self, "mount_details")


@pulumi.output_type
class GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult(dict):
    def __init__(__self__, *,
                 volume_attachment_reference_instance_id: str):
        """
        :param str volume_attachment_reference_instance_id: The OCID of the reference compute instance from which to obtain the attachment details for the volume. This reference compute instance is from the peer DR protection group.  Example: `ocid1.instance.oc1..uniqueID`
        """
        GetDrProtectionGroupMemberBlockVolumeOperationAttachmentDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            volume_attachment_reference_instance_id=volume_attachment_reference_instance_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             volume_attachment_reference_instance_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if volume_attachment_reference_instance_id is None and 'volumeAttachmentReferenceInstanceId' in kwargs:
            volume_attachment_reference_instance_id = kwargs['volumeAttachmentReferenceInstanceId']
        if volume_attachment_reference_instance_id is None:
            raise TypeError("Missing 'volume_attachment_reference_instance_id' argument")

        _setter("volume_attachment_reference_instance_id", volume_attachment_reference_instance_id)

    @property
    @pulumi.getter(name="volumeAttachmentReferenceInstanceId")
    def volume_attachment_reference_instance_id(self) -> str:
        """
        The OCID of the reference compute instance from which to obtain the attachment details for the volume. This reference compute instance is from the peer DR protection group.  Example: `ocid1.instance.oc1..uniqueID`
        """
        return pulumi.get(self, "volume_attachment_reference_instance_id")


@pulumi.output_type
class GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult(dict):
    def __init__(__self__, *,
                 mount_point: str):
        """
        :param str mount_point: The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        GetDrProtectionGroupMemberBlockVolumeOperationMountDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_point=mount_point,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_point: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_point is None and 'mountPoint' in kwargs:
            mount_point = kwargs['mountPoint']
        if mount_point is None:
            raise TypeError("Missing 'mount_point' argument")

        _setter("mount_point", mount_point)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> str:
        """
        The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        return pulumi.get(self, "mount_point")


@pulumi.output_type
class GetDrProtectionGroupMemberExportMappingResult(dict):
    def __init__(__self__, *,
                 destination_mount_target_id: str,
                 export_id: str):
        """
        :param str destination_mount_target_id: The OCID of the destination mount target on which this file system export should be created.  Example: `ocid1.mounttarget.oc1..uniqueID`
        :param str export_id: The OCID of the export path.  Example: `ocid1.export.oc1..uniqueID`
        """
        GetDrProtectionGroupMemberExportMappingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_mount_target_id=destination_mount_target_id,
            export_id=export_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_mount_target_id: Optional[str] = None,
             export_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_mount_target_id is None and 'destinationMountTargetId' in kwargs:
            destination_mount_target_id = kwargs['destinationMountTargetId']
        if destination_mount_target_id is None:
            raise TypeError("Missing 'destination_mount_target_id' argument")
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if export_id is None:
            raise TypeError("Missing 'export_id' argument")

        _setter("destination_mount_target_id", destination_mount_target_id)
        _setter("export_id", export_id)

    @property
    @pulumi.getter(name="destinationMountTargetId")
    def destination_mount_target_id(self) -> str:
        """
        The OCID of the destination mount target on which this file system export should be created.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_mount_target_id")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> str:
        """
        The OCID of the export path.  Example: `ocid1.export.oc1..uniqueID`
        """
        return pulumi.get(self, "export_id")


@pulumi.output_type
class GetDrProtectionGroupMemberFileSystemOperationResult(dict):
    def __init__(__self__, *,
                 export_path: str,
                 mount_details: Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationMountDetailResult'],
                 mount_point: str,
                 mount_target_id: str,
                 unmount_details: Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult']):
        """
        :param str export_path: The export path of the file system.  Example: `/fs-export-path`
        :param Sequence['GetDrProtectionGroupMemberFileSystemOperationMountDetailArgs'] mount_details: Mount details of a file system.
        :param str mount_point: The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        :param str mount_target_id: The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        :param Sequence['GetDrProtectionGroupMemberFileSystemOperationUnmountDetailArgs'] unmount_details: Unmount details for a file system.
        """
        GetDrProtectionGroupMemberFileSystemOperationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            export_path=export_path,
            mount_details=mount_details,
            mount_point=mount_point,
            mount_target_id=mount_target_id,
            unmount_details=unmount_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             export_path: Optional[str] = None,
             mount_details: Optional[Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationMountDetailResult']] = None,
             mount_point: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             unmount_details: Optional[Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if export_path is None and 'exportPath' in kwargs:
            export_path = kwargs['exportPath']
        if export_path is None:
            raise TypeError("Missing 'export_path' argument")
        if mount_details is None and 'mountDetails' in kwargs:
            mount_details = kwargs['mountDetails']
        if mount_details is None:
            raise TypeError("Missing 'mount_details' argument")
        if mount_point is None and 'mountPoint' in kwargs:
            mount_point = kwargs['mountPoint']
        if mount_point is None:
            raise TypeError("Missing 'mount_point' argument")
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")
        if unmount_details is None and 'unmountDetails' in kwargs:
            unmount_details = kwargs['unmountDetails']
        if unmount_details is None:
            raise TypeError("Missing 'unmount_details' argument")

        _setter("export_path", export_path)
        _setter("mount_details", mount_details)
        _setter("mount_point", mount_point)
        _setter("mount_target_id", mount_target_id)
        _setter("unmount_details", unmount_details)

    @property
    @pulumi.getter(name="exportPath")
    def export_path(self) -> str:
        """
        The export path of the file system.  Example: `/fs-export-path`
        """
        return pulumi.get(self, "export_path")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationMountDetailResult']:
        """
        Mount details of a file system.
        """
        return pulumi.get(self, "mount_details")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> str:
        """
        The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter(name="unmountDetails")
    def unmount_details(self) -> Sequence['outputs.GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult']:
        """
        Unmount details for a file system.
        """
        return pulumi.get(self, "unmount_details")


@pulumi.output_type
class GetDrProtectionGroupMemberFileSystemOperationMountDetailResult(dict):
    def __init__(__self__, *,
                 mount_target_id: str):
        """
        :param str mount_target_id: The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        GetDrProtectionGroupMemberFileSystemOperationMountDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_target_id=mount_target_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_target_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")

        _setter("mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult(dict):
    def __init__(__self__, *,
                 mount_target_id: str):
        """
        :param str mount_target_id: The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        GetDrProtectionGroupMemberFileSystemOperationUnmountDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_target_id=mount_target_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_target_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")

        _setter("mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class GetDrProtectionGroupMemberVnicMappingResult(dict):
    def __init__(__self__, *,
                 destination_nsg_id_lists: Sequence[str],
                 destination_primary_private_ip_address: str,
                 destination_primary_private_ip_hostname_label: str,
                 destination_subnet_id: str,
                 source_vnic_id: str):
        """
        :param Sequence[str] destination_nsg_id_lists: A list of OCIDs of network security groups (NSG) in the destination region which should be assigned to the source VNIC.  Example: `[ ocid1.networksecuritygroup.oc1..uniqueID, ocid1.networksecuritygroup.oc1..uniqueID ]`
        :param str destination_primary_private_ip_address: The private IP address to be assigned as the VNIC's primary IP address in the destination subnet. This must be a valid IP address in the destination subnet and the IP address must be available.  Example: `10.0.3.3`
        :param str destination_primary_private_ip_hostname_label: The hostname label to be assigned in the destination subnet for the primary private IP of the source VNIC. This label is the hostname portion of the private IP's fully qualified domain name (FQDN)  (for example, 'myhost1' in the FQDN 'myhost1.subnet123.vcn1.oraclevcn.com').  Example: `myhost1`
        :param str destination_subnet_id: The OCID of the destination subnet to which the source VNIC should connect.  Example: `ocid1.subnet.oc1..uniqueID`
        :param str source_vnic_id: The OCID of the source VNIC.  Example: `ocid1.vnic.oc1..uniqueID`
        """
        GetDrProtectionGroupMemberVnicMappingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_nsg_id_lists=destination_nsg_id_lists,
            destination_primary_private_ip_address=destination_primary_private_ip_address,
            destination_primary_private_ip_hostname_label=destination_primary_private_ip_hostname_label,
            destination_subnet_id=destination_subnet_id,
            source_vnic_id=source_vnic_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_nsg_id_lists: Optional[Sequence[str]] = None,
             destination_primary_private_ip_address: Optional[str] = None,
             destination_primary_private_ip_hostname_label: Optional[str] = None,
             destination_subnet_id: Optional[str] = None,
             source_vnic_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_nsg_id_lists is None and 'destinationNsgIdLists' in kwargs:
            destination_nsg_id_lists = kwargs['destinationNsgIdLists']
        if destination_nsg_id_lists is None:
            raise TypeError("Missing 'destination_nsg_id_lists' argument")
        if destination_primary_private_ip_address is None and 'destinationPrimaryPrivateIpAddress' in kwargs:
            destination_primary_private_ip_address = kwargs['destinationPrimaryPrivateIpAddress']
        if destination_primary_private_ip_address is None:
            raise TypeError("Missing 'destination_primary_private_ip_address' argument")
        if destination_primary_private_ip_hostname_label is None and 'destinationPrimaryPrivateIpHostnameLabel' in kwargs:
            destination_primary_private_ip_hostname_label = kwargs['destinationPrimaryPrivateIpHostnameLabel']
        if destination_primary_private_ip_hostname_label is None:
            raise TypeError("Missing 'destination_primary_private_ip_hostname_label' argument")
        if destination_subnet_id is None and 'destinationSubnetId' in kwargs:
            destination_subnet_id = kwargs['destinationSubnetId']
        if destination_subnet_id is None:
            raise TypeError("Missing 'destination_subnet_id' argument")
        if source_vnic_id is None and 'sourceVnicId' in kwargs:
            source_vnic_id = kwargs['sourceVnicId']
        if source_vnic_id is None:
            raise TypeError("Missing 'source_vnic_id' argument")

        _setter("destination_nsg_id_lists", destination_nsg_id_lists)
        _setter("destination_primary_private_ip_address", destination_primary_private_ip_address)
        _setter("destination_primary_private_ip_hostname_label", destination_primary_private_ip_hostname_label)
        _setter("destination_subnet_id", destination_subnet_id)
        _setter("source_vnic_id", source_vnic_id)

    @property
    @pulumi.getter(name="destinationNsgIdLists")
    def destination_nsg_id_lists(self) -> Sequence[str]:
        """
        A list of OCIDs of network security groups (NSG) in the destination region which should be assigned to the source VNIC.  Example: `[ ocid1.networksecuritygroup.oc1..uniqueID, ocid1.networksecuritygroup.oc1..uniqueID ]`
        """
        return pulumi.get(self, "destination_nsg_id_lists")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpAddress")
    def destination_primary_private_ip_address(self) -> str:
        """
        The private IP address to be assigned as the VNIC's primary IP address in the destination subnet. This must be a valid IP address in the destination subnet and the IP address must be available.  Example: `10.0.3.3`
        """
        return pulumi.get(self, "destination_primary_private_ip_address")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpHostnameLabel")
    def destination_primary_private_ip_hostname_label(self) -> str:
        """
        The hostname label to be assigned in the destination subnet for the primary private IP of the source VNIC. This label is the hostname portion of the private IP's fully qualified domain name (FQDN)  (for example, 'myhost1' in the FQDN 'myhost1.subnet123.vcn1.oraclevcn.com').  Example: `myhost1`
        """
        return pulumi.get(self, "destination_primary_private_ip_hostname_label")

    @property
    @pulumi.getter(name="destinationSubnetId")
    def destination_subnet_id(self) -> str:
        """
        The OCID of the destination subnet to which the source VNIC should connect.  Example: `ocid1.subnet.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_subnet_id")

    @property
    @pulumi.getter(name="sourceVnicId")
    def source_vnic_id(self) -> str:
        """
        The OCID of the source VNIC.  Example: `ocid1.vnic.oc1..uniqueID`
        """
        return pulumi.get(self, "source_vnic_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemResult']):
        GetDrProtectionGroupsDrProtectionGroupCollectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items=items,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if items is None:
            raise TypeError("Missing 'items' argument")

        _setter("items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemResult(dict):
    def __init__(__self__, *,
                 associations: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult'],
                 compartment_id: str,
                 defined_tags: Mapping[str, Any],
                 disassociate_trigger: int,
                 display_name: str,
                 freeform_tags: Mapping[str, Any],
                 id: str,
                 life_cycle_details: str,
                 lifecycle_sub_state: str,
                 log_locations: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult'],
                 members: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult'],
                 peer_id: str,
                 peer_region: str,
                 role: str,
                 state: str,
                 system_tags: Mapping[str, Any],
                 time_created: str,
                 time_updated: str):
        """
        :param str compartment_id: The ID (OCID) of the compartment in which to list resources.  Example: `ocid1.compartment.oc1..uniqueID`
        :param Mapping[str, Any] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"Operations.CostCenter": "42"}`
        :param str display_name: A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        :param Mapping[str, Any] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  Example: `{"Department": "Finance"}`
        :param str id: The OCID of the DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param str life_cycle_details: A message describing the DR protection group's current state in more detail.
        :param str lifecycle_sub_state: A filter to return only DR protection groups that match the given lifecycle sub-state.
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationArgs'] log_locations: The details of an object storage log location for a DR protection group.
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberArgs'] members: A list of DR protection group members.
        :param str peer_id: The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param str peer_region: The region of the peer DR protection group.  Example: `us-ashburn-1`
        :param str role: The DR protection group Role.
        :param str state: A filter to return only DR protection groups that match the given lifecycle state.
        :param Mapping[str, Any] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param str time_created: The date and time the DR protection group was created. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        :param str time_updated: The date and time the DR protection group was updated. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            associations=associations,
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            disassociate_trigger=disassociate_trigger,
            display_name=display_name,
            freeform_tags=freeform_tags,
            id=id,
            life_cycle_details=life_cycle_details,
            lifecycle_sub_state=lifecycle_sub_state,
            log_locations=log_locations,
            members=members,
            peer_id=peer_id,
            peer_region=peer_region,
            role=role,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             associations: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult']] = None,
             compartment_id: Optional[str] = None,
             defined_tags: Optional[Mapping[str, Any]] = None,
             disassociate_trigger: Optional[int] = None,
             display_name: Optional[str] = None,
             freeform_tags: Optional[Mapping[str, Any]] = None,
             id: Optional[str] = None,
             life_cycle_details: Optional[str] = None,
             lifecycle_sub_state: Optional[str] = None,
             log_locations: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult']] = None,
             members: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult']] = None,
             peer_id: Optional[str] = None,
             peer_region: Optional[str] = None,
             role: Optional[str] = None,
             state: Optional[str] = None,
             system_tags: Optional[Mapping[str, Any]] = None,
             time_created: Optional[str] = None,
             time_updated: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if associations is None:
            raise TypeError("Missing 'associations' argument")
        if compartment_id is None and 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if compartment_id is None:
            raise TypeError("Missing 'compartment_id' argument")
        if defined_tags is None and 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if defined_tags is None:
            raise TypeError("Missing 'defined_tags' argument")
        if disassociate_trigger is None and 'disassociateTrigger' in kwargs:
            disassociate_trigger = kwargs['disassociateTrigger']
        if disassociate_trigger is None:
            raise TypeError("Missing 'disassociate_trigger' argument")
        if display_name is None and 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if display_name is None:
            raise TypeError("Missing 'display_name' argument")
        if freeform_tags is None and 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if freeform_tags is None:
            raise TypeError("Missing 'freeform_tags' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")
        if life_cycle_details is None and 'lifeCycleDetails' in kwargs:
            life_cycle_details = kwargs['lifeCycleDetails']
        if life_cycle_details is None:
            raise TypeError("Missing 'life_cycle_details' argument")
        if lifecycle_sub_state is None and 'lifecycleSubState' in kwargs:
            lifecycle_sub_state = kwargs['lifecycleSubState']
        if lifecycle_sub_state is None:
            raise TypeError("Missing 'lifecycle_sub_state' argument")
        if log_locations is None and 'logLocations' in kwargs:
            log_locations = kwargs['logLocations']
        if log_locations is None:
            raise TypeError("Missing 'log_locations' argument")
        if members is None:
            raise TypeError("Missing 'members' argument")
        if peer_id is None and 'peerId' in kwargs:
            peer_id = kwargs['peerId']
        if peer_id is None:
            raise TypeError("Missing 'peer_id' argument")
        if peer_region is None and 'peerRegion' in kwargs:
            peer_region = kwargs['peerRegion']
        if peer_region is None:
            raise TypeError("Missing 'peer_region' argument")
        if role is None:
            raise TypeError("Missing 'role' argument")
        if state is None:
            raise TypeError("Missing 'state' argument")
        if system_tags is None and 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if system_tags is None:
            raise TypeError("Missing 'system_tags' argument")
        if time_created is None and 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if time_created is None:
            raise TypeError("Missing 'time_created' argument")
        if time_updated is None and 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']
        if time_updated is None:
            raise TypeError("Missing 'time_updated' argument")

        _setter("associations", associations)
        _setter("compartment_id", compartment_id)
        _setter("defined_tags", defined_tags)
        _setter("disassociate_trigger", disassociate_trigger)
        _setter("display_name", display_name)
        _setter("freeform_tags", freeform_tags)
        _setter("id", id)
        _setter("life_cycle_details", life_cycle_details)
        _setter("lifecycle_sub_state", lifecycle_sub_state)
        _setter("log_locations", log_locations)
        _setter("members", members)
        _setter("peer_id", peer_id)
        _setter("peer_region", peer_region)
        _setter("role", role)
        _setter("state", state)
        _setter("system_tags", system_tags)
        _setter("time_created", time_created)
        _setter("time_updated", time_updated)

    @property
    @pulumi.getter
    def associations(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult']:
        return pulumi.get(self, "associations")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        The ID (OCID) of the compartment in which to list resources.  Example: `ocid1.compartment.oc1..uniqueID`
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, Any]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"Operations.CostCenter": "42"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="disassociateTrigger")
    def disassociate_trigger(self) -> int:
        return pulumi.get(self, "disassociate_trigger")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        A filter to return only resources that match the given display name.  Example: `MyResourceDisplayName`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, Any]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.  Example: `{"Department": "Finance"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The OCID of the DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifeCycleDetails")
    def life_cycle_details(self) -> str:
        """
        A message describing the DR protection group's current state in more detail.
        """
        return pulumi.get(self, "life_cycle_details")

    @property
    @pulumi.getter(name="lifecycleSubState")
    def lifecycle_sub_state(self) -> str:
        """
        A filter to return only DR protection groups that match the given lifecycle sub-state.
        """
        return pulumi.get(self, "lifecycle_sub_state")

    @property
    @pulumi.getter(name="logLocations")
    def log_locations(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult']:
        """
        The details of an object storage log location for a DR protection group.
        """
        return pulumi.get(self, "log_locations")

    @property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult']:
        """
        A list of DR protection group members.
        """
        return pulumi.get(self, "members")

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> str:
        """
        The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> str:
        """
        The region of the peer DR protection group.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The DR protection group Role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        A filter to return only DR protection groups that match the given lifecycle state.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, Any]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces.  Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> str:
        """
        The date and time the DR protection group was created. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> str:
        """
        The date and time the DR protection group was updated. An RFC3339 formatted datetime string.  Example: `2019-03-29T09:36:42Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult(dict):
    def __init__(__self__, *,
                 peer_id: str,
                 peer_region: str,
                 role: str):
        """
        :param str peer_id: The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        :param str peer_region: The region of the peer DR protection group.  Example: `us-ashburn-1`
        :param str role: The DR protection group Role.
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemAssociationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            peer_id=peer_id,
            peer_region=peer_region,
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             peer_id: Optional[str] = None,
             peer_region: Optional[str] = None,
             role: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if peer_id is None and 'peerId' in kwargs:
            peer_id = kwargs['peerId']
        if peer_id is None:
            raise TypeError("Missing 'peer_id' argument")
        if peer_region is None and 'peerRegion' in kwargs:
            peer_region = kwargs['peerRegion']
        if peer_region is None:
            raise TypeError("Missing 'peer_region' argument")
        if role is None:
            raise TypeError("Missing 'role' argument")

        _setter("peer_id", peer_id)
        _setter("peer_region", peer_region)
        _setter("role", role)

    @property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> str:
        """
        The OCID of the peer DR protection group.  Example: `ocid1.drprotectiongroup.oc1..uniqueID`
        """
        return pulumi.get(self, "peer_id")

    @property
    @pulumi.getter(name="peerRegion")
    def peer_region(self) -> str:
        """
        The region of the peer DR protection group.  Example: `us-ashburn-1`
        """
        return pulumi.get(self, "peer_region")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The DR protection group Role.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 namespace: str,
                 object: str):
        """
        :param str bucket: The bucket name inside the object storage namespace.  Example: `operation_logs`
        :param str namespace: The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        :param str object: The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemLogLocationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            namespace=namespace,
            object=object,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: Optional[str] = None,
             namespace: Optional[str] = None,
             object: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if bucket is None:
            raise TypeError("Missing 'bucket' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if object is None:
            raise TypeError("Missing 'object' argument")

        _setter("bucket", bucket)
        _setter("namespace", namespace)
        _setter("object", object)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        The bucket name inside the object storage namespace.  Example: `operation_logs`
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The namespace in object storage (Note - this is usually the tenancy name).  Example: `myocitenancy`
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def object(self) -> str:
        """
        The object name inside the object storage bucket.  Example: `switchover_plan_executions`
        """
        return pulumi.get(self, "object")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult(dict):
    def __init__(__self__, *,
                 backend_set_mappings: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult'],
                 block_volume_operations: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult'],
                 destination_availability_domain: str,
                 destination_capacity_reservation_id: str,
                 destination_compartment_id: str,
                 destination_dedicated_vm_host_id: str,
                 destination_load_balancer_id: str,
                 destination_network_load_balancer_id: str,
                 export_mappings: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult'],
                 file_system_operations: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult'],
                 is_movable: bool,
                 is_retain_fault_domain: bool,
                 is_start_stop_enabled: bool,
                 member_id: str,
                 member_type: str,
                 password_vault_secret_id: str,
                 vnic_mapping: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult'],
                 vnic_mappings: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult']):
        """
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingArgs'] backend_set_mappings: A list of backend set mappings that are used to transfer or update backends during DR.
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationArgs'] block_volume_operations: Operations performed on a list of block volumes used on the non-movable compute instance.
        :param str destination_availability_domain: The availability domain of the destination mount target. Example: `BBTh:region-AD`
        :param str destination_capacity_reservation_id: The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        :param str destination_compartment_id: The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        :param str destination_dedicated_vm_host_id: The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        :param str destination_load_balancer_id: The OCID of the destination load balancer. The backend sets in this destination load balancer are updated during DR.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        :param str destination_network_load_balancer_id: The OCID of the destination network load balancer. The backend sets in this destination network load balancer are updated during DR.                Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingArgs'] export_mappings: A list of mappings between the primary region file system export and destination region mount target.
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationArgs'] file_system_operations: Operations performed on a list of file systems used on the non-movable compute instance.
        :param bool is_movable: A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
        :param bool is_retain_fault_domain: A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
        :param bool is_start_stop_enabled: A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
        :param str member_id: The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        :param str member_type: The type of the member.
        :param str password_vault_secret_id: The OCID of the vault secret where the database SYSDBA password is stored. This password is used for performing database DR operations.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingArgs'] vnic_mapping: A list of compute instance VNIC mappings.
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingArgs'] vnic_mappings: A list of compute instance VNIC mappings.
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            backend_set_mappings=backend_set_mappings,
            block_volume_operations=block_volume_operations,
            destination_availability_domain=destination_availability_domain,
            destination_capacity_reservation_id=destination_capacity_reservation_id,
            destination_compartment_id=destination_compartment_id,
            destination_dedicated_vm_host_id=destination_dedicated_vm_host_id,
            destination_load_balancer_id=destination_load_balancer_id,
            destination_network_load_balancer_id=destination_network_load_balancer_id,
            export_mappings=export_mappings,
            file_system_operations=file_system_operations,
            is_movable=is_movable,
            is_retain_fault_domain=is_retain_fault_domain,
            is_start_stop_enabled=is_start_stop_enabled,
            member_id=member_id,
            member_type=member_type,
            password_vault_secret_id=password_vault_secret_id,
            vnic_mapping=vnic_mapping,
            vnic_mappings=vnic_mappings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             backend_set_mappings: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult']] = None,
             block_volume_operations: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult']] = None,
             destination_availability_domain: Optional[str] = None,
             destination_capacity_reservation_id: Optional[str] = None,
             destination_compartment_id: Optional[str] = None,
             destination_dedicated_vm_host_id: Optional[str] = None,
             destination_load_balancer_id: Optional[str] = None,
             destination_network_load_balancer_id: Optional[str] = None,
             export_mappings: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult']] = None,
             file_system_operations: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult']] = None,
             is_movable: Optional[bool] = None,
             is_retain_fault_domain: Optional[bool] = None,
             is_start_stop_enabled: Optional[bool] = None,
             member_id: Optional[str] = None,
             member_type: Optional[str] = None,
             password_vault_secret_id: Optional[str] = None,
             vnic_mapping: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult']] = None,
             vnic_mappings: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if backend_set_mappings is None and 'backendSetMappings' in kwargs:
            backend_set_mappings = kwargs['backendSetMappings']
        if backend_set_mappings is None:
            raise TypeError("Missing 'backend_set_mappings' argument")
        if block_volume_operations is None and 'blockVolumeOperations' in kwargs:
            block_volume_operations = kwargs['blockVolumeOperations']
        if block_volume_operations is None:
            raise TypeError("Missing 'block_volume_operations' argument")
        if destination_availability_domain is None and 'destinationAvailabilityDomain' in kwargs:
            destination_availability_domain = kwargs['destinationAvailabilityDomain']
        if destination_availability_domain is None:
            raise TypeError("Missing 'destination_availability_domain' argument")
        if destination_capacity_reservation_id is None and 'destinationCapacityReservationId' in kwargs:
            destination_capacity_reservation_id = kwargs['destinationCapacityReservationId']
        if destination_capacity_reservation_id is None:
            raise TypeError("Missing 'destination_capacity_reservation_id' argument")
        if destination_compartment_id is None and 'destinationCompartmentId' in kwargs:
            destination_compartment_id = kwargs['destinationCompartmentId']
        if destination_compartment_id is None:
            raise TypeError("Missing 'destination_compartment_id' argument")
        if destination_dedicated_vm_host_id is None and 'destinationDedicatedVmHostId' in kwargs:
            destination_dedicated_vm_host_id = kwargs['destinationDedicatedVmHostId']
        if destination_dedicated_vm_host_id is None:
            raise TypeError("Missing 'destination_dedicated_vm_host_id' argument")
        if destination_load_balancer_id is None and 'destinationLoadBalancerId' in kwargs:
            destination_load_balancer_id = kwargs['destinationLoadBalancerId']
        if destination_load_balancer_id is None:
            raise TypeError("Missing 'destination_load_balancer_id' argument")
        if destination_network_load_balancer_id is None and 'destinationNetworkLoadBalancerId' in kwargs:
            destination_network_load_balancer_id = kwargs['destinationNetworkLoadBalancerId']
        if destination_network_load_balancer_id is None:
            raise TypeError("Missing 'destination_network_load_balancer_id' argument")
        if export_mappings is None and 'exportMappings' in kwargs:
            export_mappings = kwargs['exportMappings']
        if export_mappings is None:
            raise TypeError("Missing 'export_mappings' argument")
        if file_system_operations is None and 'fileSystemOperations' in kwargs:
            file_system_operations = kwargs['fileSystemOperations']
        if file_system_operations is None:
            raise TypeError("Missing 'file_system_operations' argument")
        if is_movable is None and 'isMovable' in kwargs:
            is_movable = kwargs['isMovable']
        if is_movable is None:
            raise TypeError("Missing 'is_movable' argument")
        if is_retain_fault_domain is None and 'isRetainFaultDomain' in kwargs:
            is_retain_fault_domain = kwargs['isRetainFaultDomain']
        if is_retain_fault_domain is None:
            raise TypeError("Missing 'is_retain_fault_domain' argument")
        if is_start_stop_enabled is None and 'isStartStopEnabled' in kwargs:
            is_start_stop_enabled = kwargs['isStartStopEnabled']
        if is_start_stop_enabled is None:
            raise TypeError("Missing 'is_start_stop_enabled' argument")
        if member_id is None and 'memberId' in kwargs:
            member_id = kwargs['memberId']
        if member_id is None:
            raise TypeError("Missing 'member_id' argument")
        if member_type is None and 'memberType' in kwargs:
            member_type = kwargs['memberType']
        if member_type is None:
            raise TypeError("Missing 'member_type' argument")
        if password_vault_secret_id is None and 'passwordVaultSecretId' in kwargs:
            password_vault_secret_id = kwargs['passwordVaultSecretId']
        if password_vault_secret_id is None:
            raise TypeError("Missing 'password_vault_secret_id' argument")
        if vnic_mapping is None and 'vnicMapping' in kwargs:
            vnic_mapping = kwargs['vnicMapping']
        if vnic_mapping is None:
            raise TypeError("Missing 'vnic_mapping' argument")
        if vnic_mappings is None and 'vnicMappings' in kwargs:
            vnic_mappings = kwargs['vnicMappings']
        if vnic_mappings is None:
            raise TypeError("Missing 'vnic_mappings' argument")

        _setter("backend_set_mappings", backend_set_mappings)
        _setter("block_volume_operations", block_volume_operations)
        _setter("destination_availability_domain", destination_availability_domain)
        _setter("destination_capacity_reservation_id", destination_capacity_reservation_id)
        _setter("destination_compartment_id", destination_compartment_id)
        _setter("destination_dedicated_vm_host_id", destination_dedicated_vm_host_id)
        _setter("destination_load_balancer_id", destination_load_balancer_id)
        _setter("destination_network_load_balancer_id", destination_network_load_balancer_id)
        _setter("export_mappings", export_mappings)
        _setter("file_system_operations", file_system_operations)
        _setter("is_movable", is_movable)
        _setter("is_retain_fault_domain", is_retain_fault_domain)
        _setter("is_start_stop_enabled", is_start_stop_enabled)
        _setter("member_id", member_id)
        _setter("member_type", member_type)
        _setter("password_vault_secret_id", password_vault_secret_id)
        _setter("vnic_mapping", vnic_mapping)
        _setter("vnic_mappings", vnic_mappings)

    @property
    @pulumi.getter(name="backendSetMappings")
    def backend_set_mappings(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult']:
        """
        A list of backend set mappings that are used to transfer or update backends during DR.
        """
        return pulumi.get(self, "backend_set_mappings")

    @property
    @pulumi.getter(name="blockVolumeOperations")
    def block_volume_operations(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult']:
        """
        Operations performed on a list of block volumes used on the non-movable compute instance.
        """
        return pulumi.get(self, "block_volume_operations")

    @property
    @pulumi.getter(name="destinationAvailabilityDomain")
    def destination_availability_domain(self) -> str:
        """
        The availability domain of the destination mount target. Example: `BBTh:region-AD`
        """
        return pulumi.get(self, "destination_availability_domain")

    @property
    @pulumi.getter(name="destinationCapacityReservationId")
    def destination_capacity_reservation_id(self) -> str:
        """
        The OCID of a capacity reservation in the destination region which will be used to launch the compute instance.  Example: `ocid1.capacityreservation.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_capacity_reservation_id")

    @property
    @pulumi.getter(name="destinationCompartmentId")
    def destination_compartment_id(self) -> str:
        """
        The OCID of a compartment in the destination region in which the compute instance should be launched.  Example: `ocid1.compartment.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_compartment_id")

    @property
    @pulumi.getter(name="destinationDedicatedVmHostId")
    def destination_dedicated_vm_host_id(self) -> str:
        """
        The OCID of a dedicated VM host in the destination region where the compute instance should be launched.  Example: `ocid1.dedicatedvmhost.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_dedicated_vm_host_id")

    @property
    @pulumi.getter(name="destinationLoadBalancerId")
    def destination_load_balancer_id(self) -> str:
        """
        The OCID of the destination load balancer. The backend sets in this destination load balancer are updated during DR.  Example: `ocid1.loadbalancer.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_load_balancer_id")

    @property
    @pulumi.getter(name="destinationNetworkLoadBalancerId")
    def destination_network_load_balancer_id(self) -> str:
        """
        The OCID of the destination network load balancer. The backend sets in this destination network load balancer are updated during DR.                Example: `ocid1.networkloadbalancer.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_network_load_balancer_id")

    @property
    @pulumi.getter(name="exportMappings")
    def export_mappings(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult']:
        """
        A list of mappings between the primary region file system export and destination region mount target.
        """
        return pulumi.get(self, "export_mappings")

    @property
    @pulumi.getter(name="fileSystemOperations")
    def file_system_operations(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult']:
        """
        Operations performed on a list of file systems used on the non-movable compute instance.
        """
        return pulumi.get(self, "file_system_operations")

    @property
    @pulumi.getter(name="isMovable")
    def is_movable(self) -> bool:
        """
        A flag indicating if the compute instance should be moved during DR operations.  Example: `false`
        """
        return pulumi.get(self, "is_movable")

    @property
    @pulumi.getter(name="isRetainFaultDomain")
    def is_retain_fault_domain(self) -> bool:
        """
        A flag indicating if the compute instance should be moved to the same fault domain in the destination region.  The compute instance launch will fail if this flag is set to true and capacity is not available in the  specified fault domain in the destination region.  Example: `false`
        """
        return pulumi.get(self, "is_retain_fault_domain")

    @property
    @pulumi.getter(name="isStartStopEnabled")
    def is_start_stop_enabled(self) -> bool:
        """
        A flag indicating whether the non-movable compute instance needs to be started and stopped during DR operations.
        """
        return pulumi.get(self, "is_start_stop_enabled")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> str:
        """
        The OCID of the member.  Example: `ocid1.instance.oc1..uniqueID`
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter(name="memberType")
    def member_type(self) -> str:
        """
        The type of the member.
        """
        return pulumi.get(self, "member_type")

    @property
    @pulumi.getter(name="passwordVaultSecretId")
    def password_vault_secret_id(self) -> str:
        """
        The OCID of the vault secret where the database SYSDBA password is stored. This password is used for performing database DR operations.  Example: `ocid1.vaultsecret.oc1..uniqueID`
        """
        return pulumi.get(self, "password_vault_secret_id")

    @property
    @pulumi.getter(name="vnicMapping")
    def vnic_mapping(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult']:
        """
        A list of compute instance VNIC mappings.
        """
        return pulumi.get(self, "vnic_mapping")

    @property
    @pulumi.getter(name="vnicMappings")
    def vnic_mappings(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult']:
        """
        A list of compute instance VNIC mappings.
        """
        return pulumi.get(self, "vnic_mappings")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult(dict):
    def __init__(__self__, *,
                 destination_backend_set_name: str,
                 is_backend_set_for_non_movable: bool,
                 source_backend_set_name: str):
        """
        :param str destination_backend_set_name: The name of the destination backend set.  Example: `My_Destination_Backend_Set`
        :param bool is_backend_set_for_non_movable: This flag specifies if this backend set is used for traffic for non-movable compute instances. Backend sets that point to non-movable instances are only enabled or disabled during DR. For non-movable instances this flag should be set to 'true'. Backend sets that point to movable instances are emptied and their contents are transferred to the destination region network load balancer.  For movable instances this flag should be set to 'false'.   Example: `true`
        :param str source_backend_set_name: The name of the source backend set.  Example: `My_Source_Backend_Set`
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBackendSetMappingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_backend_set_name=destination_backend_set_name,
            is_backend_set_for_non_movable=is_backend_set_for_non_movable,
            source_backend_set_name=source_backend_set_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_backend_set_name: Optional[str] = None,
             is_backend_set_for_non_movable: Optional[bool] = None,
             source_backend_set_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_backend_set_name is None and 'destinationBackendSetName' in kwargs:
            destination_backend_set_name = kwargs['destinationBackendSetName']
        if destination_backend_set_name is None:
            raise TypeError("Missing 'destination_backend_set_name' argument")
        if is_backend_set_for_non_movable is None and 'isBackendSetForNonMovable' in kwargs:
            is_backend_set_for_non_movable = kwargs['isBackendSetForNonMovable']
        if is_backend_set_for_non_movable is None:
            raise TypeError("Missing 'is_backend_set_for_non_movable' argument")
        if source_backend_set_name is None and 'sourceBackendSetName' in kwargs:
            source_backend_set_name = kwargs['sourceBackendSetName']
        if source_backend_set_name is None:
            raise TypeError("Missing 'source_backend_set_name' argument")

        _setter("destination_backend_set_name", destination_backend_set_name)
        _setter("is_backend_set_for_non_movable", is_backend_set_for_non_movable)
        _setter("source_backend_set_name", source_backend_set_name)

    @property
    @pulumi.getter(name="destinationBackendSetName")
    def destination_backend_set_name(self) -> str:
        """
        The name of the destination backend set.  Example: `My_Destination_Backend_Set`
        """
        return pulumi.get(self, "destination_backend_set_name")

    @property
    @pulumi.getter(name="isBackendSetForNonMovable")
    def is_backend_set_for_non_movable(self) -> bool:
        """
        This flag specifies if this backend set is used for traffic for non-movable compute instances. Backend sets that point to non-movable instances are only enabled or disabled during DR. For non-movable instances this flag should be set to 'true'. Backend sets that point to movable instances are emptied and their contents are transferred to the destination region network load balancer.  For movable instances this flag should be set to 'false'.   Example: `true`
        """
        return pulumi.get(self, "is_backend_set_for_non_movable")

    @property
    @pulumi.getter(name="sourceBackendSetName")
    def source_backend_set_name(self) -> str:
        """
        The name of the source backend set.  Example: `My_Source_Backend_Set`
        """
        return pulumi.get(self, "source_backend_set_name")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult(dict):
    def __init__(__self__, *,
                 attachment_details: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult'],
                 block_volume_id: str,
                 mount_details: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult']):
        """
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailArgs'] attachment_details: The details for attaching or detaching a block volume.
        :param str block_volume_id: The OCID of the block volume.  Example: `ocid1.volume.oc1..uniqueID`
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailArgs'] mount_details: Mount details of a file system.
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attachment_details=attachment_details,
            block_volume_id=block_volume_id,
            mount_details=mount_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attachment_details: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult']] = None,
             block_volume_id: Optional[str] = None,
             mount_details: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if attachment_details is None and 'attachmentDetails' in kwargs:
            attachment_details = kwargs['attachmentDetails']
        if attachment_details is None:
            raise TypeError("Missing 'attachment_details' argument")
        if block_volume_id is None and 'blockVolumeId' in kwargs:
            block_volume_id = kwargs['blockVolumeId']
        if block_volume_id is None:
            raise TypeError("Missing 'block_volume_id' argument")
        if mount_details is None and 'mountDetails' in kwargs:
            mount_details = kwargs['mountDetails']
        if mount_details is None:
            raise TypeError("Missing 'mount_details' argument")

        _setter("attachment_details", attachment_details)
        _setter("block_volume_id", block_volume_id)
        _setter("mount_details", mount_details)

    @property
    @pulumi.getter(name="attachmentDetails")
    def attachment_details(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult']:
        """
        The details for attaching or detaching a block volume.
        """
        return pulumi.get(self, "attachment_details")

    @property
    @pulumi.getter(name="blockVolumeId")
    def block_volume_id(self) -> str:
        """
        The OCID of the block volume.  Example: `ocid1.volume.oc1..uniqueID`
        """
        return pulumi.get(self, "block_volume_id")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult']:
        """
        Mount details of a file system.
        """
        return pulumi.get(self, "mount_details")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult(dict):
    def __init__(__self__, *,
                 volume_attachment_reference_instance_id: str):
        """
        :param str volume_attachment_reference_instance_id: The OCID of the reference compute instance from which to obtain the attachment details for the volume. This reference compute instance is from the peer DR protection group.  Example: `ocid1.instance.oc1..uniqueID`
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationAttachmentDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            volume_attachment_reference_instance_id=volume_attachment_reference_instance_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             volume_attachment_reference_instance_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if volume_attachment_reference_instance_id is None and 'volumeAttachmentReferenceInstanceId' in kwargs:
            volume_attachment_reference_instance_id = kwargs['volumeAttachmentReferenceInstanceId']
        if volume_attachment_reference_instance_id is None:
            raise TypeError("Missing 'volume_attachment_reference_instance_id' argument")

        _setter("volume_attachment_reference_instance_id", volume_attachment_reference_instance_id)

    @property
    @pulumi.getter(name="volumeAttachmentReferenceInstanceId")
    def volume_attachment_reference_instance_id(self) -> str:
        """
        The OCID of the reference compute instance from which to obtain the attachment details for the volume. This reference compute instance is from the peer DR protection group.  Example: `ocid1.instance.oc1..uniqueID`
        """
        return pulumi.get(self, "volume_attachment_reference_instance_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult(dict):
    def __init__(__self__, *,
                 mount_point: str):
        """
        :param str mount_point: The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberBlockVolumeOperationMountDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_point=mount_point,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_point: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_point is None and 'mountPoint' in kwargs:
            mount_point = kwargs['mountPoint']
        if mount_point is None:
            raise TypeError("Missing 'mount_point' argument")

        _setter("mount_point", mount_point)

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> str:
        """
        The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        return pulumi.get(self, "mount_point")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult(dict):
    def __init__(__self__, *,
                 destination_mount_target_id: str,
                 export_id: str):
        """
        :param str destination_mount_target_id: The OCID of the destination mount target on which this file system export should be created.  Example: `ocid1.mounttarget.oc1..uniqueID`
        :param str export_id: The OCID of the export path.  Example: `ocid1.export.oc1..uniqueID`
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberExportMappingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_mount_target_id=destination_mount_target_id,
            export_id=export_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_mount_target_id: Optional[str] = None,
             export_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_mount_target_id is None and 'destinationMountTargetId' in kwargs:
            destination_mount_target_id = kwargs['destinationMountTargetId']
        if destination_mount_target_id is None:
            raise TypeError("Missing 'destination_mount_target_id' argument")
        if export_id is None and 'exportId' in kwargs:
            export_id = kwargs['exportId']
        if export_id is None:
            raise TypeError("Missing 'export_id' argument")

        _setter("destination_mount_target_id", destination_mount_target_id)
        _setter("export_id", export_id)

    @property
    @pulumi.getter(name="destinationMountTargetId")
    def destination_mount_target_id(self) -> str:
        """
        The OCID of the destination mount target on which this file system export should be created.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_mount_target_id")

    @property
    @pulumi.getter(name="exportId")
    def export_id(self) -> str:
        """
        The OCID of the export path.  Example: `ocid1.export.oc1..uniqueID`
        """
        return pulumi.get(self, "export_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult(dict):
    def __init__(__self__, *,
                 export_path: str,
                 mount_details: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult'],
                 mount_point: str,
                 mount_target_id: str,
                 unmount_details: Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult']):
        """
        :param str export_path: The export path of the file system.  Example: `/fs-export-path`
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailArgs'] mount_details: Mount details of a file system.
        :param str mount_point: The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        :param str mount_target_id: The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        :param Sequence['GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailArgs'] unmount_details: Unmount details for a file system.
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            export_path=export_path,
            mount_details=mount_details,
            mount_point=mount_point,
            mount_target_id=mount_target_id,
            unmount_details=unmount_details,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             export_path: Optional[str] = None,
             mount_details: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult']] = None,
             mount_point: Optional[str] = None,
             mount_target_id: Optional[str] = None,
             unmount_details: Optional[Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult']] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if export_path is None and 'exportPath' in kwargs:
            export_path = kwargs['exportPath']
        if export_path is None:
            raise TypeError("Missing 'export_path' argument")
        if mount_details is None and 'mountDetails' in kwargs:
            mount_details = kwargs['mountDetails']
        if mount_details is None:
            raise TypeError("Missing 'mount_details' argument")
        if mount_point is None and 'mountPoint' in kwargs:
            mount_point = kwargs['mountPoint']
        if mount_point is None:
            raise TypeError("Missing 'mount_point' argument")
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")
        if unmount_details is None and 'unmountDetails' in kwargs:
            unmount_details = kwargs['unmountDetails']
        if unmount_details is None:
            raise TypeError("Missing 'unmount_details' argument")

        _setter("export_path", export_path)
        _setter("mount_details", mount_details)
        _setter("mount_point", mount_point)
        _setter("mount_target_id", mount_target_id)
        _setter("unmount_details", unmount_details)

    @property
    @pulumi.getter(name="exportPath")
    def export_path(self) -> str:
        """
        The export path of the file system.  Example: `/fs-export-path`
        """
        return pulumi.get(self, "export_path")

    @property
    @pulumi.getter(name="mountDetails")
    def mount_details(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult']:
        """
        Mount details of a file system.
        """
        return pulumi.get(self, "mount_details")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> str:
        """
        The physical mount point of the file system on a host.  Example: `/mnt/yourmountpoint`
        """
        return pulumi.get(self, "mount_point")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter(name="unmountDetails")
    def unmount_details(self) -> Sequence['outputs.GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult']:
        """
        Unmount details for a file system.
        """
        return pulumi.get(self, "unmount_details")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult(dict):
    def __init__(__self__, *,
                 mount_target_id: str):
        """
        :param str mount_target_id: The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationMountDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_target_id=mount_target_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_target_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")

        _setter("mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult(dict):
    def __init__(__self__, *,
                 mount_target_id: str):
        """
        :param str mount_target_id: The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberFileSystemOperationUnmountDetailResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mount_target_id=mount_target_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mount_target_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if mount_target_id is None and 'mountTargetId' in kwargs:
            mount_target_id = kwargs['mountTargetId']
        if mount_target_id is None:
            raise TypeError("Missing 'mount_target_id' argument")

        _setter("mount_target_id", mount_target_id)

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> str:
        """
        The OCID of the mount target for this file system.  Example: `ocid1.mounttarget.oc1..uniqueID`
        """
        return pulumi.get(self, "mount_target_id")


@pulumi.output_type
class GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult(dict):
    def __init__(__self__, *,
                 destination_nsg_id_lists: Sequence[str],
                 destination_primary_private_ip_address: str,
                 destination_primary_private_ip_hostname_label: str,
                 destination_subnet_id: str,
                 source_vnic_id: str):
        """
        :param Sequence[str] destination_nsg_id_lists: A list of OCIDs of network security groups (NSG) in the destination region which should be assigned to the source VNIC.  Example: `[ ocid1.networksecuritygroup.oc1..uniqueID, ocid1.networksecuritygroup.oc1..uniqueID ]`
        :param str destination_primary_private_ip_address: The private IP address to be assigned as the VNIC's primary IP address in the destination subnet. This must be a valid IP address in the destination subnet and the IP address must be available.  Example: `10.0.3.3`
        :param str destination_primary_private_ip_hostname_label: The hostname label to be assigned in the destination subnet for the primary private IP of the source VNIC. This label is the hostname portion of the private IP's fully qualified domain name (FQDN)  (for example, 'myhost1' in the FQDN 'myhost1.subnet123.vcn1.oraclevcn.com').  Example: `myhost1`
        :param str destination_subnet_id: The OCID of the destination subnet to which the source VNIC should connect.  Example: `ocid1.subnet.oc1..uniqueID`
        :param str source_vnic_id: The OCID of the source VNIC.  Example: `ocid1.vnic.oc1..uniqueID`
        """
        GetDrProtectionGroupsDrProtectionGroupCollectionItemMemberVnicMappingResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_nsg_id_lists=destination_nsg_id_lists,
            destination_primary_private_ip_address=destination_primary_private_ip_address,
            destination_primary_private_ip_hostname_label=destination_primary_private_ip_hostname_label,
            destination_subnet_id=destination_subnet_id,
            source_vnic_id=source_vnic_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_nsg_id_lists: Optional[Sequence[str]] = None,
             destination_primary_private_ip_address: Optional[str] = None,
             destination_primary_private_ip_hostname_label: Optional[str] = None,
             destination_subnet_id: Optional[str] = None,
             source_vnic_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if destination_nsg_id_lists is None and 'destinationNsgIdLists' in kwargs:
            destination_nsg_id_lists = kwargs['destinationNsgIdLists']
        if destination_nsg_id_lists is None:
            raise TypeError("Missing 'destination_nsg_id_lists' argument")
        if destination_primary_private_ip_address is None and 'destinationPrimaryPrivateIpAddress' in kwargs:
            destination_primary_private_ip_address = kwargs['destinationPrimaryPrivateIpAddress']
        if destination_primary_private_ip_address is None:
            raise TypeError("Missing 'destination_primary_private_ip_address' argument")
        if destination_primary_private_ip_hostname_label is None and 'destinationPrimaryPrivateIpHostnameLabel' in kwargs:
            destination_primary_private_ip_hostname_label = kwargs['destinationPrimaryPrivateIpHostnameLabel']
        if destination_primary_private_ip_hostname_label is None:
            raise TypeError("Missing 'destination_primary_private_ip_hostname_label' argument")
        if destination_subnet_id is None and 'destinationSubnetId' in kwargs:
            destination_subnet_id = kwargs['destinationSubnetId']
        if destination_subnet_id is None:
            raise TypeError("Missing 'destination_subnet_id' argument")
        if source_vnic_id is None and 'sourceVnicId' in kwargs:
            source_vnic_id = kwargs['sourceVnicId']
        if source_vnic_id is None:
            raise TypeError("Missing 'source_vnic_id' argument")

        _setter("destination_nsg_id_lists", destination_nsg_id_lists)
        _setter("destination_primary_private_ip_address", destination_primary_private_ip_address)
        _setter("destination_primary_private_ip_hostname_label", destination_primary_private_ip_hostname_label)
        _setter("destination_subnet_id", destination_subnet_id)
        _setter("source_vnic_id", source_vnic_id)

    @property
    @pulumi.getter(name="destinationNsgIdLists")
    def destination_nsg_id_lists(self) -> Sequence[str]:
        """
        A list of OCIDs of network security groups (NSG) in the destination region which should be assigned to the source VNIC.  Example: `[ ocid1.networksecuritygroup.oc1..uniqueID, ocid1.networksecuritygroup.oc1..uniqueID ]`
        """
        return pulumi.get(self, "destination_nsg_id_lists")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpAddress")
    def destination_primary_private_ip_address(self) -> str:
        """
        The private IP address to be assigned as the VNIC's primary IP address in the destination subnet. This must be a valid IP address in the destination subnet and the IP address must be available.  Example: `10.0.3.3`
        """
        return pulumi.get(self, "destination_primary_private_ip_address")

    @property
    @pulumi.getter(name="destinationPrimaryPrivateIpHostnameLabel")
    def destination_primary_private_ip_hostname_label(self) -> str:
        """
        The hostname label to be assigned in the destination subnet for the primary private IP of the source VNIC. This label is the hostname portion of the private IP's fully qualified domain name (FQDN)  (for example, 'myhost1' in the FQDN 'myhost1.subnet123.vcn1.oraclevcn.com').  Example: `myhost1`
        """
        return pulumi.get(self, "destination_primary_private_ip_hostname_label")

    @property
    @pulumi.getter(name="destinationSubnetId")
    def destination_subnet_id(self) -> str:
        """
        The OCID of the destination subnet to which the source VNIC should connect.  Example: `ocid1.subnet.oc1..uniqueID`
        """
        return pulumi.get(self, "destination_subnet_id")

    @property
    @pulumi.getter(name="sourceVnicId")
    def source_vnic_id(self) -> str:
        """
        The OCID of the source VNIC.  Example: `ocid1.vnic.oc1..uniqueID`
        """
        return pulumi.get(self, "source_vnic_id")


@pulumi.output_type
class GetDrProtectionGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        GetDrProtectionGroupsFilterResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             regex: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if values is None:
            raise TypeError("Missing 'values' argument")

        _setter("name", name)
        _setter("values", values)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


