# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ActionCreateZoneFromZoneFileArgs', 'ActionCreateZoneFromZoneFile']

@pulumi.input_type
class ActionCreateZoneFromZoneFileArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 create_zone_from_zone_file_details: pulumi.Input[str],
                 scope: Optional[pulumi.Input[str]] = None,
                 view_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ActionCreateZoneFromZoneFile resource.
        :param pulumi.Input[str] compartment_id: The OCID of the compartment the resource belongs to.
        :param pulumi.Input[str] create_zone_from_zone_file_details: The zone file contents.
        :param pulumi.Input[str] scope: Specifies to operate only on resources that have a matching DNS scope.
        :param pulumi.Input[str] view_id: The OCID of the view the resource is associated with.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ActionCreateZoneFromZoneFileArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            create_zone_from_zone_file_details=create_zone_from_zone_file_details,
            scope=scope,
            view_id=view_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: pulumi.Input[str],
             create_zone_from_zone_file_details: pulumi.Input[str],
             scope: Optional[pulumi.Input[str]] = None,
             view_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'createZoneFromZoneFileDetails' in kwargs:
            create_zone_from_zone_file_details = kwargs['createZoneFromZoneFileDetails']
        if 'viewId' in kwargs:
            view_id = kwargs['viewId']

        _setter("compartment_id", compartment_id)
        _setter("create_zone_from_zone_file_details", create_zone_from_zone_file_details)
        if scope is not None:
            _setter("scope", scope)
        if view_id is not None:
            _setter("view_id", view_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        The OCID of the compartment the resource belongs to.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="createZoneFromZoneFileDetails")
    def create_zone_from_zone_file_details(self) -> pulumi.Input[str]:
        """
        The zone file contents.
        """
        return pulumi.get(self, "create_zone_from_zone_file_details")

    @create_zone_from_zone_file_details.setter
    def create_zone_from_zone_file_details(self, value: pulumi.Input[str]):
        pulumi.set(self, "create_zone_from_zone_file_details", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies to operate only on resources that have a matching DNS scope.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the view the resource is associated with.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "view_id")

    @view_id.setter
    def view_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_id", value)


@pulumi.input_type
class _ActionCreateZoneFromZoneFileState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 create_zone_from_zone_file_details: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 external_downstreams: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalDownstreamArgs']]]] = None,
                 external_masters: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalMasterArgs']]]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 is_protected: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileNameserverArgs']]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 self: Optional[pulumi.Input[str]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 view_id: Optional[pulumi.Input[str]] = None,
                 zone_transfer_servers: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileZoneTransferServerArgs']]]] = None,
                 zone_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ActionCreateZoneFromZoneFile resources.
        :param pulumi.Input[str] compartment_id: The OCID of the compartment the resource belongs to.
        :param pulumi.Input[str] create_zone_from_zone_file_details: The zone file contents.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        :param pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalDownstreamArgs']]] external_downstreams: External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
        :param pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalMasterArgs']]] external_masters: External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        :param pulumi.Input[bool] is_protected: A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
        :param pulumi.Input[str] name: The name of the zone.
        :param pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileNameserverArgs']]] nameservers: The authoritative nameservers for the zone.
        :param pulumi.Input[str] scope: Specifies to operate only on resources that have a matching DNS scope.
        :param pulumi.Input[str] self: The canonical absolute URL of the resource.
        :param pulumi.Input[str] serial: The current serial of the zone. As seen in the zone's SOA record.
        :param pulumi.Input[str] state: The current state of the zone resource.
        :param pulumi.Input[str] time_created: The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
        :param pulumi.Input[str] version: Version is the never-repeating, totally-orderable, version of the zone, from which the serial field of the zone's SOA record is derived.
        :param pulumi.Input[str] view_id: The OCID of the view the resource is associated with.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileZoneTransferServerArgs']]] zone_transfer_servers: The Oracle Cloud Infrastructure nameservers that transfer the zone data with external nameservers.
        :param pulumi.Input[str] zone_type: The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones.
        """
        _ActionCreateZoneFromZoneFileState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            create_zone_from_zone_file_details=create_zone_from_zone_file_details,
            defined_tags=defined_tags,
            external_downstreams=external_downstreams,
            external_masters=external_masters,
            freeform_tags=freeform_tags,
            is_protected=is_protected,
            name=name,
            nameservers=nameservers,
            scope=scope,
            self=self,
            serial=serial,
            state=state,
            time_created=time_created,
            version=version,
            view_id=view_id,
            zone_transfer_servers=zone_transfer_servers,
            zone_type=zone_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[pulumi.Input[str]] = None,
             create_zone_from_zone_file_details: Optional[pulumi.Input[str]] = None,
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             external_downstreams: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalDownstreamArgs']]]] = None,
             external_masters: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalMasterArgs']]]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             is_protected: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             nameservers: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileNameserverArgs']]]] = None,
             scope: Optional[pulumi.Input[str]] = None,
             self: Optional[pulumi.Input[str]] = None,
             serial: Optional[pulumi.Input[str]] = None,
             state: Optional[pulumi.Input[str]] = None,
             time_created: Optional[pulumi.Input[str]] = None,
             version: Optional[pulumi.Input[str]] = None,
             view_id: Optional[pulumi.Input[str]] = None,
             zone_transfer_servers: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileZoneTransferServerArgs']]]] = None,
             zone_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'createZoneFromZoneFileDetails' in kwargs:
            create_zone_from_zone_file_details = kwargs['createZoneFromZoneFileDetails']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'externalDownstreams' in kwargs:
            external_downstreams = kwargs['externalDownstreams']
        if 'externalMasters' in kwargs:
            external_masters = kwargs['externalMasters']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'isProtected' in kwargs:
            is_protected = kwargs['isProtected']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'viewId' in kwargs:
            view_id = kwargs['viewId']
        if 'zoneTransferServers' in kwargs:
            zone_transfer_servers = kwargs['zoneTransferServers']
        if 'zoneType' in kwargs:
            zone_type = kwargs['zoneType']

        if compartment_id is not None:
            _setter("compartment_id", compartment_id)
        if create_zone_from_zone_file_details is not None:
            _setter("create_zone_from_zone_file_details", create_zone_from_zone_file_details)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if external_downstreams is not None:
            _setter("external_downstreams", external_downstreams)
        if external_masters is not None:
            _setter("external_masters", external_masters)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if is_protected is not None:
            _setter("is_protected", is_protected)
        if name is not None:
            _setter("name", name)
        if nameservers is not None:
            _setter("nameservers", nameservers)
        if scope is not None:
            _setter("scope", scope)
        if self is not None:
            _setter("self", self)
        if serial is not None:
            _setter("serial", serial)
        if state is not None:
            _setter("state", state)
        if time_created is not None:
            _setter("time_created", time_created)
        if version is not None:
            _setter("version", version)
        if view_id is not None:
            _setter("view_id", view_id)
        if zone_transfer_servers is not None:
            _setter("zone_transfer_servers", zone_transfer_servers)
        if zone_type is not None:
            _setter("zone_type", zone_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the compartment the resource belongs to.
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="createZoneFromZoneFileDetails")
    def create_zone_from_zone_file_details(self) -> Optional[pulumi.Input[str]]:
        """
        The zone file contents.
        """
        return pulumi.get(self, "create_zone_from_zone_file_details")

    @create_zone_from_zone_file_details.setter
    def create_zone_from_zone_file_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_zone_from_zone_file_details", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="externalDownstreams")
    def external_downstreams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalDownstreamArgs']]]]:
        """
        External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
        """
        return pulumi.get(self, "external_downstreams")

    @external_downstreams.setter
    def external_downstreams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalDownstreamArgs']]]]):
        pulumi.set(self, "external_downstreams", value)

    @property
    @pulumi.getter(name="externalMasters")
    def external_masters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalMasterArgs']]]]:
        """
        External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
        """
        return pulumi.get(self, "external_masters")

    @external_masters.setter
    def external_masters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileExternalMasterArgs']]]]):
        pulumi.set(self, "external_masters", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
        """
        return pulumi.get(self, "is_protected")

    @is_protected.setter
    def is_protected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_protected", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the zone.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileNameserverArgs']]]]:
        """
        The authoritative nameservers for the zone.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileNameserverArgs']]]]):
        pulumi.set(self, "nameservers", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies to operate only on resources that have a matching DNS scope.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def self(self) -> Optional[pulumi.Input[str]]:
        """
        The canonical absolute URL of the resource.
        """
        return pulumi.get(self, "self")

    @self.setter
    def self(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        """
        The current serial of the zone. As seen in the zone's SOA record.
        """
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the zone resource.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version is the never-repeating, totally-orderable, version of the zone, from which the serial field of the zone's SOA record is derived.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> Optional[pulumi.Input[str]]:
        """
        The OCID of the view the resource is associated with.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "view_id")

    @view_id.setter
    def view_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_id", value)

    @property
    @pulumi.getter(name="zoneTransferServers")
    def zone_transfer_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileZoneTransferServerArgs']]]]:
        """
        The Oracle Cloud Infrastructure nameservers that transfer the zone data with external nameservers.
        """
        return pulumi.get(self, "zone_transfer_servers")

    @zone_transfer_servers.setter
    def zone_transfer_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionCreateZoneFromZoneFileZoneTransferServerArgs']]]]):
        pulumi.set(self, "zone_transfer_servers", value)

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones.
        """
        return pulumi.get(self, "zone_type")

    @zone_type.setter
    def zone_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_type", value)


class ActionCreateZoneFromZoneFile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 create_zone_from_zone_file_details: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 view_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Action Create Zone From Zone File resource in Oracle Cloud Infrastructure DNS service.

        Creates a new zone from a zone file in the specified compartment.

        After the zone has been created, it should be further managed by importing it to an `Dns.Zone` resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_action_create_zone_from_zone_file = oci.dns.ActionCreateZoneFromZoneFile("testActionCreateZoneFromZoneFile",
            create_zone_from_zone_file_details=var["action_create_zone_from_zone_file_create_zone_from_zone_file_details"],
            compartment_id=var["compartment_id"],
            scope=var["action_create_zone_from_zone_file_scope"],
            view_id=oci_dns_view["test_view"]["id"])
        ```

        ## Import

        ActionCreateZoneFromZoneFile can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:Dns/actionCreateZoneFromZoneFile:ActionCreateZoneFromZoneFile test_action_create_zone_from_zone_file "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: The OCID of the compartment the resource belongs to.
        :param pulumi.Input[str] create_zone_from_zone_file_details: The zone file contents.
        :param pulumi.Input[str] scope: Specifies to operate only on resources that have a matching DNS scope.
        :param pulumi.Input[str] view_id: The OCID of the view the resource is associated with.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActionCreateZoneFromZoneFileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Action Create Zone From Zone File resource in Oracle Cloud Infrastructure DNS service.

        Creates a new zone from a zone file in the specified compartment.

        After the zone has been created, it should be further managed by importing it to an `Dns.Zone` resource.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_action_create_zone_from_zone_file = oci.dns.ActionCreateZoneFromZoneFile("testActionCreateZoneFromZoneFile",
            create_zone_from_zone_file_details=var["action_create_zone_from_zone_file_create_zone_from_zone_file_details"],
            compartment_id=var["compartment_id"],
            scope=var["action_create_zone_from_zone_file_scope"],
            view_id=oci_dns_view["test_view"]["id"])
        ```

        ## Import

        ActionCreateZoneFromZoneFile can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:Dns/actionCreateZoneFromZoneFile:ActionCreateZoneFromZoneFile test_action_create_zone_from_zone_file "id"
        ```

        :param str resource_name: The name of the resource.
        :param ActionCreateZoneFromZoneFileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActionCreateZoneFromZoneFileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ActionCreateZoneFromZoneFileArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 create_zone_from_zone_file_details: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 view_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActionCreateZoneFromZoneFileArgs.__new__(ActionCreateZoneFromZoneFileArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            if create_zone_from_zone_file_details is None and not opts.urn:
                raise TypeError("Missing required property 'create_zone_from_zone_file_details'")
            __props__.__dict__["create_zone_from_zone_file_details"] = create_zone_from_zone_file_details
            __props__.__dict__["scope"] = scope
            __props__.__dict__["view_id"] = view_id
            __props__.__dict__["defined_tags"] = None
            __props__.__dict__["external_downstreams"] = None
            __props__.__dict__["external_masters"] = None
            __props__.__dict__["freeform_tags"] = None
            __props__.__dict__["is_protected"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["nameservers"] = None
            __props__.__dict__["self"] = None
            __props__.__dict__["serial"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["version"] = None
            __props__.__dict__["zone_transfer_servers"] = None
            __props__.__dict__["zone_type"] = None
        super(ActionCreateZoneFromZoneFile, __self__).__init__(
            'oci:Dns/actionCreateZoneFromZoneFile:ActionCreateZoneFromZoneFile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            create_zone_from_zone_file_details: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            external_downstreams: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionCreateZoneFromZoneFileExternalDownstreamArgs']]]]] = None,
            external_masters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionCreateZoneFromZoneFileExternalMasterArgs']]]]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            is_protected: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionCreateZoneFromZoneFileNameserverArgs']]]]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            self: Optional[pulumi.Input[str]] = None,
            serial: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None,
            view_id: Optional[pulumi.Input[str]] = None,
            zone_transfer_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionCreateZoneFromZoneFileZoneTransferServerArgs']]]]] = None,
            zone_type: Optional[pulumi.Input[str]] = None) -> 'ActionCreateZoneFromZoneFile':
        """
        Get an existing ActionCreateZoneFromZoneFile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: The OCID of the compartment the resource belongs to.
        :param pulumi.Input[str] create_zone_from_zone_file_details: The zone file contents.
        :param pulumi.Input[Mapping[str, Any]] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionCreateZoneFromZoneFileExternalDownstreamArgs']]]] external_downstreams: External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionCreateZoneFromZoneFileExternalMasterArgs']]]] external_masters: External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        :param pulumi.Input[bool] is_protected: A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
        :param pulumi.Input[str] name: The name of the zone.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionCreateZoneFromZoneFileNameserverArgs']]]] nameservers: The authoritative nameservers for the zone.
        :param pulumi.Input[str] scope: Specifies to operate only on resources that have a matching DNS scope.
        :param pulumi.Input[str] self: The canonical absolute URL of the resource.
        :param pulumi.Input[str] serial: The current serial of the zone. As seen in the zone's SOA record.
        :param pulumi.Input[str] state: The current state of the zone resource.
        :param pulumi.Input[str] time_created: The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
        :param pulumi.Input[str] version: Version is the never-repeating, totally-orderable, version of the zone, from which the serial field of the zone's SOA record is derived.
        :param pulumi.Input[str] view_id: The OCID of the view the resource is associated with.
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionCreateZoneFromZoneFileZoneTransferServerArgs']]]] zone_transfer_servers: The Oracle Cloud Infrastructure nameservers that transfer the zone data with external nameservers.
        :param pulumi.Input[str] zone_type: The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ActionCreateZoneFromZoneFileState.__new__(_ActionCreateZoneFromZoneFileState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["create_zone_from_zone_file_details"] = create_zone_from_zone_file_details
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["external_downstreams"] = external_downstreams
        __props__.__dict__["external_masters"] = external_masters
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_protected"] = is_protected
        __props__.__dict__["name"] = name
        __props__.__dict__["nameservers"] = nameservers
        __props__.__dict__["scope"] = scope
        __props__.__dict__["self"] = self
        __props__.__dict__["serial"] = serial
        __props__.__dict__["state"] = state
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["version"] = version
        __props__.__dict__["view_id"] = view_id
        __props__.__dict__["zone_transfer_servers"] = zone_transfer_servers
        __props__.__dict__["zone_type"] = zone_type
        return ActionCreateZoneFromZoneFile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        The OCID of the compartment the resource belongs to.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="createZoneFromZoneFileDetails")
    def create_zone_from_zone_file_details(self) -> pulumi.Output[str]:
        """
        The zone file contents.
        """
        return pulumi.get(self, "create_zone_from_zone_file_details")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="externalDownstreams")
    def external_downstreams(self) -> pulumi.Output[Sequence['outputs.ActionCreateZoneFromZoneFileExternalDownstream']]:
        """
        External secondary servers for the zone. This field is currently not supported when `zoneType` is `SECONDARY` or `scope` is `PRIVATE`.
        """
        return pulumi.get(self, "external_downstreams")

    @property
    @pulumi.getter(name="externalMasters")
    def external_masters(self) -> pulumi.Output[Sequence['outputs.ActionCreateZoneFromZoneFileExternalMaster']]:
        """
        External master servers for the zone. `externalMasters` becomes a required parameter when the `zoneType` value is `SECONDARY`.
        """
        return pulumi.get(self, "external_masters")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> pulumi.Output[bool]:
        """
        A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
        """
        return pulumi.get(self, "is_protected")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the zone.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nameservers(self) -> pulumi.Output[Sequence['outputs.ActionCreateZoneFromZoneFileNameserver']]:
        """
        The authoritative nameservers for the zone.
        """
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[str]:
        """
        Specifies to operate only on resources that have a matching DNS scope.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def self(self) -> pulumi.Output[str]:
        """
        The canonical absolute URL of the resource.
        """
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def serial(self) -> pulumi.Output[str]:
        """
        The current serial of the zone. As seen in the zone's SOA record.
        """
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the zone resource.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Version is the never-repeating, totally-orderable, version of the zone, from which the serial field of the zone's SOA record is derived.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> pulumi.Output[str]:
        """
        The OCID of the view the resource is associated with.


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "view_id")

    @property
    @pulumi.getter(name="zoneTransferServers")
    def zone_transfer_servers(self) -> pulumi.Output[Sequence['outputs.ActionCreateZoneFromZoneFileZoneTransferServer']]:
        """
        The Oracle Cloud Infrastructure nameservers that transfer the zone data with external nameservers.
        """
        return pulumi.get(self, "zone_transfer_servers")

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> pulumi.Output[str]:
        """
        The type of the zone. Must be either `PRIMARY` or `SECONDARY`. `SECONDARY` is only supported for GLOBAL zones.
        """
        return pulumi.get(self, "zone_type")

