# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ActionCreateZoneFromZoneFileExternalDownstream',
    'ActionCreateZoneFromZoneFileExternalMaster',
    'ActionCreateZoneFromZoneFileNameserver',
    'ActionCreateZoneFromZoneFileZoneTransferServer',
    'ResolverAttachedView',
    'ResolverEndpoint',
    'ResolverRule',
    'RrsetItem',
    'SteeringPolicyAnswer',
    'SteeringPolicyRule',
    'SteeringPolicyRuleCase',
    'SteeringPolicyRuleCaseAnswerData',
    'SteeringPolicyRuleDefaultAnswerData',
    'ZoneExternalDownstream',
    'ZoneExternalMaster',
    'ZoneNameserver',
    'ZoneZoneTransferServer',
    'GetRecordsFilterResult',
    'GetRecordsRecordResult',
    'GetResolverAttachedViewResult',
    'GetResolverEndpointResult',
    'GetResolverEndpointsFilterResult',
    'GetResolverEndpointsResolverEndpointResult',
    'GetResolverRuleResult',
    'GetResolversFilterResult',
    'GetResolversResolverResult',
    'GetResolversResolverAttachedViewResult',
    'GetResolversResolverEndpointResult',
    'GetResolversResolverRuleResult',
    'GetRrsetItemResult',
    'GetRrsetsFilterResult',
    'GetRrsetsRrsetResult',
    'GetRrsetsRrsetItemResult',
    'GetSteeringPoliciesFilterResult',
    'GetSteeringPoliciesSteeringPolicyResult',
    'GetSteeringPoliciesSteeringPolicyAnswerResult',
    'GetSteeringPoliciesSteeringPolicyRuleResult',
    'GetSteeringPoliciesSteeringPolicyRuleCaseResult',
    'GetSteeringPoliciesSteeringPolicyRuleCaseAnswerDataResult',
    'GetSteeringPoliciesSteeringPolicyRuleDefaultAnswerDataResult',
    'GetSteeringPolicyAnswerResult',
    'GetSteeringPolicyAttachmentsFilterResult',
    'GetSteeringPolicyAttachmentsSteeringPolicyAttachmentResult',
    'GetSteeringPolicyRuleResult',
    'GetSteeringPolicyRuleCaseResult',
    'GetSteeringPolicyRuleCaseAnswerDataResult',
    'GetSteeringPolicyRuleDefaultAnswerDataResult',
    'GetTsigKeysFilterResult',
    'GetTsigKeysTsigKeyResult',
    'GetViewsFilterResult',
    'GetViewsViewResult',
    'GetZonesFilterResult',
    'GetZonesZoneResult',
    'GetZonesZoneExternalDownstreamResult',
    'GetZonesZoneExternalMasterResult',
    'GetZonesZoneNameserverResult',
    'GetZonesZoneZoneTransferServerResult',
]

@pulumi.output_type
class ActionCreateZoneFromZoneFileExternalDownstream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tsigKeyId":
            suggest = "tsig_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionCreateZoneFromZoneFileExternalDownstream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionCreateZoneFromZoneFileExternalDownstream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionCreateZoneFromZoneFileExternalDownstream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 port: Optional[int] = None,
                 tsig_key_id: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tsig_key_id is not None:
            pulumi.set(__self__, "tsig_key_id", tsig_key_id)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tsigKeyId")
    def tsig_key_id(self) -> Optional[str]:
        return pulumi.get(self, "tsig_key_id")


@pulumi.output_type
class ActionCreateZoneFromZoneFileExternalMaster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tsigKeyId":
            suggest = "tsig_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionCreateZoneFromZoneFileExternalMaster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionCreateZoneFromZoneFileExternalMaster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionCreateZoneFromZoneFileExternalMaster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 port: Optional[int] = None,
                 tsig_key_id: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tsig_key_id is not None:
            pulumi.set(__self__, "tsig_key_id", tsig_key_id)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tsigKeyId")
    def tsig_key_id(self) -> Optional[str]:
        return pulumi.get(self, "tsig_key_id")


@pulumi.output_type
class ActionCreateZoneFromZoneFileNameserver(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class ActionCreateZoneFromZoneFileZoneTransferServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isTransferDestination":
            suggest = "is_transfer_destination"
        elif key == "isTransferSource":
            suggest = "is_transfer_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionCreateZoneFromZoneFileZoneTransferServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionCreateZoneFromZoneFileZoneTransferServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionCreateZoneFromZoneFileZoneTransferServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 is_transfer_destination: Optional[bool] = None,
                 is_transfer_source: Optional[bool] = None,
                 port: Optional[int] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if is_transfer_destination is not None:
            pulumi.set(__self__, "is_transfer_destination", is_transfer_destination)
        if is_transfer_source is not None:
            pulumi.set(__self__, "is_transfer_source", is_transfer_source)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="isTransferDestination")
    def is_transfer_destination(self) -> Optional[bool]:
        return pulumi.get(self, "is_transfer_destination")

    @property
    @pulumi.getter(name="isTransferSource")
    def is_transfer_source(self) -> Optional[bool]:
        return pulumi.get(self, "is_transfer_source")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class ResolverAttachedView(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "viewId":
            suggest = "view_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResolverAttachedView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResolverAttachedView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResolverAttachedView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 view_id: str):
        pulumi.set(__self__, "view_id", view_id)

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> str:
        return pulumi.get(self, "view_id")


@pulumi.output_type
class ResolverEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compartmentId":
            suggest = "compartment_id"
        elif key == "endpointType":
            suggest = "endpoint_type"
        elif key == "forwardingAddress":
            suggest = "forwarding_address"
        elif key == "isForwarding":
            suggest = "is_forwarding"
        elif key == "isListening":
            suggest = "is_listening"
        elif key == "listeningAddress":
            suggest = "listening_address"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "timeCreated":
            suggest = "time_created"
        elif key == "timeUpdated":
            suggest = "time_updated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResolverEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResolverEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResolverEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 endpoint_type: Optional[str] = None,
                 forwarding_address: Optional[str] = None,
                 is_forwarding: Optional[bool] = None,
                 is_listening: Optional[bool] = None,
                 listening_address: Optional[str] = None,
                 name: Optional[str] = None,
                 self: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if forwarding_address is not None:
            pulumi.set(__self__, "forwarding_address", forwarding_address)
        if is_forwarding is not None:
            pulumi.set(__self__, "is_forwarding", is_forwarding)
        if is_listening is not None:
            pulumi.set(__self__, "is_listening", is_listening)
        if listening_address is not None:
            pulumi.set(__self__, "listening_address", listening_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="forwardingAddress")
    def forwarding_address(self) -> Optional[str]:
        return pulumi.get(self, "forwarding_address")

    @property
    @pulumi.getter(name="isForwarding")
    def is_forwarding(self) -> Optional[bool]:
        return pulumi.get(self, "is_forwarding")

    @property
    @pulumi.getter(name="isListening")
    def is_listening(self) -> Optional[bool]:
        return pulumi.get(self, "is_listening")

    @property
    @pulumi.getter(name="listeningAddress")
    def listening_address(self) -> Optional[str]:
        return pulumi.get(self, "listening_address")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class ResolverRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationAddresses":
            suggest = "destination_addresses"
        elif key == "sourceEndpointName":
            suggest = "source_endpoint_name"
        elif key == "clientAddressConditions":
            suggest = "client_address_conditions"
        elif key == "qnameCoverConditions":
            suggest = "qname_cover_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResolverRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResolverRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResolverRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 destination_addresses: Sequence[str],
                 source_endpoint_name: str,
                 client_address_conditions: Optional[Sequence[str]] = None,
                 qname_cover_conditions: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "destination_addresses", destination_addresses)
        pulumi.set(__self__, "source_endpoint_name", source_endpoint_name)
        if client_address_conditions is not None:
            pulumi.set(__self__, "client_address_conditions", client_address_conditions)
        if qname_cover_conditions is not None:
            pulumi.set(__self__, "qname_cover_conditions", qname_cover_conditions)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "destination_addresses")

    @property
    @pulumi.getter(name="sourceEndpointName")
    def source_endpoint_name(self) -> str:
        return pulumi.get(self, "source_endpoint_name")

    @property
    @pulumi.getter(name="clientAddressConditions")
    def client_address_conditions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_address_conditions")

    @property
    @pulumi.getter(name="qnameCoverConditions")
    def qname_cover_conditions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "qname_cover_conditions")


@pulumi.output_type
class RrsetItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isProtected":
            suggest = "is_protected"
        elif key == "recordHash":
            suggest = "record_hash"
        elif key == "rrsetVersion":
            suggest = "rrset_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RrsetItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RrsetItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RrsetItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain: str,
                 rdata: str,
                 rtype: str,
                 ttl: int,
                 is_protected: Optional[bool] = None,
                 record_hash: Optional[str] = None,
                 rrset_version: Optional[str] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "rdata", rdata)
        pulumi.set(__self__, "rtype", rtype)
        pulumi.set(__self__, "ttl", ttl)
        if is_protected is not None:
            pulumi.set(__self__, "is_protected", is_protected)
        if record_hash is not None:
            pulumi.set(__self__, "record_hash", record_hash)
        if rrset_version is not None:
            pulumi.set(__self__, "rrset_version", rrset_version)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def rdata(self) -> str:
        return pulumi.get(self, "rdata")

    @property
    @pulumi.getter
    def rtype(self) -> str:
        return pulumi.get(self, "rtype")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[bool]:
        return pulumi.get(self, "is_protected")

    @property
    @pulumi.getter(name="recordHash")
    def record_hash(self) -> Optional[str]:
        return pulumi.get(self, "record_hash")

    @property
    @pulumi.getter(name="rrsetVersion")
    def rrset_version(self) -> Optional[str]:
        return pulumi.get(self, "rrset_version")


@pulumi.output_type
class SteeringPolicyAnswer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isDisabled":
            suggest = "is_disabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SteeringPolicyAnswer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SteeringPolicyAnswer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SteeringPolicyAnswer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 rdata: str,
                 rtype: str,
                 is_disabled: Optional[bool] = None,
                 pool: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rdata", rdata)
        pulumi.set(__self__, "rtype", rtype)
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rdata(self) -> str:
        return pulumi.get(self, "rdata")

    @property
    @pulumi.getter
    def rtype(self) -> str:
        return pulumi.get(self, "rtype")

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")


@pulumi.output_type
class SteeringPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleType":
            suggest = "rule_type"
        elif key == "defaultAnswerDatas":
            suggest = "default_answer_datas"
        elif key == "defaultCount":
            suggest = "default_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SteeringPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SteeringPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SteeringPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_type: str,
                 cases: Optional[Sequence['outputs.SteeringPolicyRuleCase']] = None,
                 default_answer_datas: Optional[Sequence['outputs.SteeringPolicyRuleDefaultAnswerData']] = None,
                 default_count: Optional[int] = None,
                 description: Optional[str] = None):
        pulumi.set(__self__, "rule_type", rule_type)
        if cases is not None:
            pulumi.set(__self__, "cases", cases)
        if default_answer_datas is not None:
            pulumi.set(__self__, "default_answer_datas", default_answer_datas)
        if default_count is not None:
            pulumi.set(__self__, "default_count", default_count)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def cases(self) -> Optional[Sequence['outputs.SteeringPolicyRuleCase']]:
        return pulumi.get(self, "cases")

    @property
    @pulumi.getter(name="defaultAnswerDatas")
    def default_answer_datas(self) -> Optional[Sequence['outputs.SteeringPolicyRuleDefaultAnswerData']]:
        return pulumi.get(self, "default_answer_datas")

    @property
    @pulumi.getter(name="defaultCount")
    def default_count(self) -> Optional[int]:
        return pulumi.get(self, "default_count")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class SteeringPolicyRuleCase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "answerDatas":
            suggest = "answer_datas"
        elif key == "caseCondition":
            suggest = "case_condition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SteeringPolicyRuleCase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SteeringPolicyRuleCase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SteeringPolicyRuleCase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer_datas: Optional[Sequence['outputs.SteeringPolicyRuleCaseAnswerData']] = None,
                 case_condition: Optional[str] = None,
                 count: Optional[int] = None):
        if answer_datas is not None:
            pulumi.set(__self__, "answer_datas", answer_datas)
        if case_condition is not None:
            pulumi.set(__self__, "case_condition", case_condition)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter(name="answerDatas")
    def answer_datas(self) -> Optional[Sequence['outputs.SteeringPolicyRuleCaseAnswerData']]:
        return pulumi.get(self, "answer_datas")

    @property
    @pulumi.getter(name="caseCondition")
    def case_condition(self) -> Optional[str]:
        return pulumi.get(self, "case_condition")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")


@pulumi.output_type
class SteeringPolicyRuleCaseAnswerData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "answerCondition":
            suggest = "answer_condition"
        elif key == "shouldKeep":
            suggest = "should_keep"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SteeringPolicyRuleCaseAnswerData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SteeringPolicyRuleCaseAnswerData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SteeringPolicyRuleCaseAnswerData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer_condition: Optional[str] = None,
                 should_keep: Optional[bool] = None,
                 value: Optional[int] = None):
        if answer_condition is not None:
            pulumi.set(__self__, "answer_condition", answer_condition)
        if should_keep is not None:
            pulumi.set(__self__, "should_keep", should_keep)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="answerCondition")
    def answer_condition(self) -> Optional[str]:
        return pulumi.get(self, "answer_condition")

    @property
    @pulumi.getter(name="shouldKeep")
    def should_keep(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SteeringPolicyRuleDefaultAnswerData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "answerCondition":
            suggest = "answer_condition"
        elif key == "shouldKeep":
            suggest = "should_keep"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SteeringPolicyRuleDefaultAnswerData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SteeringPolicyRuleDefaultAnswerData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SteeringPolicyRuleDefaultAnswerData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer_condition: Optional[str] = None,
                 should_keep: Optional[bool] = None,
                 value: Optional[int] = None):
        if answer_condition is not None:
            pulumi.set(__self__, "answer_condition", answer_condition)
        if should_keep is not None:
            pulumi.set(__self__, "should_keep", should_keep)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="answerCondition")
    def answer_condition(self) -> Optional[str]:
        return pulumi.get(self, "answer_condition")

    @property
    @pulumi.getter(name="shouldKeep")
    def should_keep(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ZoneExternalDownstream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tsigKeyId":
            suggest = "tsig_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneExternalDownstream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneExternalDownstream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneExternalDownstream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 port: Optional[int] = None,
                 tsig_key_id: Optional[str] = None):
        pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tsig_key_id is not None:
            pulumi.set(__self__, "tsig_key_id", tsig_key_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tsigKeyId")
    def tsig_key_id(self) -> Optional[str]:
        return pulumi.get(self, "tsig_key_id")


@pulumi.output_type
class ZoneExternalMaster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tsigKeyId":
            suggest = "tsig_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneExternalMaster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneExternalMaster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneExternalMaster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 port: Optional[int] = None,
                 tsig_key_id: Optional[str] = None):
        pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tsig_key_id is not None:
            pulumi.set(__self__, "tsig_key_id", tsig_key_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tsigKeyId")
    def tsig_key_id(self) -> Optional[str]:
        return pulumi.get(self, "tsig_key_id")


@pulumi.output_type
class ZoneNameserver(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class ZoneZoneTransferServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isTransferDestination":
            suggest = "is_transfer_destination"
        elif key == "isTransferSource":
            suggest = "is_transfer_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneZoneTransferServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneZoneTransferServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneZoneTransferServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 is_transfer_destination: Optional[bool] = None,
                 is_transfer_source: Optional[bool] = None,
                 port: Optional[int] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if is_transfer_destination is not None:
            pulumi.set(__self__, "is_transfer_destination", is_transfer_destination)
        if is_transfer_source is not None:
            pulumi.set(__self__, "is_transfer_source", is_transfer_source)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="isTransferDestination")
    def is_transfer_destination(self) -> Optional[bool]:
        return pulumi.get(self, "is_transfer_destination")

    @property
    @pulumi.getter(name="isTransferSource")
    def is_transfer_source(self) -> Optional[bool]:
        return pulumi.get(self, "is_transfer_source")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetRecordsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRecordsRecordResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 rtype: str,
                 zone_name_or_id: str,
                 compartment_id: Optional[str] = None,
                 is_protected: Optional[bool] = None,
                 rdata: Optional[str] = None,
                 record_hash: Optional[str] = None,
                 rrset_version: Optional[str] = None,
                 ttl: Optional[int] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "rtype", rtype)
        pulumi.set(__self__, "zone_name_or_id", zone_name_or_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if is_protected is not None:
            pulumi.set(__self__, "is_protected", is_protected)
        if rdata is not None:
            pulumi.set(__self__, "rdata", rdata)
        if record_hash is not None:
            pulumi.set(__self__, "record_hash", record_hash)
        if rrset_version is not None:
            pulumi.set(__self__, "rrset_version", rrset_version)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def domain(self) -> str:
        warnings.warn("""The 'oci_dns_record' resource has been deprecated. Please use 'oci_dns_rrset' instead.""", DeprecationWarning)
        pulumi.log.warn("""domain is deprecated: The 'oci_dns_record' resource has been deprecated. Please use 'oci_dns_rrset' instead.""")

        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def rtype(self) -> str:
        warnings.warn("""The 'oci_dns_record' resource has been deprecated. Please use 'oci_dns_rrset' instead.""", DeprecationWarning)
        pulumi.log.warn("""rtype is deprecated: The 'oci_dns_record' resource has been deprecated. Please use 'oci_dns_rrset' instead.""")

        return pulumi.get(self, "rtype")

    @property
    @pulumi.getter(name="zoneNameOrId")
    def zone_name_or_id(self) -> str:
        warnings.warn("""The 'oci_dns_record' resource has been deprecated. Please use 'oci_dns_rrset' instead.""", DeprecationWarning)
        pulumi.log.warn("""zone_name_or_id is deprecated: The 'oci_dns_record' resource has been deprecated. Please use 'oci_dns_rrset' instead.""")

        return pulumi.get(self, "zone_name_or_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[bool]:
        return pulumi.get(self, "is_protected")

    @property
    @pulumi.getter
    def rdata(self) -> Optional[str]:
        return pulumi.get(self, "rdata")

    @property
    @pulumi.getter(name="recordHash")
    def record_hash(self) -> Optional[str]:
        return pulumi.get(self, "record_hash")

    @property
    @pulumi.getter(name="rrsetVersion")
    def rrset_version(self) -> Optional[str]:
        return pulumi.get(self, "rrset_version")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetResolverAttachedViewResult(dict):
    def __init__(__self__, *,
                 view_id: Optional[str] = None):
        if view_id is not None:
            pulumi.set(__self__, "view_id", view_id)

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> Optional[str]:
        return pulumi.get(self, "view_id")


@pulumi.output_type
class GetResolverEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 endpoint_type: Optional[str] = None,
                 forwarding_address: Optional[str] = None,
                 is_forwarding: Optional[bool] = None,
                 is_listening: Optional[bool] = None,
                 listening_address: Optional[str] = None,
                 name: Optional[str] = None,
                 self: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if forwarding_address is not None:
            pulumi.set(__self__, "forwarding_address", forwarding_address)
        if is_forwarding is not None:
            pulumi.set(__self__, "is_forwarding", is_forwarding)
        if is_listening is not None:
            pulumi.set(__self__, "is_listening", is_listening)
        if listening_address is not None:
            pulumi.set(__self__, "listening_address", listening_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="forwardingAddress")
    def forwarding_address(self) -> Optional[str]:
        return pulumi.get(self, "forwarding_address")

    @property
    @pulumi.getter(name="isForwarding")
    def is_forwarding(self) -> Optional[bool]:
        return pulumi.get(self, "is_forwarding")

    @property
    @pulumi.getter(name="isListening")
    def is_listening(self) -> Optional[bool]:
        return pulumi.get(self, "is_listening")

    @property
    @pulumi.getter(name="listeningAddress")
    def listening_address(self) -> Optional[str]:
        return pulumi.get(self, "listening_address")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetResolverEndpointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetResolverEndpointsResolverEndpointResult(dict):
    def __init__(__self__, *,
                 is_forwarding: bool,
                 is_listening: bool,
                 name: str,
                 resolver_id: str,
                 subnet_id: str,
                 compartment_id: Optional[str] = None,
                 endpoint_type: Optional[str] = None,
                 forwarding_address: Optional[str] = None,
                 listening_address: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 scope: Optional[str] = None,
                 self: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        pulumi.set(__self__, "is_forwarding", is_forwarding)
        pulumi.set(__self__, "is_listening", is_listening)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resolver_id", resolver_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if forwarding_address is not None:
            pulumi.set(__self__, "forwarding_address", forwarding_address)
        if listening_address is not None:
            pulumi.set(__self__, "listening_address", listening_address)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="isForwarding")
    def is_forwarding(self) -> bool:
        return pulumi.get(self, "is_forwarding")

    @property
    @pulumi.getter(name="isListening")
    def is_listening(self) -> bool:
        return pulumi.get(self, "is_listening")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resolverId")
    def resolver_id(self) -> str:
        return pulumi.get(self, "resolver_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="forwardingAddress")
    def forwarding_address(self) -> Optional[str]:
        return pulumi.get(self, "forwarding_address")

    @property
    @pulumi.getter(name="listeningAddress")
    def listening_address(self) -> Optional[str]:
        return pulumi.get(self, "listening_address")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetResolverRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 client_address_conditions: Optional[Sequence[str]] = None,
                 destination_addresses: Optional[Sequence[str]] = None,
                 qname_cover_conditions: Optional[Sequence[str]] = None,
                 source_endpoint_name: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if client_address_conditions is not None:
            pulumi.set(__self__, "client_address_conditions", client_address_conditions)
        if destination_addresses is not None:
            pulumi.set(__self__, "destination_addresses", destination_addresses)
        if qname_cover_conditions is not None:
            pulumi.set(__self__, "qname_cover_conditions", qname_cover_conditions)
        if source_endpoint_name is not None:
            pulumi.set(__self__, "source_endpoint_name", source_endpoint_name)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="clientAddressConditions")
    def client_address_conditions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_address_conditions")

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_addresses")

    @property
    @pulumi.getter(name="qnameCoverConditions")
    def qname_cover_conditions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "qname_cover_conditions")

    @property
    @pulumi.getter(name="sourceEndpointName")
    def source_endpoint_name(self) -> Optional[str]:
        return pulumi.get(self, "source_endpoint_name")


@pulumi.output_type
class GetResolversFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetResolversResolverResult(dict):
    def __init__(__self__, *,
                 attached_vcn_id: Optional[str] = None,
                 attached_views: Optional[Sequence['outputs.GetResolversResolverAttachedViewResult']] = None,
                 compartment_id: Optional[str] = None,
                 default_view_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 endpoints: Optional[Sequence['outputs.GetResolversResolverEndpointResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_protected: Optional[bool] = None,
                 resolver_id: Optional[str] = None,
                 rules: Optional[Sequence['outputs.GetResolversResolverRuleResult']] = None,
                 scope: Optional[str] = None,
                 self: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if attached_vcn_id is not None:
            pulumi.set(__self__, "attached_vcn_id", attached_vcn_id)
        if attached_views is not None:
            pulumi.set(__self__, "attached_views", attached_views)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if default_view_id is not None:
            pulumi.set(__self__, "default_view_id", default_view_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_protected is not None:
            pulumi.set(__self__, "is_protected", is_protected)
        if resolver_id is not None:
            pulumi.set(__self__, "resolver_id", resolver_id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="attachedVcnId")
    def attached_vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "attached_vcn_id")

    @property
    @pulumi.getter(name="attachedViews")
    def attached_views(self) -> Optional[Sequence['outputs.GetResolversResolverAttachedViewResult']]:
        return pulumi.get(self, "attached_views")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="defaultViewId")
    def default_view_id(self) -> Optional[str]:
        return pulumi.get(self, "default_view_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.GetResolversResolverEndpointResult']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[bool]:
        return pulumi.get(self, "is_protected")

    @property
    @pulumi.getter(name="resolverId")
    def resolver_id(self) -> Optional[str]:
        return pulumi.get(self, "resolver_id")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetResolversResolverRuleResult']]:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetResolversResolverAttachedViewResult(dict):
    def __init__(__self__, *,
                 view_id: Optional[str] = None):
        if view_id is not None:
            pulumi.set(__self__, "view_id", view_id)

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> Optional[str]:
        return pulumi.get(self, "view_id")


@pulumi.output_type
class GetResolversResolverEndpointResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 endpoint_type: Optional[str] = None,
                 forwarding_address: Optional[str] = None,
                 is_forwarding: Optional[bool] = None,
                 is_listening: Optional[bool] = None,
                 listening_address: Optional[str] = None,
                 name: Optional[str] = None,
                 self: Optional[str] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if endpoint_type is not None:
            pulumi.set(__self__, "endpoint_type", endpoint_type)
        if forwarding_address is not None:
            pulumi.set(__self__, "forwarding_address", forwarding_address)
        if is_forwarding is not None:
            pulumi.set(__self__, "is_forwarding", is_forwarding)
        if is_listening is not None:
            pulumi.set(__self__, "is_listening", is_listening)
        if listening_address is not None:
            pulumi.set(__self__, "listening_address", listening_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="forwardingAddress")
    def forwarding_address(self) -> Optional[str]:
        return pulumi.get(self, "forwarding_address")

    @property
    @pulumi.getter(name="isForwarding")
    def is_forwarding(self) -> Optional[bool]:
        return pulumi.get(self, "is_forwarding")

    @property
    @pulumi.getter(name="isListening")
    def is_listening(self) -> Optional[bool]:
        return pulumi.get(self, "is_listening")

    @property
    @pulumi.getter(name="listeningAddress")
    def listening_address(self) -> Optional[str]:
        return pulumi.get(self, "listening_address")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetResolversResolverRuleResult(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 client_address_conditions: Optional[Sequence[str]] = None,
                 destination_addresses: Optional[Sequence[str]] = None,
                 qname_cover_conditions: Optional[Sequence[str]] = None,
                 source_endpoint_name: Optional[str] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if client_address_conditions is not None:
            pulumi.set(__self__, "client_address_conditions", client_address_conditions)
        if destination_addresses is not None:
            pulumi.set(__self__, "destination_addresses", destination_addresses)
        if qname_cover_conditions is not None:
            pulumi.set(__self__, "qname_cover_conditions", qname_cover_conditions)
        if source_endpoint_name is not None:
            pulumi.set(__self__, "source_endpoint_name", source_endpoint_name)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="clientAddressConditions")
    def client_address_conditions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "client_address_conditions")

    @property
    @pulumi.getter(name="destinationAddresses")
    def destination_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_addresses")

    @property
    @pulumi.getter(name="qnameCoverConditions")
    def qname_cover_conditions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "qname_cover_conditions")

    @property
    @pulumi.getter(name="sourceEndpointName")
    def source_endpoint_name(self) -> Optional[str]:
        return pulumi.get(self, "source_endpoint_name")


@pulumi.output_type
class GetRrsetItemResult(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 is_protected: Optional[bool] = None,
                 rdata: Optional[str] = None,
                 record_hash: Optional[str] = None,
                 rrset_version: Optional[str] = None,
                 rtype: Optional[str] = None,
                 ttl: Optional[int] = None):
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if is_protected is not None:
            pulumi.set(__self__, "is_protected", is_protected)
        if rdata is not None:
            pulumi.set(__self__, "rdata", rdata)
        if record_hash is not None:
            pulumi.set(__self__, "record_hash", record_hash)
        if rrset_version is not None:
            pulumi.set(__self__, "rrset_version", rrset_version)
        if rtype is not None:
            pulumi.set(__self__, "rtype", rtype)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[bool]:
        return pulumi.get(self, "is_protected")

    @property
    @pulumi.getter
    def rdata(self) -> Optional[str]:
        return pulumi.get(self, "rdata")

    @property
    @pulumi.getter(name="recordHash")
    def record_hash(self) -> Optional[str]:
        return pulumi.get(self, "record_hash")

    @property
    @pulumi.getter(name="rrsetVersion")
    def rrset_version(self) -> Optional[str]:
        return pulumi.get(self, "rrset_version")

    @property
    @pulumi.getter
    def rtype(self) -> Optional[str]:
        return pulumi.get(self, "rtype")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetRrsetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetRrsetsRrsetResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 items: Sequence['outputs.GetRrsetsRrsetItemResult'],
                 rtype: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "items", items)
        pulumi.set(__self__, "rtype", rtype)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetRrsetsRrsetItemResult']:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def rtype(self) -> str:
        return pulumi.get(self, "rtype")


@pulumi.output_type
class GetRrsetsRrsetItemResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 rdata: str,
                 rtype: str,
                 ttl: int,
                 is_protected: Optional[bool] = None,
                 record_hash: Optional[str] = None,
                 rrset_version: Optional[str] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "rdata", rdata)
        pulumi.set(__self__, "rtype", rtype)
        pulumi.set(__self__, "ttl", ttl)
        if is_protected is not None:
            pulumi.set(__self__, "is_protected", is_protected)
        if record_hash is not None:
            pulumi.set(__self__, "record_hash", record_hash)
        if rrset_version is not None:
            pulumi.set(__self__, "rrset_version", rrset_version)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def rdata(self) -> str:
        return pulumi.get(self, "rdata")

    @property
    @pulumi.getter
    def rtype(self) -> str:
        return pulumi.get(self, "rtype")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[bool]:
        return pulumi.get(self, "is_protected")

    @property
    @pulumi.getter(name="recordHash")
    def record_hash(self) -> Optional[str]:
        return pulumi.get(self, "record_hash")

    @property
    @pulumi.getter(name="rrsetVersion")
    def rrset_version(self) -> Optional[str]:
        return pulumi.get(self, "rrset_version")


@pulumi.output_type
class GetSteeringPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSteeringPoliciesSteeringPolicyResult(dict):
    def __init__(__self__, *,
                 answers: Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyAnswerResult']] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 health_check_monitor_id: Optional[str] = None,
                 id: Optional[str] = None,
                 rules: Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyRuleResult']] = None,
                 self: Optional[str] = None,
                 state: Optional[str] = None,
                 template: Optional[str] = None,
                 time_created: Optional[str] = None,
                 ttl: Optional[int] = None):
        if answers is not None:
            pulumi.set(__self__, "answers", answers)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if health_check_monitor_id is not None:
            pulumi.set(__self__, "health_check_monitor_id", health_check_monitor_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def answers(self) -> Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyAnswerResult']]:
        return pulumi.get(self, "answers")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="healthCheckMonitorId")
    def health_check_monitor_id(self) -> Optional[str]:
        return pulumi.get(self, "health_check_monitor_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyRuleResult']]:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def template(self) -> Optional[str]:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetSteeringPoliciesSteeringPolicyAnswerResult(dict):
    def __init__(__self__, *,
                 is_disabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 pool: Optional[str] = None,
                 rdata: Optional[str] = None,
                 rtype: Optional[str] = None):
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if rdata is not None:
            pulumi.set(__self__, "rdata", rdata)
        if rtype is not None:
            pulumi.set(__self__, "rtype", rtype)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter
    def rdata(self) -> Optional[str]:
        return pulumi.get(self, "rdata")

    @property
    @pulumi.getter
    def rtype(self) -> Optional[str]:
        return pulumi.get(self, "rtype")


@pulumi.output_type
class GetSteeringPoliciesSteeringPolicyRuleResult(dict):
    def __init__(__self__, *,
                 cases: Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyRuleCaseResult']] = None,
                 default_answer_datas: Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyRuleDefaultAnswerDataResult']] = None,
                 default_count: Optional[int] = None,
                 description: Optional[str] = None,
                 rule_type: Optional[str] = None):
        if cases is not None:
            pulumi.set(__self__, "cases", cases)
        if default_answer_datas is not None:
            pulumi.set(__self__, "default_answer_datas", default_answer_datas)
        if default_count is not None:
            pulumi.set(__self__, "default_count", default_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter
    def cases(self) -> Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyRuleCaseResult']]:
        return pulumi.get(self, "cases")

    @property
    @pulumi.getter(name="defaultAnswerDatas")
    def default_answer_datas(self) -> Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyRuleDefaultAnswerDataResult']]:
        return pulumi.get(self, "default_answer_datas")

    @property
    @pulumi.getter(name="defaultCount")
    def default_count(self) -> Optional[int]:
        return pulumi.get(self, "default_count")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetSteeringPoliciesSteeringPolicyRuleCaseResult(dict):
    def __init__(__self__, *,
                 answer_datas: Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyRuleCaseAnswerDataResult']] = None,
                 case_condition: Optional[str] = None,
                 count: Optional[int] = None):
        if answer_datas is not None:
            pulumi.set(__self__, "answer_datas", answer_datas)
        if case_condition is not None:
            pulumi.set(__self__, "case_condition", case_condition)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter(name="answerDatas")
    def answer_datas(self) -> Optional[Sequence['outputs.GetSteeringPoliciesSteeringPolicyRuleCaseAnswerDataResult']]:
        return pulumi.get(self, "answer_datas")

    @property
    @pulumi.getter(name="caseCondition")
    def case_condition(self) -> Optional[str]:
        return pulumi.get(self, "case_condition")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetSteeringPoliciesSteeringPolicyRuleCaseAnswerDataResult(dict):
    def __init__(__self__, *,
                 answer_condition: Optional[str] = None,
                 should_keep: Optional[bool] = None,
                 value: Optional[int] = None):
        if answer_condition is not None:
            pulumi.set(__self__, "answer_condition", answer_condition)
        if should_keep is not None:
            pulumi.set(__self__, "should_keep", should_keep)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="answerCondition")
    def answer_condition(self) -> Optional[str]:
        return pulumi.get(self, "answer_condition")

    @property
    @pulumi.getter(name="shouldKeep")
    def should_keep(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSteeringPoliciesSteeringPolicyRuleDefaultAnswerDataResult(dict):
    def __init__(__self__, *,
                 answer_condition: Optional[str] = None,
                 should_keep: Optional[bool] = None,
                 value: Optional[int] = None):
        if answer_condition is not None:
            pulumi.set(__self__, "answer_condition", answer_condition)
        if should_keep is not None:
            pulumi.set(__self__, "should_keep", should_keep)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="answerCondition")
    def answer_condition(self) -> Optional[str]:
        return pulumi.get(self, "answer_condition")

    @property
    @pulumi.getter(name="shouldKeep")
    def should_keep(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSteeringPolicyAnswerResult(dict):
    def __init__(__self__, *,
                 is_disabled: Optional[bool] = None,
                 name: Optional[str] = None,
                 pool: Optional[str] = None,
                 rdata: Optional[str] = None,
                 rtype: Optional[str] = None):
        if is_disabled is not None:
            pulumi.set(__self__, "is_disabled", is_disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if rdata is not None:
            pulumi.set(__self__, "rdata", rdata)
        if rtype is not None:
            pulumi.set(__self__, "rtype", rtype)

    @property
    @pulumi.getter(name="isDisabled")
    def is_disabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_disabled")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def pool(self) -> Optional[str]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter
    def rdata(self) -> Optional[str]:
        return pulumi.get(self, "rdata")

    @property
    @pulumi.getter
    def rtype(self) -> Optional[str]:
        return pulumi.get(self, "rtype")


@pulumi.output_type
class GetSteeringPolicyAttachmentsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSteeringPolicyAttachmentsSteeringPolicyAttachmentResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 domain_name: Optional[str] = None,
                 id: Optional[str] = None,
                 rtypes: Optional[Sequence[str]] = None,
                 self: Optional[str] = None,
                 state: Optional[str] = None,
                 steering_policy_id: Optional[str] = None,
                 time_created: Optional[str] = None,
                 zone_id: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if rtypes is not None:
            pulumi.set(__self__, "rtypes", rtypes)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if steering_policy_id is not None:
            pulumi.set(__self__, "steering_policy_id", steering_policy_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def rtypes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rtypes")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="steeringPolicyId")
    def steering_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "steering_policy_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetSteeringPolicyRuleResult(dict):
    def __init__(__self__, *,
                 cases: Optional[Sequence['outputs.GetSteeringPolicyRuleCaseResult']] = None,
                 default_answer_datas: Optional[Sequence['outputs.GetSteeringPolicyRuleDefaultAnswerDataResult']] = None,
                 default_count: Optional[int] = None,
                 description: Optional[str] = None,
                 rule_type: Optional[str] = None):
        if cases is not None:
            pulumi.set(__self__, "cases", cases)
        if default_answer_datas is not None:
            pulumi.set(__self__, "default_answer_datas", default_answer_datas)
        if default_count is not None:
            pulumi.set(__self__, "default_count", default_count)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)

    @property
    @pulumi.getter
    def cases(self) -> Optional[Sequence['outputs.GetSteeringPolicyRuleCaseResult']]:
        return pulumi.get(self, "cases")

    @property
    @pulumi.getter(name="defaultAnswerDatas")
    def default_answer_datas(self) -> Optional[Sequence['outputs.GetSteeringPolicyRuleDefaultAnswerDataResult']]:
        return pulumi.get(self, "default_answer_datas")

    @property
    @pulumi.getter(name="defaultCount")
    def default_count(self) -> Optional[int]:
        return pulumi.get(self, "default_count")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[str]:
        return pulumi.get(self, "rule_type")


@pulumi.output_type
class GetSteeringPolicyRuleCaseResult(dict):
    def __init__(__self__, *,
                 answer_datas: Optional[Sequence['outputs.GetSteeringPolicyRuleCaseAnswerDataResult']] = None,
                 case_condition: Optional[str] = None,
                 count: Optional[int] = None):
        if answer_datas is not None:
            pulumi.set(__self__, "answer_datas", answer_datas)
        if case_condition is not None:
            pulumi.set(__self__, "case_condition", case_condition)
        if count is not None:
            pulumi.set(__self__, "count", count)

    @property
    @pulumi.getter(name="answerDatas")
    def answer_datas(self) -> Optional[Sequence['outputs.GetSteeringPolicyRuleCaseAnswerDataResult']]:
        return pulumi.get(self, "answer_datas")

    @property
    @pulumi.getter(name="caseCondition")
    def case_condition(self) -> Optional[str]:
        return pulumi.get(self, "case_condition")

    @property
    @pulumi.getter
    def count(self) -> Optional[int]:
        return pulumi.get(self, "count")


@pulumi.output_type
class GetSteeringPolicyRuleCaseAnswerDataResult(dict):
    def __init__(__self__, *,
                 answer_condition: Optional[str] = None,
                 should_keep: Optional[bool] = None,
                 value: Optional[int] = None):
        if answer_condition is not None:
            pulumi.set(__self__, "answer_condition", answer_condition)
        if should_keep is not None:
            pulumi.set(__self__, "should_keep", should_keep)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="answerCondition")
    def answer_condition(self) -> Optional[str]:
        return pulumi.get(self, "answer_condition")

    @property
    @pulumi.getter(name="shouldKeep")
    def should_keep(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSteeringPolicyRuleDefaultAnswerDataResult(dict):
    def __init__(__self__, *,
                 answer_condition: Optional[str] = None,
                 should_keep: Optional[bool] = None,
                 value: Optional[int] = None):
        if answer_condition is not None:
            pulumi.set(__self__, "answer_condition", answer_condition)
        if should_keep is not None:
            pulumi.set(__self__, "should_keep", should_keep)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="answerCondition")
    def answer_condition(self) -> Optional[str]:
        return pulumi.get(self, "answer_condition")

    @property
    @pulumi.getter(name="shouldKeep")
    def should_keep(self) -> Optional[bool]:
        return pulumi.get(self, "should_keep")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTsigKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetTsigKeysTsigKeyResult(dict):
    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 secret: Optional[str] = None,
                 self: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetViewsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetViewsViewResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_protected: Optional[bool] = None,
                 scope: Optional[str] = None,
                 self: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_protected is not None:
            pulumi.set(__self__, "is_protected", is_protected)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[bool]:
        return pulumi.get(self, "is_protected")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetZonesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetZonesZoneResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 external_downstreams: Optional[Sequence['outputs.GetZonesZoneExternalDownstreamResult']] = None,
                 external_masters: Optional[Sequence['outputs.GetZonesZoneExternalMasterResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_protected: Optional[bool] = None,
                 name: Optional[str] = None,
                 nameservers: Optional[Sequence['outputs.GetZonesZoneNameserverResult']] = None,
                 scope: Optional[str] = None,
                 self: Optional[str] = None,
                 serial: Optional[int] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 version: Optional[str] = None,
                 view_id: Optional[str] = None,
                 zone_transfer_servers: Optional[Sequence['outputs.GetZonesZoneZoneTransferServerResult']] = None,
                 zone_type: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if external_downstreams is not None:
            pulumi.set(__self__, "external_downstreams", external_downstreams)
        if external_masters is not None:
            pulumi.set(__self__, "external_masters", external_masters)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_protected is not None:
            pulumi.set(__self__, "is_protected", is_protected)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if self is not None:
            pulumi.set(__self__, "self", self)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if view_id is not None:
            pulumi.set(__self__, "view_id", view_id)
        if zone_transfer_servers is not None:
            pulumi.set(__self__, "zone_transfer_servers", zone_transfer_servers)
        if zone_type is not None:
            pulumi.set(__self__, "zone_type", zone_type)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="externalDownstreams")
    def external_downstreams(self) -> Optional[Sequence['outputs.GetZonesZoneExternalDownstreamResult']]:
        return pulumi.get(self, "external_downstreams")

    @property
    @pulumi.getter(name="externalMasters")
    def external_masters(self) -> Optional[Sequence['outputs.GetZonesZoneExternalMasterResult']]:
        return pulumi.get(self, "external_masters")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isProtected")
    def is_protected(self) -> Optional[bool]:
        return pulumi.get(self, "is_protected")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence['outputs.GetZonesZoneNameserverResult']]:
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def self(self) -> Optional[str]:
        return pulumi.get(self, "self")

    @property
    @pulumi.getter
    def serial(self) -> Optional[int]:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> Optional[str]:
        return pulumi.get(self, "view_id")

    @property
    @pulumi.getter(name="zoneTransferServers")
    def zone_transfer_servers(self) -> Optional[Sequence['outputs.GetZonesZoneZoneTransferServerResult']]:
        return pulumi.get(self, "zone_transfer_servers")

    @property
    @pulumi.getter(name="zoneType")
    def zone_type(self) -> Optional[str]:
        return pulumi.get(self, "zone_type")


@pulumi.output_type
class GetZonesZoneExternalDownstreamResult(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 port: Optional[int] = None,
                 tsig_key_id: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tsig_key_id is not None:
            pulumi.set(__self__, "tsig_key_id", tsig_key_id)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tsigKeyId")
    def tsig_key_id(self) -> Optional[str]:
        return pulumi.get(self, "tsig_key_id")


@pulumi.output_type
class GetZonesZoneExternalMasterResult(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 port: Optional[int] = None,
                 tsig_key_id: Optional[str] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tsig_key_id is not None:
            pulumi.set(__self__, "tsig_key_id", tsig_key_id)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="tsigKeyId")
    def tsig_key_id(self) -> Optional[str]:
        return pulumi.get(self, "tsig_key_id")


@pulumi.output_type
class GetZonesZoneNameserverResult(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")


@pulumi.output_type
class GetZonesZoneZoneTransferServerResult(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None,
                 is_transfer_destination: Optional[bool] = None,
                 is_transfer_source: Optional[bool] = None,
                 port: Optional[int] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if is_transfer_destination is not None:
            pulumi.set(__self__, "is_transfer_destination", is_transfer_destination)
        if is_transfer_source is not None:
            pulumi.set(__self__, "is_transfer_source", is_transfer_source)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="isTransferDestination")
    def is_transfer_destination(self) -> Optional[bool]:
        return pulumi.get(self, "is_transfer_destination")

    @property
    @pulumi.getter(name="isTransferSource")
    def is_transfer_source(self) -> Optional[bool]:
        return pulumi.get(self, "is_transfer_source")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


