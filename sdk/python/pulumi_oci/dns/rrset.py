# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RrsetArgs', 'Rrset']

@pulumi.input_type
class RrsetArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 rtype: pulumi.Input[str],
                 zone_name_or_id: pulumi.Input[str],
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['RrsetItemArgs']]]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 view_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Rrset resource.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "rtype", rtype)
        pulumi.set(__self__, "zone_name_or_id", zone_name_or_id)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if view_id is not None:
            pulumi.set(__self__, "view_id", view_id)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def rtype(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rtype")

    @rtype.setter
    def rtype(self, value: pulumi.Input[str]):
        pulumi.set(self, "rtype", value)

    @property
    @pulumi.getter(name="zoneNameOrId")
    def zone_name_or_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "zone_name_or_id")

    @zone_name_or_id.setter
    def zone_name_or_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_name_or_id", value)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RrsetItemArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RrsetItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view_id")

    @view_id.setter
    def view_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_id", value)


@pulumi.input_type
class _RrsetState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['RrsetItemArgs']]]] = None,
                 rtype: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 view_id: Optional[pulumi.Input[str]] = None,
                 zone_name_or_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Rrset resources.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if rtype is not None:
            pulumi.set(__self__, "rtype", rtype)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if view_id is not None:
            pulumi.set(__self__, "view_id", view_id)
        if zone_name_or_id is not None:
            pulumi.set(__self__, "zone_name_or_id", zone_name_or_id)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RrsetItemArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RrsetItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def rtype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rtype")

    @rtype.setter
    def rtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rtype", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view_id")

    @view_id.setter
    def view_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_id", value)

    @property
    @pulumi.getter(name="zoneNameOrId")
    def zone_name_or_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "zone_name_or_id")

    @zone_name_or_id.setter
    def zone_name_or_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_name_or_id", value)


class Rrset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RrsetItemArgs']]]]] = None,
                 rtype: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 view_id: Optional[pulumi.Input[str]] = None,
                 zone_name_or_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Rrset resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RrsetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Rrset resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RrsetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RrsetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RrsetItemArgs']]]]] = None,
                 rtype: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 view_id: Optional[pulumi.Input[str]] = None,
                 zone_name_or_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RrsetArgs.__new__(RrsetArgs)

            __props__.__dict__["compartment_id"] = compartment_id
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["items"] = items
            if rtype is None and not opts.urn:
                raise TypeError("Missing required property 'rtype'")
            __props__.__dict__["rtype"] = rtype
            __props__.__dict__["scope"] = scope
            __props__.__dict__["view_id"] = view_id
            if zone_name_or_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_name_or_id'")
            __props__.__dict__["zone_name_or_id"] = zone_name_or_id
        super(Rrset, __self__).__init__(
            'oci:Dns/rrset:Rrset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RrsetItemArgs']]]]] = None,
            rtype: Optional[pulumi.Input[str]] = None,
            scope: Optional[pulumi.Input[str]] = None,
            view_id: Optional[pulumi.Input[str]] = None,
            zone_name_or_id: Optional[pulumi.Input[str]] = None) -> 'Rrset':
        """
        Get an existing Rrset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RrsetState.__new__(_RrsetState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["domain"] = domain
        __props__.__dict__["items"] = items
        __props__.__dict__["rtype"] = rtype
        __props__.__dict__["scope"] = scope
        __props__.__dict__["view_id"] = view_id
        __props__.__dict__["zone_name_or_id"] = zone_name_or_id
        return Rrset(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def items(self) -> pulumi.Output[Optional[Sequence['outputs.RrsetItem']]]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def rtype(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rtype")

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "view_id")

    @property
    @pulumi.getter(name="zoneNameOrId")
    def zone_name_or_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "zone_name_or_id")

