# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EmWarehouseArgs', 'EmWarehouse']

@pulumi.input_type
class EmWarehouseArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 em_bridge_id: pulumi.Input[str],
                 operations_insights_warehouse_id: pulumi.Input[str],
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a EmWarehouse resource.
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[str] em_bridge_id: (Updatable) EMBridge Identifier
        :param pulumi.Input[str] operations_insights_warehouse_id: operations Insights Warehouse Identifier
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] display_name: EmWarehouse Identifier
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        EmWarehouseArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            em_bridge_id=em_bridge_id,
            operations_insights_warehouse_id=operations_insights_warehouse_id,
            defined_tags=defined_tags,
            display_name=display_name,
            freeform_tags=freeform_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: pulumi.Input[str],
             em_bridge_id: pulumi.Input[str],
             operations_insights_warehouse_id: pulumi.Input[str],
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'emBridgeId' in kwargs:
            em_bridge_id = kwargs['emBridgeId']
        if 'operationsInsightsWarehouseId' in kwargs:
            operations_insights_warehouse_id = kwargs['operationsInsightsWarehouseId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']

        _setter("compartment_id", compartment_id)
        _setter("em_bridge_id", em_bridge_id)
        _setter("operations_insights_warehouse_id", operations_insights_warehouse_id)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if display_name is not None:
            _setter("display_name", display_name)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        (Updatable) Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="emBridgeId")
    def em_bridge_id(self) -> pulumi.Input[str]:
        """
        (Updatable) EMBridge Identifier
        """
        return pulumi.get(self, "em_bridge_id")

    @em_bridge_id.setter
    def em_bridge_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "em_bridge_id", value)

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> pulumi.Input[str]:
        """
        operations Insights Warehouse Identifier


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "operations_insights_warehouse_id")

    @operations_insights_warehouse_id.setter
    def operations_insights_warehouse_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "operations_insights_warehouse_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        EmWarehouse Identifier
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)


@pulumi.input_type
class _EmWarehouseState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 em_bridge_id: Optional[pulumi.Input[str]] = None,
                 em_warehouse_type: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 latest_etl_run_message: Optional[pulumi.Input[str]] = None,
                 latest_etl_run_status: Optional[pulumi.Input[str]] = None,
                 latest_etl_run_time: Optional[pulumi.Input[str]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 operations_insights_warehouse_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EmWarehouse resources.
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] display_name: EmWarehouse Identifier
        :param pulumi.Input[str] em_bridge_id: (Updatable) EMBridge Identifier
        :param pulumi.Input[str] em_warehouse_type: Type of the EmWarehouse.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] latest_etl_run_message: Data Flow Run Status Message
        :param pulumi.Input[str] latest_etl_run_status: Data Flow Run Status
        :param pulumi.Input[str] latest_etl_run_time: Data Flow Run Total Time
        :param pulumi.Input[str] lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param pulumi.Input[str] operations_insights_warehouse_id: operations Insights Warehouse Identifier
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] state: The current state of the EmWarehouse.
        :param pulumi.Input[Mapping[str, Any]] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[str] time_created: The time the the EmWarehouse was created. An RFC3339 formatted datetime string
        :param pulumi.Input[str] time_updated: The time the EmWarehouse was updated. An RFC3339 formatted datetime string
        """
        _EmWarehouseState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compartment_id=compartment_id,
            defined_tags=defined_tags,
            display_name=display_name,
            em_bridge_id=em_bridge_id,
            em_warehouse_type=em_warehouse_type,
            freeform_tags=freeform_tags,
            latest_etl_run_message=latest_etl_run_message,
            latest_etl_run_status=latest_etl_run_status,
            latest_etl_run_time=latest_etl_run_time,
            lifecycle_details=lifecycle_details,
            operations_insights_warehouse_id=operations_insights_warehouse_id,
            state=state,
            system_tags=system_tags,
            time_created=time_created,
            time_updated=time_updated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compartment_id: Optional[pulumi.Input[str]] = None,
             defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             display_name: Optional[pulumi.Input[str]] = None,
             em_bridge_id: Optional[pulumi.Input[str]] = None,
             em_warehouse_type: Optional[pulumi.Input[str]] = None,
             freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             latest_etl_run_message: Optional[pulumi.Input[str]] = None,
             latest_etl_run_status: Optional[pulumi.Input[str]] = None,
             latest_etl_run_time: Optional[pulumi.Input[str]] = None,
             lifecycle_details: Optional[pulumi.Input[str]] = None,
             operations_insights_warehouse_id: Optional[pulumi.Input[str]] = None,
             state: Optional[pulumi.Input[str]] = None,
             system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
             time_created: Optional[pulumi.Input[str]] = None,
             time_updated: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if 'compartmentId' in kwargs:
            compartment_id = kwargs['compartmentId']
        if 'definedTags' in kwargs:
            defined_tags = kwargs['definedTags']
        if 'displayName' in kwargs:
            display_name = kwargs['displayName']
        if 'emBridgeId' in kwargs:
            em_bridge_id = kwargs['emBridgeId']
        if 'emWarehouseType' in kwargs:
            em_warehouse_type = kwargs['emWarehouseType']
        if 'freeformTags' in kwargs:
            freeform_tags = kwargs['freeformTags']
        if 'latestEtlRunMessage' in kwargs:
            latest_etl_run_message = kwargs['latestEtlRunMessage']
        if 'latestEtlRunStatus' in kwargs:
            latest_etl_run_status = kwargs['latestEtlRunStatus']
        if 'latestEtlRunTime' in kwargs:
            latest_etl_run_time = kwargs['latestEtlRunTime']
        if 'lifecycleDetails' in kwargs:
            lifecycle_details = kwargs['lifecycleDetails']
        if 'operationsInsightsWarehouseId' in kwargs:
            operations_insights_warehouse_id = kwargs['operationsInsightsWarehouseId']
        if 'systemTags' in kwargs:
            system_tags = kwargs['systemTags']
        if 'timeCreated' in kwargs:
            time_created = kwargs['timeCreated']
        if 'timeUpdated' in kwargs:
            time_updated = kwargs['timeUpdated']

        if compartment_id is not None:
            _setter("compartment_id", compartment_id)
        if defined_tags is not None:
            _setter("defined_tags", defined_tags)
        if display_name is not None:
            _setter("display_name", display_name)
        if em_bridge_id is not None:
            _setter("em_bridge_id", em_bridge_id)
        if em_warehouse_type is not None:
            _setter("em_warehouse_type", em_warehouse_type)
        if freeform_tags is not None:
            _setter("freeform_tags", freeform_tags)
        if latest_etl_run_message is not None:
            _setter("latest_etl_run_message", latest_etl_run_message)
        if latest_etl_run_status is not None:
            _setter("latest_etl_run_status", latest_etl_run_status)
        if latest_etl_run_time is not None:
            _setter("latest_etl_run_time", latest_etl_run_time)
        if lifecycle_details is not None:
            _setter("lifecycle_details", lifecycle_details)
        if operations_insights_warehouse_id is not None:
            _setter("operations_insights_warehouse_id", operations_insights_warehouse_id)
        if state is not None:
            _setter("state", state)
        if system_tags is not None:
            _setter("system_tags", system_tags)
        if time_created is not None:
            _setter("time_created", time_created)
        if time_updated is not None:
            _setter("time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        EmWarehouse Identifier
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="emBridgeId")
    def em_bridge_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) EMBridge Identifier
        """
        return pulumi.get(self, "em_bridge_id")

    @em_bridge_id.setter
    def em_bridge_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "em_bridge_id", value)

    @property
    @pulumi.getter(name="emWarehouseType")
    def em_warehouse_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the EmWarehouse.
        """
        return pulumi.get(self, "em_warehouse_type")

    @em_warehouse_type.setter
    def em_warehouse_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "em_warehouse_type", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="latestEtlRunMessage")
    def latest_etl_run_message(self) -> Optional[pulumi.Input[str]]:
        """
        Data Flow Run Status Message
        """
        return pulumi.get(self, "latest_etl_run_message")

    @latest_etl_run_message.setter
    def latest_etl_run_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_etl_run_message", value)

    @property
    @pulumi.getter(name="latestEtlRunStatus")
    def latest_etl_run_status(self) -> Optional[pulumi.Input[str]]:
        """
        Data Flow Run Status
        """
        return pulumi.get(self, "latest_etl_run_status")

    @latest_etl_run_status.setter
    def latest_etl_run_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_etl_run_status", value)

    @property
    @pulumi.getter(name="latestEtlRunTime")
    def latest_etl_run_time(self) -> Optional[pulumi.Input[str]]:
        """
        Data Flow Run Total Time
        """
        return pulumi.get(self, "latest_etl_run_time")

    @latest_etl_run_time.setter
    def latest_etl_run_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "latest_etl_run_time", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> Optional[pulumi.Input[str]]:
        """
        operations Insights Warehouse Identifier


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "operations_insights_warehouse_id")

    @operations_insights_warehouse_id.setter
    def operations_insights_warehouse_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operations_insights_warehouse_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the EmWarehouse.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The time the the EmWarehouse was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The time the EmWarehouse was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class EmWarehouse(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 em_bridge_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 operations_insights_warehouse_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Em Warehouse resource in Oracle Cloud Infrastructure Em Warehouse service.

        Creates a new EmWarehouse.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_em_warehouse = oci.em_warehouse.EmWarehouse("testEmWarehouse",
            compartment_id=var["compartment_id"],
            em_bridge_id=oci_em_warehouse_em_bridge["test_em_bridge"]["id"],
            operations_insights_warehouse_id=oci_opsi_operations_insights_warehouse["test_operations_insights_warehouse"]["id"],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            display_name=var["em_warehouse_display_name"],
            freeform_tags={
                "bar-key": "value",
            })
        ```

        ## Import

        EmWarehouses can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:EmWarehouse/emWarehouse:EmWarehouse test_em_warehouse "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] display_name: EmWarehouse Identifier
        :param pulumi.Input[str] em_bridge_id: (Updatable) EMBridge Identifier
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] operations_insights_warehouse_id: operations Insights Warehouse Identifier
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EmWarehouseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Em Warehouse resource in Oracle Cloud Infrastructure Em Warehouse service.

        Creates a new EmWarehouse.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_em_warehouse = oci.em_warehouse.EmWarehouse("testEmWarehouse",
            compartment_id=var["compartment_id"],
            em_bridge_id=oci_em_warehouse_em_bridge["test_em_bridge"]["id"],
            operations_insights_warehouse_id=oci_opsi_operations_insights_warehouse["test_operations_insights_warehouse"]["id"],
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            display_name=var["em_warehouse_display_name"],
            freeform_tags={
                "bar-key": "value",
            })
        ```

        ## Import

        EmWarehouses can be imported using the `id`, e.g.

        ```sh
         $ pulumi import oci:EmWarehouse/emWarehouse:EmWarehouse test_em_warehouse "id"
        ```

        :param str resource_name: The name of the resource.
        :param EmWarehouseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EmWarehouseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            EmWarehouseArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 em_bridge_id: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 operations_insights_warehouse_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EmWarehouseArgs.__new__(EmWarehouseArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["display_name"] = display_name
            if em_bridge_id is None and not opts.urn:
                raise TypeError("Missing required property 'em_bridge_id'")
            __props__.__dict__["em_bridge_id"] = em_bridge_id
            __props__.__dict__["freeform_tags"] = freeform_tags
            if operations_insights_warehouse_id is None and not opts.urn:
                raise TypeError("Missing required property 'operations_insights_warehouse_id'")
            __props__.__dict__["operations_insights_warehouse_id"] = operations_insights_warehouse_id
            __props__.__dict__["em_warehouse_type"] = None
            __props__.__dict__["latest_etl_run_message"] = None
            __props__.__dict__["latest_etl_run_status"] = None
            __props__.__dict__["latest_etl_run_time"] = None
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(EmWarehouse, __self__).__init__(
            'oci:EmWarehouse/emWarehouse:EmWarehouse',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            em_bridge_id: Optional[pulumi.Input[str]] = None,
            em_warehouse_type: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            latest_etl_run_message: Optional[pulumi.Input[str]] = None,
            latest_etl_run_status: Optional[pulumi.Input[str]] = None,
            latest_etl_run_time: Optional[pulumi.Input[str]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            operations_insights_warehouse_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'EmWarehouse':
        """
        Get an existing EmWarehouse resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: (Updatable) Compartment Identifier
        :param pulumi.Input[Mapping[str, Any]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] display_name: EmWarehouse Identifier
        :param pulumi.Input[str] em_bridge_id: (Updatable) EMBridge Identifier
        :param pulumi.Input[str] em_warehouse_type: Type of the EmWarehouse.
        :param pulumi.Input[Mapping[str, Any]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[str] latest_etl_run_message: Data Flow Run Status Message
        :param pulumi.Input[str] latest_etl_run_status: Data Flow Run Status
        :param pulumi.Input[str] latest_etl_run_time: Data Flow Run Total Time
        :param pulumi.Input[str] lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param pulumi.Input[str] operations_insights_warehouse_id: operations Insights Warehouse Identifier
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] state: The current state of the EmWarehouse.
        :param pulumi.Input[Mapping[str, Any]] system_tags: Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[str] time_created: The time the the EmWarehouse was created. An RFC3339 formatted datetime string
        :param pulumi.Input[str] time_updated: The time the EmWarehouse was updated. An RFC3339 formatted datetime string
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EmWarehouseState.__new__(_EmWarehouseState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["em_bridge_id"] = em_bridge_id
        __props__.__dict__["em_warehouse_type"] = em_warehouse_type
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["latest_etl_run_message"] = latest_etl_run_message
        __props__.__dict__["latest_etl_run_status"] = latest_etl_run_status
        __props__.__dict__["latest_etl_run_time"] = latest_etl_run_time
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["operations_insights_warehouse_id"] = operations_insights_warehouse_id
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        return EmWarehouse(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        (Updatable) Compartment Identifier
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        EmWarehouse Identifier
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emBridgeId")
    def em_bridge_id(self) -> pulumi.Output[str]:
        """
        (Updatable) EMBridge Identifier
        """
        return pulumi.get(self, "em_bridge_id")

    @property
    @pulumi.getter(name="emWarehouseType")
    def em_warehouse_type(self) -> pulumi.Output[str]:
        """
        Type of the EmWarehouse.
        """
        return pulumi.get(self, "em_warehouse_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="latestEtlRunMessage")
    def latest_etl_run_message(self) -> pulumi.Output[str]:
        """
        Data Flow Run Status Message
        """
        return pulumi.get(self, "latest_etl_run_message")

    @property
    @pulumi.getter(name="latestEtlRunStatus")
    def latest_etl_run_status(self) -> pulumi.Output[str]:
        """
        Data Flow Run Status
        """
        return pulumi.get(self, "latest_etl_run_status")

    @property
    @pulumi.getter(name="latestEtlRunTime")
    def latest_etl_run_time(self) -> pulumi.Output[str]:
        """
        Data Flow Run Total Time
        """
        return pulumi.get(self, "latest_etl_run_time")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[str]:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> pulumi.Output[str]:
        """
        operations Insights Warehouse Identifier


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the EmWarehouse.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The time the the EmWarehouse was created. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        """
        The time the EmWarehouse was updated. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_updated")

