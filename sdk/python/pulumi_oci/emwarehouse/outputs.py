# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetEmWarehousesEmWarehouseCollectionResult',
    'GetEmWarehousesEmWarehouseCollectionItemResult',
    'GetEmWarehousesFilterResult',
    'GetEtlRunItemResult',
    'GetEtlRunsEtlRunCollectionResult',
    'GetEtlRunsEtlRunCollectionItemResult',
    'GetEtlRunsEtlRunCollectionItemItemResult',
    'GetEtlRunsFilterResult',
    'GetResourceUsageEmInstanceResult',
]

@pulumi.output_type
class GetEmWarehousesEmWarehouseCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetEmWarehousesEmWarehouseCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetEmWarehousesEmWarehouseCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEmWarehousesEmWarehouseCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 em_bridge_id: Optional[str] = None,
                 em_warehouse_type: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 latest_etl_run_message: Optional[str] = None,
                 latest_etl_run_status: Optional[str] = None,
                 latest_etl_run_time: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 operations_insights_warehouse_id: Optional[str] = None,
                 state: Optional[str] = None,
                 system_tags: Optional[Mapping[str, Any]] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if em_bridge_id is not None:
            pulumi.set(__self__, "em_bridge_id", em_bridge_id)
        if em_warehouse_type is not None:
            pulumi.set(__self__, "em_warehouse_type", em_warehouse_type)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if latest_etl_run_message is not None:
            pulumi.set(__self__, "latest_etl_run_message", latest_etl_run_message)
        if latest_etl_run_status is not None:
            pulumi.set(__self__, "latest_etl_run_status", latest_etl_run_status)
        if latest_etl_run_time is not None:
            pulumi.set(__self__, "latest_etl_run_time", latest_etl_run_time)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if operations_insights_warehouse_id is not None:
            pulumi.set(__self__, "operations_insights_warehouse_id", operations_insights_warehouse_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="emBridgeId")
    def em_bridge_id(self) -> Optional[str]:
        return pulumi.get(self, "em_bridge_id")

    @property
    @pulumi.getter(name="emWarehouseType")
    def em_warehouse_type(self) -> Optional[str]:
        return pulumi.get(self, "em_warehouse_type")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="latestEtlRunMessage")
    def latest_etl_run_message(self) -> Optional[str]:
        return pulumi.get(self, "latest_etl_run_message")

    @property
    @pulumi.getter(name="latestEtlRunStatus")
    def latest_etl_run_status(self) -> Optional[str]:
        return pulumi.get(self, "latest_etl_run_status")

    @property
    @pulumi.getter(name="latestEtlRunTime")
    def latest_etl_run_time(self) -> Optional[str]:
        return pulumi.get(self, "latest_etl_run_time")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="operationsInsightsWarehouseId")
    def operations_insights_warehouse_id(self) -> Optional[str]:
        return pulumi.get(self, "operations_insights_warehouse_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEmWarehousesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetEtlRunItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 data_read_in_bytes: Optional[str] = None,
                 data_written: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 lifecycle_details: Optional[str] = None,
                 run_duration_in_milliseconds: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if data_read_in_bytes is not None:
            pulumi.set(__self__, "data_read_in_bytes", data_read_in_bytes)
        if data_written is not None:
            pulumi.set(__self__, "data_written", data_written)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if run_duration_in_milliseconds is not None:
            pulumi.set(__self__, "run_duration_in_milliseconds", run_duration_in_milliseconds)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dataReadInBytes")
    def data_read_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "data_read_in_bytes")

    @property
    @pulumi.getter(name="dataWritten")
    def data_written(self) -> Optional[str]:
        return pulumi.get(self, "data_written")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="runDurationInMilliseconds")
    def run_duration_in_milliseconds(self) -> Optional[str]:
        return pulumi.get(self, "run_duration_in_milliseconds")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEtlRunsEtlRunCollectionResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetEtlRunsEtlRunCollectionItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetEtlRunsEtlRunCollectionItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEtlRunsEtlRunCollectionItemResult(dict):
    def __init__(__self__, *,
                 items: Optional[Sequence['outputs.GetEtlRunsEtlRunCollectionItemItemResult']] = None):
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.GetEtlRunsEtlRunCollectionItemItemResult']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetEtlRunsEtlRunCollectionItemItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: Optional[str] = None,
                 data_read_in_bytes: Optional[str] = None,
                 data_written: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 lifecycle_details: Optional[str] = None,
                 run_duration_in_milliseconds: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 time_updated: Optional[str] = None):
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if data_read_in_bytes is not None:
            pulumi.set(__self__, "data_read_in_bytes", data_read_in_bytes)
        if data_written is not None:
            pulumi.set(__self__, "data_written", data_written)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if run_duration_in_milliseconds is not None:
            pulumi.set(__self__, "run_duration_in_milliseconds", run_duration_in_milliseconds)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="dataReadInBytes")
    def data_read_in_bytes(self) -> Optional[str]:
        return pulumi.get(self, "data_read_in_bytes")

    @property
    @pulumi.getter(name="dataWritten")
    def data_written(self) -> Optional[str]:
        return pulumi.get(self, "data_written")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="runDurationInMilliseconds")
    def run_duration_in_milliseconds(self) -> Optional[str]:
        return pulumi.get(self, "run_duration_in_milliseconds")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[str]:
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetEtlRunsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetResourceUsageEmInstanceResult(dict):
    def __init__(__self__, *,
                 em_discoverer_url: Optional[str] = None,
                 em_host: Optional[str] = None,
                 em_id: Optional[str] = None,
                 targets_count: Optional[int] = None):
        if em_discoverer_url is not None:
            pulumi.set(__self__, "em_discoverer_url", em_discoverer_url)
        if em_host is not None:
            pulumi.set(__self__, "em_host", em_host)
        if em_id is not None:
            pulumi.set(__self__, "em_id", em_id)
        if targets_count is not None:
            pulumi.set(__self__, "targets_count", targets_count)

    @property
    @pulumi.getter(name="emDiscovererUrl")
    def em_discoverer_url(self) -> Optional[str]:
        return pulumi.get(self, "em_discoverer_url")

    @property
    @pulumi.getter(name="emHost")
    def em_host(self) -> Optional[str]:
        return pulumi.get(self, "em_host")

    @property
    @pulumi.getter(name="emId")
    def em_id(self) -> Optional[str]:
        return pulumi.get(self, "em_id")

    @property
    @pulumi.getter(name="targetsCount")
    def targets_count(self) -> Optional[int]:
        return pulumi.get(self, "targets_count")


