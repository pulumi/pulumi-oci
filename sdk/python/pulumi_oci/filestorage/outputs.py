# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ExportExportOption',
    'FileSystemSourceDetail',
    'FilesystemSnapshotPolicySchedule',
    'MountTargetKerberos',
    'MountTargetLdapIdmap',
    'OutboundConnectorEndpoint',
    'GetExportSetsExportSetResult',
    'GetExportSetsFilterResult',
    'GetExportsExportResult',
    'GetExportsExportExportOptionResult',
    'GetExportsFilterResult',
    'GetFileSystemsFileSystemResult',
    'GetFileSystemsFileSystemSourceDetailResult',
    'GetFileSystemsFilterResult',
    'GetFilesystemSnapshotPoliciesFilesystemSnapshotPolicyResult',
    'GetFilesystemSnapshotPoliciesFilesystemSnapshotPolicyScheduleResult',
    'GetFilesystemSnapshotPoliciesFilterResult',
    'GetFilesystemSnapshotPolicyScheduleResult',
    'GetMountTargetsFilterResult',
    'GetMountTargetsMountTargetResult',
    'GetMountTargetsMountTargetKerberoResult',
    'GetMountTargetsMountTargetLdapIdmapResult',
    'GetOutboundConnectorEndpointResult',
    'GetOutboundConnectorsFilterResult',
    'GetOutboundConnectorsOutboundConnectorResult',
    'GetOutboundConnectorsOutboundConnectorEndpointResult',
    'GetReplicationTargetsFilterResult',
    'GetReplicationTargetsReplicationTargetResult',
    'GetReplicationsFilterResult',
    'GetReplicationsReplicationResult',
    'GetSnapshotsFilterResult',
    'GetSnapshotsSnapshotResult',
]

@pulumi.output_type
class ExportExportOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedAuths":
            suggest = "allowed_auths"
        elif key == "anonymousGid":
            suggest = "anonymous_gid"
        elif key == "anonymousUid":
            suggest = "anonymous_uid"
        elif key == "identitySquash":
            suggest = "identity_squash"
        elif key == "isAnonymousAccessAllowed":
            suggest = "is_anonymous_access_allowed"
        elif key == "requirePrivilegedSourcePort":
            suggest = "require_privileged_source_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExportExportOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExportExportOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExportExportOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source: str,
                 access: Optional[str] = None,
                 allowed_auths: Optional[Sequence[str]] = None,
                 anonymous_gid: Optional[str] = None,
                 anonymous_uid: Optional[str] = None,
                 identity_squash: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 require_privileged_source_port: Optional[bool] = None):
        pulumi.set(__self__, "source", source)
        if access is not None:
            pulumi.set(__self__, "access", access)
        if allowed_auths is not None:
            pulumi.set(__self__, "allowed_auths", allowed_auths)
        if anonymous_gid is not None:
            pulumi.set(__self__, "anonymous_gid", anonymous_gid)
        if anonymous_uid is not None:
            pulumi.set(__self__, "anonymous_uid", anonymous_uid)
        if identity_squash is not None:
            pulumi.set(__self__, "identity_squash", identity_squash)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if require_privileged_source_port is not None:
            pulumi.set(__self__, "require_privileged_source_port", require_privileged_source_port)

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="allowedAuths")
    def allowed_auths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_auths")

    @property
    @pulumi.getter(name="anonymousGid")
    def anonymous_gid(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_gid")

    @property
    @pulumi.getter(name="anonymousUid")
    def anonymous_uid(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_uid")

    @property
    @pulumi.getter(name="identitySquash")
    def identity_squash(self) -> Optional[str]:
        return pulumi.get(self, "identity_squash")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter(name="requirePrivilegedSourcePort")
    def require_privileged_source_port(self) -> Optional[bool]:
        return pulumi.get(self, "require_privileged_source_port")


@pulumi.output_type
class FileSystemSourceDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parentFileSystemId":
            suggest = "parent_file_system_id"
        elif key == "sourceSnapshotId":
            suggest = "source_snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileSystemSourceDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileSystemSourceDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileSystemSourceDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parent_file_system_id: Optional[str] = None,
                 source_snapshot_id: Optional[str] = None):
        if parent_file_system_id is not None:
            pulumi.set(__self__, "parent_file_system_id", parent_file_system_id)
        if source_snapshot_id is not None:
            pulumi.set(__self__, "source_snapshot_id", source_snapshot_id)

    @property
    @pulumi.getter(name="parentFileSystemId")
    def parent_file_system_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_file_system_id")

    @property
    @pulumi.getter(name="sourceSnapshotId")
    def source_snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "source_snapshot_id")


@pulumi.output_type
class FilesystemSnapshotPolicySchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeZone":
            suggest = "time_zone"
        elif key == "dayOfMonth":
            suggest = "day_of_month"
        elif key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "hourOfDay":
            suggest = "hour_of_day"
        elif key == "retentionDurationInSeconds":
            suggest = "retention_duration_in_seconds"
        elif key == "schedulePrefix":
            suggest = "schedule_prefix"
        elif key == "timeScheduleStart":
            suggest = "time_schedule_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FilesystemSnapshotPolicySchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FilesystemSnapshotPolicySchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FilesystemSnapshotPolicySchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: str,
                 time_zone: str,
                 day_of_month: Optional[int] = None,
                 day_of_week: Optional[str] = None,
                 hour_of_day: Optional[int] = None,
                 month: Optional[str] = None,
                 retention_duration_in_seconds: Optional[str] = None,
                 schedule_prefix: Optional[str] = None,
                 time_schedule_start: Optional[str] = None):
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "time_zone", time_zone)
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if hour_of_day is not None:
            pulumi.set(__self__, "hour_of_day", hour_of_day)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if retention_duration_in_seconds is not None:
            pulumi.set(__self__, "retention_duration_in_seconds", retention_duration_in_seconds)
        if schedule_prefix is not None:
            pulumi.set(__self__, "schedule_prefix", schedule_prefix)
        if time_schedule_start is not None:
            pulumi.set(__self__, "time_schedule_start", time_schedule_start)

    @property
    @pulumi.getter
    def period(self) -> str:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> str:
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> Optional[int]:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter(name="retentionDurationInSeconds")
    def retention_duration_in_seconds(self) -> Optional[str]:
        return pulumi.get(self, "retention_duration_in_seconds")

    @property
    @pulumi.getter(name="schedulePrefix")
    def schedule_prefix(self) -> Optional[str]:
        return pulumi.get(self, "schedule_prefix")

    @property
    @pulumi.getter(name="timeScheduleStart")
    def time_schedule_start(self) -> Optional[str]:
        return pulumi.get(self, "time_schedule_start")


@pulumi.output_type
class MountTargetKerberos(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kerberosRealm":
            suggest = "kerberos_realm"
        elif key == "backupKeyTabSecretVersion":
            suggest = "backup_key_tab_secret_version"
        elif key == "currentKeyTabSecretVersion":
            suggest = "current_key_tab_secret_version"
        elif key == "isKerberosEnabled":
            suggest = "is_kerberos_enabled"
        elif key == "keyTabSecretId":
            suggest = "key_tab_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountTargetKerberos. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountTargetKerberos.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountTargetKerberos.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kerberos_realm: str,
                 backup_key_tab_secret_version: Optional[int] = None,
                 current_key_tab_secret_version: Optional[int] = None,
                 is_kerberos_enabled: Optional[bool] = None,
                 key_tab_secret_id: Optional[str] = None):
        pulumi.set(__self__, "kerberos_realm", kerberos_realm)
        if backup_key_tab_secret_version is not None:
            pulumi.set(__self__, "backup_key_tab_secret_version", backup_key_tab_secret_version)
        if current_key_tab_secret_version is not None:
            pulumi.set(__self__, "current_key_tab_secret_version", current_key_tab_secret_version)
        if is_kerberos_enabled is not None:
            pulumi.set(__self__, "is_kerberos_enabled", is_kerberos_enabled)
        if key_tab_secret_id is not None:
            pulumi.set(__self__, "key_tab_secret_id", key_tab_secret_id)

    @property
    @pulumi.getter(name="kerberosRealm")
    def kerberos_realm(self) -> str:
        return pulumi.get(self, "kerberos_realm")

    @property
    @pulumi.getter(name="backupKeyTabSecretVersion")
    def backup_key_tab_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "backup_key_tab_secret_version")

    @property
    @pulumi.getter(name="currentKeyTabSecretVersion")
    def current_key_tab_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "current_key_tab_secret_version")

    @property
    @pulumi.getter(name="isKerberosEnabled")
    def is_kerberos_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_kerberos_enabled")

    @property
    @pulumi.getter(name="keyTabSecretId")
    def key_tab_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "key_tab_secret_id")


@pulumi.output_type
class MountTargetLdapIdmap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheLifetimeSeconds":
            suggest = "cache_lifetime_seconds"
        elif key == "cacheRefreshIntervalSeconds":
            suggest = "cache_refresh_interval_seconds"
        elif key == "groupSearchBase":
            suggest = "group_search_base"
        elif key == "negativeCacheLifetimeSeconds":
            suggest = "negative_cache_lifetime_seconds"
        elif key == "outboundConnector1id":
            suggest = "outbound_connector1id"
        elif key == "outboundConnector2id":
            suggest = "outbound_connector2id"
        elif key == "schemaType":
            suggest = "schema_type"
        elif key == "userSearchBase":
            suggest = "user_search_base"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MountTargetLdapIdmap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MountTargetLdapIdmap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MountTargetLdapIdmap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_lifetime_seconds: Optional[int] = None,
                 cache_refresh_interval_seconds: Optional[int] = None,
                 group_search_base: Optional[str] = None,
                 negative_cache_lifetime_seconds: Optional[int] = None,
                 outbound_connector1id: Optional[str] = None,
                 outbound_connector2id: Optional[str] = None,
                 schema_type: Optional[str] = None,
                 user_search_base: Optional[str] = None):
        if cache_lifetime_seconds is not None:
            pulumi.set(__self__, "cache_lifetime_seconds", cache_lifetime_seconds)
        if cache_refresh_interval_seconds is not None:
            pulumi.set(__self__, "cache_refresh_interval_seconds", cache_refresh_interval_seconds)
        if group_search_base is not None:
            pulumi.set(__self__, "group_search_base", group_search_base)
        if negative_cache_lifetime_seconds is not None:
            pulumi.set(__self__, "negative_cache_lifetime_seconds", negative_cache_lifetime_seconds)
        if outbound_connector1id is not None:
            pulumi.set(__self__, "outbound_connector1id", outbound_connector1id)
        if outbound_connector2id is not None:
            pulumi.set(__self__, "outbound_connector2id", outbound_connector2id)
        if schema_type is not None:
            pulumi.set(__self__, "schema_type", schema_type)
        if user_search_base is not None:
            pulumi.set(__self__, "user_search_base", user_search_base)

    @property
    @pulumi.getter(name="cacheLifetimeSeconds")
    def cache_lifetime_seconds(self) -> Optional[int]:
        return pulumi.get(self, "cache_lifetime_seconds")

    @property
    @pulumi.getter(name="cacheRefreshIntervalSeconds")
    def cache_refresh_interval_seconds(self) -> Optional[int]:
        return pulumi.get(self, "cache_refresh_interval_seconds")

    @property
    @pulumi.getter(name="groupSearchBase")
    def group_search_base(self) -> Optional[str]:
        return pulumi.get(self, "group_search_base")

    @property
    @pulumi.getter(name="negativeCacheLifetimeSeconds")
    def negative_cache_lifetime_seconds(self) -> Optional[int]:
        return pulumi.get(self, "negative_cache_lifetime_seconds")

    @property
    @pulumi.getter(name="outboundConnector1id")
    def outbound_connector1id(self) -> Optional[str]:
        return pulumi.get(self, "outbound_connector1id")

    @property
    @pulumi.getter(name="outboundConnector2id")
    def outbound_connector2id(self) -> Optional[str]:
        return pulumi.get(self, "outbound_connector2id")

    @property
    @pulumi.getter(name="schemaType")
    def schema_type(self) -> Optional[str]:
        return pulumi.get(self, "schema_type")

    @property
    @pulumi.getter(name="userSearchBase")
    def user_search_base(self) -> Optional[str]:
        return pulumi.get(self, "user_search_base")


@pulumi.output_type
class OutboundConnectorEndpoint(dict):
    def __init__(__self__, *,
                 hostname: str,
                 port: str):
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetExportSetsExportSetResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None,
                 max_fs_stat_bytes: Optional[str] = None,
                 max_fs_stat_files: Optional[str] = None,
                 mount_target_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None,
                 vcn_id: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if max_fs_stat_bytes is not None:
            pulumi.set(__self__, "max_fs_stat_bytes", max_fs_stat_bytes)
        if max_fs_stat_files is not None:
            pulumi.set(__self__, "max_fs_stat_files", max_fs_stat_files)
        if mount_target_id is not None:
            pulumi.set(__self__, "mount_target_id", mount_target_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if vcn_id is not None:
            pulumi.set(__self__, "vcn_id", vcn_id)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxFsStatBytes")
    def max_fs_stat_bytes(self) -> Optional[str]:
        return pulumi.get(self, "max_fs_stat_bytes")

    @property
    @pulumi.getter(name="maxFsStatFiles")
    def max_fs_stat_files(self) -> Optional[str]:
        return pulumi.get(self, "max_fs_stat_files")

    @property
    @pulumi.getter(name="mountTargetId")
    def mount_target_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_target_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="vcnId")
    def vcn_id(self) -> Optional[str]:
        return pulumi.get(self, "vcn_id")


@pulumi.output_type
class GetExportSetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetExportsExportResult(dict):
    def __init__(__self__, *,
                 export_options: Optional[Sequence['outputs.GetExportsExportExportOptionResult']] = None,
                 export_set_id: Optional[str] = None,
                 file_system_id: Optional[str] = None,
                 id: Optional[str] = None,
                 is_idmap_groups_for_sys_auth: Optional[bool] = None,
                 path: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if export_options is not None:
            pulumi.set(__self__, "export_options", export_options)
        if export_set_id is not None:
            pulumi.set(__self__, "export_set_id", export_set_id)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_idmap_groups_for_sys_auth is not None:
            pulumi.set(__self__, "is_idmap_groups_for_sys_auth", is_idmap_groups_for_sys_auth)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="exportOptions")
    def export_options(self) -> Optional[Sequence['outputs.GetExportsExportExportOptionResult']]:
        return pulumi.get(self, "export_options")

    @property
    @pulumi.getter(name="exportSetId")
    def export_set_id(self) -> Optional[str]:
        return pulumi.get(self, "export_set_id")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[str]:
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIdmapGroupsForSysAuth")
    def is_idmap_groups_for_sys_auth(self) -> Optional[bool]:
        return pulumi.get(self, "is_idmap_groups_for_sys_auth")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetExportsExportExportOptionResult(dict):
    def __init__(__self__, *,
                 access: Optional[str] = None,
                 allowed_auths: Optional[Sequence[str]] = None,
                 anonymous_gid: Optional[str] = None,
                 anonymous_uid: Optional[str] = None,
                 identity_squash: Optional[str] = None,
                 is_anonymous_access_allowed: Optional[bool] = None,
                 require_privileged_source_port: Optional[bool] = None,
                 source: Optional[str] = None):
        if access is not None:
            pulumi.set(__self__, "access", access)
        if allowed_auths is not None:
            pulumi.set(__self__, "allowed_auths", allowed_auths)
        if anonymous_gid is not None:
            pulumi.set(__self__, "anonymous_gid", anonymous_gid)
        if anonymous_uid is not None:
            pulumi.set(__self__, "anonymous_uid", anonymous_uid)
        if identity_squash is not None:
            pulumi.set(__self__, "identity_squash", identity_squash)
        if is_anonymous_access_allowed is not None:
            pulumi.set(__self__, "is_anonymous_access_allowed", is_anonymous_access_allowed)
        if require_privileged_source_port is not None:
            pulumi.set(__self__, "require_privileged_source_port", require_privileged_source_port)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def access(self) -> Optional[str]:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="allowedAuths")
    def allowed_auths(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_auths")

    @property
    @pulumi.getter(name="anonymousGid")
    def anonymous_gid(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_gid")

    @property
    @pulumi.getter(name="anonymousUid")
    def anonymous_uid(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_uid")

    @property
    @pulumi.getter(name="identitySquash")
    def identity_squash(self) -> Optional[str]:
        return pulumi.get(self, "identity_squash")

    @property
    @pulumi.getter(name="isAnonymousAccessAllowed")
    def is_anonymous_access_allowed(self) -> Optional[bool]:
        return pulumi.get(self, "is_anonymous_access_allowed")

    @property
    @pulumi.getter(name="requirePrivilegedSourcePort")
    def require_privileged_source_port(self) -> Optional[bool]:
        return pulumi.get(self, "require_privileged_source_port")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")


@pulumi.output_type
class GetExportsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFileSystemsFileSystemResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 filesystem_snapshot_policy_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_clone_parent: Optional[bool] = None,
                 is_hydrated: Optional[bool] = None,
                 is_targetable: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 metered_bytes: Optional[str] = None,
                 replication_target_id: Optional[str] = None,
                 source_details: Optional[Sequence['outputs.GetFileSystemsFileSystemSourceDetailResult']] = None,
                 source_snapshot_id: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if filesystem_snapshot_policy_id is not None:
            pulumi.set(__self__, "filesystem_snapshot_policy_id", filesystem_snapshot_policy_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_clone_parent is not None:
            pulumi.set(__self__, "is_clone_parent", is_clone_parent)
        if is_hydrated is not None:
            pulumi.set(__self__, "is_hydrated", is_hydrated)
        if is_targetable is not None:
            pulumi.set(__self__, "is_targetable", is_targetable)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if metered_bytes is not None:
            pulumi.set(__self__, "metered_bytes", metered_bytes)
        if replication_target_id is not None:
            pulumi.set(__self__, "replication_target_id", replication_target_id)
        if source_details is not None:
            pulumi.set(__self__, "source_details", source_details)
        if source_snapshot_id is not None:
            pulumi.set(__self__, "source_snapshot_id", source_snapshot_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="filesystemSnapshotPolicyId")
    def filesystem_snapshot_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "filesystem_snapshot_policy_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCloneParent")
    def is_clone_parent(self) -> Optional[bool]:
        return pulumi.get(self, "is_clone_parent")

    @property
    @pulumi.getter(name="isHydrated")
    def is_hydrated(self) -> Optional[bool]:
        return pulumi.get(self, "is_hydrated")

    @property
    @pulumi.getter(name="isTargetable")
    def is_targetable(self) -> Optional[bool]:
        return pulumi.get(self, "is_targetable")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="meteredBytes")
    def metered_bytes(self) -> Optional[str]:
        return pulumi.get(self, "metered_bytes")

    @property
    @pulumi.getter(name="replicationTargetId")
    def replication_target_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_target_id")

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[Sequence['outputs.GetFileSystemsFileSystemSourceDetailResult']]:
        return pulumi.get(self, "source_details")

    @property
    @pulumi.getter(name="sourceSnapshotId")
    def source_snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "source_snapshot_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetFileSystemsFileSystemSourceDetailResult(dict):
    def __init__(__self__, *,
                 parent_file_system_id: Optional[str] = None,
                 source_snapshot_id: Optional[str] = None):
        if parent_file_system_id is not None:
            pulumi.set(__self__, "parent_file_system_id", parent_file_system_id)
        if source_snapshot_id is not None:
            pulumi.set(__self__, "source_snapshot_id", source_snapshot_id)

    @property
    @pulumi.getter(name="parentFileSystemId")
    def parent_file_system_id(self) -> Optional[str]:
        return pulumi.get(self, "parent_file_system_id")

    @property
    @pulumi.getter(name="sourceSnapshotId")
    def source_snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "source_snapshot_id")


@pulumi.output_type
class GetFileSystemsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFilesystemSnapshotPoliciesFilesystemSnapshotPolicyResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 policy_prefix: Optional[str] = None,
                 schedules: Optional[Sequence['outputs.GetFilesystemSnapshotPoliciesFilesystemSnapshotPolicyScheduleResult']] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if policy_prefix is not None:
            pulumi.set(__self__, "policy_prefix", policy_prefix)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="policyPrefix")
    def policy_prefix(self) -> Optional[str]:
        return pulumi.get(self, "policy_prefix")

    @property
    @pulumi.getter
    def schedules(self) -> Optional[Sequence['outputs.GetFilesystemSnapshotPoliciesFilesystemSnapshotPolicyScheduleResult']]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetFilesystemSnapshotPoliciesFilesystemSnapshotPolicyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 day_of_week: Optional[str] = None,
                 hour_of_day: Optional[int] = None,
                 month: Optional[str] = None,
                 period: Optional[str] = None,
                 retention_duration_in_seconds: Optional[str] = None,
                 schedule_prefix: Optional[str] = None,
                 time_schedule_start: Optional[str] = None,
                 time_zone: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if hour_of_day is not None:
            pulumi.set(__self__, "hour_of_day", hour_of_day)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if retention_duration_in_seconds is not None:
            pulumi.set(__self__, "retention_duration_in_seconds", retention_duration_in_seconds)
        if schedule_prefix is not None:
            pulumi.set(__self__, "schedule_prefix", schedule_prefix)
        if time_schedule_start is not None:
            pulumi.set(__self__, "time_schedule_start", time_schedule_start)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> Optional[int]:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter
    def period(self) -> Optional[str]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="retentionDurationInSeconds")
    def retention_duration_in_seconds(self) -> Optional[str]:
        return pulumi.get(self, "retention_duration_in_seconds")

    @property
    @pulumi.getter(name="schedulePrefix")
    def schedule_prefix(self) -> Optional[str]:
        return pulumi.get(self, "schedule_prefix")

    @property
    @pulumi.getter(name="timeScheduleStart")
    def time_schedule_start(self) -> Optional[str]:
        return pulumi.get(self, "time_schedule_start")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetFilesystemSnapshotPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFilesystemSnapshotPolicyScheduleResult(dict):
    def __init__(__self__, *,
                 day_of_month: Optional[int] = None,
                 day_of_week: Optional[str] = None,
                 hour_of_day: Optional[int] = None,
                 month: Optional[str] = None,
                 period: Optional[str] = None,
                 retention_duration_in_seconds: Optional[str] = None,
                 schedule_prefix: Optional[str] = None,
                 time_schedule_start: Optional[str] = None,
                 time_zone: Optional[str] = None):
        if day_of_month is not None:
            pulumi.set(__self__, "day_of_month", day_of_month)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if hour_of_day is not None:
            pulumi.set(__self__, "hour_of_day", hour_of_day)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if retention_duration_in_seconds is not None:
            pulumi.set(__self__, "retention_duration_in_seconds", retention_duration_in_seconds)
        if schedule_prefix is not None:
            pulumi.set(__self__, "schedule_prefix", schedule_prefix)
        if time_schedule_start is not None:
            pulumi.set(__self__, "time_schedule_start", time_schedule_start)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[int]:
        return pulumi.get(self, "day_of_month")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        return pulumi.get(self, "day_of_week")

    @property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> Optional[int]:
        return pulumi.get(self, "hour_of_day")

    @property
    @pulumi.getter
    def month(self) -> Optional[str]:
        return pulumi.get(self, "month")

    @property
    @pulumi.getter
    def period(self) -> Optional[str]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="retentionDurationInSeconds")
    def retention_duration_in_seconds(self) -> Optional[str]:
        return pulumi.get(self, "retention_duration_in_seconds")

    @property
    @pulumi.getter(name="schedulePrefix")
    def schedule_prefix(self) -> Optional[str]:
        return pulumi.get(self, "schedule_prefix")

    @property
    @pulumi.getter(name="timeScheduleStart")
    def time_schedule_start(self) -> Optional[str]:
        return pulumi.get(self, "time_schedule_start")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetMountTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMountTargetsMountTargetResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 export_set_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 hostname_label: Optional[str] = None,
                 id: Optional[str] = None,
                 idmap_type: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 kerberos: Optional[Sequence['outputs.GetMountTargetsMountTargetKerberoResult']] = None,
                 ldap_idmaps: Optional[Sequence['outputs.GetMountTargetsMountTargetLdapIdmapResult']] = None,
                 lifecycle_details: Optional[str] = None,
                 nsg_ids: Optional[Sequence[str]] = None,
                 private_ip_ids: Optional[Sequence[str]] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if export_set_id is not None:
            pulumi.set(__self__, "export_set_id", export_set_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if hostname_label is not None:
            pulumi.set(__self__, "hostname_label", hostname_label)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idmap_type is not None:
            pulumi.set(__self__, "idmap_type", idmap_type)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if kerberos is not None:
            pulumi.set(__self__, "kerberos", kerberos)
        if ldap_idmaps is not None:
            pulumi.set(__self__, "ldap_idmaps", ldap_idmaps)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if nsg_ids is not None:
            pulumi.set(__self__, "nsg_ids", nsg_ids)
        if private_ip_ids is not None:
            pulumi.set(__self__, "private_ip_ids", private_ip_ids)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="exportSetId")
    def export_set_id(self) -> Optional[str]:
        return pulumi.get(self, "export_set_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="hostnameLabel")
    def hostname_label(self) -> Optional[str]:
        return pulumi.get(self, "hostname_label")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idmapType")
    def idmap_type(self) -> Optional[str]:
        return pulumi.get(self, "idmap_type")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def kerberos(self) -> Optional[Sequence['outputs.GetMountTargetsMountTargetKerberoResult']]:
        return pulumi.get(self, "kerberos")

    @property
    @pulumi.getter(name="ldapIdmaps")
    def ldap_idmaps(self) -> Optional[Sequence['outputs.GetMountTargetsMountTargetLdapIdmapResult']]:
        return pulumi.get(self, "ldap_idmaps")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="nsgIds")
    def nsg_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nsg_ids")

    @property
    @pulumi.getter(name="privateIpIds")
    def private_ip_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_ip_ids")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetMountTargetsMountTargetKerberoResult(dict):
    def __init__(__self__, *,
                 backup_key_tab_secret_version: Optional[int] = None,
                 current_key_tab_secret_version: Optional[int] = None,
                 is_kerberos_enabled: Optional[bool] = None,
                 kerberos_realm: Optional[str] = None,
                 key_tab_secret_id: Optional[str] = None):
        if backup_key_tab_secret_version is not None:
            pulumi.set(__self__, "backup_key_tab_secret_version", backup_key_tab_secret_version)
        if current_key_tab_secret_version is not None:
            pulumi.set(__self__, "current_key_tab_secret_version", current_key_tab_secret_version)
        if is_kerberos_enabled is not None:
            pulumi.set(__self__, "is_kerberos_enabled", is_kerberos_enabled)
        if kerberos_realm is not None:
            pulumi.set(__self__, "kerberos_realm", kerberos_realm)
        if key_tab_secret_id is not None:
            pulumi.set(__self__, "key_tab_secret_id", key_tab_secret_id)

    @property
    @pulumi.getter(name="backupKeyTabSecretVersion")
    def backup_key_tab_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "backup_key_tab_secret_version")

    @property
    @pulumi.getter(name="currentKeyTabSecretVersion")
    def current_key_tab_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "current_key_tab_secret_version")

    @property
    @pulumi.getter(name="isKerberosEnabled")
    def is_kerberos_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_kerberos_enabled")

    @property
    @pulumi.getter(name="kerberosRealm")
    def kerberos_realm(self) -> Optional[str]:
        return pulumi.get(self, "kerberos_realm")

    @property
    @pulumi.getter(name="keyTabSecretId")
    def key_tab_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "key_tab_secret_id")


@pulumi.output_type
class GetMountTargetsMountTargetLdapIdmapResult(dict):
    def __init__(__self__, *,
                 cache_lifetime_seconds: Optional[int] = None,
                 cache_refresh_interval_seconds: Optional[int] = None,
                 group_search_base: Optional[str] = None,
                 negative_cache_lifetime_seconds: Optional[int] = None,
                 outbound_connector1id: Optional[str] = None,
                 outbound_connector2id: Optional[str] = None,
                 schema_type: Optional[str] = None,
                 user_search_base: Optional[str] = None):
        if cache_lifetime_seconds is not None:
            pulumi.set(__self__, "cache_lifetime_seconds", cache_lifetime_seconds)
        if cache_refresh_interval_seconds is not None:
            pulumi.set(__self__, "cache_refresh_interval_seconds", cache_refresh_interval_seconds)
        if group_search_base is not None:
            pulumi.set(__self__, "group_search_base", group_search_base)
        if negative_cache_lifetime_seconds is not None:
            pulumi.set(__self__, "negative_cache_lifetime_seconds", negative_cache_lifetime_seconds)
        if outbound_connector1id is not None:
            pulumi.set(__self__, "outbound_connector1id", outbound_connector1id)
        if outbound_connector2id is not None:
            pulumi.set(__self__, "outbound_connector2id", outbound_connector2id)
        if schema_type is not None:
            pulumi.set(__self__, "schema_type", schema_type)
        if user_search_base is not None:
            pulumi.set(__self__, "user_search_base", user_search_base)

    @property
    @pulumi.getter(name="cacheLifetimeSeconds")
    def cache_lifetime_seconds(self) -> Optional[int]:
        return pulumi.get(self, "cache_lifetime_seconds")

    @property
    @pulumi.getter(name="cacheRefreshIntervalSeconds")
    def cache_refresh_interval_seconds(self) -> Optional[int]:
        return pulumi.get(self, "cache_refresh_interval_seconds")

    @property
    @pulumi.getter(name="groupSearchBase")
    def group_search_base(self) -> Optional[str]:
        return pulumi.get(self, "group_search_base")

    @property
    @pulumi.getter(name="negativeCacheLifetimeSeconds")
    def negative_cache_lifetime_seconds(self) -> Optional[int]:
        return pulumi.get(self, "negative_cache_lifetime_seconds")

    @property
    @pulumi.getter(name="outboundConnector1id")
    def outbound_connector1id(self) -> Optional[str]:
        return pulumi.get(self, "outbound_connector1id")

    @property
    @pulumi.getter(name="outboundConnector2id")
    def outbound_connector2id(self) -> Optional[str]:
        return pulumi.get(self, "outbound_connector2id")

    @property
    @pulumi.getter(name="schemaType")
    def schema_type(self) -> Optional[str]:
        return pulumi.get(self, "schema_type")

    @property
    @pulumi.getter(name="userSearchBase")
    def user_search_base(self) -> Optional[str]:
        return pulumi.get(self, "user_search_base")


@pulumi.output_type
class GetOutboundConnectorEndpointResult(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 port: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetOutboundConnectorsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOutboundConnectorsOutboundConnectorResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 bind_distinguished_name: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 connector_type: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 display_name: Optional[str] = None,
                 endpoints: Optional[Sequence['outputs.GetOutboundConnectorsOutboundConnectorEndpointResult']] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 password_secret_id: Optional[str] = None,
                 password_secret_version: Optional[int] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if bind_distinguished_name is not None:
            pulumi.set(__self__, "bind_distinguished_name", bind_distinguished_name)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if connector_type is not None:
            pulumi.set(__self__, "connector_type", connector_type)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if password_secret_id is not None:
            pulumi.set(__self__, "password_secret_id", password_secret_id)
        if password_secret_version is not None:
            pulumi.set(__self__, "password_secret_version", password_secret_version)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="bindDistinguishedName")
    def bind_distinguished_name(self) -> Optional[str]:
        return pulumi.get(self, "bind_distinguished_name")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> Optional[str]:
        return pulumi.get(self, "connector_type")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.GetOutboundConnectorsOutboundConnectorEndpointResult']]:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="passwordSecretId")
    def password_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "password_secret_id")

    @property
    @pulumi.getter(name="passwordSecretVersion")
    def password_secret_version(self) -> Optional[int]:
        return pulumi.get(self, "password_secret_version")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetOutboundConnectorsOutboundConnectorEndpointResult(dict):
    def __init__(__self__, *,
                 hostname: Optional[str] = None,
                 port: Optional[str] = None):
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetReplicationTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetReplicationTargetsReplicationTargetResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 delta_progress: Optional[str] = None,
                 delta_status: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 last_snapshot_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 recovery_point_time: Optional[str] = None,
                 replication_id: Optional[str] = None,
                 source_id: Optional[str] = None,
                 state: Optional[str] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if delta_progress is not None:
            pulumi.set(__self__, "delta_progress", delta_progress)
        if delta_status is not None:
            pulumi.set(__self__, "delta_status", delta_status)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_snapshot_id is not None:
            pulumi.set(__self__, "last_snapshot_id", last_snapshot_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if recovery_point_time is not None:
            pulumi.set(__self__, "recovery_point_time", recovery_point_time)
        if replication_id is not None:
            pulumi.set(__self__, "replication_id", replication_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deltaProgress")
    def delta_progress(self) -> Optional[str]:
        return pulumi.get(self, "delta_progress")

    @property
    @pulumi.getter(name="deltaStatus")
    def delta_status(self) -> Optional[str]:
        return pulumi.get(self, "delta_status")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastSnapshotId")
    def last_snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "last_snapshot_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="recoveryPointTime")
    def recovery_point_time(self) -> Optional[str]:
        return pulumi.get(self, "recovery_point_time")

    @property
    @pulumi.getter(name="replicationId")
    def replication_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_id")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetReplicationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetReplicationsReplicationResult(dict):
    def __init__(__self__, *,
                 availability_domain: Optional[str] = None,
                 compartment_id: Optional[str] = None,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 delta_progress: Optional[str] = None,
                 delta_status: Optional[str] = None,
                 display_name: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 last_snapshot_id: Optional[str] = None,
                 lifecycle_details: Optional[str] = None,
                 recovery_point_time: Optional[str] = None,
                 replication_interval: Optional[str] = None,
                 replication_target_id: Optional[str] = None,
                 source_id: Optional[str] = None,
                 state: Optional[str] = None,
                 target_id: Optional[str] = None,
                 time_created: Optional[str] = None):
        if availability_domain is not None:
            pulumi.set(__self__, "availability_domain", availability_domain)
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if delta_progress is not None:
            pulumi.set(__self__, "delta_progress", delta_progress)
        if delta_status is not None:
            pulumi.set(__self__, "delta_status", delta_status)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_snapshot_id is not None:
            pulumi.set(__self__, "last_snapshot_id", last_snapshot_id)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if recovery_point_time is not None:
            pulumi.set(__self__, "recovery_point_time", recovery_point_time)
        if replication_interval is not None:
            pulumi.set(__self__, "replication_interval", replication_interval)
        if replication_target_id is not None:
            pulumi.set(__self__, "replication_target_id", replication_target_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> Optional[str]:
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="deltaProgress")
    def delta_progress(self) -> Optional[str]:
        return pulumi.get(self, "delta_progress")

    @property
    @pulumi.getter(name="deltaStatus")
    def delta_status(self) -> Optional[str]:
        return pulumi.get(self, "delta_status")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastSnapshotId")
    def last_snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "last_snapshot_id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="recoveryPointTime")
    def recovery_point_time(self) -> Optional[str]:
        return pulumi.get(self, "recovery_point_time")

    @property
    @pulumi.getter(name="replicationInterval")
    def replication_interval(self) -> Optional[str]:
        return pulumi.get(self, "replication_interval")

    @property
    @pulumi.getter(name="replicationTargetId")
    def replication_target_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_target_id")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[str]:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


@pulumi.output_type
class GetSnapshotsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 regex: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 defined_tags: Optional[Mapping[str, Any]] = None,
                 expiration_time: Optional[str] = None,
                 file_system_id: Optional[str] = None,
                 filesystem_snapshot_policy_id: Optional[str] = None,
                 freeform_tags: Optional[Mapping[str, Any]] = None,
                 id: Optional[str] = None,
                 is_clone_source: Optional[bool] = None,
                 lifecycle_details: Optional[str] = None,
                 name: Optional[str] = None,
                 provenance_id: Optional[str] = None,
                 snapshot_time: Optional[str] = None,
                 snapshot_type: Optional[str] = None,
                 state: Optional[str] = None,
                 time_created: Optional[str] = None):
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if expiration_time is not None:
            pulumi.set(__self__, "expiration_time", expiration_time)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if filesystem_snapshot_policy_id is not None:
            pulumi.set(__self__, "filesystem_snapshot_policy_id", filesystem_snapshot_policy_id)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_clone_source is not None:
            pulumi.set(__self__, "is_clone_source", is_clone_source)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provenance_id is not None:
            pulumi.set(__self__, "provenance_id", provenance_id)
        if snapshot_time is not None:
            pulumi.set(__self__, "snapshot_time", snapshot_time)
        if snapshot_type is not None:
            pulumi.set(__self__, "snapshot_type", snapshot_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="expirationTime")
    def expiration_time(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[str]:
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="filesystemSnapshotPolicyId")
    def filesystem_snapshot_policy_id(self) -> Optional[str]:
        return pulumi.get(self, "filesystem_snapshot_policy_id")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isCloneSource")
    def is_clone_source(self) -> Optional[bool]:
        return pulumi.get(self, "is_clone_source")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[str]:
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provenanceId")
    def provenance_id(self) -> Optional[str]:
        return pulumi.get(self, "provenance_id")

    @property
    @pulumi.getter(name="snapshotTime")
    def snapshot_time(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_time")

    @property
    @pulumi.getter(name="snapshotType")
    def snapshot_type(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[str]:
        return pulumi.get(self, "time_created")


