# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPlatformConfigurationsResult',
    'AwaitableGetPlatformConfigurationsResult',
    'get_platform_configurations',
    'get_platform_configurations_output',
]

@pulumi.output_type
class GetPlatformConfigurationsResult:
    """
    A collection of values returned by getPlatformConfigurations.
    """
    def __init__(__self__, compartment_id=None, config_category=None, display_name=None, filters=None, id=None, platform_configuration_collections=None, state=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if config_category and not isinstance(config_category, str):
            raise TypeError("Expected argument 'config_category' to be a str")
        pulumi.set(__self__, "config_category", config_category)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if platform_configuration_collections and not isinstance(platform_configuration_collections, list):
            raise TypeError("Expected argument 'platform_configuration_collections' to be a list")
        pulumi.set(__self__, "platform_configuration_collections", platform_configuration_collections)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[str]:
        """
        Tenancy OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="configCategory")
    def config_category(self) -> Optional[str]:
        """
        Category of configuration
        """
        return pulumi.get(self, "config_category")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPlatformConfigurationsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="platformConfigurationCollections")
    def platform_configuration_collections(self) -> Sequence['outputs.GetPlatformConfigurationsPlatformConfigurationCollectionResult']:
        """
        The list of platform_configuration_collection.
        """
        return pulumi.get(self, "platform_configuration_collections")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the PlatformConfiguration.
        """
        return pulumi.get(self, "state")


class AwaitableGetPlatformConfigurationsResult(GetPlatformConfigurationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPlatformConfigurationsResult(
            compartment_id=self.compartment_id,
            config_category=self.config_category,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            platform_configuration_collections=self.platform_configuration_collections,
            state=self.state)


def get_platform_configurations(compartment_id: Optional[str] = None,
                                config_category: Optional[str] = None,
                                display_name: Optional[str] = None,
                                filters: Optional[Sequence[Union['GetPlatformConfigurationsFilterArgs', 'GetPlatformConfigurationsFilterArgsDict']]] = None,
                                id: Optional[str] = None,
                                state: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPlatformConfigurationsResult:
    """
    This data source provides the list of Platform Configurations in Oracle Cloud Infrastructure Fleet Apps Management service.

    Returns a list of PlatformConfiguration for Tenancy.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_platform_configurations = oci.FleetAppsManagement.get_platform_configurations(compartment_id=compartment_id,
        config_category=platform_configuration_config_category,
        display_name=platform_configuration_display_name,
        id=platform_configuration_id,
        state=platform_configuration_state)
    ```


    :param str compartment_id: The ID of the compartment in which to list resources.
    :param str config_category: Config Category
    :param str display_name: A filter to return only resources that match the entire display name given.
    :param str id: unique PlatformConfiguration identifier
    :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['configCategory'] = config_category
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['id'] = id
    __args__['state'] = state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('oci:FleetAppsManagement/getPlatformConfigurations:getPlatformConfigurations', __args__, opts=opts, typ=GetPlatformConfigurationsResult).value

    return AwaitableGetPlatformConfigurationsResult(
        compartment_id=pulumi.get(__ret__, 'compartment_id'),
        config_category=pulumi.get(__ret__, 'config_category'),
        display_name=pulumi.get(__ret__, 'display_name'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        platform_configuration_collections=pulumi.get(__ret__, 'platform_configuration_collections'),
        state=pulumi.get(__ret__, 'state'))
def get_platform_configurations_output(compartment_id: Optional[pulumi.Input[Optional[str]]] = None,
                                       config_category: Optional[pulumi.Input[Optional[str]]] = None,
                                       display_name: Optional[pulumi.Input[Optional[str]]] = None,
                                       filters: Optional[pulumi.Input[Optional[Sequence[Union['GetPlatformConfigurationsFilterArgs', 'GetPlatformConfigurationsFilterArgsDict']]]]] = None,
                                       id: Optional[pulumi.Input[Optional[str]]] = None,
                                       state: Optional[pulumi.Input[Optional[str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPlatformConfigurationsResult]:
    """
    This data source provides the list of Platform Configurations in Oracle Cloud Infrastructure Fleet Apps Management service.

    Returns a list of PlatformConfiguration for Tenancy.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_platform_configurations = oci.FleetAppsManagement.get_platform_configurations(compartment_id=compartment_id,
        config_category=platform_configuration_config_category,
        display_name=platform_configuration_display_name,
        id=platform_configuration_id,
        state=platform_configuration_state)
    ```


    :param str compartment_id: The ID of the compartment in which to list resources.
    :param str config_category: Config Category
    :param str display_name: A filter to return only resources that match the entire display name given.
    :param str id: unique PlatformConfiguration identifier
    :param str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['configCategory'] = config_category
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['id'] = id
    __args__['state'] = state
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('oci:FleetAppsManagement/getPlatformConfigurations:getPlatformConfigurations', __args__, opts=opts, typ=GetPlatformConfigurationsResult)
    return __ret__.apply(lambda __response__: GetPlatformConfigurationsResult(
        compartment_id=pulumi.get(__response__, 'compartment_id'),
        config_category=pulumi.get(__response__, 'config_category'),
        display_name=pulumi.get(__response__, 'display_name'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        platform_configuration_collections=pulumi.get(__response__, 'platform_configuration_collections'),
        state=pulumi.get(__response__, 'state')))
