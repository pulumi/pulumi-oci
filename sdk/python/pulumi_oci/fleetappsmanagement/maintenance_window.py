# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['MaintenanceWindowArgs', 'MaintenanceWindow']

@pulumi.input_type
class MaintenanceWindowArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 duration: pulumi.Input[str],
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_outage: Optional[pulumi.Input[bool]] = None,
                 is_recurring: Optional[pulumi.Input[bool]] = None,
                 maintenance_window_type: Optional[pulumi.Input[str]] = None,
                 recurrences: Optional[pulumi.Input[str]] = None,
                 task_initiation_cutoff: Optional[pulumi.Input[int]] = None,
                 time_schedule_start: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MaintenanceWindow resource.
        :param pulumi.Input[str] compartment_id: Tenancy OCID
        :param pulumi.Input[str] duration: (Updatable) Duration if schedule type is Custom
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param pulumi.Input[str] display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[bool] is_outage: (Updatable) Does the maintenenace window cause outage?
        :param pulumi.Input[bool] is_recurring: (Updatable) Is this is a recurring maintenance window
        :param pulumi.Input[str] maintenance_window_type: (Updatable) Type of maintenenace window
        :param pulumi.Input[str] recurrences: (Updatable) Recurrence rule specification if recurring
        :param pulumi.Input[int] task_initiation_cutoff: (Updatable) Task initiation cutoff
        :param pulumi.Input[str] time_schedule_start: (Updatable) Start time of schedule
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "duration", duration)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_outage is not None:
            pulumi.set(__self__, "is_outage", is_outage)
        if is_recurring is not None:
            pulumi.set(__self__, "is_recurring", is_recurring)
        if maintenance_window_type is not None:
            pulumi.set(__self__, "maintenance_window_type", maintenance_window_type)
        if recurrences is not None:
            pulumi.set(__self__, "recurrences", recurrences)
        if task_initiation_cutoff is not None:
            pulumi.set(__self__, "task_initiation_cutoff", task_initiation_cutoff)
        if time_schedule_start is not None:
            pulumi.set(__self__, "time_schedule_start", time_schedule_start)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        Tenancy OCID
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        (Updatable) Duration if schedule type is Custom
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isOutage")
    def is_outage(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Does the maintenenace window cause outage?
        """
        return pulumi.get(self, "is_outage")

    @is_outage.setter
    def is_outage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_outage", value)

    @property
    @pulumi.getter(name="isRecurring")
    def is_recurring(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Is this is a recurring maintenance window
        """
        return pulumi.get(self, "is_recurring")

    @is_recurring.setter
    def is_recurring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_recurring", value)

    @property
    @pulumi.getter(name="maintenanceWindowType")
    def maintenance_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of maintenenace window
        """
        return pulumi.get(self, "maintenance_window_type")

    @maintenance_window_type.setter
    def maintenance_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_type", value)

    @property
    @pulumi.getter
    def recurrences(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Recurrence rule specification if recurring
        """
        return pulumi.get(self, "recurrences")

    @recurrences.setter
    def recurrences(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recurrences", value)

    @property
    @pulumi.getter(name="taskInitiationCutoff")
    def task_initiation_cutoff(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Task initiation cutoff
        """
        return pulumi.get(self, "task_initiation_cutoff")

    @task_initiation_cutoff.setter
    def task_initiation_cutoff(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_initiation_cutoff", value)

    @property
    @pulumi.getter(name="timeScheduleStart")
    def time_schedule_start(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Start time of schedule


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "time_schedule_start")

    @time_schedule_start.setter
    def time_schedule_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_schedule_start", value)


@pulumi.input_type
class _MaintenanceWindowState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_outage: Optional[pulumi.Input[bool]] = None,
                 is_recurring: Optional[pulumi.Input[bool]] = None,
                 lifecycle_details: Optional[pulumi.Input[str]] = None,
                 maintenance_window_type: Optional[pulumi.Input[str]] = None,
                 recurrences: Optional[pulumi.Input[str]] = None,
                 resource_region: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_initiation_cutoff: Optional[pulumi.Input[int]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_schedule_start: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MaintenanceWindow resources.
        :param pulumi.Input[str] compartment_id: Tenancy OCID
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param pulumi.Input[str] display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param pulumi.Input[str] duration: (Updatable) Duration if schedule type is Custom
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[bool] is_outage: (Updatable) Does the maintenenace window cause outage?
        :param pulumi.Input[bool] is_recurring: (Updatable) Is this is a recurring maintenance window
        :param pulumi.Input[str] lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param pulumi.Input[str] maintenance_window_type: (Updatable) Type of maintenenace window
        :param pulumi.Input[str] recurrences: (Updatable) Recurrence rule specification if recurring
        :param pulumi.Input[str] resource_region: Associated region
        :param pulumi.Input[str] state: The current state of the MaintenanceWindow.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[int] task_initiation_cutoff: (Updatable) Task initiation cutoff
        :param pulumi.Input[str] time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param pulumi.Input[str] time_schedule_start: (Updatable) Start time of schedule
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if defined_tags is not None:
            pulumi.set(__self__, "defined_tags", defined_tags)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if freeform_tags is not None:
            pulumi.set(__self__, "freeform_tags", freeform_tags)
        if is_outage is not None:
            pulumi.set(__self__, "is_outage", is_outage)
        if is_recurring is not None:
            pulumi.set(__self__, "is_recurring", is_recurring)
        if lifecycle_details is not None:
            pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        if maintenance_window_type is not None:
            pulumi.set(__self__, "maintenance_window_type", maintenance_window_type)
        if recurrences is not None:
            pulumi.set(__self__, "recurrences", recurrences)
        if resource_region is not None:
            pulumi.set(__self__, "resource_region", resource_region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if task_initiation_cutoff is not None:
            pulumi.set(__self__, "task_initiation_cutoff", task_initiation_cutoff)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_schedule_start is not None:
            pulumi.set(__self__, "time_schedule_start", time_schedule_start)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tenancy OCID
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @defined_tags.setter
    def defined_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "defined_tags", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Duration if schedule type is Custom
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @freeform_tags.setter
    def freeform_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "freeform_tags", value)

    @property
    @pulumi.getter(name="isOutage")
    def is_outage(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Does the maintenenace window cause outage?
        """
        return pulumi.get(self, "is_outage")

    @is_outage.setter
    def is_outage(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_outage", value)

    @property
    @pulumi.getter(name="isRecurring")
    def is_recurring(self) -> Optional[pulumi.Input[bool]]:
        """
        (Updatable) Is this is a recurring maintenance window
        """
        return pulumi.get(self, "is_recurring")

    @is_recurring.setter
    def is_recurring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_recurring", value)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> Optional[pulumi.Input[str]]:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @lifecycle_details.setter
    def lifecycle_details(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lifecycle_details", value)

    @property
    @pulumi.getter(name="maintenanceWindowType")
    def maintenance_window_type(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Type of maintenenace window
        """
        return pulumi.get(self, "maintenance_window_type")

    @maintenance_window_type.setter
    def maintenance_window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_type", value)

    @property
    @pulumi.getter
    def recurrences(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Recurrence rule specification if recurring
        """
        return pulumi.get(self, "recurrences")

    @recurrences.setter
    def recurrences(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recurrences", value)

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> Optional[pulumi.Input[str]]:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @resource_region.setter
    def resource_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_region", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the MaintenanceWindow.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="taskInitiationCutoff")
    def task_initiation_cutoff(self) -> Optional[pulumi.Input[int]]:
        """
        (Updatable) Task initiation cutoff
        """
        return pulumi.get(self, "task_initiation_cutoff")

    @task_initiation_cutoff.setter
    def task_initiation_cutoff(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_initiation_cutoff", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeScheduleStart")
    def time_schedule_start(self) -> Optional[pulumi.Input[str]]:
        """
        (Updatable) Start time of schedule


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "time_schedule_start")

    @time_schedule_start.setter
    def time_schedule_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_schedule_start", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)


class MaintenanceWindow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_outage: Optional[pulumi.Input[bool]] = None,
                 is_recurring: Optional[pulumi.Input[bool]] = None,
                 maintenance_window_type: Optional[pulumi.Input[str]] = None,
                 recurrences: Optional[pulumi.Input[str]] = None,
                 task_initiation_cutoff: Optional[pulumi.Input[int]] = None,
                 time_schedule_start: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource provides the Maintenance Window resource in Oracle Cloud Infrastructure Fleet Apps Management service.

        Creates a new MaintenanceWindow.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_maintenance_window = oci.fleet_apps_management.MaintenanceWindow("test_maintenance_window",
            compartment_id=compartment_id,
            duration=maintenance_window_duration,
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=maintenance_window_description,
            display_name=maintenance_window_display_name,
            freeform_tags={
                "bar-key": "value",
            },
            is_outage=maintenance_window_is_outage,
            is_recurring=maintenance_window_is_recurring,
            maintenance_window_type=maintenance_window_maintenance_window_type,
            recurrences=maintenance_window_recurrences,
            task_initiation_cutoff=maintenance_window_task_initiation_cutoff,
            time_schedule_start=maintenance_window_time_schedule_start)
        ```

        ## Import

        MaintenanceWindows can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:FleetAppsManagement/maintenanceWindow:MaintenanceWindow test_maintenance_window "id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: Tenancy OCID
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param pulumi.Input[str] display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param pulumi.Input[str] duration: (Updatable) Duration if schedule type is Custom
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[bool] is_outage: (Updatable) Does the maintenenace window cause outage?
        :param pulumi.Input[bool] is_recurring: (Updatable) Is this is a recurring maintenance window
        :param pulumi.Input[str] maintenance_window_type: (Updatable) Type of maintenenace window
        :param pulumi.Input[str] recurrences: (Updatable) Recurrence rule specification if recurring
        :param pulumi.Input[int] task_initiation_cutoff: (Updatable) Task initiation cutoff
        :param pulumi.Input[str] time_schedule_start: (Updatable) Start time of schedule
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MaintenanceWindowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Maintenance Window resource in Oracle Cloud Infrastructure Fleet Apps Management service.

        Creates a new MaintenanceWindow.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_maintenance_window = oci.fleet_apps_management.MaintenanceWindow("test_maintenance_window",
            compartment_id=compartment_id,
            duration=maintenance_window_duration,
            defined_tags={
                "foo-namespace.bar-key": "value",
            },
            description=maintenance_window_description,
            display_name=maintenance_window_display_name,
            freeform_tags={
                "bar-key": "value",
            },
            is_outage=maintenance_window_is_outage,
            is_recurring=maintenance_window_is_recurring,
            maintenance_window_type=maintenance_window_maintenance_window_type,
            recurrences=maintenance_window_recurrences,
            task_initiation_cutoff=maintenance_window_task_initiation_cutoff,
            time_schedule_start=maintenance_window_time_schedule_start)
        ```

        ## Import

        MaintenanceWindows can be imported using the `id`, e.g.

        ```sh
        $ pulumi import oci:FleetAppsManagement/maintenanceWindow:MaintenanceWindow test_maintenance_window "id"
        ```

        :param str resource_name: The name of the resource.
        :param MaintenanceWindowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MaintenanceWindowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 is_outage: Optional[pulumi.Input[bool]] = None,
                 is_recurring: Optional[pulumi.Input[bool]] = None,
                 maintenance_window_type: Optional[pulumi.Input[str]] = None,
                 recurrences: Optional[pulumi.Input[str]] = None,
                 task_initiation_cutoff: Optional[pulumi.Input[int]] = None,
                 time_schedule_start: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MaintenanceWindowArgs.__new__(MaintenanceWindowArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["defined_tags"] = defined_tags
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            if duration is None and not opts.urn:
                raise TypeError("Missing required property 'duration'")
            __props__.__dict__["duration"] = duration
            __props__.__dict__["freeform_tags"] = freeform_tags
            __props__.__dict__["is_outage"] = is_outage
            __props__.__dict__["is_recurring"] = is_recurring
            __props__.__dict__["maintenance_window_type"] = maintenance_window_type
            __props__.__dict__["recurrences"] = recurrences
            __props__.__dict__["task_initiation_cutoff"] = task_initiation_cutoff
            __props__.__dict__["time_schedule_start"] = time_schedule_start
            __props__.__dict__["lifecycle_details"] = None
            __props__.__dict__["resource_region"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
        super(MaintenanceWindow, __self__).__init__(
            'oci:FleetAppsManagement/maintenanceWindow:MaintenanceWindow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            defined_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            duration: Optional[pulumi.Input[str]] = None,
            freeform_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            is_outage: Optional[pulumi.Input[bool]] = None,
            is_recurring: Optional[pulumi.Input[bool]] = None,
            lifecycle_details: Optional[pulumi.Input[str]] = None,
            maintenance_window_type: Optional[pulumi.Input[str]] = None,
            recurrences: Optional[pulumi.Input[str]] = None,
            resource_region: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            task_initiation_cutoff: Optional[pulumi.Input[int]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_schedule_start: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None) -> 'MaintenanceWindow':
        """
        Get an existing MaintenanceWindow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: Tenancy OCID
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] defined_tags: (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param pulumi.Input[str] description: (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param pulumi.Input[str] display_name: (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        :param pulumi.Input[str] duration: (Updatable) Duration if schedule type is Custom
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] freeform_tags: (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param pulumi.Input[bool] is_outage: (Updatable) Does the maintenenace window cause outage?
        :param pulumi.Input[bool] is_recurring: (Updatable) Is this is a recurring maintenance window
        :param pulumi.Input[str] lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param pulumi.Input[str] maintenance_window_type: (Updatable) Type of maintenenace window
        :param pulumi.Input[str] recurrences: (Updatable) Recurrence rule specification if recurring
        :param pulumi.Input[str] resource_region: Associated region
        :param pulumi.Input[str] state: The current state of the MaintenanceWindow.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[int] task_initiation_cutoff: (Updatable) Task initiation cutoff
        :param pulumi.Input[str] time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param pulumi.Input[str] time_schedule_start: (Updatable) Start time of schedule
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MaintenanceWindowState.__new__(_MaintenanceWindowState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["defined_tags"] = defined_tags
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["duration"] = duration
        __props__.__dict__["freeform_tags"] = freeform_tags
        __props__.__dict__["is_outage"] = is_outage
        __props__.__dict__["is_recurring"] = is_recurring
        __props__.__dict__["lifecycle_details"] = lifecycle_details
        __props__.__dict__["maintenance_window_type"] = maintenance_window_type
        __props__.__dict__["recurrences"] = recurrences
        __props__.__dict__["resource_region"] = resource_region
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["task_initiation_cutoff"] = task_initiation_cutoff
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_schedule_start"] = time_schedule_start
        __props__.__dict__["time_updated"] = time_updated
        return MaintenanceWindow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        Tenancy OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> pulumi.Output[Mapping[str, str]]:
        """
        (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        (Updatable) A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.  Example: `My new resource`
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Output[str]:
        """
        (Updatable) Duration if schedule type is Custom
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> pulumi.Output[Mapping[str, str]]:
        """
        (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter(name="isOutage")
    def is_outage(self) -> pulumi.Output[bool]:
        """
        (Updatable) Does the maintenenace window cause outage?
        """
        return pulumi.get(self, "is_outage")

    @property
    @pulumi.getter(name="isRecurring")
    def is_recurring(self) -> pulumi.Output[bool]:
        """
        (Updatable) Is this is a recurring maintenance window
        """
        return pulumi.get(self, "is_recurring")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> pulumi.Output[str]:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="maintenanceWindowType")
    def maintenance_window_type(self) -> pulumi.Output[str]:
        """
        (Updatable) Type of maintenenace window
        """
        return pulumi.get(self, "maintenance_window_type")

    @property
    @pulumi.getter
    def recurrences(self) -> pulumi.Output[str]:
        """
        (Updatable) Recurrence rule specification if recurring
        """
        return pulumi.get(self, "recurrences")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> pulumi.Output[str]:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the MaintenanceWindow.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Mapping[str, str]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="taskInitiationCutoff")
    def task_initiation_cutoff(self) -> pulumi.Output[int]:
        """
        (Updatable) Task initiation cutoff
        """
        return pulumi.get(self, "task_initiation_cutoff")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeScheduleStart")
    def time_schedule_start(self) -> pulumi.Output[str]:
        """
        (Updatable) Start time of schedule


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "time_schedule_start")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

