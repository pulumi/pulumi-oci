# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['OnboardingArgs', 'Onboarding']

@pulumi.input_type
class OnboardingArgs:
    def __init__(__self__, *,
                 compartment_id: pulumi.Input[str],
                 is_cost_tracking_tag_enabled: Optional[pulumi.Input[bool]] = None,
                 is_fams_tag_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Onboarding resource.
        :param pulumi.Input[str] compartment_id: Tenancy OCID
        :param pulumi.Input[bool] is_cost_tracking_tag_enabled: A value determining if cost tracking tag is enabled or not
        :param pulumi.Input[bool] is_fams_tag_enabled: A value determining FAMS tag is enabled or not
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        if is_cost_tracking_tag_enabled is not None:
            pulumi.set(__self__, "is_cost_tracking_tag_enabled", is_cost_tracking_tag_enabled)
        if is_fams_tag_enabled is not None:
            pulumi.set(__self__, "is_fams_tag_enabled", is_fams_tag_enabled)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Input[str]:
        """
        Tenancy OCID
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="isCostTrackingTagEnabled")
    def is_cost_tracking_tag_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A value determining if cost tracking tag is enabled or not
        """
        return pulumi.get(self, "is_cost_tracking_tag_enabled")

    @is_cost_tracking_tag_enabled.setter
    def is_cost_tracking_tag_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cost_tracking_tag_enabled", value)

    @property
    @pulumi.getter(name="isFamsTagEnabled")
    def is_fams_tag_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A value determining FAMS tag is enabled or not


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "is_fams_tag_enabled")

    @is_fams_tag_enabled.setter
    def is_fams_tag_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_fams_tag_enabled", value)


@pulumi.input_type
class _OnboardingState:
    def __init__(__self__, *,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 is_cost_tracking_tag_enabled: Optional[pulumi.Input[bool]] = None,
                 is_fams_tag_enabled: Optional[pulumi.Input[bool]] = None,
                 resource_region: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 time_created: Optional[pulumi.Input[str]] = None,
                 time_updated: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Onboarding resources.
        :param pulumi.Input[str] compartment_id: Tenancy OCID
        :param pulumi.Input[bool] is_cost_tracking_tag_enabled: A value determining if cost tracking tag is enabled or not
        :param pulumi.Input[bool] is_fams_tag_enabled: A value determining FAMS tag is enabled or not
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] resource_region: Associated region
        :param pulumi.Input[str] state: The current state of the Onboarding.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[str] time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param pulumi.Input[str] time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param pulumi.Input[str] version: Version of FAMS the tenant is onboarded to.
        """
        if compartment_id is not None:
            pulumi.set(__self__, "compartment_id", compartment_id)
        if is_cost_tracking_tag_enabled is not None:
            pulumi.set(__self__, "is_cost_tracking_tag_enabled", is_cost_tracking_tag_enabled)
        if is_fams_tag_enabled is not None:
            pulumi.set(__self__, "is_fams_tag_enabled", is_fams_tag_enabled)
        if resource_region is not None:
            pulumi.set(__self__, "resource_region", resource_region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if system_tags is not None:
            pulumi.set(__self__, "system_tags", system_tags)
        if time_created is not None:
            pulumi.set(__self__, "time_created", time_created)
        if time_updated is not None:
            pulumi.set(__self__, "time_updated", time_updated)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tenancy OCID
        """
        return pulumi.get(self, "compartment_id")

    @compartment_id.setter
    def compartment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compartment_id", value)

    @property
    @pulumi.getter(name="isCostTrackingTagEnabled")
    def is_cost_tracking_tag_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A value determining if cost tracking tag is enabled or not
        """
        return pulumi.get(self, "is_cost_tracking_tag_enabled")

    @is_cost_tracking_tag_enabled.setter
    def is_cost_tracking_tag_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_cost_tracking_tag_enabled", value)

    @property
    @pulumi.getter(name="isFamsTagEnabled")
    def is_fams_tag_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A value determining FAMS tag is enabled or not


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "is_fams_tag_enabled")

    @is_fams_tag_enabled.setter
    def is_fams_tag_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_fams_tag_enabled", value)

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> Optional[pulumi.Input[str]]:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @resource_region.setter
    def resource_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_region", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the Onboarding.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @system_tags.setter
    def system_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "system_tags", value)

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> Optional[pulumi.Input[str]]:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @time_created.setter
    def time_created(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_created", value)

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> Optional[pulumi.Input[str]]:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @time_updated.setter
    def time_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_updated", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of FAMS the tenant is onboarded to.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class Onboarding(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 is_cost_tracking_tag_enabled: Optional[pulumi.Input[bool]] = None,
                 is_fams_tag_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        This resource provides the Onboarding resource in Oracle Cloud Infrastructure Fleet Apps Management service.

        Onboard a tenant to Fleet Application Management Service

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_onboarding = oci.fleet_apps_management.Onboarding("test_onboarding",
            compartment_id=compartment_id,
            is_cost_tracking_tag_enabled=onboarding_is_cost_tracking_tag_enabled,
            is_fams_tag_enabled=onboarding_is_fams_tag_enabled)
        ```

        ## Import

        Import is not supported for this resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: Tenancy OCID
        :param pulumi.Input[bool] is_cost_tracking_tag_enabled: A value determining if cost tracking tag is enabled or not
        :param pulumi.Input[bool] is_fams_tag_enabled: A value determining FAMS tag is enabled or not
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OnboardingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource provides the Onboarding resource in Oracle Cloud Infrastructure Fleet Apps Management service.

        Onboard a tenant to Fleet Application Management Service

        ## Example Usage

        ```python
        import pulumi
        import pulumi_oci as oci

        test_onboarding = oci.fleet_apps_management.Onboarding("test_onboarding",
            compartment_id=compartment_id,
            is_cost_tracking_tag_enabled=onboarding_is_cost_tracking_tag_enabled,
            is_fams_tag_enabled=onboarding_is_fams_tag_enabled)
        ```

        ## Import

        Import is not supported for this resource.

        :param str resource_name: The name of the resource.
        :param OnboardingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OnboardingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compartment_id: Optional[pulumi.Input[str]] = None,
                 is_cost_tracking_tag_enabled: Optional[pulumi.Input[bool]] = None,
                 is_fams_tag_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OnboardingArgs.__new__(OnboardingArgs)

            if compartment_id is None and not opts.urn:
                raise TypeError("Missing required property 'compartment_id'")
            __props__.__dict__["compartment_id"] = compartment_id
            __props__.__dict__["is_cost_tracking_tag_enabled"] = is_cost_tracking_tag_enabled
            __props__.__dict__["is_fams_tag_enabled"] = is_fams_tag_enabled
            __props__.__dict__["resource_region"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["system_tags"] = None
            __props__.__dict__["time_created"] = None
            __props__.__dict__["time_updated"] = None
            __props__.__dict__["version"] = None
        super(Onboarding, __self__).__init__(
            'oci:FleetAppsManagement/onboarding:Onboarding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compartment_id: Optional[pulumi.Input[str]] = None,
            is_cost_tracking_tag_enabled: Optional[pulumi.Input[bool]] = None,
            is_fams_tag_enabled: Optional[pulumi.Input[bool]] = None,
            resource_region: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            system_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            time_created: Optional[pulumi.Input[str]] = None,
            time_updated: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'Onboarding':
        """
        Get an existing Onboarding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compartment_id: Tenancy OCID
        :param pulumi.Input[bool] is_cost_tracking_tag_enabled: A value determining if cost tracking tag is enabled or not
        :param pulumi.Input[bool] is_fams_tag_enabled: A value determining FAMS tag is enabled or not
               
               
               ** IMPORTANT **
               Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        :param pulumi.Input[str] resource_region: Associated region
        :param pulumi.Input[str] state: The current state of the Onboarding.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param pulumi.Input[str] time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param pulumi.Input[str] time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param pulumi.Input[str] version: Version of FAMS the tenant is onboarded to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OnboardingState.__new__(_OnboardingState)

        __props__.__dict__["compartment_id"] = compartment_id
        __props__.__dict__["is_cost_tracking_tag_enabled"] = is_cost_tracking_tag_enabled
        __props__.__dict__["is_fams_tag_enabled"] = is_fams_tag_enabled
        __props__.__dict__["resource_region"] = resource_region
        __props__.__dict__["state"] = state
        __props__.__dict__["system_tags"] = system_tags
        __props__.__dict__["time_created"] = time_created
        __props__.__dict__["time_updated"] = time_updated
        __props__.__dict__["version"] = version
        return Onboarding(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> pulumi.Output[str]:
        """
        Tenancy OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="isCostTrackingTagEnabled")
    def is_cost_tracking_tag_enabled(self) -> pulumi.Output[bool]:
        """
        A value determining if cost tracking tag is enabled or not
        """
        return pulumi.get(self, "is_cost_tracking_tag_enabled")

    @property
    @pulumi.getter(name="isFamsTagEnabled")
    def is_fams_tag_enabled(self) -> pulumi.Output[bool]:
        """
        A value determining FAMS tag is enabled or not


        ** IMPORTANT **
        Any change to a property that does not support update will force the destruction and recreation of the resource with the new property values
        """
        return pulumi.get(self, "is_fams_tag_enabled")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> pulumi.Output[str]:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the Onboarding.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> pulumi.Output[Mapping[str, str]]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> pulumi.Output[str]:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> pulumi.Output[str]:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Version of FAMS the tenant is onboarded to.
        """
        return pulumi.get(self, "version")

