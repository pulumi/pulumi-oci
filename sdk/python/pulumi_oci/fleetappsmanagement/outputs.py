# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAnnouncementsAnnouncementCollectionResult',
    'GetAnnouncementsAnnouncementCollectionItemResult',
    'GetAnnouncementsFilterResult',
    'GetCompliancePoliciesCompliancePolicyCollectionResult',
    'GetCompliancePoliciesCompliancePolicyCollectionItemResult',
    'GetCompliancePoliciesFilterResult',
    'GetComplianceRecordCountsComplianceRecordAggregationCollectionResult',
    'GetComplianceRecordCountsComplianceRecordAggregationCollectionItemResult',
    'GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionResult',
    'GetComplianceRecordCountsFilterResult',
    'GetFleetComplianceReportResourceResult',
    'GetFleetComplianceReportResourceProductResult',
    'GetFleetComplianceReportResourceProductTargetResult',
    'GetFleetComplianceReportResourceProductTargetInstalledPatchResult',
    'GetFleetComplianceReportResourceProductTargetRecommendedPatchResult',
    'GetFleetProductsFilterResult',
    'GetFleetProductsFleetProductCollectionResult',
    'GetFleetProductsFleetProductCollectionItemResult',
    'GetFleetProductsFleetProductCollectionItemResourceResult',
    'GetFleetTargetsFilterResult',
    'GetFleetTargetsFleetTargetCollectionResult',
    'GetFleetTargetsFleetTargetCollectionItemResult',
    'GetFleetTargetsFleetTargetCollectionItemResourceResult',
    'GetInventoryResourcesFilterResult',
    'GetInventoryResourcesInventoryResourceCollectionResult',
    'GetInventoryResourcesInventoryResourceCollectionItemResult',
    'GetManagedEntityCountsFilterResult',
    'GetManagedEntityCountsManagedEntityAggregationCollectionResult',
    'GetManagedEntityCountsManagedEntityAggregationCollectionItemResult',
    'GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionResult',
    'GetOnboardingPoliciesFilterResult',
    'GetOnboardingPoliciesOnboardingPolicyCollectionResult',
    'GetOnboardingPoliciesOnboardingPolicyCollectionItemResult',
    'GetPropertiesFilterResult',
    'GetPropertiesPropertyCollectionResult',
    'GetPropertiesPropertyCollectionItemResult',
    'GetSchedulerJobCountsFilterResult',
    'GetSchedulerJobCountsSchedulerJobAggregationCollectionResult',
    'GetSchedulerJobCountsSchedulerJobAggregationCollectionItemResult',
    'GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionResult',
    'GetSchedulerJobJobActivityResourcesFilterResult',
    'GetSchedulerJobJobActivityResourcesResourceCollectionResult',
    'GetSchedulerJobJobActivityResourcesResourceCollectionItemResult',
    'GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetResult',
    'GetSchedulerJobJobActivityStepsFilterResult',
    'GetSchedulerJobJobActivityStepsStepCollectionResult',
    'GetSchedulerJobJobActivityStepsStepCollectionItemResult',
]

@pulumi.output_type
class GetAnnouncementsAnnouncementCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetAnnouncementsAnnouncementCollectionItemResult']):
        """
        :param Sequence['GetAnnouncementsAnnouncementCollectionItemArgs'] items: List of AnnouncementSummary items
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAnnouncementsAnnouncementCollectionItemResult']:
        """
        List of AnnouncementSummary items
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetAnnouncementsAnnouncementCollectionItemResult(dict):
    def __init__(__self__, *,
                 announcement_end: builtins.str,
                 announcement_start: builtins.str,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 description: builtins.str,
                 details: builtins.str,
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 resource_region: builtins.str,
                 state: builtins.str,
                 summary: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str,
                 url: builtins.str):
        """
        :param builtins.str announcement_end: Announcement end date
        :param builtins.str announcement_start: Announcement start date.
        :param builtins.str compartment_id: Tenancy OCID
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str description: A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        :param builtins.str details: Announcement Details.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the resource.
        :param builtins.str resource_region: Associated region
        :param builtins.str state: The lifecycle state of the announcement.
        :param builtins.str summary: Summary of the announcement.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str type: Type of announcement.
        :param builtins.str url: URL to the announcement.
        """
        pulumi.set(__self__, "announcement_end", announcement_end)
        pulumi.set(__self__, "announcement_start", announcement_start)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="announcementEnd")
    def announcement_end(self) -> builtins.str:
        """
        Announcement end date
        """
        return pulumi.get(self, "announcement_end")

    @property
    @pulumi.getter(name="announcementStart")
    def announcement_start(self) -> builtins.str:
        """
        Announcement start date.
        """
        return pulumi.get(self, "announcement_start")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Tenancy OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        A user-friendly description. To provide some insight about the resource. Avoid entering confidential information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> builtins.str:
        """
        Announcement Details.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The lifecycle state of the announcement.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def summary(self) -> builtins.str:
        """
        Summary of the announcement.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of announcement.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        URL to the announcement.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetAnnouncementsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetCompliancePoliciesCompliancePolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetCompliancePoliciesCompliancePolicyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetCompliancePoliciesCompliancePolicyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetCompliancePoliciesCompliancePolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 product_id: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: unique CompliancePolicy identifier.
        :param builtins.str lifecycle_details: A message that describes the current state of the CompliancePolicy in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        :param builtins.str product_id: platformConfiguration OCID corresponding to the Product.
        :param builtins.str state: A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The date and time the CompliancePolicy was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        :param builtins.str time_updated: The date and time the CompliancePolicy was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "product_id", product_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        unique CompliancePolicy identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message that describes the current state of the CompliancePolicy in more detail. For example, can be used to provide actionable information for a resource in the Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> builtins.str:
        """
        platformConfiguration OCID corresponding to the Product.
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources that match the given lifecycle state. The state value is case-insensitive.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The date and time the CompliancePolicy was created, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The date and time the CompliancePolicy was updated, in the format defined by [RFC 3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetCompliancePoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetComplianceRecordCountsComplianceRecordAggregationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetComplianceRecordCountsComplianceRecordAggregationCollectionItemResult']):
        """
        :param Sequence['GetComplianceRecordCountsComplianceRecordAggregationCollectionItemArgs'] items: List of ComplianceRecordAggregation objects.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetComplianceRecordCountsComplianceRecordAggregationCollectionItemResult']:
        """
        List of ComplianceRecordAggregation objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetComplianceRecordCountsComplianceRecordAggregationCollectionItemResult(dict):
    def __init__(__self__, *,
                 compliance_record_count_count: builtins.int,
                 dimensions: Sequence['outputs.GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionResult']):
        """
        :param builtins.int compliance_record_count_count: count of ComplianceRecord in a Tenancy.
        :param Sequence['GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionArgs'] dimensions: Aggregated summary information for ComplianceRecord
        """
        pulumi.set(__self__, "compliance_record_count_count", compliance_record_count_count)
        pulumi.set(__self__, "dimensions", dimensions)

    @property
    @pulumi.getter(name="complianceRecordCountCount")
    def compliance_record_count_count(self) -> builtins.int:
        """
        count of ComplianceRecord in a Tenancy.
        """
        return pulumi.get(self, "compliance_record_count_count")

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionResult']:
        """
        Aggregated summary information for ComplianceRecord
        """
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class GetComplianceRecordCountsComplianceRecordAggregationCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 compliance_level: builtins.str,
                 compliance_state: builtins.str):
        """
        :param builtins.str compliance_level: Level at which the compliance is calculated.
        :param builtins.str compliance_state: Last known compliance state.
        """
        pulumi.set(__self__, "compliance_level", compliance_level)
        pulumi.set(__self__, "compliance_state", compliance_state)

    @property
    @pulumi.getter(name="complianceLevel")
    def compliance_level(self) -> builtins.str:
        """
        Level at which the compliance is calculated.
        """
        return pulumi.get(self, "compliance_level")

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        Last known compliance state.
        """
        return pulumi.get(self, "compliance_state")


@pulumi.output_type
class GetComplianceRecordCountsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetComplianceReportResourceResult(dict):
    def __init__(__self__, *,
                 compartment: builtins.str,
                 compliance_state: builtins.str,
                 products: Sequence['outputs.GetFleetComplianceReportResourceProductResult'],
                 resource_id: builtins.str,
                 resource_name: builtins.str,
                 resource_region: builtins.str,
                 resource_type: builtins.str,
                 tenancy_id: builtins.str,
                 tenancy_name: builtins.str):
        """
        :param builtins.str compartment: Compartment the resource belongs to.
        :param builtins.str compliance_state: The last known compliance state of the target.
        :param Sequence['GetFleetComplianceReportResourceProductArgs'] products: Products associated with the Fleet.  Only the products belonging to managed targets will be shown.
        :param builtins.str resource_id: The OCID to identify the resource.
        :param builtins.str resource_name: Display name of the resource.
        :param builtins.str resource_region: The region the resource belongs to.
        :param builtins.str resource_type: Type of the resource.
        :param builtins.str tenancy_id: TenancyId of the resource.
        :param builtins.str tenancy_name: Tenancy the resource belongs to.
        """
        pulumi.set(__self__, "compartment", compartment)
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "products", products)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tenancy_id", tenancy_id)
        pulumi.set(__self__, "tenancy_name", tenancy_name)

    @property
    @pulumi.getter
    def compartment(self) -> builtins.str:
        """
        Compartment the resource belongs to.
        """
        return pulumi.get(self, "compartment")

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        The last known compliance state of the target.
        """
        return pulumi.get(self, "compliance_state")

    @property
    @pulumi.getter
    def products(self) -> Sequence['outputs.GetFleetComplianceReportResourceProductResult']:
        """
        Products associated with the Fleet.  Only the products belonging to managed targets will be shown.
        """
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        The OCID to identify the resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> builtins.str:
        """
        Display name of the resource.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        The region the resource belongs to.
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> builtins.str:
        """
        Type of the resource.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> builtins.str:
        """
        TenancyId of the resource.
        """
        return pulumi.get(self, "tenancy_id")

    @property
    @pulumi.getter(name="tenancyName")
    def tenancy_name(self) -> builtins.str:
        """
        Tenancy the resource belongs to.
        """
        return pulumi.get(self, "tenancy_name")


@pulumi.output_type
class GetFleetComplianceReportResourceProductResult(dict):
    def __init__(__self__, *,
                 product_name: builtins.str,
                 targets: Sequence['outputs.GetFleetComplianceReportResourceProductTargetResult']):
        """
        :param builtins.str product_name: Product Name.
        :param Sequence['GetFleetComplianceReportResourceProductTargetArgs'] targets: Managed Targets associated with the Product.
        """
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> builtins.str:
        """
        Product Name.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetFleetComplianceReportResourceProductTargetResult']:
        """
        Managed Targets associated with the Product.
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetFleetComplianceReportResourceProductTargetResult(dict):
    def __init__(__self__, *,
                 compliance_state: builtins.str,
                 installed_patches: Sequence['outputs.GetFleetComplianceReportResourceProductTargetInstalledPatchResult'],
                 recommended_patches: Sequence['outputs.GetFleetComplianceReportResourceProductTargetRecommendedPatchResult'],
                 target_id: builtins.str,
                 target_name: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str compliance_state: The last known compliance state of the target.
        :param Sequence['GetFleetComplianceReportResourceProductTargetInstalledPatchArgs'] installed_patches: Installed Patches for the Target.
        :param Sequence['GetFleetComplianceReportResourceProductTargetRecommendedPatchArgs'] recommended_patches: Recommended Patches for the Target.
        :param builtins.str target_id: Target Identifier.Can be the target name if a separate ID is not available.
        :param builtins.str target_name: Target Name.
        :param builtins.str version: Current version of the target.
        """
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "installed_patches", installed_patches)
        pulumi.set(__self__, "recommended_patches", recommended_patches)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_name", target_name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        The last known compliance state of the target.
        """
        return pulumi.get(self, "compliance_state")

    @property
    @pulumi.getter(name="installedPatches")
    def installed_patches(self) -> Sequence['outputs.GetFleetComplianceReportResourceProductTargetInstalledPatchResult']:
        """
        Installed Patches for the Target.
        """
        return pulumi.get(self, "installed_patches")

    @property
    @pulumi.getter(name="recommendedPatches")
    def recommended_patches(self) -> Sequence['outputs.GetFleetComplianceReportResourceProductTargetRecommendedPatchResult']:
        """
        Recommended Patches for the Target.
        """
        return pulumi.get(self, "recommended_patches")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> builtins.str:
        """
        Target Identifier.Can be the target name if a separate ID is not available.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> builtins.str:
        """
        Target Name.
        """
        return pulumi.get(self, "target_name")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Current version of the target.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFleetComplianceReportResourceProductTargetInstalledPatchResult(dict):
    def __init__(__self__, *,
                 patch_description: builtins.str,
                 patch_name: builtins.str,
                 patch_type: builtins.str,
                 time_applied: builtins.str,
                 time_released: builtins.str):
        """
        :param builtins.str patch_description: Patch description.
        :param builtins.str patch_name: Patch name.
        :param builtins.str patch_type: Type of patch.
        :param builtins.str time_applied: Time the patch was applied.
        :param builtins.str time_released: The date on which patch was released.
        """
        pulumi.set(__self__, "patch_description", patch_description)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "patch_type", patch_type)
        pulumi.set(__self__, "time_applied", time_applied)
        pulumi.set(__self__, "time_released", time_released)

    @property
    @pulumi.getter(name="patchDescription")
    def patch_description(self) -> builtins.str:
        """
        Patch description.
        """
        return pulumi.get(self, "patch_description")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Patch name.
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> builtins.str:
        """
        Type of patch.
        """
        return pulumi.get(self, "patch_type")

    @property
    @pulumi.getter(name="timeApplied")
    def time_applied(self) -> builtins.str:
        """
        Time the patch was applied.
        """
        return pulumi.get(self, "time_applied")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        The date on which patch was released.
        """
        return pulumi.get(self, "time_released")


@pulumi.output_type
class GetFleetComplianceReportResourceProductTargetRecommendedPatchResult(dict):
    def __init__(__self__, *,
                 patch_description: builtins.str,
                 patch_name: builtins.str,
                 patch_type: builtins.str,
                 time_applied: builtins.str,
                 time_released: builtins.str):
        """
        :param builtins.str patch_description: Patch description.
        :param builtins.str patch_name: Patch name.
        :param builtins.str patch_type: Type of patch.
        :param builtins.str time_applied: Time the patch was applied.
        :param builtins.str time_released: The date on which patch was released.
        """
        pulumi.set(__self__, "patch_description", patch_description)
        pulumi.set(__self__, "patch_name", patch_name)
        pulumi.set(__self__, "patch_type", patch_type)
        pulumi.set(__self__, "time_applied", time_applied)
        pulumi.set(__self__, "time_released", time_released)

    @property
    @pulumi.getter(name="patchDescription")
    def patch_description(self) -> builtins.str:
        """
        Patch description.
        """
        return pulumi.get(self, "patch_description")

    @property
    @pulumi.getter(name="patchName")
    def patch_name(self) -> builtins.str:
        """
        Patch name.
        """
        return pulumi.get(self, "patch_name")

    @property
    @pulumi.getter(name="patchType")
    def patch_type(self) -> builtins.str:
        """
        Type of patch.
        """
        return pulumi.get(self, "patch_type")

    @property
    @pulumi.getter(name="timeApplied")
    def time_applied(self) -> builtins.str:
        """
        Time the patch was applied.
        """
        return pulumi.get(self, "time_applied")

    @property
    @pulumi.getter(name="timeReleased")
    def time_released(self) -> builtins.str:
        """
        The date on which patch was released.
        """
        return pulumi.get(self, "time_released")


@pulumi.output_type
class GetFleetProductsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetProductsFleetProductCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetProductsFleetProductCollectionItemResult']):
        """
        :param Sequence['GetFleetProductsFleetProductCollectionItemArgs'] items: List of fleetProducts.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetProductsFleetProductCollectionItemResult']:
        """
        List of fleetProducts.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetProductsFleetProductCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 display_name: builtins.str,
                 resources: Sequence['outputs.GetFleetProductsFleetProductCollectionItemResourceResult'],
                 system_tags: Mapping[str, builtins.str],
                 target_count: builtins.int):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Sequence['GetFleetProductsFleetProductCollectionItemResourceArgs'] resources: Resource Information for the Target.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.int target_count: Count of the targets associated with the Product.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "target_count", target_count)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFleetProductsFleetProductCollectionItemResourceResult']:
        """
        Resource Information for the Target.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="targetCount")
    def target_count(self) -> builtins.int:
        """
        Count of the targets associated with the Product.
        """
        return pulumi.get(self, "target_count")


@pulumi.output_type
class GetFleetProductsFleetProductCollectionItemResourceResult(dict):
    def __init__(__self__, *,
                 resource_display_name: builtins.str,
                 resource_id: builtins.str):
        """
        :param builtins.str resource_display_name: Resource Display Name.
        :param builtins.str resource_id: Resource Identifier
        """
        pulumi.set(__self__, "resource_display_name", resource_display_name)
        pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceDisplayName")
    def resource_display_name(self) -> builtins.str:
        """
        Resource Display Name.
        """
        return pulumi.get(self, "resource_display_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Identifier
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class GetFleetTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetFleetTargetsFleetTargetCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetFleetTargetsFleetTargetCollectionItemResult']):
        """
        :param Sequence['GetFleetTargetsFleetTargetCollectionItemArgs'] items: List of fleetTargets.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetFleetTargetsFleetTargetCollectionItemResult']:
        """
        List of fleetTargets.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetFleetTargetsFleetTargetCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 compliance_state: builtins.str,
                 display_name: builtins.str,
                 id: builtins.str,
                 is_last_discovery_attempt_successful: builtins.bool,
                 product: builtins.str,
                 resources: Sequence['outputs.GetFleetTargetsFleetTargetCollectionItemResourceResult'],
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_of_last_discovery_attempt: builtins.str,
                 time_of_last_successful_discovery: builtins.str,
                 version: builtins.str):
        """
        :param builtins.str compartment_id: Tenancy OCID
        :param builtins.str compliance_state: The last known compliance state of the target.
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param builtins.str id: The OCID of the resource.
        :param builtins.bool is_last_discovery_attempt_successful: A boolean flag that represents whether the last discovery attempt was successful.
        :param builtins.str product: Product Name.
        :param Sequence['GetFleetTargetsFleetTargetCollectionItemResourceArgs'] resources: Resource Information for the Target.
        :param builtins.str state: The current state of the FleetTarget.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_of_last_discovery_attempt: The time when last discovery was attempted.
        :param builtins.str time_of_last_successful_discovery: The time when the last successful discovery was made.
        :param builtins.str version: Current version of target.
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "compliance_state", compliance_state)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_last_discovery_attempt_successful", is_last_discovery_attempt_successful)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_of_last_discovery_attempt", time_of_last_discovery_attempt)
        pulumi.set(__self__, "time_of_last_successful_discovery", time_of_last_successful_discovery)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        Tenancy OCID
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="complianceState")
    def compliance_state(self) -> builtins.str:
        """
        The last known compliance state of the target.
        """
        return pulumi.get(self, "compliance_state")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isLastDiscoveryAttemptSuccessful")
    def is_last_discovery_attempt_successful(self) -> builtins.bool:
        """
        A boolean flag that represents whether the last discovery attempt was successful.
        """
        return pulumi.get(self, "is_last_discovery_attempt_successful")

    @property
    @pulumi.getter
    def product(self) -> builtins.str:
        """
        Product Name.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetFleetTargetsFleetTargetCollectionItemResourceResult']:
        """
        Resource Information for the Target.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the FleetTarget.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeOfLastDiscoveryAttempt")
    def time_of_last_discovery_attempt(self) -> builtins.str:
        """
        The time when last discovery was attempted.
        """
        return pulumi.get(self, "time_of_last_discovery_attempt")

    @property
    @pulumi.getter(name="timeOfLastSuccessfulDiscovery")
    def time_of_last_successful_discovery(self) -> builtins.str:
        """
        The time when the last successful discovery was made.
        """
        return pulumi.get(self, "time_of_last_successful_discovery")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        Current version of target.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFleetTargetsFleetTargetCollectionItemResourceResult(dict):
    def __init__(__self__, *,
                 resource_display_name: builtins.str,
                 resource_id: builtins.str):
        """
        :param builtins.str resource_display_name: Resource Display Name.
        :param builtins.str resource_id: Resource Identifier
        """
        pulumi.set(__self__, "resource_display_name", resource_display_name)
        pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="resourceDisplayName")
    def resource_display_name(self) -> builtins.str:
        """
        Resource Display Name.
        """
        return pulumi.get(self, "resource_display_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Identifier
        """
        return pulumi.get(self, "resource_id")


@pulumi.output_type
class GetInventoryResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetInventoryResourcesInventoryResourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetInventoryResourcesInventoryResourceCollectionItemResult']):
        """
        :param Sequence['GetInventoryResourcesInventoryResourceCollectionItemArgs'] items: List of InventoryResources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetInventoryResourcesInventoryResourceCollectionItemResult']:
        """
        List of InventoryResources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetInventoryResourcesInventoryResourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 availability_domain: builtins.str,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 resource_compartment_id: builtins.str,
                 resource_region: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 type: builtins.str):
        """
        :param builtins.str availability_domain: Availability Domain of the resource.
        :param builtins.str compartment_id: A filter to return only resources whose base Compartment ID(TenancyId) matches the given base Compartment ID.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: The OCID of the resource.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str resource_compartment_id: A filter to return only resources whose resource Compartment ID matches the given resource Compartment ID.
        :param builtins.str resource_region: Resource Region
        :param builtins.str state: A filter to return only resources their lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str type: Type of the Resource.
        """
        pulumi.set(__self__, "availability_domain", availability_domain)
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "resource_compartment_id", resource_compartment_id)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="availabilityDomain")
    def availability_domain(self) -> builtins.str:
        """
        Availability Domain of the resource.
        """
        return pulumi.get(self, "availability_domain")

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        A filter to return only resources whose base Compartment ID(TenancyId) matches the given base Compartment ID.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The OCID of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceCompartmentId")
    def resource_compartment_id(self) -> builtins.str:
        """
        A filter to return only resources whose resource Compartment ID matches the given resource Compartment ID.
        """
        return pulumi.get(self, "resource_compartment_id")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Resource Region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources their lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the Resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetManagedEntityCountsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetManagedEntityCountsManagedEntityAggregationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetManagedEntityCountsManagedEntityAggregationCollectionItemResult']):
        """
        :param Sequence['GetManagedEntityCountsManagedEntityAggregationCollectionItemArgs'] items: List of ManagedEntityAggregation objects.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetManagedEntityCountsManagedEntityAggregationCollectionItemResult']:
        """
        List of ManagedEntityAggregation objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetManagedEntityCountsManagedEntityAggregationCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionResult'],
                 managed_entity_count_count: builtins.int):
        """
        :param Sequence['GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionArgs'] dimensions: Aggregated summary information for ComplianceRecord
        :param builtins.int managed_entity_count_count: count of Managed Entities in a Tenancy.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "managed_entity_count_count", managed_entity_count_count)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionResult']:
        """
        Aggregated summary information for ComplianceRecord
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="managedEntityCountCount")
    def managed_entity_count_count(self) -> builtins.int:
        """
        count of Managed Entities in a Tenancy.
        """
        return pulumi.get(self, "managed_entity_count_count")


@pulumi.output_type
class GetManagedEntityCountsManagedEntityAggregationCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 entity: builtins.str):
        """
        :param builtins.str entity: Level at which the compliance is calculated.
        """
        pulumi.set(__self__, "entity", entity)

    @property
    @pulumi.getter
    def entity(self) -> builtins.str:
        """
        Level at which the compliance is calculated.
        """
        return pulumi.get(self, "entity")


@pulumi.output_type
class GetOnboardingPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetOnboardingPoliciesOnboardingPolicyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetOnboardingPoliciesOnboardingPolicyCollectionItemResult']):
        """
        :param Sequence['GetOnboardingPoliciesOnboardingPolicyCollectionItemArgs'] items: List of Fleet Application Management Onboard policies.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetOnboardingPoliciesOnboardingPolicyCollectionItemResult']:
        """
        List of Fleet Application Management Onboard policies.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetOnboardingPoliciesOnboardingPolicyCollectionItemResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 statements: Sequence[builtins.str],
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str):
        """
        :param builtins.str id: The unique id of the resource.
        :param Sequence[builtins.str] statements: Policy statements.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "statements", statements)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique id of the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def statements(self) -> Sequence[builtins.str]:
        """
        Policy statements.
        """
        return pulumi.get(self, "statements")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")


@pulumi.output_type
class GetPropertiesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        """
        :param Sequence[builtins.str] values: Values of the property (must be a single value if selection = 'SINGLE_CHOICE').
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        Values of the property (must be a single value if selection = 'SINGLE_CHOICE').
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetPropertiesPropertyCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetPropertiesPropertyCollectionItemResult']):
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetPropertiesPropertyCollectionItemResult']:
        return pulumi.get(self, "items")


@pulumi.output_type
class GetPropertiesPropertyCollectionItemResult(dict):
    def __init__(__self__, *,
                 compartment_id: builtins.str,
                 defined_tags: Mapping[str, builtins.str],
                 display_name: builtins.str,
                 freeform_tags: Mapping[str, builtins.str],
                 id: builtins.str,
                 lifecycle_details: builtins.str,
                 resource_region: builtins.str,
                 scope: builtins.str,
                 selection: builtins.str,
                 state: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 time_created: builtins.str,
                 time_updated: builtins.str,
                 type: builtins.str,
                 value_type: builtins.str,
                 values: Sequence[builtins.str]):
        """
        :param builtins.str compartment_id: The ID of the compartment in which to list resources.
        :param Mapping[str, builtins.str] defined_tags: Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        :param builtins.str display_name: A filter to return only resources that match the entire display name given.
        :param Mapping[str, builtins.str] freeform_tags: Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        :param builtins.str id: A filter to return only resources whose Property identifier matches the given identifier.
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        :param builtins.str resource_region: Associated region
        :param builtins.str scope: A filter to return only resources their scope matches the given scope.
        :param builtins.str selection: Text selection of the property.
        :param builtins.str state: A filter to return only resources whose lifecycleState matches the given lifecycleState.
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str time_created: The time this resource was created. An RFC3339 formatted datetime string.
        :param builtins.str time_updated: The time this resource was last updated. An RFC3339 formatted datetime string.
        :param builtins.str type: The type of the property.
        :param builtins.str value_type: Format of the value.
        :param Sequence[builtins.str] values: Values of the property (must be a single value if selection = 'SINGLE_CHOICE').
        """
        pulumi.set(__self__, "compartment_id", compartment_id)
        pulumi.set(__self__, "defined_tags", defined_tags)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "freeform_tags", freeform_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)
        pulumi.set(__self__, "resource_region", resource_region)
        pulumi.set(__self__, "scope", scope)
        pulumi.set(__self__, "selection", selection)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "time_created", time_created)
        pulumi.set(__self__, "time_updated", time_updated)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value_type", value_type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> builtins.str:
        """
        The ID of the compartment in which to list resources.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="definedTags")
    def defined_tags(self) -> Mapping[str, builtins.str]:
        """
        Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
        """
        return pulumi.get(self, "defined_tags")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        A filter to return only resources that match the entire display name given.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="freeformTags")
    def freeform_tags(self) -> Mapping[str, builtins.str]:
        """
        Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
        """
        return pulumi.get(self, "freeform_tags")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        A filter to return only resources whose Property identifier matches the given identifier.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> builtins.str:
        """
        Associated region
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter
    def scope(self) -> builtins.str:
        """
        A filter to return only resources their scope matches the given scope.
        """
        return pulumi.get(self, "scope")

    @property
    @pulumi.getter
    def selection(self) -> builtins.str:
        """
        Text selection of the property.
        """
        return pulumi.get(self, "selection")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        A filter to return only resources whose lifecycleState matches the given lifecycleState.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="timeCreated")
    def time_created(self) -> builtins.str:
        """
        The time this resource was created. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_created")

    @property
    @pulumi.getter(name="timeUpdated")
    def time_updated(self) -> builtins.str:
        """
        The time this resource was last updated. An RFC3339 formatted datetime string.
        """
        return pulumi.get(self, "time_updated")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the property.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> builtins.str:
        """
        Format of the value.
        """
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        """
        Values of the property (must be a single value if selection = 'SINGLE_CHOICE').
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSchedulerJobCountsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulerJobCountsSchedulerJobAggregationCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSchedulerJobCountsSchedulerJobAggregationCollectionItemResult']):
        """
        :param Sequence['GetSchedulerJobCountsSchedulerJobAggregationCollectionItemArgs'] items: List of SchedulerJobAggregation objects.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSchedulerJobCountsSchedulerJobAggregationCollectionItemResult']:
        """
        List of SchedulerJobAggregation objects.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulerJobCountsSchedulerJobAggregationCollectionItemResult(dict):
    def __init__(__self__, *,
                 dimensions: Sequence['outputs.GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionResult'],
                 scheduler_job_count_count: builtins.int):
        """
        :param Sequence['GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionArgs'] dimensions: Aggregated summary information for a SchedulerJob.
        :param builtins.int scheduler_job_count_count: Count of jobs in a Tenancy.
        """
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "scheduler_job_count_count", scheduler_job_count_count)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionResult']:
        """
        Aggregated summary information for a SchedulerJob.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="schedulerJobCountCount")
    def scheduler_job_count_count(self) -> builtins.int:
        """
        Count of jobs in a Tenancy.
        """
        return pulumi.get(self, "scheduler_job_count_count")


@pulumi.output_type
class GetSchedulerJobCountsSchedulerJobAggregationCollectionItemDimensionResult(dict):
    def __init__(__self__, *,
                 lifecycle_details: builtins.str):
        """
        :param builtins.str lifecycle_details: A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        pulumi.set(__self__, "lifecycle_details", lifecycle_details)

    @property
    @pulumi.getter(name="lifecycleDetails")
    def lifecycle_details(self) -> builtins.str:
        """
        A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
        """
        return pulumi.get(self, "lifecycle_details")


@pulumi.output_type
class GetSchedulerJobJobActivityResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulerJobJobActivityResourcesResourceCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSchedulerJobJobActivityResourcesResourceCollectionItemResult']):
        """
        :param Sequence['GetSchedulerJobJobActivityResourcesResourceCollectionItemArgs'] items: List of Execution Resources.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSchedulerJobJobActivityResourcesResourceCollectionItemResult']:
        """
        List of Execution Resources.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulerJobJobActivityResourcesResourceCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 resource_display_name: builtins.str,
                 resource_id: builtins.str,
                 sequence: builtins.str,
                 status: builtins.str,
                 targets: Sequence['outputs.GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetResult'],
                 time_ended: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.str description: Description of the Execution status. If there are any errors, this can also include a short error message.
        :param builtins.str resource_display_name: Resource Display Name.
        :param builtins.str resource_id: Resource Identifier associated with the Work Request.
        :param builtins.str sequence: Task Order Sequence
        :param builtins.str status: Status of the Job at target Level.
        :param Sequence['GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetArgs'] targets: Targets associated with the resource.
        :param builtins.str time_ended: The time the task ended for the resource. An RFC3339 formatted datetime string
        :param builtins.str time_started: The time the task started for the resource. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "resource_display_name", resource_display_name)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the Execution status. If there are any errors, this can also include a short error message.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="resourceDisplayName")
    def resource_display_name(self) -> builtins.str:
        """
        Resource Display Name.
        """
        return pulumi.get(self, "resource_display_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> builtins.str:
        """
        Resource Identifier associated with the Work Request.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def sequence(self) -> builtins.str:
        """
        Task Order Sequence
        """
        return pulumi.get(self, "sequence")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Status of the Job at target Level.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetResult']:
        """
        Targets associated with the resource.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> builtins.str:
        """
        The time the task ended for the resource. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The time the task started for the resource. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_started")


@pulumi.output_type
class GetSchedulerJobJobActivityResourcesResourceCollectionItemTargetResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 status: builtins.str,
                 target_name: builtins.str):
        """
        :param builtins.str description: Description of the Execution status. If there are any errors, this can also include a short error message.
        :param builtins.str status: Status of the Job at target Level.
        :param builtins.str target_name: Unique target name
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_name", target_name)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the Execution status. If there are any errors, this can also include a short error message.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Status of the Job at target Level.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetName")
    def target_name(self) -> builtins.str:
        """
        Unique target name
        """
        return pulumi.get(self, "target_name")


@pulumi.output_type
class GetSchedulerJobJobActivityStepsFilterResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 values: Sequence[builtins.str],
                 regex: Optional[builtins.bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter
    def regex(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetSchedulerJobJobActivityStepsStepCollectionResult(dict):
    def __init__(__self__, *,
                 items: Sequence['outputs.GetSchedulerJobJobActivityStepsStepCollectionItemResult']):
        """
        :param Sequence['GetSchedulerJobJobActivityStepsStepCollectionItemArgs'] items: List of Execution steps.
        """
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSchedulerJobJobActivityStepsStepCollectionItemResult']:
        """
        List of Execution steps.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetSchedulerJobJobActivityStepsStepCollectionItemResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 is_rollback_task: builtins.bool,
                 sequence: builtins.str,
                 status: builtins.str,
                 step_name: builtins.str,
                 system_tags: Mapping[str, builtins.str],
                 task_record_id: builtins.str,
                 time_ended: builtins.str,
                 time_started: builtins.str):
        """
        :param builtins.str description: Description of the step Execution
        :param builtins.bool is_rollback_task: Is this a rollback task?
        :param builtins.str sequence: Task Order Sequence
        :param builtins.str status: Status of the Task
        :param builtins.str step_name: Unique step name
        :param Mapping[str, builtins.str] system_tags: System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        :param builtins.str task_record_id: The OCID of taskRecord assocaited with the step
        :param builtins.str time_ended: The time the task ended. An RFC3339 formatted datetime string
        :param builtins.str time_started: The time the task started. An RFC3339 formatted datetime string
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_rollback_task", is_rollback_task)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "system_tags", system_tags)
        pulumi.set(__self__, "task_record_id", task_record_id)
        pulumi.set(__self__, "time_ended", time_ended)
        pulumi.set(__self__, "time_started", time_started)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the step Execution
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isRollbackTask")
    def is_rollback_task(self) -> builtins.bool:
        """
        Is this a rollback task?
        """
        return pulumi.get(self, "is_rollback_task")

    @property
    @pulumi.getter
    def sequence(self) -> builtins.str:
        """
        Task Order Sequence
        """
        return pulumi.get(self, "sequence")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Status of the Task
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> builtins.str:
        """
        Unique step name
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="systemTags")
    def system_tags(self) -> Mapping[str, builtins.str]:
        """
        System tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"orcl-cloud.free-tier-retained": "true"}`
        """
        return pulumi.get(self, "system_tags")

    @property
    @pulumi.getter(name="taskRecordId")
    def task_record_id(self) -> builtins.str:
        """
        The OCID of taskRecord assocaited with the step
        """
        return pulumi.get(self, "task_record_id")

    @property
    @pulumi.getter(name="timeEnded")
    def time_ended(self) -> builtins.str:
        """
        The time the task ended. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_ended")

    @property
    @pulumi.getter(name="timeStarted")
    def time_started(self) -> builtins.str:
        """
        The time the task started. An RFC3339 formatted datetime string
        """
        return pulumi.get(self, "time_started")


